/*
#############################################################################################
# Mass Effect 2 (1.2.1604.0) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: SFXGame_functions.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function SFXGame.BioDestinationArrow.SetArrowColor
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  clr                            ( CPF_Parm )

void ABioDestinationArrow::eventSetArrowColor ( unsigned char clr )
{
	static UFunction* pFnSetArrowColor = NULL;

	if ( ! pFnSetArrowColor )
		pFnSetArrowColor = (UFunction*) UObject::GObjObjects()->Data[ 35493 ];

	ABioDestinationArrow_eventSetArrowColor_Parms SetArrowColor_Parms;
	SetArrowColor_Parms.clr = clr;

	this->ProcessEvent ( pFnSetArrowColor, &SetArrowColor_Parms, NULL );
};

// Function SFXGame.BioHintSystemBase.TruncateNotificationBody
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 sBody                          ( CPF_Parm | CPF_NeedCtorLink )

struct FString UBioHintSystemBase::eventTruncateNotificationBody ( struct FString sBody )
{
	static UFunction* pFnTruncateNotificationBody = NULL;

	if ( ! pFnTruncateNotificationBody )
		pFnTruncateNotificationBody = (UFunction*) UObject::GObjObjects()->Data[ 37299 ];

	UBioHintSystemBase_eventTruncateNotificationBody_Parms TruncateNotificationBody_Parms;
	memcpy ( &TruncateNotificationBody_Parms.sBody, &sBody, 0xC );

	this->ProcessEvent ( pFnTruncateNotificationBody, &TruncateNotificationBody_Parms, NULL );

	return TruncateNotificationBody_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystemBase.CacheCurrentState
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioHintSystemBase::eventCacheCurrentState ( )
{
	static UFunction* pFnCacheCurrentState = NULL;

	if ( ! pFnCacheCurrentState )
		pFnCacheCurrentState = (UFunction*) UObject::GObjObjects()->Data[ 37298 ];

	UBioHintSystemBase_eventCacheCurrentState_Parms CacheCurrentState_Parms;

	this->ProcessEvent ( pFnCacheCurrentState, &CacheCurrentState_Parms, NULL );
};

// Function SFXGame.BioHintSystemBase.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void UBioHintSystemBase::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 37296 ];

	UBioHintSystemBase_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.TimeSince
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fTime                          ( CPF_Parm )

float UBioHintSystemBase::TimeSince ( float fTime )
{
	static UFunction* pFnTimeSince = NULL;

	if ( ! pFnTimeSince )
		pFnTimeSince = (UFunction*) UObject::GObjObjects()->Data[ 37293 ];

	UBioHintSystemBase_execTimeSince_Parms TimeSince_Parms;
	TimeSince_Parms.fTime = fTime;

	pFnTimeSince->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTimeSince, &TimeSince_Parms, NULL );

	pFnTimeSince->FunctionFlags |= 0x400;

	return TimeSince_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystemBase.GetPreviousTime
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nAge                           ( CPF_Parm )
// struct FHintTrackingData       oData                          ( CPF_Parm | CPF_OutParm )

float UBioHintSystemBase::GetPreviousTime ( int nAge, struct FHintTrackingData* oData )
{
	static UFunction* pFnGetPreviousTime = NULL;

	if ( ! pFnGetPreviousTime )
		pFnGetPreviousTime = (UFunction*) UObject::GObjObjects()->Data[ 37289 ];

	UBioHintSystemBase_execGetPreviousTime_Parms GetPreviousTime_Parms;
	GetPreviousTime_Parms.nAge = nAge;

	pFnGetPreviousTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPreviousTime, &GetPreviousTime_Parms, NULL );

	pFnGetPreviousTime->FunctionFlags |= 0x400;

	if ( oData )
		memcpy ( oData, &GetPreviousTime_Parms.oData, 0x38 );

	return GetPreviousTime_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystemBase.GetTrackingData
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FHintTrackingData       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmEvent                        ( CPF_Parm )
// struct FName                   nmContext                      ( CPF_OptionalParm | CPF_Parm )

struct FHintTrackingData UBioHintSystemBase::GetTrackingData ( struct FName nmEvent, struct FName nmContext )
{
	static UFunction* pFnGetTrackingData = NULL;

	if ( ! pFnGetTrackingData )
		pFnGetTrackingData = (UFunction*) UObject::GObjObjects()->Data[ 37285 ];

	UBioHintSystemBase_execGetTrackingData_Parms GetTrackingData_Parms;
	memcpy ( &GetTrackingData_Parms.nmEvent, &nmEvent, 0x8 );
	memcpy ( &GetTrackingData_Parms.nmContext, &nmContext, 0x8 );

	pFnGetTrackingData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTrackingData, &GetTrackingData_Parms, NULL );

	pFnGetTrackingData->FunctionFlags |= 0x400;

	return GetTrackingData_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystemBase.Clear
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioHintSystemBase::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 37284 ];

	UBioHintSystemBase_execClear_Parms Clear_Parms;

	pFnClear->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );

	pFnClear->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.HintEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmEvent                        ( CPF_Parm )
// struct FName                   nmContext                      ( CPF_OptionalParm | CPF_Parm )

void UBioHintSystemBase::HintEvent ( struct FName nmEvent, struct FName nmContext )
{
	static UFunction* pFnHintEvent = NULL;

	if ( ! pFnHintEvent )
		pFnHintEvent = (UFunction*) UObject::GObjObjects()->Data[ 37281 ];

	UBioHintSystemBase_execHintEvent_Parms HintEvent_Parms;
	memcpy ( &HintEvent_Parms.nmEvent, &nmEvent, 0x8 );
	memcpy ( &HintEvent_Parms.nmContext, &nmContext, 0x8 );

	pFnHintEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHintEvent, &HintEvent_Parms, NULL );

	pFnHintEvent->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.ClearNotifications
// [0x00020002] 
// Parameters infos:

void UBioHintSystemBase::ClearNotifications ( )
{
	static UFunction* pFnClearNotifications = NULL;

	if ( ! pFnClearNotifications )
		pFnClearNotifications = (UFunction*) UObject::GObjObjects()->Data[ 37280 ];

	UBioHintSystemBase_execClearNotifications_Parms ClearNotifications_Parms;

	this->ProcessEvent ( pFnClearNotifications, &ClearNotifications_Parms, NULL );
};

// Function SFXGame.BioHintSystemBase.OnNotificationCompleted
// [0x00820002] 
// Parameters infos:

void UBioHintSystemBase::OnNotificationCompleted ( )
{
	static UFunction* pFnOnNotificationCompleted = NULL;

	if ( ! pFnOnNotificationCompleted )
		pFnOnNotificationCompleted = (UFunction*) UObject::GObjObjects()->Data[ 37276 ];

	UBioHintSystemBase_execOnNotificationCompleted_Parms OnNotificationCompleted_Parms;

	this->ProcessEvent ( pFnOnNotificationCompleted, &OnNotificationCompleted_Parms, NULL );
};

// Function SFXGame.BioHintSystemBase.IsHintsOptionDisabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystemBase::eventIsHintsOptionDisabled ( )
{
	static UFunction* pFnIsHintsOptionDisabled = NULL;

	if ( ! pFnIsHintsOptionDisabled )
		pFnIsHintsOptionDisabled = (UFunction*) UObject::GObjObjects()->Data[ 37273 ];

	UBioHintSystemBase_eventIsHintsOptionDisabled_Parms IsHintsOptionDisabled_Parms;

	this->ProcessEvent ( pFnIsHintsOptionDisabled, &IsHintsOptionDisabled_Parms, NULL );

	return IsHintsOptionDisabled_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystemBase.SetNotificationPaused
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVal                           ( CPF_Parm )

void UBioHintSystemBase::SetNotificationPaused ( unsigned long bVal )
{
	static UFunction* pFnSetNotificationPaused = NULL;

	if ( ! pFnSetNotificationPaused )
		pFnSetNotificationPaused = (UFunction*) UObject::GObjObjects()->Data[ 37271 ];

	UBioHintSystemBase_execSetNotificationPaused_Parms SetNotificationPaused_Parms;
	SetNotificationPaused_Parms.bVal = bVal;

	this->ProcessEvent ( pFnSetNotificationPaused, &SetNotificationPaused_Parms, NULL );
};

// Function SFXGame.BioHintSystemBase.JournalUpdate
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioHintSystemBase::eventJournalUpdate ( )
{
	static UFunction* pFnJournalUpdate = NULL;

	if ( ! pFnJournalUpdate )
		pFnJournalUpdate = (UFunction*) UObject::GObjObjects()->Data[ 37268 ];

	UBioHintSystemBase_eventJournalUpdate_Parms JournalUpdate_Parms;

	this->ProcessEvent ( pFnJournalUpdate, &JournalUpdate_Parms, NULL );
};

// Function SFXGame.BioHintSystemBase.CodexUpdate
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioHintSystemBase::eventCodexUpdate ( )
{
	static UFunction* pFnCodexUpdate = NULL;

	if ( ! pFnCodexUpdate )
		pFnCodexUpdate = (UFunction*) UObject::GObjObjects()->Data[ 37265 ];

	UBioHintSystemBase_eventCodexUpdate_Parms CodexUpdate_Parms;

	this->ProcessEvent ( pFnCodexUpdate, &CodexUpdate_Parms, NULL );
};

// Function SFXGame.BioHintSystemBase.PopulateNotificationOneParameter
// [0x00480400] ( FUNC_Native )
// Parameters infos:
// struct FSFXNotificationData    oNoteData                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            nParam1                        ( CPF_Parm )
// struct FSFXNotification        oNotification                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioHintSystemBase::PopulateNotificationOneParameter ( struct FSFXNotificationData oNoteData, int nParam1, struct FSFXNotification* oNotification )
{
	static UFunction* pFnPopulateNotificationOneParameter = NULL;

	if ( ! pFnPopulateNotificationOneParameter )
		pFnPopulateNotificationOneParameter = (UFunction*) UObject::GObjObjects()->Data[ 37261 ];

	UBioHintSystemBase_execPopulateNotificationOneParameter_Parms PopulateNotificationOneParameter_Parms;
	memcpy ( &PopulateNotificationOneParameter_Parms.oNoteData, &oNoteData, 0x4C );
	PopulateNotificationOneParameter_Parms.nParam1 = nParam1;

	pFnPopulateNotificationOneParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopulateNotificationOneParameter, &PopulateNotificationOneParameter_Parms, NULL );

	pFnPopulateNotificationOneParameter->FunctionFlags |= 0x400;

	if ( oNotification )
		memcpy ( oNotification, &PopulateNotificationOneParameter_Parms.oNotification, 0x5C );
};

// Function SFXGame.BioHintSystemBase.GetNotificationData
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FSFXNotificationData    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   nmNotificationType             ( CPF_Parm )

struct FSFXNotificationData UBioHintSystemBase::GetNotificationData ( struct FName nmNotificationType )
{
	static UFunction* pFnGetNotificationData = NULL;

	if ( ! pFnGetNotificationData )
		pFnGetNotificationData = (UFunction*) UObject::GObjObjects()->Data[ 37258 ];

	UBioHintSystemBase_execGetNotificationData_Parms GetNotificationData_Parms;
	memcpy ( &GetNotificationData_Parms.nmNotificationType, &nmNotificationType, 0x8 );

	pFnGetNotificationData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNotificationData, &GetNotificationData_Parms, NULL );

	pFnGetNotificationData->FunctionFlags |= 0x400;

	return GetNotificationData_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystemBase.ShowNotification
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FSFXNotification        oNotification                  ( CPF_Parm | CPF_NeedCtorLink )

void UBioHintSystemBase::ShowNotification ( struct FSFXNotification oNotification )
{
	static UFunction* pFnShowNotification = NULL;

	if ( ! pFnShowNotification )
		pFnShowNotification = (UFunction*) UObject::GObjObjects()->Data[ 37256 ];

	UBioHintSystemBase_execShowNotification_Parms ShowNotification_Parms;
	memcpy ( &ShowNotification_Parms.oNotification, &oNotification, 0x5C );

	pFnShowNotification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowNotification, &ShowNotification_Parms, NULL );

	pFnShowNotification->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_Custom
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          nDisplayTime                   ( CPF_Parm )
// struct FString                 sTitle                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sSubtitle                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sBody                          ( CPF_Parm | CPF_NeedCtorLink )
// class UTexture*                Image                          ( CPF_Parm )
// struct FName                   nRemoteEvent                   ( CPF_Parm )
// struct FName                   nmType                         ( CPF_OptionalParm | CPF_Parm )
// struct FName                   nmSound                        ( CPF_OptionalParm | CPF_Parm )
// int                            Priority                       ( CPF_OptionalParm | CPF_Parm )
// int                            FlourishID                     ( CPF_OptionalParm | CPF_Parm )

void UBioHintSystemBase::AddNotification_Custom ( float nDisplayTime, struct FString sTitle, struct FString sSubtitle, struct FString sBody, class UTexture* Image, struct FName nRemoteEvent, struct FName nmType, struct FName nmSound, int Priority, int FlourishID )
{
	static UFunction* pFnAddNotification_Custom = NULL;

	if ( ! pFnAddNotification_Custom )
		pFnAddNotification_Custom = (UFunction*) UObject::GObjObjects()->Data[ 37245 ];

	UBioHintSystemBase_execAddNotification_Custom_Parms AddNotification_Custom_Parms;
	AddNotification_Custom_Parms.nDisplayTime = nDisplayTime;
	memcpy ( &AddNotification_Custom_Parms.sTitle, &sTitle, 0xC );
	memcpy ( &AddNotification_Custom_Parms.sSubtitle, &sSubtitle, 0xC );
	memcpy ( &AddNotification_Custom_Parms.sBody, &sBody, 0xC );
	AddNotification_Custom_Parms.Image = Image;
	memcpy ( &AddNotification_Custom_Parms.nRemoteEvent, &nRemoteEvent, 0x8 );
	memcpy ( &AddNotification_Custom_Parms.nmType, &nmType, 0x8 );
	memcpy ( &AddNotification_Custom_Parms.nmSound, &nmSound, 0x8 );
	AddNotification_Custom_Parms.Priority = Priority;
	AddNotification_Custom_Parms.FlourishID = FlourishID;

	pFnAddNotification_Custom->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_Custom, &AddNotification_Custom_Parms, NULL );

	pFnAddNotification_Custom->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_AchievementUnlocked
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FAchievementData        Data                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FGrinderAchievement     Grinder                        ( CPF_Parm )

void UBioHintSystemBase::AddNotification_AchievementUnlocked ( struct FAchievementData Data, struct FGrinderAchievement Grinder )
{
	static UFunction* pFnAddNotification_AchievementUnlocked = NULL;

	if ( ! pFnAddNotification_AchievementUnlocked )
		pFnAddNotification_AchievementUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 37242 ];

	UBioHintSystemBase_execAddNotification_AchievementUnlocked_Parms AddNotification_AchievementUnlocked_Parms;
	memcpy ( &AddNotification_AchievementUnlocked_Parms.Data, &Data, 0x2C );
	memcpy ( &AddNotification_AchievementUnlocked_Parms.Grinder, &Grinder, 0x18 );

	pFnAddNotification_AchievementUnlocked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_AchievementUnlocked, &AddNotification_AchievementUnlocked_Parms, NULL );

	pFnAddNotification_AchievementUnlocked->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_AchievementChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sTitle                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sSubtitle                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sBody                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            currentCount                   ( CPF_Parm )
// int                            totalCount                     ( CPF_Parm )

void UBioHintSystemBase::AddNotification_AchievementChange ( struct FString sTitle, struct FString sSubtitle, struct FString sBody, int currentCount, int totalCount )
{
	static UFunction* pFnAddNotification_AchievementChange = NULL;

	if ( ! pFnAddNotification_AchievementChange )
		pFnAddNotification_AchievementChange = (UFunction*) UObject::GObjObjects()->Data[ 37202 ];

	UBioHintSystemBase_execAddNotification_AchievementChange_Parms AddNotification_AchievementChange_Parms;
	memcpy ( &AddNotification_AchievementChange_Parms.sTitle, &sTitle, 0xC );
	memcpy ( &AddNotification_AchievementChange_Parms.sSubtitle, &sSubtitle, 0xC );
	memcpy ( &AddNotification_AchievementChange_Parms.sBody, &sBody, 0xC );
	AddNotification_AchievementChange_Parms.currentCount = currentCount;
	AddNotification_AchievementChange_Parms.totalCount = totalCount;

	pFnAddNotification_AchievementChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_AchievementChange, &AddNotification_AchievementChange_Parms, NULL );

	pFnAddNotification_AchievementChange->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_AmmoRecovery
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nAmount                        ( CPF_Parm )

void UBioHintSystemBase::AddNotification_AmmoRecovery ( int nAmount )
{
	static UFunction* pFnAddNotification_AmmoRecovery = NULL;

	if ( ! pFnAddNotification_AmmoRecovery )
		pFnAddNotification_AmmoRecovery = (UFunction*) UObject::GObjObjects()->Data[ 37200 ];

	UBioHintSystemBase_execAddNotification_AmmoRecovery_Parms AddNotification_AmmoRecovery_Parms;
	AddNotification_AmmoRecovery_Parms.nAmount = nAmount;

	pFnAddNotification_AmmoRecovery->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_AmmoRecovery, &AddNotification_AmmoRecovery_Parms, NULL );

	pFnAddNotification_AmmoRecovery->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_HeavyWeaponAmmoRecovery
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nAmount                        ( CPF_Parm )

void UBioHintSystemBase::AddNotification_HeavyWeaponAmmoRecovery ( int nAmount )
{
	static UFunction* pFnAddNotification_HeavyWeaponAmmoRecovery = NULL;

	if ( ! pFnAddNotification_HeavyWeaponAmmoRecovery )
		pFnAddNotification_HeavyWeaponAmmoRecovery = (UFunction*) UObject::GObjObjects()->Data[ 37198 ];

	UBioHintSystemBase_execAddNotification_HeavyWeaponAmmoRecovery_Parms AddNotification_HeavyWeaponAmmoRecovery_Parms;
	AddNotification_HeavyWeaponAmmoRecovery_Parms.nAmount = nAmount;

	pFnAddNotification_HeavyWeaponAmmoRecovery->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_HeavyWeaponAmmoRecovery, &AddNotification_HeavyWeaponAmmoRecovery_Parms, NULL );

	pFnAddNotification_HeavyWeaponAmmoRecovery->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_ElementZeroRecovery
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nAmount                        ( CPF_Parm )

void UBioHintSystemBase::AddNotification_ElementZeroRecovery ( int nAmount )
{
	static UFunction* pFnAddNotification_ElementZeroRecovery = NULL;

	if ( ! pFnAddNotification_ElementZeroRecovery )
		pFnAddNotification_ElementZeroRecovery = (UFunction*) UObject::GObjObjects()->Data[ 37196 ];

	UBioHintSystemBase_execAddNotification_ElementZeroRecovery_Parms AddNotification_ElementZeroRecovery_Parms;
	AddNotification_ElementZeroRecovery_Parms.nAmount = nAmount;

	pFnAddNotification_ElementZeroRecovery->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_ElementZeroRecovery, &AddNotification_ElementZeroRecovery_Parms, NULL );

	pFnAddNotification_ElementZeroRecovery->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_PlatinumRecovery
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nAmount                        ( CPF_Parm )

void UBioHintSystemBase::AddNotification_PlatinumRecovery ( int nAmount )
{
	static UFunction* pFnAddNotification_PlatinumRecovery = NULL;

	if ( ! pFnAddNotification_PlatinumRecovery )
		pFnAddNotification_PlatinumRecovery = (UFunction*) UObject::GObjObjects()->Data[ 37194 ];

	UBioHintSystemBase_execAddNotification_PlatinumRecovery_Parms AddNotification_PlatinumRecovery_Parms;
	AddNotification_PlatinumRecovery_Parms.nAmount = nAmount;

	pFnAddNotification_PlatinumRecovery->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_PlatinumRecovery, &AddNotification_PlatinumRecovery_Parms, NULL );

	pFnAddNotification_PlatinumRecovery->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_PalladiumRecovery
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nAmount                        ( CPF_Parm )

void UBioHintSystemBase::AddNotification_PalladiumRecovery ( int nAmount )
{
	static UFunction* pFnAddNotification_PalladiumRecovery = NULL;

	if ( ! pFnAddNotification_PalladiumRecovery )
		pFnAddNotification_PalladiumRecovery = (UFunction*) UObject::GObjObjects()->Data[ 37192 ];

	UBioHintSystemBase_execAddNotification_PalladiumRecovery_Parms AddNotification_PalladiumRecovery_Parms;
	AddNotification_PalladiumRecovery_Parms.nAmount = nAmount;

	pFnAddNotification_PalladiumRecovery->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_PalladiumRecovery, &AddNotification_PalladiumRecovery_Parms, NULL );

	pFnAddNotification_PalladiumRecovery->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_IridiumRecovery
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nAmount                        ( CPF_Parm )

void UBioHintSystemBase::AddNotification_IridiumRecovery ( int nAmount )
{
	static UFunction* pFnAddNotification_IridiumRecovery = NULL;

	if ( ! pFnAddNotification_IridiumRecovery )
		pFnAddNotification_IridiumRecovery = (UFunction*) UObject::GObjObjects()->Data[ 37190 ];

	UBioHintSystemBase_execAddNotification_IridiumRecovery_Parms AddNotification_IridiumRecovery_Parms;
	AddNotification_IridiumRecovery_Parms.nAmount = nAmount;

	pFnAddNotification_IridiumRecovery->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_IridiumRecovery, &AddNotification_IridiumRecovery_Parms, NULL );

	pFnAddNotification_IridiumRecovery->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_RenegadeChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nAmount                        ( CPF_Parm )

void UBioHintSystemBase::AddNotification_RenegadeChange ( int nAmount )
{
	static UFunction* pFnAddNotification_RenegadeChange = NULL;

	if ( ! pFnAddNotification_RenegadeChange )
		pFnAddNotification_RenegadeChange = (UFunction*) UObject::GObjObjects()->Data[ 37188 ];

	UBioHintSystemBase_execAddNotification_RenegadeChange_Parms AddNotification_RenegadeChange_Parms;
	AddNotification_RenegadeChange_Parms.nAmount = nAmount;

	pFnAddNotification_RenegadeChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_RenegadeChange, &AddNotification_RenegadeChange_Parms, NULL );

	pFnAddNotification_RenegadeChange->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_ParagonChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nAmount                        ( CPF_Parm )

void UBioHintSystemBase::AddNotification_ParagonChange ( int nAmount )
{
	static UFunction* pFnAddNotification_ParagonChange = NULL;

	if ( ! pFnAddNotification_ParagonChange )
		pFnAddNotification_ParagonChange = (UFunction*) UObject::GObjObjects()->Data[ 37186 ];

	UBioHintSystemBase_execAddNotification_ParagonChange_Parms AddNotification_ParagonChange_Parms;
	AddNotification_ParagonChange_Parms.nAmount = nAmount;

	pFnAddNotification_ParagonChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_ParagonChange, &AddNotification_ParagonChange_Parms, NULL );

	pFnAddNotification_ParagonChange->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_MedigelRecovery
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nAmount                        ( CPF_Parm )

void UBioHintSystemBase::AddNotification_MedigelRecovery ( int nAmount )
{
	static UFunction* pFnAddNotification_MedigelRecovery = NULL;

	if ( ! pFnAddNotification_MedigelRecovery )
		pFnAddNotification_MedigelRecovery = (UFunction*) UObject::GObjObjects()->Data[ 37184 ];

	UBioHintSystemBase_execAddNotification_MedigelRecovery_Parms AddNotification_MedigelRecovery_Parms;
	AddNotification_MedigelRecovery_Parms.nAmount = nAmount;

	pFnAddNotification_MedigelRecovery->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_MedigelRecovery, &AddNotification_MedigelRecovery_Parms, NULL );

	pFnAddNotification_MedigelRecovery->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_CreditRecovery
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nAmount                        ( CPF_Parm )

void UBioHintSystemBase::AddNotification_CreditRecovery ( int nAmount )
{
	static UFunction* pFnAddNotification_CreditRecovery = NULL;

	if ( ! pFnAddNotification_CreditRecovery )
		pFnAddNotification_CreditRecovery = (UFunction*) UObject::GObjObjects()->Data[ 37182 ];

	UBioHintSystemBase_execAddNotification_CreditRecovery_Parms AddNotification_CreditRecovery_Parms;
	AddNotification_CreditRecovery_Parms.nAmount = nAmount;

	pFnAddNotification_CreditRecovery->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_CreditRecovery, &AddNotification_CreditRecovery_Parms, NULL );

	pFnAddNotification_CreditRecovery->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_CodexChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioHintSystemBase::AddNotification_CodexChange ( )
{
	static UFunction* pFnAddNotification_CodexChange = NULL;

	if ( ! pFnAddNotification_CodexChange )
		pFnAddNotification_CodexChange = (UFunction*) UObject::GObjObjects()->Data[ 37181 ];

	UBioHintSystemBase_execAddNotification_CodexChange_Parms AddNotification_CodexChange_Parms;

	pFnAddNotification_CodexChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_CodexChange, &AddNotification_CodexChange_Parms, NULL );

	pFnAddNotification_CodexChange->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification_JournalChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioHintSystemBase::AddNotification_JournalChange ( )
{
	static UFunction* pFnAddNotification_JournalChange = NULL;

	if ( ! pFnAddNotification_JournalChange )
		pFnAddNotification_JournalChange = (UFunction*) UObject::GObjObjects()->Data[ 37180 ];

	UBioHintSystemBase_execAddNotification_JournalChange_Parms AddNotification_JournalChange_Parms;

	pFnAddNotification_JournalChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification_JournalChange, &AddNotification_JournalChange_Parms, NULL );

	pFnAddNotification_JournalChange->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHintSystemBase.AddNotification
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FSFXNotification        oNotification                  ( CPF_Parm | CPF_NeedCtorLink )

void UBioHintSystemBase::AddNotification ( struct FSFXNotification oNotification )
{
	static UFunction* pFnAddNotification = NULL;

	if ( ! pFnAddNotification )
		pFnAddNotification = (UFunction*) UObject::GObjObjects()->Data[ 37178 ];

	UBioHintSystemBase_execAddNotification_Parms AddNotification_Parms;
	memcpy ( &AddNotification_Parms.oNotification, &oNotification, 0x5C );

	pFnAddNotification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotification, &AddNotification_Parms, NULL );

	pFnAddNotification->FunctionFlags |= 0x400;
};

// Function SFXGame.BioObject.ValidateOwnershipSemantics
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 Target                         ( CPF_Parm )
// unsigned long                  isVerbose                      ( CPF_OptionalParm | CPF_Parm )
// int                            recurrence                     ( CPF_OptionalParm | CPF_Parm )

bool UBioObject::ValidateOwnershipSemantics ( class UObject* Target, unsigned long isVerbose, int recurrence )
{
	static UFunction* pFnValidateOwnershipSemantics = NULL;

	if ( ! pFnValidateOwnershipSemantics )
		pFnValidateOwnershipSemantics = (UFunction*) UObject::GObjObjects()->Data[ 38853 ];

	UBioObject_execValidateOwnershipSemantics_Parms ValidateOwnershipSemantics_Parms;
	ValidateOwnershipSemantics_Parms.Target = Target;
	ValidateOwnershipSemantics_Parms.isVerbose = isVerbose;
	ValidateOwnershipSemantics_Parms.recurrence = recurrence;

	pFnValidateOwnershipSemantics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnValidateOwnershipSemantics, &ValidateOwnershipSemantics_Parms, NULL );

	pFnValidateOwnershipSemantics->FunctionFlags |= 0x400;

	return ValidateOwnershipSemantics_Parms.ReturnValue;
};

// Function SFXGame.BioObject.ParseIntoArray
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sDelimitedStrings              ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sDelimiter                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bCullEmptyStrings              ( CPF_Parm )
// TArray< struct FString >       aString                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioObject::ParseIntoArray ( struct FString sDelimitedStrings, struct FString sDelimiter, unsigned long bCullEmptyStrings, TArray< struct FString >* aString )
{
	static UFunction* pFnParseIntoArray = NULL;

	if ( ! pFnParseIntoArray )
		pFnParseIntoArray = (UFunction*) UObject::GObjObjects()->Data[ 38847 ];

	UBioObject_execParseIntoArray_Parms ParseIntoArray_Parms;
	memcpy ( &ParseIntoArray_Parms.sDelimitedStrings, &sDelimitedStrings, 0xC );
	memcpy ( &ParseIntoArray_Parms.sDelimiter, &sDelimiter, 0xC );
	ParseIntoArray_Parms.bCullEmptyStrings = bCullEmptyStrings;

	pFnParseIntoArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnParseIntoArray, &ParseIntoArray_Parms, NULL );

	pFnParseIntoArray->FunctionFlags |= 0x400;

	if ( aString )
		memcpy ( aString, &ParseIntoArray_Parms.aString, 0xC );
};

// Function SFXGame.BioObject.ParseIntoArrayWS
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FString                 whitespaceDelimitedStrings     ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FString >       Strings                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioObject::ParseIntoArrayWS ( struct FString whitespaceDelimitedStrings, TArray< struct FString >* Strings )
{
	static UFunction* pFnParseIntoArrayWS = NULL;

	if ( ! pFnParseIntoArrayWS )
		pFnParseIntoArrayWS = (UFunction*) UObject::GObjObjects()->Data[ 38843 ];

	UBioObject_execParseIntoArrayWS_Parms ParseIntoArrayWS_Parms;
	memcpy ( &ParseIntoArrayWS_Parms.whitespaceDelimitedStrings, &whitespaceDelimitedStrings, 0xC );

	pFnParseIntoArrayWS->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnParseIntoArrayWS, &ParseIntoArrayWS_Parms, NULL );

	pFnParseIntoArrayWS->FunctionFlags |= 0x400;

	if ( Strings )
		memcpy ( Strings, &ParseIntoArrayWS_Parms.Strings, 0xC );
};

// Function SFXGame.BioObject.GetEnumValue
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  clsEnumDefiner                 ( CPF_Parm )
// struct FName                   nmEnumField                    ( CPF_Parm )
// struct FName                   nmEnumValue                    ( CPF_Parm )
// unsigned char                  cEnumValue                     ( CPF_Parm | CPF_OutParm )

bool UBioObject::GetEnumValue ( class UClass* clsEnumDefiner, struct FName nmEnumField, struct FName nmEnumValue, unsigned char* cEnumValue )
{
	static UFunction* pFnGetEnumValue = NULL;

	if ( ! pFnGetEnumValue )
		pFnGetEnumValue = (UFunction*) UObject::GObjObjects()->Data[ 38837 ];

	UBioObject_execGetEnumValue_Parms GetEnumValue_Parms;
	GetEnumValue_Parms.clsEnumDefiner = clsEnumDefiner;
	memcpy ( &GetEnumValue_Parms.nmEnumField, &nmEnumField, 0x8 );
	memcpy ( &GetEnumValue_Parms.nmEnumValue, &nmEnumValue, 0x8 );

	pFnGetEnumValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEnumValue, &GetEnumValue_Parms, NULL );

	pFnGetEnumValue->FunctionFlags |= 0x400;

	if ( cEnumValue )
		*cEnumValue = GetEnumValue_Parms.cEnumValue;

	return GetEnumValue_Parms.ReturnValue;
};

// Function SFXGame.BioObject.FindClass
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmClass                        ( CPF_Parm )

class UClass* UBioObject::FindClass ( struct FName nmClass )
{
	static UFunction* pFnFindClass = NULL;

	if ( ! pFnFindClass )
		pFnFindClass = (UFunction*) UObject::GObjObjects()->Data[ 38834 ];

	UBioObject_execFindClass_Parms FindClass_Parms;
	memcpy ( &FindClass_Parms.nmClass, &nmClass, 0x8 );

	pFnFindClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindClass, &FindClass_Parms, NULL );

	pFnFindClass->FunctionFlags |= 0x400;

	return FindClass_Parms.ReturnValue;
};

// Function SFXGame.BioPhysicsSounds.GetSpeedSpecifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     oComp                          ( CPF_Parm | CPF_EditInline )
// float                          fSpeedToUse                    ( CPF_Parm )

float UBioPhysicsSounds::GetSpeedSpecifier ( class UPrimitiveComponent* oComp, float fSpeedToUse )
{
	static UFunction* pFnGetSpeedSpecifier = NULL;

	if ( ! pFnGetSpeedSpecifier )
		pFnGetSpeedSpecifier = (UFunction*) UObject::GObjObjects()->Data[ 41211 ];

	UBioPhysicsSounds_execGetSpeedSpecifier_Parms GetSpeedSpecifier_Parms;
	GetSpeedSpecifier_Parms.oComp = oComp;
	GetSpeedSpecifier_Parms.fSpeedToUse = fSpeedToUse;

	pFnGetSpeedSpecifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSpeedSpecifier, &GetSpeedSpecifier_Parms, NULL );

	pFnGetSpeedSpecifier->FunctionFlags |= 0x400;

	return GetSpeedSpecifier_Parms.ReturnValue;
};

// Function SFXGame.BioPhysicsSounds.GetMassSpecifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     oComp                          ( CPF_Parm | CPF_EditInline )

float UBioPhysicsSounds::GetMassSpecifier ( class UPrimitiveComponent* oComp )
{
	static UFunction* pFnGetMassSpecifier = NULL;

	if ( ! pFnGetMassSpecifier )
		pFnGetMassSpecifier = (UFunction*) UObject::GObjObjects()->Data[ 41208 ];

	UBioPhysicsSounds_execGetMassSpecifier_Parms GetMassSpecifier_Parms;
	GetMassSpecifier_Parms.oComp = oComp;

	pFnGetMassSpecifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMassSpecifier, &GetMassSpecifier_Parms, NULL );

	pFnGetMassSpecifier->FunctionFlags |= 0x400;

	return GetMassSpecifier_Parms.ReturnValue;
};

// Function SFXGame.BioPhysicsSounds.UpdateLastCollidedActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     oComp                          ( CPF_Parm | CPF_EditInline )
// class AActor*                  OtherActor                     ( CPF_Parm )

void UBioPhysicsSounds::UpdateLastCollidedActor ( class UPrimitiveComponent* oComp, class AActor* OtherActor )
{
	static UFunction* pFnUpdateLastCollidedActor = NULL;

	if ( ! pFnUpdateLastCollidedActor )
		pFnUpdateLastCollidedActor = (UFunction*) UObject::GObjObjects()->Data[ 41205 ];

	UBioPhysicsSounds_execUpdateLastCollidedActor_Parms UpdateLastCollidedActor_Parms;
	UpdateLastCollidedActor_Parms.oComp = oComp;
	UpdateLastCollidedActor_Parms.OtherActor = OtherActor;

	pFnUpdateLastCollidedActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateLastCollidedActor, &UpdateLastCollidedActor_Parms, NULL );

	pFnUpdateLastCollidedActor->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPhysicsSounds.UpdateLastTimePlayed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPrimitiveComponent*     oComp                          ( CPF_Parm | CPF_EditInline )

void UBioPhysicsSounds::UpdateLastTimePlayed ( class UPrimitiveComponent* oComp )
{
	static UFunction* pFnUpdateLastTimePlayed = NULL;

	if ( ! pFnUpdateLastTimePlayed )
		pFnUpdateLastTimePlayed = (UFunction*) UObject::GObjObjects()->Data[ 41203 ];

	UBioPhysicsSounds_execUpdateLastTimePlayed_Parms UpdateLastTimePlayed_Parms;
	UpdateLastTimePlayed_Parms.oComp = oComp;

	pFnUpdateLastTimePlayed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateLastTimePlayed, &UpdateLastTimePlayed_Parms, NULL );

	pFnUpdateLastTimePlayed->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPhysicsSounds.IsTooSlowToPlay
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     oComp                          ( CPF_Parm | CPF_EditInline )

bool UBioPhysicsSounds::IsTooSlowToPlay ( class UPrimitiveComponent* oComp )
{
	static UFunction* pFnIsTooSlowToPlay = NULL;

	if ( ! pFnIsTooSlowToPlay )
		pFnIsTooSlowToPlay = (UFunction*) UObject::GObjObjects()->Data[ 41200 ];

	UBioPhysicsSounds_execIsTooSlowToPlay_Parms IsTooSlowToPlay_Parms;
	IsTooSlowToPlay_Parms.oComp = oComp;

	pFnIsTooSlowToPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTooSlowToPlay, &IsTooSlowToPlay_Parms, NULL );

	pFnIsTooSlowToPlay->FunctionFlags |= 0x400;

	return IsTooSlowToPlay_Parms.ReturnValue;
};

// Function SFXGame.BioPhysicsSounds.IsSameCollidedActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     oComp                          ( CPF_Parm | CPF_EditInline )
// class AActor*                  OtherActor                     ( CPF_Parm )

bool UBioPhysicsSounds::IsSameCollidedActor ( class UPrimitiveComponent* oComp, class AActor* OtherActor )
{
	static UFunction* pFnIsSameCollidedActor = NULL;

	if ( ! pFnIsSameCollidedActor )
		pFnIsSameCollidedActor = (UFunction*) UObject::GObjObjects()->Data[ 41196 ];

	UBioPhysicsSounds_execIsSameCollidedActor_Parms IsSameCollidedActor_Parms;
	IsSameCollidedActor_Parms.oComp = oComp;
	IsSameCollidedActor_Parms.OtherActor = OtherActor;

	pFnIsSameCollidedActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSameCollidedActor, &IsSameCollidedActor_Parms, NULL );

	pFnIsSameCollidedActor->FunctionFlags |= 0x400;

	return IsSameCollidedActor_Parms.ReturnValue;
};

// Function SFXGame.BioPhysicsSounds.IsTooSoonToPlay
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     oComp                          ( CPF_Parm | CPF_EditInline )

bool UBioPhysicsSounds::IsTooSoonToPlay ( class UPrimitiveComponent* oComp )
{
	static UFunction* pFnIsTooSoonToPlay = NULL;

	if ( ! pFnIsTooSoonToPlay )
		pFnIsTooSoonToPlay = (UFunction*) UObject::GObjObjects()->Data[ 41193 ];

	UBioPhysicsSounds_execIsTooSoonToPlay_Parms IsTooSoonToPlay_Parms;
	IsTooSoonToPlay_Parms.oComp = oComp;

	pFnIsTooSoonToPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTooSoonToPlay, &IsTooSoonToPlay_Parms, NULL );

	pFnIsTooSoonToPlay->FunctionFlags |= 0x400;

	return IsTooSoonToPlay_Parms.ReturnValue;
};

// Function SFXGame.BioPhysicsSounds.CanPlay
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrimitiveComponent*     oComp0                         ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     oComp1                         ( CPF_Parm | CPF_EditInline )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioPhysicsSounds::CanPlay ( class UPrimitiveComponent* oComp0, class UPrimitiveComponent* oComp1, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnCanPlay = NULL;

	if ( ! pFnCanPlay )
		pFnCanPlay = (UFunction*) UObject::GObjObjects()->Data[ 41188 ];

	UBioPhysicsSounds_execCanPlay_Parms CanPlay_Parms;
	CanPlay_Parms.oComp0 = oComp0;
	CanPlay_Parms.oComp1 = oComp1;

	pFnCanPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanPlay, &CanPlay_Parms, NULL );

	pFnCanPlay->FunctionFlags |= 0x400;

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &CanPlay_Parms.RigidCollisionData, 0x24 );

	return CanPlay_Parms.ReturnValue;
};

// Function SFXGame.BioPhysicsSounds.GetPhysMatWwiseType
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )

int UBioPhysicsSounds::GetPhysMatWwiseType ( class UPhysicalMaterial* PhysMat )
{
	static UFunction* pFnGetPhysMatWwiseType = NULL;

	if ( ! pFnGetPhysMatWwiseType )
		pFnGetPhysMatWwiseType = (UFunction*) UObject::GObjObjects()->Data[ 41182 ];

	UBioPhysicsSounds_execGetPhysMatWwiseType_Parms GetPhysMatWwiseType_Parms;
	GetPhysMatWwiseType_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetPhysMatWwiseType, &GetPhysMatWwiseType_Parms, NULL );

	return GetPhysMatWwiseType_Parms.ReturnValue;
};

// Function SFXGame.BioPhysicsSounds.GetWwiseEvent
// [0x00020002] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )

class UWwiseEvent* UBioPhysicsSounds::GetWwiseEvent ( class UPhysicalMaterial* PhysMat )
{
	static UFunction* pFnGetWwiseEvent = NULL;

	if ( ! pFnGetWwiseEvent )
		pFnGetWwiseEvent = (UFunction*) UObject::GObjObjects()->Data[ 41174 ];

	UBioPhysicsSounds_execGetWwiseEvent_Parms GetWwiseEvent_Parms;
	GetWwiseEvent_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetWwiseEvent, &GetWwiseEvent_Parms, NULL );

	return GetWwiseEvent_Parms.ReturnValue;
};

// Function SFXGame.BioPhysicsSounds.PlaySoundOnPhysMatAt
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AGameInfo*               Game                           ( CPF_Parm )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )
// class UPhysicalMaterial*       PhysMatSweetener               ( CPF_Parm )
// struct FVector                 pos                            ( CPF_Parm )
// TArray< struct FString >       RTPCNames                      ( CPF_Parm | CPF_NeedCtorLink )
// TArray< float >                RTPCValues                     ( CPF_Parm | CPF_NeedCtorLink )

void UBioPhysicsSounds::eventPlaySoundOnPhysMatAt ( class AGameInfo* Game, class UPhysicalMaterial* PhysMat, class UPhysicalMaterial* PhysMatSweetener, struct FVector pos, TArray< struct FString > RTPCNames, TArray< float > RTPCValues )
{
	static UFunction* pFnPlaySoundOnPhysMatAt = NULL;

	if ( ! pFnPlaySoundOnPhysMatAt )
		pFnPlaySoundOnPhysMatAt = (UFunction*) UObject::GObjObjects()->Data[ 41161 ];

	UBioPhysicsSounds_eventPlaySoundOnPhysMatAt_Parms PlaySoundOnPhysMatAt_Parms;
	PlaySoundOnPhysMatAt_Parms.Game = Game;
	PlaySoundOnPhysMatAt_Parms.PhysMat = PhysMat;
	PlaySoundOnPhysMatAt_Parms.PhysMatSweetener = PhysMatSweetener;
	memcpy ( &PlaySoundOnPhysMatAt_Parms.pos, &pos, 0xC );
	memcpy ( &PlaySoundOnPhysMatAt_Parms.RTPCNames, &RTPCNames, 0xC );
	memcpy ( &PlaySoundOnPhysMatAt_Parms.RTPCValues, &RTPCValues, 0xC );

	this->ProcessEvent ( pFnPlaySoundOnPhysMatAt, &PlaySoundOnPhysMatAt_Parms, NULL );
};

// Function SFXGame.SFXGalaxyMapObject.EnumerateChildren
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXGalaxyMapObject::eventEnumerateChildren ( )
{
	static UFunction* pFnEnumerateChildren = NULL;

	if ( ! pFnEnumerateChildren )
		pFnEnumerateChildren = (UFunction*) UObject::GObjObjects()->Data[ 41248 ];

	USFXGalaxyMapObject_eventEnumerateChildren_Parms EnumerateChildren_Parms;

	this->ProcessEvent ( pFnEnumerateChildren, &EnumerateChildren_Parms, NULL );
};

// Function SFXGame.SFXGalaxyMapObject.LoadFrom2DA
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGalaxyMapObject::LoadFrom2DA ( )
{
	static UFunction* pFnLoadFrom2DA = NULL;

	if ( ! pFnLoadFrom2DA )
		pFnLoadFrom2DA = (UFunction*) UObject::GObjObjects()->Data[ 41246 ];

	USFXGalaxyMapObject_execLoadFrom2DA_Parms LoadFrom2DA_Parms;

	pFnLoadFrom2DA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadFrom2DA, &LoadFrom2DA_Parms, NULL );

	pFnLoadFrom2DA->FunctionFlags |= 0x400;

	return LoadFrom2DA_Parms.ReturnValue;
};

// Function SFXGame.SFXGalaxyMapObject.GetChildren
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// TArray< class USFXGalaxyMapObject* > Children                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGalaxyMapObject::eventGetChildren ( TArray< class USFXGalaxyMapObject* >* Children )
{
	static UFunction* pFnGetChildren = NULL;

	if ( ! pFnGetChildren )
		pFnGetChildren = (UFunction*) UObject::GObjObjects()->Data[ 41243 ];

	USFXGalaxyMapObject_eventGetChildren_Parms GetChildren_Parms;

	this->ProcessEvent ( pFnGetChildren, &GetChildren_Parms, NULL );

	if ( Children )
		memcpy ( Children, &GetChildren_Parms.Children, 0xC );
};

// Function SFXGame.SFXGalaxyMapObject.RemoveChild
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class USFXGalaxyMapObject*     Child                          ( CPF_Parm )

void USFXGalaxyMapObject::eventRemoveChild ( class USFXGalaxyMapObject* Child )
{
	static UFunction* pFnRemoveChild = NULL;

	if ( ! pFnRemoveChild )
		pFnRemoveChild = (UFunction*) UObject::GObjObjects()->Data[ 41241 ];

	USFXGalaxyMapObject_eventRemoveChild_Parms RemoveChild_Parms;
	RemoveChild_Parms.Child = Child;

	this->ProcessEvent ( pFnRemoveChild, &RemoveChild_Parms, NULL );
};

// Function SFXGame.SFXGalaxyMapObject.AddChild
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class USFXGalaxyMapObject*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXGalaxyMapObject* USFXGalaxyMapObject::eventAddChild ( )
{
	static UFunction* pFnAddChild = NULL;

	if ( ! pFnAddChild )
		pFnAddChild = (UFunction*) UObject::GObjObjects()->Data[ 41239 ];

	USFXGalaxyMapObject_eventAddChild_Parms AddChild_Parms;

	this->ProcessEvent ( pFnAddChild, &AddChild_Parms, NULL );

	return AddChild_Parms.ReturnValue;
};

// Function SFXGame.BioPlanet.EnumerateChildren
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioPlanet::eventEnumerateChildren ( )
{
	static UFunction* pFnEnumerateChildren = NULL;

	if ( ! pFnEnumerateChildren )
		pFnEnumerateChildren = (UFunction*) UObject::GObjObjects()->Data[ 41401 ];

	UBioPlanet_eventEnumerateChildren_Parms EnumerateChildren_Parms;

	this->ProcessEvent ( pFnEnumerateChildren, &EnumerateChildren_Parms, NULL );
};

// Function SFXGame.BioPlanet.GetScaledResourceAmount
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  MineralType                    ( CPF_Parm )
// float                          UnscaledAmount                 ( CPF_Parm )

int UBioPlanet::eventGetScaledResourceAmount ( unsigned char MineralType, float UnscaledAmount )
{
	static UFunction* pFnGetScaledResourceAmount = NULL;

	if ( ! pFnGetScaledResourceAmount )
		pFnGetScaledResourceAmount = (UFunction*) UObject::GObjObjects()->Data[ 41397 ];

	UBioPlanet_eventGetScaledResourceAmount_Parms GetScaledResourceAmount_Parms;
	GetScaledResourceAmount_Parms.MineralType = MineralType;
	GetScaledResourceAmount_Parms.UnscaledAmount = UnscaledAmount;

	this->ProcessEvent ( pFnGetScaledResourceAmount, &GetScaledResourceAmount_Parms, NULL );

	return GetScaledResourceAmount_Parms.ReturnValue;
};

// Function SFXGame.BioPlanet.RemoveChild
// [0x00020002] 
// Parameters infos:
// class USFXGalaxyMapObject*     Child                          ( CPF_Parm )

void UBioPlanet::RemoveChild ( class USFXGalaxyMapObject* Child )
{
	static UFunction* pFnRemoveChild = NULL;

	if ( ! pFnRemoveChild )
		pFnRemoveChild = (UFunction*) UObject::GObjObjects()->Data[ 41395 ];

	UBioPlanet_execRemoveChild_Parms RemoveChild_Parms;
	RemoveChild_Parms.Child = Child;

	this->ProcessEvent ( pFnRemoveChild, &RemoveChild_Parms, NULL );
};

// Function SFXGame.BioPlanet.GetChildren
// [0x00420002] 
// Parameters infos:
// TArray< class USFXGalaxyMapObject* > Children                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioPlanet::GetChildren ( TArray< class USFXGalaxyMapObject* >* Children )
{
	static UFunction* pFnGetChildren = NULL;

	if ( ! pFnGetChildren )
		pFnGetChildren = (UFunction*) UObject::GObjObjects()->Data[ 41392 ];

	UBioPlanet_execGetChildren_Parms GetChildren_Parms;

	this->ProcessEvent ( pFnGetChildren, &GetChildren_Parms, NULL );

	if ( Children )
		memcpy ( Children, &GetChildren_Parms.Children, 0xC );
};

// Function SFXGame.BioPlanet.AddChild
// [0x00020002] 
// Parameters infos:
// class USFXGalaxyMapObject*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXGalaxyMapObject* UBioPlanet::AddChild ( )
{
	static UFunction* pFnAddChild = NULL;

	if ( ! pFnAddChild )
		pFnAddChild = (UFunction*) UObject::GObjObjects()->Data[ 41389 ];

	UBioPlanet_execAddChild_Parms AddChild_Parms;

	this->ProcessEvent ( pFnAddChild, &AddChild_Parms, NULL );

	return AddChild_Parms.ReturnValue;
};

// Function SFXGame.BioPlanet.SphereToPlanePos
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vSphere                        ( CPF_Parm )
// float                          SphereRadius                   ( CPF_Parm )

struct FVector UBioPlanet::SphereToPlanePos ( struct FVector vSphere, float SphereRadius )
{
	static UFunction* pFnSphereToPlanePos = NULL;

	if ( ! pFnSphereToPlanePos )
		pFnSphereToPlanePos = (UFunction*) UObject::GObjObjects()->Data[ 41383 ];

	UBioPlanet_execSphereToPlanePos_Parms SphereToPlanePos_Parms;
	memcpy ( &SphereToPlanePos_Parms.vSphere, &vSphere, 0xC );
	SphereToPlanePos_Parms.SphereRadius = SphereRadius;

	this->ProcessEvent ( pFnSphereToPlanePos, &SphereToPlanePos_Parms, NULL );

	return SphereToPlanePos_Parms.ReturnValue;
};

// Function SFXGame.BioPlanet.PlanePosToSphere
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vPosition2D                    ( CPF_Parm )
// float                          SphereRadius                   ( CPF_Parm )

struct FVector UBioPlanet::PlanePosToSphere ( struct FVector vPosition2D, float SphereRadius )
{
	static UFunction* pFnPlanePosToSphere = NULL;

	if ( ! pFnPlanePosToSphere )
		pFnPlanePosToSphere = (UFunction*) UObject::GObjObjects()->Data[ 41376 ];

	UBioPlanet_execPlanePosToSphere_Parms PlanePosToSphere_Parms;
	memcpy ( &PlanePosToSphere_Parms.vPosition2D, &vPosition2D, 0xC );
	PlanePosToSphere_Parms.SphereRadius = SphereRadius;

	this->ProcessEvent ( pFnPlanePosToSphere, &PlanePosToSphere_Parms, NULL );

	return PlanePosToSphere_Parms.ReturnValue;
};

// Function SFXGame.BioPlanet.GetPlanetSize
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPlanet::GetPlanetSize ( )
{
	static UFunction* pFnGetPlanetSize = NULL;

	if ( ! pFnGetPlanetSize )
		pFnGetPlanetSize = (UFunction*) UObject::GObjObjects()->Data[ 41374 ];

	UBioPlanet_execGetPlanetSize_Parms GetPlanetSize_Parms;

	this->ProcessEvent ( pFnGetPlanetSize, &GetPlanetSize_Parms, NULL );

	return GetPlanetSize_Parms.ReturnValue;
};

// Function SFXGame.BioPlanet.LoadPlanetData
// [0x00C20002] 
// Parameters infos:
// class AInterpActor*            Planet                         ( CPF_Parm )
// TArray< class UParticleSystemComponent* > TemporaryComponents            ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink | CPF_EditInline )

void UBioPlanet::LoadPlanetData ( class AInterpActor* Planet, TArray< class UParticleSystemComponent* >* TemporaryComponents )
{
	static UFunction* pFnLoadPlanetData = NULL;

	if ( ! pFnLoadPlanetData )
		pFnLoadPlanetData = (UFunction*) UObject::GObjObjects()->Data[ 41350 ];

	UBioPlanet_execLoadPlanetData_Parms LoadPlanetData_Parms;
	LoadPlanetData_Parms.Planet = Planet;

	this->ProcessEvent ( pFnLoadPlanetData, &LoadPlanetData_Parms, NULL );

	if ( TemporaryComponents )
		memcpy ( TemporaryComponents, &LoadPlanetData_Parms.TemporaryComponents, 0xC );
};

// Function SFXGame.BioPlanet.LoadProbeImpacts
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FVector >       vImpacts                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioPlanet::LoadProbeImpacts ( TArray< struct FVector >* vImpacts )
{
	static UFunction* pFnLoadProbeImpacts = NULL;

	if ( ! pFnLoadProbeImpacts )
		pFnLoadProbeImpacts = (UFunction*) UObject::GObjObjects()->Data[ 41347 ];

	UBioPlanet_execLoadProbeImpacts_Parms LoadProbeImpacts_Parms;

	pFnLoadProbeImpacts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadProbeImpacts, &LoadProbeImpacts_Parms, NULL );

	pFnLoadProbeImpacts->FunctionFlags |= 0x400;

	if ( vImpacts )
		memcpy ( vImpacts, &LoadProbeImpacts_Parms.vImpacts, 0xC );
};

// Function SFXGame.BioPlanet.SaveProbeImpact
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 vImpact                        ( CPF_Parm )

void UBioPlanet::SaveProbeImpact ( struct FVector vImpact )
{
	static UFunction* pFnSaveProbeImpact = NULL;

	if ( ! pFnSaveProbeImpact )
		pFnSaveProbeImpact = (UFunction*) UObject::GObjObjects()->Data[ 41345 ];

	UBioPlanet_execSaveProbeImpact_Parms SaveProbeImpact_Parms;
	memcpy ( &SaveProbeImpact_Parms.vImpact, &vImpact, 0xC );

	pFnSaveProbeImpact->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveProbeImpact, &SaveProbeImpact_Parms, NULL );

	pFnSaveProbeImpact->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlanet.SetVisited
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bVisited                       ( CPF_Parm )

void UBioPlanet::SetVisited ( unsigned long bVisited )
{
	static UFunction* pFnSetVisited = NULL;

	if ( ! pFnSetVisited )
		pFnSetVisited = (UFunction*) UObject::GObjObjects()->Data[ 41343 ];

	UBioPlanet_execSetVisited_Parms SetVisited_Parms;
	SetVisited_Parms.bVisited = bVisited;

	pFnSetVisited->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVisited, &SetVisited_Parms, NULL );

	pFnSetVisited->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlanet.IsVisited
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPlanet::IsVisited ( )
{
	static UFunction* pFnIsVisited = NULL;

	if ( ! pFnIsVisited )
		pFnIsVisited = (UFunction*) UObject::GObjObjects()->Data[ 41341 ];

	UBioPlanet_execIsVisited_Parms IsVisited_Parms;

	pFnIsVisited->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsVisited, &IsVisited_Parms, NULL );

	pFnIsVisited->FunctionFlags |= 0x400;

	return IsVisited_Parms.ReturnValue;
};

// Function SFXGame.BioPlanet.SetupMinerals
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPlanet::SetupMinerals ( )
{
	static UFunction* pFnSetupMinerals = NULL;

	if ( ! pFnSetupMinerals )
		pFnSetupMinerals = (UFunction*) UObject::GObjObjects()->Data[ 41340 ];

	UBioPlanet_execSetupMinerals_Parms SetupMinerals_Parms;

	pFnSetupMinerals->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetupMinerals, &SetupMinerals_Parms, NULL );

	pFnSetupMinerals->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlanet.LoadFrom2DA
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPlanet::LoadFrom2DA ( )
{
	static UFunction* pFnLoadFrom2DA = NULL;

	if ( ! pFnLoadFrom2DA )
		pFnLoadFrom2DA = (UFunction*) UObject::GObjObjects()->Data[ 41338 ];

	UBioPlanet_execLoadFrom2DA_Parms LoadFrom2DA_Parms;

	pFnLoadFrom2DA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadFrom2DA, &LoadFrom2DA_Parms, NULL );

	pFnLoadFrom2DA->FunctionFlags |= 0x400;

	return LoadFrom2DA_Parms.ReturnValue;
};

// Function SFXGame.BioPlotTreasure.GetMapName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sOutMapName                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioPlotTreasure::GetMapName ( struct FString* sOutMapName )
{
	static UFunction* pFnGetMapName = NULL;

	if ( ! pFnGetMapName )
		pFnGetMapName = (UFunction*) UObject::GObjObjects()->Data[ 42802 ];

	UBioPlotTreasure_execGetMapName_Parms GetMapName_Parms;

	pFnGetMapName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapName, &GetMapName_Parms, NULL );

	pFnGetMapName->FunctionFlags |= 0x400;

	if ( sOutMapName )
		memcpy ( sOutMapName, &GetMapName_Parms.sOutMapName, 0xC );

	return GetMapName_Parms.ReturnValue;
};

// Function SFXGame.BioPlotTreasure.GetPlotTreasureTechInt
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmTech                         ( CPF_Parm )
// struct FName                   nmNameHeader                   ( CPF_Parm )
// struct FName                   nmHeader                       ( CPF_Parm )
// int                            nTechValue                     ( CPF_Parm | CPF_OutParm )

bool UBioPlotTreasure::GetPlotTreasureTechInt ( struct FName nmTech, struct FName nmNameHeader, struct FName nmHeader, int* nTechValue )
{
	static UFunction* pFnGetPlotTreasureTechInt = NULL;

	if ( ! pFnGetPlotTreasureTechInt )
		pFnGetPlotTreasureTechInt = (UFunction*) UObject::GObjObjects()->Data[ 42796 ];

	UBioPlotTreasure_execGetPlotTreasureTechInt_Parms GetPlotTreasureTechInt_Parms;
	memcpy ( &GetPlotTreasureTechInt_Parms.nmTech, &nmTech, 0x8 );
	memcpy ( &GetPlotTreasureTechInt_Parms.nmNameHeader, &nmNameHeader, 0x8 );
	memcpy ( &GetPlotTreasureTechInt_Parms.nmHeader, &nmHeader, 0x8 );

	pFnGetPlotTreasureTechInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlotTreasureTechInt, &GetPlotTreasureTechInt_Parms, NULL );

	pFnGetPlotTreasureTechInt->FunctionFlags |= 0x400;

	if ( nTechValue )
		*nTechValue = GetPlotTreasureTechInt_Parms.nTechValue;

	return GetPlotTreasureTechInt_Parms.ReturnValue;
};

// Function SFXGame.BioPlotTreasure.GetPlotTreasureTechName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmTech                         ( CPF_Parm )
// struct FName                   nmHeader                       ( CPF_Parm )
// struct FName                   nmTechName                     ( CPF_Parm | CPF_OutParm )

bool UBioPlotTreasure::GetPlotTreasureTechName ( struct FName nmTech, struct FName nmHeader, struct FName* nmTechName )
{
	static UFunction* pFnGetPlotTreasureTechName = NULL;

	if ( ! pFnGetPlotTreasureTechName )
		pFnGetPlotTreasureTechName = (UFunction*) UObject::GObjObjects()->Data[ 42791 ];

	UBioPlotTreasure_execGetPlotTreasureTechName_Parms GetPlotTreasureTechName_Parms;
	memcpy ( &GetPlotTreasureTechName_Parms.nmTech, &nmTech, 0x8 );
	memcpy ( &GetPlotTreasureTechName_Parms.nmHeader, &nmHeader, 0x8 );

	pFnGetPlotTreasureTechName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlotTreasureTechName, &GetPlotTreasureTechName_Parms, NULL );

	pFnGetPlotTreasureTechName->FunctionFlags |= 0x400;

	if ( nmTechName )
		memcpy ( nmTechName, &GetPlotTreasureTechName_Parms.nmTechName, 0x8 );

	return GetPlotTreasureTechName_Parms.ReturnValue;
};

// Function SFXGame.BioPlotTreasure.GetPlotTreasureTreasureName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTreasureId                    ( CPF_Parm )
// struct FName                   nmHeader                       ( CPF_Parm )
// struct FName                   nmPlotTreasureName             ( CPF_Parm | CPF_OutParm )

bool UBioPlotTreasure::GetPlotTreasureTreasureName ( int nTreasureId, struct FName nmHeader, struct FName* nmPlotTreasureName )
{
	static UFunction* pFnGetPlotTreasureTreasureName = NULL;

	if ( ! pFnGetPlotTreasureTreasureName )
		pFnGetPlotTreasureTreasureName = (UFunction*) UObject::GObjObjects()->Data[ 42786 ];

	UBioPlotTreasure_execGetPlotTreasureTreasureName_Parms GetPlotTreasureTreasureName_Parms;
	GetPlotTreasureTreasureName_Parms.nTreasureId = nTreasureId;
	memcpy ( &GetPlotTreasureTreasureName_Parms.nmHeader, &nmHeader, 0x8 );

	pFnGetPlotTreasureTreasureName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlotTreasureTreasureName, &GetPlotTreasureTreasureName_Parms, NULL );

	pFnGetPlotTreasureTreasureName->FunctionFlags |= 0x400;

	if ( nmPlotTreasureName )
		memcpy ( nmPlotTreasureName, &GetPlotTreasureTreasureName_Parms.nmPlotTreasureName, 0x8 );

	return GetPlotTreasureTreasureName_Parms.ReturnValue;
};

// Function SFXGame.BioPlotTreasure.GetPlotTreasureTreasureInt
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTreasureId                    ( CPF_Parm )
// struct FName                   nmHeader                       ( CPF_Parm )
// int                            nPlotTreasureValue             ( CPF_Parm | CPF_OutParm )

bool UBioPlotTreasure::GetPlotTreasureTreasureInt ( int nTreasureId, struct FName nmHeader, int* nPlotTreasureValue )
{
	static UFunction* pFnGetPlotTreasureTreasureInt = NULL;

	if ( ! pFnGetPlotTreasureTreasureInt )
		pFnGetPlotTreasureTreasureInt = (UFunction*) UObject::GObjObjects()->Data[ 42781 ];

	UBioPlotTreasure_execGetPlotTreasureTreasureInt_Parms GetPlotTreasureTreasureInt_Parms;
	GetPlotTreasureTreasureInt_Parms.nTreasureId = nTreasureId;
	memcpy ( &GetPlotTreasureTreasureInt_Parms.nmHeader, &nmHeader, 0x8 );

	pFnGetPlotTreasureTreasureInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlotTreasureTreasureInt, &GetPlotTreasureTreasureInt_Parms, NULL );

	pFnGetPlotTreasureTreasureInt->FunctionFlags |= 0x400;

	if ( nPlotTreasureValue )
		*nPlotTreasureValue = GetPlotTreasureTreasureInt_Parms.nPlotTreasureValue;

	return GetPlotTreasureTreasureInt_Parms.ReturnValue;
};

// Function SFXGame.BioPlotTreasure.GetPlotTreasureResourcesInt
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmLevel                        ( CPF_Parm )
// struct FName                   nmHeader                       ( CPF_Parm )
// int                            nPlotTreasureValue             ( CPF_Parm | CPF_OutParm )

bool UBioPlotTreasure::GetPlotTreasureResourcesInt ( struct FName nmLevel, struct FName nmHeader, int* nPlotTreasureValue )
{
	static UFunction* pFnGetPlotTreasureResourcesInt = NULL;

	if ( ! pFnGetPlotTreasureResourcesInt )
		pFnGetPlotTreasureResourcesInt = (UFunction*) UObject::GObjObjects()->Data[ 42776 ];

	UBioPlotTreasure_execGetPlotTreasureResourcesInt_Parms GetPlotTreasureResourcesInt_Parms;
	memcpy ( &GetPlotTreasureResourcesInt_Parms.nmLevel, &nmLevel, 0x8 );
	memcpy ( &GetPlotTreasureResourcesInt_Parms.nmHeader, &nmHeader, 0x8 );

	pFnGetPlotTreasureResourcesInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlotTreasureResourcesInt, &GetPlotTreasureResourcesInt_Parms, NULL );

	pFnGetPlotTreasureResourcesInt->FunctionFlags |= 0x400;

	if ( nPlotTreasureValue )
		*nPlotTreasureValue = GetPlotTreasureResourcesInt_Parms.nPlotTreasureValue;

	return GetPlotTreasureResourcesInt_Parms.ReturnValue;
};

// Function SFXGame.BioProceduralCameraBasic.FixedCamera
// [0x00C22002] 
// Parameters infos:
// struct FActorInfo              stActorInfo                    ( CPF_Parm )
// unsigned long                  bInvert                        ( CPF_Parm )
// struct FCameraInfo             stCameraInfo                   ( CPF_Parm | CPF_OutParm )

void UBioProceduralCameraBasic::FixedCamera ( struct FActorInfo stActorInfo, unsigned long bInvert, struct FCameraInfo* stCameraInfo )
{
	static UFunction* pFnFixedCamera = NULL;

	if ( ! pFnFixedCamera )
		pFnFixedCamera = (UFunction*) UObject::GObjObjects()->Data[ 43538 ];

	UBioProceduralCameraBasic_execFixedCamera_Parms FixedCamera_Parms;
	memcpy ( &FixedCamera_Parms.stActorInfo, &stActorInfo, 0x54 );
	FixedCamera_Parms.bInvert = bInvert;

	this->ProcessEvent ( pFnFixedCamera, &FixedCamera_Parms, NULL );

	if ( stCameraInfo )
		memcpy ( stCameraInfo, &FixedCamera_Parms.stCameraInfo, 0x20 );
};

// Function SFXGame.SFXGame.PulseFullAmmoMessage
// [0x00020002] 
// Parameters infos:

void ASFXGame::PulseFullAmmoMessage ( )
{
	static UFunction* pFnPulseFullAmmoMessage = NULL;

	if ( ! pFnPulseFullAmmoMessage )
		pFnPulseFullAmmoMessage = (UFunction*) UObject::GObjObjects()->Data[ 49939 ];

	ASFXGame_execPulseFullAmmoMessage_Parms PulseFullAmmoMessage_Parms;

	this->ProcessEvent ( pFnPulseFullAmmoMessage, &PulseFullAmmoMessage_Parms, NULL );
};

// Function SFXGame.SFXGame.StartMatch
// [0x00020002] 
// Parameters infos:

void ASFXGame::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 49938 ];

	ASFXGame_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function SFXGame.SFXGame.SetNGPlusPlotStates
// [0x00020002] 
// Parameters infos:

void ASFXGame::SetNGPlusPlotStates ( )
{
	static UFunction* pFnSetNGPlusPlotStates = NULL;

	if ( ! pFnSetNGPlusPlotStates )
		pFnSetNGPlusPlotStates = (UFunction*) UObject::GObjObjects()->Data[ 49927 ];

	ASFXGame_execSetNGPlusPlotStates_Parms SetNGPlusPlotStates_Parms;

	this->ProcessEvent ( pFnSetNGPlusPlotStates, &SetNGPlusPlotStates_Parms, NULL );
};

// Function SFXGame.SFXGame.EnumeratePersonalizationVars
// [0x00420002] 
// Parameters infos:
// TArray< int >                  Vars                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXGame::EnumeratePersonalizationVars ( TArray< int >* Vars )
{
	static UFunction* pFnEnumeratePersonalizationVars = NULL;

	if ( ! pFnEnumeratePersonalizationVars )
		pFnEnumeratePersonalizationVars = (UFunction*) UObject::GObjObjects()->Data[ 49912 ];

	ASFXGame_execEnumeratePersonalizationVars_Parms EnumeratePersonalizationVars_Parms;

	this->ProcessEvent ( pFnEnumeratePersonalizationVars, &EnumeratePersonalizationVars_Parms, NULL );

	if ( Vars )
		memcpy ( Vars, &EnumeratePersonalizationVars_Parms.Vars, 0xC );
};

// Function SFXGame.SFXGame.AddCustomElementListPlotVars
// [0x00420002] 
// Parameters infos:
// TArray< struct FCustomizableElement > Elements                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< int >                  Vars                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXGame::AddCustomElementListPlotVars ( TArray< struct FCustomizableElement >* Elements, TArray< int >* Vars )
{
	static UFunction* pFnAddCustomElementListPlotVars = NULL;

	if ( ! pFnAddCustomElementListPlotVars )
		pFnAddCustomElementListPlotVars = (UFunction*) UObject::GObjObjects()->Data[ 49906 ];

	ASFXGame_execAddCustomElementListPlotVars_Parms AddCustomElementListPlotVars_Parms;

	this->ProcessEvent ( pFnAddCustomElementListPlotVars, &AddCustomElementListPlotVars_Parms, NULL );

	if ( Elements )
		memcpy ( Elements, &AddCustomElementListPlotVars_Parms.Elements, 0xC );

	if ( Vars )
		memcpy ( Vars, &AddCustomElementListPlotVars_Parms.Vars, 0xC );
};

// Function SFXGame.SFXGame.OnGameCompleted
// [0x00020002] 
// Parameters infos:
// int                            nEndID                         ( CPF_Parm )

void ASFXGame::OnGameCompleted ( int nEndID )
{
	static UFunction* pFnOnGameCompleted = NULL;

	if ( ! pFnOnGameCompleted )
		pFnOnGameCompleted = (UFunction*) UObject::GObjObjects()->Data[ 49899 ];

	ASFXGame_execOnGameCompleted_Parms OnGameCompleted_Parms;
	OnGameCompleted_Parms.nEndID = nEndID;

	this->ProcessEvent ( pFnOnGameCompleted, &OnGameCompleted_Parms, NULL );
};

// Function SFXGame.SFXGame.SetRenegadePoints
// [0x00020002] 
// Parameters infos:
// int                            nPoints                        ( CPF_Parm )

void ASFXGame::SetRenegadePoints ( int nPoints )
{
	static UFunction* pFnSetRenegadePoints = NULL;

	if ( ! pFnSetRenegadePoints )
		pFnSetRenegadePoints = (UFunction*) UObject::GObjObjects()->Data[ 49895 ];

	ASFXGame_execSetRenegadePoints_Parms SetRenegadePoints_Parms;
	SetRenegadePoints_Parms.nPoints = nPoints;

	this->ProcessEvent ( pFnSetRenegadePoints, &SetRenegadePoints_Parms, NULL );
};

// Function SFXGame.SFXGame.GetRenegadePoints
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXGame::GetRenegadePoints ( )
{
	static UFunction* pFnGetRenegadePoints = NULL;

	if ( ! pFnGetRenegadePoints )
		pFnGetRenegadePoints = (UFunction*) UObject::GObjObjects()->Data[ 49891 ];

	ASFXGame_execGetRenegadePoints_Parms GetRenegadePoints_Parms;

	this->ProcessEvent ( pFnGetRenegadePoints, &GetRenegadePoints_Parms, NULL );

	return GetRenegadePoints_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.SetParagonPoints
// [0x00020002] 
// Parameters infos:
// int                            nPoints                        ( CPF_Parm )

void ASFXGame::SetParagonPoints ( int nPoints )
{
	static UFunction* pFnSetParagonPoints = NULL;

	if ( ! pFnSetParagonPoints )
		pFnSetParagonPoints = (UFunction*) UObject::GObjObjects()->Data[ 49887 ];

	ASFXGame_execSetParagonPoints_Parms SetParagonPoints_Parms;
	SetParagonPoints_Parms.nPoints = nPoints;

	this->ProcessEvent ( pFnSetParagonPoints, &SetParagonPoints_Parms, NULL );
};

// Function SFXGame.SFXGame.GetParagonPoints
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXGame::GetParagonPoints ( )
{
	static UFunction* pFnGetParagonPoints = NULL;

	if ( ! pFnGetParagonPoints )
		pFnGetParagonPoints = (UFunction*) UObject::GObjObjects()->Data[ 49883 ];

	ASFXGame_execGetParagonPoints_Parms GetParagonPoints_Parms;

	this->ProcessEvent ( pFnGetParagonPoints, &GetParagonPoints_Parms, NULL );

	return GetParagonPoints_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.CalcWeaponFire
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartTrace                     ( CPF_Parm | CPF_OutParm )
// struct FVector                 EndTrace                       ( CPF_Parm | CPF_OutParm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo ASFXGame::CalcWeaponFire ( class AWeapon* W, struct FVector* StartTrace, struct FVector* EndTrace, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcWeaponFire = NULL;

	if ( ! pFnCalcWeaponFire )
		pFnCalcWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 49876 ];

	ASFXGame_execCalcWeaponFire_Parms CalcWeaponFire_Parms;
	CalcWeaponFire_Parms.W = W;

	pFnCalcWeaponFire->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcWeaponFire, &CalcWeaponFire_Parms, NULL );

	pFnCalcWeaponFire->FunctionFlags |= 0x400;

	if ( StartTrace )
		memcpy ( StartTrace, &CalcWeaponFire_Parms.StartTrace, 0xC );

	if ( EndTrace )
		memcpy ( EndTrace, &CalcWeaponFire_Parms.EndTrace, 0xC );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcWeaponFire_Parms.ImpactList, 0xC );

	return CalcWeaponFire_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.OnPlayerSquadDeath
// [0x00020002] 
// Parameters infos:

void ASFXGame::OnPlayerSquadDeath ( )
{
	static UFunction* pFnOnPlayerSquadDeath = NULL;

	if ( ! pFnOnPlayerSquadDeath )
		pFnOnPlayerSquadDeath = (UFunction*) UObject::GObjObjects()->Data[ 49875 ];

	ASFXGame_execOnPlayerSquadDeath_Parms OnPlayerSquadDeath_Parms;

	this->ProcessEvent ( pFnOnPlayerSquadDeath, &OnPlayerSquadDeath_Parms, NULL );
};

// Function SFXGame.SFXGame.CheckGameOver
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXGame::CheckGameOver ( )
{
	static UFunction* pFnCheckGameOver = NULL;

	if ( ! pFnCheckGameOver )
		pFnCheckGameOver = (UFunction*) UObject::GObjObjects()->Data[ 49872 ];

	ASFXGame_execCheckGameOver_Parms CheckGameOver_Parms;

	this->ProcessEvent ( pFnCheckGameOver, &CheckGameOver_Parms, NULL );

	return CheckGameOver_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.SignalEndGame
// [0x00020002] 
// Parameters infos:

void ASFXGame::SignalEndGame ( )
{
	static UFunction* pFnSignalEndGame = NULL;

	if ( ! pFnSignalEndGame )
		pFnSignalEndGame = (UFunction*) UObject::GObjObjects()->Data[ 49864 ];

	ASFXGame_execSignalEndGame_Parms SignalEndGame_Parms;

	this->ProcessEvent ( pFnSignalEndGame, &SignalEndGame_Parms, NULL );
};

// Function SFXGame.SFXGame.SwitchTarget
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class AController*             InstigatorController           ( CPF_Parm )
// class AActor*                  Target                         ( CPF_Parm )

void ASFXGame::eventSwitchTarget ( class AController* InstigatorController, class AActor* Target )
{
	static UFunction* pFnSwitchTarget = NULL;

	if ( ! pFnSwitchTarget )
		pFnSwitchTarget = (UFunction*) UObject::GObjObjects()->Data[ 49860 ];

	ASFXGame_eventSwitchTarget_Parms SwitchTarget_Parms;
	SwitchTarget_Parms.InstigatorController = InstigatorController;
	SwitchTarget_Parms.Target = Target;

	this->ProcessEvent ( pFnSwitchTarget, &SwitchTarget_Parms, NULL );
};

// Function SFXGame.SFXGame.IsCurrentTarget
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             InstigatorController           ( CPF_Parm )
// class AActor*                  Target                         ( CPF_Parm )

bool ASFXGame::IsCurrentTarget ( class AController* InstigatorController, class AActor* Target )
{
	static UFunction* pFnIsCurrentTarget = NULL;

	if ( ! pFnIsCurrentTarget )
		pFnIsCurrentTarget = (UFunction*) UObject::GObjObjects()->Data[ 49855 ];

	ASFXGame_execIsCurrentTarget_Parms IsCurrentTarget_Parms;
	IsCurrentTarget_Parms.InstigatorController = InstigatorController;
	IsCurrentTarget_Parms.Target = Target;

	this->ProcessEvent ( pFnIsCurrentTarget, &IsCurrentTarget_Parms, NULL );

	return IsCurrentTarget_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.ScoreHeadshot
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AController*             InstigatorController           ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void ASFXGame::ScoreHeadshot ( class AController* InstigatorController, class UClass* DamageType )
{
	static UFunction* pFnScoreHeadshot = NULL;

	if ( ! pFnScoreHeadshot )
		pFnScoreHeadshot = (UFunction*) UObject::GObjObjects()->Data[ 49765 ];

	ASFXGame_execScoreHeadshot_Parms ScoreHeadshot_Parms;
	ScoreHeadshot_Parms.InstigatorController = InstigatorController;
	ScoreHeadshot_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnScoreHeadshot, &ScoreHeadshot_Parms, NULL );
};

// Function SFXGame.SFXGame.ScoreDamage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AController*             InstigatorController           ( CPF_Parm )
// class AController*             Damaged                        ( CPF_Parm )
// float                          RawDamageDealt                 ( CPF_Parm )
// float                          ActualDamageDealt              ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void ASFXGame::ScoreDamage ( class AController* InstigatorController, class AController* Damaged, float RawDamageDealt, float ActualDamageDealt, class UClass* DamageType )
{
	static UFunction* pFnScoreDamage = NULL;

	if ( ! pFnScoreDamage )
		pFnScoreDamage = (UFunction*) UObject::GObjObjects()->Data[ 39165 ];

	ASFXGame_execScoreDamage_Parms ScoreDamage_Parms;
	ScoreDamage_Parms.InstigatorController = InstigatorController;
	ScoreDamage_Parms.Damaged = Damaged;
	ScoreDamage_Parms.RawDamageDealt = RawDamageDealt;
	ScoreDamage_Parms.ActualDamageDealt = ActualDamageDealt;
	ScoreDamage_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnScoreDamage, &ScoreDamage_Parms, NULL );
};

// Function SFXGame.SFXGame.ScoreKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void ASFXGame::ScoreKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = (UFunction*) UObject::GObjObjects()->Data[ 49839 ];

	ASFXGame_execScoreKill_Parms ScoreKill_Parms;
	ScoreKill_Parms.Killer = Killer;
	ScoreKill_Parms.Other = Other;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function SFXGame.SFXGame.ScoreFlamethrowerTankKill
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             Other                          ( CPF_Parm )

void ASFXGame::ScoreFlamethrowerTankKill ( class AController* Killer, class AController* Other )
{
	static UFunction* pFnScoreFlamethrowerTankKill = NULL;

	if ( ! pFnScoreFlamethrowerTankKill )
		pFnScoreFlamethrowerTankKill = (UFunction*) UObject::GObjObjects()->Data[ 49834 ];

	ASFXGame_execScoreFlamethrowerTankKill_Parms ScoreFlamethrowerTankKill_Parms;
	ScoreFlamethrowerTankKill_Parms.Killer = Killer;
	ScoreFlamethrowerTankKill_Parms.Other = Other;

	this->ProcessEvent ( pFnScoreFlamethrowerTankKill, &ScoreFlamethrowerTankKill_Parms, NULL );
};

// Function SFXGame.SFXGame.DestroySFXOnlineSubsystem
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ASFXGame::DestroySFXOnlineSubsystem ( )
{
	static UFunction* pFnDestroySFXOnlineSubsystem = NULL;

	if ( ! pFnDestroySFXOnlineSubsystem )
		pFnDestroySFXOnlineSubsystem = (UFunction*) UObject::GObjObjects()->Data[ 49833 ];

	ASFXGame_execDestroySFXOnlineSubsystem_Parms DestroySFXOnlineSubsystem_Parms;

	pFnDestroySFXOnlineSubsystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroySFXOnlineSubsystem, &DestroySFXOnlineSubsystem_Parms, NULL );

	pFnDestroySFXOnlineSubsystem->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGame.PreExit
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXGame::eventPreExit ( )
{
	static UFunction* pFnPreExit = NULL;

	if ( ! pFnPreExit )
		pFnPreExit = (UFunction*) UObject::GObjObjects()->Data[ 49832 ];

	ASFXGame_eventPreExit_Parms PreExit_Parms;

	this->ProcessEvent ( pFnPreExit, &PreExit_Parms, NULL );
};

// Function SFXGame.SFXGame.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FString                 Options                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 ErrorMessage                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXGame::eventInitGame ( struct FString Options, struct FString* ErrorMessage )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = (UFunction*) UObject::GObjObjects()->Data[ 49829 ];

	ASFXGame_eventInitGame_Parms InitGame_Parms;
	memcpy ( &InitGame_Parms.Options, &Options, 0xC );

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );

	if ( ErrorMessage )
		memcpy ( ErrorMessage, &InitGame_Parms.ErrorMessage, 0xC );
};

// Function SFXGame.SFXGame.GrantScaledCredits
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nSize                          ( CPF_Parm )
// unsigned long                  bTickResource                  ( CPF_OptionalParm | CPF_Parm )

bool ASFXGame::eventGrantScaledCredits ( int nSize, unsigned long bTickResource )
{
	static UFunction* pFnGrantScaledCredits = NULL;

	if ( ! pFnGrantScaledCredits )
		pFnGrantScaledCredits = (UFunction*) UObject::GObjObjects()->Data[ 49824 ];

	ASFXGame_eventGrantScaledCredits_Parms GrantScaledCredits_Parms;
	GrantScaledCredits_Parms.nSize = nSize;
	GrantScaledCredits_Parms.bTickResource = bTickResource;

	this->ProcessEvent ( pFnGrantScaledCredits, &GrantScaledCredits_Parms, NULL );

	return GrantScaledCredits_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.PlayTransientSound
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class UWwiseBaseSoundObject*   InWwiseEvent                   ( CPF_Parm )
// struct FVector                 SoundLocation                  ( CPF_Parm )
// TArray< struct FString >       RTPCName                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// TArray< float >                RTPCValue                      ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ASFXGame::PlayTransientSound ( class UWwiseBaseSoundObject* InWwiseEvent, struct FVector SoundLocation, TArray< struct FString > RTPCName, TArray< float > RTPCValue )
{
	static UFunction* pFnPlayTransientSound = NULL;

	if ( ! pFnPlayTransientSound )
		pFnPlayTransientSound = (UFunction*) UObject::GObjObjects()->Data[ 41173 ];

	ASFXGame_execPlayTransientSound_Parms PlayTransientSound_Parms;
	PlayTransientSound_Parms.InWwiseEvent = InWwiseEvent;
	memcpy ( &PlayTransientSound_Parms.SoundLocation, &SoundLocation, 0xC );
	memcpy ( &PlayTransientSound_Parms.RTPCName, &RTPCName, 0xC );
	memcpy ( &PlayTransientSound_Parms.RTPCValue, &RTPCValue, 0xC );

	this->ProcessEvent ( pFnPlayTransientSound, &PlayTransientSound_Parms, NULL );
};

// Function SFXGame.SFXGame.GetPlayerResourcesManager
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ASFXInventoryManager*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXInventoryManager* ASFXGame::GetPlayerResourcesManager ( )
{
	static UFunction* pFnGetPlayerResourcesManager = NULL;

	if ( ! pFnGetPlayerResourcesManager )
		pFnGetPlayerResourcesManager = (UFunction*) UObject::GObjObjects()->Data[ 38202 ];

	ASFXGame_execGetPlayerResourcesManager_Parms GetPlayerResourcesManager_Parms;

	this->ProcessEvent ( pFnGetPlayerResourcesManager, &GetPlayerResourcesManager_Parms, NULL );

	return GetPlayerResourcesManager_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.StartFirstUsePowerDelay
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXGame::StartFirstUsePowerDelay ( )
{
	static UFunction* pFnStartFirstUsePowerDelay = NULL;

	if ( ! pFnStartFirstUsePowerDelay )
		pFnStartFirstUsePowerDelay = (UFunction*) UObject::GObjObjects()->Data[ 49798 ];

	ASFXGame_execStartFirstUsePowerDelay_Parms StartFirstUsePowerDelay_Parms;

	this->ProcessEvent ( pFnStartFirstUsePowerDelay, &StartFirstUsePowerDelay_Parms, NULL );
};

// Function SFXGame.SFXGame.ToggleCombatOverride
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bCombatOverride                ( CPF_Parm )

void ASFXGame::ToggleCombatOverride ( unsigned long bCombatOverride )
{
	static UFunction* pFnToggleCombatOverride = NULL;

	if ( ! pFnToggleCombatOverride )
		pFnToggleCombatOverride = (UFunction*) UObject::GObjObjects()->Data[ 45312 ];

	ASFXGame_execToggleCombatOverride_Parms ToggleCombatOverride_Parms;
	ToggleCombatOverride_Parms.bCombatOverride = bCombatOverride;

	this->ProcessEvent ( pFnToggleCombatOverride, &ToggleCombatOverride_Parms, NULL );
};

// Function SFXGame.SFXGame.CombatEnded
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXGame::CombatEnded ( )
{
	static UFunction* pFnCombatEnded = NULL;

	if ( ! pFnCombatEnded )
		pFnCombatEnded = (UFunction*) UObject::GObjObjects()->Data[ 42670 ];

	ASFXGame_execCombatEnded_Parms CombatEnded_Parms;

	this->ProcessEvent ( pFnCombatEnded, &CombatEnded_Parms, NULL );
};

// Function SFXGame.SFXGame.CombatStarted
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXGame::CombatStarted ( )
{
	static UFunction* pFnCombatStarted = NULL;

	if ( ! pFnCombatStarted )
		pFnCombatStarted = (UFunction*) UObject::GObjObjects()->Data[ 42666 ];

	ASFXGame_execCombatStarted_Parms CombatStarted_Parms;

	this->ProcessEvent ( pFnCombatStarted, &CombatStarted_Parms, NULL );
};

// Function SFXGame.SFXGame.ProbeOnCombatEnd
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ASFXGame::ProbeOnCombatEnd ( )
{
	static UFunction* pFnProbeOnCombatEnd = NULL;

	if ( ! pFnProbeOnCombatEnd )
		pFnProbeOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 49806 ];

	ASFXGame_execProbeOnCombatEnd_Parms ProbeOnCombatEnd_Parms;

	pFnProbeOnCombatEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProbeOnCombatEnd, &ProbeOnCombatEnd_Parms, NULL );

	pFnProbeOnCombatEnd->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGame.ProbeOnCombatBegin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ASFXGame::ProbeOnCombatBegin ( )
{
	static UFunction* pFnProbeOnCombatBegin = NULL;

	if ( ! pFnProbeOnCombatBegin )
		pFnProbeOnCombatBegin = (UFunction*) UObject::GObjObjects()->Data[ 49796 ];

	ASFXGame_execProbeOnCombatBegin_Parms ProbeOnCombatBegin_Parms;

	pFnProbeOnCombatBegin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProbeOnCombatBegin, &ProbeOnCombatBegin_Parms, NULL );

	pFnProbeOnCombatBegin->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGame.OnCombatEnd
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void ASFXGame::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 49799 ];

	ASFXGame_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGame.OnCombatStart
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void ASFXGame::OnCombatStart ( )
{
	static UFunction* pFnOnCombatStart = NULL;

	if ( ! pFnOnCombatStart )
		pFnOnCombatStart = (UFunction*) UObject::GObjObjects()->Data[ 49787 ];

	ASFXGame_execOnCombatStart_Parms OnCombatStart_Parms;

	this->ProcessEvent ( pFnOnCombatStart, &OnCombatStart_Parms, NULL );
};

// Function SFXGame.SFXGame.InCombat
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXGame::eventInCombat ( )
{
	static UFunction* pFnInCombat = NULL;

	if ( ! pFnInCombat )
		pFnInCombat = (UFunction*) UObject::GObjObjects()->Data[ 37557 ];

	ASFXGame_eventInCombat_Parms InCombat_Parms;

	this->ProcessEvent ( pFnInCombat, &InCombat_Parms, NULL );

	return InCombat_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.PreventPermanentDeath
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                KilledPawn                     ( CPF_Parm )

bool ASFXGame::PreventPermanentDeath ( class ABioPawn* KilledPawn )
{
	static UFunction* pFnPreventPermanentDeath = NULL;

	if ( ! pFnPreventPermanentDeath )
		pFnPreventPermanentDeath = (UFunction*) UObject::GObjObjects()->Data[ 49783 ];

	ASFXGame_execPreventPermanentDeath_Parms PreventPermanentDeath_Parms;
	PreventPermanentDeath_Parms.KilledPawn = KilledPawn;

	this->ProcessEvent ( pFnPreventPermanentDeath, &PreventPermanentDeath_Parms, NULL );

	return PreventPermanentDeath_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.PreventDeath
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool ASFXGame::PreventDeath ( class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnPreventDeath = NULL;

	if ( ! pFnPreventDeath )
		pFnPreventDeath = (UFunction*) UObject::GObjObjects()->Data[ 49775 ];

	ASFXGame_execPreventDeath_Parms PreventDeath_Parms;
	PreventDeath_Parms.KilledPawn = KilledPawn;
	PreventDeath_Parms.Killer = Killer;
	PreventDeath_Parms.DamageType = DamageType;
	memcpy ( &PreventDeath_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPreventDeath, &PreventDeath_Parms, NULL );

	return PreventDeath_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.Killed
// [0x00020002] 
// Parameters infos:
// class AController*             Killer                         ( CPF_Parm )
// class AController*             KilledPlayer                   ( CPF_Parm )
// class APawn*                   KilledPawn                     ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void ASFXGame::Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType )
{
	static UFunction* pFnKilled = NULL;

	if ( ! pFnKilled )
		pFnKilled = (UFunction*) UObject::GObjObjects()->Data[ 49767 ];

	ASFXGame_execKilled_Parms Killed_Parms;
	Killed_Parms.Killer = Killer;
	Killed_Parms.KilledPlayer = KilledPlayer;
	Killed_Parms.KilledPawn = KilledPawn;
	Killed_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnKilled, &Killed_Parms, NULL );
};

// Function SFXGame.SFXGame.ModifyDamage
// [0x00420002] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// class AActor*                  injured                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )
// float                          Damage                         ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void ASFXGame::ModifyDamage ( class UClass* DamageType, class AActor* injured, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum )
{
	static UFunction* pFnModifyDamage = NULL;

	if ( ! pFnModifyDamage )
		pFnModifyDamage = (UFunction*) UObject::GObjObjects()->Data[ 49746 ];

	ASFXGame_execModifyDamage_Parms ModifyDamage_Parms;
	ModifyDamage_Parms.DamageType = DamageType;
	ModifyDamage_Parms.injured = injured;
	ModifyDamage_Parms.InstigatedBy = InstigatedBy;
	ModifyDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnModifyDamage, &ModifyDamage_Parms, NULL );

	if ( Damage )
		*Damage = ModifyDamage_Parms.Damage;

	if ( HitInfo )
		memcpy ( HitInfo, &ModifyDamage_Parms.HitInfo, 0x1C );

	if ( HitLocation )
		memcpy ( HitLocation, &ModifyDamage_Parms.HitLocation, 0xC );

	if ( Momentum )
		memcpy ( Momentum, &ModifyDamage_Parms.Momentum, 0xC );
};

// Function SFXGame.SFXGame.TriggerVocalizationEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  VocalizationID                 ( CPF_Parm )
// class ABioPawn*                InstigatedBy                   ( CPF_Parm )
// class ABioPawn*                Recipient                      ( CPF_OptionalParm | CPF_Parm )
// float                          delay                          ( CPF_OptionalParm | CPF_Parm )
// float                          fChanceToPlayModifier          ( CPF_OptionalParm | CPF_Parm )

void ASFXGame::eventTriggerVocalizationEvent ( unsigned char VocalizationID, class ABioPawn* InstigatedBy, class ABioPawn* Recipient, float delay, float fChanceToPlayModifier )
{
	static UFunction* pFnTriggerVocalizationEvent = NULL;

	if ( ! pFnTriggerVocalizationEvent )
		pFnTriggerVocalizationEvent = (UFunction*) UObject::GObjObjects()->Data[ 49739 ];

	ASFXGame_eventTriggerVocalizationEvent_Parms TriggerVocalizationEvent_Parms;
	TriggerVocalizationEvent_Parms.VocalizationID = VocalizationID;
	TriggerVocalizationEvent_Parms.InstigatedBy = InstigatedBy;
	TriggerVocalizationEvent_Parms.Recipient = Recipient;
	TriggerVocalizationEvent_Parms.delay = delay;
	TriggerVocalizationEvent_Parms.fChanceToPlayModifier = fChanceToPlayModifier;

	this->ProcessEvent ( pFnTriggerVocalizationEvent, &TriggerVocalizationEvent_Parms, NULL );
};

// Function SFXGame.SFXGame.OnTimeDilationChange
// [0x00020002] 
// Parameters infos:
// float                          NewTimeDilation                ( CPF_Parm )

void ASFXGame::OnTimeDilationChange ( float NewTimeDilation )
{
	static UFunction* pFnOnTimeDilationChange = NULL;

	if ( ! pFnOnTimeDilationChange )
		pFnOnTimeDilationChange = (UFunction*) UObject::GObjObjects()->Data[ 49737 ];

	ASFXGame_execOnTimeDilationChange_Parms OnTimeDilationChange_Parms;
	OnTimeDilationChange_Parms.NewTimeDilation = NewTimeDilation;

	this->ProcessEvent ( pFnOnTimeDilationChange, &OnTimeDilationChange_Parms, NULL );
};

// Function SFXGame.SFXGame.Tick
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void ASFXGame::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 49734 ];

	ASFXGame_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXGame.UpdateTimeDilationArray
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          TimeDelta                      ( CPF_Parm )

float ASFXGame::UpdateTimeDilationArray ( float TimeDelta )
{
	static UFunction* pFnUpdateTimeDilationArray = NULL;

	if ( ! pFnUpdateTimeDilationArray )
		pFnUpdateTimeDilationArray = (UFunction*) UObject::GObjObjects()->Data[ 49731 ];

	ASFXGame_execUpdateTimeDilationArray_Parms UpdateTimeDilationArray_Parms;
	UpdateTimeDilationArray_Parms.TimeDelta = TimeDelta;

	pFnUpdateTimeDilationArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateTimeDilationArray, &UpdateTimeDilationArray_Parms, NULL );

	pFnUpdateTimeDilationArray->FunctionFlags |= 0x400;

	return UpdateTimeDilationArray_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.CancelTimeDilation
// [0x00020002] 
// Parameters infos:
// struct FName                   Identifier                     ( CPF_Parm )

void ASFXGame::CancelTimeDilation ( struct FName Identifier )
{
	static UFunction* pFnCancelTimeDilation = NULL;

	if ( ! pFnCancelTimeDilation )
		pFnCancelTimeDilation = (UFunction*) UObject::GObjObjects()->Data[ 49728 ];

	ASFXGame_execCancelTimeDilation_Parms CancelTimeDilation_Parms;
	memcpy ( &CancelTimeDilation_Parms.Identifier, &Identifier, 0x8 );

	this->ProcessEvent ( pFnCancelTimeDilation, &CancelTimeDilation_Parms, NULL );
};

// Function SFXGame.SFXGame.RequestTimeDilation
// [0x00820002] 
// Parameters infos:
// struct FInterpCurveFloat       Curve                          ( CPF_Parm | CPF_NeedCtorLink )
// float                          TotalTime                      ( CPF_Parm )
// struct FName                   Identifier                     ( CPF_OptionalParm | CPF_Parm )

void ASFXGame::RequestTimeDilation ( struct FInterpCurveFloat Curve, float TotalTime, struct FName Identifier )
{
	static UFunction* pFnRequestTimeDilation = NULL;

	if ( ! pFnRequestTimeDilation )
		pFnRequestTimeDilation = (UFunction*) UObject::GObjObjects()->Data[ 49723 ];

	ASFXGame_execRequestTimeDilation_Parms RequestTimeDilation_Parms;
	memcpy ( &RequestTimeDilation_Parms.Curve, &Curve, 0x10 );
	RequestTimeDilation_Parms.TotalTime = TotalTime;
	memcpy ( &RequestTimeDilation_Parms.Identifier, &Identifier, 0x8 );

	this->ProcessEvent ( pFnRequestTimeDilation, &RequestTimeDilation_Parms, NULL );
};

// Function SFXGame.SFXGame.FindHenchPackage
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 HenchTag                       ( CPF_Parm | CPF_NeedCtorLink )

struct FString ASFXGame::FindHenchPackage ( struct FString HenchTag )
{
	static UFunction* pFnFindHenchPackage = NULL;

	if ( ! pFnFindHenchPackage )
		pFnFindHenchPackage = (UFunction*) UObject::GObjObjects()->Data[ 49719 ];

	ASFXGame_execFindHenchPackage_Parms FindHenchPackage_Parms;
	memcpy ( &FindHenchPackage_Parms.HenchTag, &HenchTag, 0xC );

	this->ProcessEvent ( pFnFindHenchPackage, &FindHenchPackage_Parms, NULL );

	return FindHenchPackage_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.LoadPackage
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 PackageName                    ( CPF_Parm | CPF_NeedCtorLink )

void ASFXGame::LoadPackage ( struct FString PackageName )
{
	static UFunction* pFnLoadPackage = NULL;

	if ( ! pFnLoadPackage )
		pFnLoadPackage = (UFunction*) UObject::GObjObjects()->Data[ 49705 ];

	ASFXGame_execLoadPackage_Parms LoadPackage_Parms;
	memcpy ( &LoadPackage_Parms.PackageName, &PackageName, 0xC );

	pFnLoadPackage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadPackage, &LoadPackage_Parms, NULL );

	pFnLoadPackage->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGame.UpdatePlotStateRTPCs
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UBioGlobalVariableTable* VarTable                       ( CPF_Parm )
// class ASFXPawn_Player*         Player                         ( CPF_Parm )

void ASFXGame::UpdatePlotStateRTPCs ( class UBioGlobalVariableTable* VarTable, class ASFXPawn_Player* Player )
{
	static UFunction* pFnUpdatePlotStateRTPCs = NULL;

	if ( ! pFnUpdatePlotStateRTPCs )
		pFnUpdatePlotStateRTPCs = (UFunction*) UObject::GObjObjects()->Data[ 49711 ];

	ASFXGame_execUpdatePlotStateRTPCs_Parms UpdatePlotStateRTPCs_Parms;
	UpdatePlotStateRTPCs_Parms.VarTable = VarTable;
	UpdatePlotStateRTPCs_Parms.Player = Player;

	this->ProcessEvent ( pFnUpdatePlotStateRTPCs, &UpdatePlotStateRTPCs_Parms, NULL );
};

// Function SFXGame.SFXGame.UpdatePlotVariables
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ASFXPawn_Player*         Player                         ( CPF_Parm )

void ASFXGame::UpdatePlotVariables ( class ASFXPawn_Player* Player )
{
	static UFunction* pFnUpdatePlotVariables = NULL;

	if ( ! pFnUpdatePlotVariables )
		pFnUpdatePlotVariables = (UFunction*) UObject::GObjObjects()->Data[ 49707 ];

	ASFXGame_execUpdatePlotVariables_Parms UpdatePlotVariables_Parms;
	UpdatePlotVariables_Parms.Player = Player;

	this->ProcessEvent ( pFnUpdatePlotVariables, &UpdatePlotVariables_Parms, NULL );
};

// Function SFXGame.SFXGame.SpawnDefaultPawnFor
// [0x00820002] 
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewPlayer                      ( CPF_Parm )
// class ANavigationPoint*        StartSpot                      ( CPF_Parm )

class APawn* ASFXGame::SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot )
{
	static UFunction* pFnSpawnDefaultPawnFor = NULL;

	if ( ! pFnSpawnDefaultPawnFor )
		pFnSpawnDefaultPawnFor = (UFunction*) UObject::GObjObjects()->Data[ 49674 ];

	ASFXGame_execSpawnDefaultPawnFor_Parms SpawnDefaultPawnFor_Parms;
	SpawnDefaultPawnFor_Parms.NewPlayer = NewPlayer;
	SpawnDefaultPawnFor_Parms.StartSpot = StartSpot;

	this->ProcessEvent ( pFnSpawnDefaultPawnFor, &SpawnDefaultPawnFor_Parms, NULL );

	return SpawnDefaultPawnFor_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.GetCharacterClassByName
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ClassName                      ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

class UClass* ASFXGame::GetCharacterClassByName ( struct FString ClassName )
{
	static UFunction* pFnGetCharacterClassByName = NULL;

	if ( ! pFnGetCharacterClassByName )
		pFnGetCharacterClassByName = (UFunction*) UObject::GObjObjects()->Data[ 47975 ];

	ASFXGame_execGetCharacterClassByName_Parms GetCharacterClassByName_Parms;
	memcpy ( &GetCharacterClassByName_Parms.ClassName, &ClassName, 0xC );

	this->ProcessEvent ( pFnGetCharacterClassByName, &GetCharacterClassByName_Parms, NULL );

	return GetCharacterClassByName_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.GetIDByClass
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  PlayerClass                    ( CPF_Parm )

unsigned char ASFXGame::GetIDByClass ( class UClass* PlayerClass )
{
	static UFunction* pFnGetIDByClass = NULL;

	if ( ! pFnGetIDByClass )
		pFnGetIDByClass = (UFunction*) UObject::GObjObjects()->Data[ 49669 ];

	ASFXGame_execGetIDByClass_Parms GetIDByClass_Parms;
	GetIDByClass_Parms.PlayerClass = PlayerClass;

	this->ProcessEvent ( pFnGetIDByClass, &GetIDByClass_Parms, NULL );

	return GetIDByClass_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.FindPlayerStart
// [0x00020002] 
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Player                         ( CPF_Parm )
// unsigned char                  InTeam                         ( CPF_OptionalParm | CPF_Parm )
// struct FString                 IncomingName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

class ANavigationPoint* ASFXGame::FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName )
{
	static UFunction* pFnFindPlayerStart = NULL;

	if ( ! pFnFindPlayerStart )
		pFnFindPlayerStart = (UFunction*) UObject::GObjObjects()->Data[ 49660 ];

	ASFXGame_execFindPlayerStart_Parms FindPlayerStart_Parms;
	FindPlayerStart_Parms.Player = Player;
	FindPlayerStart_Parms.InTeam = InTeam;
	memcpy ( &FindPlayerStart_Parms.IncomingName, &IncomingName, 0xC );

	this->ProcessEvent ( pFnFindPlayerStart, &FindPlayerStart_Parms, NULL );

	return FindPlayerStart_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.SetPlayerDefaults
// [0x00020002] 
// Parameters infos:
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void ASFXGame::SetPlayerDefaults ( class APawn* PlayerPawn )
{
	static UFunction* pFnSetPlayerDefaults = NULL;

	if ( ! pFnSetPlayerDefaults )
		pFnSetPlayerDefaults = (UFunction*) UObject::GObjObjects()->Data[ 49656 ];

	ASFXGame_execSetPlayerDefaults_Parms SetPlayerDefaults_Parms;
	SetPlayerDefaults_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnSetPlayerDefaults, &SetPlayerDefaults_Parms, NULL );
};

// Function SFXGame.SFXGame.GetChallengeLevel
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )
// int                            ChallengeLevel                 ( CPF_Parm | CPF_OutParm )

bool ASFXGame::GetChallengeLevel ( int idx, int* ChallengeLevel )
{
	static UFunction* pFnGetChallengeLevel = NULL;

	if ( ! pFnGetChallengeLevel )
		pFnGetChallengeLevel = (UFunction*) UObject::GObjObjects()->Data[ 49650 ];

	ASFXGame_execGetChallengeLevel_Parms GetChallengeLevel_Parms;
	GetChallengeLevel_Parms.idx = idx;

	this->ProcessEvent ( pFnGetChallengeLevel, &GetChallengeLevel_Parms, NULL );

	if ( ChallengeLevel )
		*ChallengeLevel = GetChallengeLevel_Parms.ChallengeLevel;

	return GetChallengeLevel_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.GetChallengeModifier
// [0x00420002] 
// Parameters infos:
// int                            idx                            ( CPF_Parm )
// float                          ChallengeModifier              ( CPF_Parm | CPF_OutParm )
// float                          LevelModifier                  ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )
// float                          TechModifier                   ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

void ASFXGame::GetChallengeModifier ( int idx, float* ChallengeModifier, float* LevelModifier, float* TechModifier )
{
	static UFunction* pFnGetChallengeModifier = NULL;

	if ( ! pFnGetChallengeModifier )
		pFnGetChallengeModifier = (UFunction*) UObject::GObjObjects()->Data[ 49644 ];

	ASFXGame_execGetChallengeModifier_Parms GetChallengeModifier_Parms;
	GetChallengeModifier_Parms.idx = idx;

	this->ProcessEvent ( pFnGetChallengeModifier, &GetChallengeModifier_Parms, NULL );

	if ( ChallengeModifier )
		*ChallengeModifier = GetChallengeModifier_Parms.ChallengeModifier;

	if ( LevelModifier )
		*LevelModifier = GetChallengeModifier_Parms.LevelModifier;

	if ( TechModifier )
		*TechModifier = GetChallengeModifier_Parms.TechModifier;
};

// Function SFXGame.SFXGame.GetPlayerLevel
// [0x00420803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// int                            PlayerLevel                    ( CPF_Parm | CPF_OutParm )

bool ASFXGame::eventGetPlayerLevel ( int ControllerId, int* PlayerLevel )
{
	static UFunction* pFnGetPlayerLevel = NULL;

	if ( ! pFnGetPlayerLevel )
		pFnGetPlayerLevel = (UFunction*) UObject::GObjObjects()->Data[ 39965 ];

	ASFXGame_eventGetPlayerLevel_Parms GetPlayerLevel_Parms;
	GetPlayerLevel_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetPlayerLevel, &GetPlayerLevel_Parms, NULL );

	if ( PlayerLevel )
		*PlayerLevel = GetPlayerLevel_Parms.PlayerLevel;

	return GetPlayerLevel_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.GetPlayer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ASFXPawn_Player*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )

class ASFXPawn_Player* ASFXGame::GetPlayer ( int ControllerId )
{
	static UFunction* pFnGetPlayer = NULL;

	if ( ! pFnGetPlayer )
		pFnGetPlayer = (UFunction*) UObject::GObjObjects()->Data[ 49634 ];

	ASFXGame_execGetPlayer_Parms GetPlayer_Parms;
	GetPlayer_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnGetPlayer, &GetPlayer_Parms, NULL );

	return GetPlayer_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.UpdateDamage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            Damage                         ( CPF_Parm )

void ASFXGame::UpdateDamage ( int Damage )
{
	static UFunction* pFnUpdateDamage = NULL;

	if ( ! pFnUpdateDamage )
		pFnUpdateDamage = (UFunction*) UObject::GObjObjects()->Data[ 39166 ];

	ASFXGame_execUpdateDamage_Parms UpdateDamage_Parms;
	UpdateDamage_Parms.Damage = Damage;

	this->ProcessEvent ( pFnUpdateDamage, &UpdateDamage_Parms, NULL );
};

// Function SFXGame.SFXGame.SortActorsByAngle
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 RefLocation                    ( CPF_Parm )
// struct FRotator                RefRotation                    ( CPF_Parm )
// unsigned long                  bPreferBioPawns                ( CPF_Parm )
// TArray< class AActor* >        List                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXGame::SortActorsByAngle ( struct FVector RefLocation, struct FRotator RefRotation, unsigned long bPreferBioPawns, TArray< class AActor* >* List )
{
	static UFunction* pFnSortActorsByAngle = NULL;

	if ( ! pFnSortActorsByAngle )
		pFnSortActorsByAngle = (UFunction*) UObject::GObjObjects()->Data[ 49627 ];

	ASFXGame_execSortActorsByAngle_Parms SortActorsByAngle_Parms;
	memcpy ( &SortActorsByAngle_Parms.RefLocation, &RefLocation, 0xC );
	memcpy ( &SortActorsByAngle_Parms.RefRotation, &RefRotation, 0xC );
	SortActorsByAngle_Parms.bPreferBioPawns = bPreferBioPawns;

	pFnSortActorsByAngle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSortActorsByAngle, &SortActorsByAngle_Parms, NULL );

	pFnSortActorsByAngle->FunctionFlags |= 0x400;

	if ( List )
		memcpy ( List, &SortActorsByAngle_Parms.List, 0xC );
};

// Function SFXGame.SFXGame.GetSimpleString
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bParse                         ( CPF_OptionalParm | CPF_Parm )

struct FString ASFXGame::GetSimpleString ( unsigned long bParse )
{
	static UFunction* pFnGetSimpleString = NULL;

	if ( ! pFnGetSimpleString )
		pFnGetSimpleString = (UFunction*) UObject::GObjObjects()->Data[ 33653 ];

	ASFXGame_execGetSimpleString_Parms GetSimpleString_Parms;
	GetSimpleString_Parms.bParse = bParse;

	pFnGetSimpleString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSimpleString, &GetSimpleString_Parms, NULL );

	pFnGetSimpleString->FunctionFlags |= 0x400;

	return GetSimpleString_Parms.ReturnValue;
};

// Function SFXGame.SFXGame.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXGame::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 49622 ];

	ASFXGame_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXGame.ReCalculate
// [0x00422002] 
// Parameters infos:
// struct FScaledFloat            F                              ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXGame::ReCalculate ( struct FScaledFloat* F )
{
	static UFunction* pFnReCalculate = NULL;

	if ( ! pFnReCalculate )
		pFnReCalculate = (UFunction*) UObject::GObjObjects()->Data[ 49618 ];

	ASFXGame_execReCalculate_Parms ReCalculate_Parms;

	this->ProcessEvent ( pFnReCalculate, &ReCalculate_Parms, NULL );

	if ( F )
		memcpy ( F, &ReCalculate_Parms.F, 0x24 );
};

// Function SFXGame.BioSPGame.SpawnGameOverGUI
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ABioSPGame::SpawnGameOverGUI ( )
{
	static UFunction* pFnSpawnGameOverGUI = NULL;

	if ( ! pFnSpawnGameOverGUI )
		pFnSpawnGameOverGUI = (UFunction*) UObject::GObjObjects()->Data[ 49959 ];

	ABioSPGame_execSpawnGameOverGUI_Parms SpawnGameOverGUI_Parms;

	this->ProcessEvent ( pFnSpawnGameOverGUI, &SpawnGameOverGUI_Parms, NULL );
};

// Function SFXGame.BioSPGame.Reset
// [0x00020002] 
// Parameters infos:

void ABioSPGame::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 49957 ];

	ABioSPGame_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function SFXGame.BioSPGame.OnMovieFinished
// [0x00020002] 
// Parameters infos:
// class UTextureMovie*           TextureMovie                   ( CPF_Parm )

void ABioSPGame::OnMovieFinished ( class UTextureMovie* TextureMovie )
{
	static UFunction* pFnOnMovieFinished = NULL;

	if ( ! pFnOnMovieFinished )
		pFnOnMovieFinished = (UFunction*) UObject::GObjObjects()->Data[ 49955 ];

	ABioSPGame_execOnMovieFinished_Parms OnMovieFinished_Parms;
	OnMovieFinished_Parms.TextureMovie = TextureMovie;

	this->ProcessEvent ( pFnOnMovieFinished, &OnMovieFinished_Parms, NULL );
};

// Function SFXGame.BioSPGame.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APlayerController*       NewPlayer                      ( CPF_Parm )

void ABioSPGame::eventPostLogin ( class APlayerController* NewPlayer )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = (UFunction*) UObject::GObjObjects()->Data[ 49951 ];

	ABioSPGame_eventPostLogin_Parms PostLogin_Parms;
	PostLogin_Parms.NewPlayer = NewPlayer;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function SFXGame.BioSPGame.SetupPartyMemberAttributes
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioPawnBehavior*        Behavior                       ( CPF_Parm )
// class UClass*                  attributesClass                ( CPF_Parm )

void ABioSPGame::SetupPartyMemberAttributes ( class UBioPawnBehavior* Behavior, class UClass* attributesClass )
{
	static UFunction* pFnSetupPartyMemberAttributes = NULL;

	if ( ! pFnSetupPartyMemberAttributes )
		pFnSetupPartyMemberAttributes = (UFunction*) UObject::GObjObjects()->Data[ 49948 ];

	ABioSPGame_execSetupPartyMemberAttributes_Parms SetupPartyMemberAttributes_Parms;
	SetupPartyMemberAttributes_Parms.Behavior = Behavior;
	SetupPartyMemberAttributes_Parms.attributesClass = attributesClass;

	pFnSetupPartyMemberAttributes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetupPartyMemberAttributes, &SetupPartyMemberAttributes_Parms, NULL );

	pFnSetupPartyMemberAttributes->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSPGame.ExtractLogoMovieSettings
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            nShouldPlay                    ( CPF_Parm | CPF_OutParm )
// int                            nIsInterruptable               ( CPF_Parm | CPF_OutParm )

void ABioSPGame::ExtractLogoMovieSettings ( int* nShouldPlay, int* nIsInterruptable )
{
	static UFunction* pFnExtractLogoMovieSettings = NULL;

	if ( ! pFnExtractLogoMovieSettings )
		pFnExtractLogoMovieSettings = (UFunction*) UObject::GObjObjects()->Data[ 49945 ];

	ABioSPGame_execExtractLogoMovieSettings_Parms ExtractLogoMovieSettings_Parms;

	pFnExtractLogoMovieSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExtractLogoMovieSettings, &ExtractLogoMovieSettings_Parms, NULL );

	pFnExtractLogoMovieSettings->FunctionFlags |= 0x400;

	if ( nShouldPlay )
		*nShouldPlay = ExtractLogoMovieSettings_Parms.nShouldPlay;

	if ( nIsInterruptable )
		*nIsInterruptable = ExtractLogoMovieSettings_Parms.nIsInterruptable;
};

// Function SFXGame.BioSPGame.StartMatch
// [0x00020002] 
// Parameters infos:

void ABioSPGame::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 49944 ];

	ABioSPGame_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function SFXGame.SFXCluster.RemoveChild
// [0x00020002] 
// Parameters infos:
// class USFXGalaxyMapObject*     Child                          ( CPF_Parm )

void USFXCluster::RemoveChild ( class USFXGalaxyMapObject* Child )
{
	static UFunction* pFnRemoveChild = NULL;

	if ( ! pFnRemoveChild )
		pFnRemoveChild = (UFunction*) UObject::GObjObjects()->Data[ 53865 ];

	USFXCluster_execRemoveChild_Parms RemoveChild_Parms;
	RemoveChild_Parms.Child = Child;

	this->ProcessEvent ( pFnRemoveChild, &RemoveChild_Parms, NULL );
};

// Function SFXGame.SFXCluster.GetChildren
// [0x00420002] 
// Parameters infos:
// TArray< class USFXGalaxyMapObject* > Children                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXCluster::GetChildren ( TArray< class USFXGalaxyMapObject* >* Children )
{
	static UFunction* pFnGetChildren = NULL;

	if ( ! pFnGetChildren )
		pFnGetChildren = (UFunction*) UObject::GObjObjects()->Data[ 53862 ];

	USFXCluster_execGetChildren_Parms GetChildren_Parms;

	this->ProcessEvent ( pFnGetChildren, &GetChildren_Parms, NULL );

	if ( Children )
		memcpy ( Children, &GetChildren_Parms.Children, 0xC );
};

// Function SFXGame.SFXCluster.AddChild
// [0x00020002] 
// Parameters infos:
// class USFXGalaxyMapObject*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXGalaxyMapObject* USFXCluster::AddChild ( )
{
	static UFunction* pFnAddChild = NULL;

	if ( ! pFnAddChild )
		pFnAddChild = (UFunction*) UObject::GObjObjects()->Data[ 53859 ];

	USFXCluster_execAddChild_Parms AddChild_Parms;

	this->ProcessEvent ( pFnAddChild, &AddChild_Parms, NULL );

	return AddChild_Parms.ReturnValue;
};

// Function SFXGame.SFXCluster.LoadFrom2DA
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXCluster::LoadFrom2DA ( )
{
	static UFunction* pFnLoadFrom2DA = NULL;

	if ( ! pFnLoadFrom2DA )
		pFnLoadFrom2DA = (UFunction*) UObject::GObjObjects()->Data[ 53857 ];

	USFXCluster_execLoadFrom2DA_Parms LoadFrom2DA_Parms;

	pFnLoadFrom2DA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadFrom2DA, &LoadFrom2DA_Parms, NULL );

	pFnLoadFrom2DA->FunctionFlags |= 0x400;

	return LoadFrom2DA_Parms.ReturnValue;
};

// Function SFXGame.SFXDamageType.GetWeaponRange
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  Weapon                         ( CPF_Parm )
// unsigned char                  Range                          ( CPF_Parm )

float USFXDamageType::eventGetWeaponRange ( class UClass* Weapon, unsigned char Range )
{
	static UFunction* pFnGetWeaponRange = NULL;

	if ( ! pFnGetWeaponRange )
		pFnGetWeaponRange = (UFunction*) UObject::GObjObjects()->Data[ 35383 ];

	USFXDamageType_eventGetWeaponRange_Parms GetWeaponRange_Parms;
	GetWeaponRange_Parms.Weapon = Weapon;
	GetWeaponRange_Parms.Range = Range;

	this->ProcessEvent ( pFnGetWeaponRange, &GetWeaponRange_Parms, NULL );

	return GetWeaponRange_Parms.ReturnValue;
};

// Function SFXGame.SFXDoorMarker.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ASFXDoorMarker::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 54740 ];

	ASFXDoorMarker_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function SFXGame.SFXDoorMarker.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ASFXDoorMarker::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = (UFunction*) UObject::GObjObjects()->Data[ 54737 ];

	ASFXDoorMarker_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function SFXGame.SFXDoorMarker.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ASFXDoorMarker::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 54734 ];

	ASFXDoorMarker_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function SFXGame.SFXDoorMarker.DoorClosed
// [0x00020002] 
// Parameters infos:

void ASFXDoorMarker::DoorClosed ( )
{
	static UFunction* pFnDoorClosed = NULL;

	if ( ! pFnDoorClosed )
		pFnDoorClosed = (UFunction*) UObject::GObjObjects()->Data[ 54733 ];

	ASFXDoorMarker_execDoorClosed_Parms DoorClosed_Parms;

	this->ProcessEvent ( pFnDoorClosed, &DoorClosed_Parms, NULL );
};

// Function SFXGame.SFXDoorMarker.DoorOpened
// [0x00020002] 
// Parameters infos:

void ASFXDoorMarker::DoorOpened ( )
{
	static UFunction* pFnDoorOpened = NULL;

	if ( ! pFnDoorOpened )
		pFnDoorOpened = (UFunction*) UObject::GObjObjects()->Data[ 54732 ];

	ASFXDoorMarker_execDoorOpened_Parms DoorOpened_Parms;

	this->ProcessEvent ( pFnDoorOpened, &DoorOpened_Parms, NULL );
};

// Function SFXGame.SFXDoorMarker.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXDoorMarker::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 54731 ];

	ASFXDoorMarker_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXDoorMarker.RestoreDoorMarkerBlockedState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXDoorMarker::RestoreDoorMarkerBlockedState ( )
{
	static UFunction* pFnRestoreDoorMarkerBlockedState = NULL;

	if ( ! pFnRestoreDoorMarkerBlockedState )
		pFnRestoreDoorMarkerBlockedState = (UFunction*) UObject::GObjObjects()->Data[ 54729 ];

	ASFXDoorMarker_execRestoreDoorMarkerBlockedState_Parms RestoreDoorMarkerBlockedState_Parms;

	pFnRestoreDoorMarkerBlockedState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRestoreDoorMarkerBlockedState, &RestoreDoorMarkerBlockedState_Parms, NULL );

	pFnRestoreDoorMarkerBlockedState->FunctionFlags |= 0x400;

	return RestoreDoorMarkerBlockedState_Parms.ReturnValue;
};

// Function SFXGame.SFXDoorMarker.UnblockDoorMarker
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXDoorMarker::UnblockDoorMarker ( )
{
	static UFunction* pFnUnblockDoorMarker = NULL;

	if ( ! pFnUnblockDoorMarker )
		pFnUnblockDoorMarker = (UFunction*) UObject::GObjObjects()->Data[ 54727 ];

	ASFXDoorMarker_execUnblockDoorMarker_Parms UnblockDoorMarker_Parms;

	pFnUnblockDoorMarker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnblockDoorMarker, &UnblockDoorMarker_Parms, NULL );

	pFnUnblockDoorMarker->FunctionFlags |= 0x400;

	return UnblockDoorMarker_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.FlushIOHandles
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXEngine::FlushIOHandles ( )
{
	static UFunction* pFnFlushIOHandles = NULL;

	if ( ! pFnFlushIOHandles )
		pFnFlushIOHandles = (UFunction*) UObject::GObjObjects()->Data[ 54915 ];

	USFXEngine_execFlushIOHandles_Parms FlushIOHandles_Parms;

	pFnFlushIOHandles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlushIOHandles, &FlushIOHandles_Parms, NULL );

	pFnFlushIOHandles->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.BioShowDebugMessageBox
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )

void USFXEngine::BioShowDebugMessageBox ( struct FString sMessage )
{
	static UFunction* pFnBioShowDebugMessageBox = NULL;

	if ( ! pFnBioShowDebugMessageBox )
		pFnBioShowDebugMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 54913 ];

	USFXEngine_execBioShowDebugMessageBox_Parms BioShowDebugMessageBox_Parms;
	memcpy ( &BioShowDebugMessageBox_Parms.sMessage, &sMessage, 0xC );

	pFnBioShowDebugMessageBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioShowDebugMessageBox, &BioShowDebugMessageBox_Parms, NULL );

	pFnBioShowDebugMessageBox->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.FindCurrentSaveDevice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXEngine::FindCurrentSaveDevice ( )
{
	static UFunction* pFnFindCurrentSaveDevice = NULL;

	if ( ! pFnFindCurrentSaveDevice )
		pFnFindCurrentSaveDevice = (UFunction*) UObject::GObjObjects()->Data[ 54911 ];

	USFXEngine_execFindCurrentSaveDevice_Parms FindCurrentSaveDevice_Parms;

	pFnFindCurrentSaveDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindCurrentSaveDevice, &FindCurrentSaveDevice_Parms, NULL );

	pFnFindCurrentSaveDevice->FunctionFlags |= 0x400;

	return FindCurrentSaveDevice_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.IsCurrentDeviceValid
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SaveSize                       ( CPF_OptionalParm | CPF_Parm )

bool USFXEngine::eventIsCurrentDeviceValid ( int SaveSize )
{
	static UFunction* pFnIsCurrentDeviceValid = NULL;

	if ( ! pFnIsCurrentDeviceValid )
		pFnIsCurrentDeviceValid = (UFunction*) UObject::GObjObjects()->Data[ 54907 ];

	USFXEngine_eventIsCurrentDeviceValid_Parms IsCurrentDeviceValid_Parms;
	IsCurrentDeviceValid_Parms.SaveSize = SaveSize;

	this->ProcessEvent ( pFnIsCurrentDeviceValid, &IsCurrentDeviceValid_Parms, NULL );

	return IsCurrentDeviceValid_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.ForceGUIUpdate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXEngine::ForceGUIUpdate ( )
{
	static UFunction* pFnForceGUIUpdate = NULL;

	if ( ! pFnForceGUIUpdate )
		pFnForceGUIUpdate = (UFunction*) UObject::GObjObjects()->Data[ 54906 ];

	USFXEngine_execForceGUIUpdate_Parms ForceGUIUpdate_Parms;

	pFnForceGUIUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceGUIUpdate, &ForceGUIUpdate_Parms, NULL );

	pFnForceGUIUpdate->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.GetCurrentTime
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXEngine::GetCurrentTime ( )
{
	static UFunction* pFnGetCurrentTime = NULL;

	if ( ! pFnGetCurrentTime )
		pFnGetCurrentTime = (UFunction*) UObject::GObjObjects()->Data[ 42446 ];

	USFXEngine_execGetCurrentTime_Parms GetCurrentTime_Parms;

	pFnGetCurrentTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentTime, &GetCurrentTime_Parms, NULL );

	pFnGetCurrentTime->FunctionFlags |= 0x400;

	return GetCurrentTime_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.GetPlayTimeSeconds
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXEngine::GetPlayTimeSeconds ( )
{
	static UFunction* pFnGetPlayTimeSeconds = NULL;

	if ( ! pFnGetPlayTimeSeconds )
		pFnGetPlayTimeSeconds = (UFunction*) UObject::GObjObjects()->Data[ 49905 ];

	USFXEngine_execGetPlayTimeSeconds_Parms GetPlayTimeSeconds_Parms;

	pFnGetPlayTimeSeconds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayTimeSeconds, &GetPlayTimeSeconds_Parms, NULL );

	pFnGetPlayTimeSeconds->FunctionFlags |= 0x400;

	return GetPlayTimeSeconds_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.LoadPlayer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXEngine::LoadPlayer ( )
{
	static UFunction* pFnLoadPlayer = NULL;

	if ( ! pFnLoadPlayer )
		pFnLoadPlayer = (UFunction*) UObject::GObjObjects()->Data[ 49708 ];

	USFXEngine_execLoadPlayer_Parms LoadPlayer_Parms;

	pFnLoadPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadPlayer, &LoadPlayer_Parms, NULL );

	pFnLoadPlayer->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.GetCurrentDevice
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXEngine::GetCurrentDevice ( )
{
	static UFunction* pFnGetCurrentDevice = NULL;

	if ( ! pFnGetCurrentDevice )
		pFnGetCurrentDevice = (UFunction*) UObject::GObjObjects()->Data[ 54902 ];

	USFXEngine_execGetCurrentDevice_Parms GetCurrentDevice_Parms;

	pFnGetCurrentDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentDevice, &GetCurrentDevice_Parms, NULL );

	pFnGetCurrentDevice->FunctionFlags |= 0x400;

	return GetCurrentDevice_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.UpdateCurrentDevice
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            DeviceID                       ( CPF_Parm )

void USFXEngine::UpdateCurrentDevice ( int DeviceID )
{
	static UFunction* pFnUpdateCurrentDevice = NULL;

	if ( ! pFnUpdateCurrentDevice )
		pFnUpdateCurrentDevice = (UFunction*) UObject::GObjObjects()->Data[ 42323 ];

	USFXEngine_execUpdateCurrentDevice_Parms UpdateCurrentDevice_Parms;
	UpdateCurrentDevice_Parms.DeviceID = DeviceID;

	pFnUpdateCurrentDevice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCurrentDevice, &UpdateCurrentDevice_Parms, NULL );

	pFnUpdateCurrentDevice->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.CheckForCorruptCareers
// [0x00820803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void USFXEngine::eventCheckForCorruptCareers ( )
{
	static UFunction* pFnCheckForCorruptCareers = NULL;

	if ( ! pFnCheckForCorruptCareers )
		pFnCheckForCorruptCareers = (UFunction*) UObject::GObjObjects()->Data[ 54897 ];

	USFXEngine_eventCheckForCorruptCareers_Parms CheckForCorruptCareers_Parms;

	this->ProcessEvent ( pFnCheckForCorruptCareers, &CheckForCorruptCareers_Parms, NULL );
};

// Function SFXGame.SFXEngine.ResumeRendering
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXEngine::ResumeRendering ( )
{
	static UFunction* pFnResumeRendering = NULL;

	if ( ! pFnResumeRendering )
		pFnResumeRendering = (UFunction*) UObject::GObjObjects()->Data[ 54896 ];

	USFXEngine_execResumeRendering_Parms ResumeRendering_Parms;

	pFnResumeRendering->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResumeRendering, &ResumeRendering_Parms, NULL );

	pFnResumeRendering->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.SuspendRendering
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXEngine::SuspendRendering ( )
{
	static UFunction* pFnSuspendRendering = NULL;

	if ( ! pFnSuspendRendering )
		pFnSuspendRendering = (UFunction*) UObject::GObjObjects()->Data[ 54895 ];

	USFXEngine_execSuspendRendering_Parms SuspendRendering_Parms;

	pFnSuspendRendering->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuspendRendering, &SuspendRendering_Parms, NULL );

	pFnSuspendRendering->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.Callback_ConfirmDeleteCorruptCareers
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void USFXEngine::Callback_ConfirmDeleteCorruptCareers ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ConfirmDeleteCorruptCareers = NULL;

	if ( ! pFnCallback_ConfirmDeleteCorruptCareers )
		pFnCallback_ConfirmDeleteCorruptCareers = (UFunction*) UObject::GObjObjects()->Data[ 54892 ];

	USFXEngine_execCallback_ConfirmDeleteCorruptCareers_Parms Callback_ConfirmDeleteCorruptCareers_Parms;
	Callback_ConfirmDeleteCorruptCareers_Parms.bAPressed = bAPressed;
	Callback_ConfirmDeleteCorruptCareers_Parms.Context = Context;

	pFnCallback_ConfirmDeleteCorruptCareers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCallback_ConfirmDeleteCorruptCareers, &Callback_ConfirmDeleteCorruptCareers_Parms, NULL );

	pFnCallback_ConfirmDeleteCorruptCareers->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.ImportME2Character
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bChapterSave                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAutoSave                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bQuickSave                     ( CPF_OptionalParm | CPF_Parm )
// struct FString                 CareerName                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            Index                          ( CPF_OptionalParm | CPF_Parm )

void USFXEngine::ImportME2Character ( unsigned long bChapterSave, unsigned long bAutoSave, unsigned long bQuickSave, struct FString CareerName, int Index )
{
	static UFunction* pFnImportME2Character = NULL;

	if ( ! pFnImportME2Character )
		pFnImportME2Character = (UFunction*) UObject::GObjObjects()->Data[ 54886 ];

	USFXEngine_execImportME2Character_Parms ImportME2Character_Parms;
	ImportME2Character_Parms.bChapterSave = bChapterSave;
	ImportME2Character_Parms.bAutoSave = bAutoSave;
	ImportME2Character_Parms.bQuickSave = bQuickSave;
	memcpy ( &ImportME2Character_Parms.CareerName, &CareerName, 0xC );
	ImportME2Character_Parms.Index = Index;

	pFnImportME2Character->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnImportME2Character, &ImportME2Character_Parms, NULL );

	pFnImportME2Character->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.ScanSaves
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXEngine::ScanSaves ( )
{
	static UFunction* pFnScanSaves = NULL;

	if ( ! pFnScanSaves )
		pFnScanSaves = (UFunction*) UObject::GObjObjects()->Data[ 54885 ];

	USFXEngine_execScanSaves_Parms ScanSaves_Parms;

	pFnScanSaves->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScanSaves, &ScanSaves_Parms, NULL );

	pFnScanSaves->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.NGSavesExist
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXEngine::NGSavesExist ( )
{
	static UFunction* pFnNGSavesExist = NULL;

	if ( ! pFnNGSavesExist )
		pFnNGSavesExist = (UFunction*) UObject::GObjObjects()->Data[ 54883 ];

	USFXEngine_execNGSavesExist_Parms NGSavesExist_Parms;

	this->ProcessEvent ( pFnNGSavesExist, &NGSavesExist_Parms, NULL );

	return NGSavesExist_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.SavesExist
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXEngine::SavesExist ( )
{
	static UFunction* pFnSavesExist = NULL;

	if ( ! pFnSavesExist )
		pFnSavesExist = (UFunction*) UObject::GObjObjects()->Data[ 54881 ];

	USFXEngine_execSavesExist_Parms SavesExist_Parms;

	this->ProcessEvent ( pFnSavesExist, &SavesExist_Parms, NULL );

	return SavesExist_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.SavesExistInCurrentCareer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXEngine::SavesExistInCurrentCareer ( )
{
	static UFunction* pFnSavesExistInCurrentCareer = NULL;

	if ( ! pFnSavesExistInCurrentCareer )
		pFnSavesExistInCurrentCareer = (UFunction*) UObject::GObjObjects()->Data[ 54879 ];

	USFXEngine_execSavesExistInCurrentCareer_Parms SavesExistInCurrentCareer_Parms;

	this->ProcessEvent ( pFnSavesExistInCurrentCareer, &SavesExistInCurrentCareer_Parms, NULL );

	return SavesExistInCurrentCareer_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.ClearSaveCache
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXEngine::ClearSaveCache ( )
{
	static UFunction* pFnClearSaveCache = NULL;

	if ( ! pFnClearSaveCache )
		pFnClearSaveCache = (UFunction*) UObject::GObjObjects()->Data[ 48003 ];

	USFXEngine_execClearSaveCache_Parms ClearSaveCache_Parms;

	pFnClearSaveCache->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearSaveCache, &ClearSaveCache_Parms, NULL );

	pFnClearSaveCache->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.CreateCareer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 FirstName                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  Origin                         ( CPF_Parm )
// unsigned char                  Notoriety                      ( CPF_Parm )

void USFXEngine::CreateCareer ( struct FString FirstName, unsigned char Origin, unsigned char Notoriety )
{
	static UFunction* pFnCreateCareer = NULL;

	if ( ! pFnCreateCareer )
		pFnCreateCareer = (UFunction*) UObject::GObjObjects()->Data[ 48004 ];

	USFXEngine_execCreateCareer_Parms CreateCareer_Parms;
	memcpy ( &CreateCareer_Parms.FirstName, &FirstName, 0xC );
	CreateCareer_Parms.Origin = Origin;
	CreateCareer_Parms.Notoriety = Notoriety;

	pFnCreateCareer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateCareer, &CreateCareer_Parms, NULL );

	pFnCreateCareer->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.ValidCharsFilter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Sin                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bFilterAccentedChars           ( CPF_Parm )

struct FString USFXEngine::ValidCharsFilter ( struct FString Sin, unsigned long bFilterAccentedChars )
{
	static UFunction* pFnValidCharsFilter = NULL;

	if ( ! pFnValidCharsFilter )
		pFnValidCharsFilter = (UFunction*) UObject::GObjObjects()->Data[ 54871 ];

	USFXEngine_execValidCharsFilter_Parms ValidCharsFilter_Parms;
	memcpy ( &ValidCharsFilter_Parms.Sin, &Sin, 0xC );
	ValidCharsFilter_Parms.bFilterAccentedChars = bFilterAccentedChars;

	pFnValidCharsFilter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnValidCharsFilter, &ValidCharsFilter_Parms, NULL );

	pFnValidCharsFilter->FunctionFlags |= 0x400;

	return ValidCharsFilter_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.CacheProfileData
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USFXProfileSettings*     Profile                        ( CPF_Parm )

void USFXEngine::CacheProfileData ( class USFXProfileSettings* Profile )
{
	static UFunction* pFnCacheProfileData = NULL;

	if ( ! pFnCacheProfileData )
		pFnCacheProfileData = (UFunction*) UObject::GObjObjects()->Data[ 42460 ];

	USFXEngine_execCacheProfileData_Parms CacheProfileData_Parms;
	CacheProfileData_Parms.Profile = Profile;

	pFnCacheProfileData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheProfileData, &CacheProfileData_Parms, NULL );

	pFnCacheProfileData->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.ReadSaveFromFile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXSaveGame*            SaveGame                       ( CPF_Parm )
// struct FString                 SavePath                       ( CPF_Parm | CPF_NeedCtorLink )

bool USFXEngine::ReadSaveFromFile ( class USFXSaveGame* SaveGame, struct FString SavePath )
{
	static UFunction* pFnReadSaveFromFile = NULL;

	if ( ! pFnReadSaveFromFile )
		pFnReadSaveFromFile = (UFunction*) UObject::GObjObjects()->Data[ 54866 ];

	USFXEngine_execReadSaveFromFile_Parms ReadSaveFromFile_Parms;
	ReadSaveFromFile_Parms.SaveGame = SaveGame;
	memcpy ( &ReadSaveFromFile_Parms.SavePath, &SavePath, 0xC );

	pFnReadSaveFromFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReadSaveFromFile, &ReadSaveFromFile_Parms, NULL );

	pFnReadSaveFromFile->FunctionFlags |= 0x400;

	return ReadSaveFromFile_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.DeleteGame
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            DeleteIndex                    ( CPF_Parm )

void USFXEngine::DeleteGame ( int DeleteIndex )
{
	static UFunction* pFnDeleteGame = NULL;

	if ( ! pFnDeleteGame )
		pFnDeleteGame = (UFunction*) UObject::GObjObjects()->Data[ 54864 ];

	USFXEngine_execDeleteGame_Parms DeleteGame_Parms;
	DeleteGame_Parms.DeleteIndex = DeleteIndex;

	pFnDeleteGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeleteGame, &DeleteGame_Parms, NULL );

	pFnDeleteGame->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.LoadGameExternal
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXEngine::LoadGameExternal ( )
{
	static UFunction* pFnLoadGameExternal = NULL;

	if ( ! pFnLoadGameExternal )
		pFnLoadGameExternal = (UFunction*) UObject::GObjObjects()->Data[ 54863 ];

	USFXEngine_execLoadGameExternal_Parms LoadGameExternal_Parms;

	pFnLoadGameExternal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadGameExternal, &LoadGameExternal_Parms, NULL );

	pFnLoadGameExternal->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.LoadGame
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            SlotIndex                      ( CPF_OptionalParm | CPF_Parm )

void USFXEngine::LoadGame ( int SlotIndex )
{
	static UFunction* pFnLoadGame = NULL;

	if ( ! pFnLoadGame )
		pFnLoadGame = (UFunction*) UObject::GObjObjects()->Data[ 54861 ];

	USFXEngine_execLoadGame_Parms LoadGame_Parms;
	LoadGame_Parms.SlotIndex = SlotIndex;

	pFnLoadGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadGame, &LoadGame_Parms, NULL );

	pFnLoadGame->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.ResumeGame
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXEngine::ResumeGame ( )
{
	static UFunction* pFnResumeGame = NULL;

	if ( ! pFnResumeGame )
		pFnResumeGame = (UFunction*) UObject::GObjObjects()->Data[ 54860 ];

	USFXEngine_execResumeGame_Parms ResumeGame_Parms;

	pFnResumeGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResumeGame, &ResumeGame_Parms, NULL );

	pFnResumeGame->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.SaveGame
// [0x00080401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 SaveGameLocation               ( CPF_Parm )
// int                            SlotIndex                      ( CPF_OptionalParm | CPF_Parm )

void USFXEngine::SaveGame ( struct FVector SaveGameLocation, int SlotIndex )
{
	static UFunction* pFnSaveGame = NULL;

	if ( ! pFnSaveGame )
		pFnSaveGame = (UFunction*) UObject::GObjObjects()->Data[ 54857 ];

	USFXEngine_execSaveGame_Parms SaveGame_Parms;
	memcpy ( &SaveGame_Parms.SaveGameLocation, &SaveGameLocation, 0xC );
	SaveGame_Parms.SlotIndex = SlotIndex;

	pFnSaveGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveGame, &SaveGame_Parms, NULL );

	pFnSaveGame->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.CurrentSystemTimeSeconds
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXEngine::CurrentSystemTimeSeconds ( )
{
	static UFunction* pFnCurrentSystemTimeSeconds = NULL;

	if ( ! pFnCurrentSystemTimeSeconds )
		pFnCurrentSystemTimeSeconds = (UFunction*) UObject::GObjObjects()->Data[ 54855 ];

	USFXEngine_execCurrentSystemTimeSeconds_Parms CurrentSystemTimeSeconds_Parms;

	pFnCurrentSystemTimeSeconds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCurrentSystemTimeSeconds, &CurrentSystemTimeSeconds_Parms, NULL );

	pFnCurrentSystemTimeSeconds->FunctionFlags |= 0x400;

	return CurrentSystemTimeSeconds_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.ReleaseSeekFreeObject
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ObjectName                     ( CPF_Parm | CPF_NeedCtorLink )

void USFXEngine::ReleaseSeekFreeObject ( struct FString ObjectName )
{
	static UFunction* pFnReleaseSeekFreeObject = NULL;

	if ( ! pFnReleaseSeekFreeObject )
		pFnReleaseSeekFreeObject = (UFunction*) UObject::GObjObjects()->Data[ 34333 ];

	USFXEngine_execReleaseSeekFreeObject_Parms ReleaseSeekFreeObject_Parms;
	memcpy ( &ReleaseSeekFreeObject_Parms.ObjectName, &ObjectName, 0xC );

	pFnReleaseSeekFreeObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleaseSeekFreeObject, &ReleaseSeekFreeObject_Parms, NULL );

	pFnReleaseSeekFreeObject->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.LoadSeekFreeObjectAsync
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Object                         ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  ObjectClass                    ( CPF_Parm )
// unsigned char                  Status                         ( CPF_Parm | CPF_OutParm )

class UObject* USFXEngine::LoadSeekFreeObjectAsync ( struct FString Object, class UClass* ObjectClass, unsigned char* Status )
{
	static UFunction* pFnLoadSeekFreeObjectAsync = NULL;

	if ( ! pFnLoadSeekFreeObjectAsync )
		pFnLoadSeekFreeObjectAsync = (UFunction*) UObject::GObjObjects()->Data[ 54849 ];

	USFXEngine_execLoadSeekFreeObjectAsync_Parms LoadSeekFreeObjectAsync_Parms;
	memcpy ( &LoadSeekFreeObjectAsync_Parms.Object, &Object, 0xC );
	LoadSeekFreeObjectAsync_Parms.ObjectClass = ObjectClass;

	pFnLoadSeekFreeObjectAsync->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadSeekFreeObjectAsync, &LoadSeekFreeObjectAsync_Parms, NULL );

	pFnLoadSeekFreeObjectAsync->FunctionFlags |= 0x400;

	if ( Status )
		*Status = LoadSeekFreeObjectAsync_Parms.Status;

	return LoadSeekFreeObjectAsync_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.LoadSeekFreeObject
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ObjectName                     ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  ObjectClass                    ( CPF_Parm )

class UObject* USFXEngine::LoadSeekFreeObject ( struct FString ObjectName, class UClass* ObjectClass )
{
	static UFunction* pFnLoadSeekFreeObject = NULL;

	if ( ! pFnLoadSeekFreeObject )
		pFnLoadSeekFreeObject = (UFunction*) UObject::GObjObjects()->Data[ 33150 ];

	USFXEngine_execLoadSeekFreeObject_Parms LoadSeekFreeObject_Parms;
	memcpy ( &LoadSeekFreeObject_Parms.ObjectName, &ObjectName, 0xC );
	LoadSeekFreeObject_Parms.ObjectClass = ObjectClass;

	pFnLoadSeekFreeObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadSeekFreeObject, &LoadSeekFreeObject_Parms, NULL );

	pFnLoadSeekFreeObject->FunctionFlags |= 0x400;

	return LoadSeekFreeObject_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.IsSeekFreeObjectSupported
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ObjectName                     ( CPF_Parm | CPF_NeedCtorLink )

bool USFXEngine::IsSeekFreeObjectSupported ( struct FString ObjectName )
{
	static UFunction* pFnIsSeekFreeObjectSupported = NULL;

	if ( ! pFnIsSeekFreeObjectSupported )
		pFnIsSeekFreeObjectSupported = (UFunction*) UObject::GObjObjects()->Data[ 33149 ];

	USFXEngine_execIsSeekFreeObjectSupported_Parms IsSeekFreeObjectSupported_Parms;
	memcpy ( &IsSeekFreeObjectSupported_Parms.ObjectName, &ObjectName, 0xC );

	pFnIsSeekFreeObjectSupported->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSeekFreeObjectSupported, &IsSeekFreeObjectSupported_Parms, NULL );

	pFnIsSeekFreeObjectSupported->FunctionFlags |= 0x400;

	return IsSeekFreeObjectSupported_Parms.ReturnValue;
};

// Function SFXGame.SFXEngine.LaunchUnreaperWithDiscCheck
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXEngine::LaunchUnreaperWithDiscCheck ( )
{
	static UFunction* pFnLaunchUnreaperWithDiscCheck = NULL;

	if ( ! pFnLaunchUnreaperWithDiscCheck )
		pFnLaunchUnreaperWithDiscCheck = (UFunction*) UObject::GObjObjects()->Data[ 54843 ];

	USFXEngine_execLaunchUnreaperWithDiscCheck_Parms LaunchUnreaperWithDiscCheck_Parms;

	pFnLaunchUnreaperWithDiscCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLaunchUnreaperWithDiscCheck, &LaunchUnreaperWithDiscCheck_Parms, NULL );

	pFnLaunchUnreaperWithDiscCheck->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.LaunchUnreaper
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXEngine::LaunchUnreaper ( )
{
	static UFunction* pFnLaunchUnreaper = NULL;

	if ( ! pFnLaunchUnreaper )
		pFnLaunchUnreaper = (UFunction*) UObject::GObjObjects()->Data[ 54842 ];

	USFXEngine_execLaunchUnreaper_Parms LaunchUnreaper_Parms;

	pFnLaunchUnreaper->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLaunchUnreaper, &LaunchUnreaper_Parms, NULL );

	pFnLaunchUnreaper->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.ReLaunchExecutable
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXEngine::ReLaunchExecutable ( )
{
	static UFunction* pFnReLaunchExecutable = NULL;

	if ( ! pFnReLaunchExecutable )
		pFnReLaunchExecutable = (UFunction*) UObject::GObjObjects()->Data[ 54841 ];

	USFXEngine_execReLaunchExecutable_Parms ReLaunchExecutable_Parms;

	pFnReLaunchExecutable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReLaunchExecutable, &ReLaunchExecutable_Parms, NULL );

	pFnReLaunchExecutable->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXEngine.SkipMovie
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXEngine::SkipMovie ( )
{
	static UFunction* pFnSkipMovie = NULL;

	if ( ! pFnSkipMovie )
		pFnSkipMovie = (UFunction*) UObject::GObjObjects()->Data[ 54840 ];

	USFXEngine_execSkipMovie_Parms SkipMovie_Parms;

	pFnSkipMovie->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSkipMovie, &SkipMovie_Parms, NULL );

	pFnSkipMovie->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGalaxy.GetChildren
// [0x00420002] 
// Parameters infos:
// TArray< class USFXGalaxyMapObject* > Children                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGalaxy::GetChildren ( TArray< class USFXGalaxyMapObject* >* Children )
{
	static UFunction* pFnGetChildren = NULL;

	if ( ! pFnGetChildren )
		pFnGetChildren = (UFunction*) UObject::GObjObjects()->Data[ 54928 ];

	USFXGalaxy_execGetChildren_Parms GetChildren_Parms;

	this->ProcessEvent ( pFnGetChildren, &GetChildren_Parms, NULL );

	if ( Children )
		memcpy ( Children, &GetChildren_Parms.Children, 0xC );
};

// Function SFXGame.SFXGalaxy.RemoveChild
// [0x00020002] 
// Parameters infos:
// class USFXGalaxyMapObject*     Child                          ( CPF_Parm )

void USFXGalaxy::RemoveChild ( class USFXGalaxyMapObject* Child )
{
	static UFunction* pFnRemoveChild = NULL;

	if ( ! pFnRemoveChild )
		pFnRemoveChild = (UFunction*) UObject::GObjObjects()->Data[ 54924 ];

	USFXGalaxy_execRemoveChild_Parms RemoveChild_Parms;
	RemoveChild_Parms.Child = Child;

	this->ProcessEvent ( pFnRemoveChild, &RemoveChild_Parms, NULL );
};

// Function SFXGame.SFXGalaxy.AddChild
// [0x00020002] 
// Parameters infos:
// class USFXGalaxyMapObject*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXGalaxyMapObject* USFXGalaxy::AddChild ( )
{
	static UFunction* pFnAddChild = NULL;

	if ( ! pFnAddChild )
		pFnAddChild = (UFunction*) UObject::GObjObjects()->Data[ 54921 ];

	USFXGalaxy_execAddChild_Parms AddChild_Parms;

	this->ProcessEvent ( pFnAddChild, &AddChild_Parms, NULL );

	return AddChild_Parms.ReturnValue;
};

// Function SFXGame.SFXGalaxy.LoadFrom2DA
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGalaxy::LoadFrom2DA ( )
{
	static UFunction* pFnLoadFrom2DA = NULL;

	if ( ! pFnLoadFrom2DA )
		pFnLoadFrom2DA = (UFunction*) UObject::GObjObjects()->Data[ 54919 ];

	USFXGalaxy_execLoadFrom2DA_Parms LoadFrom2DA_Parms;

	pFnLoadFrom2DA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadFrom2DA, &LoadFrom2DA_Parms, NULL );

	pFnLoadFrom2DA->FunctionFlags |= 0x400;

	return LoadFrom2DA_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.GetRadarFOV
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPlayerController::GetRadarFOV ( )
{
	static UFunction* pFnGetRadarFOV = NULL;

	if ( ! pFnGetRadarFOV )
		pFnGetRadarFOV = (UFunction*) UObject::GObjObjects()->Data[ 42526 ];

	ABioPlayerController_execGetRadarFOV_Parms GetRadarFOV_Parms;

	pFnGetRadarFOV->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRadarFOV, &GetRadarFOV_Parms, NULL );

	pFnGetRadarFOV->FunctionFlags |= 0x400;

	return GetRadarFOV_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.GetRadarRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPlayerController::GetRadarRange ( )
{
	static UFunction* pFnGetRadarRange = NULL;

	if ( ! pFnGetRadarRange )
		pFnGetRadarRange = (UFunction*) UObject::GObjObjects()->Data[ 42524 ];

	ABioPlayerController_execGetRadarRange_Parms GetRadarRange_Parms;

	pFnGetRadarRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRadarRange, &GetRadarRange_Parms, NULL );

	pFnGetRadarRange->FunctionFlags |= 0x400;

	return GetRadarRange_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.GetBioPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ABioPawn* ABioPlayerController::GetBioPawn ( )
{
	static UFunction* pFnGetBioPawn = NULL;

	if ( ! pFnGetBioPawn )
		pFnGetBioPawn = (UFunction*) UObject::GObjObjects()->Data[ 42522 ];

	ABioPlayerController_execGetBioPawn_Parms GetBioPawn_Parms;

	pFnGetBioPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBioPawn, &GetBioPawn_Parms, NULL );

	pFnGetBioPawn->FunctionFlags |= 0x400;

	return GetBioPawn_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.GetLoginStatus
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ABioPlayerController::GetLoginStatus ( )
{
	static UFunction* pFnGetLoginStatus = NULL;

	if ( ! pFnGetLoginStatus )
		pFnGetLoginStatus = (UFunction*) UObject::GObjObjects()->Data[ 42519 ];

	ABioPlayerController_execGetLoginStatus_Parms GetLoginStatus_Parms;

	this->ProcessEvent ( pFnGetLoginStatus, &GetLoginStatus_Parms, NULL );

	return GetLoginStatus_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.HandleWalking
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::HandleWalking ( )
{
	static UFunction* pFnHandleWalking = NULL;

	if ( ! pFnHandleWalking )
		pFnHandleWalking = (UFunction*) UObject::GObjObjects()->Data[ 42518 ];

	ABioPlayerController_execHandleWalking_Parms HandleWalking_Parms;

	this->ProcessEvent ( pFnHandleWalking, &HandleWalking_Parms, NULL );
};

// Function SFXGame.BioPlayerController.PostControllerIdChange
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::PostControllerIdChange ( )
{
	static UFunction* pFnPostControllerIdChange = NULL;

	if ( ! pFnPostControllerIdChange )
		pFnPostControllerIdChange = (UFunction*) UObject::GObjObjects()->Data[ 42515 ];

	ABioPlayerController_execPostControllerIdChange_Parms PostControllerIdChange_Parms;

	this->ProcessEvent ( pFnPostControllerIdChange, &PostControllerIdChange_Parms, NULL );
};

// Function SFXGame.BioPlayerController.IsLookInputIgnored
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::IsLookInputIgnored ( )
{
	static UFunction* pFnIsLookInputIgnored = NULL;

	if ( ! pFnIsLookInputIgnored )
		pFnIsLookInputIgnored = (UFunction*) UObject::GObjObjects()->Data[ 42513 ];

	ABioPlayerController_execIsLookInputIgnored_Parms IsLookInputIgnored_Parms;

	this->ProcessEvent ( pFnIsLookInputIgnored, &IsLookInputIgnored_Parms, NULL );

	return IsLookInputIgnored_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.UpdateInputConfiguration
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::UpdateInputConfiguration ( )
{
	static UFunction* pFnUpdateInputConfiguration = NULL;

	if ( ! pFnUpdateInputConfiguration )
		pFnUpdateInputConfiguration = (UFunction*) UObject::GObjObjects()->Data[ 42509 ];

	ABioPlayerController_execUpdateInputConfiguration_Parms UpdateInputConfiguration_Parms;

	this->ProcessEvent ( pFnUpdateInputConfiguration, &UpdateInputConfiguration_Parms, NULL );
};

// Function SFXGame.BioPlayerController.LoadPCInputConfiguration
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPlayerController::LoadPCInputConfiguration ( )
{
	static UFunction* pFnLoadPCInputConfiguration = NULL;

	if ( ! pFnLoadPCInputConfiguration )
		pFnLoadPCInputConfiguration = (UFunction*) UObject::GObjObjects()->Data[ 42508 ];

	ABioPlayerController_execLoadPCInputConfiguration_Parms LoadPCInputConfiguration_Parms;

	pFnLoadPCInputConfiguration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadPCInputConfiguration, &LoadPCInputConfiguration_Parms, NULL );

	pFnLoadPCInputConfiguration->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.SavePCInputConfiguration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXProfileSettings*     Profile                        ( CPF_Parm )

void ABioPlayerController::SavePCInputConfiguration ( class USFXProfileSettings* Profile )
{
	static UFunction* pFnSavePCInputConfiguration = NULL;

	if ( ! pFnSavePCInputConfiguration )
		pFnSavePCInputConfiguration = (UFunction*) UObject::GObjObjects()->Data[ 42506 ];

	ABioPlayerController_execSavePCInputConfiguration_Parms SavePCInputConfiguration_Parms;
	SavePCInputConfiguration_Parms.Profile = Profile;

	pFnSavePCInputConfiguration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSavePCInputConfiguration, &SavePCInputConfiguration_Parms, NULL );

	pFnSavePCInputConfiguration->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.UpdateLocalProfileSettingsCache
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPlayerController::eventUpdateLocalProfileSettingsCache ( )
{
	static UFunction* pFnUpdateLocalProfileSettingsCache = NULL;

	if ( ! pFnUpdateLocalProfileSettingsCache )
		pFnUpdateLocalProfileSettingsCache = (UFunction*) UObject::GObjObjects()->Data[ 42487 ];

	ABioPlayerController_eventUpdateLocalProfileSettingsCache_Parms UpdateLocalProfileSettingsCache_Parms;

	this->ProcessEvent ( pFnUpdateLocalProfileSettingsCache, &UpdateLocalProfileSettingsCache_Parms, NULL );
};

// Function SFXGame.BioPlayerController.CanRestartPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::CanRestartPlayer ( )
{
	static UFunction* pFnCanRestartPlayer = NULL;

	if ( ! pFnCanRestartPlayer )
		pFnCanRestartPlayer = (UFunction*) UObject::GObjObjects()->Data[ 42485 ];

	ABioPlayerController_execCanRestartPlayer_Parms CanRestartPlayer_Parms;

	this->ProcessEvent ( pFnCanRestartPlayer, &CanRestartPlayer_Parms, NULL );

	return CanRestartPlayer_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.EnableFilmgrain
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void ABioPlayerController::EnableFilmgrain ( unsigned long bEnable )
{
	static UFunction* pFnEnableFilmgrain = NULL;

	if ( ! pFnEnableFilmgrain )
		pFnEnableFilmgrain = (UFunction*) UObject::GObjObjects()->Data[ 42483 ];

	ABioPlayerController_execEnableFilmgrain_Parms EnableFilmgrain_Parms;
	EnableFilmgrain_Parms.bEnable = bEnable;

	pFnEnableFilmgrain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableFilmgrain, &EnableFilmgrain_Parms, NULL );

	pFnEnableFilmgrain->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.EnableMotionBlur
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void ABioPlayerController::EnableMotionBlur ( unsigned long bEnable )
{
	static UFunction* pFnEnableMotionBlur = NULL;

	if ( ! pFnEnableMotionBlur )
		pFnEnableMotionBlur = (UFunction*) UObject::GObjObjects()->Data[ 42481 ];

	ABioPlayerController_execEnableMotionBlur_Parms EnableMotionBlur_Parms;
	EnableMotionBlur_Parms.bEnable = bEnable;

	pFnEnableMotionBlur->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableMotionBlur, &EnableMotionBlur_Parms, NULL );

	pFnEnableMotionBlur->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.HasCompletedAchievement
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AchievementId                  ( CPF_Parm )

bool ABioPlayerController::HasCompletedAchievement ( unsigned char AchievementId )
{
	static UFunction* pFnHasCompletedAchievement = NULL;

	if ( ! pFnHasCompletedAchievement )
		pFnHasCompletedAchievement = (UFunction*) UObject::GObjObjects()->Data[ 42478 ];

	ABioPlayerController_execHasCompletedAchievement_Parms HasCompletedAchievement_Parms;
	HasCompletedAchievement_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnHasCompletedAchievement, &HasCompletedAchievement_Parms, NULL );

	return HasCompletedAchievement_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.UpdateHeavyWeaponKill
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )

void ABioPlayerController::UpdateHeavyWeaponKill ( class UClass* DamageType )
{
	static UFunction* pFnUpdateHeavyWeaponKill = NULL;

	if ( ! pFnUpdateHeavyWeaponKill )
		pFnUpdateHeavyWeaponKill = (UFunction*) UObject::GObjObjects()->Data[ 42476 ];

	ABioPlayerController_execUpdateHeavyWeaponKill_Parms UpdateHeavyWeaponKill_Parms;
	UpdateHeavyWeaponKill_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnUpdateHeavyWeaponKill, &UpdateHeavyWeaponKill_Parms, NULL );
};

// Function SFXGame.BioPlayerController.UpdateAchievementProgression
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  AchievementId                  ( CPF_Parm )
// class ABioPawn*                oTarget                        ( CPF_OptionalParm | CPF_Parm )

void ABioPlayerController::eventUpdateAchievementProgression ( unsigned char AchievementId, class ABioPawn* oTarget )
{
	static UFunction* pFnUpdateAchievementProgression = NULL;

	if ( ! pFnUpdateAchievementProgression )
		pFnUpdateAchievementProgression = (UFunction*) UObject::GObjObjects()->Data[ 42473 ];

	ABioPlayerController_eventUpdateAchievementProgression_Parms UpdateAchievementProgression_Parms;
	UpdateAchievementProgression_Parms.AchievementId = AchievementId;
	UpdateAchievementProgression_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnUpdateAchievementProgression, &UpdateAchievementProgression_Parms, NULL );
};

// Function SFXGame.BioPlayerController.UnlockAchievement
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  AchievementId                  ( CPF_Parm )

void ABioPlayerController::eventUnlockAchievement ( unsigned char AchievementId )
{
	static UFunction* pFnUnlockAchievement = NULL;

	if ( ! pFnUnlockAchievement )
		pFnUnlockAchievement = (UFunction*) UObject::GObjObjects()->Data[ 42467 ];

	ABioPlayerController_eventUnlockAchievement_Parms UnlockAchievement_Parms;
	UnlockAchievement_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnUnlockAchievement, &UnlockAchievement_Parms, NULL );
};

// Function SFXGame.BioPlayerController.NotifyReadAchievementsComplete
// [0x00020002] 
// Parameters infos:
// int                            TitleId                        ( CPF_Parm )

void ABioPlayerController::NotifyReadAchievementsComplete ( int TitleId )
{
	static UFunction* pFnNotifyReadAchievementsComplete = NULL;

	if ( ! pFnNotifyReadAchievementsComplete )
		pFnNotifyReadAchievementsComplete = (UFunction*) UObject::GObjObjects()->Data[ 42461 ];

	ABioPlayerController_execNotifyReadAchievementsComplete_Parms NotifyReadAchievementsComplete_Parms;
	NotifyReadAchievementsComplete_Parms.TitleId = TitleId;

	this->ProcessEvent ( pFnNotifyReadAchievementsComplete, &NotifyReadAchievementsComplete_Parms, NULL );
};

// Function SFXGame.BioPlayerController.UpdateProfileData
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::UpdateProfileData ( )
{
	static UFunction* pFnUpdateProfileData = NULL;

	if ( ! pFnUpdateProfileData )
		pFnUpdateProfileData = (UFunction*) UObject::GObjObjects()->Data[ 42453 ];

	ABioPlayerController_execUpdateProfileData_Parms UpdateProfileData_Parms;

	this->ProcessEvent ( pFnUpdateProfileData, &UpdateProfileData_Parms, NULL );
};

// Function SFXGame.BioPlayerController.NotifyProfileReadComplete
// [0x00020002] 
// Parameters infos:
// unsigned char                  LocalUserNum                   ( CPF_Parm )
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void ABioPlayerController::NotifyProfileReadComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful )
{
	static UFunction* pFnNotifyProfileReadComplete = NULL;

	if ( ! pFnNotifyProfileReadComplete )
		pFnNotifyProfileReadComplete = (UFunction*) UObject::GObjObjects()->Data[ 42450 ];

	ABioPlayerController_execNotifyProfileReadComplete_Parms NotifyProfileReadComplete_Parms;
	NotifyProfileReadComplete_Parms.LocalUserNum = LocalUserNum;
	NotifyProfileReadComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnNotifyProfileReadComplete, &NotifyProfileReadComplete_Parms, NULL );
};

// Function SFXGame.BioPlayerController.CheckThatGameCanContinue
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void ABioPlayerController::eventCheckThatGameCanContinue ( )
{
	static UFunction* pFnCheckThatGameCanContinue = NULL;

	if ( ! pFnCheckThatGameCanContinue )
		pFnCheckThatGameCanContinue = (UFunction*) UObject::GObjObjects()->Data[ 42433 ];

	ABioPlayerController_eventCheckThatGameCanContinue_Parms CheckThatGameCanContinue_Parms;

	this->ProcessEvent ( pFnCheckThatGameCanContinue, &CheckThatGameCanContinue_Parms, NULL );
};

// Function SFXGame.BioPlayerController.StorageDeviceChanged
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::StorageDeviceChanged ( )
{
	static UFunction* pFnStorageDeviceChanged = NULL;

	if ( ! pFnStorageDeviceChanged )
		pFnStorageDeviceChanged = (UFunction*) UObject::GObjObjects()->Data[ 42429 ];

	ABioPlayerController_execStorageDeviceChanged_Parms StorageDeviceChanged_Parms;

	this->ProcessEvent ( pFnStorageDeviceChanged, &StorageDeviceChanged_Parms, NULL );
};

// Function SFXGame.BioPlayerController.DownloadableContentWasRemoved
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::DownloadableContentWasRemoved ( )
{
	static UFunction* pFnDownloadableContentWasRemoved = NULL;

	if ( ! pFnDownloadableContentWasRemoved )
		pFnDownloadableContentWasRemoved = (UFunction*) UObject::GObjObjects()->Data[ 42427 ];

	ABioPlayerController_execDownloadableContentWasRemoved_Parms DownloadableContentWasRemoved_Parms;

	pFnDownloadableContentWasRemoved->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDownloadableContentWasRemoved, &DownloadableContentWasRemoved_Parms, NULL );

	pFnDownloadableContentWasRemoved->FunctionFlags |= 0x400;

	return DownloadableContentWasRemoved_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.Callback_PlayerLoggedOut
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void ABioPlayerController::Callback_PlayerLoggedOut ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_PlayerLoggedOut = NULL;

	if ( ! pFnCallback_PlayerLoggedOut )
		pFnCallback_PlayerLoggedOut = (UFunction*) UObject::GObjObjects()->Data[ 42424 ];

	ABioPlayerController_execCallback_PlayerLoggedOut_Parms Callback_PlayerLoggedOut_Parms;
	Callback_PlayerLoggedOut_Parms.bAPressed = bAPressed;
	Callback_PlayerLoggedOut_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_PlayerLoggedOut, &Callback_PlayerLoggedOut_Parms, NULL );
};

// Function SFXGame.BioPlayerController.NotifyLoginChange
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::NotifyLoginChange ( )
{
	static UFunction* pFnNotifyLoginChange = NULL;

	if ( ! pFnNotifyLoginChange )
		pFnNotifyLoginChange = (UFunction*) UObject::GObjObjects()->Data[ 42422 ];

	ABioPlayerController_execNotifyLoginChange_Parms NotifyLoginChange_Parms;

	this->ProcessEvent ( pFnNotifyLoginChange, &NotifyLoginChange_Parms, NULL );
};

// Function SFXGame.BioPlayerController.ClearOnlineDelegates
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::ClearOnlineDelegates ( )
{
	static UFunction* pFnClearOnlineDelegates = NULL;

	if ( ! pFnClearOnlineDelegates )
		pFnClearOnlineDelegates = (UFunction*) UObject::GObjObjects()->Data[ 42419 ];

	ABioPlayerController_execClearOnlineDelegates_Parms ClearOnlineDelegates_Parms;

	this->ProcessEvent ( pFnClearOnlineDelegates, &ClearOnlineDelegates_Parms, NULL );
};

// Function SFXGame.BioPlayerController.RegisterOnlineDelegates
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::RegisterOnlineDelegates ( )
{
	static UFunction* pFnRegisterOnlineDelegates = NULL;

	if ( ! pFnRegisterOnlineDelegates )
		pFnRegisterOnlineDelegates = (UFunction*) UObject::GObjObjects()->Data[ 42415 ];

	ABioPlayerController_execRegisterOnlineDelegates_Parms RegisterOnlineDelegates_Parms;

	this->ProcessEvent ( pFnRegisterOnlineDelegates, &RegisterOnlineDelegates_Parms, NULL );
};

// Function SFXGame.BioPlayerController.SaveProfile
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPlayerController::eventSaveProfile ( )
{
	static UFunction* pFnSaveProfile = NULL;

	if ( ! pFnSaveProfile )
		pFnSaveProfile = (UFunction*) UObject::GObjObjects()->Data[ 42410 ];

	ABioPlayerController_eventSaveProfile_Parms SaveProfile_Parms;

	this->ProcessEvent ( pFnSaveProfile, &SaveProfile_Parms, NULL );
};

// Function SFXGame.BioPlayerController.Helper_OverwriteGame
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            DeleteIndex                    ( CPF_Parm )
// int                            SaveIndex                      ( CPF_Parm )

void ABioPlayerController::Helper_OverwriteGame ( int DeleteIndex, int SaveIndex )
{
	static UFunction* pFnHelper_OverwriteGame = NULL;

	if ( ! pFnHelper_OverwriteGame )
		pFnHelper_OverwriteGame = (UFunction*) UObject::GObjObjects()->Data[ 42406 ];

	ABioPlayerController_execHelper_OverwriteGame_Parms Helper_OverwriteGame_Parms;
	Helper_OverwriteGame_Parms.DeleteIndex = DeleteIndex;
	Helper_OverwriteGame_Parms.SaveIndex = SaveIndex;

	this->ProcessEvent ( pFnHelper_OverwriteGame, &Helper_OverwriteGame_Parms, NULL );
};

// Function SFXGame.BioPlayerController.OverwriteGame
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            DeleteIndex                    ( CPF_Parm )
// int                            SaveIndex                      ( CPF_Parm )

bool ABioPlayerController::OverwriteGame ( int DeleteIndex, int SaveIndex )
{
	static UFunction* pFnOverwriteGame = NULL;

	if ( ! pFnOverwriteGame )
		pFnOverwriteGame = (UFunction*) UObject::GObjObjects()->Data[ 42398 ];

	ABioPlayerController_execOverwriteGame_Parms OverwriteGame_Parms;
	OverwriteGame_Parms.DeleteIndex = DeleteIndex;
	OverwriteGame_Parms.SaveIndex = SaveIndex;

	this->ProcessEvent ( pFnOverwriteGame, &OverwriteGame_Parms, NULL );

	return OverwriteGame_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.Helper_DeleteGame
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAutoSave                      ( CPF_Parm )
// int                            DeleteIndex                    ( CPF_Parm )
// struct FString                 CareerName                     ( CPF_Parm | CPF_NeedCtorLink )

void ABioPlayerController::Helper_DeleteGame ( unsigned long bAutoSave, int DeleteIndex, struct FString CareerName )
{
	static UFunction* pFnHelper_DeleteGame = NULL;

	if ( ! pFnHelper_DeleteGame )
		pFnHelper_DeleteGame = (UFunction*) UObject::GObjObjects()->Data[ 42392 ];

	ABioPlayerController_execHelper_DeleteGame_Parms Helper_DeleteGame_Parms;
	Helper_DeleteGame_Parms.bAutoSave = bAutoSave;
	Helper_DeleteGame_Parms.DeleteIndex = DeleteIndex;
	memcpy ( &Helper_DeleteGame_Parms.CareerName, &CareerName, 0xC );

	this->ProcessEvent ( pFnHelper_DeleteGame, &Helper_DeleteGame_Parms, NULL );
};

// Function SFXGame.BioPlayerController.DeleteGame
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAutoSave                      ( CPF_Parm )
// int                            DeleteIndex                    ( CPF_Parm )
// struct FString                 CareerName                     ( CPF_Parm | CPF_NeedCtorLink )

void ABioPlayerController::DeleteGame ( unsigned long bAutoSave, int DeleteIndex, struct FString CareerName )
{
	static UFunction* pFnDeleteGame = NULL;

	if ( ! pFnDeleteGame )
		pFnDeleteGame = (UFunction*) UObject::GObjObjects()->Data[ 42387 ];

	ABioPlayerController_execDeleteGame_Parms DeleteGame_Parms;
	DeleteGame_Parms.bAutoSave = bAutoSave;
	DeleteGame_Parms.DeleteIndex = DeleteIndex;
	memcpy ( &DeleteGame_Parms.CareerName, &CareerName, 0xC );

	this->ProcessEvent ( pFnDeleteGame, &DeleteGame_Parms, NULL );
};

// Function SFXGame.BioPlayerController.Helper_LoadGame
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bChapterSave                   ( CPF_Parm )
// unsigned long                  bAutoSave                      ( CPF_Parm )
// unsigned long                  bQuickSave                     ( CPF_Parm )
// struct FString                 CareerName                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            LoadIndex                      ( CPF_Parm )

void ABioPlayerController::Helper_LoadGame ( unsigned long bChapterSave, unsigned long bAutoSave, unsigned long bQuickSave, struct FString CareerName, int LoadIndex )
{
	static UFunction* pFnHelper_LoadGame = NULL;

	if ( ! pFnHelper_LoadGame )
		pFnHelper_LoadGame = (UFunction*) UObject::GObjObjects()->Data[ 42379 ];

	ABioPlayerController_execHelper_LoadGame_Parms Helper_LoadGame_Parms;
	Helper_LoadGame_Parms.bChapterSave = bChapterSave;
	Helper_LoadGame_Parms.bAutoSave = bAutoSave;
	Helper_LoadGame_Parms.bQuickSave = bQuickSave;
	memcpy ( &Helper_LoadGame_Parms.CareerName, &CareerName, 0xC );
	Helper_LoadGame_Parms.LoadIndex = LoadIndex;

	this->ProcessEvent ( pFnHelper_LoadGame, &Helper_LoadGame_Parms, NULL );
};

// Function SFXGame.BioPlayerController.LoadGame
// [0x00020002] 
// Parameters infos:
// unsigned long                  bChapterSave                   ( CPF_Parm )
// unsigned long                  bAutoSave                      ( CPF_Parm )
// unsigned long                  bQuickSave                     ( CPF_Parm )
// struct FString                 CareerName                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            LoadIndex                      ( CPF_Parm )

void ABioPlayerController::LoadGame ( unsigned long bChapterSave, unsigned long bAutoSave, unsigned long bQuickSave, struct FString CareerName, int LoadIndex )
{
	static UFunction* pFnLoadGame = NULL;

	if ( ! pFnLoadGame )
		pFnLoadGame = (UFunction*) UObject::GObjObjects()->Data[ 42371 ];

	ABioPlayerController_execLoadGame_Parms LoadGame_Parms;
	LoadGame_Parms.bChapterSave = bChapterSave;
	LoadGame_Parms.bAutoSave = bAutoSave;
	LoadGame_Parms.bQuickSave = bQuickSave;
	memcpy ( &LoadGame_Parms.CareerName, &CareerName, 0xC );
	LoadGame_Parms.LoadIndex = LoadIndex;

	this->ProcessEvent ( pFnLoadGame, &LoadGame_Parms, NULL );
};

// Function SFXGame.BioPlayerController.Helper_SaveGame
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            SaveIndex                      ( CPF_Parm )

void ABioPlayerController::Helper_SaveGame ( int SaveIndex )
{
	static UFunction* pFnHelper_SaveGame = NULL;

	if ( ! pFnHelper_SaveGame )
		pFnHelper_SaveGame = (UFunction*) UObject::GObjObjects()->Data[ 42354 ];

	ABioPlayerController_execHelper_SaveGame_Parms Helper_SaveGame_Parms;
	Helper_SaveGame_Parms.SaveIndex = SaveIndex;

	this->ProcessEvent ( pFnHelper_SaveGame, &Helper_SaveGame_Parms, NULL );
};

// Function SFXGame.BioPlayerController.SaveGame
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            SaveIndex                      ( CPF_Parm )

bool ABioPlayerController::SaveGame ( int SaveIndex )
{
	static UFunction* pFnSaveGame = NULL;

	if ( ! pFnSaveGame )
		pFnSaveGame = (UFunction*) UObject::GObjObjects()->Data[ 42345 ];

	ABioPlayerController_execSaveGame_Parms SaveGame_Parms;
	SaveGame_Parms.SaveIndex = SaveIndex;

	this->ProcessEvent ( pFnSaveGame, &SaveGame_Parms, NULL );

	return SaveGame_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.QuickLoad
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ABioPlayerController::QuickLoad ( )
{
	static UFunction* pFnQuickLoad = NULL;

	if ( ! pFnQuickLoad )
		pFnQuickLoad = (UFunction*) UObject::GObjObjects()->Data[ 42343 ];

	ABioPlayerController_execQuickLoad_Parms QuickLoad_Parms;

	this->ProcessEvent ( pFnQuickLoad, &QuickLoad_Parms, NULL );
};

// Function SFXGame.BioPlayerController.QuickSave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ABioPlayerController::QuickSave ( )
{
	static UFunction* pFnQuickSave = NULL;

	if ( ! pFnQuickSave )
		pFnQuickSave = (UFunction*) UObject::GObjObjects()->Data[ 42332 ];

	ABioPlayerController_execQuickSave_Parms QuickSave_Parms;

	this->ProcessEvent ( pFnQuickSave, &QuickSave_Parms, NULL );
};

// Function SFXGame.BioPlayerController.CanSave
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Reason                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ABioPlayerController::eventCanSave ( struct FString* Reason )
{
	static UFunction* pFnCanSave = NULL;

	if ( ! pFnCanSave )
		pFnCanSave = (UFunction*) UObject::GObjObjects()->Data[ 42324 ];

	ABioPlayerController_eventCanSave_Parms CanSave_Parms;

	this->ProcessEvent ( pFnCanSave, &CanSave_Parms, NULL );

	if ( Reason )
		memcpy ( Reason, &CanSave_Parms.Reason, 0xC );

	return CanSave_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.SetDeviceID
// [0x00020002] 
// Parameters infos:
// int                            nID                            ( CPF_Parm )

void ABioPlayerController::SetDeviceID ( int nID )
{
	static UFunction* pFnSetDeviceID = NULL;

	if ( ! pFnSetDeviceID )
		pFnSetDeviceID = (UFunction*) UObject::GObjObjects()->Data[ 42320 ];

	ABioPlayerController_execSetDeviceID_Parms SetDeviceID_Parms;
	SetDeviceID_Parms.nID = nID;

	this->ProcessEvent ( pFnSetDeviceID, &SetDeviceID_Parms, NULL );
};

// Function SFXGame.BioPlayerController.PreClientTravel
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::PreClientTravel ( )
{
	static UFunction* pFnPreClientTravel = NULL;

	if ( ! pFnPreClientTravel )
		pFnPreClientTravel = (UFunction*) UObject::GObjObjects()->Data[ 42319 ];

	ABioPlayerController_execPreClientTravel_Parms PreClientTravel_Parms;

	this->ProcessEvent ( pFnPreClientTravel, &PreClientTravel_Parms, NULL );
};

// Function SFXGame.BioPlayerController.GetSensitivityScaling
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPlayerController::GetSensitivityScaling ( )
{
	static UFunction* pFnGetSensitivityScaling = NULL;

	if ( ! pFnGetSensitivityScaling )
		pFnGetSensitivityScaling = (UFunction*) UObject::GObjObjects()->Data[ 42314 ];

	ABioPlayerController_execGetSensitivityScaling_Parms GetSensitivityScaling_Parms;

	this->ProcessEvent ( pFnGetSensitivityScaling, &GetSensitivityScaling_Parms, NULL );

	return GetSensitivityScaling_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.SetCinematicMode
// [0x00020002] 
// Parameters infos:
// unsigned long                  bInCinematicMode               ( CPF_Parm )
// unsigned long                  bHidePlayer                    ( CPF_Parm )
// unsigned long                  bAffectsHUD                    ( CPF_Parm )
// unsigned long                  bAffectsMovement               ( CPF_Parm )
// unsigned long                  bAffectsTurning                ( CPF_Parm )
// unsigned long                  bAffectsButtons                ( CPF_Parm )

void ABioPlayerController::SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons )
{
	static UFunction* pFnSetCinematicMode = NULL;

	if ( ! pFnSetCinematicMode )
		pFnSetCinematicMode = (UFunction*) UObject::GObjObjects()->Data[ 42303 ];

	ABioPlayerController_execSetCinematicMode_Parms SetCinematicMode_Parms;
	SetCinematicMode_Parms.bInCinematicMode = bInCinematicMode;
	SetCinematicMode_Parms.bHidePlayer = bHidePlayer;
	SetCinematicMode_Parms.bAffectsHUD = bAffectsHUD;
	SetCinematicMode_Parms.bAffectsMovement = bAffectsMovement;
	SetCinematicMode_Parms.bAffectsTurning = bAffectsTurning;
	SetCinematicMode_Parms.bAffectsButtons = bAffectsButtons;

	this->ProcessEvent ( pFnSetCinematicMode, &SetCinematicMode_Parms, NULL );
};

// Function SFXGame.BioPlayerController.GenerateTutorialEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  eTutHook                       ( CPF_Parm )

void ABioPlayerController::GenerateTutorialEvent ( unsigned char eTutHook )
{
	static UFunction* pFnGenerateTutorialEvent = NULL;

	if ( ! pFnGenerateTutorialEvent )
		pFnGenerateTutorialEvent = (UFunction*) UObject::GObjObjects()->Data[ 42286 ];

	ABioPlayerController_execGenerateTutorialEvent_Parms GenerateTutorialEvent_Parms;
	GenerateTutorialEvent_Parms.eTutHook = eTutHook;

	this->ProcessEvent ( pFnGenerateTutorialEvent, &GenerateTutorialEvent_Parms, NULL );
};

// Function SFXGame.BioPlayerController.QueueDamageIndicator
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )

void ABioPlayerController::QueueDamageIndicator ( class APawn* oPawn )
{
	static UFunction* pFnQueueDamageIndicator = NULL;

	if ( ! pFnQueueDamageIndicator )
		pFnQueueDamageIndicator = (UFunction*) UObject::GObjObjects()->Data[ 42284 ];

	ABioPlayerController_execQueueDamageIndicator_Parms QueueDamageIndicator_Parms;
	QueueDamageIndicator_Parms.oPawn = oPawn;

	pFnQueueDamageIndicator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueueDamageIndicator, &QueueDamageIndicator_Parms, NULL );

	pFnQueueDamageIndicator->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.DebugDraw_CoverCheck
// [0x00820002] 
// Parameters infos:
// class ABioHUD*                 HUD                            ( CPF_Parm )

void ABioPlayerController::DebugDraw_CoverCheck ( class ABioHUD* HUD )
{
	static UFunction* pFnDebugDraw_CoverCheck = NULL;

	if ( ! pFnDebugDraw_CoverCheck )
		pFnDebugDraw_CoverCheck = (UFunction*) UObject::GObjObjects()->Data[ 42276 ];

	ABioPlayerController_execDebugDraw_CoverCheck_Parms DebugDraw_CoverCheck_Parms;
	DebugDraw_CoverCheck_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDebugDraw_CoverCheck, &DebugDraw_CoverCheck_Parms, NULL );
};

// Function SFXGame.BioPlayerController.CheckStormToCover
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::CheckStormToCover ( )
{
	static UFunction* pFnCheckStormToCover = NULL;

	if ( ! pFnCheckStormToCover )
		pFnCheckStormToCover = (UFunction*) UObject::GObjObjects()->Data[ 42275 ];

	ABioPlayerController_execCheckStormToCover_Parms CheckStormToCover_Parms;

	this->ProcessEvent ( pFnCheckStormToCover, &CheckStormToCover_Parms, NULL );
};

// Function SFXGame.BioPlayerController.GetMaxCoverEnterDist
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPlayerController::GetMaxCoverEnterDist ( )
{
	static UFunction* pFnGetMaxCoverEnterDist = NULL;

	if ( ! pFnGetMaxCoverEnterDist )
		pFnGetMaxCoverEnterDist = (UFunction*) UObject::GObjObjects()->Data[ 42273 ];

	ABioPlayerController_execGetMaxCoverEnterDist_Parms GetMaxCoverEnterDist_Parms;

	pFnGetMaxCoverEnterDist->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxCoverEnterDist, &GetMaxCoverEnterDist_Parms, NULL );

	pFnGetMaxCoverEnterDist->FunctionFlags |= 0x400;

	return GetMaxCoverEnterDist_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.GetCoverFOV
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPlayerController::GetCoverFOV ( )
{
	static UFunction* pFnGetCoverFOV = NULL;

	if ( ! pFnGetCoverFOV )
		pFnGetCoverFOV = (UFunction*) UObject::GObjObjects()->Data[ 42271 ];

	ABioPlayerController_execGetCoverFOV_Parms GetCoverFOV_Parms;

	pFnGetCoverFOV->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCoverFOV, &GetCoverFOV_Parms, NULL );

	pFnGetCoverFOV->FunctionFlags |= 0x400;

	return GetCoverFOV_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.GetAcquireCoverFOV
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPlayerController::GetAcquireCoverFOV ( )
{
	static UFunction* pFnGetAcquireCoverFOV = NULL;

	if ( ! pFnGetAcquireCoverFOV )
		pFnGetAcquireCoverFOV = (UFunction*) UObject::GObjObjects()->Data[ 42269 ];

	ABioPlayerController_execGetAcquireCoverFOV_Parms GetAcquireCoverFOV_Parms;

	pFnGetAcquireCoverFOV->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAcquireCoverFOV, &GetAcquireCoverFOV_Parms, NULL );

	pFnGetAcquireCoverFOV->FunctionFlags |= 0x400;

	return GetAcquireCoverFOV_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.PlayLocationBasedForceFeedback
// [0x00822002] 
// Parameters infos:
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// class UForceFeedbackWaveform*  ForceFeedback                  ( CPF_Parm )
// float                          MinShakeDistance               ( CPF_OptionalParm | CPF_Parm )
// float                          MinShakeMultiplier             ( CPF_OptionalParm | CPF_Parm )

void ABioPlayerController::PlayLocationBasedForceFeedback ( struct FVector ImpactLocation, class UForceFeedbackWaveform* ForceFeedback, float MinShakeDistance, float MinShakeMultiplier )
{
	static UFunction* pFnPlayLocationBasedForceFeedback = NULL;

	if ( ! pFnPlayLocationBasedForceFeedback )
		pFnPlayLocationBasedForceFeedback = (UFunction*) UObject::GObjObjects()->Data[ 42259 ];

	ABioPlayerController_execPlayLocationBasedForceFeedback_Parms PlayLocationBasedForceFeedback_Parms;
	memcpy ( &PlayLocationBasedForceFeedback_Parms.ImpactLocation, &ImpactLocation, 0xC );
	PlayLocationBasedForceFeedback_Parms.ForceFeedback = ForceFeedback;
	PlayLocationBasedForceFeedback_Parms.MinShakeDistance = MinShakeDistance;
	PlayLocationBasedForceFeedback_Parms.MinShakeMultiplier = MinShakeMultiplier;

	this->ProcessEvent ( pFnPlayLocationBasedForceFeedback, &PlayLocationBasedForceFeedback_Parms, NULL );
};

// Function SFXGame.BioPlayerController.PlayLocationBasedCameraShake
// [0x00822002] 
// Parameters infos:
// struct FVector                 ImpactLocation                 ( CPF_Parm )
// struct FScreenShakeStruct      CameraShake                    ( CPF_Parm )
// float                          MinShakeDistance               ( CPF_OptionalParm | CPF_Parm )
// float                          MinShakeMultiplier             ( CPF_OptionalParm | CPF_Parm )

void ABioPlayerController::PlayLocationBasedCameraShake ( struct FVector ImpactLocation, struct FScreenShakeStruct CameraShake, float MinShakeDistance, float MinShakeMultiplier )
{
	static UFunction* pFnPlayLocationBasedCameraShake = NULL;

	if ( ! pFnPlayLocationBasedCameraShake )
		pFnPlayLocationBasedCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 42250 ];

	ABioPlayerController_execPlayLocationBasedCameraShake_Parms PlayLocationBasedCameraShake_Parms;
	memcpy ( &PlayLocationBasedCameraShake_Parms.ImpactLocation, &ImpactLocation, 0xC );
	memcpy ( &PlayLocationBasedCameraShake_Parms.CameraShake, &CameraShake, 0x70 );
	PlayLocationBasedCameraShake_Parms.MinShakeDistance = MinShakeDistance;
	PlayLocationBasedCameraShake_Parms.MinShakeMultiplier = MinShakeMultiplier;

	this->ProcessEvent ( pFnPlayLocationBasedCameraShake, &PlayLocationBasedCameraShake_Parms, NULL );
};

// Function SFXGame.BioPlayerController.CameraShake
// [0x00820002] 
// Parameters infos:
// float                          Duration                       ( CPF_Parm )
// struct FVector                 newRotAmplitude                ( CPF_Parm )
// struct FVector                 newRotFrequency                ( CPF_Parm )
// struct FVector                 newLocAmplitude                ( CPF_Parm )
// struct FVector                 newLocFrequency                ( CPF_Parm )
// float                          newFOVAmplitude                ( CPF_Parm )
// float                          newFOVFrequency                ( CPF_Parm )

void ABioPlayerController::CameraShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency )
{
	static UFunction* pFnCameraShake = NULL;

	if ( ! pFnCameraShake )
		pFnCameraShake = (UFunction*) UObject::GObjObjects()->Data[ 42241 ];

	ABioPlayerController_execCameraShake_Parms CameraShake_Parms;
	CameraShake_Parms.Duration = Duration;
	memcpy ( &CameraShake_Parms.newRotAmplitude, &newRotAmplitude, 0xC );
	memcpy ( &CameraShake_Parms.newRotFrequency, &newRotFrequency, 0xC );
	memcpy ( &CameraShake_Parms.newLocAmplitude, &newLocAmplitude, 0xC );
	memcpy ( &CameraShake_Parms.newLocFrequency, &newLocFrequency, 0xC );
	CameraShake_Parms.newFOVAmplitude = newFOVAmplitude;
	CameraShake_Parms.newFOVFrequency = newFOVFrequency;

	this->ProcessEvent ( pFnCameraShake, &CameraShake_Parms, NULL );
};

// Function SFXGame.BioPlayerController.IsReloading
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::IsReloading ( )
{
	static UFunction* pFnIsReloading = NULL;

	if ( ! pFnIsReloading )
		pFnIsReloading = (UFunction*) UObject::GObjObjects()->Data[ 42238 ];

	ABioPlayerController_execIsReloading_Parms IsReloading_Parms;

	this->ProcessEvent ( pFnIsReloading, &IsReloading_Parms, NULL );

	return IsReloading_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.SetZoomed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bZoomState                     ( CPF_Parm )

void ABioPlayerController::eventSetZoomed ( unsigned long bZoomState )
{
	static UFunction* pFnSetZoomed = NULL;

	if ( ! pFnSetZoomed )
		pFnSetZoomed = (UFunction*) UObject::GObjObjects()->Data[ 42235 ];

	ABioPlayerController_eventSetZoomed_Parms SetZoomed_Parms;
	SetZoomed_Parms.bZoomState = bZoomState;

	this->ProcessEvent ( pFnSetZoomed, &SetZoomed_Parms, NULL );
};

// Function SFXGame.BioPlayerController.IsZoomed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::IsZoomed ( )
{
	static UFunction* pFnIsZoomed = NULL;

	if ( ! pFnIsZoomed )
		pFnIsZoomed = (UFunction*) UObject::GObjObjects()->Data[ 40045 ];

	ABioPlayerController_execIsZoomed_Parms IsZoomed_Parms;

	pFnIsZoomed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsZoomed, &IsZoomed_Parms, NULL );

	pFnIsZoomed->FunctionFlags |= 0x400;

	return IsZoomed_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.IsPlayerPerformingBlockingAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::eventIsPlayerPerformingBlockingAction ( )
{
	static UFunction* pFnIsPlayerPerformingBlockingAction = NULL;

	if ( ! pFnIsPlayerPerformingBlockingAction )
		pFnIsPlayerPerformingBlockingAction = (UFunction*) UObject::GObjObjects()->Data[ 42231 ];

	ABioPlayerController_eventIsPlayerPerformingBlockingAction_Parms IsPlayerPerformingBlockingAction_Parms;

	this->ProcessEvent ( pFnIsPlayerPerformingBlockingAction, &IsPlayerPerformingBlockingAction_Parms, NULL );

	return IsPlayerPerformingBlockingAction_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.CancelLastOrderedPower
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   oOrderedPawn                   ( CPF_Parm )
// struct FName                   nmPower                        ( CPF_Parm )

void ABioPlayerController::eventCancelLastOrderedPower ( class APawn* oOrderedPawn, struct FName nmPower )
{
	static UFunction* pFnCancelLastOrderedPower = NULL;

	if ( ! pFnCancelLastOrderedPower )
		pFnCancelLastOrderedPower = (UFunction*) UObject::GObjObjects()->Data[ 42227 ];

	ABioPlayerController_eventCancelLastOrderedPower_Parms CancelLastOrderedPower_Parms;
	CancelLastOrderedPower_Parms.oOrderedPawn = oOrderedPawn;
	memcpy ( &CancelLastOrderedPower_Parms.nmPower, &nmPower, 0x8 );

	this->ProcessEvent ( pFnCancelLastOrderedPower, &CancelLastOrderedPower_Parms, NULL );
};

// Function SFXGame.BioPlayerController.CanRunQueuedOrder
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::CanRunQueuedOrder ( )
{
	static UFunction* pFnCanRunQueuedOrder = NULL;

	if ( ! pFnCanRunQueuedOrder )
		pFnCanRunQueuedOrder = (UFunction*) UObject::GObjObjects()->Data[ 42225 ];

	ABioPlayerController_execCanRunQueuedOrder_Parms CanRunQueuedOrder_Parms;

	pFnCanRunQueuedOrder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanRunQueuedOrder, &CanRunQueuedOrder_Parms, NULL );

	pFnCanRunQueuedOrder->FunctionFlags |= 0x400;

	return CanRunQueuedOrder_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.ClearPlayerOrder
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPlayerController::ClearPlayerOrder ( )
{
	static UFunction* pFnClearPlayerOrder = NULL;

	if ( ! pFnClearPlayerOrder )
		pFnClearPlayerOrder = (UFunction*) UObject::GObjObjects()->Data[ 42224 ];

	ABioPlayerController_execClearPlayerOrder_Parms ClearPlayerOrder_Parms;

	pFnClearPlayerOrder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearPlayerOrder, &ClearPlayerOrder_Parms, NULL );

	pFnClearPlayerOrder->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.SwitchWeapon
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ASFXWeapon*              oWpn                           ( CPF_Parm )

void ABioPlayerController::eventSwitchWeapon ( class ASFXWeapon* oWpn )
{
	static UFunction* pFnSwitchWeapon = NULL;

	if ( ! pFnSwitchWeapon )
		pFnSwitchWeapon = (UFunction*) UObject::GObjObjects()->Data[ 42220 ];

	ABioPlayerController_eventSwitchWeapon_Parms SwitchWeapon_Parms;
	SwitchWeapon_Parms.oWpn = oWpn;

	this->ProcessEvent ( pFnSwitchWeapon, &SwitchWeapon_Parms, NULL );
};

// Function SFXGame.BioPlayerController.CanStartImmediateOrder
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::CanStartImmediateOrder ( )
{
	static UFunction* pFnCanStartImmediateOrder = NULL;

	if ( ! pFnCanStartImmediateOrder )
		pFnCanStartImmediateOrder = (UFunction*) UObject::GObjObjects()->Data[ 42218 ];

	ABioPlayerController_execCanStartImmediateOrder_Parms CanStartImmediateOrder_Parms;

	this->ProcessEvent ( pFnCanStartImmediateOrder, &CanStartImmediateOrder_Parms, NULL );

	return CanStartImmediateOrder_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.CanQueueOrder
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::CanQueueOrder ( )
{
	static UFunction* pFnCanQueueOrder = NULL;

	if ( ! pFnCanQueueOrder )
		pFnCanQueueOrder = (UFunction*) UObject::GObjObjects()->Data[ 42216 ];

	ABioPlayerController_execCanQueueOrder_Parms CanQueueOrder_Parms;

	this->ProcessEvent ( pFnCanQueueOrder, &CanQueueOrder_Parms, NULL );

	return CanQueueOrder_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.OrderWeaponSwitch
// [0x00020002] 
// Parameters infos:
// class APawn*                   oOrderedPawn                   ( CPF_Parm )
// class ASFXWeapon*              Wpn                            ( CPF_Parm )

void ABioPlayerController::OrderWeaponSwitch ( class APawn* oOrderedPawn, class ASFXWeapon* Wpn )
{
	static UFunction* pFnOrderWeaponSwitch = NULL;

	if ( ! pFnOrderWeaponSwitch )
		pFnOrderWeaponSwitch = (UFunction*) UObject::GObjObjects()->Data[ 42211 ];

	ABioPlayerController_execOrderWeaponSwitch_Parms OrderWeaponSwitch_Parms;
	OrderWeaponSwitch_Parms.oOrderedPawn = oOrderedPawn;
	OrderWeaponSwitch_Parms.Wpn = Wpn;

	this->ProcessEvent ( pFnOrderWeaponSwitch, &OrderWeaponSwitch_Parms, NULL );
};

// Function SFXGame.BioPlayerController.GiveHenchmanOrder
// [0x00020002] 
// Parameters infos:
// class APawn*                   oHenchman                      ( CPF_Parm )
// unsigned char                  eOrder                         ( CPF_Parm )
// class AActor*                  oTargetActor                   ( CPF_Parm )
// struct FVector                 vTargetLocation                ( CPF_Parm )
// struct FName                   nmPower                        ( CPF_OptionalParm | CPF_Parm )
// class ASFXWeapon*              oWpn                           ( CPF_OptionalParm | CPF_Parm )
// int                            nQueue                         ( CPF_OptionalParm | CPF_Parm )

void ABioPlayerController::GiveHenchmanOrder ( class APawn* oHenchman, unsigned char eOrder, class AActor* oTargetActor, struct FVector vTargetLocation, struct FName nmPower, class ASFXWeapon* oWpn, int nQueue )
{
	static UFunction* pFnGiveHenchmanOrder = NULL;

	if ( ! pFnGiveHenchmanOrder )
		pFnGiveHenchmanOrder = (UFunction*) UObject::GObjObjects()->Data[ 42202 ];

	ABioPlayerController_execGiveHenchmanOrder_Parms GiveHenchmanOrder_Parms;
	GiveHenchmanOrder_Parms.oHenchman = oHenchman;
	GiveHenchmanOrder_Parms.eOrder = eOrder;
	GiveHenchmanOrder_Parms.oTargetActor = oTargetActor;
	memcpy ( &GiveHenchmanOrder_Parms.vTargetLocation, &vTargetLocation, 0xC );
	memcpy ( &GiveHenchmanOrder_Parms.nmPower, &nmPower, 0x8 );
	GiveHenchmanOrder_Parms.oWpn = oWpn;
	GiveHenchmanOrder_Parms.nQueue = nQueue;

	this->ProcessEvent ( pFnGiveHenchmanOrder, &GiveHenchmanOrder_Parms, NULL );
};

// Function SFXGame.BioPlayerController.HenchmanOrderHoldPosition
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   oHenchman                      ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm )

void ABioPlayerController::eventHenchmanOrderHoldPosition ( class APawn* oHenchman, struct FVector vLocation )
{
	static UFunction* pFnHenchmanOrderHoldPosition = NULL;

	if ( ! pFnHenchmanOrderHoldPosition )
		pFnHenchmanOrderHoldPosition = (UFunction*) UObject::GObjObjects()->Data[ 42198 ];

	ABioPlayerController_eventHenchmanOrderHoldPosition_Parms HenchmanOrderHoldPosition_Parms;
	HenchmanOrderHoldPosition_Parms.oHenchman = oHenchman;
	memcpy ( &HenchmanOrderHoldPosition_Parms.vLocation, &vLocation, 0xC );

	this->ProcessEvent ( pFnHenchmanOrderHoldPosition, &HenchmanOrderHoldPosition_Parms, NULL );
};

// Function SFXGame.BioPlayerController.HenchmanOrderFollow
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   oHenchman                      ( CPF_Parm )

void ABioPlayerController::eventHenchmanOrderFollow ( class APawn* oHenchman )
{
	static UFunction* pFnHenchmanOrderFollow = NULL;

	if ( ! pFnHenchmanOrderFollow )
		pFnHenchmanOrderFollow = (UFunction*) UObject::GObjObjects()->Data[ 42196 ];

	ABioPlayerController_eventHenchmanOrderFollow_Parms HenchmanOrderFollow_Parms;
	HenchmanOrderFollow_Parms.oHenchman = oHenchman;

	this->ProcessEvent ( pFnHenchmanOrderFollow, &HenchmanOrderFollow_Parms, NULL );
};

// Function SFXGame.BioPlayerController.HenchmanOrderAttackTarget
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   oHenchman                      ( CPF_Parm )
// class AActor*                  oTargetActor                   ( CPF_Parm )

void ABioPlayerController::eventHenchmanOrderAttackTarget ( class APawn* oHenchman, class AActor* oTargetActor )
{
	static UFunction* pFnHenchmanOrderAttackTarget = NULL;

	if ( ! pFnHenchmanOrderAttackTarget )
		pFnHenchmanOrderAttackTarget = (UFunction*) UObject::GObjObjects()->Data[ 42193 ];

	ABioPlayerController_eventHenchmanOrderAttackTarget_Parms HenchmanOrderAttackTarget_Parms;
	HenchmanOrderAttackTarget_Parms.oHenchman = oHenchman;
	HenchmanOrderAttackTarget_Parms.oTargetActor = oTargetActor;

	this->ProcessEvent ( pFnHenchmanOrderAttackTarget, &HenchmanOrderAttackTarget_Parms, NULL );
};

// Function SFXGame.BioPlayerController.HenchmanOrderUsePower
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   oHenchman                      ( CPF_Parm )
// class AActor*                  oTargetActor                   ( CPF_Parm )
// struct FVector                 vTargetLocation                ( CPF_Parm )
// struct FName                   nmPower                        ( CPF_Parm )
// int                            nQueue                         ( CPF_Parm )

void ABioPlayerController::eventHenchmanOrderUsePower ( class APawn* oHenchman, class AActor* oTargetActor, struct FVector vTargetLocation, struct FName nmPower, int nQueue )
{
	static UFunction* pFnHenchmanOrderUsePower = NULL;

	if ( ! pFnHenchmanOrderUsePower )
		pFnHenchmanOrderUsePower = (UFunction*) UObject::GObjObjects()->Data[ 42187 ];

	ABioPlayerController_eventHenchmanOrderUsePower_Parms HenchmanOrderUsePower_Parms;
	HenchmanOrderUsePower_Parms.oHenchman = oHenchman;
	HenchmanOrderUsePower_Parms.oTargetActor = oTargetActor;
	memcpy ( &HenchmanOrderUsePower_Parms.vTargetLocation, &vTargetLocation, 0xC );
	memcpy ( &HenchmanOrderUsePower_Parms.nmPower, &nmPower, 0x8 );
	HenchmanOrderUsePower_Parms.nQueue = nQueue;

	this->ProcessEvent ( pFnHenchmanOrderUsePower, &HenchmanOrderUsePower_Parms, NULL );
};

// Function SFXGame.BioPlayerController.GetHenchmanAttackOrderPower
// [0x00C20802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oHenchman                      ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_Parm )
// struct FName                   nmPowerName                    ( CPF_Parm | CPF_OutParm )

bool ABioPlayerController::eventGetHenchmanAttackOrderPower ( class APawn* oHenchman, class AActor* oTarget, struct FName* nmPowerName )
{
	static UFunction* pFnGetHenchmanAttackOrderPower = NULL;

	if ( ! pFnGetHenchmanAttackOrderPower )
		pFnGetHenchmanAttackOrderPower = (UFunction*) UObject::GObjObjects()->Data[ 42177 ];

	ABioPlayerController_eventGetHenchmanAttackOrderPower_Parms GetHenchmanAttackOrderPower_Parms;
	GetHenchmanAttackOrderPower_Parms.oHenchman = oHenchman;
	GetHenchmanAttackOrderPower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnGetHenchmanAttackOrderPower, &GetHenchmanAttackOrderPower_Parms, NULL );

	if ( nmPowerName )
		memcpy ( nmPowerName, &GetHenchmanAttackOrderPower_Parms.nmPowerName, 0x8 );

	return GetHenchmanAttackOrderPower_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.ProxyOnControllerChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ControllerId                   ( CPF_Parm )
// unsigned long                  bIsConnected                   ( CPF_Parm )

void ABioPlayerController::eventProxyOnControllerChanged ( int ControllerId, unsigned long bIsConnected )
{
	static UFunction* pFnProxyOnControllerChanged = NULL;

	if ( ! pFnProxyOnControllerChanged )
		pFnProxyOnControllerChanged = (UFunction*) UObject::GObjObjects()->Data[ 42174 ];

	ABioPlayerController_eventProxyOnControllerChanged_Parms ProxyOnControllerChanged_Parms;
	ProxyOnControllerChanged_Parms.ControllerId = ControllerId;
	ProxyOnControllerChanged_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnProxyOnControllerChanged, &ProxyOnControllerChanged_Parms, NULL );
};

// Function SFXGame.BioPlayerController.ResetStormCooldown
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::ResetStormCooldown ( )
{
	static UFunction* pFnResetStormCooldown = NULL;

	if ( ! pFnResetStormCooldown )
		pFnResetStormCooldown = (UFunction*) UObject::GObjObjects()->Data[ 42173 ];

	ABioPlayerController_execResetStormCooldown_Parms ResetStormCooldown_Parms;

	this->ProcessEvent ( pFnResetStormCooldown, &ResetStormCooldown_Parms, NULL );
};

// Function SFXGame.BioPlayerController.OnTeleportCameraSync
// [0x00020002] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void ABioPlayerController::OnTeleportCameraSync ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleportCameraSync = NULL;

	if ( ! pFnOnTeleportCameraSync )
		pFnOnTeleportCameraSync = (UFunction*) UObject::GObjObjects()->Data[ 42166 ];

	ABioPlayerController_execOnTeleportCameraSync_Parms OnTeleportCameraSync_Parms;
	OnTeleportCameraSync_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleportCameraSync, &OnTeleportCameraSync_Parms, NULL );
};

// Function SFXGame.BioPlayerController.SpawnPlayerCamera
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPlayerController::eventSpawnPlayerCamera ( )
{
	static UFunction* pFnSpawnPlayerCamera = NULL;

	if ( ! pFnSpawnPlayerCamera )
		pFnSpawnPlayerCamera = (UFunction*) UObject::GObjObjects()->Data[ 42165 ];

	ABioPlayerController_eventSpawnPlayerCamera_Parms SpawnPlayerCamera_Parms;

	this->ProcessEvent ( pFnSpawnPlayerCamera, &SpawnPlayerCamera_Parms, NULL );
};

// Function SFXGame.BioPlayerController.InitializeGammaCorrectionSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPlayerController::InitializeGammaCorrectionSettings ( )
{
	static UFunction* pFnInitializeGammaCorrectionSettings = NULL;

	if ( ! pFnInitializeGammaCorrectionSettings )
		pFnInitializeGammaCorrectionSettings = (UFunction*) UObject::GObjObjects()->Data[ 42164 ];

	ABioPlayerController_execInitializeGammaCorrectionSettings_Parms InitializeGammaCorrectionSettings_Parms;

	pFnInitializeGammaCorrectionSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeGammaCorrectionSettings, &InitializeGammaCorrectionSettings_Parms, NULL );

	pFnInitializeGammaCorrectionSettings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.SetPostProcessValues
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  Preset                         ( CPF_Parm )

void ABioPlayerController::SetPostProcessValues ( unsigned char Preset )
{
	static UFunction* pFnSetPostProcessValues = NULL;

	if ( ! pFnSetPostProcessValues )
		pFnSetPostProcessValues = (UFunction*) UObject::GObjObjects()->Data[ 42162 ];

	ABioPlayerController_execSetPostProcessValues_Parms SetPostProcessValues_Parms;
	SetPostProcessValues_Parms.Preset = Preset;

	pFnSetPostProcessValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPostProcessValues, &SetPostProcessValues_Parms, NULL );

	pFnSetPostProcessValues->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ABioPlayerController::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 42160 ];

	ABioPlayerController_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.GrantXP
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          XP                             ( CPF_Parm )
// unsigned long                  bSkipNotify                    ( CPF_OptionalParm | CPF_Parm )

void ABioPlayerController::GrantXP ( float XP, unsigned long bSkipNotify )
{
	static UFunction* pFnGrantXP = NULL;

	if ( ! pFnGrantXP )
		pFnGrantXP = (UFunction*) UObject::GObjObjects()->Data[ 32985 ];

	ABioPlayerController_execGrantXP_Parms GrantXP_Parms;
	GrantXP_Parms.XP = XP;
	GrantXP_Parms.bSkipNotify = bSkipNotify;

	this->ProcessEvent ( pFnGrantXP, &GrantXP_Parms, NULL );
};

// Function SFXGame.BioPlayerController.UnPossess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPlayerController::eventUnPossess ( )
{
	static UFunction* pFnUnPossess = NULL;

	if ( ! pFnUnPossess )
		pFnUnPossess = (UFunction*) UObject::GObjObjects()->Data[ 42151 ];

	ABioPlayerController_eventUnPossess_Parms UnPossess_Parms;

	this->ProcessEvent ( pFnUnPossess, &UnPossess_Parms, NULL );
};

// Function SFXGame.BioPlayerController.Possess
// [0x00020002] 
// Parameters infos:
// class APawn*                   aPawn                          ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ABioPlayerController::Possess ( class APawn* aPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 42143 ];

	ABioPlayerController_execPossess_Parms Possess_Parms;
	Possess_Parms.aPawn = aPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function SFXGame.BioPlayerController.ToggleFlyCamControl
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ABioPlayerController::ToggleFlyCamControl ( )
{
	static UFunction* pFnToggleFlyCamControl = NULL;

	if ( ! pFnToggleFlyCamControl )
		pFnToggleFlyCamControl = (UFunction*) UObject::GObjObjects()->Data[ 42127 ];

	ABioPlayerController_execToggleFlyCamControl_Parms ToggleFlyCamControl_Parms;

	this->ProcessEvent ( pFnToggleFlyCamControl, &ToggleFlyCamControl_Parms, NULL );
};

// Function SFXGame.BioPlayerController.ToggleSlowFlyCam
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ABioPlayerController::ToggleSlowFlyCam ( )
{
	static UFunction* pFnToggleSlowFlyCam = NULL;

	if ( ! pFnToggleSlowFlyCam )
		pFnToggleSlowFlyCam = (UFunction*) UObject::GObjObjects()->Data[ 42124 ];

	ABioPlayerController_execToggleSlowFlyCam_Parms ToggleSlowFlyCam_Parms;

	this->ProcessEvent ( pFnToggleSlowFlyCam, &ToggleSlowFlyCam_Parms, NULL );
};

// Function SFXGame.BioPlayerController.ToggleFlyCam
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ABioPlayerController::ToggleFlyCam ( )
{
	static UFunction* pFnToggleFlyCam = NULL;

	if ( ! pFnToggleFlyCam )
		pFnToggleFlyCam = (UFunction*) UObject::GObjObjects()->Data[ 42123 ];

	ABioPlayerController_execToggleFlyCam_Parms ToggleFlyCam_Parms;

	this->ProcessEvent ( pFnToggleFlyCam, &ToggleFlyCam_Parms, NULL );
};

// Function SFXGame.BioPlayerController.GetAdjustedAimFor
// [0x00020002] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ABioPlayerController::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 42119 ];

	ABioPlayerController_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.UpdateCover
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ABioPlayerController::UpdateCover ( )
{
	static UFunction* pFnUpdateCover = NULL;

	if ( ! pFnUpdateCover )
		pFnUpdateCover = (UFunction*) UObject::GObjObjects()->Data[ 42118 ];

	ABioPlayerController_execUpdateCover_Parms UpdateCover_Parms;

	pFnUpdateCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCover, &UpdateCover_Parms, NULL );

	pFnUpdateCover->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.UpdateEnemyList
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ABioPlayerController::UpdateEnemyList ( )
{
	static UFunction* pFnUpdateEnemyList = NULL;

	if ( ! pFnUpdateEnemyList )
		pFnUpdateEnemyList = (UFunction*) UObject::GObjObjects()->Data[ 42117 ];

	ABioPlayerController_execUpdateEnemyList_Parms UpdateEnemyList_Parms;

	pFnUpdateEnemyList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateEnemyList, &UpdateEnemyList_Parms, NULL );

	pFnUpdateEnemyList->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.IsUsingPower
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::IsUsingPower ( )
{
	static UFunction* pFnIsUsingPower = NULL;

	if ( ! pFnIsUsingPower )
		pFnIsUsingPower = (UFunction*) UObject::GObjObjects()->Data[ 42114 ];

	ABioPlayerController_execIsUsingPower_Parms IsUsingPower_Parms;

	this->ProcessEvent ( pFnIsUsingPower, &IsUsingPower_Parms, NULL );

	return IsUsingPower_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.CanDoCustomAction
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  CAction                        ( CPF_Parm )

bool ABioPlayerController::eventCanDoCustomAction ( unsigned char CAction )
{
	static UFunction* pFnCanDoCustomAction = NULL;

	if ( ! pFnCanDoCustomAction )
		pFnCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 42111 ];

	ABioPlayerController_eventCanDoCustomAction_Parms CanDoCustomAction_Parms;
	CanDoCustomAction_Parms.CAction = CAction;

	this->ProcessEvent ( pFnCanDoCustomAction, &CanDoCustomAction_Parms, NULL );

	return CanDoCustomAction_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.GetCurrentCustomAction
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioCustomAction*        Action                         ( CPF_Parm | CPF_OutParm )

bool ABioPlayerController::eventGetCurrentCustomAction ( class UBioCustomAction** Action )
{
	static UFunction* pFnGetCurrentCustomAction = NULL;

	if ( ! pFnGetCurrentCustomAction )
		pFnGetCurrentCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 42108 ];

	ABioPlayerController_eventGetCurrentCustomAction_Parms GetCurrentCustomAction_Parms;

	this->ProcessEvent ( pFnGetCurrentCustomAction, &GetCurrentCustomAction_Parms, NULL );

	if ( Action )
		*Action = GetCurrentCustomAction_Parms.Action;

	return GetCurrentCustomAction_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.AcquireCover
// [0x00020002] 
// Parameters infos:
// struct FCovPosInfo             CovInfo                        ( CPF_Parm )

void ABioPlayerController::AcquireCover ( struct FCovPosInfo CovInfo )
{
	static UFunction* pFnAcquireCover = NULL;

	if ( ! pFnAcquireCover )
		pFnAcquireCover = (UFunction*) UObject::GObjObjects()->Data[ 42105 ];

	ABioPlayerController_execAcquireCover_Parms AcquireCover_Parms;
	memcpy ( &AcquireCover_Parms.CovInfo, &CovInfo, 0x34 );

	this->ProcessEvent ( pFnAcquireCover, &AcquireCover_Parms, NULL );
};

// Function SFXGame.BioPlayerController.CanPerformMantle
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCovPosInfo             CoverInfo                      ( CPF_Parm )

bool ABioPlayerController::CanPerformMantle ( struct FCovPosInfo CoverInfo )
{
	static UFunction* pFnCanPerformMantle = NULL;

	if ( ! pFnCanPerformMantle )
		pFnCanPerformMantle = (UFunction*) UObject::GObjObjects()->Data[ 42102 ];

	ABioPlayerController_execCanPerformMantle_Parms CanPerformMantle_Parms;
	memcpy ( &CanPerformMantle_Parms.CoverInfo, &CoverInfo, 0x34 );

	pFnCanPerformMantle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanPerformMantle, &CanPerformMantle_Parms, NULL );

	pFnCanPerformMantle->FunctionFlags |= 0x400;

	return CanPerformMantle_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.CanPerformClimb
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCovPosInfo             CoverInfo                      ( CPF_Parm )

bool ABioPlayerController::CanPerformClimb ( struct FCovPosInfo CoverInfo )
{
	static UFunction* pFnCanPerformClimb = NULL;

	if ( ! pFnCanPerformClimb )
		pFnCanPerformClimb = (UFunction*) UObject::GObjObjects()->Data[ 42099 ];

	ABioPlayerController_execCanPerformClimb_Parms CanPerformClimb_Parms;
	memcpy ( &CanPerformClimb_Parms.CoverInfo, &CoverInfo, 0x34 );

	pFnCanPerformClimb->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanPerformClimb, &CanPerformClimb_Parms, NULL );

	pFnCanPerformClimb->FunctionFlags |= 0x400;

	return CanPerformClimb_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.CanPerformEnterCover
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::CanPerformEnterCover ( )
{
	static UFunction* pFnCanPerformEnterCover = NULL;

	if ( ! pFnCanPerformEnterCover )
		pFnCanPerformEnterCover = (UFunction*) UObject::GObjObjects()->Data[ 42079 ];

	ABioPlayerController_execCanPerformEnterCover_Parms CanPerformEnterCover_Parms;

	pFnCanPerformEnterCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanPerformEnterCover, &CanPerformEnterCover_Parms, NULL );

	pFnCanPerformEnterCover->FunctionFlags |= 0x400;

	return CanPerformEnterCover_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.ValidatePotentialCover
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SourceLoc                      ( CPF_Parm )
// struct FVector                 Direction                      ( CPF_Parm )
// unsigned long                  OnlyIfBetter                   ( CPF_Parm )
// float                          OutMinDotFOV                   ( CPF_Parm | CPF_OutParm )
// float                          OutMaxDistanceSquared          ( CPF_Parm | CPF_OutParm )
// struct FCovPosInfo             OutCovPosInfo                  ( CPF_Parm | CPF_OutParm )

bool ABioPlayerController::ValidatePotentialCover ( struct FVector SourceLoc, struct FVector Direction, unsigned long OnlyIfBetter, float* OutMinDotFOV, float* OutMaxDistanceSquared, struct FCovPosInfo* OutCovPosInfo )
{
	static UFunction* pFnValidatePotentialCover = NULL;

	if ( ! pFnValidatePotentialCover )
		pFnValidatePotentialCover = (UFunction*) UObject::GObjObjects()->Data[ 42090 ];

	ABioPlayerController_execValidatePotentialCover_Parms ValidatePotentialCover_Parms;
	memcpy ( &ValidatePotentialCover_Parms.SourceLoc, &SourceLoc, 0xC );
	memcpy ( &ValidatePotentialCover_Parms.Direction, &Direction, 0xC );
	ValidatePotentialCover_Parms.OnlyIfBetter = OnlyIfBetter;

	pFnValidatePotentialCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnValidatePotentialCover, &ValidatePotentialCover_Parms, NULL );

	pFnValidatePotentialCover->FunctionFlags |= 0x400;

	if ( OutMinDotFOV )
		*OutMinDotFOV = ValidatePotentialCover_Parms.OutMinDotFOV;

	if ( OutMaxDistanceSquared )
		*OutMaxDistanceSquared = ValidatePotentialCover_Parms.OutMaxDistanceSquared;

	if ( OutCovPosInfo )
		memcpy ( OutCovPosInfo, &ValidatePotentialCover_Parms.OutCovPosInfo, 0x34 );

	return ValidatePotentialCover_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.FillCoverPosInfo
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// struct FVector                 SourceLoc                      ( CPF_Parm )
// struct FVector                 Direction                      ( CPF_Parm )
// float                          MaxDistance                    ( CPF_Parm )
// struct FCovPosInfo             out_CovPosInfo                 ( CPF_Parm | CPF_OutParm )

void ABioPlayerController::FillCoverPosInfo ( class ACoverLink* Link, int SlotIdx, struct FVector SourceLoc, struct FVector Direction, float MaxDistance, struct FCovPosInfo* out_CovPosInfo )
{
	static UFunction* pFnFillCoverPosInfo = NULL;

	if ( ! pFnFillCoverPosInfo )
		pFnFillCoverPosInfo = (UFunction*) UObject::GObjObjects()->Data[ 42083 ];

	ABioPlayerController_execFillCoverPosInfo_Parms FillCoverPosInfo_Parms;
	FillCoverPosInfo_Parms.Link = Link;
	FillCoverPosInfo_Parms.SlotIdx = SlotIdx;
	memcpy ( &FillCoverPosInfo_Parms.SourceLoc, &SourceLoc, 0xC );
	memcpy ( &FillCoverPosInfo_Parms.Direction, &Direction, 0xC );
	FillCoverPosInfo_Parms.MaxDistance = MaxDistance;

	pFnFillCoverPosInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFillCoverPosInfo, &FillCoverPosInfo_Parms, NULL );

	pFnFillCoverPosInfo->FunctionFlags |= 0x400;

	if ( out_CovPosInfo )
		memcpy ( out_CovPosInfo, &FillCoverPosInfo_Parms.out_CovPosInfo, 0x34 );
};

// Function SFXGame.BioPlayerController.FindPlayerCover
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bUseRotation                   ( CPF_OptionalParm | CPF_Parm )
// struct FCovPosInfo             out_CovPosInfo                 ( CPF_Parm | CPF_OutParm )

bool ABioPlayerController::FindPlayerCover ( unsigned long bUseRotation, struct FCovPosInfo* out_CovPosInfo )
{
	static UFunction* pFnFindPlayerCover = NULL;

	if ( ! pFnFindPlayerCover )
		pFnFindPlayerCover = (UFunction*) UObject::GObjObjects()->Data[ 42078 ];

	ABioPlayerController_execFindPlayerCover_Parms FindPlayerCover_Parms;
	FindPlayerCover_Parms.bUseRotation = bUseRotation;

	pFnFindPlayerCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPlayerCover, &FindPlayerCover_Parms, NULL );

	pFnFindPlayerCover->FunctionFlags |= 0x400;

	if ( out_CovPosInfo )
		memcpy ( out_CovPosInfo, &FindPlayerCover_Parms.out_CovPosInfo, 0x34 );

	return FindPlayerCover_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.TryAcquireCover
// [0x00820203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::TryAcquireCover ( )
{
	static UFunction* pFnTryAcquireCover = NULL;

	if ( ! pFnTryAcquireCover )
		pFnTryAcquireCover = (UFunction*) UObject::GObjObjects()->Data[ 42072 ];

	ABioPlayerController_execTryAcquireCover_Parms TryAcquireCover_Parms;

	this->ProcessEvent ( pFnTryAcquireCover, &TryAcquireCover_Parms, NULL );

	return TryAcquireCover_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.NotifyCoverDisabled
// [0x00020102] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

void ABioPlayerController::NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx )
{
	static UFunction* pFnNotifyCoverDisabled = NULL;

	if ( ! pFnNotifyCoverDisabled )
		pFnNotifyCoverDisabled = (UFunction*) UObject::GObjObjects()->Data[ 42068 ];

	ABioPlayerController_execNotifyCoverDisabled_Parms NotifyCoverDisabled_Parms;
	NotifyCoverDisabled_Parms.Link = Link;
	NotifyCoverDisabled_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnNotifyCoverDisabled, &NotifyCoverDisabled_Parms, NULL );
};

// Function SFXGame.BioPlayerController.NotifyReachedCoverSlot
// [0x00820002] 
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )
// int                            OldSlotIdx                     ( CPF_Parm )

void ABioPlayerController::NotifyReachedCoverSlot ( int SlotIdx, int OldSlotIdx )
{
	static UFunction* pFnNotifyReachedCoverSlot = NULL;

	if ( ! pFnNotifyReachedCoverSlot )
		pFnNotifyReachedCoverSlot = (UFunction*) UObject::GObjObjects()->Data[ 42062 ];

	ABioPlayerController_execNotifyReachedCoverSlot_Parms NotifyReachedCoverSlot_Parms;
	NotifyReachedCoverSlot_Parms.SlotIdx = SlotIdx;
	NotifyReachedCoverSlot_Parms.OldSlotIdx = OldSlotIdx;

	this->ProcessEvent ( pFnNotifyReachedCoverSlot, &NotifyReachedCoverSlot_Parms, NULL );
};

// Function SFXGame.BioPlayerController.SetIsInStationaryCover
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bIsInStationaryCover           ( CPF_Parm )

void ABioPlayerController::SetIsInStationaryCover ( unsigned long bIsInStationaryCover )
{
	static UFunction* pFnSetIsInStationaryCover = NULL;

	if ( ! pFnSetIsInStationaryCover )
		pFnSetIsInStationaryCover = (UFunction*) UObject::GObjObjects()->Data[ 42037 ];

	ABioPlayerController_execSetIsInStationaryCover_Parms SetIsInStationaryCover_Parms;
	SetIsInStationaryCover_Parms.bIsInStationaryCover = bIsInStationaryCover;

	this->ProcessEvent ( pFnSetIsInStationaryCover, &SetIsInStationaryCover_Parms, NULL );
};

// Function SFXGame.BioPlayerController.GetPawnCoverType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ABioPlayerController::GetPawnCoverType ( )
{
	static UFunction* pFnGetPawnCoverType = NULL;

	if ( ! pFnGetPawnCoverType )
		pFnGetPawnCoverType = (UFunction*) UObject::GObjObjects()->Data[ 42057 ];

	ABioPlayerController_execGetPawnCoverType_Parms GetPawnCoverType_Parms;

	this->ProcessEvent ( pFnGetPawnCoverType, &GetPawnCoverType_Parms, NULL );

	return GetPawnCoverType_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.SetPawnCoverType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  NewCoverType                   ( CPF_Parm )

void ABioPlayerController::SetPawnCoverType ( unsigned char NewCoverType )
{
	static UFunction* pFnSetPawnCoverType = NULL;

	if ( ! pFnSetPawnCoverType )
		pFnSetPawnCoverType = (UFunction*) UObject::GObjObjects()->Data[ 42054 ];

	ABioPlayerController_execSetPawnCoverType_Parms SetPawnCoverType_Parms;
	SetPawnCoverType_Parms.NewCoverType = NewCoverType;

	this->ProcessEvent ( pFnSetPawnCoverType, &SetPawnCoverType_Parms, NULL );
};

// Function SFXGame.BioPlayerController.GetPawnCoverAction
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ABioPlayerController::GetPawnCoverAction ( )
{
	static UFunction* pFnGetPawnCoverAction = NULL;

	if ( ! pFnGetPawnCoverAction )
		pFnGetPawnCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 42008 ];

	ABioPlayerController_execGetPawnCoverAction_Parms GetPawnCoverAction_Parms;

	this->ProcessEvent ( pFnGetPawnCoverAction, &GetPawnCoverAction_Parms, NULL );

	return GetPawnCoverAction_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.SetPawnCoverAction
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  NewCoverAction                 ( CPF_Parm )

void ABioPlayerController::SetPawnCoverAction ( unsigned char NewCoverAction )
{
	static UFunction* pFnSetPawnCoverAction = NULL;

	if ( ! pFnSetPawnCoverAction )
		pFnSetPawnCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 42049 ];

	ABioPlayerController_execSetPawnCoverAction_Parms SetPawnCoverAction_Parms;
	SetPawnCoverAction_Parms.NewCoverAction = NewCoverAction;

	this->ProcessEvent ( pFnSetPawnCoverAction, &SetPawnCoverAction_Parms, NULL );
};

// Function SFXGame.BioPlayerController.GetCoverDirection
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ABioPlayerController::GetCoverDirection ( )
{
	static UFunction* pFnGetCoverDirection = NULL;

	if ( ! pFnGetCoverDirection )
		pFnGetCoverDirection = (UFunction*) UObject::GObjObjects()->Data[ 42009 ];

	ABioPlayerController_execGetCoverDirection_Parms GetCoverDirection_Parms;

	this->ProcessEvent ( pFnGetCoverDirection, &GetCoverDirection_Parms, NULL );

	return GetCoverDirection_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.SetCoverDirection
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  NewCoverDirection              ( CPF_Parm )

void ABioPlayerController::SetCoverDirection ( unsigned char NewCoverDirection )
{
	static UFunction* pFnSetCoverDirection = NULL;

	if ( ! pFnSetCoverDirection )
		pFnSetCoverDirection = (UFunction*) UObject::GObjObjects()->Data[ 42044 ];

	ABioPlayerController_execSetCoverDirection_Parms SetCoverDirection_Parms;
	SetCoverDirection_Parms.NewCoverDirection = NewCoverDirection;

	this->ProcessEvent ( pFnSetCoverDirection, &SetCoverDirection_Parms, NULL );
};

// Function SFXGame.BioPlayerController.LeaveCover
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ABioPlayerController::LeaveCover ( )
{
	static UFunction* pFnLeaveCover = NULL;

	if ( ! pFnLeaveCover )
		pFnLeaveCover = (UFunction*) UObject::GObjObjects()->Data[ 34873 ];

	ABioPlayerController_execLeaveCover_Parms LeaveCover_Parms;

	this->ProcessEvent ( pFnLeaveCover, &LeaveCover_Parms, NULL );
};

// Function SFXGame.BioPlayerController.CoverLog
// [0x00020002] 
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Function                       ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void ABioPlayerController::CoverLog ( struct FString msg, struct FString Function )
{
	static UFunction* pFnCoverLog = NULL;

	if ( ! pFnCoverLog )
		pFnCoverLog = (UFunction*) UObject::GObjObjects()->Data[ 42040 ];

	ABioPlayerController_execCoverLog_Parms CoverLog_Parms;
	memcpy ( &CoverLog_Parms.msg, &msg, 0xC );
	memcpy ( &CoverLog_Parms.Function, &Function, 0xC );

	this->ProcessEvent ( pFnCoverLog, &CoverLog_Parms, NULL );
};

// Function SFXGame.BioPlayerController.IsInCoverState
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::IsInCoverState ( )
{
	static UFunction* pFnIsInCoverState = NULL;

	if ( ! pFnIsInCoverState )
		pFnIsInCoverState = (UFunction*) UObject::GObjObjects()->Data[ 42038 ];

	ABioPlayerController_execIsInCoverState_Parms IsInCoverState_Parms;

	this->ProcessEvent ( pFnIsInCoverState, &IsInCoverState_Parms, NULL );

	return IsInCoverState_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.EnableTransitions
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::EnableTransitions ( )
{
	static UFunction* pFnEnableTransitions = NULL;

	if ( ! pFnEnableTransitions )
		pFnEnableTransitions = (UFunction*) UObject::GObjObjects()->Data[ 41971 ];

	ABioPlayerController_execEnableTransitions_Parms EnableTransitions_Parms;

	this->ProcessEvent ( pFnEnableTransitions, &EnableTransitions_Parms, NULL );
};

// Function SFXGame.BioPlayerController.BreakFromCover
// [0x00020000] 
// Parameters infos:

void ABioPlayerController::BreakFromCover ( )
{
	static UFunction* pFnBreakFromCover = NULL;

	if ( ! pFnBreakFromCover )
		pFnBreakFromCover = (UFunction*) UObject::GObjObjects()->Data[ 41970 ];

	ABioPlayerController_execBreakFromCover_Parms BreakFromCover_Parms;

	this->ProcessEvent ( pFnBreakFromCover, &BreakFromCover_Parms, NULL );
};

// Function SFXGame.BioPlayerController.IsCameraAlignedWithCoverSlot
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fThreshold                     ( CPF_OptionalParm | CPF_Parm )

bool ABioPlayerController::IsCameraAlignedWithCoverSlot ( float fThreshold )
{
	static UFunction* pFnIsCameraAlignedWithCoverSlot = NULL;

	if ( ! pFnIsCameraAlignedWithCoverSlot )
		pFnIsCameraAlignedWithCoverSlot = (UFunction*) UObject::GObjObjects()->Data[ 41964 ];

	ABioPlayerController_execIsCameraAlignedWithCoverSlot_Parms IsCameraAlignedWithCoverSlot_Parms;
	IsCameraAlignedWithCoverSlot_Parms.fThreshold = fThreshold;

	this->ProcessEvent ( pFnIsCameraAlignedWithCoverSlot, &IsCameraAlignedWithCoverSlot_Parms, NULL );

	return IsCameraAlignedWithCoverSlot_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.DetermineLeanDirection
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                BioPawn                        ( CPF_Parm )
// struct FCoverSlot              CurrentSlot                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// unsigned char                  out_PawnCA                     ( CPF_Parm | CPF_OutParm )
// unsigned char                  out_PawnCD                     ( CPF_Parm | CPF_OutParm )

void ABioPlayerController::DetermineLeanDirection ( class ABioPawn* BioPawn, struct FCoverSlot* CurrentSlot, unsigned char* out_PawnCA, unsigned char* out_PawnCD )
{
	static UFunction* pFnDetermineLeanDirection = NULL;

	if ( ! pFnDetermineLeanDirection )
		pFnDetermineLeanDirection = (UFunction*) UObject::GObjObjects()->Data[ 41959 ];

	ABioPlayerController_execDetermineLeanDirection_Parms DetermineLeanDirection_Parms;
	DetermineLeanDirection_Parms.BioPawn = BioPawn;

	pFnDetermineLeanDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetermineLeanDirection, &DetermineLeanDirection_Parms, NULL );

	pFnDetermineLeanDirection->FunctionFlags |= 0x400;

	if ( CurrentSlot )
		memcpy ( CurrentSlot, &DetermineLeanDirection_Parms.CurrentSlot, 0xB8 );

	if ( out_PawnCA )
		*out_PawnCA = DetermineLeanDirection_Parms.out_PawnCA;

	if ( out_PawnCD )
		*out_PawnCD = DetermineLeanDirection_Parms.out_PawnCD;
};

// Function SFXGame.BioPlayerController.PawnLanded
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::PawnLanded ( )
{
	static UFunction* pFnPawnLanded = NULL;

	if ( ! pFnPawnLanded )
		pFnPawnLanded = (UFunction*) UObject::GObjObjects()->Data[ 41540 ];

	ABioPlayerController_execPawnLanded_Parms PawnLanded_Parms;

	this->ProcessEvent ( pFnPawnLanded, &PawnLanded_Parms, NULL );
};

// Function SFXGame.BioPlayerController.PawnFalling
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::PawnFalling ( )
{
	static UFunction* pFnPawnFalling = NULL;

	if ( ! pFnPawnFalling )
		pFnPawnFalling = (UFunction*) UObject::GObjObjects()->Data[ 41539 ];

	ABioPlayerController_execPawnFalling_Parms PawnFalling_Parms;

	this->ProcessEvent ( pFnPawnFalling, &PawnFalling_Parms, NULL );
};

// Function SFXGame.BioPlayerController.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )

void ABioPlayerController::PawnDied ( class APawn* inPawn )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 41536 ];

	ABioPlayerController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.inPawn = inPawn;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function SFXGame.BioPlayerController.ApplyTacticalOrders
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPlayerController::eventApplyTacticalOrders ( )
{
	static UFunction* pFnApplyTacticalOrders = NULL;

	if ( ! pFnApplyTacticalOrders )
		pFnApplyTacticalOrders = (UFunction*) UObject::GObjObjects()->Data[ 41533 ];

	ABioPlayerController_eventApplyTacticalOrders_Parms ApplyTacticalOrders_Parms;

	this->ProcessEvent ( pFnApplyTacticalOrders, &ApplyTacticalOrders_Parms, NULL );
};

// Function SFXGame.BioPlayerController.CanStorm
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::CanStorm ( )
{
	static UFunction* pFnCanStorm = NULL;

	if ( ! pFnCanStorm )
		pFnCanStorm = (UFunction*) UObject::GObjObjects()->Data[ 41531 ];

	ABioPlayerController_execCanStorm_Parms CanStorm_Parms;

	pFnCanStorm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanStorm, &CanStorm_Parms, NULL );

	pFnCanStorm->FunctionFlags |= 0x400;

	return CanStorm_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.IsExploreTargetable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ABioPlayerController::IsExploreTargetable ( class AActor* A )
{
	static UFunction* pFnIsExploreTargetable = NULL;

	if ( ! pFnIsExploreTargetable )
		pFnIsExploreTargetable = (UFunction*) UObject::GObjObjects()->Data[ 41528 ];

	ABioPlayerController_execIsExploreTargetable_Parms IsExploreTargetable_Parms;
	IsExploreTargetable_Parms.A = A;

	pFnIsExploreTargetable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsExploreTargetable, &IsExploreTargetable_Parms, NULL );

	pFnIsExploreTargetable->FunctionFlags |= 0x400;

	return IsExploreTargetable_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.IsCombatTargetable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  A                              ( CPF_Parm )

bool ABioPlayerController::IsCombatTargetable ( class AActor* A )
{
	static UFunction* pFnIsCombatTargetable = NULL;

	if ( ! pFnIsCombatTargetable )
		pFnIsCombatTargetable = (UFunction*) UObject::GObjObjects()->Data[ 41525 ];

	ABioPlayerController_execIsCombatTargetable_Parms IsCombatTargetable_Parms;
	IsCombatTargetable_Parms.A = A;

	pFnIsCombatTargetable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCombatTargetable, &IsCombatTargetable_Parms, NULL );

	pFnIsCombatTargetable->FunctionFlags |= 0x400;

	return IsCombatTargetable_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.RefreshRadarData
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPlayerController::RefreshRadarData ( )
{
	static UFunction* pFnRefreshRadarData = NULL;

	if ( ! pFnRefreshRadarData )
		pFnRefreshRadarData = (UFunction*) UObject::GObjObjects()->Data[ 41524 ];

	ABioPlayerController_execRefreshRadarData_Parms RefreshRadarData_Parms;

	pFnRefreshRadarData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshRadarData, &RefreshRadarData_Parms, NULL );

	pFnRefreshRadarData->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ABioPlayerController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 41520 ];

	ABioPlayerController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.BioPlayerController.UpdateMoveToIndicator
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   pSquadPawn                     ( CPF_Parm )
// struct FVector                 vMoveToPosition                ( CPF_Parm )

bool ABioPlayerController::UpdateMoveToIndicator ( class APawn* pSquadPawn, struct FVector vMoveToPosition )
{
	static UFunction* pFnUpdateMoveToIndicator = NULL;

	if ( ! pFnUpdateMoveToIndicator )
		pFnUpdateMoveToIndicator = (UFunction*) UObject::GObjObjects()->Data[ 41516 ];

	ABioPlayerController_execUpdateMoveToIndicator_Parms UpdateMoveToIndicator_Parms;
	UpdateMoveToIndicator_Parms.pSquadPawn = pSquadPawn;
	memcpy ( &UpdateMoveToIndicator_Parms.vMoveToPosition, &vMoveToPosition, 0xC );

	pFnUpdateMoveToIndicator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMoveToIndicator, &UpdateMoveToIndicator_Parms, NULL );

	pFnUpdateMoveToIndicator->FunctionFlags |= 0x400;

	return UpdateMoveToIndicator_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.FindUberDOFEffect
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UDOFEffect*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UDOFEffect* ABioPlayerController::FindUberDOFEffect ( )
{
	static UFunction* pFnFindUberDOFEffect = NULL;

	if ( ! pFnFindUberDOFEffect )
		pFnFindUberDOFEffect = (UFunction*) UObject::GObjObjects()->Data[ 41514 ];

	ABioPlayerController_execFindUberDOFEffect_Parms FindUberDOFEffect_Parms;

	pFnFindUberDOFEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindUberDOFEffect, &FindUberDOFEffect_Parms, NULL );

	pFnFindUberDOFEffect->FunctionFlags |= 0x400;

	return FindUberDOFEffect_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.OnExitedCover
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ABioPlayerController::OnExitedCover ( )
{
	static UFunction* pFnOnExitedCover = NULL;

	if ( ! pFnOnExitedCover )
		pFnOnExitedCover = (UFunction*) UObject::GObjObjects()->Data[ 39800 ];

	ABioPlayerController_execOnExitedCover_Parms OnExitedCover_Parms;

	pFnOnExitedCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnExitedCover, &OnExitedCover_Parms, NULL );

	pFnOnExitedCover->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.OnEnteredCover
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ABioPlayerController::OnEnteredCover ( )
{
	static UFunction* pFnOnEnteredCover = NULL;

	if ( ! pFnOnEnteredCover )
		pFnOnEnteredCover = (UFunction*) UObject::GObjObjects()->Data[ 39782 ];

	ABioPlayerController_execOnEnteredCover_Parms OnEnteredCover_Parms;

	pFnOnEnteredCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnEnteredCover, &OnEnteredCover_Parms, NULL );

	pFnOnEnteredCover->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.GetInputDisabled
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerController::GetInputDisabled ( )
{
	static UFunction* pFnGetInputDisabled = NULL;

	if ( ! pFnGetInputDisabled )
		pFnGetInputDisabled = (UFunction*) UObject::GObjObjects()->Data[ 41511 ];

	ABioPlayerController_execGetInputDisabled_Parms GetInputDisabled_Parms;

	this->ProcessEvent ( pFnGetInputDisabled, &GetInputDisabled_Parms, NULL );

	return GetInputDisabled_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.SetInputDisabled
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVal                           ( CPF_Parm )

void ABioPlayerController::SetInputDisabled ( unsigned long bVal )
{
	static UFunction* pFnSetInputDisabled = NULL;

	if ( ! pFnSetInputDisabled )
		pFnSetInputDisabled = (UFunction*) UObject::GObjObjects()->Data[ 41508 ];

	ABioPlayerController_execSetInputDisabled_Parms SetInputDisabled_Parms;
	SetInputDisabled_Parms.bVal = bVal;

	this->ProcessEvent ( pFnSetInputDisabled, &SetInputDisabled_Parms, NULL );
};

// Function SFXGame.BioPlayerController.ActivateMelee
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPlayerController::eventActivateMelee ( )
{
	static UFunction* pFnActivateMelee = NULL;

	if ( ! pFnActivateMelee )
		pFnActivateMelee = (UFunction*) UObject::GObjObjects()->Data[ 41503 ];

	ABioPlayerController_eventActivateMelee_Parms ActivateMelee_Parms;

	this->ProcessEvent ( pFnActivateMelee, &ActivateMelee_Parms, NULL );
};

// Function SFXGame.BioPlayerController.GetZoomSnapWeaponInfo
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 Weapon                         ( CPF_Parm )
// int                            idx                            ( CPF_Parm )
// unsigned char                  AimNode                        ( CPF_Parm | CPF_OutParm )
// float                          OuterSnapAngle                 ( CPF_Parm | CPF_OutParm )
// float                          InnerSnapAngle                 ( CPF_Parm | CPF_OutParm )
// float                          OffsetMag                      ( CPF_Parm | CPF_OutParm )

bool ABioPlayerController::eventGetZoomSnapWeaponInfo ( class AWeapon* Weapon, int idx, unsigned char* AimNode, float* OuterSnapAngle, float* InnerSnapAngle, float* OffsetMag )
{
	static UFunction* pFnGetZoomSnapWeaponInfo = NULL;

	if ( ! pFnGetZoomSnapWeaponInfo )
		pFnGetZoomSnapWeaponInfo = (UFunction*) UObject::GObjObjects()->Data[ 41488 ];

	ABioPlayerController_eventGetZoomSnapWeaponInfo_Parms GetZoomSnapWeaponInfo_Parms;
	GetZoomSnapWeaponInfo_Parms.Weapon = Weapon;
	GetZoomSnapWeaponInfo_Parms.idx = idx;

	this->ProcessEvent ( pFnGetZoomSnapWeaponInfo, &GetZoomSnapWeaponInfo_Parms, NULL );

	if ( AimNode )
		*AimNode = GetZoomSnapWeaponInfo_Parms.AimNode;

	if ( OuterSnapAngle )
		*OuterSnapAngle = GetZoomSnapWeaponInfo_Parms.OuterSnapAngle;

	if ( InnerSnapAngle )
		*InnerSnapAngle = GetZoomSnapWeaponInfo_Parms.InnerSnapAngle;

	if ( OffsetMag )
		*OffsetMag = GetZoomSnapWeaponInfo_Parms.OffsetMag;

	return GetZoomSnapWeaponInfo_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.GetZoomSnapTarget
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          MinDistance                    ( CPF_Parm )
// float                          MaxDistance                    ( CPF_Parm )
// struct FVector                 AimLocation                    ( CPF_Parm | CPF_OutParm )

class APawn* ABioPlayerController::GetZoomSnapTarget ( float MinDistance, float MaxDistance, struct FVector* AimLocation )
{
	static UFunction* pFnGetZoomSnapTarget = NULL;

	if ( ! pFnGetZoomSnapTarget )
		pFnGetZoomSnapTarget = (UFunction*) UObject::GObjObjects()->Data[ 41483 ];

	ABioPlayerController_execGetZoomSnapTarget_Parms GetZoomSnapTarget_Parms;
	GetZoomSnapTarget_Parms.MinDistance = MinDistance;
	GetZoomSnapTarget_Parms.MaxDistance = MaxDistance;

	pFnGetZoomSnapTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetZoomSnapTarget, &GetZoomSnapTarget_Parms, NULL );

	pFnGetZoomSnapTarget->FunctionFlags |= 0x400;

	if ( AimLocation )
		memcpy ( AimLocation, &GetZoomSnapTarget_Parms.AimLocation, 0xC );

	return GetZoomSnapTarget_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.GetAimAssistTarget
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          MaxDistance                    ( CPF_Parm )
// struct FVector                 CamLoc                         ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRotator                CamRot                         ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 TargetLoc                      ( CPF_Parm | CPF_OutParm )
// float                          Margin                         ( CPF_Parm | CPF_OutParm )

class APawn* ABioPlayerController::GetAimAssistTarget ( float MaxDistance, struct FVector* CamLoc, struct FRotator* CamRot, struct FVector* TargetLoc, float* Margin )
{
	static UFunction* pFnGetAimAssistTarget = NULL;

	if ( ! pFnGetAimAssistTarget )
		pFnGetAimAssistTarget = (UFunction*) UObject::GObjObjects()->Data[ 41476 ];

	ABioPlayerController_execGetAimAssistTarget_Parms GetAimAssistTarget_Parms;
	GetAimAssistTarget_Parms.MaxDistance = MaxDistance;

	pFnGetAimAssistTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAimAssistTarget, &GetAimAssistTarget_Parms, NULL );

	pFnGetAimAssistTarget->FunctionFlags |= 0x400;

	if ( CamLoc )
		memcpy ( CamLoc, &GetAimAssistTarget_Parms.CamLoc, 0xC );

	if ( CamRot )
		memcpy ( CamRot, &GetAimAssistTarget_Parms.CamRot, 0xC );

	if ( TargetLoc )
		memcpy ( TargetLoc, &GetAimAssistTarget_Parms.TargetLoc, 0xC );

	if ( Margin )
		*Margin = GetAimAssistTarget_Parms.Margin;

	return GetAimAssistTarget_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.ScoreZoomSnapTarget
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   TestPawn                       ( CPF_Parm )
// float                          MaxDistance                    ( CPF_Parm )
// struct FVector                 CamLoc                         ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FRotator                CamRot                         ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 AimLocation                    ( CPF_Parm | CPF_OutParm )

float ABioPlayerController::ScoreZoomSnapTarget ( class APawn* TestPawn, float MaxDistance, struct FVector* CamLoc, struct FRotator* CamRot, struct FVector* AimLocation )
{
	static UFunction* pFnScoreZoomSnapTarget = NULL;

	if ( ! pFnScoreZoomSnapTarget )
		pFnScoreZoomSnapTarget = (UFunction*) UObject::GObjObjects()->Data[ 41469 ];

	ABioPlayerController_execScoreZoomSnapTarget_Parms ScoreZoomSnapTarget_Parms;
	ScoreZoomSnapTarget_Parms.TestPawn = TestPawn;
	ScoreZoomSnapTarget_Parms.MaxDistance = MaxDistance;

	pFnScoreZoomSnapTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScoreZoomSnapTarget, &ScoreZoomSnapTarget_Parms, NULL );

	pFnScoreZoomSnapTarget->FunctionFlags |= 0x400;

	if ( CamLoc )
		memcpy ( CamLoc, &ScoreZoomSnapTarget_Parms.CamLoc, 0xC );

	if ( CamRot )
		memcpy ( CamRot, &ScoreZoomSnapTarget_Parms.CamRot, 0xC );

	if ( AimLocation )
		memcpy ( AimLocation, &ScoreZoomSnapTarget_Parms.AimLocation, 0xC );

	return ScoreZoomSnapTarget_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.LerpMovementStickAngle
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            RotDesired                     ( CPF_Parm )
// int                            RotBase                        ( CPF_Parm )
// float                          RotationSpeed                  ( CPF_Parm )
// float                          DeltaSeconds                   ( CPF_Parm )

int ABioPlayerController::LerpMovementStickAngle ( int RotDesired, int RotBase, float RotationSpeed, float DeltaSeconds )
{
	static UFunction* pFnLerpMovementStickAngle = NULL;

	if ( ! pFnLerpMovementStickAngle )
		pFnLerpMovementStickAngle = (UFunction*) UObject::GObjObjects()->Data[ 41463 ];

	ABioPlayerController_execLerpMovementStickAngle_Parms LerpMovementStickAngle_Parms;
	LerpMovementStickAngle_Parms.RotDesired = RotDesired;
	LerpMovementStickAngle_Parms.RotBase = RotBase;
	LerpMovementStickAngle_Parms.RotationSpeed = RotationSpeed;
	LerpMovementStickAngle_Parms.DeltaSeconds = DeltaSeconds;

	pFnLerpMovementStickAngle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLerpMovementStickAngle, &LerpMovementStickAngle_Parms, NULL );

	pFnLerpMovementStickAngle->FunctionFlags |= 0x400;

	return LerpMovementStickAngle_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.ComputeMovementStickAngle
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          mag                            ( CPF_Parm | CPF_OutParm )
// float                          AngleStick                     ( CPF_Parm | CPF_OutParm )
// struct FRotator                RotWorld                       ( CPF_Parm | CPF_OutParm )

void ABioPlayerController::ComputeMovementStickAngle ( float* mag, float* AngleStick, struct FRotator* RotWorld )
{
	static UFunction* pFnComputeMovementStickAngle = NULL;

	if ( ! pFnComputeMovementStickAngle )
		pFnComputeMovementStickAngle = (UFunction*) UObject::GObjObjects()->Data[ 41459 ];

	ABioPlayerController_execComputeMovementStickAngle_Parms ComputeMovementStickAngle_Parms;

	pFnComputeMovementStickAngle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnComputeMovementStickAngle, &ComputeMovementStickAngle_Parms, NULL );

	pFnComputeMovementStickAngle->FunctionFlags |= 0x400;

	if ( mag )
		*mag = ComputeMovementStickAngle_Parms.mag;

	if ( AngleStick )
		*AngleStick = ComputeMovementStickAngle_Parms.AngleStick;

	if ( RotWorld )
		memcpy ( RotWorld, &ComputeMovementStickAngle_Parms.RotWorld, 0xC );
};

// Function SFXGame.BioPlayerController.GetCameraRelativeRotation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vDirection                     ( CPF_Parm | CPF_OutParm )

bool ABioPlayerController::GetCameraRelativeRotation ( struct FVector* vDirection )
{
	static UFunction* pFnGetCameraRelativeRotation = NULL;

	if ( ! pFnGetCameraRelativeRotation )
		pFnGetCameraRelativeRotation = (UFunction*) UObject::GObjObjects()->Data[ 41456 ];

	ABioPlayerController_execGetCameraRelativeRotation_Parms GetCameraRelativeRotation_Parms;

	pFnGetCameraRelativeRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCameraRelativeRotation, &GetCameraRelativeRotation_Parms, NULL );

	pFnGetCameraRelativeRotation->FunctionFlags |= 0x400;

	if ( vDirection )
		memcpy ( vDirection, &GetCameraRelativeRotation_Parms.vDirection, 0xC );

	return GetCameraRelativeRotation_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.OnActionStateChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ABioPlayerController::eventOnActionStateChanged ( )
{
	static UFunction* pFnOnActionStateChanged = NULL;

	if ( ! pFnOnActionStateChanged )
		pFnOnActionStateChanged = (UFunction*) UObject::GObjObjects()->Data[ 41455 ];

	ABioPlayerController_eventOnActionStateChanged_Parms OnActionStateChanged_Parms;

	this->ProcessEvent ( pFnOnActionStateChanged, &OnActionStateChanged_Parms, NULL );
};

// Function SFXGame.BioPlayerController.BioOnPawnActionStateChanged
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPlayerController::BioOnPawnActionStateChanged ( )
{
	static UFunction* pFnBioOnPawnActionStateChanged = NULL;

	if ( ! pFnBioOnPawnActionStateChanged )
		pFnBioOnPawnActionStateChanged = (UFunction*) UObject::GObjObjects()->Data[ 41454 ];

	ABioPlayerController_execBioOnPawnActionStateChanged_Parms BioOnPawnActionStateChanged_Parms;

	pFnBioOnPawnActionStateChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioOnPawnActionStateChanged, &BioOnPawnActionStateChanged_Parms, NULL );

	pFnBioOnPawnActionStateChanged->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.ResetGoalPriorities
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ASFXNav_GoalPoint*       oGoal                          ( CPF_Parm )

void ABioPlayerController::ResetGoalPriorities ( class ASFXNav_GoalPoint* oGoal )
{
	static UFunction* pFnResetGoalPriorities = NULL;

	if ( ! pFnResetGoalPriorities )
		pFnResetGoalPriorities = (UFunction*) UObject::GObjObjects()->Data[ 41452 ];

	ABioPlayerController_execResetGoalPriorities_Parms ResetGoalPriorities_Parms;
	ResetGoalPriorities_Parms.oGoal = oGoal;

	pFnResetGoalPriorities->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetGoalPriorities, &ResetGoalPriorities_Parms, NULL );

	pFnResetGoalPriorities->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.GetBestGoalPoint
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ASFXNav_GoalPoint*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXNav_GoalPoint* ABioPlayerController::GetBestGoalPoint ( )
{
	static UFunction* pFnGetBestGoalPoint = NULL;

	if ( ! pFnGetBestGoalPoint )
		pFnGetBestGoalPoint = (UFunction*) UObject::GObjObjects()->Data[ 41450 ];

	ABioPlayerController_execGetBestGoalPoint_Parms GetBestGoalPoint_Parms;

	pFnGetBestGoalPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestGoalPoint, &GetBestGoalPoint_Parms, NULL );

	pFnGetBestGoalPoint->FunctionFlags |= 0x400;

	return GetBestGoalPoint_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.SquadOrderEquipWeapon
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  nWeapon                        ( CPF_Parm )
// class APawn*                   pPawn                          ( CPF_Parm )

void ABioPlayerController::SquadOrderEquipWeapon ( unsigned char nWeapon, class APawn* pPawn )
{
	static UFunction* pFnSquadOrderEquipWeapon = NULL;

	if ( ! pFnSquadOrderEquipWeapon )
		pFnSquadOrderEquipWeapon = (UFunction*) UObject::GObjObjects()->Data[ 41447 ];

	ABioPlayerController_execSquadOrderEquipWeapon_Parms SquadOrderEquipWeapon_Parms;
	SquadOrderEquipWeapon_Parms.nWeapon = nWeapon;
	SquadOrderEquipWeapon_Parms.pPawn = pPawn;

	pFnSquadOrderEquipWeapon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSquadOrderEquipWeapon, &SquadOrderEquipWeapon_Parms, NULL );

	pFnSquadOrderEquipWeapon->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.SquadOrderUsePower
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   nmPower                        ( CPF_Parm )
// class APawn*                   pPawn                          ( CPF_Parm )
// int                            nQueue                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bShowIndicator                 ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  pDesiredTarget                 ( CPF_OptionalParm | CPF_Parm )

void ABioPlayerController::SquadOrderUsePower ( struct FName nmPower, class APawn* pPawn, int nQueue, unsigned long bShowIndicator, class AActor* pDesiredTarget )
{
	static UFunction* pFnSquadOrderUsePower = NULL;

	if ( ! pFnSquadOrderUsePower )
		pFnSquadOrderUsePower = (UFunction*) UObject::GObjObjects()->Data[ 33212 ];

	ABioPlayerController_execSquadOrderUsePower_Parms SquadOrderUsePower_Parms;
	memcpy ( &SquadOrderUsePower_Parms.nmPower, &nmPower, 0x8 );
	SquadOrderUsePower_Parms.pPawn = pPawn;
	SquadOrderUsePower_Parms.nQueue = nQueue;
	SquadOrderUsePower_Parms.bShowIndicator = bShowIndicator;
	SquadOrderUsePower_Parms.pDesiredTarget = pDesiredTarget;

	pFnSquadOrderUsePower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSquadOrderUsePower, &SquadOrderUsePower_Parms, NULL );

	pFnSquadOrderUsePower->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.ShouldLockOnTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  pTarget                        ( CPF_Parm )

bool ABioPlayerController::ShouldLockOnTarget ( class AActor* pTarget )
{
	static UFunction* pFnShouldLockOnTarget = NULL;

	if ( ! pFnShouldLockOnTarget )
		pFnShouldLockOnTarget = (UFunction*) UObject::GObjObjects()->Data[ 41439 ];

	ABioPlayerController_execShouldLockOnTarget_Parms ShouldLockOnTarget_Parms;
	ShouldLockOnTarget_Parms.pTarget = pTarget;

	pFnShouldLockOnTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldLockOnTarget, &ShouldLockOnTarget_Parms, NULL );

	pFnShouldLockOnTarget->FunctionFlags |= 0x400;

	return ShouldLockOnTarget_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.QuickCommandMoveTo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nSquadIndex                    ( CPF_Parm )

bool ABioPlayerController::QuickCommandMoveTo ( int nSquadIndex )
{
	static UFunction* pFnQuickCommandMoveTo = NULL;

	if ( ! pFnQuickCommandMoveTo )
		pFnQuickCommandMoveTo = (UFunction*) UObject::GObjObjects()->Data[ 41436 ];

	ABioPlayerController_execQuickCommandMoveTo_Parms QuickCommandMoveTo_Parms;
	QuickCommandMoveTo_Parms.nSquadIndex = nSquadIndex;

	pFnQuickCommandMoveTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQuickCommandMoveTo, &QuickCommandMoveTo_Parms, NULL );

	pFnQuickCommandMoveTo->FunctionFlags |= 0x400;

	return QuickCommandMoveTo_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.QuickCommandAttackTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nSquadIndex                    ( CPF_OptionalParm | CPF_Parm )

bool ABioPlayerController::QuickCommandAttackTarget ( int nSquadIndex )
{
	static UFunction* pFnQuickCommandAttackTarget = NULL;

	if ( ! pFnQuickCommandAttackTarget )
		pFnQuickCommandAttackTarget = (UFunction*) UObject::GObjObjects()->Data[ 41433 ];

	ABioPlayerController_execQuickCommandAttackTarget_Parms QuickCommandAttackTarget_Parms;
	QuickCommandAttackTarget_Parms.nSquadIndex = nSquadIndex;

	pFnQuickCommandAttackTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQuickCommandAttackTarget, &QuickCommandAttackTarget_Parms, NULL );

	pFnQuickCommandAttackTarget->FunctionFlags |= 0x400;

	return QuickCommandAttackTarget_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.QuickCommandFollowPlayer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nSquadIndex                    ( CPF_OptionalParm | CPF_Parm )

bool ABioPlayerController::QuickCommandFollowPlayer ( int nSquadIndex )
{
	static UFunction* pFnQuickCommandFollowPlayer = NULL;

	if ( ! pFnQuickCommandFollowPlayer )
		pFnQuickCommandFollowPlayer = (UFunction*) UObject::GObjObjects()->Data[ 41430 ];

	ABioPlayerController_execQuickCommandFollowPlayer_Parms QuickCommandFollowPlayer_Parms;
	QuickCommandFollowPlayer_Parms.nSquadIndex = nSquadIndex;

	pFnQuickCommandFollowPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQuickCommandFollowPlayer, &QuickCommandFollowPlayer_Parms, NULL );

	pFnQuickCommandFollowPlayer->FunctionFlags |= 0x400;

	return QuickCommandFollowPlayer_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerController.PlayerSquadSetActionState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  eState                         ( CPF_Parm )

void ABioPlayerController::PlayerSquadSetActionState ( unsigned char eState )
{
	static UFunction* pFnPlayerSquadSetActionState = NULL;

	if ( ! pFnPlayerSquadSetActionState )
		pFnPlayerSquadSetActionState = (UFunction*) UObject::GObjObjects()->Data[ 41428 ];

	ABioPlayerController_execPlayerSquadSetActionState_Parms PlayerSquadSetActionState_Parms;
	PlayerSquadSetActionState_Parms.eState = eState;

	pFnPlayerSquadSetActionState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayerSquadSetActionState, &PlayerSquadSetActionState_Parms, NULL );

	pFnPlayerSquadSetActionState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.Destroyed
// [0x00020002] 
// Parameters infos:

void ABioPlayerController::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 41425 ];

	ABioPlayerController_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function SFXGame.BioPlayerController.UpdateBinkAudioVolume
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPlayerController::UpdateBinkAudioVolume ( )
{
	static UFunction* pFnUpdateBinkAudioVolume = NULL;

	if ( ! pFnUpdateBinkAudioVolume )
		pFnUpdateBinkAudioVolume = (UFunction*) UObject::GObjObjects()->Data[ 41424 ];

	ABioPlayerController_execUpdateBinkAudioVolume_Parms UpdateBinkAudioVolume_Parms;

	pFnUpdateBinkAudioVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateBinkAudioVolume, &UpdateBinkAudioVolume_Parms, NULL );

	pFnUpdateBinkAudioVolume->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.DisableDOF
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPlayerController::DisableDOF ( )
{
	static UFunction* pFnDisableDOF = NULL;

	if ( ! pFnDisableDOF )
		pFnDisableDOF = (UFunction*) UObject::GObjObjects()->Data[ 41423 ];

	ABioPlayerController_execDisableDOF_Parms DisableDOF_Parms;

	pFnDisableDOF->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableDOF, &DisableDOF_Parms, NULL );

	pFnDisableDOF->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.RecoverForPlayerPawnActionState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPlayerController::RecoverForPlayerPawnActionState ( )
{
	static UFunction* pFnRecoverForPlayerPawnActionState = NULL;

	if ( ! pFnRecoverForPlayerPawnActionState )
		pFnRecoverForPlayerPawnActionState = (UFunction*) UObject::GObjObjects()->Data[ 41422 ];

	ABioPlayerController_execRecoverForPlayerPawnActionState_Parms RecoverForPlayerPawnActionState_Parms;

	pFnRecoverForPlayerPawnActionState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecoverForPlayerPawnActionState, &RecoverForPlayerPawnActionState_Parms, NULL );

	pFnRecoverForPlayerPawnActionState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.RecoverSelectionForPawnActionState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPlayerController::RecoverSelectionForPawnActionState ( )
{
	static UFunction* pFnRecoverSelectionForPawnActionState = NULL;

	if ( ! pFnRecoverSelectionForPawnActionState )
		pFnRecoverSelectionForPawnActionState = (UFunction*) UObject::GObjObjects()->Data[ 41421 ];

	ABioPlayerController_execRecoverSelectionForPawnActionState_Parms RecoverSelectionForPawnActionState_Parms;

	pFnRecoverSelectionForPawnActionState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecoverSelectionForPawnActionState, &RecoverSelectionForPawnActionState_Parms, NULL );

	pFnRecoverSelectionForPawnActionState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.RecoverCameraForPawnActionState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPlayerController::RecoverCameraForPawnActionState ( )
{
	static UFunction* pFnRecoverCameraForPawnActionState = NULL;

	if ( ! pFnRecoverCameraForPawnActionState )
		pFnRecoverCameraForPawnActionState = (UFunction*) UObject::GObjObjects()->Data[ 41420 ];

	ABioPlayerController_execRecoverCameraForPawnActionState_Parms RecoverCameraForPawnActionState_Parms;

	pFnRecoverCameraForPawnActionState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecoverCameraForPawnActionState, &RecoverCameraForPawnActionState_Parms, NULL );

	pFnRecoverCameraForPawnActionState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.RecoverCameraPostCinematic
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPlayerController::RecoverCameraPostCinematic ( )
{
	static UFunction* pFnRecoverCameraPostCinematic = NULL;

	if ( ! pFnRecoverCameraPostCinematic )
		pFnRecoverCameraPostCinematic = (UFunction*) UObject::GObjObjects()->Data[ 41419 ];

	ABioPlayerController_execRecoverCameraPostCinematic_Parms RecoverCameraPostCinematic_Parms;

	pFnRecoverCameraPostCinematic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRecoverCameraPostCinematic, &RecoverCameraPostCinematic_Parms, NULL );

	pFnRecoverCameraPostCinematic->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.DrawSelectionReticle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 vLocation                      ( CPF_Parm )

void ABioPlayerController::DrawSelectionReticle ( struct FVector vLocation )
{
	static UFunction* pFnDrawSelectionReticle = NULL;

	if ( ! pFnDrawSelectionReticle )
		pFnDrawSelectionReticle = (UFunction*) UObject::GObjObjects()->Data[ 41417 ];

	ABioPlayerController_execDrawSelectionReticle_Parms DrawSelectionReticle_Parms;
	memcpy ( &DrawSelectionReticle_Parms.vLocation, &vLocation, 0xC );

	pFnDrawSelectionReticle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawSelectionReticle, &DrawSelectionReticle_Parms, NULL );

	pFnDrawSelectionReticle->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.DrawCircle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 vLocation                      ( CPF_Parm )
// struct FVector                 vNormal                        ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// struct FColor                  CircleColor                    ( CPF_Parm )

void ABioPlayerController::DrawCircle ( struct FVector vLocation, struct FVector vNormal, float fRadius, struct FColor CircleColor )
{
	static UFunction* pFnDrawCircle = NULL;

	if ( ! pFnDrawCircle )
		pFnDrawCircle = (UFunction*) UObject::GObjObjects()->Data[ 41412 ];

	ABioPlayerController_execDrawCircle_Parms DrawCircle_Parms;
	memcpy ( &DrawCircle_Parms.vLocation, &vLocation, 0xC );
	memcpy ( &DrawCircle_Parms.vNormal, &vNormal, 0xC );
	DrawCircle_Parms.fRadius = fRadius;
	memcpy ( &DrawCircle_Parms.CircleColor, &CircleColor, 0x4 );

	pFnDrawCircle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawCircle, &DrawCircle_Parms, NULL );

	pFnDrawCircle->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.UnregisterPlayerDataStores
// [0x00020102] 
// Parameters infos:

void ABioPlayerController::UnregisterPlayerDataStores ( )
{
	static UFunction* pFnUnregisterPlayerDataStores = NULL;

	if ( ! pFnUnregisterPlayerDataStores )
		pFnUnregisterPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 41411 ];

	ABioPlayerController_execUnregisterPlayerDataStores_Parms UnregisterPlayerDataStores_Parms;

	this->ProcessEvent ( pFnUnregisterPlayerDataStores, &UnregisterPlayerDataStores_Parms, NULL );
};

// Function SFXGame.BioPlayerController.RegisterCustomPlayerDataStores
// [0x00080102] 
// Parameters infos:

void ABioPlayerController::RegisterCustomPlayerDataStores ( )
{
	static UFunction* pFnRegisterCustomPlayerDataStores = NULL;

	if ( ! pFnRegisterCustomPlayerDataStores )
		pFnRegisterCustomPlayerDataStores = (UFunction*) UObject::GObjObjects()->Data[ 41409 ];

	ABioPlayerController_execRegisterCustomPlayerDataStores_Parms RegisterCustomPlayerDataStores_Parms;

	this->ProcessEvent ( pFnRegisterCustomPlayerDataStores, &RegisterCustomPlayerDataStores_Parms, NULL );
};

// Function SFXGame.BioPlayerController.DumpWhipLog
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            Index                          ( CPF_OptionalParm | CPF_Parm )

void ABioPlayerController::DumpWhipLog ( int Index )
{
	static UFunction* pFnDumpWhipLog = NULL;

	if ( ! pFnDumpWhipLog )
		pFnDumpWhipLog = (UFunction*) UObject::GObjObjects()->Data[ 41407 ];

	ABioPlayerController_execDumpWhipLog_Parms DumpWhipLog_Parms;
	DumpWhipLog_Parms.Index = Index;

	pFnDumpWhipLog->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDumpWhipLog, &DumpWhipLog_Parms, NULL );

	pFnDumpWhipLog->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerController.SetRotation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                NewRotation                    ( CPF_Parm )

bool ABioPlayerController::SetRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetRotation = NULL;

	if ( ! pFnSetRotation )
		pFnSetRotation = (UFunction*) UObject::GObjObjects()->Data[ 41404 ];

	ABioPlayerController_execSetRotation_Parms SetRotation_Parms;
	memcpy ( &SetRotation_Parms.NewRotation, &NewRotation, 0xC );

	pFnSetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRotation, &SetRotation_Parms, NULL );

	pFnSetRotation->FunctionFlags |= 0x400;

	return SetRotation_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeBase.TurnObjectiveRadarDisplayOff
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeBase::TurnObjectiveRadarDisplayOff ( )
{
	static UFunction* pFnTurnObjectiveRadarDisplayOff = NULL;

	if ( ! pFnTurnObjectiveRadarDisplayOff )
		pFnTurnObjectiveRadarDisplayOff = (UFunction*) UObject::GObjObjects()->Data[ 55955 ];

	USFXGameModeBase_execTurnObjectiveRadarDisplayOff_Parms TurnObjectiveRadarDisplayOff_Parms;

	this->ProcessEvent ( pFnTurnObjectiveRadarDisplayOff, &TurnObjectiveRadarDisplayOff_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.TurnObjectiveRadarDisplayOn
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeBase::TurnObjectiveRadarDisplayOn ( )
{
	static UFunction* pFnTurnObjectiveRadarDisplayOn = NULL;

	if ( ! pFnTurnObjectiveRadarDisplayOn )
		pFnTurnObjectiveRadarDisplayOn = (UFunction*) UObject::GObjObjects()->Data[ 55954 ];

	USFXGameModeBase_execTurnObjectiveRadarDisplayOn_Parms TurnObjectiveRadarDisplayOn_Parms;

	this->ProcessEvent ( pFnTurnObjectiveRadarDisplayOn, &TurnObjectiveRadarDisplayOn_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.ToggleObjectiveRadarDisplay
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bTurnOn                        ( CPF_Parm )

void USFXGameModeBase::ToggleObjectiveRadarDisplay ( unsigned long bTurnOn )
{
	static UFunction* pFnToggleObjectiveRadarDisplay = NULL;

	if ( ! pFnToggleObjectiveRadarDisplay )
		pFnToggleObjectiveRadarDisplay = (UFunction*) UObject::GObjObjects()->Data[ 55950 ];

	USFXGameModeBase_execToggleObjectiveRadarDisplay_Parms ToggleObjectiveRadarDisplay_Parms;
	ToggleObjectiveRadarDisplay_Parms.bTurnOn = bTurnOn;

	this->ProcessEvent ( pFnToggleObjectiveRadarDisplay, &ToggleObjectiveRadarDisplay_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.PulseRadarDisplay
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          fPulseTime                     ( CPF_Parm )

void USFXGameModeBase::PulseRadarDisplay ( float fPulseTime )
{
	static UFunction* pFnPulseRadarDisplay = NULL;

	if ( ! pFnPulseRadarDisplay )
		pFnPulseRadarDisplay = (UFunction*) UObject::GObjObjects()->Data[ 55947 ];

	USFXGameModeBase_execPulseRadarDisplay_Parms PulseRadarDisplay_Parms;
	PulseRadarDisplay_Parms.fPulseTime = fPulseTime;

	this->ProcessEvent ( pFnPulseRadarDisplay, &PulseRadarDisplay_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.UnpauseTimeDilationEffects
// [0x00020002] 
// Parameters infos:

void USFXGameModeBase::UnpauseTimeDilationEffects ( )
{
	static UFunction* pFnUnpauseTimeDilationEffects = NULL;

	if ( ! pFnUnpauseTimeDilationEffects )
		pFnUnpauseTimeDilationEffects = (UFunction*) UObject::GObjObjects()->Data[ 55945 ];

	USFXGameModeBase_execUnpauseTimeDilationEffects_Parms UnpauseTimeDilationEffects_Parms;

	this->ProcessEvent ( pFnUnpauseTimeDilationEffects, &UnpauseTimeDilationEffects_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.PauseTimeDilationEffects
// [0x00020002] 
// Parameters infos:

void USFXGameModeBase::PauseTimeDilationEffects ( )
{
	static UFunction* pFnPauseTimeDilationEffects = NULL;

	if ( ! pFnPauseTimeDilationEffects )
		pFnPauseTimeDilationEffects = (UFunction*) UObject::GObjObjects()->Data[ 55942 ];

	USFXGameModeBase_execPauseTimeDilationEffects_Parms PauseTimeDilationEffects_Parms;

	this->ProcessEvent ( pFnPauseTimeDilationEffects, &PauseTimeDilationEffects_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.RemoveTimeDilationEffects
// [0x00020002] 
// Parameters infos:

void USFXGameModeBase::RemoveTimeDilationEffects ( )
{
	static UFunction* pFnRemoveTimeDilationEffects = NULL;

	if ( ! pFnRemoveTimeDilationEffects )
		pFnRemoveTimeDilationEffects = (UFunction*) UObject::GObjObjects()->Data[ 55939 ];

	USFXGameModeBase_execRemoveTimeDilationEffects_Parms RemoveTimeDilationEffects_Parms;

	this->ProcessEvent ( pFnRemoveTimeDilationEffects, &RemoveTimeDilationEffects_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.GuiKey
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )

void USFXGameModeBase::GuiKey ( unsigned char Event )
{
	static UFunction* pFnGuiKey = NULL;

	if ( ! pFnGuiKey )
		pFnGuiKey = (UFunction*) UObject::GObjObjects()->Data[ 55937 ];

	USFXGameModeBase_execGuiKey_Parms GuiKey_Parms;
	GuiKey_Parms.Event = Event;

	this->ProcessEvent ( pFnGuiKey, &GuiKey_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.LeaveWorld
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeBase::LeaveWorld ( )
{
	static UFunction* pFnLeaveWorld = NULL;

	if ( ! pFnLeaveWorld )
		pFnLeaveWorld = (UFunction*) UObject::GObjObjects()->Data[ 55930 ];

	USFXGameModeBase_execLeaveWorld_Parms LeaveWorld_Parms;

	this->ProcessEvent ( pFnLeaveWorld, &LeaveWorld_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.StartIngamePropertyEditor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeBase::StartIngamePropertyEditor ( )
{
	static UFunction* pFnStartIngamePropertyEditor = NULL;

	if ( ! pFnStartIngamePropertyEditor )
		pFnStartIngamePropertyEditor = (UFunction*) UObject::GObjObjects()->Data[ 55927 ];

	USFXGameModeBase_execStartIngamePropertyEditor_Parms StartIngamePropertyEditor_Parms;

	this->ProcessEvent ( pFnStartIngamePropertyEditor, &StartIngamePropertyEditor_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.SquadCommand_Move2
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void USFXGameModeBase::SquadCommand_Move2 ( )
{
	static UFunction* pFnSquadCommand_Move2 = NULL;

	if ( ! pFnSquadCommand_Move2 )
		pFnSquadCommand_Move2 = (UFunction*) UObject::GObjObjects()->Data[ 55925 ];

	USFXGameModeBase_execSquadCommand_Move2_Parms SquadCommand_Move2_Parms;

	this->ProcessEvent ( pFnSquadCommand_Move2, &SquadCommand_Move2_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.SquadCommand_Move1
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void USFXGameModeBase::SquadCommand_Move1 ( )
{
	static UFunction* pFnSquadCommand_Move1 = NULL;

	if ( ! pFnSquadCommand_Move1 )
		pFnSquadCommand_Move1 = (UFunction*) UObject::GObjObjects()->Data[ 55923 ];

	USFXGameModeBase_execSquadCommand_Move1_Parms SquadCommand_Move1_Parms;

	this->ProcessEvent ( pFnSquadCommand_Move1, &SquadCommand_Move1_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.SquadCommand_Follow
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void USFXGameModeBase::SquadCommand_Follow ( )
{
	static UFunction* pFnSquadCommand_Follow = NULL;

	if ( ! pFnSquadCommand_Follow )
		pFnSquadCommand_Follow = (UFunction*) UObject::GObjObjects()->Data[ 55921 ];

	USFXGameModeBase_execSquadCommand_Follow_Parms SquadCommand_Follow_Parms;

	this->ProcessEvent ( pFnSquadCommand_Follow, &SquadCommand_Follow_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.SquadCommand_Attack
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void USFXGameModeBase::SquadCommand_Attack ( )
{
	static UFunction* pFnSquadCommand_Attack = NULL;

	if ( ! pFnSquadCommand_Attack )
		pFnSquadCommand_Attack = (UFunction*) UObject::GObjObjects()->Data[ 55919 ];

	USFXGameModeBase_execSquadCommand_Attack_Parms SquadCommand_Attack_Parms;

	this->ProcessEvent ( pFnSquadCommand_Attack, &SquadCommand_Attack_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.ShowMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeBase::ShowMenu ( )
{
	static UFunction* pFnShowMenu = NULL;

	if ( ! pFnShowMenu )
		pFnShowMenu = (UFunction*) UObject::GObjObjects()->Data[ 55918 ];

	USFXGameModeBase_execShowMenu_Parms ShowMenu_Parms;

	this->ProcessEvent ( pFnShowMenu, &ShowMenu_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.StopFiringWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeBase::StopFiringWeapon ( )
{
	static UFunction* pFnStopFiringWeapon = NULL;

	if ( ! pFnStopFiringWeapon )
		pFnStopFiringWeapon = (UFunction*) UObject::GObjObjects()->Data[ 55917 ];

	USFXGameModeBase_execStopFiringWeapon_Parms StopFiringWeapon_Parms;

	this->ProcessEvent ( pFnStopFiringWeapon, &StopFiringWeapon_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.SwapWeaponIfEmpty
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeBase::SwapWeaponIfEmpty ( )
{
	static UFunction* pFnSwapWeaponIfEmpty = NULL;

	if ( ! pFnSwapWeaponIfEmpty )
		pFnSwapWeaponIfEmpty = (UFunction*) UObject::GObjObjects()->Data[ 55914 ];

	USFXGameModeBase_execSwapWeaponIfEmpty_Parms SwapWeaponIfEmpty_Parms;

	this->ProcessEvent ( pFnSwapWeaponIfEmpty, &SwapWeaponIfEmpty_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.FireWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeBase::FireWeapon ( )
{
	static UFunction* pFnFireWeapon = NULL;

	if ( ! pFnFireWeapon )
		pFnFireWeapon = (UFunction*) UObject::GObjObjects()->Data[ 55912 ];

	USFXGameModeBase_execFireWeapon_Parms FireWeapon_Parms;

	this->ProcessEvent ( pFnFireWeapon, &FireWeapon_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.CollectBindings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXGameModeBase::CollectBindings ( )
{
	static UFunction* pFnCollectBindings = NULL;

	if ( ! pFnCollectBindings )
		pFnCollectBindings = (UFunction*) UObject::GObjObjects()->Data[ 55911 ];

	USFXGameModeBase_execCollectBindings_Parms CollectBindings_Parms;

	pFnCollectBindings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCollectBindings, &CollectBindings_Parms, NULL );

	pFnCollectBindings->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGameModeBase.Initialize
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXGameModeBase::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 55910 ];

	USFXGameModeBase_execInitialize_Parms Initialize_Parms;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGameModeBase.DeactivateSpecifier
// [0x00020000] 
// Parameters infos:
// struct FName                   ModeSpecifier                  ( CPF_Parm )

void USFXGameModeBase::DeactivateSpecifier ( struct FName ModeSpecifier )
{
	static UFunction* pFnDeactivateSpecifier = NULL;

	if ( ! pFnDeactivateSpecifier )
		pFnDeactivateSpecifier = (UFunction*) UObject::GObjObjects()->Data[ 55908 ];

	USFXGameModeBase_execDeactivateSpecifier_Parms DeactivateSpecifier_Parms;
	memcpy ( &DeactivateSpecifier_Parms.ModeSpecifier, &ModeSpecifier, 0x8 );

	this->ProcessEvent ( pFnDeactivateSpecifier, &DeactivateSpecifier_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.ActivateSpecifier
// [0x00020000] 
// Parameters infos:
// struct FName                   ModeSpecifier                  ( CPF_Parm )

void USFXGameModeBase::ActivateSpecifier ( struct FName ModeSpecifier )
{
	static UFunction* pFnActivateSpecifier = NULL;

	if ( ! pFnActivateSpecifier )
		pFnActivateSpecifier = (UFunction*) UObject::GObjObjects()->Data[ 55906 ];

	USFXGameModeBase_execActivateSpecifier_Parms ActivateSpecifier_Parms;
	memcpy ( &ActivateSpecifier_Parms.ModeSpecifier, &ModeSpecifier, 0x8 );

	this->ProcessEvent ( pFnActivateSpecifier, &ActivateSpecifier_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.Deactivated
// [0x00020002] 
// Parameters infos:

void USFXGameModeBase::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 55905 ];

	USFXGameModeBase_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.Activated
// [0x00020002] 
// Parameters infos:

void USFXGameModeBase::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55904 ];

	USFXGameModeBase_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.ClearTimer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void USFXGameModeBase::ClearTimer ( struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnClearTimer = NULL;

	if ( ! pFnClearTimer )
		pFnClearTimer = (UFunction*) UObject::GObjObjects()->Data[ 55901 ];

	USFXGameModeBase_execClearTimer_Parms ClearTimer_Parms;
	memcpy ( &ClearTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	ClearTimer_Parms.inObj = inObj;

	this->ProcessEvent ( pFnClearTimer, &ClearTimer_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.SetTimer
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          InRate                         ( CPF_Parm )
// unsigned long                  inbLoop                        ( CPF_OptionalParm | CPF_Parm )
// struct FName                   inTimerFunc                    ( CPF_OptionalParm | CPF_Parm )
// class UObject*                 inObj                          ( CPF_OptionalParm | CPF_Parm )

void USFXGameModeBase::SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj )
{
	static UFunction* pFnSetTimer = NULL;

	if ( ! pFnSetTimer )
		pFnSetTimer = (UFunction*) UObject::GObjObjects()->Data[ 55896 ];

	USFXGameModeBase_execSetTimer_Parms SetTimer_Parms;
	SetTimer_Parms.InRate = InRate;
	SetTimer_Parms.inbLoop = inbLoop;
	memcpy ( &SetTimer_Parms.inTimerFunc, &inTimerFunc, 0x8 );
	SetTimer_Parms.inObj = inObj;

	this->ProcessEvent ( pFnSetTimer, &SetTimer_Parms, NULL );
};

// Function SFXGame.SFXGameModeBase.HACK_GetCameraMode
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class USFXCameraMode*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXCameraMode* USFXGameModeBase::eventHACK_GetCameraMode ( )
{
	static UFunction* pFnHACK_GetCameraMode = NULL;

	if ( ! pFnHACK_GetCameraMode )
		pFnHACK_GetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 55894 ];

	USFXGameModeBase_eventHACK_GetCameraMode_Parms HACK_GetCameraMode_Parms;

	this->ProcessEvent ( pFnHACK_GetCameraMode, &HACK_GetCameraMode_Parms, NULL );

	return HACK_GetCameraMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeBase.GetCameraMode
// [0x00420002] 
// Parameters infos:
// class USFXCameraMode*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXCameraMode*          OldCameraMode                  ( CPF_Parm )
// int                            PreserveTarget                 ( CPF_Parm | CPF_OutParm )
// float                          TransitionTime                 ( CPF_Parm | CPF_OutParm )
// class USFXCameraMode_Interpolate* Transition                     ( CPF_Parm | CPF_OutParm )

class USFXCameraMode* USFXGameModeBase::GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition )
{
	static UFunction* pFnGetCameraMode = NULL;

	if ( ! pFnGetCameraMode )
		pFnGetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 55888 ];

	USFXGameModeBase_execGetCameraMode_Parms GetCameraMode_Parms;
	GetCameraMode_Parms.OldCameraMode = OldCameraMode;

	this->ProcessEvent ( pFnGetCameraMode, &GetCameraMode_Parms, NULL );

	if ( PreserveTarget )
		*PreserveTarget = GetCameraMode_Parms.PreserveTarget;

	if ( TransitionTime )
		*TransitionTime = GetCameraMode_Parms.TransitionTime;

	if ( Transition )
		*Transition = GetCameraMode_Parms.Transition;

	return GetCameraMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.ResetKeyPresses
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXGameModeManager::ResetKeyPresses ( )
{
	static UFunction* pFnResetKeyPresses = NULL;

	if ( ! pFnResetKeyPresses )
		pFnResetKeyPresses = (UFunction*) UObject::GObjObjects()->Data[ 56214 ];

	USFXGameModeManager_execResetKeyPresses_Parms ResetKeyPresses_Parms;

	pFnResetKeyPresses->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetKeyPresses, &ResetKeyPresses_Parms, NULL );

	pFnResetKeyPresses->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGameModeManager.ResetBindings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXGameModeManager::ResetBindings ( )
{
	static UFunction* pFnResetBindings = NULL;

	if ( ! pFnResetBindings )
		pFnResetBindings = (UFunction*) UObject::GObjObjects()->Data[ 56280 ];

	USFXGameModeManager_execResetBindings_Parms ResetBindings_Parms;

	pFnResetBindings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetBindings, &ResetBindings_Parms, NULL );

	pFnResetBindings->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGameModeManager.ShouldEnforce16x9Subtitiles
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::ShouldEnforce16x9Subtitiles ( )
{
	static UFunction* pFnShouldEnforce16x9Subtitiles = NULL;

	if ( ! pFnShouldEnforce16x9Subtitiles )
		pFnShouldEnforce16x9Subtitiles = (UFunction*) UObject::GObjObjects()->Data[ 48533 ];

	USFXGameModeManager_execShouldEnforce16x9Subtitiles_Parms ShouldEnforce16x9Subtitiles_Parms;

	pFnShouldEnforce16x9Subtitiles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldEnforce16x9Subtitiles, &ShouldEnforce16x9Subtitiles_Parms, NULL );

	pFnShouldEnforce16x9Subtitiles->FunctionFlags |= 0x400;

	return ShouldEnforce16x9Subtitiles_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.ShouldPlayVocalizations
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::ShouldPlayVocalizations ( )
{
	static UFunction* pFnShouldPlayVocalizations = NULL;

	if ( ! pFnShouldPlayVocalizations )
		pFnShouldPlayVocalizations = (UFunction*) UObject::GObjObjects()->Data[ 56277 ];

	USFXGameModeManager_execShouldPlayVocalizations_Parms ShouldPlayVocalizations_Parms;

	pFnShouldPlayVocalizations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldPlayVocalizations, &ShouldPlayVocalizations_Parms, NULL );

	pFnShouldPlayVocalizations->FunctionFlags |= 0x400;

	return ShouldPlayVocalizations_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.ShouldShowReticles
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::ShouldShowReticles ( )
{
	static UFunction* pFnShouldShowReticles = NULL;

	if ( ! pFnShouldShowReticles )
		pFnShouldShowReticles = (UFunction*) UObject::GObjObjects()->Data[ 56275 ];

	USFXGameModeManager_execShouldShowReticles_Parms ShouldShowReticles_Parms;

	pFnShouldShowReticles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldShowReticles, &ShouldShowReticles_Parms, NULL );

	pFnShouldShowReticles->FunctionFlags |= 0x400;

	return ShouldShowReticles_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.ShouldQueueAndSuppressNotifications
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::ShouldQueueAndSuppressNotifications ( )
{
	static UFunction* pFnShouldQueueAndSuppressNotifications = NULL;

	if ( ! pFnShouldQueueAndSuppressNotifications )
		pFnShouldQueueAndSuppressNotifications = (UFunction*) UObject::GObjObjects()->Data[ 56273 ];

	USFXGameModeManager_execShouldQueueAndSuppressNotifications_Parms ShouldQueueAndSuppressNotifications_Parms;

	pFnShouldQueueAndSuppressNotifications->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldQueueAndSuppressNotifications, &ShouldQueueAndSuppressNotifications_Parms, NULL );

	pFnShouldQueueAndSuppressNotifications->FunctionFlags |= 0x400;

	return ShouldQueueAndSuppressNotifications_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.ShouldMergeNotifications
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::ShouldMergeNotifications ( )
{
	static UFunction* pFnShouldMergeNotifications = NULL;

	if ( ! pFnShouldMergeNotifications )
		pFnShouldMergeNotifications = (UFunction*) UObject::GObjObjects()->Data[ 56271 ];

	USFXGameModeManager_execShouldMergeNotifications_Parms ShouldMergeNotifications_Parms;

	pFnShouldMergeNotifications->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldMergeNotifications, &ShouldMergeNotifications_Parms, NULL );

	pFnShouldMergeNotifications->FunctionFlags |= 0x400;

	return ShouldMergeNotifications_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.GetMouseVisible
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::GetMouseVisible ( )
{
	static UFunction* pFnGetMouseVisible = NULL;

	if ( ! pFnGetMouseVisible )
		pFnGetMouseVisible = (UFunction*) UObject::GObjObjects()->Data[ 56269 ];

	USFXGameModeManager_execGetMouseVisible_Parms GetMouseVisible_Parms;

	pFnGetMouseVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMouseVisible, &GetMouseVisible_Parms, NULL );

	pFnGetMouseVisible->FunctionFlags |= 0x400;

	return GetMouseVisible_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.HasMouseAuthority
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::HasMouseAuthority ( )
{
	static UFunction* pFnHasMouseAuthority = NULL;

	if ( ! pFnHasMouseAuthority )
		pFnHasMouseAuthority = (UFunction*) UObject::GObjObjects()->Data[ 56267 ];

	USFXGameModeManager_execHasMouseAuthority_Parms HasMouseAuthority_Parms;

	pFnHasMouseAuthority->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasMouseAuthority, &HasMouseAuthority_Parms, NULL );

	pFnHasMouseAuthority->FunctionFlags |= 0x400;

	return HasMouseAuthority_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.ShouldShowSubtitles
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::ShouldShowSubtitles ( )
{
	static UFunction* pFnShouldShowSubtitles = NULL;

	if ( ! pFnShouldShowSubtitles )
		pFnShouldShowSubtitles = (UFunction*) UObject::GObjObjects()->Data[ 46800 ];

	USFXGameModeManager_execShouldShowSubtitles_Parms ShouldShowSubtitles_Parms;

	pFnShouldShowSubtitles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldShowSubtitles, &ShouldShowSubtitles_Parms, NULL );

	pFnShouldShowSubtitles->FunctionFlags |= 0x400;

	return ShouldShowSubtitles_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.AllowsSaving
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::AllowsSaving ( )
{
	static UFunction* pFnAllowsSaving = NULL;

	if ( ! pFnAllowsSaving )
		pFnAllowsSaving = (UFunction*) UObject::GObjObjects()->Data[ 42331 ];

	USFXGameModeManager_execAllowsSaving_Parms AllowsSaving_Parms;

	pFnAllowsSaving->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllowsSaving, &AllowsSaving_Parms, NULL );

	pFnAllowsSaving->FunctionFlags |= 0x400;

	return AllowsSaving_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.AllowsCameraMods
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::AllowsCameraMods ( )
{
	static UFunction* pFnAllowsCameraMods = NULL;

	if ( ! pFnAllowsCameraMods )
		pFnAllowsCameraMods = (UFunction*) UObject::GObjObjects()->Data[ 42623 ];

	USFXGameModeManager_execAllowsCameraMods_Parms AllowsCameraMods_Parms;

	pFnAllowsCameraMods->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllowsCameraMods, &AllowsCameraMods_Parms, NULL );

	pFnAllowsCameraMods->FunctionFlags |= 0x400;

	return AllowsCameraMods_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.AllowRotationUpdates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::AllowRotationUpdates ( )
{
	static UFunction* pFnAllowRotationUpdates = NULL;

	if ( ! pFnAllowRotationUpdates )
		pFnAllowRotationUpdates = (UFunction*) UObject::GObjObjects()->Data[ 56262 ];

	USFXGameModeManager_execAllowRotationUpdates_Parms AllowRotationUpdates_Parms;

	pFnAllowRotationUpdates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllowRotationUpdates, &AllowRotationUpdates_Parms, NULL );

	pFnAllowRotationUpdates->FunctionFlags |= 0x400;

	return AllowRotationUpdates_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.ShouldShowRadar
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::ShouldShowRadar ( )
{
	static UFunction* pFnShouldShowRadar = NULL;

	if ( ! pFnShouldShowRadar )
		pFnShouldShowRadar = (UFunction*) UObject::GObjObjects()->Data[ 56260 ];

	USFXGameModeManager_execShouldShowRadar_Parms ShouldShowRadar_Parms;

	pFnShouldShowRadar->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldShowRadar, &ShouldShowRadar_Parms, NULL );

	pFnShouldShowRadar->FunctionFlags |= 0x400;

	return ShouldShowRadar_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.ShouldShowDamageIndicators
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::ShouldShowDamageIndicators ( )
{
	static UFunction* pFnShouldShowDamageIndicators = NULL;

	if ( ! pFnShouldShowDamageIndicators )
		pFnShouldShowDamageIndicators = (UFunction*) UObject::GObjObjects()->Data[ 56258 ];

	USFXGameModeManager_execShouldShowDamageIndicators_Parms ShouldShowDamageIndicators_Parms;

	pFnShouldShowDamageIndicators->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldShowDamageIndicators, &ShouldShowDamageIndicators_Parms, NULL );

	pFnShouldShowDamageIndicators->FunctionFlags |= 0x400;

	return ShouldShowDamageIndicators_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.ShouldShowSelection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::ShouldShowSelection ( )
{
	static UFunction* pFnShouldShowSelection = NULL;

	if ( ! pFnShouldShowSelection )
		pFnShouldShowSelection = (UFunction*) UObject::GObjObjects()->Data[ 37952 ];

	USFXGameModeManager_execShouldShowSelection_Parms ShouldShowSelection_Parms;

	pFnShouldShowSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldShowSelection, &ShouldShowSelection_Parms, NULL );

	pFnShouldShowSelection->FunctionFlags |= 0x400;

	return ShouldShowSelection_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.ShouldShowHUD
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::ShouldShowHUD ( )
{
	static UFunction* pFnShouldShowHUD = NULL;

	if ( ! pFnShouldShowHUD )
		pFnShouldShowHUD = (UFunction*) UObject::GObjObjects()->Data[ 56255 ];

	USFXGameModeManager_execShouldShowHUD_Parms ShouldShowHUD_Parms;

	pFnShouldShowHUD->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldShowHUD, &ShouldShowHUD_Parms, NULL );

	pFnShouldShowHUD->FunctionFlags |= 0x400;

	return ShouldShowHUD_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.IsActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Mode                           ( CPF_Parm )

bool USFXGameModeManager::IsActive ( unsigned char Mode )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 37662 ];

	USFXGameModeManager_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.Mode = Mode;

	pFnIsActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	pFnIsActive->FunctionFlags |= 0x400;

	return IsActive_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.UpdateCurrentMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXGameModeManager::UpdateCurrentMode ( )
{
	static UFunction* pFnUpdateCurrentMode = NULL;

	if ( ! pFnUpdateCurrentMode )
		pFnUpdateCurrentMode = (UFunction*) UObject::GObjObjects()->Data[ 56252 ];

	USFXGameModeManager_execUpdateCurrentMode_Parms UpdateCurrentMode_Parms;

	pFnUpdateCurrentMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCurrentMode, &UpdateCurrentMode_Parms, NULL );

	pFnUpdateCurrentMode->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGameModeManager.Initialize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXGameModeManager::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 41521 ];

	USFXGameModeManager_execInitialize_Parms Initialize_Parms;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGameModeManager.HACK_GetCameraMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USFXCameraMode*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  GalaxyOrConversationMode       ( CPF_Parm )

class USFXCameraMode* USFXGameModeManager::HACK_GetCameraMode ( unsigned char GalaxyOrConversationMode )
{
	static UFunction* pFnHACK_GetCameraMode = NULL;

	if ( ! pFnHACK_GetCameraMode )
		pFnHACK_GetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 44900 ];

	USFXGameModeManager_execHACK_GetCameraMode_Parms HACK_GetCameraMode_Parms;
	HACK_GetCameraMode_Parms.GalaxyOrConversationMode = GalaxyOrConversationMode;

	pFnHACK_GetCameraMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHACK_GetCameraMode, &HACK_GetCameraMode_Parms, NULL );

	pFnHACK_GetCameraMode->FunctionFlags |= 0x400;

	return HACK_GetCameraMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.HACK_BeginExitGalaxyMap
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned long                  resize                         ( CPF_Parm )

void USFXGameModeManager::eventHACK_BeginExitGalaxyMap ( unsigned long resize )
{
	static UFunction* pFnHACK_BeginExitGalaxyMap = NULL;

	if ( ! pFnHACK_BeginExitGalaxyMap )
		pFnHACK_BeginExitGalaxyMap = (UFunction*) UObject::GObjObjects()->Data[ 56248 ];

	USFXGameModeManager_eventHACK_BeginExitGalaxyMap_Parms HACK_BeginExitGalaxyMap_Parms;
	HACK_BeginExitGalaxyMap_Parms.resize = resize;

	this->ProcessEvent ( pFnHACK_BeginExitGalaxyMap, &HACK_BeginExitGalaxyMap_Parms, NULL );
};

// Function SFXGame.SFXGameModeManager.HACK_CanExitGalaxyMode
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeManager::eventHACK_CanExitGalaxyMode ( )
{
	static UFunction* pFnHACK_CanExitGalaxyMode = NULL;

	if ( ! pFnHACK_CanExitGalaxyMode )
		pFnHACK_CanExitGalaxyMode = (UFunction*) UObject::GObjObjects()->Data[ 56246 ];

	USFXGameModeManager_eventHACK_CanExitGalaxyMode_Parms HACK_CanExitGalaxyMode_Parms;

	this->ProcessEvent ( pFnHACK_CanExitGalaxyMode, &HACK_CanExitGalaxyMode_Parms, NULL );

	return HACK_CanExitGalaxyMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.HACK_GetOrbitalMode
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USFXGameModeBase*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXGameModeBase* USFXGameModeManager::HACK_GetOrbitalMode ( )
{
	static UFunction* pFnHACK_GetOrbitalMode = NULL;

	if ( ! pFnHACK_GetOrbitalMode )
		pFnHACK_GetOrbitalMode = (UFunction*) UObject::GObjObjects()->Data[ 41367 ];

	USFXGameModeManager_execHACK_GetOrbitalMode_Parms HACK_GetOrbitalMode_Parms;

	this->ProcessEvent ( pFnHACK_GetOrbitalMode, &HACK_GetOrbitalMode_Parms, NULL );

	return HACK_GetOrbitalMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.Console_UpdateTriggerBindings
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ConfigOption                   ( CPF_Parm )

void USFXGameModeManager::Console_UpdateTriggerBindings ( unsigned char ConfigOption )
{
	static UFunction* pFnConsole_UpdateTriggerBindings = NULL;

	if ( ! pFnConsole_UpdateTriggerBindings )
		pFnConsole_UpdateTriggerBindings = (UFunction*) UObject::GObjObjects()->Data[ 42512 ];

	USFXGameModeManager_execConsole_UpdateTriggerBindings_Parms Console_UpdateTriggerBindings_Parms;
	Console_UpdateTriggerBindings_Parms.ConfigOption = ConfigOption;

	this->ProcessEvent ( pFnConsole_UpdateTriggerBindings, &Console_UpdateTriggerBindings_Parms, NULL );
};

// Function SFXGame.SFXGameModeManager.Console_UpdateStickBindings
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ConfigOption                   ( CPF_Parm )

void USFXGameModeManager::Console_UpdateStickBindings ( unsigned char ConfigOption )
{
	static UFunction* pFnConsole_UpdateStickBindings = NULL;

	if ( ! pFnConsole_UpdateStickBindings )
		pFnConsole_UpdateStickBindings = (UFunction*) UObject::GObjObjects()->Data[ 42511 ];

	USFXGameModeManager_execConsole_UpdateStickBindings_Parms Console_UpdateStickBindings_Parms;
	Console_UpdateStickBindings_Parms.ConfigOption = ConfigOption;

	this->ProcessEvent ( pFnConsole_UpdateStickBindings, &Console_UpdateStickBindings_Parms, NULL );
};

// Function SFXGame.SFXGameModeManager.Helper_ResetStaticConsoleBindings
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGameModeManager::Helper_ResetStaticConsoleBindings ( )
{
	static UFunction* pFnHelper_ResetStaticConsoleBindings = NULL;

	if ( ! pFnHelper_ResetStaticConsoleBindings )
		pFnHelper_ResetStaticConsoleBindings = (UFunction*) UObject::GObjObjects()->Data[ 56237 ];

	USFXGameModeManager_execHelper_ResetStaticConsoleBindings_Parms Helper_ResetStaticConsoleBindings_Parms;

	this->ProcessEvent ( pFnHelper_ResetStaticConsoleBindings, &Helper_ResetStaticConsoleBindings_Parms, NULL );
};

// Function SFXGame.SFXGameModeManager.Helper_SetStaticConsoleBinding
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FName                   Key                            ( CPF_Parm )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXGameModeManager::Helper_SetStaticConsoleBinding ( struct FName Key, struct FString Command )
{
	static UFunction* pFnHelper_SetStaticConsoleBinding = NULL;

	if ( ! pFnHelper_SetStaticConsoleBinding )
		pFnHelper_SetStaticConsoleBinding = (UFunction*) UObject::GObjObjects()->Data[ 56231 ];

	USFXGameModeManager_execHelper_SetStaticConsoleBinding_Parms Helper_SetStaticConsoleBinding_Parms;
	memcpy ( &Helper_SetStaticConsoleBinding_Parms.Key, &Key, 0x8 );
	memcpy ( &Helper_SetStaticConsoleBinding_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnHelper_SetStaticConsoleBinding, &Helper_SetStaticConsoleBinding_Parms, NULL );
};

// Function SFXGame.SFXGameModeManager.Helper_SetBinding
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// class USFXGameModeBase*        Mode                           ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXGameModeManager::Helper_SetBinding ( class USFXGameModeBase* Mode, struct FName Key, struct FString Command )
{
	static UFunction* pFnHelper_SetBinding = NULL;

	if ( ! pFnHelper_SetBinding )
		pFnHelper_SetBinding = (UFunction*) UObject::GObjObjects()->Data[ 56225 ];

	USFXGameModeManager_execHelper_SetBinding_Parms Helper_SetBinding_Parms;
	Helper_SetBinding_Parms.Mode = Mode;
	memcpy ( &Helper_SetBinding_Parms.Key, &Key, 0x8 );
	memcpy ( &Helper_SetBinding_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnHelper_SetBinding, &Helper_SetBinding_Parms, NULL );
};

// Function SFXGame.SFXGameModeManager.GetCameraMode
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class USFXCameraMode*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXCameraMode*          OldCameraMode                  ( CPF_Parm )
// int                            PreserveTarget                 ( CPF_Parm | CPF_OutParm )
// float                          TransitionTime                 ( CPF_Parm | CPF_OutParm )
// class USFXCameraMode_Interpolate* Transition                     ( CPF_Parm | CPF_OutParm )

class USFXCameraMode* USFXGameModeManager::GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition )
{
	static UFunction* pFnGetCameraMode = NULL;

	if ( ! pFnGetCameraMode )
		pFnGetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 56219 ];

	USFXGameModeManager_execGetCameraMode_Parms GetCameraMode_Parms;
	GetCameraMode_Parms.OldCameraMode = OldCameraMode;

	this->ProcessEvent ( pFnGetCameraMode, &GetCameraMode_Parms, NULL );

	if ( PreserveTarget )
		*PreserveTarget = GetCameraMode_Parms.PreserveTarget;

	if ( TransitionTime )
		*TransitionTime = GetCameraMode_Parms.TransitionTime;

	if ( Transition )
		*Transition = GetCameraMode_Parms.Transition;

	return GetCameraMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeManager.DisableMode
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  Mode                           ( CPF_Parm )
// struct FName                   ModeSpecifier                  ( CPF_OptionalParm | CPF_Parm )

void USFXGameModeManager::eventDisableMode ( unsigned char Mode, struct FName ModeSpecifier )
{
	static UFunction* pFnDisableMode = NULL;

	if ( ! pFnDisableMode )
		pFnDisableMode = (UFunction*) UObject::GObjObjects()->Data[ 56215 ];

	USFXGameModeManager_eventDisableMode_Parms DisableMode_Parms;
	DisableMode_Parms.Mode = Mode;
	memcpy ( &DisableMode_Parms.ModeSpecifier, &ModeSpecifier, 0x8 );

	this->ProcessEvent ( pFnDisableMode, &DisableMode_Parms, NULL );
};

// Function SFXGame.SFXGameModeManager.EnableMode
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  Mode                           ( CPF_Parm )
// struct FName                   ModeSpecifier                  ( CPF_OptionalParm | CPF_Parm )

void USFXGameModeManager::eventEnableMode ( unsigned char Mode, struct FName ModeSpecifier )
{
	static UFunction* pFnEnableMode = NULL;

	if ( ! pFnEnableMode )
		pFnEnableMode = (UFunction*) UObject::GObjObjects()->Data[ 56210 ];

	USFXGameModeManager_eventEnableMode_Parms EnableMode_Parms;
	EnableMode_Parms.Mode = Mode;
	memcpy ( &EnableMode_Parms.ModeSpecifier, &ModeSpecifier, 0x8 );

	this->ProcessEvent ( pFnEnableMode, &EnableMode_Parms, NULL );
};

// Function SFXGame.SFXModule_Radar.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void USFXModule_Radar::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 38481 ];

	USFXModule_Radar_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXNav_GoalPoint.GetPriority
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXNav_GoalPoint::GetPriority ( )
{
	static UFunction* pFnGetPriority = NULL;

	if ( ! pFnGetPriority )
		pFnGetPriority = (UFunction*) UObject::GObjObjects()->Data[ 57750 ];

	ASFXNav_GoalPoint_execGetPriority_Parms GetPriority_Parms;

	pFnGetPriority->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPriority, &GetPriority_Parms, NULL );

	pFnGetPriority->FunctionFlags |= 0x400;

	return GetPriority_Parms.ReturnValue;
};

// Function SFXGame.SFXNav_GoalPoint.ResetPriority
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ASFXNav_GoalPoint::ResetPriority ( )
{
	static UFunction* pFnResetPriority = NULL;

	if ( ! pFnResetPriority )
		pFnResetPriority = (UFunction*) UObject::GObjObjects()->Data[ 57749 ];

	ASFXNav_GoalPoint_execResetPriority_Parms ResetPriority_Parms;

	pFnResetPriority->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetPriority, &ResetPriority_Parms, NULL );

	pFnResetPriority->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXNav_GoalPoint.OverridePriority
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nNewPriority                   ( CPF_Parm )

void ASFXNav_GoalPoint::OverridePriority ( int nNewPriority )
{
	static UFunction* pFnOverridePriority = NULL;

	if ( ! pFnOverridePriority )
		pFnOverridePriority = (UFunction*) UObject::GObjObjects()->Data[ 57747 ];

	ASFXNav_GoalPoint_execOverridePriority_Parms OverridePriority_Parms;
	OverridePriority_Parms.nNewPriority = nNewPriority;

	pFnOverridePriority->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOverridePriority, &OverridePriority_Parms, NULL );

	pFnOverridePriority->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXObjectPool.DumpPools
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ASFXObjectPool::DumpPools ( )
{
	static UFunction* pFnDumpPools = NULL;

	if ( ! pFnDumpPools )
		pFnDumpPools = (UFunction*) UObject::GObjObjects()->Data[ 34453 ];

	ASFXObjectPool_execDumpPools_Parms DumpPools_Parms;

	pFnDumpPools->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDumpPools, &DumpPools_Parms, NULL );

	pFnDumpPools->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXObjectPool.GetPathGoalEvaluatorFromCache
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UPathGoalEvaluator*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GoalEvalClass                  ( CPF_Parm )
// class APawn*                   Requestor                      ( CPF_Parm )

class UPathGoalEvaluator* ASFXObjectPool::eventGetPathGoalEvaluatorFromCache ( class UClass* GoalEvalClass, class APawn* Requestor )
{
	static UFunction* pFnGetPathGoalEvaluatorFromCache = NULL;

	if ( ! pFnGetPathGoalEvaluatorFromCache )
		pFnGetPathGoalEvaluatorFromCache = (UFunction*) UObject::GObjObjects()->Data[ 40920 ];

	ASFXObjectPool_eventGetPathGoalEvaluatorFromCache_Parms GetPathGoalEvaluatorFromCache_Parms;
	GetPathGoalEvaluatorFromCache_Parms.GoalEvalClass = GoalEvalClass;
	GetPathGoalEvaluatorFromCache_Parms.Requestor = Requestor;

	this->ProcessEvent ( pFnGetPathGoalEvaluatorFromCache, &GetPathGoalEvaluatorFromCache_Parms, NULL );

	return GetPathGoalEvaluatorFromCache_Parms.ReturnValue;
};

// Function SFXGame.SFXObjectPool.GetPathConstraintFromCache
// [0x00820803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UPathConstraint*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ConstraintClass                ( CPF_Parm )
// class APawn*                   Requestor                      ( CPF_Parm )

class UPathConstraint* ASFXObjectPool::eventGetPathConstraintFromCache ( class UClass* ConstraintClass, class APawn* Requestor )
{
	static UFunction* pFnGetPathConstraintFromCache = NULL;

	if ( ! pFnGetPathConstraintFromCache )
		pFnGetPathConstraintFromCache = (UFunction*) UObject::GObjObjects()->Data[ 40916 ];

	ASFXObjectPool_eventGetPathConstraintFromCache_Parms GetPathConstraintFromCache_Parms;
	GetPathConstraintFromCache_Parms.ConstraintClass = ConstraintClass;
	GetPathConstraintFromCache_Parms.Requestor = Requestor;

	this->ProcessEvent ( pFnGetPathConstraintFromCache, &GetPathConstraintFromCache_Parms, NULL );

	return GetPathConstraintFromCache_Parms.ReturnValue;
};

// Function SFXGame.SFXObjectPool.CleanupPathConstraints
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void ASFXObjectPool::eventCleanupPathConstraints ( )
{
	static UFunction* pFnCleanupPathConstraints = NULL;

	if ( ! pFnCleanupPathConstraints )
		pFnCleanupPathConstraints = (UFunction*) UObject::GObjObjects()->Data[ 57894 ];

	ASFXObjectPool_eventCleanupPathConstraints_Parms CleanupPathConstraints_Parms;

	this->ProcessEvent ( pFnCleanupPathConstraints, &CleanupPathConstraints_Parms, NULL );
};

// Function SFXGame.SFXObjectPool.CreatePathConstraintCache
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void ASFXObjectPool::eventCreatePathConstraintCache ( )
{
	static UFunction* pFnCreatePathConstraintCache = NULL;

	if ( ! pFnCreatePathConstraintCache )
		pFnCreatePathConstraintCache = (UFunction*) UObject::GObjObjects()->Data[ 57893 ];

	ASFXObjectPool_eventCreatePathConstraintCache_Parms CreatePathConstraintCache_Parms;

	this->ProcessEvent ( pFnCreatePathConstraintCache, &CreatePathConstraintCache_Parms, NULL );
};

// Function SFXGame.SFXObjectPool.GetWwiseAudioComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UWwiseAudioComponent*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UWwiseAudioComponent* ASFXObjectPool::GetWwiseAudioComponent ( )
{
	static UFunction* pFnGetWwiseAudioComponent = NULL;

	if ( ! pFnGetWwiseAudioComponent )
		pFnGetWwiseAudioComponent = (UFunction*) UObject::GObjObjects()->Data[ 49823 ];

	ASFXObjectPool_execGetWwiseAudioComponent_Parms GetWwiseAudioComponent_Parms;

	pFnGetWwiseAudioComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWwiseAudioComponent, &GetWwiseAudioComponent_Parms, NULL );

	pFnGetWwiseAudioComponent->FunctionFlags |= 0x400;

	return GetWwiseAudioComponent_Parms.ReturnValue;
};

// Function SFXGame.SFXObjectPool.GetImpactEmitter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AEmitter*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UParticleSystem*         Template                       ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// struct FRotator                SpawnRotation                  ( CPF_Parm )

class AEmitter* ASFXObjectPool::GetImpactEmitter ( class UParticleSystem* Template, struct FVector SpawnLocation, struct FRotator SpawnRotation )
{
	static UFunction* pFnGetImpactEmitter = NULL;

	if ( ! pFnGetImpactEmitter )
		pFnGetImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 43515 ];

	ASFXObjectPool_execGetImpactEmitter_Parms GetImpactEmitter_Parms;
	GetImpactEmitter_Parms.Template = Template;
	memcpy ( &GetImpactEmitter_Parms.SpawnLocation, &SpawnLocation, 0xC );
	memcpy ( &GetImpactEmitter_Parms.SpawnRotation, &SpawnRotation, 0xC );

	pFnGetImpactEmitter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetImpactEmitter, &GetImpactEmitter_Parms, NULL );

	pFnGetImpactEmitter->FunctionFlags |= 0x400;

	return GetImpactEmitter_Parms.ReturnValue;
};

// Function SFXGame.SFXObjectPool.PrecacheImpactEmitter
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystem*         Template                       ( CPF_Parm )

void ASFXObjectPool::PrecacheImpactEmitter ( class UParticleSystem* Template )
{
	static UFunction* pFnPrecacheImpactEmitter = NULL;

	if ( ! pFnPrecacheImpactEmitter )
		pFnPrecacheImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 57886 ];

	ASFXObjectPool_execPrecacheImpactEmitter_Parms PrecacheImpactEmitter_Parms;
	PrecacheImpactEmitter_Parms.Template = Template;

	pFnPrecacheImpactEmitter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrecacheImpactEmitter, &PrecacheImpactEmitter_Parms, NULL );

	pFnPrecacheImpactEmitter->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXObjectPool.ReusePooledEmitter
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AEmitter*                Emit                           ( CPF_Parm )

void ASFXObjectPool::eventReusePooledEmitter ( class AEmitter* Emit )
{
	static UFunction* pFnReusePooledEmitter = NULL;

	if ( ! pFnReusePooledEmitter )
		pFnReusePooledEmitter = (UFunction*) UObject::GObjObjects()->Data[ 57883 ];

	ASFXObjectPool_eventReusePooledEmitter_Parms ReusePooledEmitter_Parms;
	ReusePooledEmitter_Parms.Emit = Emit;

	this->ProcessEvent ( pFnReusePooledEmitter, &ReusePooledEmitter_Parms, NULL );
};

// Function SFXGame.SFXObjectPool.CreatePooledEmitter
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AEmitter*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UParticleSystem*         Template                       ( CPF_Parm )

class AEmitter* ASFXObjectPool::eventCreatePooledEmitter ( class UParticleSystem* Template )
{
	static UFunction* pFnCreatePooledEmitter = NULL;

	if ( ! pFnCreatePooledEmitter )
		pFnCreatePooledEmitter = (UFunction*) UObject::GObjObjects()->Data[ 57879 ];

	ASFXObjectPool_eventCreatePooledEmitter_Parms CreatePooledEmitter_Parms;
	CreatePooledEmitter_Parms.Template = Template;

	this->ProcessEvent ( pFnCreatePooledEmitter, &CreatePooledEmitter_Parms, NULL );

	return CreatePooledEmitter_Parms.ReturnValue;
};

// Function SFXGame.SFXObjectPool.GetGenericParticleSystemComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         Template                       ( CPF_Parm )

class UParticleSystemComponent* ASFXObjectPool::GetGenericParticleSystemComponent ( class UParticleSystem* Template )
{
	static UFunction* pFnGetGenericParticleSystemComponent = NULL;

	if ( ! pFnGetGenericParticleSystemComponent )
		pFnGetGenericParticleSystemComponent = (UFunction*) UObject::GObjObjects()->Data[ 39185 ];

	ASFXObjectPool_execGetGenericParticleSystemComponent_Parms GetGenericParticleSystemComponent_Parms;
	GetGenericParticleSystemComponent_Parms.Template = Template;

	pFnGetGenericParticleSystemComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGenericParticleSystemComponent, &GetGenericParticleSystemComponent_Parms, NULL );

	pFnGetGenericParticleSystemComponent->FunctionFlags |= 0x400;

	return GetGenericParticleSystemComponent_Parms.ReturnValue;
};

// Function SFXGame.SFXObjectPool.PrecacheGenericParticleSystemComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystem*         Template                       ( CPF_Parm )

void ASFXObjectPool::PrecacheGenericParticleSystemComponent ( class UParticleSystem* Template )
{
	static UFunction* pFnPrecacheGenericParticleSystemComponent = NULL;

	if ( ! pFnPrecacheGenericParticleSystemComponent )
		pFnPrecacheGenericParticleSystemComponent = (UFunction*) UObject::GObjObjects()->Data[ 57875 ];

	ASFXObjectPool_execPrecacheGenericParticleSystemComponent_Parms PrecacheGenericParticleSystemComponent_Parms;
	PrecacheGenericParticleSystemComponent_Parms.Template = Template;

	pFnPrecacheGenericParticleSystemComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrecacheGenericParticleSystemComponent, &PrecacheGenericParticleSystemComponent_Parms, NULL );

	pFnPrecacheGenericParticleSystemComponent->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXObjectPool.GetImpactParticleSystemComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UParticleSystem*         Template                       ( CPF_Parm )

class UParticleSystemComponent* ASFXObjectPool::GetImpactParticleSystemComponent ( class UParticleSystem* Template )
{
	static UFunction* pFnGetImpactParticleSystemComponent = NULL;

	if ( ! pFnGetImpactParticleSystemComponent )
		pFnGetImpactParticleSystemComponent = (UFunction*) UObject::GObjObjects()->Data[ 40394 ];

	ASFXObjectPool_execGetImpactParticleSystemComponent_Parms GetImpactParticleSystemComponent_Parms;
	GetImpactParticleSystemComponent_Parms.Template = Template;

	pFnGetImpactParticleSystemComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetImpactParticleSystemComponent, &GetImpactParticleSystemComponent_Parms, NULL );

	pFnGetImpactParticleSystemComponent->FunctionFlags |= 0x400;

	return GetImpactParticleSystemComponent_Parms.ReturnValue;
};

// Function SFXGame.SFXObjectPool.PrecacheImpactParticleSystemComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystem*         Template                       ( CPF_Parm )

void ASFXObjectPool::PrecacheImpactParticleSystemComponent ( class UParticleSystem* Template )
{
	static UFunction* pFnPrecacheImpactParticleSystemComponent = NULL;

	if ( ! pFnPrecacheImpactParticleSystemComponent )
		pFnPrecacheImpactParticleSystemComponent = (UFunction*) UObject::GObjObjects()->Data[ 56865 ];

	ASFXObjectPool_execPrecacheImpactParticleSystemComponent_Parms PrecacheImpactParticleSystemComponent_Parms;
	PrecacheImpactParticleSystemComponent_Parms.Template = Template;

	pFnPrecacheImpactParticleSystemComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrecacheImpactParticleSystemComponent, &PrecacheImpactParticleSystemComponent_Parms, NULL );

	pFnPrecacheImpactParticleSystemComponent->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXObjectPool.GetDroppedAmmo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ADroppedPickup*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DroppedAmmoClass               ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )

class ADroppedPickup* ASFXObjectPool::GetDroppedAmmo ( class UClass* DroppedAmmoClass, struct FVector SpawnLocation )
{
	static UFunction* pFnGetDroppedAmmo = NULL;

	if ( ! pFnGetDroppedAmmo )
		pFnGetDroppedAmmo = (UFunction*) UObject::GObjObjects()->Data[ 57037 ];

	ASFXObjectPool_execGetDroppedAmmo_Parms GetDroppedAmmo_Parms;
	GetDroppedAmmo_Parms.DroppedAmmoClass = DroppedAmmoClass;
	memcpy ( &GetDroppedAmmo_Parms.SpawnLocation, &SpawnLocation, 0xC );

	pFnGetDroppedAmmo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDroppedAmmo, &GetDroppedAmmo_Parms, NULL );

	pFnGetDroppedAmmo->FunctionFlags |= 0x400;

	return GetDroppedAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXObjectPool.ReusePooledDroppedAmmo
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class ADroppedPickup*          Dropped                        ( CPF_Parm )

void ASFXObjectPool::eventReusePooledDroppedAmmo ( class ADroppedPickup* Dropped )
{
	static UFunction* pFnReusePooledDroppedAmmo = NULL;

	if ( ! pFnReusePooledDroppedAmmo )
		pFnReusePooledDroppedAmmo = (UFunction*) UObject::GObjObjects()->Data[ 57866 ];

	ASFXObjectPool_eventReusePooledDroppedAmmo_Parms ReusePooledDroppedAmmo_Parms;
	ReusePooledDroppedAmmo_Parms.Dropped = Dropped;

	this->ProcessEvent ( pFnReusePooledDroppedAmmo, &ReusePooledDroppedAmmo_Parms, NULL );
};

// Function SFXGame.SFXObjectPool.CreatePooledDroppedAmmo
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class ADroppedPickup*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DroppedAmmoClass               ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )

class ADroppedPickup* ASFXObjectPool::eventCreatePooledDroppedAmmo ( class UClass* DroppedAmmoClass, struct FVector SpawnLocation )
{
	static UFunction* pFnCreatePooledDroppedAmmo = NULL;

	if ( ! pFnCreatePooledDroppedAmmo )
		pFnCreatePooledDroppedAmmo = (UFunction*) UObject::GObjObjects()->Data[ 57861 ];

	ASFXObjectPool_eventCreatePooledDroppedAmmo_Parms CreatePooledDroppedAmmo_Parms;
	CreatePooledDroppedAmmo_Parms.DroppedAmmoClass = DroppedAmmoClass;
	memcpy ( &CreatePooledDroppedAmmo_Parms.SpawnLocation, &SpawnLocation, 0xC );

	this->ProcessEvent ( pFnCreatePooledDroppedAmmo, &CreatePooledDroppedAmmo_Parms, NULL );

	return CreatePooledDroppedAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXObjectPool.GetProjectile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ProjectileClass                ( CPF_Parm )
// class AActor*                  ProjOwner                      ( CPF_Parm )
// class APawn*                   ProjInstigator                 ( CPF_Parm )
// struct FVector                 ProjLocation                   ( CPF_Parm )
// struct FRotator                ProjRotation                   ( CPF_Parm )

class AProjectile* ASFXObjectPool::GetProjectile ( class UClass* ProjectileClass, class AActor* ProjOwner, class APawn* ProjInstigator, struct FVector ProjLocation, struct FRotator ProjRotation )
{
	static UFunction* pFnGetProjectile = NULL;

	if ( ! pFnGetProjectile )
		pFnGetProjectile = (UFunction*) UObject::GObjObjects()->Data[ 29530 ];

	ASFXObjectPool_execGetProjectile_Parms GetProjectile_Parms;
	GetProjectile_Parms.ProjectileClass = ProjectileClass;
	GetProjectile_Parms.ProjOwner = ProjOwner;
	GetProjectile_Parms.ProjInstigator = ProjInstigator;
	memcpy ( &GetProjectile_Parms.ProjLocation, &ProjLocation, 0xC );
	memcpy ( &GetProjectile_Parms.ProjRotation, &ProjRotation, 0xC );

	pFnGetProjectile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProjectile, &GetProjectile_Parms, NULL );

	pFnGetProjectile->FunctionFlags |= 0x400;

	return GetProjectile_Parms.ReturnValue;
};

// Function SFXGame.SFXObjectPool.ReusePooledProjectile
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void ASFXObjectPool::eventReusePooledProjectile ( class AProjectile* Proj )
{
	static UFunction* pFnReusePooledProjectile = NULL;

	if ( ! pFnReusePooledProjectile )
		pFnReusePooledProjectile = (UFunction*) UObject::GObjObjects()->Data[ 57852 ];

	ASFXObjectPool_eventReusePooledProjectile_Parms ReusePooledProjectile_Parms;
	ReusePooledProjectile_Parms.Proj = Proj;

	this->ProcessEvent ( pFnReusePooledProjectile, &ReusePooledProjectile_Parms, NULL );
};

// Function SFXGame.SFXObjectPool.CreatePooledProjectile
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ProjClass                      ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )

class AProjectile* ASFXObjectPool::eventCreatePooledProjectile ( class UClass* ProjClass, struct FVector SpawnLocation )
{
	static UFunction* pFnCreatePooledProjectile = NULL;

	if ( ! pFnCreatePooledProjectile )
		pFnCreatePooledProjectile = (UFunction*) UObject::GObjObjects()->Data[ 57847 ];

	ASFXObjectPool_eventCreatePooledProjectile_Parms CreatePooledProjectile_Parms;
	CreatePooledProjectile_Parms.ProjClass = ProjClass;
	memcpy ( &CreatePooledProjectile_Parms.SpawnLocation, &SpawnLocation, 0xC );

	this->ProcessEvent ( pFnCreatePooledProjectile, &CreatePooledProjectile_Parms, NULL );

	return CreatePooledProjectile_Parms.ReturnValue;
};

// Function SFXGame.SFXObjectPool.GetTracer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UStaticMesh*             Mesh                           ( CPF_Parm )
// class UParticleSystem*         Template                       ( CPF_Parm )

class AProjectile* ASFXObjectPool::GetTracer ( class UStaticMesh* Mesh, class UParticleSystem* Template )
{
	static UFunction* pFnGetTracer = NULL;

	if ( ! pFnGetTracer )
		pFnGetTracer = (UFunction*) UObject::GObjObjects()->Data[ 56905 ];

	ASFXObjectPool_execGetTracer_Parms GetTracer_Parms;
	GetTracer_Parms.Mesh = Mesh;
	GetTracer_Parms.Template = Template;

	pFnGetTracer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTracer, &GetTracer_Parms, NULL );

	pFnGetTracer->FunctionFlags |= 0x400;

	return GetTracer_Parms.ReturnValue;
};

// Function SFXGame.SFXObjectPool.PrecacheTracer
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UStaticMesh*             Mesh                           ( CPF_Parm )
// class UParticleSystem*         Template                       ( CPF_Parm )

void ASFXObjectPool::PrecacheTracer ( class UStaticMesh* Mesh, class UParticleSystem* Template )
{
	static UFunction* pFnPrecacheTracer = NULL;

	if ( ! pFnPrecacheTracer )
		pFnPrecacheTracer = (UFunction*) UObject::GObjObjects()->Data[ 56871 ];

	ASFXObjectPool_execPrecacheTracer_Parms PrecacheTracer_Parms;
	PrecacheTracer_Parms.Mesh = Mesh;
	PrecacheTracer_Parms.Template = Template;

	pFnPrecacheTracer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrecacheTracer, &PrecacheTracer_Parms, NULL );

	pFnPrecacheTracer->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXObjectPool.ReusePooledTracer
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AProjectile*             Proj                           ( CPF_Parm )

void ASFXObjectPool::eventReusePooledTracer ( class AProjectile* Proj )
{
	static UFunction* pFnReusePooledTracer = NULL;

	if ( ! pFnReusePooledTracer )
		pFnReusePooledTracer = (UFunction*) UObject::GObjObjects()->Data[ 57838 ];

	ASFXObjectPool_eventReusePooledTracer_Parms ReusePooledTracer_Parms;
	ReusePooledTracer_Parms.Proj = Proj;

	this->ProcessEvent ( pFnReusePooledTracer, &ReusePooledTracer_Parms, NULL );
};

// Function SFXGame.SFXObjectPool.CreatePooledTracer
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UStaticMesh*             Mesh                           ( CPF_Parm )
// class UParticleSystem*         Template                       ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )

class AProjectile* ASFXObjectPool::eventCreatePooledTracer ( class UStaticMesh* Mesh, class UParticleSystem* Template, struct FVector SpawnLocation )
{
	static UFunction* pFnCreatePooledTracer = NULL;

	if ( ! pFnCreatePooledTracer )
		pFnCreatePooledTracer = (UFunction*) UObject::GObjObjects()->Data[ 57830 ];

	ASFXObjectPool_eventCreatePooledTracer_Parms CreatePooledTracer_Parms;
	CreatePooledTracer_Parms.Mesh = Mesh;
	CreatePooledTracer_Parms.Template = Template;
	memcpy ( &CreatePooledTracer_Parms.SpawnLocation, &SpawnLocation, 0xC );

	this->ProcessEvent ( pFnCreatePooledTracer, &CreatePooledTracer_Parms, NULL );

	return CreatePooledTracer_Parms.ReturnValue;
};

// Function SFXGame.SFXObjectPool.ApplyBloodColor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )
// class AActor*                  HitActor                       ( CPF_Parm )

void ASFXObjectPool::ApplyBloodColor ( class UParticleSystemComponent* PSC, class AActor* HitActor )
{
	static UFunction* pFnApplyBloodColor = NULL;

	if ( ! pFnApplyBloodColor )
		pFnApplyBloodColor = (UFunction*) UObject::GObjObjects()->Data[ 39188 ];

	ASFXObjectPool_execApplyBloodColor_Parms ApplyBloodColor_Parms;
	ApplyBloodColor_Parms.PSC = PSC;
	ApplyBloodColor_Parms.HitActor = HitActor;

	pFnApplyBloodColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyBloodColor, &ApplyBloodColor_Parms, NULL );

	pFnApplyBloodColor->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXObjectPool.ApplyLODLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )
// struct FVector                 EffectLocation                 ( CPF_Parm )

void ASFXObjectPool::ApplyLODLevel ( class UParticleSystemComponent* PSC, struct FVector EffectLocation )
{
	static UFunction* pFnApplyLODLevel = NULL;

	if ( ! pFnApplyLODLevel )
		pFnApplyLODLevel = (UFunction*) UObject::GObjObjects()->Data[ 39187 ];

	ASFXObjectPool_execApplyLODLevel_Parms ApplyLODLevel_Parms;
	ApplyLODLevel_Parms.PSC = PSC;
	memcpy ( &ApplyLODLevel_Parms.EffectLocation, &EffectLocation, 0xC );

	pFnApplyLODLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyLODLevel, &ApplyLODLevel_Parms, NULL );

	pFnApplyLODLevel->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXObjectPool.AttachParticleSystemComponent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )
// class AActor*                  HitActor                       ( CPF_Parm )
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// struct FName                   HitBone                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// unsigned long                  bStaticLocation                ( CPF_Parm )

void ASFXObjectPool::AttachParticleSystemComponent ( class UParticleSystemComponent* PSC, class AActor* HitActor, class UPrimitiveComponent* HitComponent, struct FName HitBone, struct FVector HitLocation, struct FVector HitNormal, unsigned long bStaticLocation )
{
	static UFunction* pFnAttachParticleSystemComponent = NULL;

	if ( ! pFnAttachParticleSystemComponent )
		pFnAttachParticleSystemComponent = (UFunction*) UObject::GObjObjects()->Data[ 39186 ];

	ASFXObjectPool_execAttachParticleSystemComponent_Parms AttachParticleSystemComponent_Parms;
	AttachParticleSystemComponent_Parms.PSC = PSC;
	AttachParticleSystemComponent_Parms.HitActor = HitActor;
	AttachParticleSystemComponent_Parms.HitComponent = HitComponent;
	memcpy ( &AttachParticleSystemComponent_Parms.HitBone, &HitBone, 0x8 );
	memcpy ( &AttachParticleSystemComponent_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &AttachParticleSystemComponent_Parms.HitNormal, &HitNormal, 0xC );
	AttachParticleSystemComponent_Parms.bStaticLocation = bStaticLocation;

	pFnAttachParticleSystemComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachParticleSystemComponent, &AttachParticleSystemComponent_Parms, NULL );

	pFnAttachParticleSystemComponent->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXPlayerSquadLoadoutData.CanHenchmanUseWeaponClass2
// [0x00822002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   HenchTag                       ( CPF_Parm )
// struct FName                   WeaponClassName                ( CPF_Parm )

bool USFXPlayerSquadLoadoutData::CanHenchmanUseWeaponClass2 ( struct FName HenchTag, struct FName WeaponClassName )
{
	static UFunction* pFnCanHenchmanUseWeaponClass2 = NULL;

	if ( ! pFnCanHenchmanUseWeaponClass2 )
		pFnCanHenchmanUseWeaponClass2 = (UFunction*) UObject::GObjObjects()->Data[ 59158 ];

	USFXPlayerSquadLoadoutData_execCanHenchmanUseWeaponClass2_Parms CanHenchmanUseWeaponClass2_Parms;
	memcpy ( &CanHenchmanUseWeaponClass2_Parms.HenchTag, &HenchTag, 0x8 );
	memcpy ( &CanHenchmanUseWeaponClass2_Parms.WeaponClassName, &WeaponClassName, 0x8 );

	this->ProcessEvent ( pFnCanHenchmanUseWeaponClass2, &CanHenchmanUseWeaponClass2_Parms, NULL );

	return CanHenchmanUseWeaponClass2_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerSquadLoadoutData.CanHenchmanUseWeaponClass
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   HenchTag                       ( CPF_Parm )
// class UClass*                  Weapon                         ( CPF_Parm )

bool USFXPlayerSquadLoadoutData::CanHenchmanUseWeaponClass ( struct FName HenchTag, class UClass* Weapon )
{
	static UFunction* pFnCanHenchmanUseWeaponClass = NULL;

	if ( ! pFnCanHenchmanUseWeaponClass )
		pFnCanHenchmanUseWeaponClass = (UFunction*) UObject::GObjObjects()->Data[ 59154 ];

	USFXPlayerSquadLoadoutData_execCanHenchmanUseWeaponClass_Parms CanHenchmanUseWeaponClass_Parms;
	memcpy ( &CanHenchmanUseWeaponClass_Parms.HenchTag, &HenchTag, 0x8 );
	CanHenchmanUseWeaponClass_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnCanHenchmanUseWeaponClass, &CanHenchmanUseWeaponClass_Parms, NULL );

	return CanHenchmanUseWeaponClass_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerSquadLoadoutData.CanPlayerUseWeaponClass
// [0x00822002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WeaponClass                    ( CPF_Parm )

bool USFXPlayerSquadLoadoutData::CanPlayerUseWeaponClass ( class UClass* WeaponClass )
{
	static UFunction* pFnCanPlayerUseWeaponClass = NULL;

	if ( ! pFnCanPlayerUseWeaponClass )
		pFnCanPlayerUseWeaponClass = (UFunction*) UObject::GObjObjects()->Data[ 59146 ];

	USFXPlayerSquadLoadoutData_execCanPlayerUseWeaponClass_Parms CanPlayerUseWeaponClass_Parms;
	CanPlayerUseWeaponClass_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFnCanPlayerUseWeaponClass, &CanPlayerUseWeaponClass_Parms, NULL );

	return CanPlayerUseWeaponClass_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerSquadLoadoutData.CanHenchmanUseWeaponGroup
// [0x00822002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   HenchTag                       ( CPF_Parm )
// unsigned char                  WeaponGroup                    ( CPF_Parm )

bool USFXPlayerSquadLoadoutData::CanHenchmanUseWeaponGroup ( struct FName HenchTag, unsigned char WeaponGroup )
{
	static UFunction* pFnCanHenchmanUseWeaponGroup = NULL;

	if ( ! pFnCanHenchmanUseWeaponGroup )
		pFnCanHenchmanUseWeaponGroup = (UFunction*) UObject::GObjObjects()->Data[ 59140 ];

	USFXPlayerSquadLoadoutData_execCanHenchmanUseWeaponGroup_Parms CanHenchmanUseWeaponGroup_Parms;
	memcpy ( &CanHenchmanUseWeaponGroup_Parms.HenchTag, &HenchTag, 0x8 );
	CanHenchmanUseWeaponGroup_Parms.WeaponGroup = WeaponGroup;

	this->ProcessEvent ( pFnCanHenchmanUseWeaponGroup, &CanHenchmanUseWeaponGroup_Parms, NULL );

	return CanHenchmanUseWeaponGroup_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerSquadLoadoutData.GetHenchmanClassname
// [0x00022002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   HenchTag                       ( CPF_Parm )

struct FName USFXPlayerSquadLoadoutData::GetHenchmanClassname ( struct FName HenchTag )
{
	static UFunction* pFnGetHenchmanClassname = NULL;

	if ( ! pFnGetHenchmanClassname )
		pFnGetHenchmanClassname = (UFunction*) UObject::GObjObjects()->Data[ 59135 ];

	USFXPlayerSquadLoadoutData_execGetHenchmanClassname_Parms GetHenchmanClassname_Parms;
	memcpy ( &GetHenchmanClassname_Parms.HenchTag, &HenchTag, 0x8 );

	this->ProcessEvent ( pFnGetHenchmanClassname, &GetHenchmanClassname_Parms, NULL );

	return GetHenchmanClassname_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerSquadLoadoutData.CanPlayerUseWeaponGroup
// [0x00822002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  WeaponGroup                    ( CPF_Parm )

bool USFXPlayerSquadLoadoutData::CanPlayerUseWeaponGroup ( unsigned char WeaponGroup )
{
	static UFunction* pFnCanPlayerUseWeaponGroup = NULL;

	if ( ! pFnCanPlayerUseWeaponGroup )
		pFnCanPlayerUseWeaponGroup = (UFunction*) UObject::GObjObjects()->Data[ 59127 ];

	USFXPlayerSquadLoadoutData_execCanPlayerUseWeaponGroup_Parms CanPlayerUseWeaponGroup_Parms;
	CanPlayerUseWeaponGroup_Parms.WeaponGroup = WeaponGroup;

	this->ProcessEvent ( pFnCanPlayerUseWeaponGroup, &CanPlayerUseWeaponGroup_Parms, NULL );

	return CanPlayerUseWeaponGroup_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerSquadLoadoutData.GetPluralPrettyName
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

int USFXPlayerSquadLoadoutData::GetPluralPrettyName ( int idx )
{
	static UFunction* pFnGetPluralPrettyName = NULL;

	if ( ! pFnGetPluralPrettyName )
		pFnGetPluralPrettyName = (UFunction*) UObject::GObjObjects()->Data[ 59124 ];

	USFXPlayerSquadLoadoutData_execGetPluralPrettyName_Parms GetPluralPrettyName_Parms;
	GetPluralPrettyName_Parms.idx = idx;

	this->ProcessEvent ( pFnGetPluralPrettyName, &GetPluralPrettyName_Parms, NULL );

	return GetPluralPrettyName_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerSquadLoadoutData.FindWeaponClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 WeaponClassName                ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXPlayerSquadLoadoutData::FindWeaponClass ( struct FString WeaponClassName )
{
	static UFunction* pFnFindWeaponClass = NULL;

	if ( ! pFnFindWeaponClass )
		pFnFindWeaponClass = (UFunction*) UObject::GObjObjects()->Data[ 59120 ];

	USFXPlayerSquadLoadoutData_execFindWeaponClass_Parms FindWeaponClass_Parms;
	memcpy ( &FindWeaponClass_Parms.WeaponClassName, &WeaponClassName, 0xC );

	this->ProcessEvent ( pFnFindWeaponClass, &FindWeaponClass_Parms, NULL );

	return FindWeaponClass_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerSquadLoadoutData.GetWeaponCategoryByName
// [0x00C22002] 
// Parameters infos:
// struct FString                 WClassName                     ( CPF_Parm | CPF_NeedCtorLink )
// int                            GroupIdx                       ( CPF_Parm | CPF_OutParm )
// int                            EntryIdx                       ( CPF_Parm | CPF_OutParm )

void USFXPlayerSquadLoadoutData::GetWeaponCategoryByName ( struct FString WClassName, int* GroupIdx, int* EntryIdx )
{
	static UFunction* pFnGetWeaponCategoryByName = NULL;

	if ( ! pFnGetWeaponCategoryByName )
		pFnGetWeaponCategoryByName = (UFunction*) UObject::GObjObjects()->Data[ 59115 ];

	USFXPlayerSquadLoadoutData_execGetWeaponCategoryByName_Parms GetWeaponCategoryByName_Parms;
	memcpy ( &GetWeaponCategoryByName_Parms.WClassName, &WClassName, 0xC );

	this->ProcessEvent ( pFnGetWeaponCategoryByName, &GetWeaponCategoryByName_Parms, NULL );

	if ( GroupIdx )
		*GroupIdx = GetWeaponCategoryByName_Parms.GroupIdx;

	if ( EntryIdx )
		*EntryIdx = GetWeaponCategoryByName_Parms.EntryIdx;
};

// Function SFXGame.SFXPlayerSquadLoadoutData.GetWeaponCategory
// [0x00422002] 
// Parameters infos:
// class UClass*                  WClass                         ( CPF_Parm )
// int                            GroupIdx                       ( CPF_Parm | CPF_OutParm )
// int                            EntryIdx                       ( CPF_Parm | CPF_OutParm )

void USFXPlayerSquadLoadoutData::GetWeaponCategory ( class UClass* WClass, int* GroupIdx, int* EntryIdx )
{
	static UFunction* pFnGetWeaponCategory = NULL;

	if ( ! pFnGetWeaponCategory )
		pFnGetWeaponCategory = (UFunction*) UObject::GObjObjects()->Data[ 59111 ];

	USFXPlayerSquadLoadoutData_execGetWeaponCategory_Parms GetWeaponCategory_Parms;
	GetWeaponCategory_Parms.WClass = WClass;

	this->ProcessEvent ( pFnGetWeaponCategory, &GetWeaponCategory_Parms, NULL );

	if ( GroupIdx )
		*GroupIdx = GetWeaponCategory_Parms.GroupIdx;

	if ( EntryIdx )
		*EntryIdx = GetWeaponCategory_Parms.EntryIdx;
};

// Function SFXGame.SFXPlayerSquadLoadoutData.GetWeaponGroup
// [0x00022002] 
// Parameters infos:
// TArray< struct FLoadoutWeaponInfo > ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            idx                            ( CPF_Parm )

TArray< struct FLoadoutWeaponInfo > USFXPlayerSquadLoadoutData::GetWeaponGroup ( int idx )
{
	static UFunction* pFnGetWeaponGroup = NULL;

	if ( ! pFnGetWeaponGroup )
		pFnGetWeaponGroup = (UFunction*) UObject::GObjObjects()->Data[ 59107 ];

	USFXPlayerSquadLoadoutData_execGetWeaponGroup_Parms GetWeaponGroup_Parms;
	GetWeaponGroup_Parms.idx = idx;

	this->ProcessEvent ( pFnGetWeaponGroup, &GetWeaponGroup_Parms, NULL );

	return GetWeaponGroup_Parms.ReturnValue;
};

// Function SFXGame.SFXPointOfInterest.OnCastAt
// [0x00020002] 
// Parameters infos:
// class APawn*                   oAttacker                      ( CPF_Parm )
// class USFXPower*               Power                          ( CPF_Parm )

void ASFXPointOfInterest::OnCastAt ( class APawn* oAttacker, class USFXPower* Power )
{
	static UFunction* pFnOnCastAt = NULL;

	if ( ! pFnOnCastAt )
		pFnOnCastAt = (UFunction*) UObject::GObjObjects()->Data[ 57571 ];

	ASFXPointOfInterest_execOnCastAt_Parms OnCastAt_Parms;
	OnCastAt_Parms.oAttacker = oAttacker;
	OnCastAt_Parms.Power = Power;

	this->ProcessEvent ( pFnOnCastAt, &OnCastAt_Parms, NULL );
};

// Function SFXGame.SFXPointOfInterest.OnAttacked
// [0x00020002] 
// Parameters infos:
// class APawn*                   oAttacker                      ( CPF_Parm )
// struct FName                   WeaponName                     ( CPF_Parm )

void ASFXPointOfInterest::OnAttacked ( class APawn* oAttacker, struct FName WeaponName )
{
	static UFunction* pFnOnAttacked = NULL;

	if ( ! pFnOnAttacked )
		pFnOnAttacked = (UFunction*) UObject::GObjObjects()->Data[ 57566 ];

	ASFXPointOfInterest_execOnAttacked_Parms OnAttacked_Parms;
	OnAttacked_Parms.oAttacker = oAttacker;
	memcpy ( &OnAttacked_Parms.WeaponName, &WeaponName, 0x8 );

	this->ProcessEvent ( pFnOnAttacked, &OnAttacked_Parms, NULL );
};

// Function SFXGame.SFXPointOfInterest.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ASFXPointOfInterest::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57565 ];

	ASFXPointOfInterest_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXProfileSettings.SetToDefaultsEx
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< unsigned char >        lstProfileSettingsToReset      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXProfileSettings::SetToDefaultsEx ( TArray< unsigned char >* lstProfileSettingsToReset )
{
	static UFunction* pFnSetToDefaultsEx = NULL;

	if ( ! pFnSetToDefaultsEx )
		pFnSetToDefaultsEx = (UFunction*) UObject::GObjObjects()->Data[ 48287 ];

	USFXProfileSettings_execSetToDefaultsEx_Parms SetToDefaultsEx_Parms;

	pFnSetToDefaultsEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetToDefaultsEx, &SetToDefaultsEx_Parms, NULL );

	pFnSetToDefaultsEx->FunctionFlags |= 0x400;

	if ( lstProfileSettingsToReset )
		memcpy ( lstProfileSettingsToReset, &SetToDefaultsEx_Parms.lstProfileSettingsToReset, 0xC );
};

// Function SFXGame.SFXProfileSettings.GetChoseMorinthNotSamara
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXProfileSettings::GetChoseMorinthNotSamara ( )
{
	static UFunction* pFnGetChoseMorinthNotSamara = NULL;

	if ( ! pFnGetChoseMorinthNotSamara )
		pFnGetChoseMorinthNotSamara = (UFunction*) UObject::GObjObjects()->Data[ 48284 ];

	USFXProfileSettings_execGetChoseMorinthNotSamara_Parms GetChoseMorinthNotSamara_Parms;

	this->ProcessEvent ( pFnGetChoseMorinthNotSamara, &GetChoseMorinthNotSamara_Parms, NULL );

	return GetChoseMorinthNotSamara_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.SetChoseMorinthNotSamara
// [0x00020002] 
// Parameters infos:
// unsigned long                  ChoseMorinth                   ( CPF_Parm )

void USFXProfileSettings::SetChoseMorinthNotSamara ( unsigned long ChoseMorinth )
{
	static UFunction* pFnSetChoseMorinthNotSamara = NULL;

	if ( ! pFnSetChoseMorinthNotSamara )
		pFnSetChoseMorinthNotSamara = (UFunction*) UObject::GObjObjects()->Data[ 48281 ];

	USFXProfileSettings_execSetChoseMorinthNotSamara_Parms SetChoseMorinthNotSamara_Parms;
	SetChoseMorinthNotSamara_Parms.ChoseMorinth = ChoseMorinth;

	this->ProcessEvent ( pFnSetChoseMorinthNotSamara, &SetChoseMorinthNotSamara_Parms, NULL );
};

// Function SFXGame.SFXProfileSettings.UpdateAchievements
// [0x00820002] 
// Parameters infos:
// TArray< struct FAchievementDetails > AchievementsList               ( CPF_Parm | CPF_NeedCtorLink )
// class ABioPlayerController*    PC                             ( CPF_Parm )

void USFXProfileSettings::UpdateAchievements ( TArray< struct FAchievementDetails > AchievementsList, class ABioPlayerController* PC )
{
	static UFunction* pFnUpdateAchievements = NULL;

	if ( ! pFnUpdateAchievements )
		pFnUpdateAchievements = (UFunction*) UObject::GObjObjects()->Data[ 48273 ];

	USFXProfileSettings_execUpdateAchievements_Parms UpdateAchievements_Parms;
	memcpy ( &UpdateAchievements_Parms.AchievementsList, &AchievementsList, 0xC );
	UpdateAchievements_Parms.PC = PC;

	this->ProcessEvent ( pFnUpdateAchievements, &UpdateAchievements_Parms, NULL );
};

// Function SFXGame.SFXProfileSettings.UnlockReward
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AchievementId                  ( CPF_Parm )
// class ABioPlayerController*    PC                             ( CPF_Parm )

bool USFXProfileSettings::UnlockReward ( unsigned char AchievementId, class ABioPlayerController* PC )
{
	static UFunction* pFnUnlockReward = NULL;

	if ( ! pFnUnlockReward )
		pFnUnlockReward = (UFunction*) UObject::GObjObjects()->Data[ 48265 ];

	USFXProfileSettings_execUnlockReward_Parms UnlockReward_Parms;
	UnlockReward_Parms.AchievementId = AchievementId;
	UnlockReward_Parms.PC = PC;

	this->ProcessEvent ( pFnUnlockReward, &UnlockReward_Parms, NULL );

	return UnlockReward_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetAchievementStatus
// [0x00820002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AchievementId                  ( CPF_Parm )

int USFXProfileSettings::GetAchievementStatus ( unsigned char AchievementId )
{
	static UFunction* pFnGetAchievementStatus = NULL;

	if ( ! pFnGetAchievementStatus )
		pFnGetAchievementStatus = (UFunction*) UObject::GObjObjects()->Data[ 48260 ];

	USFXProfileSettings_execGetAchievementStatus_Parms GetAchievementStatus_Parms;
	GetAchievementStatus_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnGetAchievementStatus, &GetAchievementStatus_Parms, NULL );

	return GetAchievementStatus_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetAchievementRequirement
// [0x00820002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AchievementId                  ( CPF_Parm )

int USFXProfileSettings::GetAchievementRequirement ( unsigned char AchievementId )
{
	static UFunction* pFnGetAchievementRequirement = NULL;

	if ( ! pFnGetAchievementRequirement )
		pFnGetAchievementRequirement = (UFunction*) UObject::GObjObjects()->Data[ 48256 ];

	USFXProfileSettings_execGetAchievementRequirement_Parms GetAchievementRequirement_Parms;
	GetAchievementRequirement_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnGetAchievementRequirement, &GetAchievementRequirement_Parms, NULL );

	return GetAchievementRequirement_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.HasCompletedAchievement
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AchievementId                  ( CPF_Parm )

bool USFXProfileSettings::HasCompletedAchievement ( unsigned char AchievementId )
{
	static UFunction* pFnHasCompletedAchievement = NULL;

	if ( ! pFnHasCompletedAchievement )
		pFnHasCompletedAchievement = (UFunction*) UObject::GObjObjects()->Data[ 48251 ];

	USFXProfileSettings_execHasCompletedAchievement_Parms HasCompletedAchievement_Parms;
	HasCompletedAchievement_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnHasCompletedAchievement, &HasCompletedAchievement_Parms, NULL );

	return HasCompletedAchievement_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.SetAchievementCompleted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AchievementId                  ( CPF_Parm )
// class ABioPlayerController*    PC                             ( CPF_Parm )
// unsigned long                  bSaveProfile                   ( CPF_OptionalParm | CPF_Parm )

bool USFXProfileSettings::SetAchievementCompleted ( unsigned char AchievementId, class ABioPlayerController* PC, unsigned long bSaveProfile )
{
	static UFunction* pFnSetAchievementCompleted = NULL;

	if ( ! pFnSetAchievementCompleted )
		pFnSetAchievementCompleted = (UFunction*) UObject::GObjObjects()->Data[ 48244 ];

	USFXProfileSettings_execSetAchievementCompleted_Parms SetAchievementCompleted_Parms;
	SetAchievementCompleted_Parms.AchievementId = AchievementId;
	SetAchievementCompleted_Parms.PC = PC;
	SetAchievementCompleted_Parms.bSaveProfile = bSaveProfile;

	this->ProcessEvent ( pFnSetAchievementCompleted, &SetAchievementCompleted_Parms, NULL );

	return SetAchievementCompleted_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.SetAchievementUncompleted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AchievementId                  ( CPF_Parm )
// class ABioPlayerController*    PC                             ( CPF_Parm )
// unsigned long                  bSaveProfile                   ( CPF_OptionalParm | CPF_Parm )

bool USFXProfileSettings::SetAchievementUncompleted ( unsigned char AchievementId, class ABioPlayerController* PC, unsigned long bSaveProfile )
{
	static UFunction* pFnSetAchievementUncompleted = NULL;

	if ( ! pFnSetAchievementUncompleted )
		pFnSetAchievementUncompleted = (UFunction*) UObject::GObjObjects()->Data[ 48237 ];

	USFXProfileSettings_execSetAchievementUncompleted_Parms SetAchievementUncompleted_Parms;
	SetAchievementUncompleted_Parms.AchievementId = AchievementId;
	SetAchievementUncompleted_Parms.PC = PC;
	SetAchievementUncompleted_Parms.bSaveProfile = bSaveProfile;

	this->ProcessEvent ( pFnSetAchievementUncompleted, &SetAchievementUncompleted_Parms, NULL );

	return SetAchievementUncompleted_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetAchievementSettingField
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AchievementId                  ( CPF_Parm )

int USFXProfileSettings::GetAchievementSettingField ( unsigned char AchievementId )
{
	static UFunction* pFnGetAchievementSettingField = NULL;

	if ( ! pFnGetAchievementSettingField )
		pFnGetAchievementSettingField = (UFunction*) UObject::GObjObjects()->Data[ 48233 ];

	USFXProfileSettings_execGetAchievementSettingField_Parms GetAchievementSettingField_Parms;
	GetAchievementSettingField_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnGetAchievementSettingField, &GetAchievementSettingField_Parms, NULL );

	return GetAchievementSettingField_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetFinishedGameCareerName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXProfileSettings::GetFinishedGameCareerName ( )
{
	static UFunction* pFnGetFinishedGameCareerName = NULL;

	if ( ! pFnGetFinishedGameCareerName )
		pFnGetFinishedGameCareerName = (UFunction*) UObject::GObjObjects()->Data[ 48230 ];

	USFXProfileSettings_execGetFinishedGameCareerName_Parms GetFinishedGameCareerName_Parms;

	this->ProcessEvent ( pFnGetFinishedGameCareerName, &GetFinishedGameCareerName_Parms, NULL );

	return GetFinishedGameCareerName_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetNumGameCompletions
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::GetNumGameCompletions ( )
{
	static UFunction* pFnGetNumGameCompletions = NULL;

	if ( ! pFnGetNumGameCompletions )
		pFnGetNumGameCompletions = (UFunction*) UObject::GObjObjects()->Data[ 48227 ];

	USFXProfileSettings_execGetNumGameCompletions_Parms GetNumGameCompletions_Parms;

	this->ProcessEvent ( pFnGetNumGameCompletions, &GetNumGameCompletions_Parms, NULL );

	return GetNumGameCompletions_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetNumTechUpgrades
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::GetNumTechUpgrades ( )
{
	static UFunction* pFnGetNumTechUpgrades = NULL;

	if ( ! pFnGetNumTechUpgrades )
		pFnGetNumTechUpgrades = (UFunction*) UObject::GObjObjects()->Data[ 48224 ];

	USFXProfileSettings_execGetNumTechUpgrades_Parms GetNumTechUpgrades_Parms;

	this->ProcessEvent ( pFnGetNumTechUpgrades, &GetNumTechUpgrades_Parms, NULL );

	return GetNumTechUpgrades_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetNumCodex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::GetNumCodex ( )
{
	static UFunction* pFnGetNumCodex = NULL;

	if ( ! pFnGetNumCodex )
		pFnGetNumCodex = (UFunction*) UObject::GObjObjects()->Data[ 48221 ];

	USFXProfileSettings_execGetNumCodex_Parms GetNumCodex_Parms;

	this->ProcessEvent ( pFnGetNumCodex, &GetNumCodex_Parms, NULL );

	return GetNumCodex_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetNumN7MissionsCompleted
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::GetNumN7MissionsCompleted ( )
{
	static UFunction* pFnGetNumN7MissionsCompleted = NULL;

	if ( ! pFnGetNumN7MissionsCompleted )
		pFnGetNumN7MissionsCompleted = (UFunction*) UObject::GObjObjects()->Data[ 48218 ];

	USFXProfileSettings_execGetNumN7MissionsCompleted_Parms GetNumN7MissionsCompleted_Parms;

	this->ProcessEvent ( pFnGetNumN7MissionsCompleted, &GetNumN7MissionsCompleted_Parms, NULL );

	return GetNumN7MissionsCompleted_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetNumArmourIncinerated
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::GetNumArmourIncinerated ( )
{
	static UFunction* pFnGetNumArmourIncinerated = NULL;

	if ( ! pFnGetNumArmourIncinerated )
		pFnGetNumArmourIncinerated = (UFunction*) UObject::GObjObjects()->Data[ 48215 ];

	USFXProfileSettings_execGetNumArmourIncinerated_Parms GetNumArmourIncinerated_Parms;

	this->ProcessEvent ( pFnGetNumArmourIncinerated, &GetNumArmourIncinerated_Parms, NULL );

	return GetNumArmourIncinerated_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetNumBarriersWarped
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::GetNumBarriersWarped ( )
{
	static UFunction* pFnGetNumBarriersWarped = NULL;

	if ( ! pFnGetNumBarriersWarped )
		pFnGetNumBarriersWarped = (UFunction*) UObject::GObjObjects()->Data[ 48212 ];

	USFXProfileSettings_execGetNumBarriersWarped_Parms GetNumBarriersWarped_Parms;

	this->ProcessEvent ( pFnGetNumBarriersWarped, &GetNumBarriersWarped_Parms, NULL );

	return GetNumBarriersWarped_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetNumShieldsDisrupted
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::GetNumShieldsDisrupted ( )
{
	static UFunction* pFnGetNumShieldsDisrupted = NULL;

	if ( ! pFnGetNumShieldsDisrupted )
		pFnGetNumShieldsDisrupted = (UFunction*) UObject::GObjObjects()->Data[ 48209 ];

	USFXProfileSettings_execGetNumShieldsDisrupted_Parms GetNumShieldsDisrupted_Parms;

	this->ProcessEvent ( pFnGetNumShieldsDisrupted, &GetNumShieldsDisrupted_Parms, NULL );

	return GetNumShieldsDisrupted_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetNumScreams
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::GetNumScreams ( )
{
	static UFunction* pFnGetNumScreams = NULL;

	if ( ! pFnGetNumScreams )
		pFnGetNumScreams = (UFunction*) UObject::GObjObjects()->Data[ 48206 ];

	USFXProfileSettings_execGetNumScreams_Parms GetNumScreams_Parms;

	this->ProcessEvent ( pFnGetNumScreams, &GetNumScreams_Parms, NULL );

	return GetNumScreams_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetNumPowerCombos
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::GetNumPowerCombos ( )
{
	static UFunction* pFnGetNumPowerCombos = NULL;

	if ( ! pFnGetNumPowerCombos )
		pFnGetNumPowerCombos = (UFunction*) UObject::GObjObjects()->Data[ 48203 ];

	USFXProfileSettings_execGetNumPowerCombos_Parms GetNumPowerCombos_Parms;

	this->ProcessEvent ( pFnGetNumPowerCombos, &GetNumPowerCombos_Parms, NULL );

	return GetNumPowerCombos_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetNumMeleeCombos
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::GetNumMeleeCombos ( )
{
	static UFunction* pFnGetNumMeleeCombos = NULL;

	if ( ! pFnGetNumMeleeCombos )
		pFnGetNumMeleeCombos = (UFunction*) UObject::GObjObjects()->Data[ 48200 ];

	USFXProfileSettings_execGetNumMeleeCombos_Parms GetNumMeleeCombos_Parms;

	this->ProcessEvent ( pFnGetNumMeleeCombos, &GetNumMeleeCombos_Parms, NULL );

	return GetNumMeleeCombos_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetNumHeadshots
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::GetNumHeadshots ( )
{
	static UFunction* pFnGetNumHeadshots = NULL;

	if ( ! pFnGetNumHeadshots )
		pFnGetNumHeadshots = (UFunction*) UObject::GObjObjects()->Data[ 48197 ];

	USFXProfileSettings_execGetNumHeadshots_Parms GetNumHeadshots_Parms;

	this->ProcessEvent ( pFnGetNumHeadshots, &GetNumHeadshots_Parms, NULL );

	return GetNumHeadshots_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.SetCurrentCareerName
// [0x00020002] 
// Parameters infos:
// struct FString                 CareerName                     ( CPF_Parm | CPF_NeedCtorLink )

void USFXProfileSettings::SetCurrentCareerName ( struct FString CareerName )
{
	static UFunction* pFnSetCurrentCareerName = NULL;

	if ( ! pFnSetCurrentCareerName )
		pFnSetCurrentCareerName = (UFunction*) UObject::GObjObjects()->Data[ 48194 ];

	USFXProfileSettings_execSetCurrentCareerName_Parms SetCurrentCareerName_Parms;
	memcpy ( &SetCurrentCareerName_Parms.CareerName, &CareerName, 0xC );

	this->ProcessEvent ( pFnSetCurrentCareerName, &SetCurrentCareerName_Parms, NULL );
};

// Function SFXGame.SFXProfileSettings.GetCurrentCareerName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXProfileSettings::GetCurrentCareerName ( )
{
	static UFunction* pFnGetCurrentCareerName = NULL;

	if ( ! pFnGetCurrentCareerName )
		pFnGetCurrentCareerName = (UFunction*) UObject::GObjObjects()->Data[ 48191 ];

	USFXProfileSettings_execGetCurrentCareerName_Parms GetCurrentCareerName_Parms;

	this->ProcessEvent ( pFnGetCurrentCareerName, &GetCurrentCareerName_Parms, NULL );

	return GetCurrentCareerName_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.SetCurrentDeviceID
// [0x00020002] 
// Parameters infos:
// int                            DeviceID                       ( CPF_Parm )
// class ABioPlayerController*    PC                             ( CPF_Parm )

void USFXProfileSettings::SetCurrentDeviceID ( int DeviceID, class ABioPlayerController* PC )
{
	static UFunction* pFnSetCurrentDeviceID = NULL;

	if ( ! pFnSetCurrentDeviceID )
		pFnSetCurrentDeviceID = (UFunction*) UObject::GObjObjects()->Data[ 48187 ];

	USFXProfileSettings_execSetCurrentDeviceID_Parms SetCurrentDeviceID_Parms;
	SetCurrentDeviceID_Parms.DeviceID = DeviceID;
	SetCurrentDeviceID_Parms.PC = PC;

	this->ProcessEvent ( pFnSetCurrentDeviceID, &SetCurrentDeviceID_Parms, NULL );
};

// Function SFXGame.SFXProfileSettings.GetCurrentDeviceID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::GetCurrentDeviceID ( )
{
	static UFunction* pFnGetCurrentDeviceID = NULL;

	if ( ! pFnGetCurrentDeviceID )
		pFnGetCurrentDeviceID = (UFunction*) UObject::GObjObjects()->Data[ 48184 ];

	USFXProfileSettings_execGetCurrentDeviceID_Parms GetCurrentDeviceID_Parms;

	this->ProcessEvent ( pFnGetCurrentDeviceID, &GetCurrentDeviceID_Parms, NULL );

	return GetCurrentDeviceID_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetFilmgrainConfigOption
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXProfileSettings::GetFilmgrainConfigOption ( )
{
	static UFunction* pFnGetFilmgrainConfigOption = NULL;

	if ( ! pFnGetFilmgrainConfigOption )
		pFnGetFilmgrainConfigOption = (UFunction*) UObject::GObjObjects()->Data[ 48181 ];

	USFXProfileSettings_execGetFilmgrainConfigOption_Parms GetFilmgrainConfigOption_Parms;

	this->ProcessEvent ( pFnGetFilmgrainConfigOption, &GetFilmgrainConfigOption_Parms, NULL );

	return GetFilmgrainConfigOption_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetMotionBlurConfigOption
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXProfileSettings::GetMotionBlurConfigOption ( )
{
	static UFunction* pFnGetMotionBlurConfigOption = NULL;

	if ( ! pFnGetMotionBlurConfigOption )
		pFnGetMotionBlurConfigOption = (UFunction*) UObject::GObjObjects()->Data[ 48178 ];

	USFXProfileSettings_execGetMotionBlurConfigOption_Parms GetMotionBlurConfigOption_Parms;

	this->ProcessEvent ( pFnGetMotionBlurConfigOption, &GetMotionBlurConfigOption_Parms, NULL );

	return GetMotionBlurConfigOption_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetDialogVolume
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::eventGetDialogVolume ( )
{
	static UFunction* pFnGetDialogVolume = NULL;

	if ( ! pFnGetDialogVolume )
		pFnGetDialogVolume = (UFunction*) UObject::GObjObjects()->Data[ 48175 ];

	USFXProfileSettings_eventGetDialogVolume_Parms GetDialogVolume_Parms;

	this->ProcessEvent ( pFnGetDialogVolume, &GetDialogVolume_Parms, NULL );

	return GetDialogVolume_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetFXVolume
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::eventGetFXVolume ( )
{
	static UFunction* pFnGetFXVolume = NULL;

	if ( ! pFnGetFXVolume )
		pFnGetFXVolume = (UFunction*) UObject::GObjObjects()->Data[ 48172 ];

	USFXProfileSettings_eventGetFXVolume_Parms GetFXVolume_Parms;

	this->ProcessEvent ( pFnGetFXVolume, &GetFXVolume_Parms, NULL );

	return GetFXVolume_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetMusicVolume
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXProfileSettings::eventGetMusicVolume ( )
{
	static UFunction* pFnGetMusicVolume = NULL;

	if ( ! pFnGetMusicVolume )
		pFnGetMusicVolume = (UFunction*) UObject::GObjObjects()->Data[ 48169 ];

	USFXProfileSettings_eventGetMusicVolume_Parms GetMusicVolume_Parms;

	this->ProcessEvent ( pFnGetMusicVolume, &GetMusicVolume_Parms, NULL );

	return GetMusicVolume_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetDisplayGamma
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXProfileSettings::GetDisplayGamma ( )
{
	static UFunction* pFnGetDisplayGamma = NULL;

	if ( ! pFnGetDisplayGamma )
		pFnGetDisplayGamma = (UFunction*) UObject::GObjObjects()->Data[ 48166 ];

	USFXProfileSettings_execGetDisplayGamma_Parms GetDisplayGamma_Parms;

	this->ProcessEvent ( pFnGetDisplayGamma, &GetDisplayGamma_Parms, NULL );

	return GetDisplayGamma_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.SetShowHints
// [0x00020002] 
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void USFXProfileSettings::SetShowHints ( unsigned long bEnabled )
{
	static UFunction* pFnSetShowHints = NULL;

	if ( ! pFnSetShowHints )
		pFnSetShowHints = (UFunction*) UObject::GObjObjects()->Data[ 48163 ];

	USFXProfileSettings_execSetShowHints_Parms SetShowHints_Parms;
	SetShowHints_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnSetShowHints, &SetShowHints_Parms, NULL );
};

// Function SFXGame.SFXProfileSettings.AreHintsEnabled
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXProfileSettings::AreHintsEnabled ( )
{
	static UFunction* pFnAreHintsEnabled = NULL;

	if ( ! pFnAreHintsEnabled )
		pFnAreHintsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 48160 ];

	USFXProfileSettings_execAreHintsEnabled_Parms AreHintsEnabled_Parms;

	this->ProcessEvent ( pFnAreHintsEnabled, &AreHintsEnabled_Parms, NULL );

	return AreHintsEnabled_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.SetTelemetryCollection
// [0x00020002] 
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void USFXProfileSettings::SetTelemetryCollection ( unsigned long bEnabled )
{
	static UFunction* pFnSetTelemetryCollection = NULL;

	if ( ! pFnSetTelemetryCollection )
		pFnSetTelemetryCollection = (UFunction*) UObject::GObjObjects()->Data[ 48157 ];

	USFXProfileSettings_execSetTelemetryCollection_Parms SetTelemetryCollection_Parms;
	SetTelemetryCollection_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnSetTelemetryCollection, &SetTelemetryCollection_Parms, NULL );
};

// Function SFXGame.SFXProfileSettings.IsTelemetryCollectionEnabled
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXProfileSettings::IsTelemetryCollectionEnabled ( )
{
	static UFunction* pFnIsTelemetryCollectionEnabled = NULL;

	if ( ! pFnIsTelemetryCollectionEnabled )
		pFnIsTelemetryCollectionEnabled = (UFunction*) UObject::GObjObjects()->Data[ 48154 ];

	USFXProfileSettings_execIsTelemetryCollectionEnabled_Parms IsTelemetryCollectionEnabled_Parms;

	this->ProcessEvent ( pFnIsTelemetryCollectionEnabled, &IsTelemetryCollectionEnabled_Parms, NULL );

	return IsTelemetryCollectionEnabled_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetAutoLoginConfigOption
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXProfileSettings::GetAutoLoginConfigOption ( )
{
	static UFunction* pFnGetAutoLoginConfigOption = NULL;

	if ( ! pFnGetAutoLoginConfigOption )
		pFnGetAutoLoginConfigOption = (UFunction*) UObject::GObjObjects()->Data[ 48151 ];

	USFXProfileSettings_execGetAutoLoginConfigOption_Parms GetAutoLoginConfigOption_Parms;

	this->ProcessEvent ( pFnGetAutoLoginConfigOption, &GetAutoLoginConfigOption_Parms, NULL );

	return GetAutoLoginConfigOption_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetAutoSaveConfigOption
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXProfileSettings::GetAutoSaveConfigOption ( )
{
	static UFunction* pFnGetAutoSaveConfigOption = NULL;

	if ( ! pFnGetAutoSaveConfigOption )
		pFnGetAutoSaveConfigOption = (UFunction*) UObject::GObjObjects()->Data[ 48148 ];

	USFXProfileSettings_execGetAutoSaveConfigOption_Parms GetAutoSaveConfigOption_Parms;

	this->ProcessEvent ( pFnGetAutoSaveConfigOption, &GetAutoSaveConfigOption_Parms, NULL );

	return GetAutoSaveConfigOption_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetSquadPowerConfigOption
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXProfileSettings::GetSquadPowerConfigOption ( )
{
	static UFunction* pFnGetSquadPowerConfigOption = NULL;

	if ( ! pFnGetSquadPowerConfigOption )
		pFnGetSquadPowerConfigOption = (UFunction*) UObject::GObjObjects()->Data[ 48145 ];

	USFXProfileSettings_execGetSquadPowerConfigOption_Parms GetSquadPowerConfigOption_Parms;

	this->ProcessEvent ( pFnGetSquadPowerConfigOption, &GetSquadPowerConfigOption_Parms, NULL );

	return GetSquadPowerConfigOption_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetAutoLevelConfigOption
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USFXProfileSettings::GetAutoLevelConfigOption ( )
{
	static UFunction* pFnGetAutoLevelConfigOption = NULL;

	if ( ! pFnGetAutoLevelConfigOption )
		pFnGetAutoLevelConfigOption = (UFunction*) UObject::GObjObjects()->Data[ 48142 ];

	USFXProfileSettings_execGetAutoLevelConfigOption_Parms GetAutoLevelConfigOption_Parms;

	this->ProcessEvent ( pFnGetAutoLevelConfigOption, &GetAutoLevelConfigOption_Parms, NULL );

	return GetAutoLevelConfigOption_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetDifficultyConfigOption
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USFXProfileSettings::GetDifficultyConfigOption ( )
{
	static UFunction* pFnGetDifficultyConfigOption = NULL;

	if ( ! pFnGetDifficultyConfigOption )
		pFnGetDifficultyConfigOption = (UFunction*) UObject::GObjObjects()->Data[ 48139 ];

	USFXProfileSettings_execGetDifficultyConfigOption_Parms GetDifficultyConfigOption_Parms;

	this->ProcessEvent ( pFnGetDifficultyConfigOption, &GetDifficultyConfigOption_Parms, NULL );

	return GetDifficultyConfigOption_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetAimAssistValue
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USFXProfileSettings::GetAimAssistValue ( )
{
	static UFunction* pFnGetAimAssistValue = NULL;

	if ( ! pFnGetAimAssistValue )
		pFnGetAimAssistValue = (UFunction*) UObject::GObjObjects()->Data[ 48136 ];

	USFXProfileSettings_execGetAimAssistValue_Parms GetAimAssistValue_Parms;

	this->ProcessEvent ( pFnGetAimAssistValue, &GetAimAssistValue_Parms, NULL );

	return GetAimAssistValue_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetSubtitleConfigOption
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXProfileSettings::GetSubtitleConfigOption ( )
{
	static UFunction* pFnGetSubtitleConfigOption = NULL;

	if ( ! pFnGetSubtitleConfigOption )
		pFnGetSubtitleConfigOption = (UFunction*) UObject::GObjObjects()->Data[ 48133 ];

	USFXProfileSettings_execGetSubtitleConfigOption_Parms GetSubtitleConfigOption_Parms;

	this->ProcessEvent ( pFnGetSubtitleConfigOption, &GetSubtitleConfigOption_Parms, NULL );

	return GetSubtitleConfigOption_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetTriggerConfigOption
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USFXProfileSettings::GetTriggerConfigOption ( )
{
	static UFunction* pFnGetTriggerConfigOption = NULL;

	if ( ! pFnGetTriggerConfigOption )
		pFnGetTriggerConfigOption = (UFunction*) UObject::GObjObjects()->Data[ 48129 ];

	USFXProfileSettings_execGetTriggerConfigOption_Parms GetTriggerConfigOption_Parms;

	this->ProcessEvent ( pFnGetTriggerConfigOption, &GetTriggerConfigOption_Parms, NULL );

	return GetTriggerConfigOption_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetStickConfigOption
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USFXProfileSettings::GetStickConfigOption ( )
{
	static UFunction* pFnGetStickConfigOption = NULL;

	if ( ! pFnGetStickConfigOption )
		pFnGetStickConfigOption = (UFunction*) UObject::GObjObjects()->Data[ 48125 ];

	USFXProfileSettings_execGetStickConfigOption_Parms GetStickConfigOption_Parms;

	this->ProcessEvent ( pFnGetStickConfigOption, &GetStickConfigOption_Parms, NULL );

	return GetStickConfigOption_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetControllerSensitivityValue
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USFXProfileSettings::GetControllerSensitivityValue ( )
{
	static UFunction* pFnGetControllerSensitivityValue = NULL;

	if ( ! pFnGetControllerSensitivityValue )
		pFnGetControllerSensitivityValue = (UFunction*) UObject::GObjObjects()->Data[ 48121 ];

	USFXProfileSettings_execGetControllerSensitivityValue_Parms GetControllerSensitivityValue_Parms;

	this->ProcessEvent ( pFnGetControllerSensitivityValue, &GetControllerSensitivityValue_Parms, NULL );

	return GetControllerSensitivityValue_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetInvertYOption
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXProfileSettings::GetInvertYOption ( )
{
	static UFunction* pFnGetInvertYOption = NULL;

	if ( ! pFnGetInvertYOption )
		pFnGetInvertYOption = (UFunction*) UObject::GObjObjects()->Data[ 48117 ];

	USFXProfileSettings_execGetInvertYOption_Parms GetInvertYOption_Parms;

	this->ProcessEvent ( pFnGetInvertYOption, &GetInvertYOption_Parms, NULL );

	return GetInvertYOption_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetControllerVibrationOption
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXProfileSettings::GetControllerVibrationOption ( )
{
	static UFunction* pFnGetControllerVibrationOption = NULL;

	if ( ! pFnGetControllerVibrationOption )
		pFnGetControllerVibrationOption = (UFunction*) UObject::GObjObjects()->Data[ 48113 ];

	USFXProfileSettings_execGetControllerVibrationOption_Parms GetControllerVibrationOption_Parms;

	this->ProcessEvent ( pFnGetControllerVibrationOption, &GetControllerVibrationOption_Parms, NULL );

	return GetControllerVibrationOption_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.UpdateHeavyWeaponKill
// [0x00020002] 
// Parameters infos:
// int                            WeaponID                       ( CPF_Parm )
// class ABioPlayerController*    PC                             ( CPF_Parm )

void USFXProfileSettings::UpdateHeavyWeaponKill ( int WeaponID, class ABioPlayerController* PC )
{
	static UFunction* pFnUpdateHeavyWeaponKill = NULL;

	if ( ! pFnUpdateHeavyWeaponKill )
		pFnUpdateHeavyWeaponKill = (UFunction*) UObject::GObjObjects()->Data[ 48108 ];

	USFXProfileSettings_execUpdateHeavyWeaponKill_Parms UpdateHeavyWeaponKill_Parms;
	UpdateHeavyWeaponKill_Parms.WeaponID = WeaponID;
	UpdateHeavyWeaponKill_Parms.PC = PC;

	this->ProcessEvent ( pFnUpdateHeavyWeaponKill, &UpdateHeavyWeaponKill_Parms, NULL );
};

// Function SFXGame.SFXProfileSettings.GrinderAchievementIncrement
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AchievementId                  ( CPF_Parm )
// class ABioPlayerController*    PC                             ( CPF_Parm )

bool USFXProfileSettings::GrinderAchievementIncrement ( unsigned char AchievementId, class ABioPlayerController* PC )
{
	static UFunction* pFnGrinderAchievementIncrement = NULL;

	if ( ! pFnGrinderAchievementIncrement )
		pFnGrinderAchievementIncrement = (UFunction*) UObject::GObjObjects()->Data[ 48100 ];

	USFXProfileSettings_execGrinderAchievementIncrement_Parms GrinderAchievementIncrement_Parms;
	GrinderAchievementIncrement_Parms.AchievementId = AchievementId;
	GrinderAchievementIncrement_Parms.PC = PC;

	this->ProcessEvent ( pFnGrinderAchievementIncrement, &GrinderAchievementIncrement_Parms, NULL );

	return GrinderAchievementIncrement_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GrinderAchievementReset
// [0x00820002] 
// Parameters infos:
// unsigned char                  AchievementId                  ( CPF_Parm )
// class ABioPlayerController*    PC                             ( CPF_Parm )

void USFXProfileSettings::GrinderAchievementReset ( unsigned char AchievementId, class ABioPlayerController* PC )
{
	static UFunction* pFnGrinderAchievementReset = NULL;

	if ( ! pFnGrinderAchievementReset )
		pFnGrinderAchievementReset = (UFunction*) UObject::GObjObjects()->Data[ 48096 ];

	USFXProfileSettings_execGrinderAchievementReset_Parms GrinderAchievementReset_Parms;
	GrinderAchievementReset_Parms.AchievementId = AchievementId;
	GrinderAchievementReset_Parms.PC = PC;

	this->ProcessEvent ( pFnGrinderAchievementReset, &GrinderAchievementReset_Parms, NULL );
};

// Function SFXGame.SFXProfileSettings.GetGrinderAchievement
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AchievementId                  ( CPF_Parm )
// struct FGrinderAchievement     G                              ( CPF_Parm | CPF_OutParm )

bool USFXProfileSettings::GetGrinderAchievement ( unsigned char AchievementId, struct FGrinderAchievement* G )
{
	static UFunction* pFnGetGrinderAchievement = NULL;

	if ( ! pFnGetGrinderAchievement )
		pFnGetGrinderAchievement = (UFunction*) UObject::GObjObjects()->Data[ 48091 ];

	USFXProfileSettings_execGetGrinderAchievement_Parms GetGrinderAchievement_Parms;
	GetGrinderAchievement_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnGetGrinderAchievement, &GetGrinderAchievement_Parms, NULL );

	if ( G )
		memcpy ( G, &GetGrinderAchievement_Parms.G, 0x18 );

	return GetGrinderAchievement_Parms.ReturnValue;
};

// Function SFXGame.SFXProfileSettings.GetAchievementData
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AchievementId                  ( CPF_Parm )
// struct FAchievementData        AD                             ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXProfileSettings::GetAchievementData ( unsigned char AchievementId, struct FAchievementData* AD )
{
	static UFunction* pFnGetAchievementData = NULL;

	if ( ! pFnGetAchievementData )
		pFnGetAchievementData = (UFunction*) UObject::GObjObjects()->Data[ 48084 ];

	USFXProfileSettings_execGetAchievementData_Parms GetAchievementData_Parms;
	GetAchievementData_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnGetAchievementData, &GetAchievementData_Parms, NULL );

	if ( AD )
		memcpy ( AD, &GetAchievementData_Parms.AD, 0x2C );

	return GetAchievementData_Parms.ReturnValue;
};

// Function SFXGame.SFXSaveGame.LoadPower
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 PowerClassName                 ( CPF_Parm | CPF_NeedCtorLink )

class UClass* USFXSaveGame::LoadPower ( struct FString PowerClassName )
{
	static UFunction* pFnLoadPower = NULL;

	if ( ! pFnLoadPower )
		pFnLoadPower = (UFunction*) UObject::GObjObjects()->Data[ 59716 ];

	USFXSaveGame_execLoadPower_Parms LoadPower_Parms;
	memcpy ( &LoadPower_Parms.PowerClassName, &PowerClassName, 0xC );

	this->ProcessEvent ( pFnLoadPower, &LoadPower_Parms, NULL );

	return LoadPower_Parms.ReturnValue;
};

// Function SFXGame.SFXSaveGame.LoadHotKeys
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class ABioPlayerController*    PC                             ( CPF_Parm )
// TArray< struct FHotKeySaveRecord > Records                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSaveGame::LoadHotKeys ( class ABioPlayerController* PC, TArray< struct FHotKeySaveRecord >* Records )
{
	static UFunction* pFnLoadHotKeys = NULL;

	if ( ! pFnLoadHotKeys )
		pFnLoadHotKeys = (UFunction*) UObject::GObjObjects()->Data[ 59675 ];

	USFXSaveGame_execLoadHotKeys_Parms LoadHotKeys_Parms;
	LoadHotKeys_Parms.PC = PC;

	this->ProcessEvent ( pFnLoadHotKeys, &LoadHotKeys_Parms, NULL );

	if ( Records )
		memcpy ( Records, &LoadHotKeys_Parms.Records, 0xC );
};

// Function SFXGame.SFXSaveGame.LoadWeapons
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class ASFXPawn_Player*         Player                         ( CPF_Parm )
// TArray< struct FWeaponSaveRecord > Records                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSaveGame::LoadWeapons ( class ASFXPawn_Player* Player, TArray< struct FWeaponSaveRecord >* Records )
{
	static UFunction* pFnLoadWeapons = NULL;

	if ( ! pFnLoadWeapons )
		pFnLoadWeapons = (UFunction*) UObject::GObjObjects()->Data[ 59676 ];

	USFXSaveGame_execLoadWeapons_Parms LoadWeapons_Parms;
	LoadWeapons_Parms.Player = Player;

	this->ProcessEvent ( pFnLoadWeapons, &LoadWeapons_Parms, NULL );

	if ( Records )
		memcpy ( Records, &LoadWeapons_Parms.Records, 0xC );
};

// Function SFXGame.SFXSaveGame.LoadPowers
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class ASFXPawn*                Pawn                           ( CPF_Parm )
// TArray< struct FPowerSaveRecord > Records                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSaveGame::LoadPowers ( class ASFXPawn* Pawn, TArray< struct FPowerSaveRecord >* Records )
{
	static UFunction* pFnLoadPowers = NULL;

	if ( ! pFnLoadPowers )
		pFnLoadPowers = (UFunction*) UObject::GObjObjects()->Data[ 59674 ];

	USFXSaveGame_execLoadPowers_Parms LoadPowers_Parms;
	LoadPowers_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnLoadPowers, &LoadPowers_Parms, NULL );

	if ( Records )
		memcpy ( Records, &LoadPowers_Parms.Records, 0xC );
};

// Function SFXGame.SFXSaveGame.LoadMorphHead
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// class UBioMorphFace*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioMorphFace* USFXSaveGame::LoadMorphHead ( )
{
	static UFunction* pFnLoadMorphHead = NULL;

	if ( ! pFnLoadMorphHead )
		pFnLoadMorphHead = (UFunction*) UObject::GObjObjects()->Data[ 59684 ];

	USFXSaveGame_execLoadMorphHead_Parms LoadMorphHead_Parms;

	this->ProcessEvent ( pFnLoadMorphHead, &LoadMorphHead_Parms, NULL );

	return LoadMorphHead_Parms.ReturnValue;
};

// Function SFXGame.SFXSaveGame.LoadAppearance
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class ASFXPawn_Player*         Player                         ( CPF_Parm )
// struct FAppearanceSaveRecord   Record                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSaveGame::LoadAppearance ( class ASFXPawn_Player* Player, struct FAppearanceSaveRecord* Record )
{
	static UFunction* pFnLoadAppearance = NULL;

	if ( ! pFnLoadAppearance )
		pFnLoadAppearance = (UFunction*) UObject::GObjObjects()->Data[ 59673 ];

	USFXSaveGame_execLoadAppearance_Parms LoadAppearance_Parms;
	LoadAppearance_Parms.Player = Player;

	this->ProcessEvent ( pFnLoadAppearance, &LoadAppearance_Parms, NULL );

	if ( Record )
		memcpy ( Record, &LoadAppearance_Parms.Record, 0xC0 );
};

// Function SFXGame.SFXSaveGame.LoadHenchman
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class ASFXPawn_Henchman*       Hench                          ( CPF_Parm )

void USFXSaveGame::eventLoadHenchman ( class ASFXPawn_Henchman* Hench )
{
	static UFunction* pFnLoadHenchman = NULL;

	if ( ! pFnLoadHenchman )
		pFnLoadHenchman = (UFunction*) UObject::GObjObjects()->Data[ 58368 ];

	USFXSaveGame_eventLoadHenchman_Parms LoadHenchman_Parms;
	LoadHenchman_Parms.Hench = Hench;

	this->ProcessEvent ( pFnLoadHenchman, &LoadHenchman_Parms, NULL );
};

// Function SFXGame.SFXSaveGame.LoadPlayer
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// int                            PlayerID                       ( CPF_Parm )

void USFXSaveGame::eventLoadPlayer ( int PlayerID )
{
	static UFunction* pFnLoadPlayer = NULL;

	if ( ! pFnLoadPlayer )
		pFnLoadPlayer = (UFunction*) UObject::GObjObjects()->Data[ 59664 ];

	USFXSaveGame_eventLoadPlayer_Parms LoadPlayer_Parms;
	LoadPlayer_Parms.PlayerID = PlayerID;

	this->ProcessEvent ( pFnLoadPlayer, &LoadPlayer_Parms, NULL );
};

// Function SFXGame.SFXSaveGame.GetSpawnData
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// int                            IsFemale                       ( CPF_Parm | CPF_OutParm )
// class UClass*                  CharacterClass                 ( CPF_Parm | CPF_OutParm )
// struct FString                 FirstName                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// unsigned char                  Origin                         ( CPF_Parm | CPF_OutParm )
// unsigned char                  Notoriety                      ( CPF_Parm | CPF_OutParm )

void USFXSaveGame::GetSpawnData ( int* IsFemale, class UClass** CharacterClass, struct FString* FirstName, unsigned char* Origin, unsigned char* Notoriety )
{
	static UFunction* pFnGetSpawnData = NULL;

	if ( ! pFnGetSpawnData )
		pFnGetSpawnData = (UFunction*) UObject::GObjObjects()->Data[ 49704 ];

	USFXSaveGame_execGetSpawnData_Parms GetSpawnData_Parms;

	this->ProcessEvent ( pFnGetSpawnData, &GetSpawnData_Parms, NULL );

	if ( IsFemale )
		*IsFemale = GetSpawnData_Parms.IsFemale;

	if ( CharacterClass )
		*CharacterClass = GetSpawnData_Parms.CharacterClass;

	if ( FirstName )
		memcpy ( FirstName, &GetSpawnData_Parms.FirstName, 0xC );

	if ( Origin )
		*Origin = GetSpawnData_Parms.Origin;

	if ( Notoriety )
		*Notoriety = GetSpawnData_Parms.Notoriety;
};

// Function SFXGame.SFXSaveGame.SaveHotKeys
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class ABioPlayerController*    PC                             ( CPF_Parm )
// TArray< struct FHotKeySaveRecord > Records                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSaveGame::SaveHotKeys ( class ABioPlayerController* PC, TArray< struct FHotKeySaveRecord >* Records )
{
	static UFunction* pFnSaveHotKeys = NULL;

	if ( ! pFnSaveHotKeys )
		pFnSaveHotKeys = (UFunction*) UObject::GObjObjects()->Data[ 59617 ];

	USFXSaveGame_execSaveHotKeys_Parms SaveHotKeys_Parms;
	SaveHotKeys_Parms.PC = PC;

	this->ProcessEvent ( pFnSaveHotKeys, &SaveHotKeys_Parms, NULL );

	if ( Records )
		memcpy ( Records, &SaveHotKeys_Parms.Records, 0xC );
};

// Function SFXGame.SFXSaveGame.SaveWeapons
// [0x00C20003] ( FUNC_Final )
// Parameters infos:
// class ASFXPawn_Player*         Player                         ( CPF_Parm )
// TArray< struct FWeaponSaveRecord > Records                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSaveGame::SaveWeapons ( class ASFXPawn_Player* Player, TArray< struct FWeaponSaveRecord >* Records )
{
	static UFunction* pFnSaveWeapons = NULL;

	if ( ! pFnSaveWeapons )
		pFnSaveWeapons = (UFunction*) UObject::GObjObjects()->Data[ 59616 ];

	USFXSaveGame_execSaveWeapons_Parms SaveWeapons_Parms;
	SaveWeapons_Parms.Player = Player;

	this->ProcessEvent ( pFnSaveWeapons, &SaveWeapons_Parms, NULL );

	if ( Records )
		memcpy ( Records, &SaveWeapons_Parms.Records, 0xC );
};

// Function SFXGame.SFXSaveGame.SavePowers
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class ASFXPawn*                Pawn                           ( CPF_Parm )
// TArray< struct FPowerSaveRecord > Records                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSaveGame::SavePowers ( class ASFXPawn* Pawn, TArray< struct FPowerSaveRecord >* Records )
{
	static UFunction* pFnSavePowers = NULL;

	if ( ! pFnSavePowers )
		pFnSavePowers = (UFunction*) UObject::GObjObjects()->Data[ 59615 ];

	USFXSaveGame_execSavePowers_Parms SavePowers_Parms;
	SavePowers_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnSavePowers, &SavePowers_Parms, NULL );

	if ( Records )
		memcpy ( Records, &SavePowers_Parms.Records, 0xC );
};

// Function SFXGame.SFXSaveGame.SaveMorphHead
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioMorphFace*           Morph                          ( CPF_Parm )
// struct FMorphHeadSaveRecord    Record                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXSaveGame::SaveMorphHead ( class UBioMorphFace* Morph, struct FMorphHeadSaveRecord* Record )
{
	static UFunction* pFnSaveMorphHead = NULL;

	if ( ! pFnSaveMorphHead )
		pFnSaveMorphHead = (UFunction*) UObject::GObjObjects()->Data[ 59636 ];

	USFXSaveGame_execSaveMorphHead_Parms SaveMorphHead_Parms;
	SaveMorphHead_Parms.Morph = Morph;

	this->ProcessEvent ( pFnSaveMorphHead, &SaveMorphHead_Parms, NULL );

	if ( Record )
		memcpy ( Record, &SaveMorphHead_Parms.Record, 0x84 );

	return SaveMorphHead_Parms.ReturnValue;
};

// Function SFXGame.SFXSaveGame.SaveAppearance
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class ASFXPawn_Player*         Player                         ( CPF_Parm )
// struct FAppearanceSaveRecord   Record                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSaveGame::SaveAppearance ( class ASFXPawn_Player* Player, struct FAppearanceSaveRecord* Record )
{
	static UFunction* pFnSaveAppearance = NULL;

	if ( ! pFnSaveAppearance )
		pFnSaveAppearance = (UFunction*) UObject::GObjObjects()->Data[ 59614 ];

	USFXSaveGame_execSaveAppearance_Parms SaveAppearance_Parms;
	SaveAppearance_Parms.Player = Player;

	this->ProcessEvent ( pFnSaveAppearance, &SaveAppearance_Parms, NULL );

	if ( Record )
		memcpy ( Record, &SaveAppearance_Parms.Record, 0xC0 );
};

// Function SFXGame.SFXSaveGame.SaveHenchmen
// [0x00820803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// int                            PlayerID                       ( CPF_Parm )

void USFXSaveGame::eventSaveHenchmen ( int PlayerID )
{
	static UFunction* pFnSaveHenchmen = NULL;

	if ( ! pFnSaveHenchmen )
		pFnSaveHenchmen = (UFunction*) UObject::GObjObjects()->Data[ 48434 ];

	USFXSaveGame_eventSaveHenchmen_Parms SaveHenchmen_Parms;
	SaveHenchmen_Parms.PlayerID = PlayerID;

	this->ProcessEvent ( pFnSaveHenchmen, &SaveHenchmen_Parms, NULL );
};

// Function SFXGame.SFXSaveGame.EnsureHenchmanRecordExists
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// class ASFXPawn_Henchman*       Hench                          ( CPF_Parm )

void USFXSaveGame::EnsureHenchmanRecordExists ( class ASFXPawn_Henchman* Hench )
{
	static UFunction* pFnEnsureHenchmanRecordExists = NULL;

	if ( ! pFnEnsureHenchmanRecordExists )
		pFnEnsureHenchmanRecordExists = (UFunction*) UObject::GObjObjects()->Data[ 58406 ];

	USFXSaveGame_execEnsureHenchmanRecordExists_Parms EnsureHenchmanRecordExists_Parms;
	EnsureHenchmanRecordExists_Parms.Hench = Hench;

	this->ProcessEvent ( pFnEnsureHenchmanRecordExists, &EnsureHenchmanRecordExists_Parms, NULL );
};

// Function SFXGame.SFXSaveGame.SavePlayer
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// int                            PlayerID                       ( CPF_Parm )

void USFXSaveGame::eventSavePlayer ( int PlayerID )
{
	static UFunction* pFnSavePlayer = NULL;

	if ( ! pFnSavePlayer )
		pFnSavePlayer = (UFunction*) UObject::GObjObjects()->Data[ 59604 ];

	USFXSaveGame_eventSavePlayer_Parms SavePlayer_Parms;
	SavePlayer_Parms.PlayerID = PlayerID;

	this->ProcessEvent ( pFnSavePlayer, &SavePlayer_Parms, NULL );
};

// Function SFXGame.SFXSaveGame.GetPlayerRecord
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FPlayerSaveRecord       Record                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXSaveGame::GetPlayerRecord ( struct FPlayerSaveRecord* Record )
{
	static UFunction* pFnGetPlayerRecord = NULL;

	if ( ! pFnGetPlayerRecord )
		pFnGetPlayerRecord = (UFunction*) UObject::GObjObjects()->Data[ 48059 ];

	USFXSaveGame_execGetPlayerRecord_Parms GetPlayerRecord_Parms;

	this->ProcessEvent ( pFnGetPlayerRecord, &GetPlayerRecord_Parms, NULL );

	if ( Record )
		memcpy ( Record, &GetPlayerRecord_Parms.Record, 0x1B4 );

	return GetPlayerRecord_Parms.ReturnValue;
};

// Function SFXGame.SFXSelectionModule.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void USFXSelectionModule::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 54610 ];

	USFXSelectionModule_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXSelectionModule.SetCombatTargetable
// [0x00020002] 
// Parameters infos:
// unsigned long                  bTargetable                    ( CPF_Parm )

void USFXSelectionModule::SetCombatTargetable ( unsigned long bTargetable )
{
	static UFunction* pFnSetCombatTargetable = NULL;

	if ( ! pFnSetCombatTargetable )
		pFnSetCombatTargetable = (UFunction*) UObject::GObjObjects()->Data[ 54608 ];

	USFXSelectionModule_execSetCombatTargetable_Parms SetCombatTargetable_Parms;
	SetCombatTargetable_Parms.bTargetable = bTargetable;

	this->ProcessEvent ( pFnSetCombatTargetable, &SetCombatTargetable_Parms, NULL );
};

// Function SFXGame.SFXSelectionModule.SetTargetable
// [0x00020002] 
// Parameters infos:
// unsigned long                  bTargetable                    ( CPF_Parm )

void USFXSelectionModule::SetTargetable ( unsigned long bTargetable )
{
	static UFunction* pFnSetTargetable = NULL;

	if ( ! pFnSetTargetable )
		pFnSetTargetable = (UFunction*) UObject::GObjObjects()->Data[ 54606 ];

	USFXSelectionModule_execSetTargetable_Parms SetTargetable_Parms;
	SetTargetable_Parms.bTargetable = bTargetable;

	this->ProcessEvent ( pFnSetTargetable, &SetTargetable_Parms, NULL );
};

// Function SFXGame.SFXSelectionModule.GetSelectionPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USFXSelectionModule::GetSelectionPoint ( )
{
	static UFunction* pFnGetSelectionPoint = NULL;

	if ( ! pFnGetSelectionPoint )
		pFnGetSelectionPoint = (UFunction*) UObject::GObjObjects()->Data[ 54604 ];

	USFXSelectionModule_execGetSelectionPoint_Parms GetSelectionPoint_Parms;

	pFnGetSelectionPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSelectionPoint, &GetSelectionPoint_Parms, NULL );

	pFnGetSelectionPoint->FunctionFlags |= 0x400;

	return GetSelectionPoint_Parms.ReturnValue;
};

// Function SFXGame.SFXSimpleUseModule.IsDefaultActionPossible
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXSimpleUseModule::eventIsDefaultActionPossible ( )
{
	static UFunction* pFnIsDefaultActionPossible = NULL;

	if ( ! pFnIsDefaultActionPossible )
		pFnIsDefaultActionPossible = (UFunction*) UObject::GObjObjects()->Data[ 54617 ];

	USFXSimpleUseModule_eventIsDefaultActionPossible_Parms IsDefaultActionPossible_Parms;

	this->ProcessEvent ( pFnIsDefaultActionPossible, &IsDefaultActionPossible_Parms, NULL );

	return IsDefaultActionPossible_Parms.ReturnValue;
};

// Function SFXGame.SFXSimpleUseModule.OnUsed
// [0x00120000] 
// Parameters infos:
// class AActor*                  User                           ( CPF_Parm )

void USFXSimpleUseModule::OnUsed ( class AActor* User )
{
	static UFunction* pFnOnUsed = NULL;

	if ( ! pFnOnUsed )
		pFnOnUsed = (UFunction*) UObject::GObjObjects()->Data[ 54615 ];

	USFXSimpleUseModule_execOnUsed_Parms OnUsed_Parms;
	OnUsed_Parms.User = User;

	this->ProcessEvent ( pFnOnUsed, &OnUsed_Parms, NULL );
};

// Function SFXGame.SFXSystem.RemoveChild
// [0x00020002] 
// Parameters infos:
// class USFXGalaxyMapObject*     Child                          ( CPF_Parm )

void USFXSystem::RemoveChild ( class USFXGalaxyMapObject* Child )
{
	static UFunction* pFnRemoveChild = NULL;

	if ( ! pFnRemoveChild )
		pFnRemoveChild = (UFunction*) UObject::GObjObjects()->Data[ 62214 ];

	USFXSystem_execRemoveChild_Parms RemoveChild_Parms;
	RemoveChild_Parms.Child = Child;

	this->ProcessEvent ( pFnRemoveChild, &RemoveChild_Parms, NULL );
};

// Function SFXGame.SFXSystem.GetChildren
// [0x00420002] 
// Parameters infos:
// TArray< class USFXGalaxyMapObject* > Children                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSystem::GetChildren ( TArray< class USFXGalaxyMapObject* >* Children )
{
	static UFunction* pFnGetChildren = NULL;

	if ( ! pFnGetChildren )
		pFnGetChildren = (UFunction*) UObject::GObjObjects()->Data[ 62211 ];

	USFXSystem_execGetChildren_Parms GetChildren_Parms;

	this->ProcessEvent ( pFnGetChildren, &GetChildren_Parms, NULL );

	if ( Children )
		memcpy ( Children, &GetChildren_Parms.Children, 0xC );
};

// Function SFXGame.SFXSystem.AddChild
// [0x00020002] 
// Parameters infos:
// class USFXGalaxyMapObject*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXGalaxyMapObject* USFXSystem::AddChild ( )
{
	static UFunction* pFnAddChild = NULL;

	if ( ! pFnAddChild )
		pFnAddChild = (UFunction*) UObject::GObjObjects()->Data[ 62208 ];

	USFXSystem_execAddChild_Parms AddChild_Parms;

	this->ProcessEvent ( pFnAddChild, &AddChild_Parms, NULL );

	return AddChild_Parms.ReturnValue;
};

// Function SFXGame.SFXSystem.LoadFrom2DA
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXSystem::LoadFrom2DA ( )
{
	static UFunction* pFnLoadFrom2DA = NULL;

	if ( ! pFnLoadFrom2DA )
		pFnLoadFrom2DA = (UFunction*) UObject::GObjObjects()->Data[ 62206 ];

	USFXSystem_execLoadFrom2DA_Parms LoadFrom2DA_Parms;

	pFnLoadFrom2DA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadFrom2DA, &LoadFrom2DA_Parms, NULL );

	pFnLoadFrom2DA->FunctionFlags |= 0x400;

	return LoadFrom2DA_Parms.ReturnValue;
};

// Function SFXGame.SFXVersionDependentSelectionModule.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void USFXVersionDependentSelectionModule::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 62141 ];

	USFXVersionDependentSelectionModule_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXVersionDependentSelectionModule.IsEnglishBuild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXVersionDependentSelectionModule::IsEnglishBuild ( )
{
	static UFunction* pFnIsEnglishBuild = NULL;

	if ( ! pFnIsEnglishBuild )
		pFnIsEnglishBuild = (UFunction*) UObject::GObjObjects()->Data[ 62139 ];

	USFXVersionDependentSelectionModule_execIsEnglishBuild_Parms IsEnglishBuild_Parms;

	pFnIsEnglishBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnglishBuild, &IsEnglishBuild_Parms, NULL );

	pFnIsEnglishBuild->FunctionFlags |= 0x400;

	return IsEnglishBuild_Parms.ReturnValue;
};

// Function SFXGame.SFXVocalizationBank.MakeEntry
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   Role                           ( CPF_Parm )
// struct FName                   Event                          ( CPF_Parm )
// struct FName                   Type                           ( CPF_Parm )
// struct FName                   Variation                      ( CPF_Parm )
// class UWwiseEvent*             Sound                          ( CPF_Parm )

void USFXVocalizationBank::eventMakeEntry ( struct FName Role, struct FName Event, struct FName Type, struct FName Variation, class UWwiseEvent* Sound )
{
	static UFunction* pFnMakeEntry = NULL;

	if ( ! pFnMakeEntry )
		pFnMakeEntry = (UFunction*) UObject::GObjObjects()->Data[ 62550 ];

	USFXVocalizationBank_eventMakeEntry_Parms MakeEntry_Parms;
	memcpy ( &MakeEntry_Parms.Role, &Role, 0x8 );
	memcpy ( &MakeEntry_Parms.Event, &Event, 0x8 );
	memcpy ( &MakeEntry_Parms.Type, &Type, 0x8 );
	memcpy ( &MakeEntry_Parms.Variation, &Variation, 0x8 );
	MakeEntry_Parms.Sound = Sound;

	this->ProcessEvent ( pFnMakeEntry, &MakeEntry_Parms, NULL );
};

// Function SFXGame.SFXVocalizationBank.ImportBadOldType
// [0x00420002] 
// Parameters infos:
// struct FName                   Type                           ( CPF_Parm | CPF_OutParm )
// struct FName                   Variation                      ( CPF_Parm | CPF_OutParm )

void USFXVocalizationBank::ImportBadOldType ( struct FName* Type, struct FName* Variation )
{
	static UFunction* pFnImportBadOldType = NULL;

	if ( ! pFnImportBadOldType )
		pFnImportBadOldType = (UFunction*) UObject::GObjObjects()->Data[ 62546 ];

	USFXVocalizationBank_execImportBadOldType_Parms ImportBadOldType_Parms;

	this->ProcessEvent ( pFnImportBadOldType, &ImportBadOldType_Parms, NULL );

	if ( Type )
		memcpy ( Type, &ImportBadOldType_Parms.Type, 0x8 );

	if ( Variation )
		memcpy ( Variation, &ImportBadOldType_Parms.Variation, 0x8 );
};

// Function SFXGame.SFXVocalizationBank.EnsureArrays
// [0x00020002] 
// Parameters infos:
// int                            I                              ( CPF_Parm )
// int                            J                              ( CPF_Parm )

void USFXVocalizationBank::EnsureArrays ( int I, int J )
{
	static UFunction* pFnEnsureArrays = NULL;

	if ( ! pFnEnsureArrays )
		pFnEnsureArrays = (UFunction*) UObject::GObjObjects()->Data[ 62543 ];

	USFXVocalizationBank_execEnsureArrays_Parms EnsureArrays_Parms;
	EnsureArrays_Parms.I = I;
	EnsureArrays_Parms.J = J;

	this->ProcessEvent ( pFnEnsureArrays, &EnsureArrays_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManagerNativeBase.TickEvents
// [0x00020900] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXVocalizationManagerNativeBase::eventTickEvents ( float DeltaTime )
{
	static UFunction* pFnTickEvents = NULL;

	if ( ! pFnTickEvents )
		pFnTickEvents = (UFunction*) UObject::GObjObjects()->Data[ 62614 ];

	ASFXVocalizationManagerNativeBase_eventTickEvents_Parms TickEvents_Parms;
	TickEvents_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickEvents, &TickEvents_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManagerNativeBase.DebugOutput
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Type                           ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

struct FString ASFXVocalizationManagerNativeBase::eventDebugOutput ( int Type, int Value )
{
	static UFunction* pFnDebugOutput = NULL;

	if ( ! pFnDebugOutput )
		pFnDebugOutput = (UFunction*) UObject::GObjObjects()->Data[ 62608 ];

	ASFXVocalizationManagerNativeBase_eventDebugOutput_Parms DebugOutput_Parms;
	DebugOutput_Parms.Type = Type;
	DebugOutput_Parms.Value = Value;

	this->ProcessEvent ( pFnDebugOutput, &DebugOutput_Parms, NULL );

	return DebugOutput_Parms.ReturnValue;
};

// Function SFXGame.SFXVocalizationManagerNativeBase.SpecificNameMatches
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Type                           ( CPF_Parm )
// class ABioPawn*                Pawn                           ( CPF_Parm )

bool ASFXVocalizationManagerNativeBase::SpecificNameMatches ( unsigned char Type, class ABioPawn* Pawn )
{
	static UFunction* pFnSpecificNameMatches = NULL;

	if ( ! pFnSpecificNameMatches )
		pFnSpecificNameMatches = (UFunction*) UObject::GObjObjects()->Data[ 62604 ];

	ASFXVocalizationManagerNativeBase_execSpecificNameMatches_Parms SpecificNameMatches_Parms;
	SpecificNameMatches_Parms.Type = Type;
	SpecificNameMatches_Parms.Pawn = Pawn;

	pFnSpecificNameMatches->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpecificNameMatches, &SpecificNameMatches_Parms, NULL );

	pFnSpecificNameMatches->FunctionFlags |= 0x400;

	return SpecificNameMatches_Parms.ReturnValue;
};

// Function SFXGame.SFXVocalizationManagerNativeBase.SpecificChallengeMatches
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Type                           ( CPF_Parm )
// class ABioPawn*                Pawn                           ( CPF_Parm )

bool ASFXVocalizationManagerNativeBase::SpecificChallengeMatches ( unsigned char Type, class ABioPawn* Pawn )
{
	static UFunction* pFnSpecificChallengeMatches = NULL;

	if ( ! pFnSpecificChallengeMatches )
		pFnSpecificChallengeMatches = (UFunction*) UObject::GObjObjects()->Data[ 62600 ];

	ASFXVocalizationManagerNativeBase_execSpecificChallengeMatches_Parms SpecificChallengeMatches_Parms;
	SpecificChallengeMatches_Parms.Type = Type;
	SpecificChallengeMatches_Parms.Pawn = Pawn;

	pFnSpecificChallengeMatches->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpecificChallengeMatches, &SpecificChallengeMatches_Parms, NULL );

	pFnSpecificChallengeMatches->FunctionFlags |= 0x400;

	return SpecificChallengeMatches_Parms.ReturnValue;
};

// Function SFXGame.SFXVocalizationManagerNativeBase.SpecificWeaponMatches
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Type                           ( CPF_Parm )
// class ABioPawn*                Pawn                           ( CPF_Parm )

bool ASFXVocalizationManagerNativeBase::SpecificWeaponMatches ( unsigned char Type, class ABioPawn* Pawn )
{
	static UFunction* pFnSpecificWeaponMatches = NULL;

	if ( ! pFnSpecificWeaponMatches )
		pFnSpecificWeaponMatches = (UFunction*) UObject::GObjObjects()->Data[ 62596 ];

	ASFXVocalizationManagerNativeBase_execSpecificWeaponMatches_Parms SpecificWeaponMatches_Parms;
	SpecificWeaponMatches_Parms.Type = Type;
	SpecificWeaponMatches_Parms.Pawn = Pawn;

	pFnSpecificWeaponMatches->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpecificWeaponMatches, &SpecificWeaponMatches_Parms, NULL );

	pFnSpecificWeaponMatches->FunctionFlags |= 0x400;

	return SpecificWeaponMatches_Parms.ReturnValue;
};

// Function SFXGame.SFXVocalizationManagerNativeBase.SpecificGenderMatches
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Type                           ( CPF_Parm )
// class ABioPawn*                Pawn                           ( CPF_Parm )

bool ASFXVocalizationManagerNativeBase::SpecificGenderMatches ( unsigned char Type, class ABioPawn* Pawn )
{
	static UFunction* pFnSpecificGenderMatches = NULL;

	if ( ! pFnSpecificGenderMatches )
		pFnSpecificGenderMatches = (UFunction*) UObject::GObjObjects()->Data[ 62592 ];

	ASFXVocalizationManagerNativeBase_execSpecificGenderMatches_Parms SpecificGenderMatches_Parms;
	SpecificGenderMatches_Parms.Type = Type;
	SpecificGenderMatches_Parms.Pawn = Pawn;

	pFnSpecificGenderMatches->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpecificGenderMatches, &SpecificGenderMatches_Parms, NULL );

	pFnSpecificGenderMatches->FunctionFlags |= 0x400;

	return SpecificGenderMatches_Parms.ReturnValue;
};

// Function SFXGame.SFXVocalizationManagerNativeBase.SpecificAffiliationMatches
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )
// class ABioPawn*                Pawn                           ( CPF_Parm )

bool ASFXVocalizationManagerNativeBase::SpecificAffiliationMatches ( int idx, class ABioPawn* Pawn )
{
	static UFunction* pFnSpecificAffiliationMatches = NULL;

	if ( ! pFnSpecificAffiliationMatches )
		pFnSpecificAffiliationMatches = (UFunction*) UObject::GObjObjects()->Data[ 62588 ];

	ASFXVocalizationManagerNativeBase_execSpecificAffiliationMatches_Parms SpecificAffiliationMatches_Parms;
	SpecificAffiliationMatches_Parms.idx = idx;
	SpecificAffiliationMatches_Parms.Pawn = Pawn;

	pFnSpecificAffiliationMatches->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpecificAffiliationMatches, &SpecificAffiliationMatches_Parms, NULL );

	pFnSpecificAffiliationMatches->FunctionFlags |= 0x400;

	return SpecificAffiliationMatches_Parms.ReturnValue;
};

// Function SFXGame.SFXVocalizationManagerNativeBase.SpecificCharacterTypeMatches
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Type                           ( CPF_Parm )
// class ABioPawn*                Pawn                           ( CPF_Parm )

bool ASFXVocalizationManagerNativeBase::SpecificCharacterTypeMatches ( unsigned char Type, class ABioPawn* Pawn )
{
	static UFunction* pFnSpecificCharacterTypeMatches = NULL;

	if ( ! pFnSpecificCharacterTypeMatches )
		pFnSpecificCharacterTypeMatches = (UFunction*) UObject::GObjObjects()->Data[ 62584 ];

	ASFXVocalizationManagerNativeBase_execSpecificCharacterTypeMatches_Parms SpecificCharacterTypeMatches_Parms;
	SpecificCharacterTypeMatches_Parms.Type = Type;
	SpecificCharacterTypeMatches_Parms.Pawn = Pawn;

	pFnSpecificCharacterTypeMatches->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpecificCharacterTypeMatches, &SpecificCharacterTypeMatches_Parms, NULL );

	pFnSpecificCharacterTypeMatches->FunctionFlags |= 0x400;

	return SpecificCharacterTypeMatches_Parms.ReturnValue;
};

// Function SFXGame.SFXVocalizationManagerNativeBase.SpecificLocationMatches
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Type                           ( CPF_Parm )
// class ABioPawn*                BP                             ( CPF_Parm )
// class ABioPawn*                Speaker                        ( CPF_Parm )

bool ASFXVocalizationManagerNativeBase::SpecificLocationMatches ( unsigned char Type, class ABioPawn* BP, class ABioPawn* Speaker )
{
	static UFunction* pFnSpecificLocationMatches = NULL;

	if ( ! pFnSpecificLocationMatches )
		pFnSpecificLocationMatches = (UFunction*) UObject::GObjObjects()->Data[ 62579 ];

	ASFXVocalizationManagerNativeBase_execSpecificLocationMatches_Parms SpecificLocationMatches_Parms;
	SpecificLocationMatches_Parms.Type = Type;
	SpecificLocationMatches_Parms.BP = BP;
	SpecificLocationMatches_Parms.Speaker = Speaker;

	pFnSpecificLocationMatches->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpecificLocationMatches, &SpecificLocationMatches_Parms, NULL );

	pFnSpecificLocationMatches->FunctionFlags |= 0x400;

	return SpecificLocationMatches_Parms.ReturnValue;
};

// Function SFXGame.SFXVocalizationManagerNativeBase.HandleSFXVocalizationEvent
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSFXVocalizationEvent   Event                          ( CPF_Const | CPF_Parm | CPF_OutParm )

bool ASFXVocalizationManagerNativeBase::HandleSFXVocalizationEvent ( struct FSFXVocalizationEvent* Event )
{
	static UFunction* pFnHandleSFXVocalizationEvent = NULL;

	if ( ! pFnHandleSFXVocalizationEvent )
		pFnHandleSFXVocalizationEvent = (UFunction*) UObject::GObjObjects()->Data[ 62576 ];

	ASFXVocalizationManagerNativeBase_execHandleSFXVocalizationEvent_Parms HandleSFXVocalizationEvent_Parms;

	pFnHandleSFXVocalizationEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHandleSFXVocalizationEvent, &HandleSFXVocalizationEvent_Parms, NULL );

	pFnHandleSFXVocalizationEvent->FunctionFlags |= 0x400;

	if ( Event )
		memcpy ( Event, &HandleSFXVocalizationEvent_Parms.Event, 0x14 );

	return HandleSFXVocalizationEvent_Parms.ReturnValue;
};

// Function SFXGame.SFXVocalizationManagerNativeBase.RemoveFromIgnoreList
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )

void ASFXVocalizationManagerNativeBase::RemoveFromIgnoreList ( class ABioPawn* oPawn )
{
	static UFunction* pFnRemoveFromIgnoreList = NULL;

	if ( ! pFnRemoveFromIgnoreList )
		pFnRemoveFromIgnoreList = (UFunction*) UObject::GObjObjects()->Data[ 62574 ];

	ASFXVocalizationManagerNativeBase_execRemoveFromIgnoreList_Parms RemoveFromIgnoreList_Parms;
	RemoveFromIgnoreList_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnRemoveFromIgnoreList, &RemoveFromIgnoreList_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManagerNativeBase.AddToIgnoreList
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )

void ASFXVocalizationManagerNativeBase::AddToIgnoreList ( class ABioPawn* oPawn )
{
	static UFunction* pFnAddToIgnoreList = NULL;

	if ( ! pFnAddToIgnoreList )
		pFnAddToIgnoreList = (UFunction*) UObject::GObjObjects()->Data[ 62572 ];

	ASFXVocalizationManagerNativeBase_execAddToIgnoreList_Parms AddToIgnoreList_Parms;
	AddToIgnoreList_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnAddToIgnoreList, &AddToIgnoreList_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManagerNativeBase.GetPawnVocalizationBank
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class USFXVocalizationBank*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                P                              ( CPF_Parm )

class USFXVocalizationBank* ASFXVocalizationManagerNativeBase::eventGetPawnVocalizationBank ( class ABioPawn* P )
{
	static UFunction* pFnGetPawnVocalizationBank = NULL;

	if ( ! pFnGetPawnVocalizationBank )
		pFnGetPawnVocalizationBank = (UFunction*) UObject::GObjObjects()->Data[ 62569 ];

	ASFXVocalizationManagerNativeBase_eventGetPawnVocalizationBank_Parms GetPawnVocalizationBank_Parms;
	GetPawnVocalizationBank_Parms.P = P;

	this->ProcessEvent ( pFnGetPawnVocalizationBank, &GetPawnVocalizationBank_Parms, NULL );

	return GetPawnVocalizationBank_Parms.ReturnValue;
};

// Function SFXGame.SFXVocalizationManagerNativeBase.PlaySFXVocalizationSLineInternal
// [0x00480902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Speaker                        ( CPF_Parm )
// float                          DelaySec                       ( CPF_OptionalParm | CPF_Parm )
// struct FSFXVocalizationEvent   Event                          ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FSFXVocalizationLine    LineToPlay                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ASFXVocalizationManagerNativeBase::eventPlaySFXVocalizationSLineInternal ( class ABioPawn* Speaker, float DelaySec, struct FSFXVocalizationEvent* Event, struct FSFXVocalizationLine* LineToPlay )
{
	static UFunction* pFnPlaySFXVocalizationSLineInternal = NULL;

	if ( ! pFnPlaySFXVocalizationSLineInternal )
		pFnPlaySFXVocalizationSLineInternal = (UFunction*) UObject::GObjObjects()->Data[ 62562 ];

	ASFXVocalizationManagerNativeBase_eventPlaySFXVocalizationSLineInternal_Parms PlaySFXVocalizationSLineInternal_Parms;
	PlaySFXVocalizationSLineInternal_Parms.Speaker = Speaker;
	PlaySFXVocalizationSLineInternal_Parms.DelaySec = DelaySec;

	this->ProcessEvent ( pFnPlaySFXVocalizationSLineInternal, &PlaySFXVocalizationSLineInternal_Parms, NULL );

	if ( Event )
		memcpy ( Event, &PlaySFXVocalizationSLineInternal_Parms.Event, 0x14 );

	if ( LineToPlay )
		memcpy ( LineToPlay, &PlaySFXVocalizationSLineInternal_Parms.LineToPlay, 0x1C );

	return PlaySFXVocalizationSLineInternal_Parms.ReturnValue;
};

// Function SFXGame.BioTierInfo.Retouch
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForce                         ( CPF_Parm )

void UBioTierInfo::Retouch ( unsigned long bForce )
{
	static UFunction* pFnRetouch = NULL;

	if ( ! pFnRetouch )
		pFnRetouch = (UFunction*) UObject::GObjObjects()->Data[ 50285 ];

	UBioTierInfo_execRetouch_Parms Retouch_Parms;
	Retouch_Parms.bForce = bForce;

	pFnRetouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetouch, &Retouch_Parms, NULL );

	pFnRetouch->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierInfo.FindTriggerForPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioTriggerStream*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 pos                            ( CPF_Parm )

class ABioTriggerStream* UBioTierInfo::FindTriggerForPosition ( struct FVector pos )
{
	static UFunction* pFnFindTriggerForPosition = NULL;

	if ( ! pFnFindTriggerForPosition )
		pFnFindTriggerForPosition = (UFunction*) UObject::GObjObjects()->Data[ 50282 ];

	UBioTierInfo_execFindTriggerForPosition_Parms FindTriggerForPosition_Parms;
	memcpy ( &FindTriggerForPosition_Parms.pos, &pos, 0xC );

	pFnFindTriggerForPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindTriggerForPosition, &FindTriggerForPosition_Parms, NULL );

	pFnFindTriggerForPosition->FunctionFlags |= 0x400;

	return FindTriggerForPosition_Parms.ReturnValue;
};

// Function SFXGame.BioTierInfo.GetCurrentTrigger
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioTriggerStream*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  OnlyIfValid                    ( CPF_OptionalParm | CPF_Parm )

class ABioTriggerStream* UBioTierInfo::GetCurrentTrigger ( unsigned long OnlyIfValid )
{
	static UFunction* pFnGetCurrentTrigger = NULL;

	if ( ! pFnGetCurrentTrigger )
		pFnGetCurrentTrigger = (UFunction*) UObject::GObjObjects()->Data[ 50279 ];

	UBioTierInfo_execGetCurrentTrigger_Parms GetCurrentTrigger_Parms;
	GetCurrentTrigger_Parms.OnlyIfValid = OnlyIfValid;

	pFnGetCurrentTrigger->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentTrigger, &GetCurrentTrigger_Parms, NULL );

	pFnGetCurrentTrigger->FunctionFlags |= 0x400;

	return GetCurrentTrigger_Parms.ReturnValue;
};

// Function SFXGame.BioTierInfo.SetCurrentTrigger
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioTriggerStream*       TriggerIn                      ( CPF_Parm )
// unsigned long                  Valid                          ( CPF_OptionalParm | CPF_Parm )

void UBioTierInfo::SetCurrentTrigger ( class ABioTriggerStream* TriggerIn, unsigned long Valid )
{
	static UFunction* pFnSetCurrentTrigger = NULL;

	if ( ! pFnSetCurrentTrigger )
		pFnSetCurrentTrigger = (UFunction*) UObject::GObjObjects()->Data[ 50276 ];

	UBioTierInfo_execSetCurrentTrigger_Parms SetCurrentTrigger_Parms;
	SetCurrentTrigger_Parms.TriggerIn = TriggerIn;
	SetCurrentTrigger_Parms.Valid = Valid;

	pFnSetCurrentTrigger->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCurrentTrigger, &SetCurrentTrigger_Parms, NULL );

	pFnSetCurrentTrigger->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierInfo.RemoveTrigger
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioTriggerStream*       TriggerIn                      ( CPF_Parm )

void UBioTierInfo::RemoveTrigger ( class ABioTriggerStream* TriggerIn )
{
	static UFunction* pFnRemoveTrigger = NULL;

	if ( ! pFnRemoveTrigger )
		pFnRemoveTrigger = (UFunction*) UObject::GObjObjects()->Data[ 50274 ];

	UBioTierInfo_execRemoveTrigger_Parms RemoveTrigger_Parms;
	RemoveTrigger_Parms.TriggerIn = TriggerIn;

	pFnRemoveTrigger->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveTrigger, &RemoveTrigger_Parms, NULL );

	pFnRemoveTrigger->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierInfo.AddTrigger
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioTriggerStream*       TriggerIn                      ( CPF_Parm )

void UBioTierInfo::AddTrigger ( class ABioTriggerStream* TriggerIn )
{
	static UFunction* pFnAddTrigger = NULL;

	if ( ! pFnAddTrigger )
		pFnAddTrigger = (UFunction*) UObject::GObjObjects()->Data[ 50272 ];

	UBioTierInfo_execAddTrigger_Parms AddTrigger_Parms;
	AddTrigger_Parms.TriggerIn = TriggerIn;

	pFnAddTrigger->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTrigger, &AddTrigger_Parms, NULL );

	pFnAddTrigger->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierManager.ConvertPlotStreaming
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// struct FName                   fnVirtualChunk                 ( CPF_Parm )
// TArray< struct FPlotStreamingElement > aRealChunks                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioTierManager::ConvertPlotStreaming ( struct FName fnVirtualChunk, TArray< struct FPlotStreamingElement >* aRealChunks )
{
	static UFunction* pFnConvertPlotStreaming = NULL;

	if ( ! pFnConvertPlotStreaming )
		pFnConvertPlotStreaming = (UFunction*) UObject::GObjObjects()->Data[ 50344 ];

	UBioTierManager_execConvertPlotStreaming_Parms ConvertPlotStreaming_Parms;
	memcpy ( &ConvertPlotStreaming_Parms.fnVirtualChunk, &fnVirtualChunk, 0x8 );

	pFnConvertPlotStreaming->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConvertPlotStreaming, &ConvertPlotStreaming_Parms, NULL );

	pFnConvertPlotStreaming->FunctionFlags |= 0x400;

	if ( aRealChunks )
		memcpy ( aRealChunks, &ConvertPlotStreaming_Parms.aRealChunks, 0xC );
};

// Function SFXGame.BioTierManager.UnregisterPlotStreaming
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FPlotStreamingSet > PlotStreaming                  ( CPF_Parm | CPF_NeedCtorLink )

void UBioTierManager::UnregisterPlotStreaming ( TArray< struct FPlotStreamingSet > PlotStreaming )
{
	static UFunction* pFnUnregisterPlotStreaming = NULL;

	if ( ! pFnUnregisterPlotStreaming )
		pFnUnregisterPlotStreaming = (UFunction*) UObject::GObjObjects()->Data[ 50341 ];

	UBioTierManager_execUnregisterPlotStreaming_Parms UnregisterPlotStreaming_Parms;
	memcpy ( &UnregisterPlotStreaming_Parms.PlotStreaming, &PlotStreaming, 0xC );

	pFnUnregisterPlotStreaming->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterPlotStreaming, &UnregisterPlotStreaming_Parms, NULL );

	pFnUnregisterPlotStreaming->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierManager.RegisterPlotStreaming
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FPlotStreamingSet > PlotStreaming                  ( CPF_Parm | CPF_NeedCtorLink )

void UBioTierManager::RegisterPlotStreaming ( TArray< struct FPlotStreamingSet > PlotStreaming )
{
	static UFunction* pFnRegisterPlotStreaming = NULL;

	if ( ! pFnRegisterPlotStreaming )
		pFnRegisterPlotStreaming = (UFunction*) UObject::GObjObjects()->Data[ 50338 ];

	UBioTierManager_execRegisterPlotStreaming_Parms RegisterPlotStreaming_Parms;
	memcpy ( &RegisterPlotStreaming_Parms.PlotStreaming, &PlotStreaming, 0xC );

	pFnRegisterPlotStreaming->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterPlotStreaming, &RegisterPlotStreaming_Parms, NULL );

	pFnRegisterPlotStreaming->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierManager.ReevaluateStreaming
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForce                         ( CPF_Parm )

void UBioTierManager::ReevaluateStreaming ( unsigned long bForce )
{
	static UFunction* pFnReevaluateStreaming = NULL;

	if ( ! pFnReevaluateStreaming )
		pFnReevaluateStreaming = (UFunction*) UObject::GObjObjects()->Data[ 50336 ];

	UBioTierManager_execReevaluateStreaming_Parms ReevaluateStreaming_Parms;
	ReevaluateStreaming_Parms.bForce = bForce;

	pFnReevaluateStreaming->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReevaluateStreaming, &ReevaluateStreaming_Parms, NULL );

	pFnReevaluateStreaming->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierManager.ForegroundStreamingDone
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// TArray< class USequence* >     Sequences                      ( CPF_Parm | CPF_NeedCtorLink )
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void UBioTierManager::ForegroundStreamingDone ( TArray< class USequence* > Sequences, class APawn* PlayerPawn )
{
	static UFunction* pFnForegroundStreamingDone = NULL;

	if ( ! pFnForegroundStreamingDone )
		pFnForegroundStreamingDone = (UFunction*) UObject::GObjObjects()->Data[ 50332 ];

	UBioTierManager_execForegroundStreamingDone_Parms ForegroundStreamingDone_Parms;
	memcpy ( &ForegroundStreamingDone_Parms.Sequences, &Sequences, 0xC );
	ForegroundStreamingDone_Parms.PlayerPawn = PlayerPawn;

	pFnForegroundStreamingDone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForegroundStreamingDone, &ForegroundStreamingDone_Parms, NULL );

	pFnForegroundStreamingDone->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierManager.BackgroundStreamingDone
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// TArray< class USequence* >     Sequences                      ( CPF_Parm | CPF_NeedCtorLink )
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void UBioTierManager::BackgroundStreamingDone ( TArray< class USequence* > Sequences, class APawn* PlayerPawn )
{
	static UFunction* pFnBackgroundStreamingDone = NULL;

	if ( ! pFnBackgroundStreamingDone )
		pFnBackgroundStreamingDone = (UFunction*) UObject::GObjObjects()->Data[ 50328 ];

	UBioTierManager_execBackgroundStreamingDone_Parms BackgroundStreamingDone_Parms;
	memcpy ( &BackgroundStreamingDone_Parms.Sequences, &Sequences, 0xC );
	BackgroundStreamingDone_Parms.PlayerPawn = PlayerPawn;

	pFnBackgroundStreamingDone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBackgroundStreamingDone, &BackgroundStreamingDone_Parms, NULL );

	pFnBackgroundStreamingDone->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierManager.RemoveTrigger
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class ABioTriggerStream*       TriggerIn                      ( CPF_Parm )

void UBioTierManager::RemoveTrigger ( class ABioTriggerStream* TriggerIn )
{
	static UFunction* pFnRemoveTrigger = NULL;

	if ( ! pFnRemoveTrigger )
		pFnRemoveTrigger = (UFunction*) UObject::GObjObjects()->Data[ 50326 ];

	UBioTierManager_execRemoveTrigger_Parms RemoveTrigger_Parms;
	RemoveTrigger_Parms.TriggerIn = TriggerIn;

	pFnRemoveTrigger->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveTrigger, &RemoveTrigger_Parms, NULL );

	pFnRemoveTrigger->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierManager.SetTierByIndex
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  TierIndex                      ( CPF_Parm )
// class ABioTriggerStream*       TriggerIn                      ( CPF_Parm )

void UBioTierManager::SetTierByIndex ( unsigned char TierIndex, class ABioTriggerStream* TriggerIn )
{
	static UFunction* pFnSetTierByIndex = NULL;

	if ( ! pFnSetTierByIndex )
		pFnSetTierByIndex = (UFunction*) UObject::GObjObjects()->Data[ 50323 ];

	UBioTierManager_execSetTierByIndex_Parms SetTierByIndex_Parms;
	SetTierByIndex_Parms.TierIndex = TierIndex;
	SetTierByIndex_Parms.TriggerIn = TriggerIn;

	pFnSetTierByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTierByIndex, &SetTierByIndex_Parms, NULL );

	pFnSetTierByIndex->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierManager.SetTierByName
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// struct FName                   TierNameIn                     ( CPF_Parm )
// class ABioTriggerStream*       TriggerIn                      ( CPF_Parm )

void UBioTierManager::SetTierByName ( struct FName TierNameIn, class ABioTriggerStream* TriggerIn )
{
	static UFunction* pFnSetTierByName = NULL;

	if ( ! pFnSetTierByName )
		pFnSetTierByName = (UFunction*) UObject::GObjObjects()->Data[ 50320 ];

	UBioTierManager_execSetTierByName_Parms SetTierByName_Parms;
	memcpy ( &SetTierByName_Parms.TierNameIn, &TierNameIn, 0x8 );
	SetTierByName_Parms.TriggerIn = TriggerIn;

	pFnSetTierByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTierByName, &SetTierByName_Parms, NULL );

	pFnSetTierByName->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierManager.GetTierIndex
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   TierNameIn                     ( CPF_Parm )

unsigned char UBioTierManager::GetTierIndex ( struct FName TierNameIn )
{
	static UFunction* pFnGetTierIndex = NULL;

	if ( ! pFnGetTierIndex )
		pFnGetTierIndex = (UFunction*) UObject::GObjObjects()->Data[ 50317 ];

	UBioTierManager_execGetTierIndex_Parms GetTierIndex_Parms;
	memcpy ( &GetTierIndex_Parms.TierNameIn, &TierNameIn, 0x8 );

	pFnGetTierIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTierIndex, &GetTierIndex_Parms, NULL );

	pFnGetTierIndex->FunctionFlags |= 0x400;

	return GetTierIndex_Parms.ReturnValue;
};

// Function SFXGame.BioTierManager.GetDefaultTier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioTierInfo*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioTierInfo* UBioTierManager::GetDefaultTier ( )
{
	static UFunction* pFnGetDefaultTier = NULL;

	if ( ! pFnGetDefaultTier )
		pFnGetDefaultTier = (UFunction*) UObject::GObjObjects()->Data[ 50315 ];

	UBioTierManager_execGetDefaultTier_Parms GetDefaultTier_Parms;

	pFnGetDefaultTier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultTier, &GetDefaultTier_Parms, NULL );

	pFnGetDefaultTier->FunctionFlags |= 0x400;

	return GetDefaultTier_Parms.ReturnValue;
};

// Function SFXGame.BioTierManager.GetFloorTier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioTierInfo*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioTierInfo* UBioTierManager::GetFloorTier ( )
{
	static UFunction* pFnGetFloorTier = NULL;

	if ( ! pFnGetFloorTier )
		pFnGetFloorTier = (UFunction*) UObject::GObjObjects()->Data[ 50313 ];

	UBioTierManager_execGetFloorTier_Parms GetFloorTier_Parms;

	pFnGetFloorTier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloorTier, &GetFloorTier_Parms, NULL );

	pFnGetFloorTier->FunctionFlags |= 0x400;

	return GetFloorTier_Parms.ReturnValue;
};

// Function SFXGame.BioTierManager.GetTier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioTierInfo*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Index                          ( CPF_Parm )

class UBioTierInfo* UBioTierManager::GetTier ( unsigned char Index )
{
	static UFunction* pFnGetTier = NULL;

	if ( ! pFnGetTier )
		pFnGetTier = (UFunction*) UObject::GObjObjects()->Data[ 50310 ];

	UBioTierManager_execGetTier_Parms GetTier_Parms;
	GetTier_Parms.Index = Index;

	pFnGetTier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTier, &GetTier_Parms, NULL );

	pFnGetTier->FunctionFlags |= 0x400;

	return GetTier_Parms.ReturnValue;
};

// Function SFXGame.BioTierManager.Retouch
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForce                         ( CPF_Parm )

void UBioTierManager::Retouch ( unsigned long bForce )
{
	static UFunction* pFnRetouch = NULL;

	if ( ! pFnRetouch )
		pFnRetouch = (UFunction*) UObject::GObjObjects()->Data[ 50308 ];

	UBioTierManager_execRetouch_Parms Retouch_Parms;
	Retouch_Parms.bForce = bForce;

	pFnRetouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetouch, &Retouch_Parms, NULL );

	pFnRetouch->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierManager.ClearCurrentTriggers
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UBioTierManager::ClearCurrentTriggers ( )
{
	static UFunction* pFnClearCurrentTriggers = NULL;

	if ( ! pFnClearCurrentTriggers )
		pFnClearCurrentTriggers = (UFunction*) UObject::GObjObjects()->Data[ 50307 ];

	UBioTierManager_execClearCurrentTriggers_Parms ClearCurrentTriggers_Parms;

	pFnClearCurrentTriggers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearCurrentTriggers, &ClearCurrentTriggers_Parms, NULL );

	pFnClearCurrentTriggers->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTierManager.GetTierName
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Index                          ( CPF_Parm )

struct FName UBioTierManager::GetTierName ( unsigned char Index )
{
	static UFunction* pFnGetTierName = NULL;

	if ( ! pFnGetTierName )
		pFnGetTierName = (UFunction*) UObject::GObjObjects()->Data[ 50304 ];

	UBioTierManager_execGetTierName_Parms GetTierName_Parms;
	GetTierName_Parms.Index = Index;

	pFnGetTierName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTierName, &GetTierName_Parms, NULL );

	pFnGetTierName->FunctionFlags |= 0x400;

	return GetTierName_Parms.ReturnValue;
};

// Function SFXGame.BioTierManager.GetNumTiers
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UBioTierManager::GetNumTiers ( )
{
	static UFunction* pFnGetNumTiers = NULL;

	if ( ! pFnGetNumTiers )
		pFnGetNumTiers = (UFunction*) UObject::GObjObjects()->Data[ 50302 ];

	UBioTierManager_execGetNumTiers_Parms GetNumTiers_Parms;

	pFnGetNumTiers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumTiers, &GetNumTiers_Parms, NULL );

	pFnGetNumTiers->FunctionFlags |= 0x400;

	return GetNumTiers_Parms.ReturnValue;
};

// Function SFXGame.BioTriggerStream.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ABioTriggerStream::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 50445 ];

	ABioTriggerStream_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function SFXGame.BioTriggerStream.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ABioTriggerStream::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 50439 ];

	ABioTriggerStream_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function SFXGame.BioTriggerStream.ForegroundStreamingDone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< class USequence* >     Sequences                      ( CPF_Parm | CPF_NeedCtorLink )
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void ABioTriggerStream::ForegroundStreamingDone ( TArray< class USequence* > Sequences, class APawn* PlayerPawn )
{
	static UFunction* pFnForegroundStreamingDone = NULL;

	if ( ! pFnForegroundStreamingDone )
		pFnForegroundStreamingDone = (UFunction*) UObject::GObjObjects()->Data[ 50435 ];

	ABioTriggerStream_execForegroundStreamingDone_Parms ForegroundStreamingDone_Parms;
	memcpy ( &ForegroundStreamingDone_Parms.Sequences, &Sequences, 0xC );
	ForegroundStreamingDone_Parms.PlayerPawn = PlayerPawn;

	pFnForegroundStreamingDone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForegroundStreamingDone, &ForegroundStreamingDone_Parms, NULL );

	pFnForegroundStreamingDone->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTriggerStream.BackgroundStreamingDone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< class USequence* >     Sequences                      ( CPF_Parm | CPF_NeedCtorLink )
// class APawn*                   PlayerPawn                     ( CPF_Parm )

void ABioTriggerStream::BackgroundStreamingDone ( TArray< class USequence* > Sequences, class APawn* PlayerPawn )
{
	static UFunction* pFnBackgroundStreamingDone = NULL;

	if ( ! pFnBackgroundStreamingDone )
		pFnBackgroundStreamingDone = (UFunction*) UObject::GObjObjects()->Data[ 50431 ];

	ABioTriggerStream_execBackgroundStreamingDone_Parms BackgroundStreamingDone_Parms;
	memcpy ( &BackgroundStreamingDone_Parms.Sequences, &Sequences, 0xC );
	BackgroundStreamingDone_Parms.PlayerPawn = PlayerPawn;

	pFnBackgroundStreamingDone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBackgroundStreamingDone, &BackgroundStreamingDone_Parms, NULL );

	pFnBackgroundStreamingDone->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTriggerStream.Retouch
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bForce                         ( CPF_Parm )

void ABioTriggerStream::Retouch ( unsigned long bForce )
{
	static UFunction* pFnRetouch = NULL;

	if ( ! pFnRetouch )
		pFnRetouch = (UFunction*) UObject::GObjObjects()->Data[ 50429 ];

	ABioTriggerStream_execRetouch_Parms Retouch_Parms;
	Retouch_Parms.bForce = bForce;

	pFnRetouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetouch, &Retouch_Parms, NULL );

	pFnRetouch->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTriggerStream.DoStasis
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  Touched                        ( CPF_Parm )
// unsigned long                  bTouched                       ( CPF_Parm )

void ABioTriggerStream::DoStasis ( class AActor* Touched, unsigned long bTouched )
{
	static UFunction* pFnDoStasis = NULL;

	if ( ! pFnDoStasis )
		pFnDoStasis = (UFunction*) UObject::GObjObjects()->Data[ 50426 ];

	ABioTriggerStream_execDoStasis_Parms DoStasis_Parms;
	DoStasis_Parms.Touched = Touched;
	DoStasis_Parms.bTouched = bTouched;

	pFnDoStasis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoStasis, &DoStasis_Parms, NULL );

	pFnDoStasis->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTriggerStream.DoUntouch
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ABioTriggerStream::DoUntouch ( class AActor* Other )
{
	static UFunction* pFnDoUntouch = NULL;

	if ( ! pFnDoUntouch )
		pFnDoUntouch = (UFunction*) UObject::GObjObjects()->Data[ 50424 ];

	ABioTriggerStream_execDoUntouch_Parms DoUntouch_Parms;
	DoUntouch_Parms.Other = Other;

	pFnDoUntouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoUntouch, &DoUntouch_Parms, NULL );

	pFnDoUntouch->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTriggerStream.DoTouch
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioTriggerStream::DoTouch ( )
{
	static UFunction* pFnDoTouch = NULL;

	if ( ! pFnDoTouch )
		pFnDoTouch = (UFunction*) UObject::GObjObjects()->Data[ 50423 ];

	ABioTriggerStream_execDoTouch_Parms DoTouch_Parms;

	pFnDoTouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoTouch, &DoTouch_Parms, NULL );

	pFnDoTouch->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.SetPlayersControllerId
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULocalPlayer*            Player                         ( CPF_Parm )
// int                            ControllerId                   ( CPF_Parm )

void ABioWorldInfo::eventSetPlayersControllerId ( class ULocalPlayer* Player, int ControllerId )
{
	static UFunction* pFnSetPlayersControllerId = NULL;

	if ( ! pFnSetPlayersControllerId )
		pFnSetPlayersControllerId = (UFunction*) UObject::GObjObjects()->Data[ 51332 ];

	ABioWorldInfo_eventSetPlayersControllerId_Parms SetPlayersControllerId_Parms;
	SetPlayersControllerId_Parms.Player = Player;
	SetPlayersControllerId_Parms.ControllerId = ControllerId;

	this->ProcessEvent ( pFnSetPlayersControllerId, &SetPlayersControllerId_Parms, NULL );
};

// Function SFXGame.BioWorldInfo.GetGLogger
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UBioRemoteLogger*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioRemoteLogger* ABioWorldInfo::GetGLogger ( )
{
	static UFunction* pFnGetGLogger = NULL;

	if ( ! pFnGetGLogger )
		pFnGetGLogger = (UFunction*) UObject::GObjObjects()->Data[ 51330 ];

	ABioWorldInfo_execGetGLogger_Parms GetGLogger_Parms;

	this->ProcessEvent ( pFnGetGLogger, &GetGLogger_Parms, NULL );

	return GetGLogger_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.ClearBrowserWheelStateOverride
// [0x00020002] 
// Parameters infos:

void ABioWorldInfo::ClearBrowserWheelStateOverride ( )
{
	static UFunction* pFnClearBrowserWheelStateOverride = NULL;

	if ( ! pFnClearBrowserWheelStateOverride )
		pFnClearBrowserWheelStateOverride = (UFunction*) UObject::GObjObjects()->Data[ 51329 ];

	ABioWorldInfo_execClearBrowserWheelStateOverride_Parms ClearBrowserWheelStateOverride_Parms;

	this->ProcessEvent ( pFnClearBrowserWheelStateOverride, &ClearBrowserWheelStateOverride_Parms, NULL );
};

// Function SFXGame.BioWorldInfo.AddBrowserWheelStateOverride
// [0x00020002] 
// Parameters infos:
// struct FSubPageState           i_SubStateOverride             ( CPF_Parm )

void ABioWorldInfo::AddBrowserWheelStateOverride ( struct FSubPageState i_SubStateOverride )
{
	static UFunction* pFnAddBrowserWheelStateOverride = NULL;

	if ( ! pFnAddBrowserWheelStateOverride )
		pFnAddBrowserWheelStateOverride = (UFunction*) UObject::GObjObjects()->Data[ 51327 ];

	ABioWorldInfo_execAddBrowserWheelStateOverride_Parms AddBrowserWheelStateOverride_Parms;
	memcpy ( &AddBrowserWheelStateOverride_Parms.i_SubStateOverride, &i_SubStateOverride, 0x8 );

	this->ProcessEvent ( pFnAddBrowserWheelStateOverride, &AddBrowserWheelStateOverride_Parms, NULL );
};

// Function SFXGame.BioWorldInfo.StartMatch
// [0x00020002] 
// Parameters infos:

void ABioWorldInfo::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = (UFunction*) UObject::GObjObjects()->Data[ 51321 ];

	ABioWorldInfo_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function SFXGame.BioWorldInfo.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ABioWorldInfo::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 51319 ];

	ABioWorldInfo_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.GetGlobalEvents
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class UClass*                  EventClass                     ( CPF_Parm )
// TArray< class USequenceEvent* > aEvents                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ABioWorldInfo::GetGlobalEvents ( class UClass* EventClass, TArray< class USequenceEvent* >* aEvents )
{
	static UFunction* pFnGetGlobalEvents = NULL;

	if ( ! pFnGetGlobalEvents )
		pFnGetGlobalEvents = (UFunction*) UObject::GObjObjects()->Data[ 51315 ];

	ABioWorldInfo_execGetGlobalEvents_Parms GetGlobalEvents_Parms;
	GetGlobalEvents_Parms.EventClass = EventClass;

	pFnGetGlobalEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGlobalEvents, &GetGlobalEvents_Parms, NULL );

	pFnGetGlobalEvents->FunctionFlags |= 0x400;

	if ( aEvents )
		memcpy ( aEvents, &GetGlobalEvents_Parms.aEvents, 0xC );
};

// Function SFXGame.BioWorldInfo.SetRenderStateOfPlayerToDefault
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  RenderState                    ( CPF_Parm )

void ABioWorldInfo::SetRenderStateOfPlayerToDefault ( unsigned char RenderState )
{
	static UFunction* pFnSetRenderStateOfPlayerToDefault = NULL;

	if ( ! pFnSetRenderStateOfPlayerToDefault )
		pFnSetRenderStateOfPlayerToDefault = (UFunction*) UObject::GObjObjects()->Data[ 51313 ];

	ABioWorldInfo_execSetRenderStateOfPlayerToDefault_Parms SetRenderStateOfPlayerToDefault_Parms;
	SetRenderStateOfPlayerToDefault_Parms.RenderState = RenderState;

	pFnSetRenderStateOfPlayerToDefault->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRenderStateOfPlayerToDefault, &SetRenderStateOfPlayerToDefault_Parms, NULL );

	pFnSetRenderStateOfPlayerToDefault->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.SetRenderStateOfPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  RenderState                    ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )

void ABioWorldInfo::SetRenderStateOfPlayer ( unsigned char RenderState, float fValue )
{
	static UFunction* pFnSetRenderStateOfPlayer = NULL;

	if ( ! pFnSetRenderStateOfPlayer )
		pFnSetRenderStateOfPlayer = (UFunction*) UObject::GObjObjects()->Data[ 51310 ];

	ABioWorldInfo_execSetRenderStateOfPlayer_Parms SetRenderStateOfPlayer_Parms;
	SetRenderStateOfPlayer_Parms.RenderState = RenderState;
	SetRenderStateOfPlayer_Parms.fValue = fValue;

	pFnSetRenderStateOfPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRenderStateOfPlayer, &SetRenderStateOfPlayer_Parms, NULL );

	pFnSetRenderStateOfPlayer->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.GetRenderStateOfPlayer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  RenderState                    ( CPF_Parm )

float ABioWorldInfo::GetRenderStateOfPlayer ( unsigned char RenderState )
{
	static UFunction* pFnGetRenderStateOfPlayer = NULL;

	if ( ! pFnGetRenderStateOfPlayer )
		pFnGetRenderStateOfPlayer = (UFunction*) UObject::GObjObjects()->Data[ 51307 ];

	ABioWorldInfo_execGetRenderStateOfPlayer_Parms GetRenderStateOfPlayer_Parms;
	GetRenderStateOfPlayer_Parms.RenderState = RenderState;

	pFnGetRenderStateOfPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRenderStateOfPlayer, &GetRenderStateOfPlayer_Parms, NULL );

	pFnGetRenderStateOfPlayer->FunctionFlags |= 0x400;

	return GetRenderStateOfPlayer_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.UpdateEnvironmentEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void ABioWorldInfo::UpdateEnvironmentEffects ( float fDeltaT )
{
	static UFunction* pFnUpdateEnvironmentEffects = NULL;

	if ( ! pFnUpdateEnvironmentEffects )
		pFnUpdateEnvironmentEffects = (UFunction*) UObject::GObjObjects()->Data[ 51305 ];

	ABioWorldInfo_execUpdateEnvironmentEffects_Parms UpdateEnvironmentEffects_Parms;
	UpdateEnvironmentEffects_Parms.fDeltaT = fDeltaT;

	pFnUpdateEnvironmentEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateEnvironmentEffects, &UpdateEnvironmentEffects_Parms, NULL );

	pFnUpdateEnvironmentEffects->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.UpdateSubtitles
// [0x00020002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void ABioWorldInfo::UpdateSubtitles ( float fDeltaT )
{
	static UFunction* pFnUpdateSubtitles = NULL;

	if ( ! pFnUpdateSubtitles )
		pFnUpdateSubtitles = (UFunction*) UObject::GObjObjects()->Data[ 51303 ];

	ABioWorldInfo_execUpdateSubtitles_Parms UpdateSubtitles_Parms;
	UpdateSubtitles_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateSubtitles, &UpdateSubtitles_Parms, NULL );
};

// Function SFXGame.BioWorldInfo.GetSubtitles
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioSubtitles*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSubtitles* ABioWorldInfo::GetSubtitles ( )
{
	static UFunction* pFnGetSubtitles = NULL;

	if ( ! pFnGetSubtitles )
		pFnGetSubtitles = (UFunction*) UObject::GObjObjects()->Data[ 51301 ];

	ABioWorldInfo_execGetSubtitles_Parms GetSubtitles_Parms;

	pFnGetSubtitles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSubtitles, &GetSubtitles_Parms, NULL );

	pFnGetSubtitles->FunctionFlags |= 0x400;

	return GetSubtitles_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.SetGlobalTlk
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bMale                          ( CPF_Parm )
// unsigned long                  bPurge                         ( CPF_OptionalParm | CPF_Parm )

void ABioWorldInfo::SetGlobalTlk ( unsigned long bMale, unsigned long bPurge )
{
	static UFunction* pFnSetGlobalTlk = NULL;

	if ( ! pFnSetGlobalTlk )
		pFnSetGlobalTlk = (UFunction*) UObject::GObjObjects()->Data[ 51298 ];

	ABioWorldInfo_execSetGlobalTlk_Parms SetGlobalTlk_Parms;
	SetGlobalTlk_Parms.bMale = bMale;
	SetGlobalTlk_Parms.bPurge = bPurge;

	pFnSetGlobalTlk->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGlobalTlk, &SetGlobalTlk_Parms, NULL );

	pFnSetGlobalTlk->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ABioWorldInfo::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 51297 ];

	ABioWorldInfo_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.BioWorldInfo.CheckState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nState                         ( CPF_Parm )

bool ABioWorldInfo::eventCheckState ( int nState )
{
	static UFunction* pFnCheckState = NULL;

	if ( ! pFnCheckState )
		pFnCheckState = (UFunction*) UObject::GObjObjects()->Data[ 51293 ];

	ABioWorldInfo_eventCheckState_Parms CheckState_Parms;
	CheckState_Parms.nState = nState;

	this->ProcessEvent ( pFnCheckState, &CheckState_Parms, NULL );

	return CheckState_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.InterruptConversation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioConversation*        oConv                          ( CPF_OptionalParm | CPF_Parm )

void ABioWorldInfo::InterruptConversation ( class UBioConversation* oConv )
{
	static UFunction* pFnInterruptConversation = NULL;

	if ( ! pFnInterruptConversation )
		pFnInterruptConversation = (UFunction*) UObject::GObjObjects()->Data[ 51291 ];

	ABioWorldInfo_execInterruptConversation_Parms InterruptConversation_Parms;
	InterruptConversation_Parms.oConv = oConv;

	pFnInterruptConversation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInterruptConversation, &InterruptConversation_Parms, NULL );

	pFnInterruptConversation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.UpdateConversation
// [0x00020002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void ABioWorldInfo::UpdateConversation ( float fDeltaT )
{
	static UFunction* pFnUpdateConversation = NULL;

	if ( ! pFnUpdateConversation )
		pFnUpdateConversation = (UFunction*) UObject::GObjObjects()->Data[ 51289 ];

	ABioWorldInfo_execUpdateConversation_Parms UpdateConversation_Parms;
	UpdateConversation_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateConversation, &UpdateConversation_Parms, NULL );
};

// Function SFXGame.BioWorldInfo.EndCurrentFaceOnlyVO
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioSeqAct_FaceOnlyVO*   pFOVO                          ( CPF_Parm )

void ABioWorldInfo::EndCurrentFaceOnlyVO ( class UBioSeqAct_FaceOnlyVO* pFOVO )
{
	static UFunction* pFnEndCurrentFaceOnlyVO = NULL;

	if ( ! pFnEndCurrentFaceOnlyVO )
		pFnEndCurrentFaceOnlyVO = (UFunction*) UObject::GObjObjects()->Data[ 51287 ];

	ABioWorldInfo_execEndCurrentFaceOnlyVO_Parms EndCurrentFaceOnlyVO_Parms;
	EndCurrentFaceOnlyVO_Parms.pFOVO = pFOVO;

	pFnEndCurrentFaceOnlyVO->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndCurrentFaceOnlyVO, &EndCurrentFaceOnlyVO_Parms, NULL );

	pFnEndCurrentFaceOnlyVO->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.EndCurrentConversation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioWorldInfo::EndCurrentConversation ( )
{
	static UFunction* pFnEndCurrentConversation = NULL;

	if ( ! pFnEndCurrentConversation )
		pFnEndCurrentConversation = (UFunction*) UObject::GObjObjects()->Data[ 51286 ];

	ABioWorldInfo_execEndCurrentConversation_Parms EndCurrentConversation_Parms;

	pFnEndCurrentConversation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndCurrentConversation, &EndCurrentConversation_Parms, NULL );

	pFnEndCurrentConversation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.StartConversation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioConversation*        oConv                          ( CPF_Parm )
// class AActor*                  Owner_                         ( CPF_Parm )
// class AActor*                  Target                         ( CPF_Parm )

bool ABioWorldInfo::StartConversation ( class UBioConversation* oConv, class AActor* Owner_, class AActor* Target )
{
	static UFunction* pFnStartConversation = NULL;

	if ( ! pFnStartConversation )
		pFnStartConversation = (UFunction*) UObject::GObjObjects()->Data[ 51281 ];

	ABioWorldInfo_execStartConversation_Parms StartConversation_Parms;
	StartConversation_Parms.oConv = oConv;
	StartConversation_Parms.Owner_ = Owner_;
	StartConversation_Parms.Target = Target;

	pFnStartConversation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartConversation, &StartConversation_Parms, NULL );

	pFnStartConversation->FunctionFlags |= 0x400;

	return StartConversation_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.GetConversation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioConversation*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioConversation* ABioWorldInfo::eventGetConversation ( )
{
	static UFunction* pFnGetConversation = NULL;

	if ( ! pFnGetConversation )
		pFnGetConversation = (UFunction*) UObject::GObjObjects()->Data[ 51279 ];

	ABioWorldInfo_eventGetConversation_Parms GetConversation_Parms;

	this->ProcessEvent ( pFnGetConversation, &GetConversation_Parms, NULL );

	return GetConversation_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.ClearCurrentGame
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioWorldInfo::eventClearCurrentGame ( )
{
	static UFunction* pFnClearCurrentGame = NULL;

	if ( ! pFnClearCurrentGame )
		pFnClearCurrentGame = (UFunction*) UObject::GObjObjects()->Data[ 51278 ];

	ABioWorldInfo_eventClearCurrentGame_Parms ClearCurrentGame_Parms;

	this->ProcessEvent ( pFnClearCurrentGame, &ClearCurrentGame_Parms, NULL );
};

// Function SFXGame.BioWorldInfo.GetGlobalVariables
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioGlobalVariableTable* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioGlobalVariableTable* ABioWorldInfo::GetGlobalVariables ( )
{
	static UFunction* pFnGetGlobalVariables = NULL;

	if ( ! pFnGetGlobalVariables )
		pFnGetGlobalVariables = (UFunction*) UObject::GObjObjects()->Data[ 51276 ];

	ABioWorldInfo_execGetGlobalVariables_Parms GetGlobalVariables_Parms;

	pFnGetGlobalVariables->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGlobalVariables, &GetGlobalVariables_Parms, NULL );

	pFnGetGlobalVariables->FunctionFlags |= 0x400;

	return GetGlobalVariables_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.InitDownloadableContent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bFinalAttempt                  ( CPF_Parm )

void ABioWorldInfo::InitDownloadableContent ( unsigned long bFinalAttempt )
{
	static UFunction* pFnInitDownloadableContent = NULL;

	if ( ! pFnInitDownloadableContent )
		pFnInitDownloadableContent = (UFunction*) UObject::GObjObjects()->Data[ 51274 ];

	ABioWorldInfo_execInitDownloadableContent_Parms InitDownloadableContent_Parms;
	InitDownloadableContent_Parms.bFinalAttempt = bFinalAttempt;

	pFnInitDownloadableContent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitDownloadableContent, &InitDownloadableContent_Parms, NULL );

	pFnInitDownloadableContent->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.Tick
// [0x00020002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void ABioWorldInfo::Tick ( float fDeltaT )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 51272 ];

	ABioWorldInfo_execTick_Parms Tick_Parms;
	Tick_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.BioWorldInfo.GetLocalPlayerController
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPlayerController*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ABioPlayerController* ABioWorldInfo::GetLocalPlayerController ( )
{
	static UFunction* pFnGetLocalPlayerController = NULL;

	if ( ! pFnGetLocalPlayerController )
		pFnGetLocalPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 51270 ];

	ABioWorldInfo_execGetLocalPlayerController_Parms GetLocalPlayerController_Parms;

	pFnGetLocalPlayerController->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocalPlayerController, &GetLocalPlayerController_Parms, NULL );

	pFnGetLocalPlayerController->FunctionFlags |= 0x400;

	return GetLocalPlayerController_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.GetCurrentStreamingChunkName
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmStreamingChunkName           ( CPF_Parm | CPF_OutParm )

bool ABioWorldInfo::GetCurrentStreamingChunkName ( struct FName* nmStreamingChunkName )
{
	static UFunction* pFnGetCurrentStreamingChunkName = NULL;

	if ( ! pFnGetCurrentStreamingChunkName )
		pFnGetCurrentStreamingChunkName = (UFunction*) UObject::GObjObjects()->Data[ 42360 ];

	ABioWorldInfo_execGetCurrentStreamingChunkName_Parms GetCurrentStreamingChunkName_Parms;

	pFnGetCurrentStreamingChunkName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentStreamingChunkName, &GetCurrentStreamingChunkName_Parms, NULL );

	pFnGetCurrentStreamingChunkName->FunctionFlags |= 0x400;

	if ( nmStreamingChunkName )
		memcpy ( nmStreamingChunkName, &GetCurrentStreamingChunkName_Parms.nmStreamingChunkName, 0x8 );

	return GetCurrentStreamingChunkName_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.PlayEndGameMusic
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ABioWorldInfo::PlayEndGameMusic ( )
{
	static UFunction* pFnPlayEndGameMusic = NULL;

	if ( ! pFnPlayEndGameMusic )
		pFnPlayEndGameMusic = (UFunction*) UObject::GObjObjects()->Data[ 49871 ];

	ABioWorldInfo_execPlayEndGameMusic_Parms PlayEndGameMusic_Parms;

	pFnPlayEndGameMusic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayEndGameMusic, &PlayEndGameMusic_Parms, NULL );

	pFnPlayEndGameMusic->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.UpdateVFXPools
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void ABioWorldInfo::UpdateVFXPools ( float fDeltaT )
{
	static UFunction* pFnUpdateVFXPools = NULL;

	if ( ! pFnUpdateVFXPools )
		pFnUpdateVFXPools = (UFunction*) UObject::GObjObjects()->Data[ 51266 ];

	ABioWorldInfo_execUpdateVFXPools_Parms UpdateVFXPools_Parms;
	UpdateVFXPools_Parms.fDeltaT = fDeltaT;

	pFnUpdateVFXPools->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateVFXPools, &UpdateVFXPools_Parms, NULL );

	pFnUpdateVFXPools->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.UpdateVFXStats
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void ABioWorldInfo::UpdateVFXStats ( float fDeltaT )
{
	static UFunction* pFnUpdateVFXStats = NULL;

	if ( ! pFnUpdateVFXStats )
		pFnUpdateVFXStats = (UFunction*) UObject::GObjObjects()->Data[ 51264 ];

	ABioWorldInfo_execUpdateVFXStats_Parms UpdateVFXStats_Parms;
	UpdateVFXStats_Parms.fDeltaT = fDeltaT;

	pFnUpdateVFXStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateVFXStats, &UpdateVFXStats_Parms, NULL );

	pFnUpdateVFXStats->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.OverrideVFXPoolSize
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioVFXTemplate*         a_pEffect                      ( CPF_Parm )
// int                            a_nMaxPoolSize                 ( CPF_Parm )
// int                            a_nMinPoolSize                 ( CPF_Parm )

void ABioWorldInfo::OverrideVFXPoolSize ( class UBioVFXTemplate* a_pEffect, int a_nMaxPoolSize, int a_nMinPoolSize )
{
	static UFunction* pFnOverrideVFXPoolSize = NULL;

	if ( ! pFnOverrideVFXPoolSize )
		pFnOverrideVFXPoolSize = (UFunction*) UObject::GObjObjects()->Data[ 51260 ];

	ABioWorldInfo_execOverrideVFXPoolSize_Parms OverrideVFXPoolSize_Parms;
	OverrideVFXPoolSize_Parms.a_pEffect = a_pEffect;
	OverrideVFXPoolSize_Parms.a_nMaxPoolSize = a_nMaxPoolSize;
	OverrideVFXPoolSize_Parms.a_nMinPoolSize = a_nMinPoolSize;

	pFnOverrideVFXPoolSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOverrideVFXPoolSize, &OverrideVFXPoolSize_Parms, NULL );

	pFnOverrideVFXPoolSize->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.GetDefaultVFXPoolSize
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class UBioVFXTemplate*         a_pEffect                      ( CPF_Parm )
// int                            a_rnMaxPoolSize                ( CPF_Parm | CPF_OutParm )
// int                            a_rnMinPoolSize                ( CPF_Parm | CPF_OutParm )

void ABioWorldInfo::GetDefaultVFXPoolSize ( class UBioVFXTemplate* a_pEffect, int* a_rnMaxPoolSize, int* a_rnMinPoolSize )
{
	static UFunction* pFnGetDefaultVFXPoolSize = NULL;

	if ( ! pFnGetDefaultVFXPoolSize )
		pFnGetDefaultVFXPoolSize = (UFunction*) UObject::GObjObjects()->Data[ 51256 ];

	ABioWorldInfo_execGetDefaultVFXPoolSize_Parms GetDefaultVFXPoolSize_Parms;
	GetDefaultVFXPoolSize_Parms.a_pEffect = a_pEffect;

	pFnGetDefaultVFXPoolSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultVFXPoolSize, &GetDefaultVFXPoolSize_Parms, NULL );

	pFnGetDefaultVFXPoolSize->FunctionFlags |= 0x400;

	if ( a_rnMaxPoolSize )
		*a_rnMaxPoolSize = GetDefaultVFXPoolSize_Parms.a_rnMaxPoolSize;

	if ( a_rnMinPoolSize )
		*a_rnMinPoolSize = GetDefaultVFXPoolSize_Parms.a_rnMinPoolSize;
};

// Function SFXGame.BioWorldInfo.GetVFXPool
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioVisualEffectPool*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioVFXTemplate*         pEffect                        ( CPF_Parm )

class UBioVisualEffectPool* ABioWorldInfo::GetVFXPool ( class UBioVFXTemplate* pEffect )
{
	static UFunction* pFnGetVFXPool = NULL;

	if ( ! pFnGetVFXPool )
		pFnGetVFXPool = (UFunction*) UObject::GObjObjects()->Data[ 51253 ];

	ABioWorldInfo_execGetVFXPool_Parms GetVFXPool_Parms;
	GetVFXPool_Parms.pEffect = pEffect;

	pFnGetVFXPool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVFXPool, &GetVFXPool_Parms, NULL );

	pFnGetVFXPool->FunctionFlags |= 0x400;

	return GetVFXPool_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.OnGameLoaded
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ABioWorldInfo::OnGameLoaded ( )
{
	static UFunction* pFnOnGameLoaded = NULL;

	if ( ! pFnOnGameLoaded )
		pFnOnGameLoaded = (UFunction*) UObject::GObjObjects()->Data[ 51252 ];

	ABioWorldInfo_execOnGameLoaded_Parms OnGameLoaded_Parms;

	pFnOnGameLoaded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnGameLoaded, &OnGameLoaded_Parms, NULL );

	pFnOnGameLoaded->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.GetDetailedVersionString
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ABioWorldInfo::GetDetailedVersionString ( )
{
	static UFunction* pFnGetDetailedVersionString = NULL;

	if ( ! pFnGetDetailedVersionString )
		pFnGetDetailedVersionString = (UFunction*) UObject::GObjObjects()->Data[ 51250 ];

	ABioWorldInfo_execGetDetailedVersionString_Parms GetDetailedVersionString_Parms;

	pFnGetDetailedVersionString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDetailedVersionString, &GetDetailedVersionString_Parms, NULL );

	pFnGetDetailedVersionString->FunctionFlags |= 0x400;

	return GetDetailedVersionString_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.GetEpicVersionString
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ABioWorldInfo::GetEpicVersionString ( )
{
	static UFunction* pFnGetEpicVersionString = NULL;

	if ( ! pFnGetEpicVersionString )
		pFnGetEpicVersionString = (UFunction*) UObject::GObjObjects()->Data[ 51248 ];

	ABioWorldInfo_execGetEpicVersionString_Parms GetEpicVersionString_Parms;

	pFnGetEpicVersionString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEpicVersionString, &GetEpicVersionString_Parms, NULL );

	pFnGetEpicVersionString->FunctionFlags |= 0x400;

	return GetEpicVersionString_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.GetVersionString
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ABioWorldInfo::GetVersionString ( )
{
	static UFunction* pFnGetVersionString = NULL;

	if ( ! pFnGetVersionString )
		pFnGetVersionString = (UFunction*) UObject::GObjObjects()->Data[ 51246 ];

	ABioWorldInfo_execGetVersionString_Parms GetVersionString_Parms;

	pFnGetVersionString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVersionString, &GetVersionString_Parms, NULL );

	pFnGetVersionString->FunctionFlags |= 0x400;

	return GetVersionString_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.MoveToArea
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   sAreaName                      ( CPF_Parm )
// struct FName                   sNextAreaStartPoint            ( CPF_Parm )

void ABioWorldInfo::MoveToArea ( struct FName sAreaName, struct FName sNextAreaStartPoint )
{
	static UFunction* pFnMoveToArea = NULL;

	if ( ! pFnMoveToArea )
		pFnMoveToArea = (UFunction*) UObject::GObjObjects()->Data[ 31235 ];

	ABioWorldInfo_execMoveToArea_Parms MoveToArea_Parms;
	memcpy ( &MoveToArea_Parms.sAreaName, &sAreaName, 0x8 );
	memcpy ( &MoveToArea_Parms.sNextAreaStartPoint, &sNextAreaStartPoint, 0x8 );

	pFnMoveToArea->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveToArea, &MoveToArea_Parms, NULL );

	pFnMoveToArea->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.GetLocalBoolVariable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eObjectType                    ( CPF_Parm )
// struct FName                   GetFunctionName                ( CPF_Parm )
// struct FName                   sTag                           ( CPF_OptionalParm | CPF_Parm )
// int                            nParam                         ( CPF_OptionalParm | CPF_Parm )

bool ABioWorldInfo::GetLocalBoolVariable ( unsigned char eObjectType, struct FName GetFunctionName, struct FName sTag, int nParam )
{
	static UFunction* pFnGetLocalBoolVariable = NULL;

	if ( ! pFnGetLocalBoolVariable )
		pFnGetLocalBoolVariable = (UFunction*) UObject::GObjObjects()->Data[ 51238 ];

	ABioWorldInfo_execGetLocalBoolVariable_Parms GetLocalBoolVariable_Parms;
	GetLocalBoolVariable_Parms.eObjectType = eObjectType;
	memcpy ( &GetLocalBoolVariable_Parms.GetFunctionName, &GetFunctionName, 0x8 );
	memcpy ( &GetLocalBoolVariable_Parms.sTag, &sTag, 0x8 );
	GetLocalBoolVariable_Parms.nParam = nParam;

	pFnGetLocalBoolVariable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocalBoolVariable, &GetLocalBoolVariable_Parms, NULL );

	pFnGetLocalBoolVariable->FunctionFlags |= 0x400;

	return GetLocalBoolVariable_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.GetLocalFloatVariable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eObjectType                    ( CPF_Parm )
// struct FName                   GetFunctionName                ( CPF_Parm )
// struct FName                   sTag                           ( CPF_OptionalParm | CPF_Parm )
// int                            nParam                         ( CPF_OptionalParm | CPF_Parm )

float ABioWorldInfo::GetLocalFloatVariable ( unsigned char eObjectType, struct FName GetFunctionName, struct FName sTag, int nParam )
{
	static UFunction* pFnGetLocalFloatVariable = NULL;

	if ( ! pFnGetLocalFloatVariable )
		pFnGetLocalFloatVariable = (UFunction*) UObject::GObjObjects()->Data[ 51232 ];

	ABioWorldInfo_execGetLocalFloatVariable_Parms GetLocalFloatVariable_Parms;
	GetLocalFloatVariable_Parms.eObjectType = eObjectType;
	memcpy ( &GetLocalFloatVariable_Parms.GetFunctionName, &GetFunctionName, 0x8 );
	memcpy ( &GetLocalFloatVariable_Parms.sTag, &sTag, 0x8 );
	GetLocalFloatVariable_Parms.nParam = nParam;

	pFnGetLocalFloatVariable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocalFloatVariable, &GetLocalFloatVariable_Parms, NULL );

	pFnGetLocalFloatVariable->FunctionFlags |= 0x400;

	return GetLocalFloatVariable_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.GetLocalIntegerVariable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eObjectType                    ( CPF_Parm )
// struct FName                   GetFunctionName                ( CPF_Parm )
// struct FName                   sTag                           ( CPF_OptionalParm | CPF_Parm )
// int                            nParam                         ( CPF_OptionalParm | CPF_Parm )

int ABioWorldInfo::GetLocalIntegerVariable ( unsigned char eObjectType, struct FName GetFunctionName, struct FName sTag, int nParam )
{
	static UFunction* pFnGetLocalIntegerVariable = NULL;

	if ( ! pFnGetLocalIntegerVariable )
		pFnGetLocalIntegerVariable = (UFunction*) UObject::GObjObjects()->Data[ 51226 ];

	ABioWorldInfo_execGetLocalIntegerVariable_Parms GetLocalIntegerVariable_Parms;
	GetLocalIntegerVariable_Parms.eObjectType = eObjectType;
	memcpy ( &GetLocalIntegerVariable_Parms.GetFunctionName, &GetFunctionName, 0x8 );
	memcpy ( &GetLocalIntegerVariable_Parms.sTag, &sTag, 0x8 );
	GetLocalIntegerVariable_Parms.nParam = nParam;

	pFnGetLocalIntegerVariable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocalIntegerVariable, &GetLocalIntegerVariable_Parms, NULL );

	pFnGetLocalIntegerVariable->FunctionFlags |= 0x400;

	return GetLocalIntegerVariable_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.ExecuteConsequence
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nConsequence                   ( CPF_Parm )
// int                            nParam                         ( CPF_OptionalParm | CPF_Parm )

void ABioWorldInfo::ExecuteConsequence ( int nConsequence, int nParam )
{
	static UFunction* pFnExecuteConsequence = NULL;

	if ( ! pFnExecuteConsequence )
		pFnExecuteConsequence = (UFunction*) UObject::GObjObjects()->Data[ 51223 ];

	ABioWorldInfo_execExecuteConsequence_Parms ExecuteConsequence_Parms;
	ExecuteConsequence_Parms.nConsequence = nConsequence;
	ExecuteConsequence_Parms.nParam = nParam;

	pFnExecuteConsequence->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExecuteConsequence, &ExecuteConsequence_Parms, NULL );

	pFnExecuteConsequence->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.ExecuteStateTransition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nTransition                    ( CPF_Parm )
// int                            nParam                         ( CPF_OptionalParm | CPF_Parm )

void ABioWorldInfo::ExecuteStateTransition ( int nTransition, int nParam )
{
	static UFunction* pFnExecuteStateTransition = NULL;

	if ( ! pFnExecuteStateTransition )
		pFnExecuteStateTransition = (UFunction*) UObject::GObjObjects()->Data[ 51220 ];

	ABioWorldInfo_execExecuteStateTransition_Parms ExecuteStateTransition_Parms;
	ExecuteStateTransition_Parms.nTransition = nTransition;
	ExecuteStateTransition_Parms.nParam = nParam;

	pFnExecuteStateTransition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExecuteStateTransition, &ExecuteStateTransition_Parms, NULL );

	pFnExecuteStateTransition->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.CheckConditional
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nConditional                   ( CPF_Parm )
// int                            nParam                         ( CPF_OptionalParm | CPF_Parm )

bool ABioWorldInfo::CheckConditional ( int nConditional, int nParam )
{
	static UFunction* pFnCheckConditional = NULL;

	if ( ! pFnCheckConditional )
		pFnCheckConditional = (UFunction*) UObject::GObjObjects()->Data[ 51216 ];

	ABioWorldInfo_execCheckConditional_Parms CheckConditional_Parms;
	CheckConditional_Parms.nConditional = nConditional;
	CheckConditional_Parms.nParam = nParam;

	pFnCheckConditional->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckConditional, &CheckConditional_Parms, NULL );

	pFnCheckConditional->FunctionFlags |= 0x400;

	return CheckConditional_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.CauseEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   EventName                      ( CPF_Parm )

void ABioWorldInfo::eventCauseEvent ( struct FName EventName )
{
	static UFunction* pFnCauseEvent = NULL;

	if ( ! pFnCauseEvent )
		pFnCauseEvent = (UFunction*) UObject::GObjObjects()->Data[ 51214 ];

	ABioWorldInfo_eventCauseEvent_Parms CauseEvent_Parms;
	memcpy ( &CauseEvent_Parms.EventName, &EventName, 0x8 );

	this->ProcessEvent ( pFnCauseEvent, &CauseEvent_Parms, NULL );
};

// Function SFXGame.BioWorldInfo.GetGuiInputPermission
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  nEvent                         ( CPF_Parm )

bool ABioWorldInfo::GetGuiInputPermission ( unsigned char nEvent )
{
	static UFunction* pFnGetGuiInputPermission = NULL;

	if ( ! pFnGetGuiInputPermission )
		pFnGetGuiInputPermission = (UFunction*) UObject::GObjObjects()->Data[ 46482 ];

	ABioWorldInfo_execGetGuiInputPermission_Parms GetGuiInputPermission_Parms;
	GetGuiInputPermission_Parms.nEvent = nEvent;

	pFnGetGuiInputPermission->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGuiInputPermission, &GetGuiInputPermission_Parms, NULL );

	pFnGetGuiInputPermission->FunctionFlags |= 0x400;

	return GetGuiInputPermission_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.RequestStartNewGame
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned long                  bFemale                        ( CPF_OptionalParm | CPF_Parm )
// struct FName                   RemoteEvent                    ( CPF_OptionalParm | CPF_Parm )

void ABioWorldInfo::eventRequestStartNewGame ( unsigned long bFemale, struct FName RemoteEvent )
{
	static UFunction* pFnRequestStartNewGame = NULL;

	if ( ! pFnRequestStartNewGame )
		pFnRequestStartNewGame = (UFunction*) UObject::GObjObjects()->Data[ 47243 ];

	ABioWorldInfo_eventRequestStartNewGame_Parms RequestStartNewGame_Parms;
	RequestStartNewGame_Parms.bFemale = bFemale;
	memcpy ( &RequestStartNewGame_Parms.RemoteEvent, &RemoteEvent, 0x8 );

	this->ProcessEvent ( pFnRequestStartNewGame, &RequestStartNewGame_Parms, NULL );
};

// Function SFXGame.BioWorldInfo.OnNewGameStartRequest
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   RemoteEvent                    ( CPF_Parm )

void ABioWorldInfo::OnNewGameStartRequest ( struct FName RemoteEvent )
{
	static UFunction* pFnOnNewGameStartRequest = NULL;

	if ( ! pFnOnNewGameStartRequest )
		pFnOnNewGameStartRequest = (UFunction*) UObject::GObjObjects()->Data[ 51206 ];

	ABioWorldInfo_execOnNewGameStartRequest_Parms OnNewGameStartRequest_Parms;
	memcpy ( &OnNewGameStartRequest_Parms.RemoteEvent, &RemoteEvent, 0x8 );

	pFnOnNewGameStartRequest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnNewGameStartRequest, &OnNewGameStartRequest_Parms, NULL );

	pFnOnNewGameStartRequest->FunctionFlags |= 0x400;
};

// Function SFXGame.BioWorldInfo.TriggerCinematicSkippedEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioWorldInfo::TriggerCinematicSkippedEvent ( )
{
	static UFunction* pFnTriggerCinematicSkippedEvent = NULL;

	if ( ! pFnTriggerCinematicSkippedEvent )
		pFnTriggerCinematicSkippedEvent = (UFunction*) UObject::GObjObjects()->Data[ 51204 ];

	ABioWorldInfo_execTriggerCinematicSkippedEvent_Parms TriggerCinematicSkippedEvent_Parms;

	pFnTriggerCinematicSkippedEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTriggerCinematicSkippedEvent, &TriggerCinematicSkippedEvent_Parms, NULL );

	pFnTriggerCinematicSkippedEvent->FunctionFlags |= 0x400;

	return TriggerCinematicSkippedEvent_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfo.SetStreamingState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 StateName                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bValue                         ( CPF_Parm )

void ABioWorldInfo::SetStreamingState ( struct FString StateName, unsigned long bValue )
{
	static UFunction* pFnSetStreamingState = NULL;

	if ( ! pFnSetStreamingState )
		pFnSetStreamingState = (UFunction*) UObject::GObjObjects()->Data[ 51201 ];

	ABioWorldInfo_execSetStreamingState_Parms SetStreamingState_Parms;
	memcpy ( &SetStreamingState_Parms.StateName, &StateName, 0xC );
	SetStreamingState_Parms.bValue = bValue;

	pFnSetStreamingState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStreamingState, &SetStreamingState_Parms, NULL );

	pFnSetStreamingState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAnimNodeBlendBase.SetChildAnimTime
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNode*               oChild                         ( CPF_Parm )
// float                          fTime                          ( CPF_Parm )

void UBioAnimNodeBlendBase::SetChildAnimTime ( class UAnimNode* oChild, float fTime )
{
	static UFunction* pFnSetChildAnimTime = NULL;

	if ( ! pFnSetChildAnimTime )
		pFnSetChildAnimTime = (UFunction*) UObject::GObjObjects()->Data[ 30553 ];

	UBioAnimNodeBlendBase_execSetChildAnimTime_Parms SetChildAnimTime_Parms;
	SetChildAnimTime_Parms.oChild = oChild;
	SetChildAnimTime_Parms.fTime = fTime;

	pFnSetChildAnimTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetChildAnimTime, &SetChildAnimTime_Parms, NULL );

	pFnSetChildAnimTime->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAnimNodeBlendByFireSequence.GetPlayRate
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNodeSequence*       Seq                            ( CPF_Parm )

float UBioAnimNodeBlendByFireSequence::eventGetPlayRate ( class UAnimNodeSequence* Seq )
{
	static UFunction* pFnGetPlayRate = NULL;

	if ( ! pFnGetPlayRate )
		pFnGetPlayRate = (UFunction*) UObject::GObjObjects()->Data[ 30647 ];

	UBioAnimNodeBlendByFireSequence_eventGetPlayRate_Parms GetPlayRate_Parms;
	GetPlayRate_Parms.Seq = Seq;

	this->ProcessEvent ( pFnGetPlayRate, &GetPlayRate_Parms, NULL );

	return GetPlayRate_Parms.ReturnValue;
};

// Function SFXGame.BioAnimNodeBlendByFireSequence.NotifyWeaponAnimationPlaying
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned long                  Playing                        ( CPF_Parm )

void UBioAnimNodeBlendByFireSequence::eventNotifyWeaponAnimationPlaying ( unsigned long Playing )
{
	static UFunction* pFnNotifyWeaponAnimationPlaying = NULL;

	if ( ! pFnNotifyWeaponAnimationPlaying )
		pFnNotifyWeaponAnimationPlaying = (UFunction*) UObject::GObjObjects()->Data[ 30642 ];

	UBioAnimNodeBlendByFireSequence_eventNotifyWeaponAnimationPlaying_Parms NotifyWeaponAnimationPlaying_Parms;
	NotifyWeaponAnimationPlaying_Parms.Playing = Playing;

	this->ProcessEvent ( pFnNotifyWeaponAnimationPlaying, &NotifyWeaponAnimationPlaying_Parms, NULL );
};

// Function SFXGame.BioAnimNodeBlendByPower.SendPowerNotification
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioAnimNodeBlendByPower::SendPowerNotification ( )
{
	static UFunction* pFnSendPowerNotification = NULL;

	if ( ! pFnSendPowerNotification )
		pFnSendPowerNotification = (UFunction*) UObject::GObjObjects()->Data[ 30677 ];

	UBioAnimNodeBlendByPower_execSendPowerNotification_Parms SendPowerNotification_Parms;

	pFnSendPowerNotification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendPowerNotification, &SendPowerNotification_Parms, NULL );

	pFnSendPowerNotification->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAnimNodeBlendByReload.GetReloadDuration
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioAnimNodeBlendByReload::eventGetReloadDuration ( )
{
	static UFunction* pFnGetReloadDuration = NULL;

	if ( ! pFnGetReloadDuration )
		pFnGetReloadDuration = (UFunction*) UObject::GObjObjects()->Data[ 30680 ];

	UBioAnimNodeBlendByReload_eventGetReloadDuration_Parms GetReloadDuration_Parms;

	this->ProcessEvent ( pFnGetReloadDuration, &GetReloadDuration_Parms, NULL );

	return GetReloadDuration_Parms.ReturnValue;
};

// Function SFXGame.BioAnimNodeBlendByWeaponAction.ResetForcedReplayFlag
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioAnimNodeBlendByWeaponAction::eventResetForcedReplayFlag ( )
{
	static UFunction* pFnResetForcedReplayFlag = NULL;

	if ( ! pFnResetForcedReplayFlag )
		pFnResetForcedReplayFlag = (UFunction*) UObject::GObjObjects()->Data[ 30696 ];

	UBioAnimNodeBlendByWeaponAction_eventResetForcedReplayFlag_Parms ResetForcedReplayFlag_Parms;

	this->ProcessEvent ( pFnResetForcedReplayFlag, &ResetForcedReplayFlag_Parms, NULL );
};

// Function SFXGame.BioAnimNodeBlendByWeaponAction.ResetInstantChangeFlag
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioAnimNodeBlendByWeaponAction::eventResetInstantChangeFlag ( )
{
	static UFunction* pFnResetInstantChangeFlag = NULL;

	if ( ! pFnResetInstantChangeFlag )
		pFnResetInstantChangeFlag = (UFunction*) UObject::GObjObjects()->Data[ 30693 ];

	UBioAnimNodeBlendByWeaponAction_eventResetInstantChangeFlag_Parms ResetInstantChangeFlag_Parms;

	this->ProcessEvent ( pFnResetInstantChangeFlag, &ResetInstantChangeFlag_Parms, NULL );
};

// Function SFXGame.BioAnimNodeBlendByWeaponEquip.DrawAnimEnd
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioAnimNodeBlendByWeaponEquip::eventDrawAnimEnd ( )
{
	static UFunction* pFnDrawAnimEnd = NULL;

	if ( ! pFnDrawAnimEnd )
		pFnDrawAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 30709 ];

	UBioAnimNodeBlendByWeaponEquip_eventDrawAnimEnd_Parms DrawAnimEnd_Parms;

	this->ProcessEvent ( pFnDrawAnimEnd, &DrawAnimEnd_Parms, NULL );
};

// Function SFXGame.BioAnimNodeBlendByWeaponEquip.HolsterAnimEnd
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioAnimNodeBlendByWeaponEquip::eventHolsterAnimEnd ( )
{
	static UFunction* pFnHolsterAnimEnd = NULL;

	if ( ! pFnHolsterAnimEnd )
		pFnHolsterAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 30706 ];

	UBioAnimNodeBlendByWeaponEquip_eventHolsterAnimEnd_Parms HolsterAnimEnd_Parms;

	this->ProcessEvent ( pFnHolsterAnimEnd, &HolsterAnimEnd_Parms, NULL );
};

// Function SFXGame.BioAnimNodeCover2Transition.IgnorePlayerInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ABioPawn*                pPawn                          ( CPF_Parm )
// unsigned long                  bIgnore                        ( CPF_Parm )

void UBioAnimNodeCover2Transition::eventIgnorePlayerInput ( class ABioPawn* pPawn, unsigned long bIgnore )
{
	static UFunction* pFnIgnorePlayerInput = NULL;

	if ( ! pFnIgnorePlayerInput )
		pFnIgnorePlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 31002 ];

	UBioAnimNodeCover2Transition_eventIgnorePlayerInput_Parms IgnorePlayerInput_Parms;
	IgnorePlayerInput_Parms.pPawn = pPawn;
	IgnorePlayerInput_Parms.bIgnore = bIgnore;

	this->ProcessEvent ( pFnIgnorePlayerInput, &IgnorePlayerInput_Parms, NULL );
};

// Function SFXGame.BioAnimNodeFrame.CaptureAnimFrame
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioAnimNodeFrame::CaptureAnimFrame ( )
{
	static UFunction* pFnCaptureAnimFrame = NULL;

	if ( ! pFnCaptureAnimFrame )
		pFnCaptureAnimFrame = (UFunction*) UObject::GObjObjects()->Data[ 31012 ];

	UBioAnimNodeFrame_execCaptureAnimFrame_Parms CaptureAnimFrame_Parms;

	pFnCaptureAnimFrame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCaptureAnimFrame, &CaptureAnimFrame_Parms, NULL );

	pFnCaptureAnimFrame->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceableBlendByTransition.GotoToState
// [0x00020002] 
// Parameters infos:
// struct FName                   LoopAnim                       ( CPF_Parm )

void UBioArtPlaceableBlendByTransition::GotoToState ( struct FName LoopAnim )
{
	static UFunction* pFnGotoToState = NULL;

	if ( ! pFnGotoToState )
		pFnGotoToState = (UFunction*) UObject::GObjObjects()->Data[ 31737 ];

	UBioArtPlaceableBlendByTransition_execGotoToState_Parms GotoToState_Parms;
	memcpy ( &GotoToState_Parms.LoopAnim, &LoopAnim, 0x8 );

	this->ProcessEvent ( pFnGotoToState, &GotoToState_Parms, NULL );
};

// Function SFXGame.BioArtPlaceableBlendByTransition.TransitionToState
// [0x00020002] 
// Parameters infos:
// struct FName                   TransAnim                      ( CPF_Parm )
// struct FName                   LoopAnim                       ( CPF_Parm )

void UBioArtPlaceableBlendByTransition::TransitionToState ( struct FName TransAnim, struct FName LoopAnim )
{
	static UFunction* pFnTransitionToState = NULL;

	if ( ! pFnTransitionToState )
		pFnTransitionToState = (UFunction*) UObject::GObjObjects()->Data[ 31734 ];

	UBioArtPlaceableBlendByTransition_execTransitionToState_Parms TransitionToState_Parms;
	memcpy ( &TransitionToState_Parms.TransAnim, &TransAnim, 0x8 );
	memcpy ( &TransitionToState_Parms.LoopAnim, &LoopAnim, 0x8 );

	this->ProcessEvent ( pFnTransitionToState, &TransitionToState_Parms, NULL );
};

// Function SFXGame.SFXDoor.RestoreDoorStates
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXDoor::eventRestoreDoorStates ( )
{
	static UFunction* pFnRestoreDoorStates = NULL;

	if ( ! pFnRestoreDoorStates )
		pFnRestoreDoorStates = (UFunction*) UObject::GObjObjects()->Data[ 54698 ];

	ASFXDoor_eventRestoreDoorStates_Parms RestoreDoorStates_Parms;

	this->ProcessEvent ( pFnRestoreDoorStates, &RestoreDoorStates_Parms, NULL );
};

// Function SFXGame.SFXDoor.SaveDoorStates
// [0x00020002] 
// Parameters infos:

void ASFXDoor::SaveDoorStates ( )
{
	static UFunction* pFnSaveDoorStates = NULL;

	if ( ! pFnSaveDoorStates )
		pFnSaveDoorStates = (UFunction*) UObject::GObjObjects()->Data[ 54693 ];

	ASFXDoor_execSaveDoorStates_Parms SaveDoorStates_Parms;

	this->ProcessEvent ( pFnSaveDoorStates, &SaveDoorStates_Parms, NULL );
};

// Function SFXGame.SFXDoor.PlayWiseEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UWwiseEvent*             oWwiseEvent                    ( CPF_Parm )

void ASFXDoor::PlayWiseEvent ( class UWwiseEvent* oWwiseEvent )
{
	static UFunction* pFnPlayWiseEvent = NULL;

	if ( ! pFnPlayWiseEvent )
		pFnPlayWiseEvent = (UFunction*) UObject::GObjObjects()->Data[ 54691 ];

	ASFXDoor_execPlayWiseEvent_Parms PlayWiseEvent_Parms;
	PlayWiseEvent_Parms.oWwiseEvent = oWwiseEvent;

	pFnPlayWiseEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayWiseEvent, &PlayWiseEvent_Parms, NULL );

	pFnPlayWiseEvent->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXDoor.SetDoorMarkerState
// [0x00020002] 
// Parameters infos:
// unsigned long                  bOpen                          ( CPF_Parm )

void ASFXDoor::SetDoorMarkerState ( unsigned long bOpen )
{
	static UFunction* pFnSetDoorMarkerState = NULL;

	if ( ! pFnSetDoorMarkerState )
		pFnSetDoorMarkerState = (UFunction*) UObject::GObjObjects()->Data[ 54688 ];

	ASFXDoor_execSetDoorMarkerState_Parms SetDoorMarkerState_Parms;
	SetDoorMarkerState_Parms.bOpen = bOpen;

	this->ProcessEvent ( pFnSetDoorMarkerState, &SetDoorMarkerState_Parms, NULL );
};

// Function SFXGame.SFXDoor.OnTransitionEnd
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXDoor::eventOnTransitionEnd ( )
{
	static UFunction* pFnOnTransitionEnd = NULL;

	if ( ! pFnOnTransitionEnd )
		pFnOnTransitionEnd = (UFunction*) UObject::GObjObjects()->Data[ 54687 ];

	ASFXDoor_eventOnTransitionEnd_Parms OnTransitionEnd_Parms;

	this->ProcessEvent ( pFnOnTransitionEnd, &OnTransitionEnd_Parms, NULL );
};

// Function SFXGame.SFXDoor.SetDoorIcon
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioVFXTemplate*         oVFXTemplate                   ( CPF_Parm )

void ASFXDoor::eventSetDoorIcon ( class UBioVFXTemplate* oVFXTemplate )
{
	static UFunction* pFnSetDoorIcon = NULL;

	if ( ! pFnSetDoorIcon )
		pFnSetDoorIcon = (UFunction*) UObject::GObjObjects()->Data[ 54683 ];

	ASFXDoor_eventSetDoorIcon_Parms SetDoorIcon_Parms;
	SetDoorIcon_Parms.oVFXTemplate = oVFXTemplate;

	this->ProcessEvent ( pFnSetDoorIcon, &SetDoorIcon_Parms, NULL );
};

// Function SFXGame.SFXDoor.TriggerInteraction
// [0x00020002] 
// Parameters infos:
// class AActor*                  EventInstigator                ( CPF_Parm )

void ASFXDoor::TriggerInteraction ( class AActor* EventInstigator )
{
	static UFunction* pFnTriggerInteraction = NULL;

	if ( ! pFnTriggerInteraction )
		pFnTriggerInteraction = (UFunction*) UObject::GObjObjects()->Data[ 54680 ];

	ASFXDoor_execTriggerInteraction_Parms TriggerInteraction_Parms;
	TriggerInteraction_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnTriggerInteraction, &TriggerInteraction_Parms, NULL );
};

// Function SFXGame.SFXDoor.TriggerStateChange
// [0x00020002] 
// Parameters infos:
// class AActor*                  EventInstigator                ( CPF_Parm )

void ASFXDoor::TriggerStateChange ( class AActor* EventInstigator )
{
	static UFunction* pFnTriggerStateChange = NULL;

	if ( ! pFnTriggerStateChange )
		pFnTriggerStateChange = (UFunction*) UObject::GObjObjects()->Data[ 54676 ];

	ASFXDoor_execTriggerStateChange_Parms TriggerStateChange_Parms;
	TriggerStateChange_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnTriggerStateChange, &TriggerStateChange_Parms, NULL );
};

// Function SFXGame.SFXDoor.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ASFXDoor::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 54674 ];

	ASFXDoor_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXDoor.CloseDoor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bInstant                       ( CPF_OptionalParm | CPF_Parm )

bool ASFXDoor::CloseDoor ( unsigned long bInstant )
{
	static UFunction* pFnCloseDoor = NULL;

	if ( ! pFnCloseDoor )
		pFnCloseDoor = (UFunction*) UObject::GObjObjects()->Data[ 54671 ];

	ASFXDoor_execCloseDoor_Parms CloseDoor_Parms;
	CloseDoor_Parms.bInstant = bInstant;

	this->ProcessEvent ( pFnCloseDoor, &CloseDoor_Parms, NULL );

	return CloseDoor_Parms.ReturnValue;
};

// Function SFXGame.SFXDoor.OpenDoor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bInstant                       ( CPF_OptionalParm | CPF_Parm )

bool ASFXDoor::OpenDoor ( unsigned long bInstant )
{
	static UFunction* pFnOpenDoor = NULL;

	if ( ! pFnOpenDoor )
		pFnOpenDoor = (UFunction*) UObject::GObjObjects()->Data[ 54668 ];

	ASFXDoor_execOpenDoor_Parms OpenDoor_Parms;
	OpenDoor_Parms.bInstant = bInstant;

	this->ProcessEvent ( pFnOpenDoor, &OpenDoor_Parms, NULL );

	return OpenDoor_Parms.ReturnValue;
};

// Function SFXGame.SFXDoor.SetDoorState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ToState                        ( CPF_Parm )
// class AActor*                  User                           ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInstantTransition             ( CPF_OptionalParm | CPF_Parm )

void ASFXDoor::eventSetDoorState ( unsigned char ToState, class AActor* User, unsigned long bInstantTransition )
{
	static UFunction* pFnSetDoorState = NULL;

	if ( ! pFnSetDoorState )
		pFnSetDoorState = (UFunction*) UObject::GObjObjects()->Data[ 54664 ];

	ASFXDoor_eventSetDoorState_Parms SetDoorState_Parms;
	SetDoorState_Parms.ToState = ToState;
	SetDoorState_Parms.User = User;
	SetDoorState_Parms.bInstantTransition = bInstantTransition;

	this->ProcessEvent ( pFnSetDoorState, &SetDoorState_Parms, NULL );
};

// Function SFXGame.SFXDoor.PlayAnim
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// unsigned long                  bSkipToEnd                     ( CPF_OptionalParm | CPF_Parm )

void ASFXDoor::PlayAnim ( struct FName InAnimSeqName, unsigned long bSkipToEnd )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = (UFunction*) UObject::GObjObjects()->Data[ 54660 ];

	ASFXDoor_execPlayAnim_Parms PlayAnim_Parms;
	memcpy ( &PlayAnim_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	PlayAnim_Parms.bSkipToEnd = bSkipToEnd;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );
};

// Function SFXGame.SFXDoor.OnUse
// [0x00020002] 
// Parameters infos:
// class AActor*                  User                           ( CPF_Parm )

void ASFXDoor::OnUse ( class AActor* User )
{
	static UFunction* pFnOnUse = NULL;

	if ( ! pFnOnUse )
		pFnOnUse = (UFunction*) UObject::GObjObjects()->Data[ 54658 ];

	ASFXDoor_execOnUse_Parms OnUse_Parms;
	OnUse_Parms.User = User;

	this->ProcessEvent ( pFnOnUse, &OnUse_Parms, NULL );
};

// Function SFXGame.SFXGoreActor.CreateGoreActor
// [0x00020002] 
// Parameters infos:
// class APawn*                   Pawn                           ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )

void ASFXGoreActor::CreateGoreActor ( class APawn* Pawn, struct FName BoneName )
{
	static UFunction* pFnCreateGoreActor = NULL;

	if ( ! pFnCreateGoreActor )
		pFnCreateGoreActor = (UFunction*) UObject::GObjObjects()->Data[ 56616 ];

	ASFXGoreActor_execCreateGoreActor_Parms CreateGoreActor_Parms;
	CreateGoreActor_Parms.Pawn = Pawn;
	memcpy ( &CreateGoreActor_Parms.BoneName, &BoneName, 0x8 );

	this->ProcessEvent ( pFnCreateGoreActor, &CreateGoreActor_Parms, NULL );
};

// Function SFXGame.SFXGoreActor.SwitchBodiesBelow
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParentBoneName                 ( CPF_Parm )
// class USkeletalMeshComponent*  FromSkelComp                   ( CPF_Parm | CPF_EditInline )
// class USkeletalMeshComponent*  ToSkelComp                     ( CPF_Parm | CPF_EditInline )
// class UPhysicsAssetInstance*   FromInst                       ( CPF_Parm )
// class UPhysicsAssetInstance*   ToInst                         ( CPF_Parm )

void ASFXGoreActor::SwitchBodiesBelow ( struct FName ParentBoneName, class USkeletalMeshComponent* FromSkelComp, class USkeletalMeshComponent* ToSkelComp, class UPhysicsAssetInstance* FromInst, class UPhysicsAssetInstance* ToInst )
{
	static UFunction* pFnSwitchBodiesBelow = NULL;

	if ( ! pFnSwitchBodiesBelow )
		pFnSwitchBodiesBelow = (UFunction*) UObject::GObjObjects()->Data[ 56610 ];

	ASFXGoreActor_execSwitchBodiesBelow_Parms SwitchBodiesBelow_Parms;
	memcpy ( &SwitchBodiesBelow_Parms.ParentBoneName, &ParentBoneName, 0x8 );
	SwitchBodiesBelow_Parms.FromSkelComp = FromSkelComp;
	SwitchBodiesBelow_Parms.ToSkelComp = ToSkelComp;
	SwitchBodiesBelow_Parms.FromInst = FromInst;
	SwitchBodiesBelow_Parms.ToInst = ToInst;

	pFnSwitchBodiesBelow->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwitchBodiesBelow, &SwitchBodiesBelow_Parms, NULL );

	pFnSwitchBodiesBelow->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGoreActor.CopyBindPose
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void ASFXGoreActor::CopyBindPose ( class ABioPawn* Pawn )
{
	static UFunction* pFnCopyBindPose = NULL;

	if ( ! pFnCopyBindPose )
		pFnCopyBindPose = (UFunction*) UObject::GObjObjects()->Data[ 56608 ];

	ASFXGoreActor_execCopyBindPose_Parms CopyBindPose_Parms;
	CopyBindPose_Parms.Pawn = Pawn;

	pFnCopyBindPose->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCopyBindPose, &CopyBindPose_Parms, NULL );

	pFnCopyBindPose->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBase.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void ABioVehicleBase::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 50768 ];

	ABioVehicleBase_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function SFXGame.BioVehicleBase.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ABioVehicleBase::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 50766 ];

	ABioVehicleBase_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBase.SetInputs
// [0x00020102] 
// Parameters infos:
// float                          InForward                      ( CPF_Parm )
// float                          InStrafe                       ( CPF_Parm )
// float                          InUp                           ( CPF_Parm )

void ABioVehicleBase::SetInputs ( float InForward, float InStrafe, float InUp )
{
	static UFunction* pFnSetInputs = NULL;

	if ( ! pFnSetInputs )
		pFnSetInputs = (UFunction*) UObject::GObjObjects()->Data[ 50762 ];

	ABioVehicleBase_execSetInputs_Parms SetInputs_Parms;
	SetInputs_Parms.InForward = InForward;
	SetInputs_Parms.InStrafe = InStrafe;
	SetInputs_Parms.InUp = InUp;

	this->ProcessEvent ( pFnSetInputs, &SetInputs_Parms, NULL );
};

// Function SFXGame.BioVehicleBase.ProxyTryToDrive
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ABioVehicleBase::eventProxyTryToDrive ( class APawn* P )
{
	static UFunction* pFnProxyTryToDrive = NULL;

	if ( ! pFnProxyTryToDrive )
		pFnProxyTryToDrive = (UFunction*) UObject::GObjObjects()->Data[ 50759 ];

	ABioVehicleBase_eventProxyTryToDrive_Parms ProxyTryToDrive_Parms;
	ProxyTryToDrive_Parms.P = P;

	this->ProcessEvent ( pFnProxyTryToDrive, &ProxyTryToDrive_Parms, NULL );

	return ProxyTryToDrive_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBase.DrawHUD
// [0x00020102] 
// Parameters infos:
// class AHUD*                    H                              ( CPF_Parm )

void ABioVehicleBase::DrawHUD ( class AHUD* H )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 50753 ];

	ABioVehicleBase_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.H = H;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function SFXGame.BioVehicleBase.BioProxyDetachDriver
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ABioVehicleBase::eventBioProxyDetachDriver ( class APawn* P )
{
	static UFunction* pFnBioProxyDetachDriver = NULL;

	if ( ! pFnBioProxyDetachDriver )
		pFnBioProxyDetachDriver = (UFunction*) UObject::GObjObjects()->Data[ 50751 ];

	ABioVehicleBase_eventBioProxyDetachDriver_Parms BioProxyDetachDriver_Parms;
	BioProxyDetachDriver_Parms.P = P;

	this->ProcessEvent ( pFnBioProxyDetachDriver, &BioProxyDetachDriver_Parms, NULL );
};

// Function SFXGame.BioVehicleBase.DetachDriver
// [0x00020102] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ABioVehicleBase::DetachDriver ( class APawn* P )
{
	static UFunction* pFnDetachDriver = NULL;

	if ( ! pFnDetachDriver )
		pFnDetachDriver = (UFunction*) UObject::GObjObjects()->Data[ 50749 ];

	ABioVehicleBase_execDetachDriver_Parms DetachDriver_Parms;
	DetachDriver_Parms.P = P;

	this->ProcessEvent ( pFnDetachDriver, &DetachDriver_Parms, NULL );
};

// Function SFXGame.BioVehicleBase.BioProxyAttachDriver
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ABioVehicleBase::eventBioProxyAttachDriver ( class APawn* P )
{
	static UFunction* pFnBioProxyAttachDriver = NULL;

	if ( ! pFnBioProxyAttachDriver )
		pFnBioProxyAttachDriver = (UFunction*) UObject::GObjObjects()->Data[ 50747 ];

	ABioVehicleBase_eventBioProxyAttachDriver_Parms BioProxyAttachDriver_Parms;
	BioProxyAttachDriver_Parms.P = P;

	this->ProcessEvent ( pFnBioProxyAttachDriver, &BioProxyAttachDriver_Parms, NULL );
};

// Function SFXGame.BioVehicleBase.AttachDriver
// [0x00020102] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ABioVehicleBase::AttachDriver ( class APawn* P )
{
	static UFunction* pFnAttachDriver = NULL;

	if ( ! pFnAttachDriver )
		pFnAttachDriver = (UFunction*) UObject::GObjObjects()->Data[ 50745 ];

	ABioVehicleBase_execAttachDriver_Parms AttachDriver_Parms;
	AttachDriver_Parms.P = P;

	this->ProcessEvent ( pFnAttachDriver, &AttachDriver_Parms, NULL );
};

// Function SFXGame.BioVehicleBase.SetExitingSquadLocation
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vExitCenterLocation            ( CPF_Parm )
// float                          fPlacementOffset               ( CPF_Parm )

bool ABioVehicleBase::SetExitingSquadLocation ( struct FVector vExitCenterLocation, float fPlacementOffset )
{
	static UFunction* pFnSetExitingSquadLocation = NULL;

	if ( ! pFnSetExitingSquadLocation )
		pFnSetExitingSquadLocation = (UFunction*) UObject::GObjObjects()->Data[ 50736 ];

	ABioVehicleBase_execSetExitingSquadLocation_Parms SetExitingSquadLocation_Parms;
	memcpy ( &SetExitingSquadLocation_Parms.vExitCenterLocation, &vExitCenterLocation, 0xC );
	SetExitingSquadLocation_Parms.fPlacementOffset = fPlacementOffset;

	this->ProcessEvent ( pFnSetExitingSquadLocation, &SetExitingSquadLocation_Parms, NULL );

	return SetExitingSquadLocation_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBase.PlaceExitingDriver
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ExitingDriver                  ( CPF_OptionalParm | CPF_Parm )

bool ABioVehicleBase::PlaceExitingDriver ( class APawn* ExitingDriver )
{
	static UFunction* pFnPlaceExitingDriver = NULL;

	if ( ! pFnPlaceExitingDriver )
		pFnPlaceExitingDriver = (UFunction*) UObject::GObjObjects()->Data[ 50727 ];

	ABioVehicleBase_execPlaceExitingDriver_Parms PlaceExitingDriver_Parms;
	PlaceExitingDriver_Parms.ExitingDriver = ExitingDriver;

	this->ProcessEvent ( pFnPlaceExitingDriver, &PlaceExitingDriver_Parms, NULL );

	return PlaceExitingDriver_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBase.DriverEnter
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )

bool ABioVehicleBase::DriverEnter ( class APawn* P )
{
	static UFunction* pFnDriverEnter = NULL;

	if ( ! pFnDriverEnter )
		pFnDriverEnter = (UFunction*) UObject::GObjObjects()->Data[ 50723 ];

	ABioVehicleBase_execDriverEnter_Parms DriverEnter_Parms;
	DriverEnter_Parms.P = P;

	this->ProcessEvent ( pFnDriverEnter, &DriverEnter_Parms, NULL );

	return DriverEnter_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBase.DriverLeave
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceLeave                    ( CPF_Parm )

bool ABioVehicleBase::eventDriverLeave ( unsigned long bForceLeave )
{
	static UFunction* pFnDriverLeave = NULL;

	if ( ! pFnDriverLeave )
		pFnDriverLeave = (UFunction*) UObject::GObjObjects()->Data[ 50714 ];

	ABioVehicleBase_eventDriverLeave_Parms DriverLeave_Parms;
	DriverLeave_Parms.bForceLeave = bForceLeave;

	this->ProcessEvent ( pFnDriverLeave, &DriverLeave_Parms, NULL );

	return DriverLeave_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBase.SetPartyCollisionState
// [0x00020002] 
// Parameters infos:
// unsigned long                  bCollideState                  ( CPF_Parm )

void ABioVehicleBase::SetPartyCollisionState ( unsigned long bCollideState )
{
	static UFunction* pFnSetPartyCollisionState = NULL;

	if ( ! pFnSetPartyCollisionState )
		pFnSetPartyCollisionState = (UFunction*) UObject::GObjObjects()->Data[ 50710 ];

	ABioVehicleBase_execSetPartyCollisionState_Parms SetPartyCollisionState_Parms;
	SetPartyCollisionState_Parms.bCollideState = bCollideState;

	this->ProcessEvent ( pFnSetPartyCollisionState, &SetPartyCollisionState_Parms, NULL );
};

// Function SFXGame.BioVehicleBase.KillAllMomentum
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioVehicleBase::KillAllMomentum ( )
{
	static UFunction* pFnKillAllMomentum = NULL;

	if ( ! pFnKillAllMomentum )
		pFnKillAllMomentum = (UFunction*) UObject::GObjObjects()->Data[ 50709 ];

	ABioVehicleBase_execKillAllMomentum_Parms KillAllMomentum_Parms;

	pFnKillAllMomentum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillAllMomentum, &KillAllMomentum_Parms, NULL );

	pFnKillAllMomentum->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBase.IsExitLocationValid
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vExitLocation                  ( CPF_Parm )

bool ABioVehicleBase::IsExitLocationValid ( struct FVector vExitLocation )
{
	static UFunction* pFnIsExitLocationValid = NULL;

	if ( ! pFnIsExitLocationValid )
		pFnIsExitLocationValid = (UFunction*) UObject::GObjObjects()->Data[ 50706 ];

	ABioVehicleBase_execIsExitLocationValid_Parms IsExitLocationValid_Parms;
	memcpy ( &IsExitLocationValid_Parms.vExitLocation, &vExitLocation, 0xC );

	pFnIsExitLocationValid->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsExitLocationValid, &IsExitLocationValid_Parms, NULL );

	pFnIsExitLocationValid->FunctionFlags |= 0x400;

	return IsExitLocationValid_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBase.InitializeForPlay
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ABioVehicleBase::InitializeForPlay ( )
{
	static UFunction* pFnInitializeForPlay = NULL;

	if ( ! pFnInitializeForPlay )
		pFnInitializeForPlay = (UFunction*) UObject::GObjObjects()->Data[ 50705 ];

	ABioVehicleBase_execInitializeForPlay_Parms InitializeForPlay_Parms;

	pFnInitializeForPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeForPlay, &InitializeForPlay_Parms, NULL );

	pFnInitializeForPlay->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBase.PerformForceExitCleanup
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioVehicleBase::PerformForceExitCleanup ( )
{
	static UFunction* pFnPerformForceExitCleanup = NULL;

	if ( ! pFnPerformForceExitCleanup )
		pFnPerformForceExitCleanup = (UFunction*) UObject::GObjObjects()->Data[ 50703 ];

	ABioVehicleBase_execPerformForceExitCleanup_Parms PerformForceExitCleanup_Parms;

	pFnPerformForceExitCleanup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformForceExitCleanup, &PerformForceExitCleanup_Parms, NULL );

	pFnPerformForceExitCleanup->FunctionFlags |= 0x400;

	return PerformForceExitCleanup_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBase.BioCanExitVehicle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioVehicleBase::BioCanExitVehicle ( )
{
	static UFunction* pFnBioCanExitVehicle = NULL;

	if ( ! pFnBioCanExitVehicle )
		pFnBioCanExitVehicle = (UFunction*) UObject::GObjObjects()->Data[ 50701 ];

	ABioVehicleBase_execBioCanExitVehicle_Parms BioCanExitVehicle_Parms;

	pFnBioCanExitVehicle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioCanExitVehicle, &BioCanExitVehicle_Parms, NULL );

	pFnBioCanExitVehicle->FunctionFlags |= 0x400;

	return BioCanExitVehicle_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBase.BioCanEnterVehicle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioVehicleBase::BioCanEnterVehicle ( )
{
	static UFunction* pFnBioCanEnterVehicle = NULL;

	if ( ! pFnBioCanEnterVehicle )
		pFnBioCanEnterVehicle = (UFunction*) UObject::GObjObjects()->Data[ 50699 ];

	ABioVehicleBase_execBioCanEnterVehicle_Parms BioCanEnterVehicle_Parms;

	pFnBioCanEnterVehicle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioCanEnterVehicle, &BioCanEnterVehicle_Parms, NULL );

	pFnBioCanEnterVehicle->FunctionFlags |= 0x400;

	return BioCanEnterVehicle_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBase.GetVisualImpactSet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioVISSimple*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioVISSimple* ABioVehicleBase::GetVisualImpactSet ( )
{
	static UFunction* pFnGetVisualImpactSet = NULL;

	if ( ! pFnGetVisualImpactSet )
		pFnGetVisualImpactSet = (UFunction*) UObject::GObjObjects()->Data[ 50697 ];

	ABioVehicleBase_execGetVisualImpactSet_Parms GetVisualImpactSet_Parms;

	pFnGetVisualImpactSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVisualImpactSet, &GetVisualImpactSet_Parms, NULL );

	pFnGetVisualImpactSet->FunctionFlags |= 0x400;

	return GetVisualImpactSet_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleTrackSet.FindParticleSystem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       a_Material                     ( CPF_Parm )

class UParticleSystem* UBioVehicleTrackSet::FindParticleSystem ( class UPhysicalMaterial* a_Material )
{
	static UFunction* pFnFindParticleSystem = NULL;

	if ( ! pFnFindParticleSystem )
		pFnFindParticleSystem = (UFunction*) UObject::GObjObjects()->Data[ 50813 ];

	UBioVehicleTrackSet_execFindParticleSystem_Parms FindParticleSystem_Parms;
	FindParticleSystem_Parms.a_Material = a_Material;

	pFnFindParticleSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindParticleSystem, &FindParticleSystem_Parms, NULL );

	pFnFindParticleSystem->FunctionFlags |= 0x400;

	return FindParticleSystem_Parms.ReturnValue;
};

// Function SFXGame.SFXVehicleHover.RigidBodyCollision
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_EditInline )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXVehicleHover::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 62502 ];

	ASFXVehicleHover_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &RigidBodyCollision_Parms.RigidCollisionData, 0x24 );
};

// Function SFXGame.SFXVehicleHover.NotifyBump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool ASFXVehicleHover::NotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 62497 ];

	ASFXVehicleHover_execNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function SFXGame.SFXVehicleHover.RanInto
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ASFXVehicleHover::eventRanInto ( class AActor* Other )
{
	static UFunction* pFnRanInto = NULL;

	if ( ! pFnRanInto )
		pFnRanInto = (UFunction*) UObject::GObjObjects()->Data[ 62495 ];

	ASFXVehicleHover_eventRanInto_Parms RanInto_Parms;
	RanInto_Parms.Other = Other;

	this->ProcessEvent ( pFnRanInto, &RanInto_Parms, NULL );
};

// Function SFXGame.SFXVehicleHover.GetFaction
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

unsigned char ASFXVehicleHover::GetFaction ( class APawn* Other )
{
	static UFunction* pFnGetFaction = NULL;

	if ( ! pFnGetFaction )
		pFnGetFaction = (UFunction*) UObject::GObjObjects()->Data[ 62491 ];

	ASFXVehicleHover_execGetFaction_Parms GetFaction_Parms;
	GetFaction_Parms.Other = Other;

	this->ProcessEvent ( pFnGetFaction, &GetFaction_Parms, NULL );

	return GetFaction_Parms.ReturnValue;
};

// Function SFXGame.SFXVehicleHover.IsFriendly
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ASFXVehicleHover::IsFriendly ( class APawn* Other )
{
	static UFunction* pFnIsFriendly = NULL;

	if ( ! pFnIsFriendly )
		pFnIsFriendly = (UFunction*) UObject::GObjObjects()->Data[ 62488 ];

	ASFXVehicleHover_execIsFriendly_Parms IsFriendly_Parms;
	IsFriendly_Parms.Other = Other;

	this->ProcessEvent ( pFnIsFriendly, &IsFriendly_Parms, NULL );

	return IsFriendly_Parms.ReturnValue;
};

// Function SFXGame.SFXVehicleHover.IsHostile
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ASFXVehicleHover::IsHostile ( class APawn* Other )
{
	static UFunction* pFnIsHostile = NULL;

	if ( ! pFnIsHostile )
		pFnIsHostile = (UFunction*) UObject::GObjObjects()->Data[ 62485 ];

	ASFXVehicleHover_execIsHostile_Parms IsHostile_Parms;
	IsHostile_Parms.Other = Other;

	this->ProcessEvent ( pFnIsHostile, &IsHostile_Parms, NULL );

	return IsHostile_Parms.ReturnValue;
};

// Function SFXGame.SFXVehicleHover.GetViewRotation
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator ASFXVehicleHover::GetViewRotation ( )
{
	static UFunction* pFnGetViewRotation = NULL;

	if ( ! pFnGetViewRotation )
		pFnGetViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 62480 ];

	ASFXVehicleHover_execGetViewRotation_Parms GetViewRotation_Parms;

	this->ProcessEvent ( pFnGetViewRotation, &GetViewRotation_Parms, NULL );

	return GetViewRotation_Parms.ReturnValue;
};

// Function SFXGame.SFXVehicleHover.Tick
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXVehicleHover::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 62463 ];

	ASFXVehicleHover_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXVehicleHover.TakeDamage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASFXVehicleHover::eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 62454 ];

	ASFXVehicleHover_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function SFXGame.SFXVehicleHover.IsPendingFire
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  InFiringMode                   ( CPF_Parm )

bool ASFXVehicleHover::IsPendingFire ( unsigned char InFiringMode )
{
	static UFunction* pFnIsPendingFire = NULL;

	if ( ! pFnIsPendingFire )
		pFnIsPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 62451 ];

	ASFXVehicleHover_execIsPendingFire_Parms IsPendingFire_Parms;
	IsPendingFire_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnIsPendingFire, &IsPendingFire_Parms, NULL );

	return IsPendingFire_Parms.ReturnValue;
};

// Function SFXGame.SFXVehicleHover.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool ASFXVehicleHover::Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 62446 ];

	ASFXVehicleHover_execDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function SFXGame.SFXVehicleHover.AddDefaultInventory
// [0x00820002] 
// Parameters infos:

void ASFXVehicleHover::AddDefaultInventory ( )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = (UFunction*) UObject::GObjObjects()->Data[ 62441 ];

	ASFXVehicleHover_execAddDefaultInventory_Parms AddDefaultInventory_Parms;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function SFXGame.BioSeqAct_AbilityEnable.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_AbilityEnable::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 43962 ];

	UBioSeqAct_AbilityEnable_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSequenceLatentAction.UpdateOp
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool UBioSequenceLatentAction::eventUpdateOp ( float DeltaTime )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 43967 ];

	UBioSequenceLatentAction_eventUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_ApplyMetaVFX.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ApplyMetaVFX::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44144 ];

	UBioSeqAct_ApplyMetaVFX_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_AwardTreasure.GetTreasureImageResourcePath
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioSeqAct_AwardTreasure::eventGetTreasureImageResourcePath ( )
{
	static UFunction* pFnGetTreasureImageResourcePath = NULL;

	if ( ! pFnGetTreasureImageResourcePath )
		pFnGetTreasureImageResourcePath = (UFunction*) UObject::GObjObjects()->Data[ 44209 ];

	UBioSeqAct_AwardTreasure_eventGetTreasureImageResourcePath_Parms GetTreasureImageResourcePath_Parms;

	this->ProcessEvent ( pFnGetTreasureImageResourcePath, &GetTreasureImageResourcePath_Parms, NULL );

	return GetTreasureImageResourcePath_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_AwardTreasure.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_AwardTreasure::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44205 ];

	UBioSeqAct_AwardTreasure_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_BlackScreen.UpdateOp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool UBioSeqAct_BlackScreen::UpdateOp ( float fDeltaT )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 44238 ];

	UBioSeqAct_BlackScreen_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_BlackScreen.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_BlackScreen::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44233 ];

	UBioSeqAct_BlackScreen_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_EnableCombat.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_EnableCombat::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44480 ];

	UBioSeqAct_EnableCombat_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_InsertPostProcess.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_InsertPostProcess::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44752 ];

	UBioSeqAct_InsertPostProcess_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_InsertPostProcess.AddPostProcessEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSeqAct_InsertPostProcess::AddPostProcessEffect ( )
{
	static UFunction* pFnAddPostProcessEffect = NULL;

	if ( ! pFnAddPostProcessEffect )
		pFnAddPostProcessEffect = (UFunction*) UObject::GObjObjects()->Data[ 44751 ];

	UBioSeqAct_InsertPostProcess_execAddPostProcessEffect_Parms AddPostProcessEffect_Parms;

	pFnAddPostProcessEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPostProcessEffect, &AddPostProcessEffect_Parms, NULL );

	pFnAddPostProcessEffect->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_IsAbilityEnabled.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_IsAbilityEnabled::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44759 ];

	UBioSeqAct_IsAbilityEnabled_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_Movie.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_Movie::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44805 ];

	UBioSeqAct_Movie_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_MovieBink.Deactivated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_MovieBink::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 44812 ];

	UBioSeqAct_MovieBink_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_MovieBink.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_MovieBink::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44810 ];

	UBioSeqAct_MovieBink_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_NonCombatArea.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_NonCombatArea::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44822 ];

	UBioSeqAct_NonCombatArea_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_OverrideStagePlacement.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_OverrideStagePlacement::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44917 ];

	UBioSeqAct_OverrideStagePlacement_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_OverrideStagePlacement.SetNode
// [0x00020002] 
// Parameters infos:
// class ABioStage*               oStage                         ( CPF_Parm )
// class AActor*                  aInput                         ( CPF_Parm )
// struct FName                   nmNodeName                     ( CPF_Parm )

void UBioSeqAct_OverrideStagePlacement::SetNode ( class ABioStage* oStage, class AActor* aInput, struct FName nmNodeName )
{
	static UFunction* pFnSetNode = NULL;

	if ( ! pFnSetNode )
		pFnSetNode = (UFunction*) UObject::GObjObjects()->Data[ 44911 ];

	UBioSeqAct_OverrideStagePlacement_execSetNode_Parms SetNode_Parms;
	SetNode_Parms.oStage = oStage;
	SetNode_Parms.aInput = aInput;
	memcpy ( &SetNode_Parms.nmNodeName, &nmNodeName, 0x8 );

	this->ProcessEvent ( pFnSetNode, &SetNode_Parms, NULL );
};

// Function SFXGame.BioSeqAct_PreloadCinematicAudio.UpdateOp
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDelta                         ( CPF_Parm )

bool UBioSeqAct_PreloadCinematicAudio::UpdateOp ( float fDelta )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 44989 ];

	UBioSeqAct_PreloadCinematicAudio_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDelta = fDelta;

	pFnUpdateOp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	pFnUpdateOp->FunctionFlags |= 0x400;

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_PreloadCinematicAudio.Activated
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSeqAct_PreloadCinematicAudio::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44988 ];

	UBioSeqAct_PreloadCinematicAudio_execActivated_Parms Activated_Parms;

	pFnActivated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );

	pFnActivated->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_RandomWalk.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_RandomWalk::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45004 ];

	UBioSeqAct_RandomWalk_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_RemovePostProcess.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_RemovePostProcess::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45024 ];

	UBioSeqAct_RemovePostProcess_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_RemovePostProcess.RemovePostProcessEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSeqAct_RemovePostProcess::RemovePostProcessEffect ( )
{
	static UFunction* pFnRemovePostProcessEffect = NULL;

	if ( ! pFnRemovePostProcessEffect )
		pFnRemovePostProcessEffect = (UFunction*) UObject::GObjObjects()->Data[ 45023 ];

	UBioSeqAct_RemovePostProcess_execRemovePostProcessEffect_Parms RemovePostProcessEffect_Parms;

	pFnRemovePostProcessEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemovePostProcessEffect, &RemovePostProcessEffect_Parms, NULL );

	pFnRemovePostProcessEffect->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_SetStreamingState.Activated
// [0x00820002] 
// Parameters infos:

void UBioSeqAct_SetStreamingState::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45401 ];

	UBioSeqAct_SetStreamingState_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetStreamingState.RetouchTriggers
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSeqAct_SetStreamingState::RetouchTriggers ( )
{
	static UFunction* pFnRetouchTriggers = NULL;

	if ( ! pFnRetouchTriggers )
		pFnRetouchTriggers = (UFunction*) UObject::GObjObjects()->Data[ 45400 ];

	UBioSeqAct_SetStreamingState_execRetouchTriggers_Parms RetouchTriggers_Parms;

	pFnRetouchTriggers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetouchTriggers, &RetouchTriggers_Parms, NULL );

	pFnRetouchTriggers->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_SetWeapon.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetWeapon::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45421 ];

	UBioSeqAct_SetWeapon_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowAchievements.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ShowAchievements::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45426 ];

	UBioSeqAct_ShowAchievements_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowChoiceGUI.ChoiceGUIInputPressed
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSeqAct_ShowChoiceGUI::ChoiceGUIInputPressed ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnChoiceGUIInputPressed = NULL;

	if ( ! pFnChoiceGUIInputPressed )
		pFnChoiceGUIInputPressed = (UFunction*) UObject::GObjObjects()->Data[ 45457 ];

	UBioSeqAct_ShowChoiceGUI_execChoiceGUIInputPressed_Parms ChoiceGUIInputPressed_Parms;
	ChoiceGUIInputPressed_Parms.bAPressed = bAPressed;
	ChoiceGUIInputPressed_Parms.nContext = nContext;

	this->ProcessEvent ( pFnChoiceGUIInputPressed, &ChoiceGUIInputPressed_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowChoiceGUI.UpdateOp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool UBioSeqAct_ShowChoiceGUI::UpdateOp ( float fDeltaT )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 45451 ];

	UBioSeqAct_ShowChoiceGUI_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_ShowCredits.Deactivated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_ShowCredits::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 45478 ];

	UBioSeqAct_ShowCredits_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowCredits.UpdateOp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool UBioSeqAct_ShowCredits::UpdateOp ( float fDeltaT )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 45475 ];

	UBioSeqAct_ShowCredits_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_ShowCredits.onScreenClosed
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ShowCredits::onScreenClosed ( )
{
	static UFunction* pFnonScreenClosed = NULL;

	if ( ! pFnonScreenClosed )
		pFnonScreenClosed = (UFunction*) UObject::GObjObjects()->Data[ 45474 ];

	UBioSeqAct_ShowCredits_execonScreenClosed_Parms onScreenClosed_Parms;

	this->ProcessEvent ( pFnonScreenClosed, &onScreenClosed_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowCredits.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ShowCredits::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45470 ];

	UBioSeqAct_ShowCredits_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowIntroText.UpdateOp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool UBioSeqAct_ShowIntroText::UpdateOp ( float fDeltaT )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 45491 ];

	UBioSeqAct_ShowIntroText_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_ShowIntroText.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ShowIntroText::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45487 ];

	UBioSeqAct_ShowIntroText_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowMainMenu.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ShowMainMenu::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45512 ];

	UBioSeqAct_ShowMainMenu_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowSniperHudOverlay.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ShowSniperHudOverlay::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45559 ];

	UBioSeqAct_ShowSniperHudOverlay_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowSpecialization.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_ShowSpecialization::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45565 ];

	UBioSeqAct_ShowSpecialization_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowSplash.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ShowSplash::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45567 ];

	UBioSeqAct_ShowSplash_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SkillGame.GrantCustomGameXp
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ABioWorldInfo*           oBWorldInfo                    ( CPF_Parm )

void UBioSeqAct_SkillGame::eventGrantCustomGameXp ( class ABioWorldInfo* oBWorldInfo )
{
	static UFunction* pFnGrantCustomGameXp = NULL;

	if ( ! pFnGrantCustomGameXp )
		pFnGrantCustomGameXp = (UFunction*) UObject::GObjObjects()->Data[ 45603 ];

	UBioSeqAct_SkillGame_eventGrantCustomGameXp_Parms GrantCustomGameXp_Parms;
	GrantCustomGameXp_Parms.oBWorldInfo = oBWorldInfo;

	this->ProcessEvent ( pFnGrantCustomGameXp, &GrantCustomGameXp_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SkillGame.OnCancel
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSeqAct_SkillGame::OnCancel ( )
{
	static UFunction* pFnOnCancel = NULL;

	if ( ! pFnOnCancel )
		pFnOnCancel = (UFunction*) UObject::GObjObjects()->Data[ 45602 ];

	UBioSeqAct_SkillGame_execOnCancel_Parms OnCancel_Parms;

	pFnOnCancel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnCancel, &OnCancel_Parms, NULL );

	pFnOnCancel->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_SkillGame.OnFailure
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            i_salvage                      ( CPF_Parm )

void UBioSeqAct_SkillGame::OnFailure ( int i_salvage )
{
	static UFunction* pFnOnFailure = NULL;

	if ( ! pFnOnFailure )
		pFnOnFailure = (UFunction*) UObject::GObjObjects()->Data[ 45600 ];

	UBioSeqAct_SkillGame_execOnFailure_Parms OnFailure_Parms;
	OnFailure_Parms.i_salvage = i_salvage;

	pFnOnFailure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnFailure, &OnFailure_Parms, NULL );

	pFnOnFailure->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_SkillGame.OnSuccess
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            i_salvage                      ( CPF_Parm )

void UBioSeqAct_SkillGame::OnSuccess ( int i_salvage )
{
	static UFunction* pFnOnSuccess = NULL;

	if ( ! pFnOnSuccess )
		pFnOnSuccess = (UFunction*) UObject::GObjObjects()->Data[ 45598 ];

	UBioSeqAct_SkillGame_execOnSuccess_Parms OnSuccess_Parms;
	OnSuccess_Parms.i_salvage = i_salvage;

	pFnOnSuccess->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSuccess, &OnSuccess_Parms, NULL );

	pFnOnSuccess->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_SkillGame_Base.OnCancel
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSeqAct_SkillGame_Base::OnCancel ( )
{
	static UFunction* pFnOnCancel = NULL;

	if ( ! pFnOnCancel )
		pFnOnCancel = (UFunction*) UObject::GObjObjects()->Data[ 45615 ];

	UBioSeqAct_SkillGame_Base_execOnCancel_Parms OnCancel_Parms;

	pFnOnCancel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnCancel, &OnCancel_Parms, NULL );

	pFnOnCancel->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_SkillGame_Base.OnFailure
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSeqAct_SkillGame_Base::OnFailure ( )
{
	static UFunction* pFnOnFailure = NULL;

	if ( ! pFnOnFailure )
		pFnOnFailure = (UFunction*) UObject::GObjObjects()->Data[ 45614 ];

	UBioSeqAct_SkillGame_Base_execOnFailure_Parms OnFailure_Parms;

	pFnOnFailure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnFailure, &OnFailure_Parms, NULL );

	pFnOnFailure->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_SkillGame_Base.OnSuccess
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nRemainingResources            ( CPF_Parm )

void UBioSeqAct_SkillGame_Base::OnSuccess ( int nRemainingResources )
{
	static UFunction* pFnOnSuccess = NULL;

	if ( ! pFnOnSuccess )
		pFnOnSuccess = (UFunction*) UObject::GObjObjects()->Data[ 45612 ];

	UBioSeqAct_SkillGame_Base_execOnSuccess_Parms OnSuccess_Parms;
	OnSuccess_Parms.nRemainingResources = nRemainingResources;

	pFnOnSuccess->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSuccess, &OnSuccess_Parms, NULL );

	pFnOnSuccess->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_SkillGame_Bypass.OnFailure
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSeqAct_SkillGame_Bypass::OnFailure ( )
{
	static UFunction* pFnOnFailure = NULL;

	if ( ! pFnOnFailure )
		pFnOnFailure = (UFunction*) UObject::GObjObjects()->Data[ 45621 ];

	UBioSeqAct_SkillGame_Bypass_execOnFailure_Parms OnFailure_Parms;

	pFnOnFailure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnFailure, &OnFailure_Parms, NULL );

	pFnOnFailure->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_SkillGame_Bypass.OnSuccess
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nRemainingResources            ( CPF_Parm )

void UBioSeqAct_SkillGame_Bypass::OnSuccess ( int nRemainingResources )
{
	static UFunction* pFnOnSuccess = NULL;

	if ( ! pFnOnSuccess )
		pFnOnSuccess = (UFunction*) UObject::GObjObjects()->Data[ 45619 ];

	UBioSeqAct_SkillGame_Bypass_execOnSuccess_Parms OnSuccess_Parms;
	OnSuccess_Parms.nRemainingResources = nRemainingResources;

	pFnOnSuccess->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSuccess, &OnSuccess_Parms, NULL );

	pFnOnSuccess->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_SkillGame_Decryption.OnFailure
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSeqAct_SkillGame_Decryption::OnFailure ( )
{
	static UFunction* pFnOnFailure = NULL;

	if ( ! pFnOnFailure )
		pFnOnFailure = (UFunction*) UObject::GObjObjects()->Data[ 45627 ];

	UBioSeqAct_SkillGame_Decryption_execOnFailure_Parms OnFailure_Parms;

	pFnOnFailure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnFailure, &OnFailure_Parms, NULL );

	pFnOnFailure->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_SkillGame_Decryption.OnSuccess
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nRemainingResources            ( CPF_Parm )

void UBioSeqAct_SkillGame_Decryption::OnSuccess ( int nRemainingResources )
{
	static UFunction* pFnOnSuccess = NULL;

	if ( ! pFnOnSuccess )
		pFnOnSuccess = (UFunction*) UObject::GObjObjects()->Data[ 45625 ];

	UBioSeqAct_SkillGame_Decryption_execOnSuccess_Parms OnSuccess_Parms;
	OnSuccess_Parms.nRemainingResources = nRemainingResources;

	pFnOnSuccess->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSuccess, &OnSuccess_Parms, NULL );

	pFnOnSuccess->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqAct_StageSwitchCamera.BioGetCameraNumber
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioSeqAct_StageSwitchCamera::BioGetCameraNumber ( )
{
	static UFunction* pFnBioGetCameraNumber = NULL;

	if ( ! pFnBioGetCameraNumber )
		pFnBioGetCameraNumber = (UFunction*) UObject::GObjObjects()->Data[ 45657 ];

	UBioSeqAct_StageSwitchCamera_execBioGetCameraNumber_Parms BioGetCameraNumber_Parms;

	pFnBioGetCameraNumber->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioGetCameraNumber, &BioGetCameraNumber_Parms, NULL );

	pFnBioGetCameraNumber->FunctionFlags |= 0x400;

	return BioGetCameraNumber_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_StartConversation.ConversationStart
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDelta                         ( CPF_Parm )

bool UBioSeqAct_StartConversation::ConversationStart ( float fDelta )
{
	static UFunction* pFnConversationStart = NULL;

	if ( ! pFnConversationStart )
		pFnConversationStart = (UFunction*) UObject::GObjObjects()->Data[ 45670 ];

	UBioSeqAct_StartConversation_execConversationStart_Parms ConversationStart_Parms;
	ConversationStart_Parms.fDelta = fDelta;

	pFnConversationStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConversationStart, &ConversationStart_Parms, NULL );

	pFnConversationStart->FunctionFlags |= 0x400;

	return ConversationStart_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_WalkWaypointSet.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_WalkWaypointSet::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45820 ];

	UBioSeqAct_WalkWaypointSet_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqData.OnDisabled
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ABioAiController*        oController                    ( CPF_Parm )
// unsigned long                  bStarted                       ( CPF_Parm )

void UBioSeqData::eventOnDisabled ( class ABioAiController* oController, unsigned long bStarted )
{
	static UFunction* pFnOnDisabled = NULL;

	if ( ! pFnOnDisabled )
		pFnOnDisabled = (UFunction*) UObject::GObjObjects()->Data[ 45880 ];

	UBioSeqData_eventOnDisabled_Parms OnDisabled_Parms;
	OnDisabled_Parms.oController = oController;
	OnDisabled_Parms.bStarted = bStarted;

	this->ProcessEvent ( pFnOnDisabled, &OnDisabled_Parms, NULL );
};

// Function SFXGame.BioSeqData.CanDisable
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioAiController*        oController                    ( CPF_Parm )
// unsigned char                  eEnableType                    ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

bool UBioSeqData::eventCanDisable ( class ABioAiController* oController, unsigned char eEnableType, struct FName nmSubType )
{
	static UFunction* pFnCanDisable = NULL;

	if ( ! pFnCanDisable )
		pFnCanDisable = (UFunction*) UObject::GObjObjects()->Data[ 45875 ];

	UBioSeqData_eventCanDisable_Parms CanDisable_Parms;
	CanDisable_Parms.oController = oController;
	CanDisable_Parms.eEnableType = eEnableType;
	memcpy ( &CanDisable_Parms.nmSubType, &nmSubType, 0x8 );

	this->ProcessEvent ( pFnCanDisable, &CanDisable_Parms, NULL );

	return CanDisable_Parms.ReturnValue;
};

// Function SFXGame.BioSeqData.GetDebugDescription
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioSeqData::eventGetDebugDescription ( )
{
	static UFunction* pFnGetDebugDescription = NULL;

	if ( ! pFnGetDebugDescription )
		pFnGetDebugDescription = (UFunction*) UObject::GObjObjects()->Data[ 45873 ];

	UBioSeqData_eventGetDebugDescription_Parms GetDebugDescription_Parms;

	this->ProcessEvent ( pFnGetDebugDescription, &GetDebugDescription_Parms, NULL );

	return GetDebugDescription_Parms.ReturnValue;
};

// Function SFXGame.BioSeqData.CancelOnLOS
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioAiController*        oController                    ( CPF_Parm )
// class APawn*                   oLOSTarget                     ( CPF_Parm )

bool UBioSeqData::eventCancelOnLOS ( class ABioAiController* oController, class APawn* oLOSTarget )
{
	static UFunction* pFnCancelOnLOS = NULL;

	if ( ! pFnCancelOnLOS )
		pFnCancelOnLOS = (UFunction*) UObject::GObjObjects()->Data[ 45869 ];

	UBioSeqData_eventCancelOnLOS_Parms CancelOnLOS_Parms;
	CancelOnLOS_Parms.oController = oController;
	CancelOnLOS_Parms.oLOSTarget = oLOSTarget;

	this->ProcessEvent ( pFnCancelOnLOS, &CancelOnLOS_Parms, NULL );

	return CancelOnLOS_Parms.ReturnValue;
};

// Function SFXGame.BioSeqData.OnCancel
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ABioAiController*        oController                    ( CPF_Parm )
// unsigned long                  bStarted                       ( CPF_Parm )

void UBioSeqData::eventOnCancel ( class ABioAiController* oController, unsigned long bStarted )
{
	static UFunction* pFnOnCancel = NULL;

	if ( ! pFnOnCancel )
		pFnOnCancel = (UFunction*) UObject::GObjObjects()->Data[ 45866 ];

	UBioSeqData_eventOnCancel_Parms OnCancel_Parms;
	OnCancel_Parms.oController = oController;
	OnCancel_Parms.bStarted = bStarted;

	this->ProcessEvent ( pFnOnCancel, &OnCancel_Parms, NULL );
};

// Function SFXGame.BioSeqData.OnStart
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ABioAiController*        oController                    ( CPF_Parm )

void UBioSeqData::eventOnStart ( class ABioAiController* oController )
{
	static UFunction* pFnOnStart = NULL;

	if ( ! pFnOnStart )
		pFnOnStart = (UFunction*) UObject::GObjObjects()->Data[ 45864 ];

	UBioSeqData_eventOnStart_Parms OnStart_Parms;
	OnStart_Parms.oController = oController;

	this->ProcessEvent ( pFnOnStart, &OnStart_Parms, NULL );
};

// Function SFXGame.BioSeqData.CanCancel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioAiController*        oController                    ( CPF_Parm )

bool UBioSeqData::eventCanCancel ( class ABioAiController* oController )
{
	static UFunction* pFnCanCancel = NULL;

	if ( ! pFnCanCancel )
		pFnCanCancel = (UFunction*) UObject::GObjObjects()->Data[ 45861 ];

	UBioSeqData_eventCanCancel_Parms CanCancel_Parms;
	CanCancel_Parms.oController = oController;

	this->ProcessEvent ( pFnCanCancel, &CanCancel_Parms, NULL );

	return CanCancel_Parms.ReturnValue;
};

// Function SFXGame.BioSeqData.OnTick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioAiController*        oController                    ( CPF_Parm )
// float                          fDeltaT                        ( CPF_Parm )

bool UBioSeqData::eventOnTick ( class ABioAiController* oController, float fDeltaT )
{
	static UFunction* pFnOnTick = NULL;

	if ( ! pFnOnTick )
		pFnOnTick = (UFunction*) UObject::GObjObjects()->Data[ 45857 ];

	UBioSeqData_eventOnTick_Parms OnTick_Parms;
	OnTick_Parms.oController = oController;
	OnTick_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnOnTick, &OnTick_Parms, NULL );

	return OnTick_Parms.ReturnValue;
};

// Function SFXGame.BioSeqData.GetPawnBehavior
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioEpicPawnBehavior*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

class UBioEpicPawnBehavior* UBioSeqData::GetPawnBehavior ( class AActor* oActor )
{
	static UFunction* pFnGetPawnBehavior = NULL;

	if ( ! pFnGetPawnBehavior )
		pFnGetPawnBehavior = (UFunction*) UObject::GObjObjects()->Data[ 45854 ];

	UBioSeqData_execGetPawnBehavior_Parms GetPawnBehavior_Parms;
	GetPawnBehavior_Parms.oActor = oActor;

	pFnGetPawnBehavior->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPawnBehavior, &GetPawnBehavior_Parms, NULL );

	pFnGetPawnBehavior->FunctionFlags |= 0x400;

	return GetPawnBehavior_Parms.ReturnValue;
};

// Function SFXGame.BioSeqData_MoveToPoint.ResetMoveTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 vNewLocation                   ( CPF_Parm )
// float                          fMoveTolerance                 ( CPF_OptionalParm | CPF_Parm )

void UBioSeqData_MoveToPoint::ResetMoveTarget ( struct FVector vNewLocation, float fMoveTolerance )
{
	static UFunction* pFnResetMoveTarget = NULL;

	if ( ! pFnResetMoveTarget )
		pFnResetMoveTarget = (UFunction*) UObject::GObjObjects()->Data[ 45946 ];

	UBioSeqData_MoveToPoint_execResetMoveTarget_Parms ResetMoveTarget_Parms;
	memcpy ( &ResetMoveTarget_Parms.vNewLocation, &vNewLocation, 0xC );
	ResetMoveTarget_Parms.fMoveTolerance = fMoveTolerance;

	pFnResetMoveTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetMoveTarget, &ResetMoveTarget_Parms, NULL );

	pFnResetMoveTarget->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSeqData_UsePower.CanCancel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioAiController*        oController                    ( CPF_Parm )

bool UBioSeqData_UsePower::eventCanCancel ( class ABioAiController* oController )
{
	static UFunction* pFnCanCancel = NULL;

	if ( ! pFnCanCancel )
		pFnCanCancel = (UFunction*) UObject::GObjObjects()->Data[ 45996 ];

	UBioSeqData_UsePower_eventCanCancel_Parms CanCancel_Parms;
	CanCancel_Parms.oController = oController;

	this->ProcessEvent ( pFnCanCancel, &CanCancel_Parms, NULL );

	return CanCancel_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_AIFactory.Deactivated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_AIFactory::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 59738 ];

	USFXSeqAct_AIFactory_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_AIFactory.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_AIFactory::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 59737 ];

	USFXSeqAct_AIFactory_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_AIGoHere.ScriptPreActorHandle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  inActor                        ( CPF_Parm )

void USFXSeqAct_AIGoHere::ScriptPreActorHandle ( class AActor* inActor )
{
	static UFunction* pFnScriptPreActorHandle = NULL;

	if ( ! pFnScriptPreActorHandle )
		pFnScriptPreActorHandle = (UFunction*) UObject::GObjObjects()->Data[ 59768 ];

	USFXSeqAct_AIGoHere_execScriptPreActorHandle_Parms ScriptPreActorHandle_Parms;
	ScriptPreActorHandle_Parms.inActor = inActor;

	pFnScriptPreActorHandle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScriptPreActorHandle, &ScriptPreActorHandle_Parms, NULL );

	pFnScriptPreActorHandle->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSeqAct_AIGoHere.TryInvalidateTargetFlank
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXSeqAct_AIGoHere::TryInvalidateTargetFlank ( )
{
	static UFunction* pFnTryInvalidateTargetFlank = NULL;

	if ( ! pFnTryInvalidateTargetFlank )
		pFnTryInvalidateTargetFlank = (UFunction*) UObject::GObjObjects()->Data[ 59766 ];

	USFXSeqAct_AIGoHere_execTryInvalidateTargetFlank_Parms TryInvalidateTargetFlank_Parms;

	this->ProcessEvent ( pFnTryInvalidateTargetFlank, &TryInvalidateTargetFlank_Parms, NULL );

	return TryInvalidateTargetFlank_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_AIGoHere.TryInvalidateTargetRange
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fRangeToTargetInUU             ( CPF_Parm )

bool USFXSeqAct_AIGoHere::TryInvalidateTargetRange ( float fRangeToTargetInUU )
{
	static UFunction* pFnTryInvalidateTargetRange = NULL;

	if ( ! pFnTryInvalidateTargetRange )
		pFnTryInvalidateTargetRange = (UFunction*) UObject::GObjObjects()->Data[ 59763 ];

	USFXSeqAct_AIGoHere_execTryInvalidateTargetRange_Parms TryInvalidateTargetRange_Parms;
	TryInvalidateTargetRange_Parms.fRangeToTargetInUU = fRangeToTargetInUU;

	this->ProcessEvent ( pFnTryInvalidateTargetRange, &TryInvalidateTargetRange_Parms, NULL );

	return TryInvalidateTargetRange_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_AIGoHere.ResetUpdateTimer
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_AIGoHere::ResetUpdateTimer ( )
{
	static UFunction* pFnResetUpdateTimer = NULL;

	if ( ! pFnResetUpdateTimer )
		pFnResetUpdateTimer = (UFunction*) UObject::GObjObjects()->Data[ 59762 ];

	USFXSeqAct_AIGoHere_execResetUpdateTimer_Parms ResetUpdateTimer_Parms;

	this->ProcessEvent ( pFnResetUpdateTimer, &ResetUpdateTimer_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_AIGoHere.ClearGoHereTarget
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_AIGoHere::ClearGoHereTarget ( )
{
	static UFunction* pFnClearGoHereTarget = NULL;

	if ( ! pFnClearGoHereTarget )
		pFnClearGoHereTarget = (UFunction*) UObject::GObjObjects()->Data[ 59760 ];

	USFXSeqAct_AIGoHere_execClearGoHereTarget_Parms ClearGoHereTarget_Parms;

	this->ProcessEvent ( pFnClearGoHereTarget, &ClearGoHereTarget_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_AIGoHere.InvalidateGoHereTarget
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_AIGoHere::InvalidateGoHereTarget ( )
{
	static UFunction* pFnInvalidateGoHereTarget = NULL;

	if ( ! pFnInvalidateGoHereTarget )
		pFnInvalidateGoHereTarget = (UFunction*) UObject::GObjObjects()->Data[ 59758 ];

	USFXSeqAct_AIGoHere_execInvalidateGoHereTarget_Parms InvalidateGoHereTarget_Parms;

	this->ProcessEvent ( pFnInvalidateGoHereTarget, &InvalidateGoHereTarget_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_AIGoHere.UpdateOp
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool USFXSeqAct_AIGoHere::eventUpdateOp ( float DeltaTime )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 59754 ];

	USFXSeqAct_AIGoHere_eventUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_AIGoHere.Deactivated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_AIGoHere::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 59752 ];

	USFXSeqAct_AIGoHere_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_AIGoHere.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_AIGoHere::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 59750 ];

	USFXSeqAct_AIGoHere_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChangeBehaviour.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_ChangeBehaviour::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 59820 ];

	USFXSeqAct_ChangeBehaviour_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_CollectorPossess.PossessPawn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )

void USFXSeqAct_CollectorPossess::eventPossessPawn ( class ABioPawn* oPawn )
{
	static UFunction* pFnPossessPawn = NULL;

	if ( ! pFnPossessPawn )
		pFnPossessPawn = (UFunction*) UObject::GObjObjects()->Data[ 60014 ];

	USFXSeqAct_CollectorPossess_eventPossessPawn_Parms PossessPawn_Parms;
	PossessPawn_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnPossessPawn, &PossessPawn_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_FireWeaponAt.FireWeapon
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  pTarget                        ( CPF_Parm )

void USFXSeqAct_FireWeaponAt::eventFireWeapon ( class AActor* pTarget )
{
	static UFunction* pFnFireWeapon = NULL;

	if ( ! pFnFireWeapon )
		pFnFireWeapon = (UFunction*) UObject::GObjObjects()->Data[ 60049 ];

	USFXSeqAct_FireWeaponAt_eventFireWeapon_Parms FireWeapon_Parms;
	FireWeapon_Parms.pTarget = pTarget;

	this->ProcessEvent ( pFnFireWeapon, &FireWeapon_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_FireWeaponAt.CancelFire
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_FireWeaponAt::eventCancelFire ( )
{
	static UFunction* pFnCancelFire = NULL;

	if ( ! pFnCancelFire )
		pFnCancelFire = (UFunction*) UObject::GObjObjects()->Data[ 60047 ];

	USFXSeqAct_FireWeaponAt_eventCancelFire_Parms CancelFire_Parms;

	this->ProcessEvent ( pFnCancelFire, &CancelFire_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_FireWeaponAt.FireWeaponCallback
// [0x00020002] 
// Parameters infos:
// int                            nReason                        ( CPF_Parm )

void USFXSeqAct_FireWeaponAt::FireWeaponCallback ( int nReason )
{
	static UFunction* pFnFireWeaponCallback = NULL;

	if ( ! pFnFireWeaponCallback )
		pFnFireWeaponCallback = (UFunction*) UObject::GObjObjects()->Data[ 60045 ];

	USFXSeqAct_FireWeaponAt_execFireWeaponCallback_Parms FireWeaponCallback_Parms;
	FireWeaponCallback_Parms.nReason = nReason;

	this->ProcessEvent ( pFnFireWeaponCallback, &FireWeaponCallback_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_LegacyDataCallback.ApplyCanonPlotStates
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXSeqAct_LegacyDataCallback::ApplyCanonPlotStates ( )
{
	static UFunction* pFnApplyCanonPlotStates = NULL;

	if ( ! pFnApplyCanonPlotStates )
		pFnApplyCanonPlotStates = (UFunction*) UObject::GObjObjects()->Data[ 60199 ];

	USFXSeqAct_LegacyDataCallback_execApplyCanonPlotStates_Parms ApplyCanonPlotStates_Parms;

	this->ProcessEvent ( pFnApplyCanonPlotStates, &ApplyCanonPlotStates_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_LegacyDataCallback.PingBlazeReconnect
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXSeqAct_LegacyDataCallback::PingBlazeReconnect ( )
{
	static UFunction* pFnPingBlazeReconnect = NULL;

	if ( ! pFnPingBlazeReconnect )
		pFnPingBlazeReconnect = (UFunction*) UObject::GObjObjects()->Data[ 60200 ];

	USFXSeqAct_LegacyDataCallback_execPingBlazeReconnect_Parms PingBlazeReconnect_Parms;

	this->ProcessEvent ( pFnPingBlazeReconnect, &PingBlazeReconnect_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_LegacyDataCallback.TryImport
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXSeqAct_LegacyDataCallback::TryImport ( )
{
	static UFunction* pFnTryImport = NULL;

	if ( ! pFnTryImport )
		pFnTryImport = (UFunction*) UObject::GObjObjects()->Data[ 60201 ];

	USFXSeqAct_LegacyDataCallback_execTryImport_Parms TryImport_Parms;

	pFnTryImport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTryImport, &TryImport_Parms, NULL );

	pFnTryImport->FunctionFlags |= 0x400;

	return TryImport_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_LegacyDataCallback.ME2ImportPlotState
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXSeqAct_LegacyDataCallback::ME2ImportPlotState ( )
{
	static UFunction* pFnME2ImportPlotState = NULL;

	if ( ! pFnME2ImportPlotState )
		pFnME2ImportPlotState = (UFunction*) UObject::GObjObjects()->Data[ 60198 ];

	USFXSeqAct_LegacyDataCallback_execME2ImportPlotState_Parms ME2ImportPlotState_Parms;

	this->ProcessEvent ( pFnME2ImportPlotState, &ME2ImportPlotState_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_LegacyDataCallback.UpdateOp
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool USFXSeqAct_LegacyDataCallback::eventUpdateOp ( float DeltaTime )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 60191 ];

	USFXSeqAct_LegacyDataCallback_eventUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_LegacyDataCallback.DetermineParams
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXSeqAct_LegacyDataCallback::DetermineParams ( )
{
	static UFunction* pFnDetermineParams = NULL;

	if ( ! pFnDetermineParams )
		pFnDetermineParams = (UFunction*) UObject::GObjObjects()->Data[ 60190 ];

	USFXSeqAct_LegacyDataCallback_execDetermineParams_Parms DetermineParams_Parms;

	pFnDetermineParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetermineParams, &DetermineParams_Parms, NULL );

	pFnDetermineParams->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSeqAct_LegacyDataCallback.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_LegacyDataCallback::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60189 ];

	USFXSeqAct_LegacyDataCallback_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_MoveToNode.MoveTo
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_MoveToNode::eventMoveTo ( )
{
	static UFunction* pFnMoveTo = NULL;

	if ( ! pFnMoveTo )
		pFnMoveTo = (UFunction*) UObject::GObjObjects()->Data[ 60246 ];

	USFXSeqAct_MoveToNode_eventMoveTo_Parms MoveTo_Parms;

	this->ProcessEvent ( pFnMoveTo, &MoveTo_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_MoveToNode.CancelMove
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_MoveToNode::eventCancelMove ( )
{
	static UFunction* pFnCancelMove = NULL;

	if ( ! pFnCancelMove )
		pFnCancelMove = (UFunction*) UObject::GObjObjects()->Data[ 60244 ];

	USFXSeqAct_MoveToNode_eventCancelMove_Parms CancelMove_Parms;

	this->ProcessEvent ( pFnCancelMove, &CancelMove_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_MoveToNode.MoveToCallback
// [0x00020002] 
// Parameters infos:
// int                            nReason                        ( CPF_Parm )

void USFXSeqAct_MoveToNode::MoveToCallback ( int nReason )
{
	static UFunction* pFnMoveToCallback = NULL;

	if ( ! pFnMoveToCallback )
		pFnMoveToCallback = (UFunction*) UObject::GObjObjects()->Data[ 60242 ];

	USFXSeqAct_MoveToNode_execMoveToCallback_Parms MoveToCallback_Parms;
	MoveToCallback_Parms.nReason = nReason;

	this->ProcessEvent ( pFnMoveToCallback, &MoveToCallback_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_SetAreaMap.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_SetAreaMap::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60462 ];

	USFXSeqAct_SetAreaMap_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ShowPersonalizationUI.Deactivated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ShowPersonalizationUI::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 60581 ];

	USFXSeqAct_ShowPersonalizationUI_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ShowPersonalizationUI.OnComplete
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ShowPersonalizationUI::OnComplete ( )
{
	static UFunction* pFnOnComplete = NULL;

	if ( ! pFnOnComplete )
		pFnOnComplete = (UFunction*) UObject::GObjObjects()->Data[ 60580 ];

	USFXSeqAct_ShowPersonalizationUI_execOnComplete_Parms OnComplete_Parms;

	this->ProcessEvent ( pFnOnComplete, &OnComplete_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ShowPersonalizationUI.UpdateOp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool USFXSeqAct_ShowPersonalizationUI::UpdateOp ( float fDeltaT )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 60577 ];

	USFXSeqAct_ShowPersonalizationUI_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ShowPersonalizationUI.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ShowPersonalizationUI::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60574 ];

	USFXSeqAct_ShowPersonalizationUI_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_StartConversation.ConversationStart
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDelta                         ( CPF_Parm )

bool USFXSeqAct_StartConversation::ConversationStart ( float fDelta )
{
	static UFunction* pFnConversationStart = NULL;

	if ( ! pFnConversationStart )
		pFnConversationStart = (UFunction*) UObject::GObjObjects()->Data[ 60586 ];

	USFXSeqAct_StartConversation_execConversationStart_Parms ConversationStart_Parms;
	ConversationStart_Parms.fDelta = fDelta;

	pFnConversationStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConversationStart, &ConversationStart_Parms, NULL );

	pFnConversationStart->FunctionFlags |= 0x400;

	return ConversationStart_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_UsePowerOn.UsePower
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  pTarget                        ( CPF_Parm )

void USFXSeqAct_UsePowerOn::eventUsePower ( class AActor* pTarget )
{
	static UFunction* pFnUsePower = NULL;

	if ( ! pFnUsePower )
		pFnUsePower = (UFunction*) UObject::GObjObjects()->Data[ 60636 ];

	USFXSeqAct_UsePowerOn_eventUsePower_Parms UsePower_Parms;
	UsePower_Parms.pTarget = pTarget;

	this->ProcessEvent ( pFnUsePower, &UsePower_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_UsePowerOn.CancelPower
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_UsePowerOn::eventCancelPower ( )
{
	static UFunction* pFnCancelPower = NULL;

	if ( ! pFnCancelPower )
		pFnCancelPower = (UFunction*) UObject::GObjObjects()->Data[ 60634 ];

	USFXSeqAct_UsePowerOn_eventCancelPower_Parms CancelPower_Parms;

	this->ProcessEvent ( pFnCancelPower, &CancelPower_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_UsePowerOn.UsePowerCallback
// [0x00020002] 
// Parameters infos:
// int                            nReason                        ( CPF_Parm )

void USFXSeqAct_UsePowerOn::UsePowerCallback ( int nReason )
{
	static UFunction* pFnUsePowerCallback = NULL;

	if ( ! pFnUsePowerCallback )
		pFnUsePowerCallback = (UFunction*) UObject::GObjObjects()->Data[ 60632 ];

	USFXSeqAct_UsePowerOn_execUsePowerCallback_Parms UsePowerCallback_Parms;
	UsePowerCallback_Parms.nReason = nReason;

	this->ProcessEvent ( pFnUsePowerCallback, &UsePowerCallback_Parms, NULL );
};

// Function SFXGame.BioCurveDrivenParameter.GetValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fTime                          ( CPF_Parm )
// float                          fScale                         ( CPF_OptionalParm | CPF_Parm )

float UBioCurveDrivenParameter::GetValue ( float fTime, float fScale )
{
	static UFunction* pFnGetValue = NULL;

	if ( ! pFnGetValue )
		pFnGetValue = (UFunction*) UObject::GObjObjects()->Data[ 34835 ];

	UBioCurveDrivenParameter_execGetValue_Parms GetValue_Parms;
	GetValue_Parms.fTime = fTime;
	GetValue_Parms.fScale = fScale;

	pFnGetValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetValue, &GetValue_Parms, NULL );

	pFnGetValue->FunctionFlags |= 0x400;

	return GetValue_Parms.ReturnValue;
};

// Function SFXGame.BioMetaVFX.ApplyEffect
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UBioMetaVFX*             MetaEffect                     ( CPF_Parm )
// class UObject*                 Target                         ( CPF_Parm )
// float                          fLifeTime                      ( CPF_OptionalParm | CPF_Parm )

void UBioMetaVFX::ApplyEffect ( class UBioMetaVFX* MetaEffect, class UObject* Target, float fLifeTime )
{
	static UFunction* pFnApplyEffect = NULL;

	if ( ! pFnApplyEffect )
		pFnApplyEffect = (UFunction*) UObject::GObjObjects()->Data[ 38557 ];

	UBioMetaVFX_execApplyEffect_Parms ApplyEffect_Parms;
	ApplyEffect_Parms.MetaEffect = MetaEffect;
	ApplyEffect_Parms.Target = Target;
	ApplyEffect_Parms.fLifeTime = fLifeTime;

	pFnApplyEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyEffect, &ApplyEffect_Parms, NULL );

	pFnApplyEffect->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMetaVFX.ApplyEffectByName
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sEffect                        ( CPF_Parm | CPF_NeedCtorLink )
// class UObject*                 Target                         ( CPF_Parm )
// float                          fLifeTime                      ( CPF_OptionalParm | CPF_Parm )

void UBioMetaVFX::ApplyEffectByName ( struct FString sEffect, class UObject* Target, float fLifeTime )
{
	static UFunction* pFnApplyEffectByName = NULL;

	if ( ! pFnApplyEffectByName )
		pFnApplyEffectByName = (UFunction*) UObject::GObjObjects()->Data[ 38553 ];

	UBioMetaVFX_execApplyEffectByName_Parms ApplyEffectByName_Parms;
	memcpy ( &ApplyEffectByName_Parms.sEffect, &sEffect, 0xC );
	ApplyEffectByName_Parms.Target = Target;
	ApplyEffectByName_Parms.fLifeTime = fLifeTime;

	pFnApplyEffectByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyEffectByName, &ApplyEffectByName_Parms, NULL );

	pFnApplyEffectByName->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVFXTemplate.InitializeTemplate
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioVFXTemplate::eventInitializeTemplate ( )
{
	static UFunction* pFnInitializeTemplate = NULL;

	if ( ! pFnInitializeTemplate )
		pFnInitializeTemplate = (UFunction*) UObject::GObjObjects()->Data[ 50891 ];

	UBioVFXTemplate_eventInitializeTemplate_Parms InitializeTemplate_Parms;

	this->ProcessEvent ( pFnInitializeTemplate, &InitializeTemplate_Parms, NULL );
};

// Function SFXGame.BioVisualEffect.OnComplete
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioVisualEffect::eventOnComplete ( )
{
	static UFunction* pFnOnComplete = NULL;

	if ( ! pFnOnComplete )
		pFnOnComplete = (UFunction*) UObject::GObjObjects()->Data[ 50954 ];

	ABioVisualEffect_eventOnComplete_Parms OnComplete_Parms;

	this->ProcessEvent ( pFnOnComplete, &OnComplete_Parms, NULL );
};

// Function SFXGame.BioVisualEffect.SetSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndexInSoundArray             ( CPF_Parm )

bool ABioVisualEffect::SetSound ( int nIndexInSoundArray )
{
	static UFunction* pFnSetSound = NULL;

	if ( ! pFnSetSound )
		pFnSetSound = (UFunction*) UObject::GObjObjects()->Data[ 50951 ];

	ABioVisualEffect_execSetSound_Parms SetSound_Parms;
	SetSound_Parms.nIndexInSoundArray = nIndexInSoundArray;

	pFnSetSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSound, &SetSound_Parms, NULL );

	pFnSetSound->FunctionFlags |= 0x400;

	return SetSound_Parms.ReturnValue;
};

// Function SFXGame.BioVisualEffect.CreateVFXOnPosition
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class ABioVisualEffect*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioVFXTemplate*         a_pTemplate                    ( CPF_Parm )
// struct FVector                 vPosition                      ( CPF_Parm )
// struct FRotator                rOrientation                   ( CPF_Parm )
// float                          fLifeTime                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseVFXPool                    ( CPF_OptionalParm | CPF_Parm )

class ABioVisualEffect* ABioVisualEffect::CreateVFXOnPosition ( class UBioVFXTemplate* a_pTemplate, struct FVector vPosition, struct FRotator rOrientation, float fLifeTime, unsigned long bUseVFXPool )
{
	static UFunction* pFnCreateVFXOnPosition = NULL;

	if ( ! pFnCreateVFXOnPosition )
		pFnCreateVFXOnPosition = (UFunction*) UObject::GObjObjects()->Data[ 50944 ];

	ABioVisualEffect_execCreateVFXOnPosition_Parms CreateVFXOnPosition_Parms;
	CreateVFXOnPosition_Parms.a_pTemplate = a_pTemplate;
	memcpy ( &CreateVFXOnPosition_Parms.vPosition, &vPosition, 0xC );
	memcpy ( &CreateVFXOnPosition_Parms.rOrientation, &rOrientation, 0xC );
	CreateVFXOnPosition_Parms.fLifeTime = fLifeTime;
	CreateVFXOnPosition_Parms.bUseVFXPool = bUseVFXPool;

	pFnCreateVFXOnPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateVFXOnPosition, &CreateVFXOnPosition_Parms, NULL );

	pFnCreateVFXOnPosition->FunctionFlags |= 0x400;

	return CreateVFXOnPosition_Parms.ReturnValue;
};

// Function SFXGame.BioVisualEffect.CreateVFXOnMesh
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class ABioVisualEffect*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioVFXTemplate*         a_pTemplate                    ( CPF_Parm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FName                   sBoneName                      ( CPF_Parm )
// float                          fLifeTime                      ( CPF_OptionalParm | CPF_Parm )
// class USkeletalMeshComponent*  mTargetMesh                    ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )
// unsigned long                  bUseVFXPool                    ( CPF_OptionalParm | CPF_Parm )

class ABioVisualEffect* ABioVisualEffect::CreateVFXOnMesh ( class UBioVFXTemplate* a_pTemplate, class AActor* Target, struct FName sBoneName, float fLifeTime, class USkeletalMeshComponent* mTargetMesh, unsigned long bUseVFXPool )
{
	static UFunction* pFnCreateVFXOnMesh = NULL;

	if ( ! pFnCreateVFXOnMesh )
		pFnCreateVFXOnMesh = (UFunction*) UObject::GObjObjects()->Data[ 50936 ];

	ABioVisualEffect_execCreateVFXOnMesh_Parms CreateVFXOnMesh_Parms;
	CreateVFXOnMesh_Parms.a_pTemplate = a_pTemplate;
	CreateVFXOnMesh_Parms.Target = Target;
	memcpy ( &CreateVFXOnMesh_Parms.sBoneName, &sBoneName, 0x8 );
	CreateVFXOnMesh_Parms.fLifeTime = fLifeTime;
	CreateVFXOnMesh_Parms.mTargetMesh = mTargetMesh;
	CreateVFXOnMesh_Parms.bUseVFXPool = bUseVFXPool;

	pFnCreateVFXOnMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateVFXOnMesh, &CreateVFXOnMesh_Parms, NULL );

	pFnCreateVFXOnMesh->FunctionFlags |= 0x400;

	return CreateVFXOnMesh_Parms.ReturnValue;
};

// Function SFXGame.BioVisualEffect.CreateCrustEffect
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class ABioVisualEffect*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioVFXTemplate*         a_pTemplate                    ( CPF_Parm )
// class AActor*                  Target                         ( CPF_Parm )
// float                          fLifeTime                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseVFXPool                    ( CPF_OptionalParm | CPF_Parm )

class ABioVisualEffect* ABioVisualEffect::CreateCrustEffect ( class UBioVFXTemplate* a_pTemplate, class AActor* Target, float fLifeTime, unsigned long bUseVFXPool )
{
	static UFunction* pFnCreateCrustEffect = NULL;

	if ( ! pFnCreateCrustEffect )
		pFnCreateCrustEffect = (UFunction*) UObject::GObjObjects()->Data[ 50930 ];

	ABioVisualEffect_execCreateCrustEffect_Parms CreateCrustEffect_Parms;
	CreateCrustEffect_Parms.a_pTemplate = a_pTemplate;
	CreateCrustEffect_Parms.Target = Target;
	CreateCrustEffect_Parms.fLifeTime = fLifeTime;
	CreateCrustEffect_Parms.bUseVFXPool = bUseVFXPool;

	pFnCreateCrustEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateCrustEffect, &CreateCrustEffect_Parms, NULL );

	pFnCreateCrustEffect->FunctionFlags |= 0x400;

	return CreateCrustEffect_Parms.ReturnValue;
};

// Function SFXGame.BioVisualEffect.SetLifeTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fLife                          ( CPF_Parm )

void ABioVisualEffect::SetLifeTime ( float fLife )
{
	static UFunction* pFnSetLifeTime = NULL;

	if ( ! pFnSetLifeTime )
		pFnSetLifeTime = (UFunction*) UObject::GObjObjects()->Data[ 50928 ];

	ABioVisualEffect_execSetLifeTime_Parms SetLifeTime_Parms;
	SetLifeTime_Parms.fLife = fLife;

	pFnSetLifeTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLifeTime, &SetLifeTime_Parms, NULL );

	pFnSetLifeTime->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVisualEffect.SetVectorParameter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   sParameter                     ( CPF_Parm )
// struct FVector                 vValue                         ( CPF_Parm )

void ABioVisualEffect::SetVectorParameter ( struct FName sParameter, struct FVector vValue )
{
	static UFunction* pFnSetVectorParameter = NULL;

	if ( ! pFnSetVectorParameter )
		pFnSetVectorParameter = (UFunction*) UObject::GObjObjects()->Data[ 50925 ];

	ABioVisualEffect_execSetVectorParameter_Parms SetVectorParameter_Parms;
	memcpy ( &SetVectorParameter_Parms.sParameter, &sParameter, 0x8 );
	memcpy ( &SetVectorParameter_Parms.vValue, &vValue, 0xC );

	pFnSetVectorParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameter, &SetVectorParameter_Parms, NULL );

	pFnSetVectorParameter->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVisualEffect.SetScalarParameter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   sParameter                     ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )

void ABioVisualEffect::SetScalarParameter ( struct FName sParameter, float fValue )
{
	static UFunction* pFnSetScalarParameter = NULL;

	if ( ! pFnSetScalarParameter )
		pFnSetScalarParameter = (UFunction*) UObject::GObjObjects()->Data[ 50922 ];

	ABioVisualEffect_execSetScalarParameter_Parms SetScalarParameter_Parms;
	memcpy ( &SetScalarParameter_Parms.sParameter, &sParameter, 0x8 );
	SetScalarParameter_Parms.fValue = fValue;

	pFnSetScalarParameter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameter, &SetScalarParameter_Parms, NULL );

	pFnSetScalarParameter->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVisualEffect.GetStateDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eState                         ( CPF_Parm )

float ABioVisualEffect::GetStateDuration ( unsigned char eState )
{
	static UFunction* pFnGetStateDuration = NULL;

	if ( ! pFnGetStateDuration )
		pFnGetStateDuration = (UFunction*) UObject::GObjObjects()->Data[ 50919 ];

	ABioVisualEffect_execGetStateDuration_Parms GetStateDuration_Parms;
	GetStateDuration_Parms.eState = eState;

	pFnGetStateDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStateDuration, &GetStateDuration_Parms, NULL );

	pFnGetStateDuration->FunctionFlags |= 0x400;

	return GetStateDuration_Parms.ReturnValue;
};

// Function SFXGame.BioVisualEffect.GetEffectDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioVisualEffect::GetEffectDuration ( )
{
	static UFunction* pFnGetEffectDuration = NULL;

	if ( ! pFnGetEffectDuration )
		pFnGetEffectDuration = (UFunction*) UObject::GObjObjects()->Data[ 50917 ];

	ABioVisualEffect_execGetEffectDuration_Parms GetEffectDuration_Parms;

	pFnGetEffectDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectDuration, &GetEffectDuration_Parms, NULL );

	pFnGetEffectDuration->FunctionFlags |= 0x400;

	return GetEffectDuration_Parms.ReturnValue;
};

// Function SFXGame.BioVisualEffect.DestroyInstance
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioVisualEffect::DestroyInstance ( )
{
	static UFunction* pFnDestroyInstance = NULL;

	if ( ! pFnDestroyInstance )
		pFnDestroyInstance = (UFunction*) UObject::GObjObjects()->Data[ 50916 ];

	ABioVisualEffect_execDestroyInstance_Parms DestroyInstance_Parms;

	pFnDestroyInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroyInstance, &DestroyInstance_Parms, NULL );

	pFnDestroyInstance->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVisualEffect.IsAttached
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioVisualEffect::IsAttached ( )
{
	static UFunction* pFnIsAttached = NULL;

	if ( ! pFnIsAttached )
		pFnIsAttached = (UFunction*) UObject::GObjObjects()->Data[ 50914 ];

	ABioVisualEffect_execIsAttached_Parms IsAttached_Parms;

	pFnIsAttached->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAttached, &IsAttached_Parms, NULL );

	pFnIsAttached->FunctionFlags |= 0x400;

	return IsAttached_Parms.ReturnValue;
};

// Function SFXGame.BioVisualEffect.SetBasePrefab
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPrefab*                 pBase                          ( CPF_Parm )

bool ABioVisualEffect::SetBasePrefab ( class UPrefab* pBase )
{
	static UFunction* pFnSetBasePrefab = NULL;

	if ( ! pFnSetBasePrefab )
		pFnSetBasePrefab = (UFunction*) UObject::GObjObjects()->Data[ 50911 ];

	ABioVisualEffect_execSetBasePrefab_Parms SetBasePrefab_Parms;
	SetBasePrefab_Parms.pBase = pBase;

	pFnSetBasePrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBasePrefab, &SetBasePrefab_Parms, NULL );

	pFnSetBasePrefab->FunctionFlags |= 0x400;

	return SetBasePrefab_Parms.ReturnValue;
};

// Function SFXGame.BioVisualEffect.SetState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eState                         ( CPF_Parm )
// unsigned long                  bForceSetState                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bPlayAudio                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceKill                     ( CPF_OptionalParm | CPF_Parm )

bool ABioVisualEffect::SetState ( unsigned char eState, unsigned long bForceSetState, unsigned long bPlayAudio, unsigned long bForceKill )
{
	static UFunction* pFnSetState = NULL;

	if ( ! pFnSetState )
		pFnSetState = (UFunction*) UObject::GObjObjects()->Data[ 50905 ];

	ABioVisualEffect_execSetState_Parms SetState_Parms;
	SetState_Parms.eState = eState;
	SetState_Parms.bForceSetState = bForceSetState;
	SetState_Parms.bPlayAudio = bPlayAudio;
	SetState_Parms.bForceKill = bForceKill;

	pFnSetState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetState, &SetState_Parms, NULL );

	pFnSetState->FunctionFlags |= 0x400;

	return SetState_Parms.ReturnValue;
};

// Function SFXGame.BioVisualEffect.SetPaused
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bPause                         ( CPF_Parm )
// unsigned long                  bForceRefresh                  ( CPF_OptionalParm | CPF_Parm )

bool ABioVisualEffect::SetPaused ( unsigned long bPause, unsigned long bForceRefresh )
{
	static UFunction* pFnSetPaused = NULL;

	if ( ! pFnSetPaused )
		pFnSetPaused = (UFunction*) UObject::GObjObjects()->Data[ 50901 ];

	ABioVisualEffect_execSetPaused_Parms SetPaused_Parms;
	SetPaused_Parms.bPause = bPause;
	SetPaused_Parms.bForceRefresh = bForceRefresh;

	pFnSetPaused->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPaused, &SetPaused_Parms, NULL );

	pFnSetPaused->FunctionFlags |= 0x400;

	return SetPaused_Parms.ReturnValue;
};

// Function SFXGame.BioVisualEffect.PauseOnDeath
// [0x00020002] 
// Parameters infos:
// unsigned long                  bPause                         ( CPF_Parm )

void ABioVisualEffect::PauseOnDeath ( unsigned long bPause )
{
	static UFunction* pFnPauseOnDeath = NULL;

	if ( ! pFnPauseOnDeath )
		pFnPauseOnDeath = (UFunction*) UObject::GObjObjects()->Data[ 50899 ];

	ABioVisualEffect_execPauseOnDeath_Parms PauseOnDeath_Parms;
	PauseOnDeath_Parms.bPause = bPause;

	this->ProcessEvent ( pFnPauseOnDeath, &PauseOnDeath_Parms, NULL );
};

// Function SFXGame.BioVisualEffect.LoopDuration
// [0x00020002] 
// Parameters infos:
// unsigned long                  bLoop                          ( CPF_Parm )

void ABioVisualEffect::LoopDuration ( unsigned long bLoop )
{
	static UFunction* pFnLoopDuration = NULL;

	if ( ! pFnLoopDuration )
		pFnLoopDuration = (UFunction*) UObject::GObjObjects()->Data[ 50897 ];

	ABioVisualEffect_execLoopDuration_Parms LoopDuration_Parms;
	LoopDuration_Parms.bLoop = bLoop;

	this->ProcessEvent ( pFnLoopDuration, &LoopDuration_Parms, NULL );
};

// Function SFXGame.BioVisualEffectPool.PrimePoolEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            a_nNumEffects                  ( CPF_OptionalParm | CPF_Parm )

void UBioVisualEffectPool::PrimePoolEffects ( int a_nNumEffects )
{
	static UFunction* pFnPrimePoolEffects = NULL;

	if ( ! pFnPrimePoolEffects )
		pFnPrimePoolEffects = (UFunction*) UObject::GObjObjects()->Data[ 50978 ];

	UBioVisualEffectPool_execPrimePoolEffects_Parms PrimePoolEffects_Parms;
	PrimePoolEffects_Parms.a_nNumEffects = a_nNumEffects;

	pFnPrimePoolEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrimePoolEffects, &PrimePoolEffects_Parms, NULL );

	pFnPrimePoolEffects->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVisualEffectPool.GetEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioVisualEffect*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ABioVisualEffect* UBioVisualEffectPool::GetEffect ( )
{
	static UFunction* pFnGetEffect = NULL;

	if ( ! pFnGetEffect )
		pFnGetEffect = (UFunction*) UObject::GObjObjects()->Data[ 50976 ];

	UBioVisualEffectPool_execGetEffect_Parms GetEffect_Parms;

	pFnGetEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffect, &GetEffect_Parms, NULL );

	pFnGetEffect->FunctionFlags |= 0x400;

	return GetEffect_Parms.ReturnValue;
};

// Function SFXGame.BioVisualEffectPool.SetPoolSize
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            a_nMaxSize                     ( CPF_Parm )
// int                            a_nMinSize                     ( CPF_Parm )

void UBioVisualEffectPool::SetPoolSize ( int a_nMaxSize, int a_nMinSize )
{
	static UFunction* pFnSetPoolSize = NULL;

	if ( ! pFnSetPoolSize )
		pFnSetPoolSize = (UFunction*) UObject::GObjObjects()->Data[ 50973 ];

	UBioVisualEffectPool_execSetPoolSize_Parms SetPoolSize_Parms;
	SetPoolSize_Parms.a_nMaxSize = a_nMaxSize;
	SetPoolSize_Parms.a_nMinSize = a_nMinSize;

	pFnSetPoolSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPoolSize, &SetPoolSize_Parms, NULL );

	pFnSetPoolSize->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVisualEffectPool.Initialize
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioVFXTemplate*         a_oTemplate                    ( CPF_Parm )
// int                            nMaxNumEffects                 ( CPF_Parm )
// int                            nMinNumEffects                 ( CPF_Parm )

void UBioVisualEffectPool::Initialize ( class UBioVFXTemplate* a_oTemplate, int nMaxNumEffects, int nMinNumEffects )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 50969 ];

	UBioVisualEffectPool_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.a_oTemplate = a_oTemplate;
	Initialize_Parms.nMaxNumEffects = nMaxNumEffects;
	Initialize_Parms.nMinNumEffects = nMinNumEffects;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function SFXGame.BioParticleModuleCollisionDecal.CreateDecal
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void UBioParticleModuleCollisionDecal::eventCreateDecal ( class UParticleSystemComponent* PSC, class UPrimitiveComponent* HitComponent, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnCreateDecal = NULL;

	if ( ! pFnCreateDecal )
		pFnCreateDecal = (UFunction*) UObject::GObjObjects()->Data[ 38880 ];

	UBioParticleModuleCollisionDecal_eventCreateDecal_Parms CreateDecal_Parms;
	CreateDecal_Parms.PSC = PSC;
	CreateDecal_Parms.HitComponent = HitComponent;
	memcpy ( &CreateDecal_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &CreateDecal_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnCreateDecal, &CreateDecal_Parms, NULL );
};

// Function SFXGame.SFXGameInterpTrack.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXGameInterpTrack::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 34810 ];

	USFXGameInterpTrack_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.SFXGameInterpTrack.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXGameInterpTrack::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 34808 ];

	USFXGameInterpTrack_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXGameInterpTrack.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXGameInterpTrack::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 34806 ];

	USFXGameInterpTrack_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXGameInterpTrack.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXGameInterpTrack::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 34804 ];

	USFXGameInterpTrack_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXGameInterpTrack.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameInterpTrack::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 34802 ];

	USFXGameInterpTrack_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioConvNodeTrackDebug.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioConvNodeTrackDebug::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 34822 ];

	UBioConvNodeTrackDebug_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.BioConvNodeTrackDebug.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioConvNodeTrackDebug::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 34820 ];

	UBioConvNodeTrackDebug_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioConvNodeTrackDebug.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioConvNodeTrackDebug::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 34818 ];

	UBioConvNodeTrackDebug_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.BioConvNodeTrackDebug.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioConvNodeTrackDebug::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 34816 ];

	UBioConvNodeTrackDebug_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.BioConvNodeTrackDebug.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioConvNodeTrackDebug::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 34814 ];

	UBioConvNodeTrackDebug_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackDOF.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackDOF::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 35763 ];

	UBioEvtSysTrackDOF_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackDOF.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackDOF::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 35761 ];

	UBioEvtSysTrackDOF_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackDOF.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackDOF::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 35759 ];

	UBioEvtSysTrackDOF_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackDOF.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackDOF::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 35757 ];

	UBioEvtSysTrackDOF_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackDOF.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEvtSysTrackDOF::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 35755 ];

	UBioEvtSysTrackDOF_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackFuncShot.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackFuncShot::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 35787 ];

	UBioEvtSysTrackFuncShot_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackFuncShot.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackFuncShot::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 35785 ];

	UBioEvtSysTrackFuncShot_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackFuncShot.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackFuncShot::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 35783 ];

	UBioEvtSysTrackFuncShot_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackFuncShot.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackFuncShot::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 35781 ];

	UBioEvtSysTrackFuncShot_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackFuncShot.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEvtSysTrackFuncShot::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 35779 ];

	UBioEvtSysTrackFuncShot_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackGesture.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackGesture::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 35870 ];

	UBioEvtSysTrackGesture_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackGesture.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackGesture::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 35868 ];

	UBioEvtSysTrackGesture_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackGesture.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackGesture::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 35866 ];

	UBioEvtSysTrackGesture_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackGesture.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackGesture::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 35864 ];

	UBioEvtSysTrackGesture_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackGesture.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEvtSysTrackGesture::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 35862 ];

	UBioEvtSysTrackGesture_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackGestureInst.FindActorByTagForScript
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmTagToFind                    ( CPF_Parm )
// class UInterpTrackInst*        pTrackInst                     ( CPF_Parm )
// unsigned long                  bTagIsStageNode                ( CPF_Parm )

class AActor* UBioEvtSysTrackGestureInst::FindActorByTagForScript ( struct FName nmTagToFind, class UInterpTrackInst* pTrackInst, unsigned long bTagIsStageNode )
{
	static UFunction* pFnFindActorByTagForScript = NULL;

	if ( ! pFnFindActorByTagForScript )
		pFnFindActorByTagForScript = (UFunction*) UObject::GObjObjects()->Data[ 35889 ];

	UBioEvtSysTrackGestureInst_execFindActorByTagForScript_Parms FindActorByTagForScript_Parms;
	memcpy ( &FindActorByTagForScript_Parms.nmTagToFind, &nmTagToFind, 0x8 );
	FindActorByTagForScript_Parms.pTrackInst = pTrackInst;
	FindActorByTagForScript_Parms.bTagIsStageNode = bTagIsStageNode;

	pFnFindActorByTagForScript->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindActorByTagForScript, &FindActorByTagForScript_Parms, NULL );

	pFnFindActorByTagForScript->FunctionFlags |= 0x400;

	return FindActorByTagForScript_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackInterrupt.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackInterrupt::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 35906 ];

	UBioEvtSysTrackInterrupt_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackInterrupt.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackInterrupt::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 35904 ];

	UBioEvtSysTrackInterrupt_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackInterrupt.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackInterrupt::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 35902 ];

	UBioEvtSysTrackInterrupt_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackInterrupt.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackInterrupt::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 35900 ];

	UBioEvtSysTrackInterrupt_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackInterrupt.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEvtSysTrackInterrupt::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 35898 ];

	UBioEvtSysTrackInterrupt_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackLighting.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackLighting::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 35919 ];

	UBioEvtSysTrackLighting_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackLighting.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackLighting::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 35917 ];

	UBioEvtSysTrackLighting_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackLighting.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackLighting::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 35915 ];

	UBioEvtSysTrackLighting_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackLighting.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackLighting::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 35913 ];

	UBioEvtSysTrackLighting_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackLighting.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEvtSysTrackLighting::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 35911 ];

	UBioEvtSysTrackLighting_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackLookAt.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackLookAt::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 35938 ];

	UBioEvtSysTrackLookAt_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackLookAt.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackLookAt::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 35936 ];

	UBioEvtSysTrackLookAt_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackLookAt.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackLookAt::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 35934 ];

	UBioEvtSysTrackLookAt_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackLookAt.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackLookAt::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 35932 ];

	UBioEvtSysTrackLookAt_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackLookAt.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEvtSysTrackLookAt::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 35930 ];

	UBioEvtSysTrackLookAt_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionTimingHideAmmoFade
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )

float UBioEvtSysTrackProp::PropWepActionTimingHideAmmoFade ( class ASFXWeapon* pWeapon )
{
	static UFunction* pFnPropWepActionTimingHideAmmoFade = NULL;

	if ( ! pFnPropWepActionTimingHideAmmoFade )
		pFnPropWepActionTimingHideAmmoFade = (UFunction*) UObject::GObjObjects()->Data[ 36091 ];

	UBioEvtSysTrackProp_execPropWepActionTimingHideAmmoFade_Parms PropWepActionTimingHideAmmoFade_Parms;
	PropWepActionTimingHideAmmoFade_Parms.pWeapon = pWeapon;

	this->ProcessEvent ( pFnPropWepActionTimingHideAmmoFade, &PropWepActionTimingHideAmmoFade_Parms, NULL );

	return PropWepActionTimingHideAmmoFade_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionExecuteHideAmmoFade
// [0x00020000] 
// Parameters infos:
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )
// class ABioPawn*                pActor                         ( CPF_Parm )

void UBioEvtSysTrackProp::PropWepActionExecuteHideAmmoFade ( class ASFXWeapon* pWeapon, class ABioPawn* pActor )
{
	static UFunction* pFnPropWepActionExecuteHideAmmoFade = NULL;

	if ( ! pFnPropWepActionExecuteHideAmmoFade )
		pFnPropWepActionExecuteHideAmmoFade = (UFunction*) UObject::GObjObjects()->Data[ 36088 ];

	UBioEvtSysTrackProp_execPropWepActionExecuteHideAmmoFade_Parms PropWepActionExecuteHideAmmoFade_Parms;
	PropWepActionExecuteHideAmmoFade_Parms.pWeapon = pWeapon;
	PropWepActionExecuteHideAmmoFade_Parms.pActor = pActor;

	this->ProcessEvent ( pFnPropWepActionExecuteHideAmmoFade, &PropWepActionExecuteHideAmmoFade_Parms, NULL );
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionTimingHideAmmoInstant
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )

float UBioEvtSysTrackProp::PropWepActionTimingHideAmmoInstant ( class ASFXWeapon* pWeapon )
{
	static UFunction* pFnPropWepActionTimingHideAmmoInstant = NULL;

	if ( ! pFnPropWepActionTimingHideAmmoInstant )
		pFnPropWepActionTimingHideAmmoInstant = (UFunction*) UObject::GObjObjects()->Data[ 36085 ];

	UBioEvtSysTrackProp_execPropWepActionTimingHideAmmoInstant_Parms PropWepActionTimingHideAmmoInstant_Parms;
	PropWepActionTimingHideAmmoInstant_Parms.pWeapon = pWeapon;

	this->ProcessEvent ( pFnPropWepActionTimingHideAmmoInstant, &PropWepActionTimingHideAmmoInstant_Parms, NULL );

	return PropWepActionTimingHideAmmoInstant_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionExecuteHideAmmoInstant
// [0x00020000] 
// Parameters infos:
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )
// class ABioPawn*                pActor                         ( CPF_Parm )

void UBioEvtSysTrackProp::PropWepActionExecuteHideAmmoInstant ( class ASFXWeapon* pWeapon, class ABioPawn* pActor )
{
	static UFunction* pFnPropWepActionExecuteHideAmmoInstant = NULL;

	if ( ! pFnPropWepActionExecuteHideAmmoInstant )
		pFnPropWepActionExecuteHideAmmoInstant = (UFunction*) UObject::GObjObjects()->Data[ 36082 ];

	UBioEvtSysTrackProp_execPropWepActionExecuteHideAmmoInstant_Parms PropWepActionExecuteHideAmmoInstant_Parms;
	PropWepActionExecuteHideAmmoInstant_Parms.pWeapon = pWeapon;
	PropWepActionExecuteHideAmmoInstant_Parms.pActor = pActor;

	this->ProcessEvent ( pFnPropWepActionExecuteHideAmmoInstant, &PropWepActionExecuteHideAmmoInstant_Parms, NULL );
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionTimingShowAmmo
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )

float UBioEvtSysTrackProp::PropWepActionTimingShowAmmo ( class ASFXWeapon* pWeapon )
{
	static UFunction* pFnPropWepActionTimingShowAmmo = NULL;

	if ( ! pFnPropWepActionTimingShowAmmo )
		pFnPropWepActionTimingShowAmmo = (UFunction*) UObject::GObjObjects()->Data[ 36079 ];

	UBioEvtSysTrackProp_execPropWepActionTimingShowAmmo_Parms PropWepActionTimingShowAmmo_Parms;
	PropWepActionTimingShowAmmo_Parms.pWeapon = pWeapon;

	this->ProcessEvent ( pFnPropWepActionTimingShowAmmo, &PropWepActionTimingShowAmmo_Parms, NULL );

	return PropWepActionTimingShowAmmo_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionExecuteShowAmmo
// [0x00020000] 
// Parameters infos:
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )
// class ABioPawn*                pActor                         ( CPF_Parm )

void UBioEvtSysTrackProp::PropWepActionExecuteShowAmmo ( class ASFXWeapon* pWeapon, class ABioPawn* pActor )
{
	static UFunction* pFnPropWepActionExecuteShowAmmo = NULL;

	if ( ! pFnPropWepActionExecuteShowAmmo )
		pFnPropWepActionExecuteShowAmmo = (UFunction*) UObject::GObjObjects()->Data[ 36076 ];

	UBioEvtSysTrackProp_execPropWepActionExecuteShowAmmo_Parms PropWepActionExecuteShowAmmo_Parms;
	PropWepActionExecuteShowAmmo_Parms.pWeapon = pWeapon;
	PropWepActionExecuteShowAmmo_Parms.pActor = pActor;

	this->ProcessEvent ( pFnPropWepActionExecuteShowAmmo, &PropWepActionExecuteShowAmmo_Parms, NULL );
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionTimingDisableIK
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )

float UBioEvtSysTrackProp::PropWepActionTimingDisableIK ( class ASFXWeapon* pWeapon )
{
	static UFunction* pFnPropWepActionTimingDisableIK = NULL;

	if ( ! pFnPropWepActionTimingDisableIK )
		pFnPropWepActionTimingDisableIK = (UFunction*) UObject::GObjObjects()->Data[ 36073 ];

	UBioEvtSysTrackProp_execPropWepActionTimingDisableIK_Parms PropWepActionTimingDisableIK_Parms;
	PropWepActionTimingDisableIK_Parms.pWeapon = pWeapon;

	this->ProcessEvent ( pFnPropWepActionTimingDisableIK, &PropWepActionTimingDisableIK_Parms, NULL );

	return PropWepActionTimingDisableIK_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionExecuteDisableIK
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )
// class ABioPawn*                pActor                         ( CPF_Parm )

void UBioEvtSysTrackProp::PropWepActionExecuteDisableIK ( class ASFXWeapon* pWeapon, class ABioPawn* pActor )
{
	static UFunction* pFnPropWepActionExecuteDisableIK = NULL;

	if ( ! pFnPropWepActionExecuteDisableIK )
		pFnPropWepActionExecuteDisableIK = (UFunction*) UObject::GObjObjects()->Data[ 36069 ];

	UBioEvtSysTrackProp_execPropWepActionExecuteDisableIK_Parms PropWepActionExecuteDisableIK_Parms;
	PropWepActionExecuteDisableIK_Parms.pWeapon = pWeapon;
	PropWepActionExecuteDisableIK_Parms.pActor = pActor;

	this->ProcessEvent ( pFnPropWepActionExecuteDisableIK, &PropWepActionExecuteDisableIK_Parms, NULL );
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionTimingEnableIK
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )

float UBioEvtSysTrackProp::PropWepActionTimingEnableIK ( class ASFXWeapon* pWeapon )
{
	static UFunction* pFnPropWepActionTimingEnableIK = NULL;

	if ( ! pFnPropWepActionTimingEnableIK )
		pFnPropWepActionTimingEnableIK = (UFunction*) UObject::GObjObjects()->Data[ 36066 ];

	UBioEvtSysTrackProp_execPropWepActionTimingEnableIK_Parms PropWepActionTimingEnableIK_Parms;
	PropWepActionTimingEnableIK_Parms.pWeapon = pWeapon;

	this->ProcessEvent ( pFnPropWepActionTimingEnableIK, &PropWepActionTimingEnableIK_Parms, NULL );

	return PropWepActionTimingEnableIK_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionExecuteEnableIK
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )
// class ABioPawn*                pActor                         ( CPF_Parm )

void UBioEvtSysTrackProp::PropWepActionExecuteEnableIK ( class ASFXWeapon* pWeapon, class ABioPawn* pActor )
{
	static UFunction* pFnPropWepActionExecuteEnableIK = NULL;

	if ( ! pFnPropWepActionExecuteEnableIK )
		pFnPropWepActionExecuteEnableIK = (UFunction*) UObject::GObjObjects()->Data[ 36061 ];

	UBioEvtSysTrackProp_execPropWepActionExecuteEnableIK_Parms PropWepActionExecuteEnableIK_Parms;
	PropWepActionExecuteEnableIK_Parms.pWeapon = pWeapon;
	PropWepActionExecuteEnableIK_Parms.pActor = pActor;

	this->ProcessEvent ( pFnPropWepActionExecuteEnableIK, &PropWepActionExecuteEnableIK_Parms, NULL );
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionTimingFireWithTracer
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )

float UBioEvtSysTrackProp::PropWepActionTimingFireWithTracer ( class ASFXWeapon* pWeapon )
{
	static UFunction* pFnPropWepActionTimingFireWithTracer = NULL;

	if ( ! pFnPropWepActionTimingFireWithTracer )
		pFnPropWepActionTimingFireWithTracer = (UFunction*) UObject::GObjObjects()->Data[ 36058 ];

	UBioEvtSysTrackProp_execPropWepActionTimingFireWithTracer_Parms PropWepActionTimingFireWithTracer_Parms;
	PropWepActionTimingFireWithTracer_Parms.pWeapon = pWeapon;

	this->ProcessEvent ( pFnPropWepActionTimingFireWithTracer, &PropWepActionTimingFireWithTracer_Parms, NULL );

	return PropWepActionTimingFireWithTracer_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionExecuteFireWithTracer
// [0x00820002] 
// Parameters infos:
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )
// class ABioPawn*                pActor                         ( CPF_Parm )

void UBioEvtSysTrackProp::PropWepActionExecuteFireWithTracer ( class ASFXWeapon* pWeapon, class ABioPawn* pActor )
{
	static UFunction* pFnPropWepActionExecuteFireWithTracer = NULL;

	if ( ! pFnPropWepActionExecuteFireWithTracer )
		pFnPropWepActionExecuteFireWithTracer = (UFunction*) UObject::GObjObjects()->Data[ 36044 ];

	UBioEvtSysTrackProp_execPropWepActionExecuteFireWithTracer_Parms PropWepActionExecuteFireWithTracer_Parms;
	PropWepActionExecuteFireWithTracer_Parms.pWeapon = pWeapon;
	PropWepActionExecuteFireWithTracer_Parms.pActor = pActor;

	this->ProcessEvent ( pFnPropWepActionExecuteFireWithTracer, &PropWepActionExecuteFireWithTracer_Parms, NULL );
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionTimingReload
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )

float UBioEvtSysTrackProp::PropWepActionTimingReload ( class ASFXWeapon* pWeapon )
{
	static UFunction* pFnPropWepActionTimingReload = NULL;

	if ( ! pFnPropWepActionTimingReload )
		pFnPropWepActionTimingReload = (UFunction*) UObject::GObjObjects()->Data[ 36039 ];

	UBioEvtSysTrackProp_execPropWepActionTimingReload_Parms PropWepActionTimingReload_Parms;
	PropWepActionTimingReload_Parms.pWeapon = pWeapon;

	this->ProcessEvent ( pFnPropWepActionTimingReload, &PropWepActionTimingReload_Parms, NULL );

	return PropWepActionTimingReload_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionExecuteReload
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )
// class ABioPawn*                pActor                         ( CPF_Parm )

void UBioEvtSysTrackProp::PropWepActionExecuteReload ( class ASFXWeapon* pWeapon, class ABioPawn* pActor )
{
	static UFunction* pFnPropWepActionExecuteReload = NULL;

	if ( ! pFnPropWepActionExecuteReload )
		pFnPropWepActionExecuteReload = (UFunction*) UObject::GObjObjects()->Data[ 36036 ];

	UBioEvtSysTrackProp_execPropWepActionExecuteReload_Parms PropWepActionExecuteReload_Parms;
	PropWepActionExecuteReload_Parms.pWeapon = pWeapon;
	PropWepActionExecuteReload_Parms.pActor = pActor;

	this->ProcessEvent ( pFnPropWepActionExecuteReload, &PropWepActionExecuteReload_Parms, NULL );
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionTimingCollapse
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )

float UBioEvtSysTrackProp::PropWepActionTimingCollapse ( class ASFXWeapon* pWeapon )
{
	static UFunction* pFnPropWepActionTimingCollapse = NULL;

	if ( ! pFnPropWepActionTimingCollapse )
		pFnPropWepActionTimingCollapse = (UFunction*) UObject::GObjObjects()->Data[ 36029 ];

	UBioEvtSysTrackProp_execPropWepActionTimingCollapse_Parms PropWepActionTimingCollapse_Parms;
	PropWepActionTimingCollapse_Parms.pWeapon = pWeapon;

	this->ProcessEvent ( pFnPropWepActionTimingCollapse, &PropWepActionTimingCollapse_Parms, NULL );

	return PropWepActionTimingCollapse_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionExecuteCollapse
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )
// class ABioPawn*                pActor                         ( CPF_Parm )

void UBioEvtSysTrackProp::PropWepActionExecuteCollapse ( class ASFXWeapon* pWeapon, class ABioPawn* pActor )
{
	static UFunction* pFnPropWepActionExecuteCollapse = NULL;

	if ( ! pFnPropWepActionExecuteCollapse )
		pFnPropWepActionExecuteCollapse = (UFunction*) UObject::GObjObjects()->Data[ 36026 ];

	UBioEvtSysTrackProp_execPropWepActionExecuteCollapse_Parms PropWepActionExecuteCollapse_Parms;
	PropWepActionExecuteCollapse_Parms.pWeapon = pWeapon;
	PropWepActionExecuteCollapse_Parms.pActor = pActor;

	this->ProcessEvent ( pFnPropWepActionExecuteCollapse, &PropWepActionExecuteCollapse_Parms, NULL );
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionTimingExpand
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )

float UBioEvtSysTrackProp::PropWepActionTimingExpand ( class ASFXWeapon* pWeapon )
{
	static UFunction* pFnPropWepActionTimingExpand = NULL;

	if ( ! pFnPropWepActionTimingExpand )
		pFnPropWepActionTimingExpand = (UFunction*) UObject::GObjObjects()->Data[ 36019 ];

	UBioEvtSysTrackProp_execPropWepActionTimingExpand_Parms PropWepActionTimingExpand_Parms;
	PropWepActionTimingExpand_Parms.pWeapon = pWeapon;

	this->ProcessEvent ( pFnPropWepActionTimingExpand, &PropWepActionTimingExpand_Parms, NULL );

	return PropWepActionTimingExpand_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionExecuteExpand
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )
// class ABioPawn*                pActor                         ( CPF_Parm )

void UBioEvtSysTrackProp::PropWepActionExecuteExpand ( class ASFXWeapon* pWeapon, class ABioPawn* pActor )
{
	static UFunction* pFnPropWepActionExecuteExpand = NULL;

	if ( ! pFnPropWepActionExecuteExpand )
		pFnPropWepActionExecuteExpand = (UFunction*) UObject::GObjObjects()->Data[ 36016 ];

	UBioEvtSysTrackProp_execPropWepActionExecuteExpand_Parms PropWepActionExecuteExpand_Parms;
	PropWepActionExecuteExpand_Parms.pWeapon = pWeapon;
	PropWepActionExecuteExpand_Parms.pActor = pActor;

	this->ProcessEvent ( pFnPropWepActionExecuteExpand, &PropWepActionExecuteExpand_Parms, NULL );
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionTimingFire
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )

float UBioEvtSysTrackProp::PropWepActionTimingFire ( class ASFXWeapon* pWeapon )
{
	static UFunction* pFnPropWepActionTimingFire = NULL;

	if ( ! pFnPropWepActionTimingFire )
		pFnPropWepActionTimingFire = (UFunction*) UObject::GObjObjects()->Data[ 36011 ];

	UBioEvtSysTrackProp_execPropWepActionTimingFire_Parms PropWepActionTimingFire_Parms;
	PropWepActionTimingFire_Parms.pWeapon = pWeapon;

	this->ProcessEvent ( pFnPropWepActionTimingFire, &PropWepActionTimingFire_Parms, NULL );

	return PropWepActionTimingFire_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.PropWepActionExecuteFire
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )
// class ABioPawn*                pActor                         ( CPF_Parm )

void UBioEvtSysTrackProp::PropWepActionExecuteFire ( class ASFXWeapon* pWeapon, class ABioPawn* pActor )
{
	static UFunction* pFnPropWepActionExecuteFire = NULL;

	if ( ! pFnPropWepActionExecuteFire )
		pFnPropWepActionExecuteFire = (UFunction*) UObject::GObjObjects()->Data[ 36008 ];

	UBioEvtSysTrackProp_execPropWepActionExecuteFire_Parms PropWepActionExecuteFire_Parms;
	PropWepActionExecuteFire_Parms.pWeapon = pWeapon;
	PropWepActionExecuteFire_Parms.pActor = pActor;

	this->ProcessEvent ( pFnPropWepActionExecuteFire, &PropWepActionExecuteFire_Parms, NULL );
};

// Function SFXGame.BioEvtSysTrackProp.FindPartSysMaxDuration
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UParticleSystem*         pParticleSystem                ( CPF_Parm )
// int                            nLooping                       ( CPF_Parm | CPF_OutParm )

float UBioEvtSysTrackProp::FindPartSysMaxDuration ( class UParticleSystem* pParticleSystem, int* nLooping )
{
	static UFunction* pFnFindPartSysMaxDuration = NULL;

	if ( ! pFnFindPartSysMaxDuration )
		pFnFindPartSysMaxDuration = (UFunction*) UObject::GObjObjects()->Data[ 36004 ];

	UBioEvtSysTrackProp_execFindPartSysMaxDuration_Parms FindPartSysMaxDuration_Parms;
	FindPartSysMaxDuration_Parms.pParticleSystem = pParticleSystem;

	pFnFindPartSysMaxDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPartSysMaxDuration, &FindPartSysMaxDuration_Parms, NULL );

	pFnFindPartSysMaxDuration->FunctionFlags |= 0x400;

	if ( nLooping )
		*nLooping = FindPartSysMaxDuration_Parms.nLooping;

	return FindPartSysMaxDuration_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.GetWeaponMesh
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class USkeletalMesh*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  cWeapon                        ( CPF_Parm )

class USkeletalMesh* UBioEvtSysTrackProp::eventGetWeaponMesh ( class UClass* cWeapon )
{
	static UFunction* pFnGetWeaponMesh = NULL;

	if ( ! pFnGetWeaponMesh )
		pFnGetWeaponMesh = (UFunction*) UObject::GObjObjects()->Data[ 36001 ];

	UBioEvtSysTrackProp_eventGetWeaponMesh_Parms GetWeaponMesh_Parms;
	GetWeaponMesh_Parms.cWeapon = cWeapon;

	this->ProcessEvent ( pFnGetWeaponMesh, &GetWeaponMesh_Parms, NULL );

	return GetWeaponMesh_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.PropUnequipWeapon
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ABioPawn*                pActor                         ( CPF_Parm )
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )
// int                            nSpawned                       ( CPF_Parm )

void UBioEvtSysTrackProp::eventPropUnequipWeapon ( class ABioPawn* pActor, class ASFXWeapon* pWeapon, int nSpawned )
{
	static UFunction* pFnPropUnequipWeapon = NULL;

	if ( ! pFnPropUnequipWeapon )
		pFnPropUnequipWeapon = (UFunction*) UObject::GObjObjects()->Data[ 35994 ];

	UBioEvtSysTrackProp_eventPropUnequipWeapon_Parms PropUnequipWeapon_Parms;
	PropUnequipWeapon_Parms.pActor = pActor;
	PropUnequipWeapon_Parms.pWeapon = pWeapon;
	PropUnequipWeapon_Parms.nSpawned = nSpawned;

	this->ProcessEvent ( pFnPropUnequipWeapon, &PropUnequipWeapon_Parms, NULL );
};

// Function SFXGame.BioEvtSysTrackProp.PropUnequipWeaponForInst
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  cWeapon                        ( CPF_Parm )
// class UBioEvtSysTrackPropInst* pInst                          ( CPF_Parm )

void UBioEvtSysTrackProp::eventPropUnequipWeaponForInst ( class UClass* cWeapon, class UBioEvtSysTrackPropInst* pInst )
{
	static UFunction* pFnPropUnequipWeaponForInst = NULL;

	if ( ! pFnPropUnequipWeaponForInst )
		pFnPropUnequipWeaponForInst = (UFunction*) UObject::GObjObjects()->Data[ 35988 ];

	UBioEvtSysTrackProp_eventPropUnequipWeaponForInst_Parms PropUnequipWeaponForInst_Parms;
	PropUnequipWeaponForInst_Parms.cWeapon = cWeapon;
	PropUnequipWeaponForInst_Parms.pInst = pInst;

	this->ProcessEvent ( pFnPropUnequipWeaponForInst, &PropUnequipWeaponForInst_Parms, NULL );
};

// Function SFXGame.BioEvtSysTrackProp.PropEquipWeapon
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  cWeapon                        ( CPF_Parm )
// class UBioEvtSysTrackPropInst* pInst                          ( CPF_Parm )

void UBioEvtSysTrackProp::eventPropEquipWeapon ( class UClass* cWeapon, class UBioEvtSysTrackPropInst* pInst )
{
	static UFunction* pFnPropEquipWeapon = NULL;

	if ( ! pFnPropEquipWeapon )
		pFnPropEquipWeapon = (UFunction*) UObject::GObjObjects()->Data[ 35979 ];

	UBioEvtSysTrackProp_eventPropEquipWeapon_Parms PropEquipWeapon_Parms;
	PropEquipWeapon_Parms.cWeapon = cWeapon;
	PropEquipWeapon_Parms.pInst = pInst;

	this->ProcessEvent ( pFnPropEquipWeapon, &PropEquipWeapon_Parms, NULL );
};

// Function SFXGame.BioEvtSysTrackProp.PropGetPawnWeapon
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ASFXWeapon*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  cWeapon                        ( CPF_Parm )
// class UBioEvtSysTrackPropInst* pInst                          ( CPF_Parm )

class ASFXWeapon* UBioEvtSysTrackProp::eventPropGetPawnWeapon ( class UClass* cWeapon, class UBioEvtSysTrackPropInst* pInst )
{
	static UFunction* pFnPropGetPawnWeapon = NULL;

	if ( ! pFnPropGetPawnWeapon )
		pFnPropGetPawnWeapon = (UFunction*) UObject::GObjObjects()->Data[ 35971 ];

	UBioEvtSysTrackProp_eventPropGetPawnWeapon_Parms PropGetPawnWeapon_Parms;
	PropGetPawnWeapon_Parms.cWeapon = cWeapon;
	PropGetPawnWeapon_Parms.pInst = pInst;

	this->ProcessEvent ( pFnPropGetPawnWeapon, &PropGetPawnWeapon_Parms, NULL );

	return PropGetPawnWeapon_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackProp::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 35969 ];

	UBioEvtSysTrackProp_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackProp::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 35967 ];

	UBioEvtSysTrackProp_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackProp::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 35965 ];

	UBioEvtSysTrackProp_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackProp::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 35963 ];

	UBioEvtSysTrackProp_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackProp.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEvtSysTrackProp::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 35961 ];

	UBioEvtSysTrackProp_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackPropInst.GetWeaponName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class ASFXWeapon*              pWeapon                        ( CPF_Parm )

struct FString UBioEvtSysTrackPropInst::eventGetWeaponName ( class ASFXWeapon* pWeapon )
{
	static UFunction* pFnGetWeaponName = NULL;

	if ( ! pFnGetWeaponName )
		pFnGetWeaponName = (UFunction*) UObject::GObjObjects()->Data[ 36126 ];

	UBioEvtSysTrackPropInst_eventGetWeaponName_Parms GetWeaponName_Parms;
	GetWeaponName_Parms.pWeapon = pWeapon;

	this->ProcessEvent ( pFnGetWeaponName, &GetWeaponName_Parms, NULL );

	return GetWeaponName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackPropInst.RemoveWeaponData
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UClass*                  cWeapon                        ( CPF_Parm )

void UBioEvtSysTrackPropInst::RemoveWeaponData ( class UClass* cWeapon )
{
	static UFunction* pFnRemoveWeaponData = NULL;

	if ( ! pFnRemoveWeaponData )
		pFnRemoveWeaponData = (UFunction*) UObject::GObjObjects()->Data[ 36124 ];

	UBioEvtSysTrackPropInst_execRemoveWeaponData_Parms RemoveWeaponData_Parms;
	RemoveWeaponData_Parms.cWeapon = cWeapon;

	pFnRemoveWeaponData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveWeaponData, &RemoveWeaponData_Parms, NULL );

	pFnRemoveWeaponData->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEvtSysTrackPropInst.AddWeaponData
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UClass*                  cWeapon                        ( CPF_Parm )
// class ASFXWeapon*              pWep                           ( CPF_Parm )
// unsigned long                  bSpawned                       ( CPF_Parm )

void UBioEvtSysTrackPropInst::AddWeaponData ( class UClass* cWeapon, class ASFXWeapon* pWep, unsigned long bSpawned )
{
	static UFunction* pFnAddWeaponData = NULL;

	if ( ! pFnAddWeaponData )
		pFnAddWeaponData = (UFunction*) UObject::GObjObjects()->Data[ 36120 ];

	UBioEvtSysTrackPropInst_execAddWeaponData_Parms AddWeaponData_Parms;
	AddWeaponData_Parms.cWeapon = cWeapon;
	AddWeaponData_Parms.pWep = pWep;
	AddWeaponData_Parms.bSpawned = bSpawned;

	pFnAddWeaponData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddWeaponData, &AddWeaponData_Parms, NULL );

	pFnAddWeaponData->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEvtSysTrackPropInst.FindWeaponData
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class ASFXWeapon*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  cWeapon                        ( CPF_Parm )
// int                            nSpawned                       ( CPF_Parm | CPF_OutParm )

class ASFXWeapon* UBioEvtSysTrackPropInst::FindWeaponData ( class UClass* cWeapon, int* nSpawned )
{
	static UFunction* pFnFindWeaponData = NULL;

	if ( ! pFnFindWeaponData )
		pFnFindWeaponData = (UFunction*) UObject::GObjObjects()->Data[ 36116 ];

	UBioEvtSysTrackPropInst_execFindWeaponData_Parms FindWeaponData_Parms;
	FindWeaponData_Parms.cWeapon = cWeapon;

	pFnFindWeaponData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindWeaponData, &FindWeaponData_Parms, NULL );

	pFnFindWeaponData->FunctionFlags |= 0x400;

	if ( nSpawned )
		*nSpawned = FindWeaponData_Parms.nSpawned;

	return FindWeaponData_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSetFacing.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackSetFacing::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 36146 ];

	UBioEvtSysTrackSetFacing_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSetFacing.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackSetFacing::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 36144 ];

	UBioEvtSysTrackSetFacing_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSetFacing.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackSetFacing::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 36142 ];

	UBioEvtSysTrackSetFacing_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSetFacing.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackSetFacing::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 36140 ];

	UBioEvtSysTrackSetFacing_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSetFacing.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEvtSysTrackSetFacing::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 36138 ];

	UBioEvtSysTrackSetFacing_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSubtitles.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackSubtitles::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 36163 ];

	UBioEvtSysTrackSubtitles_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSubtitles.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackSubtitles::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 36161 ];

	UBioEvtSysTrackSubtitles_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSubtitles.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackSubtitles::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 36159 ];

	UBioEvtSysTrackSubtitles_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSubtitles.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackSubtitles::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 36157 ];

	UBioEvtSysTrackSubtitles_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSubtitles.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEvtSysTrackSubtitles::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 36155 ];

	UBioEvtSysTrackSubtitles_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSwitchCamera.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackSwitchCamera::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 36186 ];

	UBioEvtSysTrackSwitchCamera_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSwitchCamera.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackSwitchCamera::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 36184 ];

	UBioEvtSysTrackSwitchCamera_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSwitchCamera.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackSwitchCamera::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 36182 ];

	UBioEvtSysTrackSwitchCamera_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSwitchCamera.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackSwitchCamera::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 36180 ];

	UBioEvtSysTrackSwitchCamera_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackSwitchCamera.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEvtSysTrackSwitchCamera::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 36178 ];

	UBioEvtSysTrackSwitchCamera_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackVOElements.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackVOElements::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 36204 ];

	UBioEvtSysTrackVOElements_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackVOElements.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackVOElements::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 36202 ];

	UBioEvtSysTrackVOElements_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackVOElements.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackVOElements::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 36200 ];

	UBioEvtSysTrackVOElements_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackVOElements.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioEvtSysTrackVOElements::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 36198 ];

	UBioEvtSysTrackVOElements_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.BioEvtSysTrackVOElements.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEvtSysTrackVOElements::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 36196 ];

	UBioEvtSysTrackVOElements_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioInterpTrackRotationMode.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioInterpTrackRotationMode::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 38370 ];

	UBioInterpTrackRotationMode_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.BioInterpTrackRotationMode.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioInterpTrackRotationMode::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 38368 ];

	UBioInterpTrackRotationMode_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioInterpTrackRotationMode.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioInterpTrackRotationMode::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 38366 ];

	UBioInterpTrackRotationMode_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.BioInterpTrackRotationMode.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioInterpTrackRotationMode::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 38364 ];

	UBioInterpTrackRotationMode_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.BioVisualEffectTrackInst.Create
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioVisualEffect*        Base                           ( CPF_Parm )

void UBioVisualEffectTrackInst::Create ( class ABioVisualEffect* Base )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 50989 ];

	UBioVisualEffectTrackInst_execCreate_Parms Create_Parms;
	Create_Parms.Base = Base;

	pFnCreate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );

	pFnCreate->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGameInterpTrackCustom.GetGroupLinkedActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UInterpTrackInst*        TrackInst                      ( CPF_Parm )

class AActor* USFXGameInterpTrackCustom::GetGroupLinkedActor ( class UInterpTrackInst* TrackInst )
{
	static UFunction* pFnGetGroupLinkedActor = NULL;

	if ( ! pFnGetGroupLinkedActor )
		pFnGetGroupLinkedActor = (UFunction*) UObject::GObjObjects()->Data[ 55843 ];

	USFXGameInterpTrackCustom_execGetGroupLinkedActor_Parms GetGroupLinkedActor_Parms;
	GetGroupLinkedActor_Parms.TrackInst = TrackInst;

	pFnGetGroupLinkedActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroupLinkedActor, &GetGroupLinkedActor_Parms, NULL );

	pFnGetGroupLinkedActor->FunctionFlags |= 0x400;

	return GetGroupLinkedActor_Parms.ReturnValue;
};

// Function SFXGame.SFXGameInterpTrackCustom.GetObjectRef
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioSeqVar_ObjectFindByTag* FindByTagVar                   ( CPF_Parm )

class UObject* USFXGameInterpTrackCustom::GetObjectRef ( class UBioSeqVar_ObjectFindByTag* FindByTagVar )
{
	static UFunction* pFnGetObjectRef = NULL;

	if ( ! pFnGetObjectRef )
		pFnGetObjectRef = (UFunction*) UObject::GObjObjects()->Data[ 55840 ];

	USFXGameInterpTrackCustom_execGetObjectRef_Parms GetObjectRef_Parms;
	GetObjectRef_Parms.FindByTagVar = FindByTagVar;

	pFnGetObjectRef->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetObjectRef, &GetObjectRef_Parms, NULL );

	pFnGetObjectRef->FunctionFlags |= 0x400;

	return GetObjectRef_Parms.ReturnValue;
};

// Function SFXGame.SFXGameInterpTrackCustom.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXGameInterpTrackCustom::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 55838 ];

	USFXGameInterpTrackCustom_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.SFXGameInterpTrackWwiseMicLock.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXGameInterpTrackWwiseMicLock::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 55860 ];

	USFXGameInterpTrackWwiseMicLock_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXGameInterpTrackWwiseMicLock.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXGameInterpTrackWwiseMicLock::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 55858 ];

	USFXGameInterpTrackWwiseMicLock_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXGameInterpTrackWwiseMicLock.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXGameInterpTrackWwiseMicLock::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 55856 ];

	USFXGameInterpTrackWwiseMicLock_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXGameInterpTrackWwiseMicLock.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameInterpTrackWwiseMicLock::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 55854 ];

	USFXGameInterpTrackWwiseMicLock_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackAttachCrustEffect.TriggerKey
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioInterpTrackInst*     pTrackInst                     ( CPF_Parm )
// unsigned long                  bAttach                        ( CPF_Parm )
// float                          fLifeTime                      ( CPF_Parm )

void USFXInterpTrackAttachCrustEffect::eventTriggerKey ( class UBioInterpTrackInst* pTrackInst, unsigned long bAttach, float fLifeTime )
{
	static UFunction* pFnTriggerKey = NULL;

	if ( ! pFnTriggerKey )
		pFnTriggerKey = (UFunction*) UObject::GObjObjects()->Data[ 57120 ];

	USFXInterpTrackAttachCrustEffect_eventTriggerKey_Parms TriggerKey_Parms;
	TriggerKey_Parms.pTrackInst = pTrackInst;
	TriggerKey_Parms.bAttach = bAttach;
	TriggerKey_Parms.fLifeTime = fLifeTime;

	this->ProcessEvent ( pFnTriggerKey, &TriggerKey_Parms, NULL );
};

// Function SFXGame.SFXInterpTrackAttachCrustEffect.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackAttachCrustEffect::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57118 ];

	USFXInterpTrackAttachCrustEffect_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackAttachCrustEffect.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackAttachCrustEffect::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57116 ];

	USFXInterpTrackAttachCrustEffect_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackAttachCrustEffect.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackAttachCrustEffect::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57114 ];

	USFXInterpTrackAttachCrustEffect_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackAttachCrustEffect.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackAttachCrustEffect::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57112 ];

	USFXInterpTrackAttachCrustEffect_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackAttachToActor.TriggerKey
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioInterpTrackInst*     pTrackInst                     ( CPF_Parm )

void USFXInterpTrackAttachToActor::eventTriggerKey ( class UBioInterpTrackInst* pTrackInst )
{
	static UFunction* pFnTriggerKey = NULL;

	if ( ! pFnTriggerKey )
		pFnTriggerKey = (UFunction*) UObject::GObjObjects()->Data[ 57144 ];

	USFXInterpTrackAttachToActor_eventTriggerKey_Parms TriggerKey_Parms;
	TriggerKey_Parms.pTrackInst = pTrackInst;

	this->ProcessEvent ( pFnTriggerKey, &TriggerKey_Parms, NULL );
};

// Function SFXGame.SFXInterpTrackAttachToActor.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackAttachToActor::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57142 ];

	USFXInterpTrackAttachToActor_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackAttachToActor.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackAttachToActor::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57140 ];

	USFXInterpTrackAttachToActor_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackAttachToActor.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackAttachToActor::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57138 ];

	USFXInterpTrackAttachToActor_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackAttachToActor.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackAttachToActor::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57136 ];

	USFXInterpTrackAttachToActor_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackAttachVFXToObject.TriggerKey
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioInterpTrackInst*     pTrackInst                     ( CPF_Parm )

void USFXInterpTrackAttachVFXToObject::eventTriggerKey ( class UBioInterpTrackInst* pTrackInst )
{
	static UFunction* pFnTriggerKey = NULL;

	if ( ! pFnTriggerKey )
		pFnTriggerKey = (UFunction*) UObject::GObjObjects()->Data[ 57162 ];

	USFXInterpTrackAttachVFXToObject_eventTriggerKey_Parms TriggerKey_Parms;
	TriggerKey_Parms.pTrackInst = pTrackInst;

	this->ProcessEvent ( pFnTriggerKey, &TriggerKey_Parms, NULL );
};

// Function SFXGame.SFXInterpTrackAttachVFXToObject.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackAttachVFXToObject::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57160 ];

	USFXInterpTrackAttachVFXToObject_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackAttachVFXToObject.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackAttachVFXToObject::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57158 ];

	USFXInterpTrackAttachVFXToObject_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackAttachVFXToObject.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackAttachVFXToObject::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57156 ];

	USFXInterpTrackAttachVFXToObject_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackAttachVFXToObject.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackAttachVFXToObject::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57154 ];

	USFXInterpTrackAttachVFXToObject_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackBlackScreen.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackBlackScreen::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57179 ];

	USFXInterpTrackBlackScreen_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackBlackScreen.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackBlackScreen::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57177 ];

	USFXInterpTrackBlackScreen_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackBlackScreen.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackBlackScreen::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57175 ];

	USFXInterpTrackBlackScreen_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackBlackScreen.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackBlackScreen::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57173 ];

	USFXInterpTrackBlackScreen_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackDestroy.TriggerKey
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioInterpTrackInst*     pTrackInst                     ( CPF_Parm )

void USFXInterpTrackDestroy::eventTriggerKey ( class UBioInterpTrackInst* pTrackInst )
{
	static UFunction* pFnTriggerKey = NULL;

	if ( ! pFnTriggerKey )
		pFnTriggerKey = (UFunction*) UObject::GObjObjects()->Data[ 57191 ];

	USFXInterpTrackDestroy_eventTriggerKey_Parms TriggerKey_Parms;
	TriggerKey_Parms.pTrackInst = pTrackInst;

	this->ProcessEvent ( pFnTriggerKey, &TriggerKey_Parms, NULL );
};

// Function SFXGame.SFXInterpTrackDestroy.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackDestroy::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57189 ];

	USFXInterpTrackDestroy_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackDestroy.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackDestroy::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57187 ];

	USFXInterpTrackDestroy_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackDestroy.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackDestroy::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57185 ];

	USFXInterpTrackDestroy_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackDestroy.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackDestroy::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57183 ];

	USFXInterpTrackDestroy_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackForceLightEnvUpdate.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackForceLightEnvUpdate::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57203 ];

	USFXInterpTrackForceLightEnvUpdate_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackForceLightEnvUpdate.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackForceLightEnvUpdate::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57201 ];

	USFXInterpTrackForceLightEnvUpdate_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackForceLightEnvUpdate.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackForceLightEnvUpdate::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57199 ];

	USFXInterpTrackForceLightEnvUpdate_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackForceLightEnvUpdate.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackForceLightEnvUpdate::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57197 ];

	USFXInterpTrackForceLightEnvUpdate_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackLightEnvQuality.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackLightEnvQuality::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57221 ];

	USFXInterpTrackLightEnvQuality_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackLightEnvQuality.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackLightEnvQuality::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57219 ];

	USFXInterpTrackLightEnvQuality_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackLightEnvQuality.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackLightEnvQuality::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57217 ];

	USFXInterpTrackLightEnvQuality_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackLightEnvQuality.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackLightEnvQuality::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57215 ];

	USFXInterpTrackLightEnvQuality_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackMovieBase.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackMovieBase::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57229 ];

	USFXInterpTrackMovieBase_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackMovieBink.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackMovieBink::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57236 ];

	USFXInterpTrackMovieBink_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackMovieBink.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackMovieBink::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57234 ];

	USFXInterpTrackMovieBink_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackMovieBink.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackMovieBink::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57232 ];

	USFXInterpTrackMovieBink_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackMovieTexture.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackMovieTexture::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57245 ];

	USFXInterpTrackMovieTexture_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackMovieTexture.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackMovieTexture::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57243 ];

	USFXInterpTrackMovieTexture_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackMovieTexture.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackMovieTexture::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57241 ];

	USFXInterpTrackMovieTexture_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackMovieTexture.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackMovieTexture::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57239 ];

	USFXInterpTrackMovieTexture_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackPlayFaceOnlyVO.GetNewTrackSubMenuName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackPlayFaceOnlyVO::eventGetNewTrackSubMenuName ( )
{
	static UFunction* pFnGetNewTrackSubMenuName = NULL;

	if ( ! pFnGetNewTrackSubMenuName )
		pFnGetNewTrackSubMenuName = (UFunction*) UObject::GObjObjects()->Data[ 57266 ];

	USFXInterpTrackPlayFaceOnlyVO_eventGetNewTrackSubMenuName_Parms GetNewTrackSubMenuName_Parms;

	this->ProcessEvent ( pFnGetNewTrackSubMenuName, &GetNewTrackSubMenuName_Parms, NULL );

	return GetNewTrackSubMenuName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackPlayFaceOnlyVO.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackPlayFaceOnlyVO::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57264 ];

	USFXInterpTrackPlayFaceOnlyVO_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackPlayFaceOnlyVO.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackPlayFaceOnlyVO::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57262 ];

	USFXInterpTrackPlayFaceOnlyVO_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackPlayFaceOnlyVO.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackPlayFaceOnlyVO::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57260 ];

	USFXInterpTrackPlayFaceOnlyVO_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackPlayFaceOnlyVO.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackPlayFaceOnlyVO::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57258 ];

	USFXInterpTrackPlayFaceOnlyVO_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackSetEnvEffectIntensity.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackSetEnvEffectIntensity::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57282 ];

	USFXInterpTrackSetEnvEffectIntensity_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackSetEnvEffectIntensity.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackSetEnvEffectIntensity::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57280 ];

	USFXInterpTrackSetEnvEffectIntensity_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackSetEnvEffectIntensity.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackSetEnvEffectIntensity::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57278 ];

	USFXInterpTrackSetEnvEffectIntensity_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackSetEnvEffectIntensity.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackSetEnvEffectIntensity::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57276 ];

	USFXInterpTrackSetEnvEffectIntensity_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackSetPlayerNearClipPlane.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackSetPlayerNearClipPlane::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57295 ];

	USFXInterpTrackSetPlayerNearClipPlane_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackSetPlayerNearClipPlane.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackSetPlayerNearClipPlane::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57293 ];

	USFXInterpTrackSetPlayerNearClipPlane_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackSetPlayerNearClipPlane.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackSetPlayerNearClipPlane::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57291 ];

	USFXInterpTrackSetPlayerNearClipPlane_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackSetPlayerNearClipPlane.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackSetPlayerNearClipPlane::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57289 ];

	USFXInterpTrackSetPlayerNearClipPlane_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackSetWeaponInstant.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackSetWeaponInstant::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57309 ];

	USFXInterpTrackSetWeaponInstant_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackSetWeaponInstant.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackSetWeaponInstant::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57307 ];

	USFXInterpTrackSetWeaponInstant_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackSetWeaponInstant.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackSetWeaponInstant::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57305 ];

	USFXInterpTrackSetWeaponInstant_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackSetWeaponInstant.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackSetWeaponInstant::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57303 ];

	USFXInterpTrackSetWeaponInstant_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackToggleBase.SetupToggleSequenceOp
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USequenceOp*             Seq                            ( CPF_Parm )
// unsigned long                  bToggle                        ( CPF_Parm )
// unsigned long                  bEnable                        ( CPF_Parm )

void USFXInterpTrackToggleBase::SetupToggleSequenceOp ( class USequenceOp* Seq, unsigned long bToggle, unsigned long bEnable )
{
	static UFunction* pFnSetupToggleSequenceOp = NULL;

	if ( ! pFnSetupToggleSequenceOp )
		pFnSetupToggleSequenceOp = (UFunction*) UObject::GObjObjects()->Data[ 57328 ];

	USFXInterpTrackToggleBase_execSetupToggleSequenceOp_Parms SetupToggleSequenceOp_Parms;
	SetupToggleSequenceOp_Parms.Seq = Seq;
	SetupToggleSequenceOp_Parms.bToggle = bToggle;
	SetupToggleSequenceOp_Parms.bEnable = bEnable;

	pFnSetupToggleSequenceOp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetupToggleSequenceOp, &SetupToggleSequenceOp_Parms, NULL );

	pFnSetupToggleSequenceOp->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXInterpTrackToggleBase.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackToggleBase::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57326 ];

	USFXInterpTrackToggleBase_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackToggleBase.KeyDataArrayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackToggleBase::eventKeyDataArrayName ( )
{
	static UFunction* pFnKeyDataArrayName = NULL;

	if ( ! pFnKeyDataArrayName )
		pFnKeyDataArrayName = (UFunction*) UObject::GObjObjects()->Data[ 57324 ];

	USFXInterpTrackToggleBase_eventKeyDataArrayName_Parms KeyDataArrayName_Parms;

	this->ProcessEvent ( pFnKeyDataArrayName, &KeyDataArrayName_Parms, NULL );

	return KeyDataArrayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackToggleBase.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackToggleBase::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57322 ];

	USFXInterpTrackToggleBase_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackToggleBase.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackToggleBase::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57320 ];

	USFXInterpTrackToggleBase_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackToggleAffectedByHitEffects.TriggerKey
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioInterpTrackInst*     pTrackInst                     ( CPF_Parm )
// unsigned long                  bToggle                        ( CPF_Parm )
// unsigned long                  bEnable                        ( CPF_Parm )

void USFXInterpTrackToggleAffectedByHitEffects::eventTriggerKey ( class UBioInterpTrackInst* pTrackInst, unsigned long bToggle, unsigned long bEnable )
{
	static UFunction* pFnTriggerKey = NULL;

	if ( ! pFnTriggerKey )
		pFnTriggerKey = (UFunction*) UObject::GObjObjects()->Data[ 57338 ];

	USFXInterpTrackToggleAffectedByHitEffects_eventTriggerKey_Parms TriggerKey_Parms;
	TriggerKey_Parms.pTrackInst = pTrackInst;
	TriggerKey_Parms.bToggle = bToggle;
	TriggerKey_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnTriggerKey, &TriggerKey_Parms, NULL );
};

// Function SFXGame.SFXInterpTrackToggleAffectedByHitEffects.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackToggleAffectedByHitEffects::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57336 ];

	USFXInterpTrackToggleAffectedByHitEffects_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackToggleAffectedByHitEffects.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackToggleAffectedByHitEffects::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57334 ];

	USFXInterpTrackToggleAffectedByHitEffects_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackToggleAffectedByHitEffects.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackToggleAffectedByHitEffects::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57332 ];

	USFXInterpTrackToggleAffectedByHitEffects_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackToggleHidden.TriggerKey
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioInterpTrackInst*     pTrackInst                     ( CPF_Parm )
// unsigned long                  bToggle                        ( CPF_Parm )
// unsigned long                  bEnable                        ( CPF_Parm )

void USFXInterpTrackToggleHidden::eventTriggerKey ( class UBioInterpTrackInst* pTrackInst, unsigned long bToggle, unsigned long bEnable )
{
	static UFunction* pFnTriggerKey = NULL;

	if ( ! pFnTriggerKey )
		pFnTriggerKey = (UFunction*) UObject::GObjObjects()->Data[ 57351 ];

	USFXInterpTrackToggleHidden_eventTriggerKey_Parms TriggerKey_Parms;
	TriggerKey_Parms.pTrackInst = pTrackInst;
	TriggerKey_Parms.bToggle = bToggle;
	TriggerKey_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnTriggerKey, &TriggerKey_Parms, NULL );
};

// Function SFXGame.SFXInterpTrackToggleHidden.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackToggleHidden::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57349 ];

	USFXInterpTrackToggleHidden_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackToggleHidden.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackToggleHidden::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57347 ];

	USFXInterpTrackToggleHidden_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackToggleHidden.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackToggleHidden::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57345 ];

	USFXInterpTrackToggleHidden_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackToggleLightEnvironment.KeyDataDisplayName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackToggleLightEnvironment::eventKeyDataDisplayName ( )
{
	static UFunction* pFnKeyDataDisplayName = NULL;

	if ( ! pFnKeyDataDisplayName )
		pFnKeyDataDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 57363 ];

	USFXInterpTrackToggleLightEnvironment_eventKeyDataDisplayName_Parms KeyDataDisplayName_Parms;

	this->ProcessEvent ( pFnKeyDataDisplayName, &KeyDataDisplayName_Parms, NULL );

	return KeyDataDisplayName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackToggleLightEnvironment.NewKeyDefaultName
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXInterpTrackToggleLightEnvironment::eventNewKeyDefaultName ( )
{
	static UFunction* pFnNewKeyDefaultName = NULL;

	if ( ! pFnNewKeyDefaultName )
		pFnNewKeyDefaultName = (UFunction*) UObject::GObjObjects()->Data[ 57361 ];

	USFXInterpTrackToggleLightEnvironment_eventNewKeyDefaultName_Parms NewKeyDefaultName_Parms;

	this->ProcessEvent ( pFnNewKeyDefaultName, &NewKeyDefaultName_Parms, NULL );

	return NewKeyDefaultName_Parms.ReturnValue;
};

// Function SFXGame.SFXInterpTrackToggleLightEnvironment.AllowKeyNaming
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXInterpTrackToggleLightEnvironment::eventAllowKeyNaming ( )
{
	static UFunction* pFnAllowKeyNaming = NULL;

	if ( ! pFnAllowKeyNaming )
		pFnAllowKeyNaming = (UFunction*) UObject::GObjObjects()->Data[ 57359 ];

	USFXInterpTrackToggleLightEnvironment_eventAllowKeyNaming_Parms AllowKeyNaming_Parms;

	this->ProcessEvent ( pFnAllowKeyNaming, &AllowKeyNaming_Parms, NULL );

	return AllowKeyNaming_Parms.ReturnValue;
};

// Function SFXGame.BioDiscoveredCodexMap.Clear
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioDiscoveredCodexMap::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 35498 ];

	UBioDiscoveredCodexMap_execClear_Parms Clear_Parms;

	pFnClear->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );

	pFnClear->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGlobalVariableTable.ClearAllVariables
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioGlobalVariableTable::eventClearAllVariables ( )
{
	static UFunction* pFnClearAllVariables = NULL;

	if ( ! pFnClearAllVariables )
		pFnClearAllVariables = (UFunction*) UObject::GObjObjects()->Data[ 37103 ];

	UBioGlobalVariableTable_eventClearAllVariables_Parms ClearAllVariables_Parms;

	this->ProcessEvent ( pFnClearAllVariables, &ClearAllVariables_Parms, NULL );
};

// Function SFXGame.BioGlobalVariableTable.GetStrRefByName
// [0x00020002] 
// Parameters infos:
// struct FName                   nmLabel                        ( CPF_Parm )

void UBioGlobalVariableTable::GetStrRefByName ( struct FName nmLabel )
{
	static UFunction* pFnGetStrRefByName = NULL;

	if ( ! pFnGetStrRefByName )
		pFnGetStrRefByName = (UFunction*) UObject::GObjObjects()->Data[ 37099 ];

	UBioGlobalVariableTable_execGetStrRefByName_Parms GetStrRefByName_Parms;
	memcpy ( &GetStrRefByName_Parms.nmLabel, &nmLabel, 0x8 );

	this->ProcessEvent ( pFnGetStrRefByName, &GetStrRefByName_Parms, NULL );
};

// Function SFXGame.BioGlobalVariableTable.SetFloatByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmLabel                        ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )

void UBioGlobalVariableTable::SetFloatByName ( struct FName nmLabel, float fValue )
{
	static UFunction* pFnSetFloatByName = NULL;

	if ( ! pFnSetFloatByName )
		pFnSetFloatByName = (UFunction*) UObject::GObjObjects()->Data[ 37096 ];

	UBioGlobalVariableTable_execSetFloatByName_Parms SetFloatByName_Parms;
	memcpy ( &SetFloatByName_Parms.nmLabel, &nmLabel, 0x8 );
	SetFloatByName_Parms.fValue = fValue;

	pFnSetFloatByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatByName, &SetFloatByName_Parms, NULL );

	pFnSetFloatByName->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGlobalVariableTable.GetFloatByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmLabel                        ( CPF_Parm )

float UBioGlobalVariableTable::GetFloatByName ( struct FName nmLabel )
{
	static UFunction* pFnGetFloatByName = NULL;

	if ( ! pFnGetFloatByName )
		pFnGetFloatByName = (UFunction*) UObject::GObjObjects()->Data[ 37093 ];

	UBioGlobalVariableTable_execGetFloatByName_Parms GetFloatByName_Parms;
	memcpy ( &GetFloatByName_Parms.nmLabel, &nmLabel, 0x8 );

	pFnGetFloatByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloatByName, &GetFloatByName_Parms, NULL );

	pFnGetFloatByName->FunctionFlags |= 0x400;

	return GetFloatByName_Parms.ReturnValue;
};

// Function SFXGame.BioGlobalVariableTable.SetIntByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmLabel                        ( CPF_Parm )
// int                            nValue                         ( CPF_Parm )

void UBioGlobalVariableTable::SetIntByName ( struct FName nmLabel, int nValue )
{
	static UFunction* pFnSetIntByName = NULL;

	if ( ! pFnSetIntByName )
		pFnSetIntByName = (UFunction*) UObject::GObjObjects()->Data[ 37090 ];

	UBioGlobalVariableTable_execSetIntByName_Parms SetIntByName_Parms;
	memcpy ( &SetIntByName_Parms.nmLabel, &nmLabel, 0x8 );
	SetIntByName_Parms.nValue = nValue;

	pFnSetIntByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntByName, &SetIntByName_Parms, NULL );

	pFnSetIntByName->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGlobalVariableTable.GetIntByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmLabel                        ( CPF_Parm )

int UBioGlobalVariableTable::GetIntByName ( struct FName nmLabel )
{
	static UFunction* pFnGetIntByName = NULL;

	if ( ! pFnGetIntByName )
		pFnGetIntByName = (UFunction*) UObject::GObjObjects()->Data[ 37087 ];

	UBioGlobalVariableTable_execGetIntByName_Parms GetIntByName_Parms;
	memcpy ( &GetIntByName_Parms.nmLabel, &nmLabel, 0x8 );

	pFnGetIntByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIntByName, &GetIntByName_Parms, NULL );

	pFnGetIntByName->FunctionFlags |= 0x400;

	return GetIntByName_Parms.ReturnValue;
};

// Function SFXGame.BioGlobalVariableTable.SetBoolByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmLabel                        ( CPF_Parm )
// unsigned long                  bValue                         ( CPF_Parm )

void UBioGlobalVariableTable::SetBoolByName ( struct FName nmLabel, unsigned long bValue )
{
	static UFunction* pFnSetBoolByName = NULL;

	if ( ! pFnSetBoolByName )
		pFnSetBoolByName = (UFunction*) UObject::GObjObjects()->Data[ 37084 ];

	UBioGlobalVariableTable_execSetBoolByName_Parms SetBoolByName_Parms;
	memcpy ( &SetBoolByName_Parms.nmLabel, &nmLabel, 0x8 );
	SetBoolByName_Parms.bValue = bValue;

	pFnSetBoolByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBoolByName, &SetBoolByName_Parms, NULL );

	pFnSetBoolByName->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGlobalVariableTable.GetBoolByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmLabel                        ( CPF_Parm )

bool UBioGlobalVariableTable::GetBoolByName ( struct FName nmLabel )
{
	static UFunction* pFnGetBoolByName = NULL;

	if ( ! pFnGetBoolByName )
		pFnGetBoolByName = (UFunction*) UObject::GObjObjects()->Data[ 37081 ];

	UBioGlobalVariableTable_execGetBoolByName_Parms GetBoolByName_Parms;
	memcpy ( &GetBoolByName_Parms.nmLabel, &nmLabel, 0x8 );

	pFnGetBoolByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBoolByName, &GetBoolByName_Parms, NULL );

	pFnGetBoolByName->FunctionFlags |= 0x400;

	return GetBoolByName_Parms.ReturnValue;
};

// Function SFXGame.BioGlobalVariableTable.SetFloat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )

void UBioGlobalVariableTable::SetFloat ( int nIndex, float fValue )
{
	static UFunction* pFnSetFloat = NULL;

	if ( ! pFnSetFloat )
		pFnSetFloat = (UFunction*) UObject::GObjObjects()->Data[ 37078 ];

	UBioGlobalVariableTable_execSetFloat_Parms SetFloat_Parms;
	SetFloat_Parms.nIndex = nIndex;
	SetFloat_Parms.fValue = fValue;

	pFnSetFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloat, &SetFloat_Parms, NULL );

	pFnSetFloat->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGlobalVariableTable.GetFloat
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

float UBioGlobalVariableTable::GetFloat ( int nIndex )
{
	static UFunction* pFnGetFloat = NULL;

	if ( ! pFnGetFloat )
		pFnGetFloat = (UFunction*) UObject::GObjObjects()->Data[ 37075 ];

	UBioGlobalVariableTable_execGetFloat_Parms GetFloat_Parms;
	GetFloat_Parms.nIndex = nIndex;

	pFnGetFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloat, &GetFloat_Parms, NULL );

	pFnGetFloat->FunctionFlags |= 0x400;

	return GetFloat_Parms.ReturnValue;
};

// Function SFXGame.BioGlobalVariableTable.SetInt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )
// int                            nValue                         ( CPF_Parm )

void UBioGlobalVariableTable::SetInt ( int nIndex, int nValue )
{
	static UFunction* pFnSetInt = NULL;

	if ( ! pFnSetInt )
		pFnSetInt = (UFunction*) UObject::GObjObjects()->Data[ 37072 ];

	UBioGlobalVariableTable_execSetInt_Parms SetInt_Parms;
	SetInt_Parms.nIndex = nIndex;
	SetInt_Parms.nValue = nValue;

	pFnSetInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInt, &SetInt_Parms, NULL );

	pFnSetInt->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGlobalVariableTable.GetInt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

int UBioGlobalVariableTable::GetInt ( int nIndex )
{
	static UFunction* pFnGetInt = NULL;

	if ( ! pFnGetInt )
		pFnGetInt = (UFunction*) UObject::GObjObjects()->Data[ 37069 ];

	UBioGlobalVariableTable_execGetInt_Parms GetInt_Parms;
	GetInt_Parms.nIndex = nIndex;

	pFnGetInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetInt, &GetInt_Parms, NULL );

	pFnGetInt->FunctionFlags |= 0x400;

	return GetInt_Parms.ReturnValue;
};

// Function SFXGame.BioGlobalVariableTable.SetBool
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )
// unsigned long                  bValue                         ( CPF_Parm )
// unsigned long                  bEvaluateAchievement           ( CPF_OptionalParm | CPF_Parm )

void UBioGlobalVariableTable::SetBool ( int nIndex, unsigned long bValue, unsigned long bEvaluateAchievement )
{
	static UFunction* pFnSetBool = NULL;

	if ( ! pFnSetBool )
		pFnSetBool = (UFunction*) UObject::GObjObjects()->Data[ 37065 ];

	UBioGlobalVariableTable_execSetBool_Parms SetBool_Parms;
	SetBool_Parms.nIndex = nIndex;
	SetBool_Parms.bValue = bValue;
	SetBool_Parms.bEvaluateAchievement = bEvaluateAchievement;

	pFnSetBool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBool, &SetBool_Parms, NULL );

	pFnSetBool->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGlobalVariableTable.GetBool
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

bool UBioGlobalVariableTable::GetBool ( int nIndex )
{
	static UFunction* pFnGetBool = NULL;

	if ( ! pFnGetBool )
		pFnGetBool = (UFunction*) UObject::GObjObjects()->Data[ 37062 ];

	UBioGlobalVariableTable_execGetBool_Parms GetBool_Parms;
	GetBool_Parms.nIndex = nIndex;

	pFnGetBool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBool, &GetBool_Parms, NULL );

	pFnGetBool->FunctionFlags |= 0x400;

	return GetBool_Parms.ReturnValue;
};

// Function SFXGame.BioQuestProgressionMap.Clear
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioQuestProgressionMap::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 43675 ];

	UBioQuestProgressionMap_execClear_Parms Clear_Parms;

	pFnClear->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );

	pFnClear->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseAppearance.GetModelByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 S                              ( CPF_Parm | CPF_NeedCtorLink )

class USkeletalMesh* UBioBaseAppearance::GetModelByName ( struct FString S )
{
	static UFunction* pFnGetModelByName = NULL;

	if ( ! pFnGetModelByName )
		pFnGetModelByName = (UFunction*) UObject::GObjObjects()->Data[ 29014 ];

	UBioBaseAppearance_execGetModelByName_Parms GetModelByName_Parms;
	memcpy ( &GetModelByName_Parms.S, &S, 0xC );

	pFnGetModelByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetModelByName, &GetModelByName_Parms, NULL );

	pFnGetModelByName->FunctionFlags |= 0x400;

	return GetModelByName_Parms.ReturnValue;
};

// Function SFXGame.Bio_Appr_Character_Body.GetMaterial
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ArmorType                      ( CPF_Parm )
// int                            ModelVar                       ( CPF_Parm )
// int                            MaterialVar                    ( CPF_Parm )
// TArray< class UMaterialInterface* > Materials                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBio_Appr_Character_Body::GetMaterial ( int ArmorType, int ModelVar, int MaterialVar, TArray< class UMaterialInterface* >* Materials )
{
	static UFunction* pFnGetMaterial = NULL;

	if ( ! pFnGetMaterial )
		pFnGetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 29272 ];

	UBio_Appr_Character_Body_execGetMaterial_Parms GetMaterial_Parms;
	GetMaterial_Parms.ArmorType = ArmorType;
	GetMaterial_Parms.ModelVar = ModelVar;
	GetMaterial_Parms.MaterialVar = MaterialVar;

	pFnGetMaterial->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaterial, &GetMaterial_Parms, NULL );

	pFnGetMaterial->FunctionFlags |= 0x400;

	if ( Materials )
		memcpy ( Materials, &GetMaterial_Parms.Materials, 0xC );

	return GetMaterial_Parms.ReturnValue;
};

// Function SFXGame.Bio_Appr_Character_Body.IsValidVariation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ArmorType                      ( CPF_Parm )
// int                            ModelVar                       ( CPF_Parm )
// int                            MaterialVar                    ( CPF_Parm )

bool UBio_Appr_Character_Body::IsValidVariation ( int ArmorType, int ModelVar, int MaterialVar )
{
	static UFunction* pFnIsValidVariation = NULL;

	if ( ! pFnIsValidVariation )
		pFnIsValidVariation = (UFunction*) UObject::GObjObjects()->Data[ 29267 ];

	UBio_Appr_Character_Body_execIsValidVariation_Parms IsValidVariation_Parms;
	IsValidVariation_Parms.ArmorType = ArmorType;
	IsValidVariation_Parms.ModelVar = ModelVar;
	IsValidVariation_Parms.MaterialVar = MaterialVar;

	pFnIsValidVariation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidVariation, &IsValidVariation_Parms, NULL );

	pFnIsValidVariation->FunctionFlags |= 0x400;

	return IsValidVariation_Parms.ReturnValue;
};

// Function SFXGame.Bio_Appr_Character_Body.GetPhysics
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPhysicsAsset*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ArmorType                      ( CPF_Parm )
// int                            ModelVar                       ( CPF_Parm )

class UPhysicsAsset* UBio_Appr_Character_Body::GetPhysics ( int ArmorType, int ModelVar )
{
	static UFunction* pFnGetPhysics = NULL;

	if ( ! pFnGetPhysics )
		pFnGetPhysics = (UFunction*) UObject::GObjObjects()->Data[ 29263 ];

	UBio_Appr_Character_Body_execGetPhysics_Parms GetPhysics_Parms;
	GetPhysics_Parms.ArmorType = ArmorType;
	GetPhysics_Parms.ModelVar = ModelVar;

	pFnGetPhysics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysics, &GetPhysics_Parms, NULL );

	pFnGetPhysics->FunctionFlags |= 0x400;

	return GetPhysics_Parms.ReturnValue;
};

// Function SFXGame.Bio_Appr_Character_Body.GetPhysics_Name
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            ArmorType                      ( CPF_Parm )
// int                            ModelVar                       ( CPF_Parm )

struct FString UBio_Appr_Character_Body::GetPhysics_Name ( int ArmorType, int ModelVar )
{
	static UFunction* pFnGetPhysics_Name = NULL;

	if ( ! pFnGetPhysics_Name )
		pFnGetPhysics_Name = (UFunction*) UObject::GObjObjects()->Data[ 29259 ];

	UBio_Appr_Character_Body_execGetPhysics_Name_Parms GetPhysics_Name_Parms;
	GetPhysics_Name_Parms.ArmorType = ArmorType;
	GetPhysics_Name_Parms.ModelVar = ModelVar;

	pFnGetPhysics_Name->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysics_Name, &GetPhysics_Name_Parms, NULL );

	pFnGetPhysics_Name->FunctionFlags |= 0x400;

	return GetPhysics_Name_Parms.ReturnValue;
};

// Function SFXGame.Bio_Appr_Character_Body.GetModel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ArmorType                      ( CPF_Parm )
// int                            ModelVar                       ( CPF_Parm )

class USkeletalMesh* UBio_Appr_Character_Body::GetModel ( int ArmorType, int ModelVar )
{
	static UFunction* pFnGetModel = NULL;

	if ( ! pFnGetModel )
		pFnGetModel = (UFunction*) UObject::GObjObjects()->Data[ 29255 ];

	UBio_Appr_Character_Body_execGetModel_Parms GetModel_Parms;
	GetModel_Parms.ArmorType = ArmorType;
	GetModel_Parms.ModelVar = ModelVar;

	pFnGetModel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetModel, &GetModel_Parms, NULL );

	pFnGetModel->FunctionFlags |= 0x400;

	return GetModel_Parms.ReturnValue;
};

// Function SFXGame.Bio_Appr_Character_Hair.GetModel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USkeletalMesh* UBio_Appr_Character_Hair::GetModel ( )
{
	static UFunction* pFnGetModel = NULL;

	if ( ! pFnGetModel )
		pFnGetModel = (UFunction*) UObject::GObjObjects()->Data[ 29284 ];

	UBio_Appr_Character_Hair_execGetModel_Parms GetModel_Parms;

	pFnGetModel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetModel, &GetModel_Parms, NULL );

	pFnGetModel->FunctionFlags |= 0x400;

	return GetModel_Parms.ReturnValue;
};

// Function SFXGame.Bio_Appr_Character_Head.GetModel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USkeletalMesh* UBio_Appr_Character_Head::GetModel ( )
{
	static UFunction* pFnGetModel = NULL;

	if ( ! pFnGetModel )
		pFnGetModel = (UFunction*) UObject::GObjObjects()->Data[ 29312 ];

	UBio_Appr_Character_Head_execGetModel_Parms GetModel_Parms;

	pFnGetModel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetModel, &GetModel_Parms, NULL );

	pFnGetModel->FunctionFlags |= 0x400;

	return GetModel_Parms.ReturnValue;
};

// Function SFXGame.BioAppearanceItemSophisticated.GetPhysicsAsset
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPhysicsAsset*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Variant                        ( CPF_Parm )

class UPhysicsAsset* UBioAppearanceItemSophisticated::GetPhysicsAsset ( int Variant )
{
	static UFunction* pFnGetPhysicsAsset = NULL;

	if ( ! pFnGetPhysicsAsset )
		pFnGetPhysicsAsset = (UFunction*) UObject::GObjObjects()->Data[ 31143 ];

	UBioAppearanceItemSophisticated_execGetPhysicsAsset_Parms GetPhysicsAsset_Parms;
	GetPhysicsAsset_Parms.Variant = Variant;

	pFnGetPhysicsAsset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPhysicsAsset, &GetPhysicsAsset_Parms, NULL );

	pFnGetPhysicsAsset->FunctionFlags |= 0x400;

	return GetPhysicsAsset_Parms.ReturnValue;
};

// Function SFXGame.BioAppearanceItemSophisticated.GetAnimationTree
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UAnimTree*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Variant                        ( CPF_Parm )

class UAnimTree* UBioAppearanceItemSophisticated::GetAnimationTree ( int Variant )
{
	static UFunction* pFnGetAnimationTree = NULL;

	if ( ! pFnGetAnimationTree )
		pFnGetAnimationTree = (UFunction*) UObject::GObjObjects()->Data[ 31140 ];

	UBioAppearanceItemSophisticated_execGetAnimationTree_Parms GetAnimationTree_Parms;
	GetAnimationTree_Parms.Variant = Variant;

	pFnGetAnimationTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimationTree, &GetAnimationTree_Parms, NULL );

	pFnGetAnimationTree->FunctionFlags |= 0x400;

	return GetAnimationTree_Parms.ReturnValue;
};

// Function SFXGame.BioAppearanceItemSophisticated.GetAnimationSet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UAnimSet*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Variant                        ( CPF_Parm )

class UAnimSet* UBioAppearanceItemSophisticated::GetAnimationSet ( int Variant )
{
	static UFunction* pFnGetAnimationSet = NULL;

	if ( ! pFnGetAnimationSet )
		pFnGetAnimationSet = (UFunction*) UObject::GObjObjects()->Data[ 31137 ];

	UBioAppearanceItemSophisticated_execGetAnimationSet_Parms GetAnimationSet_Parms;
	GetAnimationSet_Parms.Variant = Variant;

	pFnGetAnimationSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimationSet, &GetAnimationSet_Parms, NULL );

	pFnGetAnimationSet->FunctionFlags |= 0x400;

	return GetAnimationSet_Parms.ReturnValue;
};

// Function SFXGame.BioAppearanceItemSophisticated.ApplyMaterials
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Variant                        ( CPF_Parm )
// class USkeletalMeshComponent*  SkeletalMeshComponent          ( CPF_Parm | CPF_EditInline )

void UBioAppearanceItemSophisticated::ApplyMaterials ( int Variant, class USkeletalMeshComponent* SkeletalMeshComponent )
{
	static UFunction* pFnApplyMaterials = NULL;

	if ( ! pFnApplyMaterials )
		pFnApplyMaterials = (UFunction*) UObject::GObjObjects()->Data[ 31134 ];

	UBioAppearanceItemSophisticated_execApplyMaterials_Parms ApplyMaterials_Parms;
	ApplyMaterials_Parms.Variant = Variant;
	ApplyMaterials_Parms.SkeletalMeshComponent = SkeletalMeshComponent;

	pFnApplyMaterials->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyMaterials, &ApplyMaterials_Parms, NULL );

	pFnApplyMaterials->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAppearanceItemSophisticated.GetSkeletalMesh
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMesh*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Variant                        ( CPF_Parm )

class USkeletalMesh* UBioAppearanceItemSophisticated::GetSkeletalMesh ( int Variant )
{
	static UFunction* pFnGetSkeletalMesh = NULL;

	if ( ! pFnGetSkeletalMesh )
		pFnGetSkeletalMesh = (UFunction*) UObject::GObjObjects()->Data[ 31131 ];

	UBioAppearanceItemSophisticated_execGetSkeletalMesh_Parms GetSkeletalMesh_Parms;
	GetSkeletalMesh_Parms.Variant = Variant;

	pFnGetSkeletalMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSkeletalMesh, &GetSkeletalMesh_Parms, NULL );

	pFnGetSkeletalMesh->FunctionFlags |= 0x400;

	return GetSkeletalMesh_Parms.ReturnValue;
};

// Function SFXGame.BioInterface_Appearance.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* UBioInterface_Appearance::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 31432 ];

	UBioInterface_Appearance_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioInterface_Appearance.ResetToDefaults
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioInterface_Appearance::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 31431 ];

	UBioInterface_Appearance_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function SFXGame.BioInterface_Appearance.UpdateAppearance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceUpdate                   ( CPF_OptionalParm | CPF_Parm )

bool UBioInterface_Appearance::UpdateAppearance ( unsigned long bForceUpdate )
{
	static UFunction* pFnUpdateAppearance = NULL;

	if ( ! pFnUpdateAppearance )
		pFnUpdateAppearance = (UFunction*) UObject::GObjObjects()->Data[ 31428 ];

	UBioInterface_Appearance_execUpdateAppearance_Parms UpdateAppearance_Parms;
	UpdateAppearance_Parms.bForceUpdate = bForceUpdate;

	pFnUpdateAppearance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAppearance, &UpdateAppearance_Parms, NULL );

	pFnUpdateAppearance->FunctionFlags |= 0x400;

	return UpdateAppearance_Parms.ReturnValue;
};

// Function SFXGame.BioInterface_Appearance_ArtPlaceable.UpdateAppearance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceUpdate                   ( CPF_OptionalParm | CPF_Parm )

bool UBioInterface_Appearance_ArtPlaceable::UpdateAppearance ( unsigned long bForceUpdate )
{
	static UFunction* pFnUpdateAppearance = NULL;

	if ( ! pFnUpdateAppearance )
		pFnUpdateAppearance = (UFunction*) UObject::GObjObjects()->Data[ 31434 ];

	UBioInterface_Appearance_ArtPlaceable_execUpdateAppearance_Parms UpdateAppearance_Parms;
	UpdateAppearance_Parms.bForceUpdate = bForceUpdate;

	pFnUpdateAppearance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAppearance, &UpdateAppearance_Parms, NULL );

	pFnUpdateAppearance->FunctionFlags |= 0x400;

	return UpdateAppearance_Parms.ReturnValue;
};

// Function SFXGame.BioInterface_Appearance_Pawn.GetDefaultCollisionReadyHeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioInterface_Appearance_Pawn::GetDefaultCollisionReadyHeight ( )
{
	static UFunction* pFnGetDefaultCollisionReadyHeight = NULL;

	if ( ! pFnGetDefaultCollisionReadyHeight )
		pFnGetDefaultCollisionReadyHeight = (UFunction*) UObject::GObjObjects()->Data[ 38314 ];

	UBioInterface_Appearance_Pawn_execGetDefaultCollisionReadyHeight_Parms GetDefaultCollisionReadyHeight_Parms;

	pFnGetDefaultCollisionReadyHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultCollisionReadyHeight, &GetDefaultCollisionReadyHeight_Parms, NULL );

	pFnGetDefaultCollisionReadyHeight->FunctionFlags |= 0x400;

	return GetDefaultCollisionReadyHeight_Parms.ReturnValue;
};

// Function SFXGame.BioInterface_Appearance_Pawn.GetDefaultCollisionCrouchHeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioInterface_Appearance_Pawn::GetDefaultCollisionCrouchHeight ( )
{
	static UFunction* pFnGetDefaultCollisionCrouchHeight = NULL;

	if ( ! pFnGetDefaultCollisionCrouchHeight )
		pFnGetDefaultCollisionCrouchHeight = (UFunction*) UObject::GObjObjects()->Data[ 38312 ];

	UBioInterface_Appearance_Pawn_execGetDefaultCollisionCrouchHeight_Parms GetDefaultCollisionCrouchHeight_Parms;

	pFnGetDefaultCollisionCrouchHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultCollisionCrouchHeight, &GetDefaultCollisionCrouchHeight_Parms, NULL );

	pFnGetDefaultCollisionCrouchHeight->FunctionFlags |= 0x400;

	return GetDefaultCollisionCrouchHeight_Parms.ReturnValue;
};

// Function SFXGame.BioInterface_Appearance_Pawn.GetDefaultCollisionRadius
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioInterface_Appearance_Pawn::GetDefaultCollisionRadius ( )
{
	static UFunction* pFnGetDefaultCollisionRadius = NULL;

	if ( ! pFnGetDefaultCollisionRadius )
		pFnGetDefaultCollisionRadius = (UFunction*) UObject::GObjObjects()->Data[ 38310 ];

	UBioInterface_Appearance_Pawn_execGetDefaultCollisionRadius_Parms GetDefaultCollisionRadius_Parms;

	pFnGetDefaultCollisionRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultCollisionRadius, &GetDefaultCollisionRadius_Parms, NULL );

	pFnGetDefaultCollisionRadius->FunctionFlags |= 0x400;

	return GetDefaultCollisionRadius_Parms.ReturnValue;
};

// Function SFXGame.BioInterface_Appearance_Pawn.GetDefaultCollisionHeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioInterface_Appearance_Pawn::GetDefaultCollisionHeight ( )
{
	static UFunction* pFnGetDefaultCollisionHeight = NULL;

	if ( ! pFnGetDefaultCollisionHeight )
		pFnGetDefaultCollisionHeight = (UFunction*) UObject::GObjObjects()->Data[ 38308 ];

	UBioInterface_Appearance_Pawn_execGetDefaultCollisionHeight_Parms GetDefaultCollisionHeight_Parms;

	pFnGetDefaultCollisionHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDefaultCollisionHeight, &GetDefaultCollisionHeight_Parms, NULL );

	pFnGetDefaultCollisionHeight->FunctionFlags |= 0x400;

	return GetDefaultCollisionHeight_Parms.ReturnValue;
};

// Function SFXGame.BioInterface_Appearance_Pawn.GetCreatureSpeeds
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FCreatureSpeeds         SpeedsRecord                   ( CPF_Parm | CPF_OutParm )

void UBioInterface_Appearance_Pawn::GetCreatureSpeeds ( struct FCreatureSpeeds* SpeedsRecord )
{
	static UFunction* pFnGetCreatureSpeeds = NULL;

	if ( ! pFnGetCreatureSpeeds )
		pFnGetCreatureSpeeds = (UFunction*) UObject::GObjObjects()->Data[ 38306 ];

	UBioInterface_Appearance_Pawn_execGetCreatureSpeeds_Parms GetCreatureSpeeds_Parms;

	pFnGetCreatureSpeeds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCreatureSpeeds, &GetCreatureSpeeds_Parms, NULL );

	pFnGetCreatureSpeeds->FunctionFlags |= 0x400;

	if ( SpeedsRecord )
		memcpy ( SpeedsRecord, &GetCreatureSpeeds_Parms.SpeedsRecord, 0x60 );
};

// Function SFXGame.BioInterface_Appearance_Pawn.UpdateAppearance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceUpdate                   ( CPF_OptionalParm | CPF_Parm )

bool UBioInterface_Appearance_Pawn::UpdateAppearance ( unsigned long bForceUpdate )
{
	static UFunction* pFnUpdateAppearance = NULL;

	if ( ! pFnUpdateAppearance )
		pFnUpdateAppearance = (UFunction*) UObject::GObjObjects()->Data[ 38303 ];

	UBioInterface_Appearance_Pawn_execUpdateAppearance_Parms UpdateAppearance_Parms;
	UpdateAppearance_Parms.bForceUpdate = bForceUpdate;

	pFnUpdateAppearance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAppearance, &UpdateAppearance_Parms, NULL );

	pFnUpdateAppearance->FunctionFlags |= 0x400;

	return UpdateAppearance_Parms.ReturnValue;
};

// Function SFXGame.BioInterface_Appearance_Pawn.ExtractResources
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )
// class UBio_Appr_Character*     Appearance                     ( CPF_Parm )

void UBioInterface_Appearance_Pawn::ExtractResources ( class ABioPawn* Pawn, class UBio_Appr_Character* Appearance )
{
	static UFunction* pFnExtractResources = NULL;

	if ( ! pFnExtractResources )
		pFnExtractResources = (UFunction*) UObject::GObjObjects()->Data[ 38300 ];

	UBioInterface_Appearance_Pawn_execExtractResources_Parms ExtractResources_Parms;
	ExtractResources_Parms.Pawn = Pawn;
	ExtractResources_Parms.Appearance = Appearance;

	pFnExtractResources->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExtractResources, &ExtractResources_Parms, NULL );

	pFnExtractResources->FunctionFlags |= 0x400;
};

// Function SFXGame.BioInterface_Appearance_Pawn.SetHeadGearVisiblePreference
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void UBioInterface_Appearance_Pawn::SetHeadGearVisiblePreference ( unsigned long B )
{
	static UFunction* pFnSetHeadGearVisiblePreference = NULL;

	if ( ! pFnSetHeadGearVisiblePreference )
		pFnSetHeadGearVisiblePreference = (UFunction*) UObject::GObjObjects()->Data[ 38298 ];

	UBioInterface_Appearance_Pawn_execSetHeadGearVisiblePreference_Parms SetHeadGearVisiblePreference_Parms;
	SetHeadGearVisiblePreference_Parms.B = B;

	pFnSetHeadGearVisiblePreference->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHeadGearVisiblePreference, &SetHeadGearVisiblePreference_Parms, NULL );

	pFnSetHeadGearVisiblePreference->FunctionFlags |= 0x400;
};

// Function SFXGame.BioInterfaceAppearanceVehicle.ResetToDefaults
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioInterfaceAppearanceVehicle::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 38330 ];

	UBioInterfaceAppearanceVehicle_execResetToDefaults_Parms ResetToDefaults_Parms;

	pFnResetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );

	pFnResetToDefaults->FunctionFlags |= 0x400;
};

// Function SFXGame.BioInterfaceAppearanceVehicle.UpdateAppearance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceUpdate                   ( CPF_OptionalParm | CPF_Parm )

bool UBioInterfaceAppearanceVehicle::UpdateAppearance ( unsigned long bForceUpdate )
{
	static UFunction* pFnUpdateAppearance = NULL;

	if ( ! pFnUpdateAppearance )
		pFnUpdateAppearance = (UFunction*) UObject::GObjObjects()->Data[ 38327 ];

	UBioInterfaceAppearanceVehicle_execUpdateAppearance_Parms UpdateAppearance_Parms;
	UpdateAppearance_Parms.bForceUpdate = bForceUpdate;

	pFnUpdateAppearance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAppearance, &UpdateAppearance_Parms, NULL );

	pFnUpdateAppearance->FunctionFlags |= 0x400;

	return UpdateAppearance_Parms.ReturnValue;
};

// Function SFXGame.BioActorType.IsDisintegrationSuppressed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioActorType::IsDisintegrationSuppressed ( )
{
	static UFunction* pFnIsDisintegrationSuppressed = NULL;

	if ( ! pFnIsDisintegrationSuppressed )
		pFnIsDisintegrationSuppressed = (UFunction*) UObject::GObjObjects()->Data[ 29887 ];

	UBioActorType_execIsDisintegrationSuppressed_Parms IsDisintegrationSuppressed_Parms;

	pFnIsDisintegrationSuppressed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDisintegrationSuppressed, &IsDisintegrationSuppressed_Parms, NULL );

	pFnIsDisintegrationSuppressed->FunctionFlags |= 0x400;

	return IsDisintegrationSuppressed_Parms.ReturnValue;
};

// Function SFXGame.BioActorType.IsPlotProtected
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioActorType::IsPlotProtected ( )
{
	static UFunction* pFnIsPlotProtected = NULL;

	if ( ! pFnIsPlotProtected )
		pFnIsPlotProtected = (UFunction*) UObject::GObjObjects()->Data[ 29885 ];

	UBioActorType_execIsPlotProtected_Parms IsPlotProtected_Parms;

	pFnIsPlotProtected->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlotProtected, &IsPlotProtected_Parms, NULL );

	pFnIsPlotProtected->FunctionFlags |= 0x400;

	return IsPlotProtected_Parms.ReturnValue;
};

// Function SFXGame.BioActorType.GetSquadWheelIcon
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioActorType::GetSquadWheelIcon ( )
{
	static UFunction* pFnGetSquadWheelIcon = NULL;

	if ( ! pFnGetSquadWheelIcon )
		pFnGetSquadWheelIcon = (UFunction*) UObject::GObjObjects()->Data[ 29883 ];

	UBioActorType_execGetSquadWheelIcon_Parms GetSquadWheelIcon_Parms;

	pFnGetSquadWheelIcon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSquadWheelIcon, &GetSquadWheelIcon_Parms, NULL );

	pFnGetSquadWheelIcon->FunctionFlags |= 0x400;

	return GetSquadWheelIcon_Parms.ReturnValue;
};

// Function SFXGame.BioActorType.GetSquadName
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioActorType::GetSquadName ( )
{
	static UFunction* pFnGetSquadName = NULL;

	if ( ! pFnGetSquadName )
		pFnGetSquadName = (UFunction*) UObject::GObjObjects()->Data[ 29881 ];

	UBioActorType_execGetSquadName_Parms GetSquadName_Parms;

	pFnGetSquadName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSquadName, &GetSquadName_Parms, NULL );

	pFnGetSquadName->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActorType.GetSquadIcon
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bIsDead                        ( CPF_Parm )

int UBioActorType::GetSquadIcon ( unsigned long bIsDead )
{
	static UFunction* pFnGetSquadIcon = NULL;

	if ( ! pFnGetSquadIcon )
		pFnGetSquadIcon = (UFunction*) UObject::GObjObjects()->Data[ 29878 ];

	UBioActorType_execGetSquadIcon_Parms GetSquadIcon_Parms;
	GetSquadIcon_Parms.bIsDead = bIsDead;

	pFnGetSquadIcon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSquadIcon, &GetSquadIcon_Parms, NULL );

	pFnGetSquadIcon->FunctionFlags |= 0x400;

	return GetSquadIcon_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableType.ApplyRoleToBehavior
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioArtPlaceableBehavior* oBehave                        ( CPF_Parm )

void UBioArtPlaceableType::ApplyRoleToBehavior ( class UBioArtPlaceableBehavior* oBehave )
{
	static UFunction* pFnApplyRoleToBehavior = NULL;

	if ( ! pFnApplyRoleToBehavior )
		pFnApplyRoleToBehavior = (UFunction*) UObject::GObjObjects()->Data[ 31778 ];

	UBioArtPlaceableType_execApplyRoleToBehavior_Parms ApplyRoleToBehavior_Parms;
	ApplyRoleToBehavior_Parms.oBehave = oBehave;

	pFnApplyRoleToBehavior->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyRoleToBehavior, &ApplyRoleToBehavior_Parms, NULL );

	pFnApplyRoleToBehavior->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceableType.AllowRoleCustomization
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bYes                           ( CPF_Parm )

void UBioArtPlaceableType::AllowRoleCustomization ( unsigned long bYes )
{
	static UFunction* pFnAllowRoleCustomization = NULL;

	if ( ! pFnAllowRoleCustomization )
		pFnAllowRoleCustomization = (UFunction*) UObject::GObjObjects()->Data[ 31776 ];

	UBioArtPlaceableType_execAllowRoleCustomization_Parms AllowRoleCustomization_Parms;
	AllowRoleCustomization_Parms.bYes = bYes;

	pFnAllowRoleCustomization->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllowRoleCustomization, &AllowRoleCustomization_Parms, NULL );

	pFnAllowRoleCustomization->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceableType.ApplyRole
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nNewRole                       ( CPF_Parm )
// class UBioArtPlaceableBehavior* oBehave                        ( CPF_OptionalParm | CPF_Parm )

void UBioArtPlaceableType::ApplyRole ( int nNewRole, class UBioArtPlaceableBehavior* oBehave )
{
	static UFunction* pFnApplyRole = NULL;

	if ( ! pFnApplyRole )
		pFnApplyRole = (UFunction*) UObject::GObjObjects()->Data[ 31773 ];

	UBioArtPlaceableType_execApplyRole_Parms ApplyRole_Parms;
	ApplyRole_Parms.nNewRole = nNewRole;
	ApplyRole_Parms.oBehave = oBehave;

	pFnApplyRole->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyRole, &ApplyRole_Parms, NULL );

	pFnApplyRole->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActorBehavior.SetActive
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bSetActive                     ( CPF_Parm )

void UBioActorBehavior::SetActive ( unsigned long bSetActive )
{
	static UFunction* pFnSetActive = NULL;

	if ( ! pFnSetActive )
		pFnSetActive = (UFunction*) UObject::GObjObjects()->Data[ 29835 ];

	UBioActorBehavior_execSetActive_Parms SetActive_Parms;
	SetActive_Parms.bSetActive = bSetActive;

	this->ProcessEvent ( pFnSetActive, &SetActive_Parms, NULL );
};

// Function SFXGame.BioActorBehavior.GetPowerText
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sPowerText                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioActorBehavior::GetPowerText ( struct FString* sPowerText )
{
	static UFunction* pFnGetPowerText = NULL;

	if ( ! pFnGetPowerText )
		pFnGetPowerText = (UFunction*) UObject::GObjObjects()->Data[ 29832 ];

	UBioActorBehavior_execGetPowerText_Parms GetPowerText_Parms;

	pFnGetPowerText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPowerText, &GetPowerText_Parms, NULL );

	pFnGetPowerText->FunctionFlags |= 0x400;

	if ( sPowerText )
		memcpy ( sPowerText, &GetPowerText_Parms.sPowerText, 0xC );

	return GetPowerText_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.IsDisintegrationSuppressed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioActorBehavior::IsDisintegrationSuppressed ( )
{
	static UFunction* pFnIsDisintegrationSuppressed = NULL;

	if ( ! pFnIsDisintegrationSuppressed )
		pFnIsDisintegrationSuppressed = (UFunction*) UObject::GObjObjects()->Data[ 29830 ];

	UBioActorBehavior_execIsDisintegrationSuppressed_Parms IsDisintegrationSuppressed_Parms;

	pFnIsDisintegrationSuppressed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDisintegrationSuppressed, &IsDisintegrationSuppressed_Parms, NULL );

	pFnIsDisintegrationSuppressed->FunctionFlags |= 0x400;

	return IsDisintegrationSuppressed_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.IsPlotProtected
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioActorBehavior::IsPlotProtected ( )
{
	static UFunction* pFnIsPlotProtected = NULL;

	if ( ! pFnIsPlotProtected )
		pFnIsPlotProtected = (UFunction*) UObject::GObjObjects()->Data[ 29828 ];

	UBioActorBehavior_execIsPlotProtected_Parms IsPlotProtected_Parms;

	pFnIsPlotProtected->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlotProtected, &IsPlotProtected_Parms, NULL );

	pFnIsPlotProtected->FunctionFlags |= 0x400;

	return IsPlotProtected_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* UBioActorBehavior::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 29826 ];

	UBioActorBehavior_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.ExitCombatStasis
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioActorBehavior::ExitCombatStasis ( )
{
	static UFunction* pFnExitCombatStasis = NULL;

	if ( ! pFnExitCombatStasis )
		pFnExitCombatStasis = (UFunction*) UObject::GObjObjects()->Data[ 29824 ];

	UBioActorBehavior_execExitCombatStasis_Parms ExitCombatStasis_Parms;

	pFnExitCombatStasis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExitCombatStasis, &ExitCombatStasis_Parms, NULL );

	pFnExitCombatStasis->FunctionFlags |= 0x400;

	return ExitCombatStasis_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.EnterCombatStasis
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDuration                      ( CPF_Parm )
// unsigned long                  bAllowDamage                   ( CPF_Parm )

bool UBioActorBehavior::EnterCombatStasis ( float fDuration, unsigned long bAllowDamage )
{
	static UFunction* pFnEnterCombatStasis = NULL;

	if ( ! pFnEnterCombatStasis )
		pFnEnterCombatStasis = (UFunction*) UObject::GObjObjects()->Data[ 29819 ];

	UBioActorBehavior_execEnterCombatStasis_Parms EnterCombatStasis_Parms;
	EnterCombatStasis_Parms.fDuration = fDuration;
	EnterCombatStasis_Parms.bAllowDamage = bAllowDamage;

	pFnEnterCombatStasis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnterCombatStasis, &EnterCombatStasis_Parms, NULL );

	pFnEnterCombatStasis->FunctionFlags |= 0x400;

	return EnterCombatStasis_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.MoveActorToFloor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool UBioActorBehavior::MoveActorToFloor ( class AActor* oActor )
{
	static UFunction* pFnMoveActorToFloor = NULL;

	if ( ! pFnMoveActorToFloor )
		pFnMoveActorToFloor = (UFunction*) UObject::GObjObjects()->Data[ 29816 ];

	UBioActorBehavior_execMoveActorToFloor_Parms MoveActorToFloor_Parms;
	MoveActorToFloor_Parms.oActor = oActor;

	pFnMoveActorToFloor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveActorToFloor, &MoveActorToFloor_Parms, NULL );

	pFnMoveActorToFloor->FunctionFlags |= 0x400;

	return MoveActorToFloor_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.SpawnActorFromType
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sActorResource                 ( CPF_Parm | CPF_NeedCtorLink )
// struct FVector                 vLocation                      ( CPF_Parm )
// struct FRotator                rRotation                      ( CPF_Parm )
// float                          fLifeSpan                      ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  oOwner                         ( CPF_OptionalParm | CPF_Parm )

class AActor* UBioActorBehavior::SpawnActorFromType ( struct FString sActorResource, struct FVector vLocation, struct FRotator rRotation, float fLifeSpan, class AActor* oOwner )
{
	static UFunction* pFnSpawnActorFromType = NULL;

	if ( ! pFnSpawnActorFromType )
		pFnSpawnActorFromType = (UFunction*) UObject::GObjObjects()->Data[ 29809 ];

	UBioActorBehavior_execSpawnActorFromType_Parms SpawnActorFromType_Parms;
	memcpy ( &SpawnActorFromType_Parms.sActorResource, &sActorResource, 0xC );
	memcpy ( &SpawnActorFromType_Parms.vLocation, &vLocation, 0xC );
	memcpy ( &SpawnActorFromType_Parms.rRotation, &rRotation, 0xC );
	SpawnActorFromType_Parms.fLifeSpan = fLifeSpan;
	SpawnActorFromType_Parms.oOwner = oOwner;

	pFnSpawnActorFromType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnActorFromType, &SpawnActorFromType_Parms, NULL );

	pFnSpawnActorFromType->FunctionFlags |= 0x400;

	return SpawnActorFromType_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.GetAppearanceTemplate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioBaseAppearance*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioBaseAppearance* UBioActorBehavior::GetAppearanceTemplate ( )
{
	static UFunction* pFnGetAppearanceTemplate = NULL;

	if ( ! pFnGetAppearanceTemplate )
		pFnGetAppearanceTemplate = (UFunction*) UObject::GObjObjects()->Data[ 29807 ];

	UBioActorBehavior_execGetAppearanceTemplate_Parms GetAppearanceTemplate_Parms;

	pFnGetAppearanceTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAppearanceTemplate, &GetAppearanceTemplate_Parms, NULL );

	pFnGetAppearanceTemplate->FunctionFlags |= 0x400;

	return GetAppearanceTemplate_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.DetachMesh
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USkeletalMeshComponent*  Mesh                           ( CPF_Parm | CPF_EditInline )
// class USkeletalMeshComponent*  subMesh                        ( CPF_Parm | CPF_EditInline )

bool UBioActorBehavior::DetachMesh ( class USkeletalMeshComponent* Mesh, class USkeletalMeshComponent* subMesh )
{
	static UFunction* pFnDetachMesh = NULL;

	if ( ! pFnDetachMesh )
		pFnDetachMesh = (UFunction*) UObject::GObjObjects()->Data[ 29803 ];

	UBioActorBehavior_execDetachMesh_Parms DetachMesh_Parms;
	DetachMesh_Parms.Mesh = Mesh;
	DetachMesh_Parms.subMesh = subMesh;

	this->ProcessEvent ( pFnDetachMesh, &DetachMesh_Parms, NULL );

	return DetachMesh_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.AttachMeshToClosestBone
// [0x00822002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USkeletalMeshComponent*  Mesh                           ( CPF_Parm | CPF_EditInline )
// float                          fMeshDrawScale                 ( CPF_Parm )
// class USkeletalMeshComponent*  subMesh                        ( CPF_Parm | CPF_EditInline )
// struct FVector                 subMeshPosition                ( CPF_Parm )
// struct FRotator                subMeshRotation                ( CPF_Parm )

bool UBioActorBehavior::AttachMeshToClosestBone ( class USkeletalMeshComponent* Mesh, float fMeshDrawScale, class USkeletalMeshComponent* subMesh, struct FVector subMeshPosition, struct FRotator subMeshRotation )
{
	static UFunction* pFnAttachMeshToClosestBone = NULL;

	if ( ! pFnAttachMeshToClosestBone )
		pFnAttachMeshToClosestBone = (UFunction*) UObject::GObjObjects()->Data[ 29791 ];

	UBioActorBehavior_execAttachMeshToClosestBone_Parms AttachMeshToClosestBone_Parms;
	AttachMeshToClosestBone_Parms.Mesh = Mesh;
	AttachMeshToClosestBone_Parms.fMeshDrawScale = fMeshDrawScale;
	AttachMeshToClosestBone_Parms.subMesh = subMesh;
	memcpy ( &AttachMeshToClosestBone_Parms.subMeshPosition, &subMeshPosition, 0xC );
	memcpy ( &AttachMeshToClosestBone_Parms.subMeshRotation, &subMeshRotation, 0xC );

	this->ProcessEvent ( pFnAttachMeshToClosestBone, &AttachMeshToClosestBone_Parms, NULL );

	return AttachMeshToClosestBone_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.OnGPEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eEvent                         ( CPF_Parm )
// class UObject*                 pTarget                        ( CPF_Parm )

void UBioActorBehavior::OnGPEvent ( unsigned char eEvent, class UObject* pTarget )
{
	static UFunction* pFnOnGPEvent = NULL;

	if ( ! pFnOnGPEvent )
		pFnOnGPEvent = (UFunction*) UObject::GObjObjects()->Data[ 29788 ];

	UBioActorBehavior_execOnGPEvent_Parms OnGPEvent_Parms;
	OnGPEvent_Parms.eEvent = eEvent;
	OnGPEvent_Parms.pTarget = pTarget;

	pFnOnGPEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnGPEvent, &OnGPEvent_Parms, NULL );

	pFnOnGPEvent->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActorBehavior.GetBusyState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioActorBehavior::GetBusyState ( )
{
	static UFunction* pFnGetBusyState = NULL;

	if ( ! pFnGetBusyState )
		pFnGetBusyState = (UFunction*) UObject::GObjObjects()->Data[ 29785 ];

	UBioActorBehavior_execGetBusyState_Parms GetBusyState_Parms;

	pFnGetBusyState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBusyState, &GetBusyState_Parms, NULL );

	pFnGetBusyState->FunctionFlags |= 0x400;

	return GetBusyState_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.SetBusyState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bSetBusy                       ( CPF_Parm )

void UBioActorBehavior::SetBusyState ( unsigned long bSetBusy )
{
	static UFunction* pFnSetBusyState = NULL;

	if ( ! pFnSetBusyState )
		pFnSetBusyState = (UFunction*) UObject::GObjObjects()->Data[ 29783 ];

	UBioActorBehavior_execSetBusyState_Parms SetBusyState_Parms;
	SetBusyState_Parms.bSetBusy = bSetBusy;

	pFnSetBusyState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBusyState, &SetBusyState_Parms, NULL );

	pFnSetBusyState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActorBehavior.OnAnimEnd
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       oAnimation                     ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UBioActorBehavior::eventOnAnimEnd ( class UAnimNodeSequence* oAnimation, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 29779 ];

	UBioActorBehavior_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.oAnimation = oAnimation;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function SFXGame.BioActorBehavior.AmplifyDamage
// [0x00420000] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm | CPF_OutParm )

void UBioActorBehavior::AmplifyDamage ( float* Damage )
{
	static UFunction* pFnAmplifyDamage = NULL;

	if ( ! pFnAmplifyDamage )
		pFnAmplifyDamage = (UFunction*) UObject::GObjObjects()->Data[ 29777 ];

	UBioActorBehavior_execAmplifyDamage_Parms AmplifyDamage_Parms;

	this->ProcessEvent ( pFnAmplifyDamage, &AmplifyDamage_Parms, NULL );

	if ( Damage )
		*Damage = AmplifyDamage_Parms.Damage;
};

// Function SFXGame.BioActorBehavior.HurtRadius
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// class AActor*                  oDirectlyHitActor              ( CPF_OptionalParm | CPF_Parm )
// class UDamageType*             pDamage                        ( CPF_OptionalParm | CPF_Parm )

void UBioActorBehavior::eventHurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* oDirectlyHitActor, class UDamageType* pDamage )
{
	static UFunction* pFnHurtRadius = NULL;

	if ( ! pFnHurtRadius )
		pFnHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 29765 ];

	UBioActorBehavior_eventHurtRadius_Parms HurtRadius_Parms;
	HurtRadius_Parms.BaseDamage = BaseDamage;
	HurtRadius_Parms.DamageRadius = DamageRadius;
	HurtRadius_Parms.DamageType = DamageType;
	HurtRadius_Parms.Momentum = Momentum;
	memcpy ( &HurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	HurtRadius_Parms.oDirectlyHitActor = oDirectlyHitActor;
	HurtRadius_Parms.pDamage = pDamage;

	this->ProcessEvent ( pFnHurtRadius, &HurtRadius_Parms, NULL );
};

// Function SFXGame.BioActorBehavior.RemoveFromActionStationOnDamage
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )

void UBioActorBehavior::RemoveFromActionStationOnDamage ( class AController* InstigatedBy )
{
	static UFunction* pFnRemoveFromActionStationOnDamage = NULL;

	if ( ! pFnRemoveFromActionStationOnDamage )
		pFnRemoveFromActionStationOnDamage = (UFunction*) UObject::GObjObjects()->Data[ 29759 ];

	UBioActorBehavior_execRemoveFromActionStationOnDamage_Parms RemoveFromActionStationOnDamage_Parms;
	RemoveFromActionStationOnDamage_Parms.InstigatedBy = InstigatedBy;

	this->ProcessEvent ( pFnRemoveFromActionStationOnDamage, &RemoveFromActionStationOnDamage_Parms, NULL );
};

// Function SFXGame.BioActorBehavior.SetActorGameName
// [0x00020002] 
// Parameters infos:

void UBioActorBehavior::SetActorGameName ( )
{
	static UFunction* pFnSetActorGameName = NULL;

	if ( ! pFnSetActorGameName )
		pFnSetActorGameName = (UFunction*) UObject::GObjObjects()->Data[ 29757 ];

	UBioActorBehavior_execSetActorGameName_Parms SetActorGameName_Parms;

	this->ProcessEvent ( pFnSetActorGameName, &SetActorGameName_Parms, NULL );
};

// Function SFXGame.BioActorBehavior.GetActorGameName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioActorBehavior::eventGetActorGameName ( )
{
	static UFunction* pFnGetActorGameName = NULL;

	if ( ! pFnGetActorGameName )
		pFnGetActorGameName = (UFunction*) UObject::GObjObjects()->Data[ 29753 ];

	UBioActorBehavior_eventGetActorGameName_Parms GetActorGameName_Parms;

	this->ProcessEvent ( pFnGetActorGameName, &GetActorGameName_Parms, NULL );

	return GetActorGameName_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.IsMin1Health
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioActorBehavior::eventIsMin1Health ( )
{
	static UFunction* pFnIsMin1Health = NULL;

	if ( ! pFnIsMin1Health )
		pFnIsMin1Health = (UFunction*) UObject::GObjObjects()->Data[ 29750 ];

	UBioActorBehavior_eventIsMin1Health_Parms IsMin1Health_Parms;

	this->ProcessEvent ( pFnIsMin1Health, &IsMin1Health_Parms, NULL );

	return IsMin1Health_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.IsAbilityEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEnableType                    ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

bool UBioActorBehavior::IsAbilityEnabled ( unsigned char eEnableType, struct FName nmSubType )
{
	static UFunction* pFnIsAbilityEnabled = NULL;

	if ( ! pFnIsAbilityEnabled )
		pFnIsAbilityEnabled = (UFunction*) UObject::GObjObjects()->Data[ 29746 ];

	UBioActorBehavior_execIsAbilityEnabled_Parms IsAbilityEnabled_Parms;
	IsAbilityEnabled_Parms.eEnableType = eEnableType;
	memcpy ( &IsAbilityEnabled_Parms.nmSubType, &nmSubType, 0x8 );

	pFnIsAbilityEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAbilityEnabled, &IsAbilityEnabled_Parms, NULL );

	pFnIsAbilityEnabled->FunctionFlags |= 0x400;

	return IsAbilityEnabled_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.AbilityEnable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnable                        ( CPF_Parm )
// unsigned char                  eEnableType                    ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

int UBioActorBehavior::AbilityEnable ( unsigned long bEnable, unsigned char eEnableType, struct FName nmSubType )
{
	static UFunction* pFnAbilityEnable = NULL;

	if ( ! pFnAbilityEnable )
		pFnAbilityEnable = (UFunction*) UObject::GObjObjects()->Data[ 29741 ];

	UBioActorBehavior_execAbilityEnable_Parms AbilityEnable_Parms;
	AbilityEnable_Parms.bEnable = bEnable;
	AbilityEnable_Parms.eEnableType = eEnableType;
	memcpy ( &AbilityEnable_Parms.nmSubType, &nmSubType, 0x8 );

	pFnAbilityEnable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAbilityEnable, &AbilityEnable_Parms, NULL );

	pFnAbilityEnable->FunctionFlags |= 0x400;

	return AbilityEnable_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.GetSquad
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioBaseSquad*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ABioBaseSquad* UBioActorBehavior::GetSquad ( )
{
	static UFunction* pFnGetSquad = NULL;

	if ( ! pFnGetSquad )
		pFnGetSquad = (UFunction*) UObject::GObjObjects()->Data[ 29739 ];

	UBioActorBehavior_execGetSquad_Parms GetSquad_Parms;

	pFnGetSquad->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSquad, &GetSquad_Parms, NULL );

	pFnGetSquad->FunctionFlags |= 0x400;

	return GetSquad_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.SoftResetMovementAndAnimationState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioActorBehavior::SoftResetMovementAndAnimationState ( )
{
	static UFunction* pFnSoftResetMovementAndAnimationState = NULL;

	if ( ! pFnSoftResetMovementAndAnimationState )
		pFnSoftResetMovementAndAnimationState = (UFunction*) UObject::GObjObjects()->Data[ 29738 ];

	UBioActorBehavior_execSoftResetMovementAndAnimationState_Parms SoftResetMovementAndAnimationState_Parms;

	pFnSoftResetMovementAndAnimationState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSoftResetMovementAndAnimationState, &SoftResetMovementAndAnimationState_Parms, NULL );

	pFnSoftResetMovementAndAnimationState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActorBehavior.HardResetActionAndAnimationState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioActorBehavior::HardResetActionAndAnimationState ( )
{
	static UFunction* pFnHardResetActionAndAnimationState = NULL;

	if ( ! pFnHardResetActionAndAnimationState )
		pFnHardResetActionAndAnimationState = (UFunction*) UObject::GObjObjects()->Data[ 29737 ];

	UBioActorBehavior_execHardResetActionAndAnimationState_Parms HardResetActionAndAnimationState_Parms;

	pFnHardResetActionAndAnimationState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHardResetActionAndAnimationState, &HardResetActionAndAnimationState_Parms, NULL );

	pFnHardResetActionAndAnimationState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActorBehavior.ReleasePendingReactive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioReactive*            oReactive                      ( CPF_Parm )

void UBioActorBehavior::ReleasePendingReactive ( class UBioReactive* oReactive )
{
	static UFunction* pFnReleasePendingReactive = NULL;

	if ( ! pFnReleasePendingReactive )
		pFnReleasePendingReactive = (UFunction*) UObject::GObjObjects()->Data[ 29735 ];

	UBioActorBehavior_execReleasePendingReactive_Parms ReleasePendingReactive_Parms;
	ReleasePendingReactive_Parms.oReactive = oReactive;

	pFnReleasePendingReactive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleasePendingReactive, &ReleasePendingReactive_Parms, NULL );

	pFnReleasePendingReactive->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActorBehavior.ReleaseActiveByClass
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  oActiveToRelease               ( CPF_Parm )

bool UBioActorBehavior::ReleaseActiveByClass ( class UClass* oActiveToRelease )
{
	static UFunction* pFnReleaseActiveByClass = NULL;

	if ( ! pFnReleaseActiveByClass )
		pFnReleaseActiveByClass = (UFunction*) UObject::GObjObjects()->Data[ 29732 ];

	UBioActorBehavior_execReleaseActiveByClass_Parms ReleaseActiveByClass_Parms;
	ReleaseActiveByClass_Parms.oActiveToRelease = oActiveToRelease;

	pFnReleaseActiveByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleaseActiveByClass, &ReleaseActiveByClass_Parms, NULL );

	pFnReleaseActiveByClass->FunctionFlags |= 0x400;

	return ReleaseActiveByClass_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.ReleaseActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioActorBehavior::ReleaseActive ( )
{
	static UFunction* pFnReleaseActive = NULL;

	if ( ! pFnReleaseActive )
		pFnReleaseActive = (UFunction*) UObject::GObjObjects()->Data[ 29730 ];

	UBioActorBehavior_execReleaseActive_Parms ReleaseActive_Parms;

	pFnReleaseActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleaseActive, &ReleaseActive_Parms, NULL );

	pFnReleaseActive->FunctionFlags |= 0x400;

	return ReleaseActive_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.AcquireReactive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioReactive*            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  clsReactive                    ( CPF_Parm )
// class AActor*                  oInstigator                    ( CPF_Parm )

class UBioReactive* UBioActorBehavior::AcquireReactive ( class UClass* clsReactive, class AActor* oInstigator )
{
	static UFunction* pFnAcquireReactive = NULL;

	if ( ! pFnAcquireReactive )
		pFnAcquireReactive = (UFunction*) UObject::GObjObjects()->Data[ 29726 ];

	UBioActorBehavior_execAcquireReactive_Parms AcquireReactive_Parms;
	AcquireReactive_Parms.clsReactive = clsReactive;
	AcquireReactive_Parms.oInstigator = oInstigator;

	pFnAcquireReactive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAcquireReactive, &AcquireReactive_Parms, NULL );

	pFnAcquireReactive->FunctionFlags |= 0x400;

	return AcquireReactive_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.SearchForActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioActive*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  clsActive                      ( CPF_Parm )

class UBioActive* UBioActorBehavior::SearchForActive ( class UClass* clsActive )
{
	static UFunction* pFnSearchForActive = NULL;

	if ( ! pFnSearchForActive )
		pFnSearchForActive = (UFunction*) UObject::GObjObjects()->Data[ 29723 ];

	UBioActorBehavior_execSearchForActive_Parms SearchForActive_Parms;
	SearchForActive_Parms.clsActive = clsActive;

	pFnSearchForActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSearchForActive, &SearchForActive_Parms, NULL );

	pFnSearchForActive->FunctionFlags |= 0x400;

	return SearchForActive_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.AcquireActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioActive*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  clsActive                      ( CPF_Parm )
// unsigned long                  bAutoStartActive               ( CPF_OptionalParm | CPF_Parm )

class UBioActive* UBioActorBehavior::AcquireActive ( class UClass* clsActive, unsigned long bAutoStartActive )
{
	static UFunction* pFnAcquireActive = NULL;

	if ( ! pFnAcquireActive )
		pFnAcquireActive = (UFunction*) UObject::GObjObjects()->Data[ 29719 ];

	UBioActorBehavior_execAcquireActive_Parms AcquireActive_Parms;
	AcquireActive_Parms.clsActive = clsActive;
	AcquireActive_Parms.bAutoStartActive = bAutoStartActive;

	pFnAcquireActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAcquireActive, &AcquireActive_Parms, NULL );

	pFnAcquireActive->FunctionFlags |= 0x400;

	return AcquireActive_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.RegisterReactive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UClass*                  clsReactive                    ( CPF_Parm )
// class UBioReactive*            oReactive                      ( CPF_Parm )

void UBioActorBehavior::RegisterReactive ( class UClass* clsReactive, class UBioReactive* oReactive )
{
	static UFunction* pFnRegisterReactive = NULL;

	if ( ! pFnRegisterReactive )
		pFnRegisterReactive = (UFunction*) UObject::GObjObjects()->Data[ 29716 ];

	UBioActorBehavior_execRegisterReactive_Parms RegisterReactive_Parms;
	RegisterReactive_Parms.clsReactive = clsReactive;
	RegisterReactive_Parms.oReactive = oReactive;

	pFnRegisterReactive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterReactive, &RegisterReactive_Parms, NULL );

	pFnRegisterReactive->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActorBehavior.RegisterActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UClass*                  clsActive                      ( CPF_Parm )
// class UBioActive*              oActive                        ( CPF_Parm )

void UBioActorBehavior::RegisterActive ( class UClass* clsActive, class UBioActive* oActive )
{
	static UFunction* pFnRegisterActive = NULL;

	if ( ! pFnRegisterActive )
		pFnRegisterActive = (UFunction*) UObject::GObjObjects()->Data[ 29713 ];

	UBioActorBehavior_execRegisterActive_Parms RegisterActive_Parms;
	RegisterActive_Parms.clsActive = clsActive;
	RegisterActive_Parms.oActive = oActive;

	pFnRegisterActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterActive, &RegisterActive_Parms, NULL );

	pFnRegisterActive->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActorBehavior.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void UBioActorBehavior::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 29712 ];

	UBioActorBehavior_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.BioActorBehavior.EnableCollision
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bState                         ( CPF_Parm )

void UBioActorBehavior::EnableCollision ( unsigned long bState )
{
	static UFunction* pFnEnableCollision = NULL;

	if ( ! pFnEnableCollision )
		pFnEnableCollision = (UFunction*) UObject::GObjObjects()->Data[ 29710 ];

	UBioActorBehavior_execEnableCollision_Parms EnableCollision_Parms;
	EnableCollision_Parms.bState = bState;

	pFnEnableCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableCollision, &EnableCollision_Parms, NULL );

	pFnEnableCollision->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActorBehavior.IsDefaultActionPossible
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioActorBehavior::IsDefaultActionPossible ( )
{
	static UFunction* pFnIsDefaultActionPossible = NULL;

	if ( ! pFnIsDefaultActionPossible )
		pFnIsDefaultActionPossible = (UFunction*) UObject::GObjObjects()->Data[ 29708 ];

	UBioActorBehavior_execIsDefaultActionPossible_Parms IsDefaultActionPossible_Parms;

	pFnIsDefaultActionPossible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDefaultActionPossible, &IsDefaultActionPossible_Parms, NULL );

	pFnIsDefaultActionPossible->FunctionFlags |= 0x400;

	return IsDefaultActionPossible_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.IsWithinUseRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vRefLocation                   ( CPF_Parm )

bool UBioActorBehavior::IsWithinUseRange ( struct FVector vRefLocation )
{
	static UFunction* pFnIsWithinUseRange = NULL;

	if ( ! pFnIsWithinUseRange )
		pFnIsWithinUseRange = (UFunction*) UObject::GObjObjects()->Data[ 29705 ];

	UBioActorBehavior_execIsWithinUseRange_Parms IsWithinUseRange_Parms;
	memcpy ( &IsWithinUseRange_Parms.vRefLocation, &vRefLocation, 0xC );

	pFnIsWithinUseRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsWithinUseRange, &IsWithinUseRange_Parms, NULL );

	pFnIsWithinUseRange->FunctionFlags |= 0x400;

	return IsWithinUseRange_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.GetUseRange
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioActorBehavior::GetUseRange ( )
{
	static UFunction* pFnGetUseRange = NULL;

	if ( ! pFnGetUseRange )
		pFnGetUseRange = (UFunction*) UObject::GObjObjects()->Data[ 29703 ];

	UBioActorBehavior_execGetUseRange_Parms GetUseRange_Parms;

	pFnGetUseRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUseRange, &GetUseRange_Parms, NULL );

	pFnGetUseRange->FunctionFlags |= 0x400;

	return GetUseRange_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.GetScanable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nInstigatorScanLevel           ( CPF_Parm )

bool UBioActorBehavior::GetScanable ( int nInstigatorScanLevel )
{
	static UFunction* pFnGetScanable = NULL;

	if ( ! pFnGetScanable )
		pFnGetScanable = (UFunction*) UObject::GObjObjects()->Data[ 29700 ];

	UBioActorBehavior_execGetScanable_Parms GetScanable_Parms;
	GetScanable_Parms.nInstigatorScanLevel = nInstigatorScanLevel;

	pFnGetScanable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScanable, &GetScanable_Parms, NULL );

	pFnGetScanable->FunctionFlags |= 0x400;

	return GetScanable_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.IsSuperModeCurrentAndActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eSuperMode                     ( CPF_Parm )

bool UBioActorBehavior::IsSuperModeCurrentAndActive ( unsigned char eSuperMode )
{
	static UFunction* pFnIsSuperModeCurrentAndActive = NULL;

	if ( ! pFnIsSuperModeCurrentAndActive )
		pFnIsSuperModeCurrentAndActive = (UFunction*) UObject::GObjObjects()->Data[ 29697 ];

	UBioActorBehavior_execIsSuperModeCurrentAndActive_Parms IsSuperModeCurrentAndActive_Parms;
	IsSuperModeCurrentAndActive_Parms.eSuperMode = eSuperMode;

	pFnIsSuperModeCurrentAndActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSuperModeCurrentAndActive, &IsSuperModeCurrentAndActive_Parms, NULL );

	pFnIsSuperModeCurrentAndActive->FunctionFlags |= 0x400;

	return IsSuperModeCurrentAndActive_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.GetTargetTipText
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   pSourcePawn                    ( CPF_Parm )
// struct FString                 strTip                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioActorBehavior::GetTargetTipText ( class APawn* pSourcePawn, struct FString* strTip )
{
	static UFunction* pFnGetTargetTipText = NULL;

	if ( ! pFnGetTargetTipText )
		pFnGetTargetTipText = (UFunction*) UObject::GObjObjects()->Data[ 29694 ];

	UBioActorBehavior_execGetTargetTipText_Parms GetTargetTipText_Parms;
	GetTargetTipText_Parms.pSourcePawn = pSourcePawn;

	pFnGetTargetTipText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetTipText, &GetTargetTipText_Parms, NULL );

	pFnGetTargetTipText->FunctionFlags |= 0x400;

	if ( strTip )
		memcpy ( strTip, &GetTargetTipText_Parms.strTip, 0xC );
};

// Function SFXGame.BioActorBehavior.FindSuperMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioSuperMode*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  clsSuperMode                   ( CPF_Parm )

class UBioSuperMode* UBioActorBehavior::FindSuperMode ( class UClass* clsSuperMode )
{
	static UFunction* pFnFindSuperMode = NULL;

	if ( ! pFnFindSuperMode )
		pFnFindSuperMode = (UFunction*) UObject::GObjObjects()->Data[ 29691 ];

	UBioActorBehavior_execFindSuperMode_Parms FindSuperMode_Parms;
	FindSuperMode_Parms.clsSuperMode = clsSuperMode;

	pFnFindSuperMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSuperMode, &FindSuperMode_Parms, NULL );

	pFnFindSuperMode->FunctionFlags |= 0x400;

	return FindSuperMode_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.SetSuperMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  nSuperMode                     ( CPF_Parm )
// unsigned long                  bActivate                      ( CPF_Parm )
// unsigned long                  bReturnToSuperMode             ( CPF_Parm )

bool UBioActorBehavior::SetSuperMode ( unsigned char nSuperMode, unsigned long bActivate, unsigned long bReturnToSuperMode )
{
	static UFunction* pFnSetSuperMode = NULL;

	if ( ! pFnSetSuperMode )
		pFnSetSuperMode = (UFunction*) UObject::GObjObjects()->Data[ 29686 ];

	UBioActorBehavior_execSetSuperMode_Parms SetSuperMode_Parms;
	SetSuperMode_Parms.nSuperMode = nSuperMode;
	SetSuperMode_Parms.bActivate = bActivate;
	SetSuperMode_Parms.bReturnToSuperMode = bReturnToSuperMode;

	pFnSetSuperMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSuperMode, &SetSuperMode_Parms, NULL );

	pFnSetSuperMode->FunctionFlags |= 0x400;

	return SetSuperMode_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.GetPreviousSuperMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UBioActorBehavior::GetPreviousSuperMode ( )
{
	static UFunction* pFnGetPreviousSuperMode = NULL;

	if ( ! pFnGetPreviousSuperMode )
		pFnGetPreviousSuperMode = (UFunction*) UObject::GObjObjects()->Data[ 29684 ];

	UBioActorBehavior_execGetPreviousSuperMode_Parms GetPreviousSuperMode_Parms;

	pFnGetPreviousSuperMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPreviousSuperMode, &GetPreviousSuperMode_Parms, NULL );

	pFnGetPreviousSuperMode->FunctionFlags |= 0x400;

	return GetPreviousSuperMode_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehavior.TickBehavior
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UBioActorBehavior::TickBehavior ( float DeltaTime )
{
	static UFunction* pFnTickBehavior = NULL;

	if ( ! pFnTickBehavior )
		pFnTickBehavior = (UFunction*) UObject::GObjObjects()->Data[ 29682 ];

	UBioActorBehavior_execTickBehavior_Parms TickBehavior_Parms;
	TickBehavior_Parms.DeltaTime = DeltaTime;

	pFnTickBehavior->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickBehavior, &TickBehavior_Parms, NULL );

	pFnTickBehavior->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceableBehavior.WriteSaveObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioBaseSaveObject*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 InOuter                        ( CPF_Parm )
// class UBioBaseSaveObject*      Save                           ( CPF_OptionalParm | CPF_Parm )

class UBioBaseSaveObject* UBioArtPlaceableBehavior::eventWriteSaveObject ( class UObject* InOuter, class UBioBaseSaveObject* Save )
{
	static UFunction* pFnWriteSaveObject = NULL;

	if ( ! pFnWriteSaveObject )
		pFnWriteSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 31575 ];

	UBioArtPlaceableBehavior_eventWriteSaveObject_Parms WriteSaveObject_Parms;
	WriteSaveObject_Parms.InOuter = InOuter;
	WriteSaveObject_Parms.Save = Save;

	this->ProcessEvent ( pFnWriteSaveObject, &WriteSaveObject_Parms, NULL );

	return WriteSaveObject_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.ReadSaveObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioBaseSaveObject*      Save                           ( CPF_Parm )

void UBioArtPlaceableBehavior::eventReadSaveObject ( class UBioBaseSaveObject* Save )
{
	static UFunction* pFnReadSaveObject = NULL;

	if ( ! pFnReadSaveObject )
		pFnReadSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 31573 ];

	UBioArtPlaceableBehavior_eventReadSaveObject_Parms ReadSaveObject_Parms;
	ReadSaveObject_Parms.Save = Save;

	this->ProcessEvent ( pFnReadSaveObject, &ReadSaveObject_Parms, NULL );
};

// Function SFXGame.BioArtPlaceableBehavior.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* UBioArtPlaceableBehavior::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 31570 ];

	UBioArtPlaceableBehavior_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oPawn                          ( CPF_Parm )

bool UBioArtPlaceableBehavior::ProceedWithMove ( class APawn* oPawn )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = (UFunction*) UObject::GObjObjects()->Data[ 31567 ];

	UBioArtPlaceableBehavior_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.SetWaitingForMove
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVal                           ( CPF_Parm )

void UBioArtPlaceableBehavior::SetWaitingForMove ( unsigned long bVal )
{
	static UFunction* pFnSetWaitingForMove = NULL;

	if ( ! pFnSetWaitingForMove )
		pFnSetWaitingForMove = (UFunction*) UObject::GObjObjects()->Data[ 31565 ];

	UBioArtPlaceableBehavior_execSetWaitingForMove_Parms SetWaitingForMove_Parms;
	SetWaitingForMove_Parms.bVal = bVal;

	this->ProcessEvent ( pFnSetWaitingForMove, &SetWaitingForMove_Parms, NULL );
};

// Function SFXGame.BioArtPlaceableBehavior.IsPhysicsAffectable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioArtPlaceableBehavior::IsPhysicsAffectable ( )
{
	static UFunction* pFnIsPhysicsAffectable = NULL;

	if ( ! pFnIsPhysicsAffectable )
		pFnIsPhysicsAffectable = (UFunction*) UObject::GObjObjects()->Data[ 31563 ];

	UBioArtPlaceableBehavior_execIsPhysicsAffectable_Parms IsPhysicsAffectable_Parms;

	pFnIsPhysicsAffectable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPhysicsAffectable, &IsPhysicsAffectable_Parms, NULL );

	pFnIsPhysicsAffectable->FunctionFlags |= 0x400;

	return IsPhysicsAffectable_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.GetStateFailure
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UBioArtPlaceableBehavior::GetStateFailure ( )
{
	static UFunction* pFnGetStateFailure = NULL;

	if ( ! pFnGetStateFailure )
		pFnGetStateFailure = (UFunction*) UObject::GObjObjects()->Data[ 31561 ];

	UBioArtPlaceableBehavior_execGetStateFailure_Parms GetStateFailure_Parms;

	pFnGetStateFailure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStateFailure, &GetStateFailure_Parms, NULL );

	pFnGetStateFailure->FunctionFlags |= 0x400;

	return GetStateFailure_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.GetStateSuccess
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UBioArtPlaceableBehavior::GetStateSuccess ( )
{
	static UFunction* pFnGetStateSuccess = NULL;

	if ( ! pFnGetStateSuccess )
		pFnGetStateSuccess = (UFunction*) UObject::GObjObjects()->Data[ 31559 ];

	UBioArtPlaceableBehavior_execGetStateSuccess_Parms GetStateSuccess_Parms;

	pFnGetStateSuccess->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStateSuccess, &GetStateSuccess_Parms, NULL );

	pFnGetStateSuccess->FunctionFlags |= 0x400;

	return GetStateSuccess_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.IsTransitioning
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioArtPlaceableBehavior::IsTransitioning ( )
{
	static UFunction* pFnIsTransitioning = NULL;

	if ( ! pFnIsTransitioning )
		pFnIsTransitioning = (UFunction*) UObject::GObjObjects()->Data[ 31557 ];

	UBioArtPlaceableBehavior_execIsTransitioning_Parms IsTransitioning_Parms;

	pFnIsTransitioning->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTransitioning, &IsTransitioning_Parms, NULL );

	pFnIsTransitioning->FunctionFlags |= 0x400;

	return IsTransitioning_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.OnTransitionCPP
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   FromState                      ( CPF_Parm )
// struct FName                   ToState                        ( CPF_Parm )

void UBioArtPlaceableBehavior::OnTransitionCPP ( struct FName FromState, struct FName ToState )
{
	static UFunction* pFnOnTransitionCPP = NULL;

	if ( ! pFnOnTransitionCPP )
		pFnOnTransitionCPP = (UFunction*) UObject::GObjObjects()->Data[ 31554 ];

	UBioArtPlaceableBehavior_execOnTransitionCPP_Parms OnTransitionCPP_Parms;
	memcpy ( &OnTransitionCPP_Parms.FromState, &FromState, 0x8 );
	memcpy ( &OnTransitionCPP_Parms.ToState, &ToState, 0x8 );

	pFnOnTransitionCPP->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnTransitionCPP, &OnTransitionCPP_Parms, NULL );

	pFnOnTransitionCPP->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceableBehavior.ChangeStateMesh
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmState                        ( CPF_Parm | CPF_OutParm )

void UBioArtPlaceableBehavior::ChangeStateMesh ( struct FName* nmState )
{
	static UFunction* pFnChangeStateMesh = NULL;

	if ( ! pFnChangeStateMesh )
		pFnChangeStateMesh = (UFunction*) UObject::GObjObjects()->Data[ 31552 ];

	UBioArtPlaceableBehavior_execChangeStateMesh_Parms ChangeStateMesh_Parms;

	pFnChangeStateMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeStateMesh, &ChangeStateMesh_Parms, NULL );

	pFnChangeStateMesh->FunctionFlags |= 0x400;

	if ( nmState )
		memcpy ( nmState, &ChangeStateMesh_Parms.nmState, 0x8 );
};

// Function SFXGame.BioArtPlaceableBehavior.SetCollision
// [0x00020002] 
// Parameters infos:
// unsigned long                  bCollide                       ( CPF_Parm )

void UBioArtPlaceableBehavior::SetCollision ( unsigned long bCollide )
{
	static UFunction* pFnSetCollision = NULL;

	if ( ! pFnSetCollision )
		pFnSetCollision = (UFunction*) UObject::GObjObjects()->Data[ 31550 ];

	UBioArtPlaceableBehavior_execSetCollision_Parms SetCollision_Parms;
	SetCollision_Parms.bCollide = bCollide;

	this->ProcessEvent ( pFnSetCollision, &SetCollision_Parms, NULL );
};

// Function SFXGame.BioArtPlaceableBehavior.GetCurrentState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UBioArtPlaceableBehavior::eventGetCurrentState ( )
{
	static UFunction* pFnGetCurrentState = NULL;

	if ( ! pFnGetCurrentState )
		pFnGetCurrentState = (UFunction*) UObject::GObjObjects()->Data[ 31548 ];

	UBioArtPlaceableBehavior_eventGetCurrentState_Parms GetCurrentState_Parms;

	this->ProcessEvent ( pFnGetCurrentState, &GetCurrentState_Parms, NULL );

	return GetCurrentState_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.ReactToImpulse
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 vMomentum                      ( CPF_Parm )
// struct FVector                 vHitLocation                   ( CPF_Parm )

void UBioArtPlaceableBehavior::eventReactToImpulse ( struct FVector vMomentum, struct FVector vHitLocation )
{
	static UFunction* pFnReactToImpulse = NULL;

	if ( ! pFnReactToImpulse )
		pFnReactToImpulse = (UFunction*) UObject::GObjObjects()->Data[ 31540 ];

	UBioArtPlaceableBehavior_eventReactToImpulse_Parms ReactToImpulse_Parms;
	memcpy ( &ReactToImpulse_Parms.vMomentum, &vMomentum, 0xC );
	memcpy ( &ReactToImpulse_Parms.vHitLocation, &vHitLocation, 0xC );

	this->ProcessEvent ( pFnReactToImpulse, &ReactToImpulse_Parms, NULL );
};

// Function SFXGame.BioArtPlaceableBehavior.OnTransition
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   FromState                      ( CPF_Parm )
// struct FName                   ToState                        ( CPF_Parm )
// unsigned long                  bCallCPP                       ( CPF_OptionalParm | CPF_Parm )

void UBioArtPlaceableBehavior::eventOnTransition ( struct FName FromState, struct FName ToState, unsigned long bCallCPP )
{
	static UFunction* pFnOnTransition = NULL;

	if ( ! pFnOnTransition )
		pFnOnTransition = (UFunction*) UObject::GObjObjects()->Data[ 31534 ];

	UBioArtPlaceableBehavior_eventOnTransition_Parms OnTransition_Parms;
	memcpy ( &OnTransition_Parms.FromState, &FromState, 0x8 );
	memcpy ( &OnTransition_Parms.ToState, &ToState, 0x8 );
	OnTransition_Parms.bCallCPP = bCallCPP;

	this->ProcessEvent ( pFnOnTransition, &OnTransition_Parms, NULL );
};

// Function SFXGame.BioArtPlaceableBehavior.OnArtPlaceablePlotFail
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  oUsingActor                    ( CPF_Parm )
// struct FName                   nmToState                      ( CPF_Parm )

void UBioArtPlaceableBehavior::eventOnArtPlaceablePlotFail ( class AActor* oUsingActor, struct FName nmToState )
{
	static UFunction* pFnOnArtPlaceablePlotFail = NULL;

	if ( ! pFnOnArtPlaceablePlotFail )
		pFnOnArtPlaceablePlotFail = (UFunction*) UObject::GObjObjects()->Data[ 31529 ];

	UBioArtPlaceableBehavior_eventOnArtPlaceablePlotFail_Parms OnArtPlaceablePlotFail_Parms;
	OnArtPlaceablePlotFail_Parms.oUsingActor = oUsingActor;
	memcpy ( &OnArtPlaceablePlotFail_Parms.nmToState, &nmToState, 0x8 );

	this->ProcessEvent ( pFnOnArtPlaceablePlotFail, &OnArtPlaceablePlotFail_Parms, NULL );
};

// Function SFXGame.BioArtPlaceableBehavior.OnArtPlaceableUsed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  User                           ( CPF_Parm )
// struct FName                   ToState                        ( CPF_Parm )

void UBioArtPlaceableBehavior::eventOnArtPlaceableUsed ( class AActor* User, struct FName ToState )
{
	static UFunction* pFnOnArtPlaceableUsed = NULL;

	if ( ! pFnOnArtPlaceableUsed )
		pFnOnArtPlaceableUsed = (UFunction*) UObject::GObjObjects()->Data[ 31524 ];

	UBioArtPlaceableBehavior_eventOnArtPlaceableUsed_Parms OnArtPlaceableUsed_Parms;
	OnArtPlaceableUsed_Parms.User = User;
	memcpy ( &OnArtPlaceableUsed_Parms.ToState, &ToState, 0x8 );

	this->ProcessEvent ( pFnOnArtPlaceableUsed, &OnArtPlaceableUsed_Parms, NULL );
};

// Function SFXGame.BioArtPlaceableBehavior.IsInteractive
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioArtPlaceableBehavior::eventIsInteractive ( )
{
	static UFunction* pFnIsInteractive = NULL;

	if ( ! pFnIsInteractive )
		pFnIsInteractive = (UFunction*) UObject::GObjObjects()->Data[ 31520 ];

	UBioArtPlaceableBehavior_eventIsInteractive_Parms IsInteractive_Parms;

	this->ProcessEvent ( pFnIsInteractive, &IsInteractive_Parms, NULL );

	return IsInteractive_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.GetState
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UBioArtPlaceableBehavior::GetState ( )
{
	static UFunction* pFnGetState = NULL;

	if ( ! pFnGetState )
		pFnGetState = (UFunction*) UObject::GObjObjects()->Data[ 31517 ];

	UBioArtPlaceableBehavior_execGetState_Parms GetState_Parms;

	this->ProcessEvent ( pFnGetState, &GetState_Parms, NULL );

	return GetState_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void UBioArtPlaceableBehavior::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31511 ];

	UBioArtPlaceableBehavior_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.BioArtPlaceableBehavior.GetStartingState
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UBioArtPlaceableBehavior::GetStartingState ( )
{
	static UFunction* pFnGetStartingState = NULL;

	if ( ! pFnGetStartingState )
		pFnGetStartingState = (UFunction*) UObject::GObjObjects()->Data[ 31508 ];

	UBioArtPlaceableBehavior_execGetStartingState_Parms GetStartingState_Parms;

	this->ProcessEvent ( pFnGetStartingState, &GetStartingState_Parms, NULL );

	return GetStartingState_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.DoDoorFinished
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ToState                        ( CPF_Parm )

void UBioArtPlaceableBehavior::DoDoorFinished ( struct FName ToState )
{
	static UFunction* pFnDoDoorFinished = NULL;

	if ( ! pFnDoDoorFinished )
		pFnDoDoorFinished = (UFunction*) UObject::GObjObjects()->Data[ 31506 ];

	UBioArtPlaceableBehavior_execDoDoorFinished_Parms DoDoorFinished_Parms;
	memcpy ( &DoDoorFinished_Parms.ToState, &ToState, 0x8 );

	pFnDoDoorFinished->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoDoorFinished, &DoDoorFinished_Parms, NULL );

	pFnDoDoorFinished->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceableBehavior.HasTransition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ToState                        ( CPF_Parm )
// struct FName                   Transition                     ( CPF_Parm )

bool UBioArtPlaceableBehavior::HasTransition ( struct FName ToState, struct FName Transition )
{
	static UFunction* pFnHasTransition = NULL;

	if ( ! pFnHasTransition )
		pFnHasTransition = (UFunction*) UObject::GObjObjects()->Data[ 31502 ];

	UBioArtPlaceableBehavior_execHasTransition_Parms HasTransition_Parms;
	memcpy ( &HasTransition_Parms.ToState, &ToState, 0x8 );
	memcpy ( &HasTransition_Parms.Transition, &Transition, 0x8 );

	pFnHasTransition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasTransition, &HasTransition_Parms, NULL );

	pFnHasTransition->FunctionFlags |= 0x400;

	return HasTransition_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.SetState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ToState                        ( CPF_Parm )
// struct FName                   NamedTransition                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  IgnoreTransition               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRightNow                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bApplyVFX                      ( CPF_OptionalParm | CPF_Parm )

bool UBioArtPlaceableBehavior::SetState ( struct FName ToState, struct FName NamedTransition, unsigned long IgnoreTransition, unsigned long bRightNow, unsigned long bApplyVFX )
{
	static UFunction* pFnSetState = NULL;

	if ( ! pFnSetState )
		pFnSetState = (UFunction*) UObject::GObjObjects()->Data[ 31495 ];

	UBioArtPlaceableBehavior_execSetState_Parms SetState_Parms;
	memcpy ( &SetState_Parms.ToState, &ToState, 0x8 );
	memcpy ( &SetState_Parms.NamedTransition, &NamedTransition, 0x8 );
	SetState_Parms.IgnoreTransition = IgnoreTransition;
	SetState_Parms.bRightNow = bRightNow;
	SetState_Parms.bApplyVFX = bApplyVFX;

	pFnSetState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetState, &SetState_Parms, NULL );

	pFnSetState->FunctionFlags |= 0x400;

	return SetState_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.RequiresProximityTimer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioArtPlaceableBehavior::RequiresProximityTimer ( )
{
	static UFunction* pFnRequiresProximityTimer = NULL;

	if ( ! pFnRequiresProximityTimer )
		pFnRequiresProximityTimer = (UFunction*) UObject::GObjObjects()->Data[ 31493 ];

	UBioArtPlaceableBehavior_execRequiresProximityTimer_Parms RequiresProximityTimer_Parms;

	pFnRequiresProximityTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequiresProximityTimer, &RequiresProximityTimer_Parms, NULL );

	pFnRequiresProximityTimer->FunctionFlags |= 0x400;

	return RequiresProximityTimer_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.VerifyNotEditor
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioArtPlaceableBehavior::VerifyNotEditor ( )
{
	static UFunction* pFnVerifyNotEditor = NULL;

	if ( ! pFnVerifyNotEditor )
		pFnVerifyNotEditor = (UFunction*) UObject::GObjObjects()->Data[ 31492 ];

	UBioArtPlaceableBehavior_execVerifyNotEditor_Parms VerifyNotEditor_Parms;

	pFnVerifyNotEditor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVerifyNotEditor, &VerifyNotEditor_Parms, NULL );

	pFnVerifyNotEditor->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceableBehavior.ApplyVFXForState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   NewState                       ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

void UBioArtPlaceableBehavior::ApplyVFXForState ( struct FName NewState, unsigned long bForce )
{
	static UFunction* pFnApplyVFXForState = NULL;

	if ( ! pFnApplyVFXForState )
		pFnApplyVFXForState = (UFunction*) UObject::GObjObjects()->Data[ 31489 ];

	UBioArtPlaceableBehavior_execApplyVFXForState_Parms ApplyVFXForState_Parms;
	memcpy ( &ApplyVFXForState_Parms.NewState, &NewState, 0x8 );
	ApplyVFXForState_Parms.bForce = bForce;

	pFnApplyVFXForState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyVFXForState, &ApplyVFXForState_Parms, NULL );

	pFnApplyVFXForState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceableBehavior.PreloadVFX
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioArtPlaceableBehavior::PreloadVFX ( )
{
	static UFunction* pFnPreloadVFX = NULL;

	if ( ! pFnPreloadVFX )
		pFnPreloadVFX = (UFunction*) UObject::GObjObjects()->Data[ 31488 ];

	UBioArtPlaceableBehavior_execPreloadVFX_Parms PreloadVFX_Parms;

	pFnPreloadVFX->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPreloadVFX, &PreloadVFX_Parms, NULL );

	pFnPreloadVFX->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceableBehavior.PlaySoundForState
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   oState                         ( CPF_Parm | CPF_OutParm )

void UBioArtPlaceableBehavior::PlaySoundForState ( struct FName* oState )
{
	static UFunction* pFnPlaySoundForState = NULL;

	if ( ! pFnPlaySoundForState )
		pFnPlaySoundForState = (UFunction*) UObject::GObjObjects()->Data[ 31486 ];

	UBioArtPlaceableBehavior_execPlaySoundForState_Parms PlaySoundForState_Parms;

	pFnPlaySoundForState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySoundForState, &PlaySoundForState_Parms, NULL );

	pFnPlaySoundForState->FunctionFlags |= 0x400;

	if ( oState )
		memcpy ( oState, &PlaySoundForState_Parms.oState, 0x8 );
};

// Function SFXGame.BioArtPlaceableBehavior.IsMeshPhysicsCapable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioArtPlaceableBehavior::IsMeshPhysicsCapable ( )
{
	static UFunction* pFnIsMeshPhysicsCapable = NULL;

	if ( ! pFnIsMeshPhysicsCapable )
		pFnIsMeshPhysicsCapable = (UFunction*) UObject::GObjObjects()->Data[ 31484 ];

	UBioArtPlaceableBehavior_execIsMeshPhysicsCapable_Parms IsMeshPhysicsCapable_Parms;

	pFnIsMeshPhysicsCapable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMeshPhysicsCapable, &IsMeshPhysicsCapable_Parms, NULL );

	pFnIsMeshPhysicsCapable->FunctionFlags |= 0x400;

	return IsMeshPhysicsCapable_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableBehavior.InitializeActionFramework
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioArtPlaceableBehavior::InitializeActionFramework ( )
{
	static UFunction* pFnInitializeActionFramework = NULL;

	if ( ! pFnInitializeActionFramework )
		pFnInitializeActionFramework = (UFunction*) UObject::GObjObjects()->Data[ 31483 ];

	UBioArtPlaceableBehavior_execInitializeActionFramework_Parms InitializeActionFramework_Parms;

	pFnInitializeActionFramework->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeActionFramework, &InitializeActionFramework_Parms, NULL );

	pFnInitializeActionFramework->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEpicPawnBehavior.DisplayEpicPawnVisualEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmLabel                        ( CPF_Parm )

bool UBioEpicPawnBehavior::DisplayEpicPawnVisualEffect ( struct FName nmLabel )
{
	static UFunction* pFnDisplayEpicPawnVisualEffect = NULL;

	if ( ! pFnDisplayEpicPawnVisualEffect )
		pFnDisplayEpicPawnVisualEffect = (UFunction*) UObject::GObjObjects()->Data[ 35644 ];

	UBioEpicPawnBehavior_execDisplayEpicPawnVisualEffect_Parms DisplayEpicPawnVisualEffect_Parms;
	memcpy ( &DisplayEpicPawnVisualEffect_Parms.nmLabel, &nmLabel, 0x8 );

	pFnDisplayEpicPawnVisualEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayEpicPawnVisualEffect, &DisplayEpicPawnVisualEffect_Parms, NULL );

	pFnDisplayEpicPawnVisualEffect->FunctionFlags |= 0x400;

	return DisplayEpicPawnVisualEffect_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.AdjustInventoryResource
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  eResourceType                  ( CPF_Parm )
// int                            nAmt                           ( CPF_Parm )
// unsigned long                  bNotifyTicker                  ( CPF_OptionalParm | CPF_Parm )

void UBioEpicPawnBehavior::eventAdjustInventoryResource ( unsigned char eResourceType, int nAmt, unsigned long bNotifyTicker )
{
	static UFunction* pFnAdjustInventoryResource = NULL;

	if ( ! pFnAdjustInventoryResource )
		pFnAdjustInventoryResource = (UFunction*) UObject::GObjObjects()->Data[ 35638 ];

	UBioEpicPawnBehavior_eventAdjustInventoryResource_Parms AdjustInventoryResource_Parms;
	AdjustInventoryResource_Parms.eResourceType = eResourceType;
	AdjustInventoryResource_Parms.nAmt = nAmt;
	AdjustInventoryResource_Parms.bNotifyTicker = bNotifyTicker;

	this->ProcessEvent ( pFnAdjustInventoryResource, &AdjustInventoryResource_Parms, NULL );
};

// Function SFXGame.BioEpicPawnBehavior.GetInventoryResource
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eResourceType                  ( CPF_Parm )

int UBioEpicPawnBehavior::eventGetInventoryResource ( unsigned char eResourceType )
{
	static UFunction* pFnGetInventoryResource = NULL;

	if ( ! pFnGetInventoryResource )
		pFnGetInventoryResource = (UFunction*) UObject::GObjObjects()->Data[ 35633 ];

	UBioEpicPawnBehavior_eventGetInventoryResource_Parms GetInventoryResource_Parms;
	GetInventoryResource_Parms.eResourceType = eResourceType;

	this->ProcessEvent ( pFnGetInventoryResource, &GetInventoryResource_Parms, NULL );

	return GetInventoryResource_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.IsHealing
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEpicPawnBehavior::IsHealing ( )
{
	static UFunction* pFnIsHealing = NULL;

	if ( ! pFnIsHealing )
		pFnIsHealing = (UFunction*) UObject::GObjObjects()->Data[ 35631 ];

	UBioEpicPawnBehavior_execIsHealing_Parms IsHealing_Parms;

	pFnIsHealing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHealing, &IsHealing_Parms, NULL );

	pFnIsHealing->FunctionFlags |= 0x400;

	return IsHealing_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.FindPowerIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPowerName                    ( CPF_Parm )

int UBioEpicPawnBehavior::FindPowerIndex ( struct FName nmPowerName )
{
	static UFunction* pFnFindPowerIndex = NULL;

	if ( ! pFnFindPowerIndex )
		pFnFindPowerIndex = (UFunction*) UObject::GObjObjects()->Data[ 35628 ];

	UBioEpicPawnBehavior_execFindPowerIndex_Parms FindPowerIndex_Parms;
	memcpy ( &FindPowerIndex_Parms.nmPowerName, &nmPowerName, 0x8 );

	pFnFindPowerIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPowerIndex, &FindPowerIndex_Parms, NULL );

	pFnFindPowerIndex->FunctionFlags |= 0x400;

	return FindPowerIndex_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.FindPower
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioPower*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPowerName                    ( CPF_Parm )

class UBioPower* UBioEpicPawnBehavior::FindPower ( struct FName nmPowerName )
{
	static UFunction* pFnFindPower = NULL;

	if ( ! pFnFindPower )
		pFnFindPower = (UFunction*) UObject::GObjObjects()->Data[ 35625 ];

	UBioEpicPawnBehavior_execFindPower_Parms FindPower_Parms;
	memcpy ( &FindPower_Parms.nmPowerName, &nmPowerName, 0x8 );

	pFnFindPower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindPower, &FindPower_Parms, NULL );

	pFnFindPower->FunctionFlags |= 0x400;

	return FindPower_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* UBioEpicPawnBehavior::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 35623 ];

	UBioEpicPawnBehavior_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.WriteSaveObject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioBaseSaveObject*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 InOuter                        ( CPF_Parm )
// class UBioBaseSaveObject*      Save                           ( CPF_OptionalParm | CPF_Parm )

class UBioBaseSaveObject* UBioEpicPawnBehavior::eventWriteSaveObject ( class UObject* InOuter, class UBioBaseSaveObject* Save )
{
	static UFunction* pFnWriteSaveObject = NULL;

	if ( ! pFnWriteSaveObject )
		pFnWriteSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 35619 ];

	UBioEpicPawnBehavior_eventWriteSaveObject_Parms WriteSaveObject_Parms;
	WriteSaveObject_Parms.InOuter = InOuter;
	WriteSaveObject_Parms.Save = Save;

	this->ProcessEvent ( pFnWriteSaveObject, &WriteSaveObject_Parms, NULL );

	return WriteSaveObject_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.GetDoorProximityRefCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioEpicPawnBehavior::GetDoorProximityRefCount ( )
{
	static UFunction* pFnGetDoorProximityRefCount = NULL;

	if ( ! pFnGetDoorProximityRefCount )
		pFnGetDoorProximityRefCount = (UFunction*) UObject::GObjObjects()->Data[ 35617 ];

	UBioEpicPawnBehavior_execGetDoorProximityRefCount_Parms GetDoorProximityRefCount_Parms;

	pFnGetDoorProximityRefCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDoorProximityRefCount, &GetDoorProximityRefCount_Parms, NULL );

	pFnGetDoorProximityRefCount->FunctionFlags |= 0x400;

	return GetDoorProximityRefCount_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.ModifyDoorProximityRefCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bIncrement                     ( CPF_Parm )

void UBioEpicPawnBehavior::ModifyDoorProximityRefCount ( unsigned long bIncrement )
{
	static UFunction* pFnModifyDoorProximityRefCount = NULL;

	if ( ! pFnModifyDoorProximityRefCount )
		pFnModifyDoorProximityRefCount = (UFunction*) UObject::GObjObjects()->Data[ 35615 ];

	UBioEpicPawnBehavior_execModifyDoorProximityRefCount_Parms ModifyDoorProximityRefCount_Parms;
	ModifyDoorProximityRefCount_Parms.bIncrement = bIncrement;

	pFnModifyDoorProximityRefCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnModifyDoorProximityRefCount, &ModifyDoorProximityRefCount_Parms, NULL );

	pFnModifyDoorProximityRefCount->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEpicPawnBehavior.SetPreviousActionState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UBioEpicPawnBehavior::SetPreviousActionState ( )
{
	static UFunction* pFnSetPreviousActionState = NULL;

	if ( ! pFnSetPreviousActionState )
		pFnSetPreviousActionState = (UFunction*) UObject::GObjObjects()->Data[ 35613 ];

	UBioEpicPawnBehavior_execSetPreviousActionState_Parms SetPreviousActionState_Parms;

	pFnSetPreviousActionState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPreviousActionState, &SetPreviousActionState_Parms, NULL );

	pFnSetPreviousActionState->FunctionFlags |= 0x400;

	return SetPreviousActionState_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.SetActionState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eState                         ( CPF_Parm )
// float                          fDelay                         ( CPF_OptionalParm | CPF_Parm )

unsigned char UBioEpicPawnBehavior::SetActionState ( unsigned char eState, float fDelay )
{
	static UFunction* pFnSetActionState = NULL;

	if ( ! pFnSetActionState )
		pFnSetActionState = (UFunction*) UObject::GObjObjects()->Data[ 35609 ];

	UBioEpicPawnBehavior_execSetActionState_Parms SetActionState_Parms;
	SetActionState_Parms.eState = eState;
	SetActionState_Parms.fDelay = fDelay;

	pFnSetActionState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActionState, &SetActionState_Parms, NULL );

	pFnSetActionState->FunctionFlags |= 0x400;

	return SetActionState_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.TickPowers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UBioEpicPawnBehavior::TickPowers ( float DeltaTime )
{
	static UFunction* pFnTickPowers = NULL;

	if ( ! pFnTickPowers )
		pFnTickPowers = (UFunction*) UObject::GObjObjects()->Data[ 35607 ];

	UBioEpicPawnBehavior_execTickPowers_Parms TickPowers_Parms;
	TickPowers_Parms.DeltaTime = DeltaTime;

	pFnTickPowers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickPowers, &TickPowers_Parms, NULL );

	pFnTickPowers->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEpicPawnBehavior.ClearCurrentPower
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioEpicPawnBehavior::ClearCurrentPower ( )
{
	static UFunction* pFnClearCurrentPower = NULL;

	if ( ! pFnClearCurrentPower )
		pFnClearCurrentPower = (UFunction*) UObject::GObjObjects()->Data[ 35606 ];

	UBioEpicPawnBehavior_execClearCurrentPower_Parms ClearCurrentPower_Parms;

	pFnClearCurrentPower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearCurrentPower, &ClearCurrentPower_Parms, NULL );

	pFnClearCurrentPower->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEpicPawnBehavior.SetCurrentPower
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPower                        ( CPF_Parm )
// float                          fCooldownRemaining             ( CPF_Parm | CPF_OutParm )

bool UBioEpicPawnBehavior::SetCurrentPower ( struct FName nmPower, float* fCooldownRemaining )
{
	static UFunction* pFnSetCurrentPower = NULL;

	if ( ! pFnSetCurrentPower )
		pFnSetCurrentPower = (UFunction*) UObject::GObjObjects()->Data[ 35602 ];

	UBioEpicPawnBehavior_execSetCurrentPower_Parms SetCurrentPower_Parms;
	memcpy ( &SetCurrentPower_Parms.nmPower, &nmPower, 0x8 );

	pFnSetCurrentPower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCurrentPower, &SetCurrentPower_Parms, NULL );

	pFnSetCurrentPower->FunctionFlags |= 0x400;

	if ( fCooldownRemaining )
		*fCooldownRemaining = SetCurrentPower_Parms.fCooldownRemaining;

	return SetCurrentPower_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.IsAbilityEnabledCombatTransition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEpicPawnBehavior::IsAbilityEnabledCombatTransition ( )
{
	static UFunction* pFnIsAbilityEnabledCombatTransition = NULL;

	if ( ! pFnIsAbilityEnabledCombatTransition )
		pFnIsAbilityEnabledCombatTransition = (UFunction*) UObject::GObjObjects()->Data[ 35600 ];

	UBioEpicPawnBehavior_execIsAbilityEnabledCombatTransition_Parms IsAbilityEnabledCombatTransition_Parms;

	pFnIsAbilityEnabledCombatTransition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAbilityEnabledCombatTransition, &IsAbilityEnabledCombatTransition_Parms, NULL );

	pFnIsAbilityEnabledCombatTransition->FunctionFlags |= 0x400;

	return IsAbilityEnabledCombatTransition_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.IsAbilityEnabledPowers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEpicPawnBehavior::IsAbilityEnabledPowers ( )
{
	static UFunction* pFnIsAbilityEnabledPowers = NULL;

	if ( ! pFnIsAbilityEnabledPowers )
		pFnIsAbilityEnabledPowers = (UFunction*) UObject::GObjObjects()->Data[ 35598 ];

	UBioEpicPawnBehavior_execIsAbilityEnabledPowers_Parms IsAbilityEnabledPowers_Parms;

	pFnIsAbilityEnabledPowers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAbilityEnabledPowers, &IsAbilityEnabledPowers_Parms, NULL );

	pFnIsAbilityEnabledPowers->FunctionFlags |= 0x400;

	return IsAbilityEnabledPowers_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.IsAbilityEnabledGrenades
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEpicPawnBehavior::IsAbilityEnabledGrenades ( )
{
	static UFunction* pFnIsAbilityEnabledGrenades = NULL;

	if ( ! pFnIsAbilityEnabledGrenades )
		pFnIsAbilityEnabledGrenades = (UFunction*) UObject::GObjObjects()->Data[ 35596 ];

	UBioEpicPawnBehavior_execIsAbilityEnabledGrenades_Parms IsAbilityEnabledGrenades_Parms;

	pFnIsAbilityEnabledGrenades->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAbilityEnabledGrenades, &IsAbilityEnabledGrenades_Parms, NULL );

	pFnIsAbilityEnabledGrenades->FunctionFlags |= 0x400;

	return IsAbilityEnabledGrenades_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.IsAbilityEnabledWeapons
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEpicPawnBehavior::IsAbilityEnabledWeapons ( )
{
	static UFunction* pFnIsAbilityEnabledWeapons = NULL;

	if ( ! pFnIsAbilityEnabledWeapons )
		pFnIsAbilityEnabledWeapons = (UFunction*) UObject::GObjObjects()->Data[ 35594 ];

	UBioEpicPawnBehavior_execIsAbilityEnabledWeapons_Parms IsAbilityEnabledWeapons_Parms;

	pFnIsAbilityEnabledWeapons->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAbilityEnabledWeapons, &IsAbilityEnabledWeapons_Parms, NULL );

	pFnIsAbilityEnabledWeapons->FunctionFlags |= 0x400;

	return IsAbilityEnabledWeapons_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.IsAbilityEnabledStack
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEpicPawnBehavior::IsAbilityEnabledStack ( )
{
	static UFunction* pFnIsAbilityEnabledStack = NULL;

	if ( ! pFnIsAbilityEnabledStack )
		pFnIsAbilityEnabledStack = (UFunction*) UObject::GObjObjects()->Data[ 35592 ];

	UBioEpicPawnBehavior_execIsAbilityEnabledStack_Parms IsAbilityEnabledStack_Parms;

	pFnIsAbilityEnabledStack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAbilityEnabledStack, &IsAbilityEnabledStack_Parms, NULL );

	pFnIsAbilityEnabledStack->FunctionFlags |= 0x400;

	return IsAbilityEnabledStack_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.IsAbilityEnabledQueue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEpicPawnBehavior::IsAbilityEnabledQueue ( )
{
	static UFunction* pFnIsAbilityEnabledQueue = NULL;

	if ( ! pFnIsAbilityEnabledQueue )
		pFnIsAbilityEnabledQueue = (UFunction*) UObject::GObjObjects()->Data[ 35590 ];

	UBioEpicPawnBehavior_execIsAbilityEnabledQueue_Parms IsAbilityEnabledQueue_Parms;

	pFnIsAbilityEnabledQueue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAbilityEnabledQueue, &IsAbilityEnabledQueue_Parms, NULL );

	pFnIsAbilityEnabledQueue->FunctionFlags |= 0x400;

	return IsAbilityEnabledQueue_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.IsAbilityEnabledAll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioEpicPawnBehavior::IsAbilityEnabledAll ( )
{
	static UFunction* pFnIsAbilityEnabledAll = NULL;

	if ( ! pFnIsAbilityEnabledAll )
		pFnIsAbilityEnabledAll = (UFunction*) UObject::GObjObjects()->Data[ 35588 ];

	UBioEpicPawnBehavior_execIsAbilityEnabledAll_Parms IsAbilityEnabledAll_Parms;

	pFnIsAbilityEnabledAll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAbilityEnabledAll, &IsAbilityEnabledAll_Parms, NULL );

	pFnIsAbilityEnabledAll->FunctionFlags |= 0x400;

	return IsAbilityEnabledAll_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.DoDisabledEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eEnableType                    ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

void UBioEpicPawnBehavior::DoDisabledEvent ( unsigned char eEnableType, struct FName nmSubType )
{
	static UFunction* pFnDoDisabledEvent = NULL;

	if ( ! pFnDoDisabledEvent )
		pFnDoDisabledEvent = (UFunction*) UObject::GObjObjects()->Data[ 35585 ];

	UBioEpicPawnBehavior_execDoDisabledEvent_Parms DoDisabledEvent_Parms;
	DoDisabledEvent_Parms.eEnableType = eEnableType;
	memcpy ( &DoDisabledEvent_Parms.nmSubType, &nmSubType, 0x8 );

	pFnDoDisabledEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoDisabledEvent, &DoDisabledEvent_Parms, NULL );

	pFnDoDisabledEvent->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEpicPawnBehavior.DoEnabledEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eEnableType                    ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

void UBioEpicPawnBehavior::DoEnabledEvent ( unsigned char eEnableType, struct FName nmSubType )
{
	static UFunction* pFnDoEnabledEvent = NULL;

	if ( ! pFnDoEnabledEvent )
		pFnDoEnabledEvent = (UFunction*) UObject::GObjObjects()->Data[ 35582 ];

	UBioEpicPawnBehavior_execDoEnabledEvent_Parms DoEnabledEvent_Parms;
	DoEnabledEvent_Parms.eEnableType = eEnableType;
	memcpy ( &DoEnabledEvent_Parms.nmSubType, &nmSubType, 0x8 );

	pFnDoEnabledEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoEnabledEvent, &DoEnabledEvent_Parms, NULL );

	pFnDoEnabledEvent->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEpicPawnBehavior.IsAbilityEnabled_Power
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEnableType                    ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

bool UBioEpicPawnBehavior::IsAbilityEnabled_Power ( unsigned char eEnableType, struct FName nmSubType )
{
	static UFunction* pFnIsAbilityEnabled_Power = NULL;

	if ( ! pFnIsAbilityEnabled_Power )
		pFnIsAbilityEnabled_Power = (UFunction*) UObject::GObjObjects()->Data[ 35578 ];

	UBioEpicPawnBehavior_execIsAbilityEnabled_Power_Parms IsAbilityEnabled_Power_Parms;
	IsAbilityEnabled_Power_Parms.eEnableType = eEnableType;
	memcpy ( &IsAbilityEnabled_Power_Parms.nmSubType, &nmSubType, 0x8 );

	pFnIsAbilityEnabled_Power->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAbilityEnabled_Power, &IsAbilityEnabled_Power_Parms, NULL );

	pFnIsAbilityEnabled_Power->FunctionFlags |= 0x400;

	return IsAbilityEnabled_Power_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.AbilityEnable_Power
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnable                        ( CPF_Parm )
// unsigned char                  eEnableType                    ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

int UBioEpicPawnBehavior::AbilityEnable_Power ( unsigned long bEnable, unsigned char eEnableType, struct FName nmSubType )
{
	static UFunction* pFnAbilityEnable_Power = NULL;

	if ( ! pFnAbilityEnable_Power )
		pFnAbilityEnable_Power = (UFunction*) UObject::GObjObjects()->Data[ 35573 ];

	UBioEpicPawnBehavior_execAbilityEnable_Power_Parms AbilityEnable_Power_Parms;
	AbilityEnable_Power_Parms.bEnable = bEnable;
	AbilityEnable_Power_Parms.eEnableType = eEnableType;
	memcpy ( &AbilityEnable_Power_Parms.nmSubType, &nmSubType, 0x8 );

	pFnAbilityEnable_Power->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAbilityEnable_Power, &AbilityEnable_Power_Parms, NULL );

	pFnAbilityEnable_Power->FunctionFlags |= 0x400;

	return AbilityEnable_Power_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.IsAbilityEnabled_Offense
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEnableType                    ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

bool UBioEpicPawnBehavior::IsAbilityEnabled_Offense ( unsigned char eEnableType, struct FName nmSubType )
{
	static UFunction* pFnIsAbilityEnabled_Offense = NULL;

	if ( ! pFnIsAbilityEnabled_Offense )
		pFnIsAbilityEnabled_Offense = (UFunction*) UObject::GObjObjects()->Data[ 35569 ];

	UBioEpicPawnBehavior_execIsAbilityEnabled_Offense_Parms IsAbilityEnabled_Offense_Parms;
	IsAbilityEnabled_Offense_Parms.eEnableType = eEnableType;
	memcpy ( &IsAbilityEnabled_Offense_Parms.nmSubType, &nmSubType, 0x8 );

	pFnIsAbilityEnabled_Offense->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAbilityEnabled_Offense, &IsAbilityEnabled_Offense_Parms, NULL );

	pFnIsAbilityEnabled_Offense->FunctionFlags |= 0x400;

	return IsAbilityEnabled_Offense_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.AbilityEnable_Offense
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnable                        ( CPF_Parm )
// unsigned char                  eEnableType                    ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

int UBioEpicPawnBehavior::AbilityEnable_Offense ( unsigned long bEnable, unsigned char eEnableType, struct FName nmSubType )
{
	static UFunction* pFnAbilityEnable_Offense = NULL;

	if ( ! pFnAbilityEnable_Offense )
		pFnAbilityEnable_Offense = (UFunction*) UObject::GObjObjects()->Data[ 35564 ];

	UBioEpicPawnBehavior_execAbilityEnable_Offense_Parms AbilityEnable_Offense_Parms;
	AbilityEnable_Offense_Parms.bEnable = bEnable;
	AbilityEnable_Offense_Parms.eEnableType = eEnableType;
	memcpy ( &AbilityEnable_Offense_Parms.nmSubType, &nmSubType, 0x8 );

	pFnAbilityEnable_Offense->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAbilityEnable_Offense, &AbilityEnable_Offense_Parms, NULL );

	pFnAbilityEnable_Offense->FunctionFlags |= 0x400;

	return AbilityEnable_Offense_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.IsAbilityEnabled_AI
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEnableType                    ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

bool UBioEpicPawnBehavior::IsAbilityEnabled_AI ( unsigned char eEnableType, struct FName nmSubType )
{
	static UFunction* pFnIsAbilityEnabled_AI = NULL;

	if ( ! pFnIsAbilityEnabled_AI )
		pFnIsAbilityEnabled_AI = (UFunction*) UObject::GObjObjects()->Data[ 35560 ];

	UBioEpicPawnBehavior_execIsAbilityEnabled_AI_Parms IsAbilityEnabled_AI_Parms;
	IsAbilityEnabled_AI_Parms.eEnableType = eEnableType;
	memcpy ( &IsAbilityEnabled_AI_Parms.nmSubType, &nmSubType, 0x8 );

	pFnIsAbilityEnabled_AI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAbilityEnabled_AI, &IsAbilityEnabled_AI_Parms, NULL );

	pFnIsAbilityEnabled_AI->FunctionFlags |= 0x400;

	return IsAbilityEnabled_AI_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.AbilityEnable_AI
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnable                        ( CPF_Parm )
// unsigned char                  eEnableType                    ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

int UBioEpicPawnBehavior::AbilityEnable_AI ( unsigned long bEnable, unsigned char eEnableType, struct FName nmSubType )
{
	static UFunction* pFnAbilityEnable_AI = NULL;

	if ( ! pFnAbilityEnable_AI )
		pFnAbilityEnable_AI = (UFunction*) UObject::GObjObjects()->Data[ 35555 ];

	UBioEpicPawnBehavior_execAbilityEnable_AI_Parms AbilityEnable_AI_Parms;
	AbilityEnable_AI_Parms.bEnable = bEnable;
	AbilityEnable_AI_Parms.eEnableType = eEnableType;
	memcpy ( &AbilityEnable_AI_Parms.nmSubType, &nmSubType, 0x8 );

	pFnAbilityEnable_AI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAbilityEnable_AI, &AbilityEnable_AI_Parms, NULL );

	pFnAbilityEnable_AI->FunctionFlags |= 0x400;

	return AbilityEnable_AI_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehavior.InitializeActionFramework
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioEpicPawnBehavior::InitializeActionFramework ( )
{
	static UFunction* pFnInitializeActionFramework = NULL;

	if ( ! pFnInitializeActionFramework )
		pFnInitializeActionFramework = (UFunction*) UObject::GObjObjects()->Data[ 35554 ];

	UBioEpicPawnBehavior_execInitializeActionFramework_Parms InitializeActionFramework_Parms;

	pFnInitializeActionFramework->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeActionFramework, &InitializeActionFramework_Parms, NULL );

	pFnInitializeActionFramework->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEpicPawnBehavior.TickBehavior
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UBioEpicPawnBehavior::TickBehavior ( float DeltaTime )
{
	static UFunction* pFnTickBehavior = NULL;

	if ( ! pFnTickBehavior )
		pFnTickBehavior = (UFunction*) UObject::GObjObjects()->Data[ 35552 ];

	UBioEpicPawnBehavior_execTickBehavior_Parms TickBehavior_Parms;
	TickBehavior_Parms.DeltaTime = DeltaTime;

	pFnTickBehavior->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickBehavior, &TickBehavior_Parms, NULL );

	pFnTickBehavior->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawnBehavior.GetActorTypeGameName
// [0x00020002] 
// Parameters infos:

void UBioPawnBehavior::GetActorTypeGameName ( )
{
	static UFunction* pFnGetActorTypeGameName = NULL;

	if ( ! pFnGetActorTypeGameName )
		pFnGetActorTypeGameName = (UFunction*) UObject::GObjObjects()->Data[ 39713 ];

	UBioPawnBehavior_execGetActorTypeGameName_Parms GetActorTypeGameName_Parms;

	this->ProcessEvent ( pFnGetActorTypeGameName, &GetActorTypeGameName_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.TEMP_HolsterWeapon
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioPawnBehavior::eventTEMP_HolsterWeapon ( )
{
	static UFunction* pFnTEMP_HolsterWeapon = NULL;

	if ( ! pFnTEMP_HolsterWeapon )
		pFnTEMP_HolsterWeapon = (UFunction*) UObject::GObjObjects()->Data[ 39711 ];

	UBioPawnBehavior_eventTEMP_HolsterWeapon_Parms TEMP_HolsterWeapon_Parms;

	this->ProcessEvent ( pFnTEMP_HolsterWeapon, &TEMP_HolsterWeapon_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.TEMP_DrawWeapon
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioPawnBehavior::eventTEMP_DrawWeapon ( )
{
	static UFunction* pFnTEMP_DrawWeapon = NULL;

	if ( ! pFnTEMP_DrawWeapon )
		pFnTEMP_DrawWeapon = (UFunction*) UObject::GObjObjects()->Data[ 39709 ];

	UBioPawnBehavior_eventTEMP_DrawWeapon_Parms TEMP_DrawWeapon_Parms;

	this->ProcessEvent ( pFnTEMP_DrawWeapon, &TEMP_DrawWeapon_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.HasPowersOfType
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eDiscipline                    ( CPF_Parm )

bool UBioPawnBehavior::HasPowersOfType ( unsigned char eDiscipline )
{
	static UFunction* pFnHasPowersOfType = NULL;

	if ( ! pFnHasPowersOfType )
		pFnHasPowersOfType = (UFunction*) UObject::GObjObjects()->Data[ 39704 ];

	UBioPawnBehavior_execHasPowersOfType_Parms HasPowersOfType_Parms;
	HasPowersOfType_Parms.eDiscipline = eDiscipline;

	this->ProcessEvent ( pFnHasPowersOfType, &HasPowersOfType_Parms, NULL );

	return HasPowersOfType_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.GetPowerUsePercent
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPawnBehavior::GetPowerUsePercent ( )
{
	static UFunction* pFnGetPowerUsePercent = NULL;

	if ( ! pFnGetPowerUsePercent )
		pFnGetPowerUsePercent = (UFunction*) UObject::GObjObjects()->Data[ 39701 ];

	UBioPawnBehavior_execGetPowerUsePercent_Parms GetPowerUsePercent_Parms;

	this->ProcessEvent ( pFnGetPowerUsePercent, &GetPowerUsePercent_Parms, NULL );

	return GetPowerUsePercent_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.GetCanBePhysicsImpacted
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPawnBehavior::GetCanBePhysicsImpacted ( )
{
	static UFunction* pFnGetCanBePhysicsImpacted = NULL;

	if ( ! pFnGetCanBePhysicsImpacted )
		pFnGetCanBePhysicsImpacted = (UFunction*) UObject::GObjObjects()->Data[ 39699 ];

	UBioPawnBehavior_execGetCanBePhysicsImpacted_Parms GetCanBePhysicsImpacted_Parms;

	pFnGetCanBePhysicsImpacted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCanBePhysicsImpacted, &GetCanBePhysicsImpacted_Parms, NULL );

	pFnGetCanBePhysicsImpacted->FunctionFlags |= 0x400;

	return GetCanBePhysicsImpacted_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.SetActionState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eState                         ( CPF_Parm )
// float                          fDelay                         ( CPF_OptionalParm | CPF_Parm )

unsigned char UBioPawnBehavior::SetActionState ( unsigned char eState, float fDelay )
{
	static UFunction* pFnSetActionState = NULL;

	if ( ! pFnSetActionState )
		pFnSetActionState = (UFunction*) UObject::GObjObjects()->Data[ 39695 ];

	UBioPawnBehavior_execSetActionState_Parms SetActionState_Parms;
	SetActionState_Parms.eState = eState;
	SetActionState_Parms.fDelay = fDelay;

	pFnSetActionState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActionState, &SetActionState_Parms, NULL );

	pFnSetActionState->FunctionFlags |= 0x400;

	return SetActionState_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.GetDeathCapabilityActivationTime
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPawnBehavior::GetDeathCapabilityActivationTime ( )
{
	static UFunction* pFnGetDeathCapabilityActivationTime = NULL;

	if ( ! pFnGetDeathCapabilityActivationTime )
		pFnGetDeathCapabilityActivationTime = (UFunction*) UObject::GObjObjects()->Data[ 39693 ];

	UBioPawnBehavior_execGetDeathCapabilityActivationTime_Parms GetDeathCapabilityActivationTime_Parms;

	this->ProcessEvent ( pFnGetDeathCapabilityActivationTime, &GetDeathCapabilityActivationTime_Parms, NULL );

	return GetDeathCapabilityActivationTime_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.DecrementRagdollCount
// [0x00020002] 
// Parameters infos:

void UBioPawnBehavior::DecrementRagdollCount ( )
{
	static UFunction* pFnDecrementRagdollCount = NULL;

	if ( ! pFnDecrementRagdollCount )
		pFnDecrementRagdollCount = (UFunction*) UObject::GObjObjects()->Data[ 39692 ];

	UBioPawnBehavior_execDecrementRagdollCount_Parms DecrementRagdollCount_Parms;

	this->ProcessEvent ( pFnDecrementRagdollCount, &DecrementRagdollCount_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.IncrementRagdollCount
// [0x00020002] 
// Parameters infos:

void UBioPawnBehavior::IncrementRagdollCount ( )
{
	static UFunction* pFnIncrementRagdollCount = NULL;

	if ( ! pFnIncrementRagdollCount )
		pFnIncrementRagdollCount = (UFunction*) UObject::GObjObjects()->Data[ 39691 ];

	UBioPawnBehavior_execIncrementRagdollCount_Parms IncrementRagdollCount_Parms;

	this->ProcessEvent ( pFnIncrementRagdollCount, &IncrementRagdollCount_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.FeignDeathKismet
// [0x00020002] 
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void UBioPawnBehavior::FeignDeathKismet ( unsigned long B )
{
	static UFunction* pFnFeignDeathKismet = NULL;

	if ( ! pFnFeignDeathKismet )
		pFnFeignDeathKismet = (UFunction*) UObject::GObjObjects()->Data[ 39689 ];

	UBioPawnBehavior_execFeignDeathKismet_Parms FeignDeathKismet_Parms;
	FeignDeathKismet_Parms.B = B;

	this->ProcessEvent ( pFnFeignDeathKismet, &FeignDeathKismet_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.FeignDeath
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )
// unsigned long                  bForceState                    ( CPF_OptionalParm | CPF_Parm )

void UBioPawnBehavior::eventFeignDeath ( unsigned long B, unsigned long bForceState )
{
	static UFunction* pFnFeignDeath = NULL;

	if ( ! pFnFeignDeath )
		pFnFeignDeath = (UFunction*) UObject::GObjObjects()->Data[ 39686 ];

	UBioPawnBehavior_eventFeignDeath_Parms FeignDeath_Parms;
	FeignDeath_Parms.B = B;
	FeignDeath_Parms.bForceState = bForceState;

	this->ProcessEvent ( pFnFeignDeath, &FeignDeath_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* UBioPawnBehavior::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 39684 ];

	UBioPawnBehavior_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.GetCharmSkill
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPowerLevelUpHelper*  LevelUpHelper                  ( CPF_OptionalParm | CPF_Parm )

int UBioPawnBehavior::GetCharmSkill ( class USFXPowerLevelUpHelper* LevelUpHelper )
{
	static UFunction* pFnGetCharmSkill = NULL;

	if ( ! pFnGetCharmSkill )
		pFnGetCharmSkill = (UFunction*) UObject::GObjObjects()->Data[ 39672 ];

	UBioPawnBehavior_execGetCharmSkill_Parms GetCharmSkill_Parms;
	GetCharmSkill_Parms.LevelUpHelper = LevelUpHelper;

	this->ProcessEvent ( pFnGetCharmSkill, &GetCharmSkill_Parms, NULL );

	return GetCharmSkill_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.GetIntimidateSkill
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPowerLevelUpHelper*  LevelUpHelper                  ( CPF_OptionalParm | CPF_Parm )

int UBioPawnBehavior::GetIntimidateSkill ( class USFXPowerLevelUpHelper* LevelUpHelper )
{
	static UFunction* pFnGetIntimidateSkill = NULL;

	if ( ! pFnGetIntimidateSkill )
		pFnGetIntimidateSkill = (UFunction*) UObject::GObjObjects()->Data[ 39659 ];

	UBioPawnBehavior_execGetIntimidateSkill_Parms GetIntimidateSkill_Parms;
	GetIntimidateSkill_Parms.LevelUpHelper = LevelUpHelper;

	this->ProcessEvent ( pFnGetIntimidateSkill, &GetIntimidateSkill_Parms, NULL );

	return GetIntimidateSkill_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.ProcessMeshAdj
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void UBioPawnBehavior::ProcessMeshAdj ( float fDeltaTime )
{
	static UFunction* pFnProcessMeshAdj = NULL;

	if ( ! pFnProcessMeshAdj )
		pFnProcessMeshAdj = (UFunction*) UObject::GObjObjects()->Data[ 39657 ];

	UBioPawnBehavior_execProcessMeshAdj_Parms ProcessMeshAdj_Parms;
	ProcessMeshAdj_Parms.fDeltaTime = fDeltaTime;

	pFnProcessMeshAdj->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessMeshAdj, &ProcessMeshAdj_Parms, NULL );

	pFnProcessMeshAdj->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawnBehavior.InPlayerParty
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPawnBehavior::InPlayerParty ( )
{
	static UFunction* pFnInPlayerParty = NULL;

	if ( ! pFnInPlayerParty )
		pFnInPlayerParty = (UFunction*) UObject::GObjObjects()->Data[ 39655 ];

	UBioPawnBehavior_execInPlayerParty_Parms InPlayerParty_Parms;

	this->ProcessEvent ( pFnInPlayerParty, &InPlayerParty_Parms, NULL );

	return InPlayerParty_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.GetBioticAmpEquipped
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPawnBehavior::GetBioticAmpEquipped ( )
{
	static UFunction* pFnGetBioticAmpEquipped = NULL;

	if ( ! pFnGetBioticAmpEquipped )
		pFnGetBioticAmpEquipped = (UFunction*) UObject::GObjObjects()->Data[ 39653 ];

	UBioPawnBehavior_execGetBioticAmpEquipped_Parms GetBioticAmpEquipped_Parms;

	this->ProcessEvent ( pFnGetBioticAmpEquipped, &GetBioticAmpEquipped_Parms, NULL );

	return GetBioticAmpEquipped_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.GetClass
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioPawnBehavior::GetClass ( )
{
	static UFunction* pFnGetClass = NULL;

	if ( ! pFnGetClass )
		pFnGetClass = (UFunction*) UObject::GObjObjects()->Data[ 39651 ];

	UBioPawnBehavior_execGetClass_Parms GetClass_Parms;

	this->ProcessEvent ( pFnGetClass, &GetClass_Parms, NULL );

	return GetClass_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.AdjustMediGel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nAmt                           ( CPF_Parm )

void UBioPawnBehavior::eventAdjustMediGel ( int nAmt )
{
	static UFunction* pFnAdjustMediGel = NULL;

	if ( ! pFnAdjustMediGel )
		pFnAdjustMediGel = (UFunction*) UObject::GObjObjects()->Data[ 39649 ];

	UBioPawnBehavior_eventAdjustMediGel_Parms AdjustMediGel_Parms;
	AdjustMediGel_Parms.nAmt = nAmt;

	this->ProcessEvent ( pFnAdjustMediGel, &AdjustMediGel_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.GetMediGel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioPawnBehavior::eventGetMediGel ( )
{
	static UFunction* pFnGetMediGel = NULL;

	if ( ! pFnGetMediGel )
		pFnGetMediGel = (UFunction*) UObject::GObjObjects()->Data[ 39647 ];

	UBioPawnBehavior_eventGetMediGel_Parms GetMediGel_Parms;

	this->ProcessEvent ( pFnGetMediGel, &GetMediGel_Parms, NULL );

	return GetMediGel_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.AdjustCredits
// [0x00020002] 
// Parameters infos:
// int                            nAmt                           ( CPF_Parm )

void UBioPawnBehavior::AdjustCredits ( int nAmt )
{
	static UFunction* pFnAdjustCredits = NULL;

	if ( ! pFnAdjustCredits )
		pFnAdjustCredits = (UFunction*) UObject::GObjObjects()->Data[ 39644 ];

	UBioPawnBehavior_execAdjustCredits_Parms AdjustCredits_Parms;
	AdjustCredits_Parms.nAmt = nAmt;

	this->ProcessEvent ( pFnAdjustCredits, &AdjustCredits_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.GetCredits
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioPawnBehavior::GetCredits ( )
{
	static UFunction* pFnGetCredits = NULL;

	if ( ! pFnGetCredits )
		pFnGetCredits = (UFunction*) UObject::GObjObjects()->Data[ 39642 ];

	UBioPawnBehavior_execGetCredits_Parms GetCredits_Parms;

	this->ProcessEvent ( pFnGetCredits, &GetCredits_Parms, NULL );

	return GetCredits_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.GetGender
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UBioPawnBehavior::GetGender ( )
{
	static UFunction* pFnGetGender = NULL;

	if ( ! pFnGetGender )
		pFnGetGender = (UFunction*) UObject::GObjObjects()->Data[ 39640 ];

	UBioPawnBehavior_execGetGender_Parms GetGender_Parms;

	this->ProcessEvent ( pFnGetGender, &GetGender_Parms, NULL );

	return GetGender_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.AdvanceTalkToCount
// [0x00020002] 
// Parameters infos:
// int                            nAmt                           ( CPF_Parm )

void UBioPawnBehavior::AdvanceTalkToCount ( int nAmt )
{
	static UFunction* pFnAdvanceTalkToCount = NULL;

	if ( ! pFnAdvanceTalkToCount )
		pFnAdvanceTalkToCount = (UFunction*) UObject::GObjObjects()->Data[ 39638 ];

	UBioPawnBehavior_execAdvanceTalkToCount_Parms AdvanceTalkToCount_Parms;
	AdvanceTalkToCount_Parms.nAmt = nAmt;

	this->ProcessEvent ( pFnAdvanceTalkToCount, &AdvanceTalkToCount_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.SetTalkToCount
// [0x00020002] 
// Parameters infos:
// int                            nValue                         ( CPF_Parm )

void UBioPawnBehavior::SetTalkToCount ( int nValue )
{
	static UFunction* pFnSetTalkToCount = NULL;

	if ( ! pFnSetTalkToCount )
		pFnSetTalkToCount = (UFunction*) UObject::GObjObjects()->Data[ 39636 ];

	UBioPawnBehavior_execSetTalkToCount_Parms SetTalkToCount_Parms;
	SetTalkToCount_Parms.nValue = nValue;

	this->ProcessEvent ( pFnSetTalkToCount, &SetTalkToCount_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.GetTalkToCount
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioPawnBehavior::GetTalkToCount ( )
{
	static UFunction* pFnGetTalkToCount = NULL;

	if ( ! pFnGetTalkToCount )
		pFnGetTalkToCount = (UFunction*) UObject::GObjObjects()->Data[ 39634 ];

	UBioPawnBehavior_execGetTalkToCount_Parms GetTalkToCount_Parms;

	this->ProcessEvent ( pFnGetTalkToCount, &GetTalkToCount_Parms, NULL );

	return GetTalkToCount_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.GetMarshalRank
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioPawnBehavior::GetMarshalRank ( )
{
	static UFunction* pFnGetMarshalRank = NULL;

	if ( ! pFnGetMarshalRank )
		pFnGetMarshalRank = (UFunction*) UObject::GObjObjects()->Data[ 39632 ];

	UBioPawnBehavior_execGetMarshalRank_Parms GetMarshalRank_Parms;

	this->ProcessEvent ( pFnGetMarshalRank, &GetMarshalRank_Parms, NULL );

	return GetMarshalRank_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.SetBackground_Notoritey
// [0x00020002] 
// Parameters infos:
// int                            nValue                         ( CPF_Parm )

void UBioPawnBehavior::SetBackground_Notoritey ( int nValue )
{
	static UFunction* pFnSetBackground_Notoritey = NULL;

	if ( ! pFnSetBackground_Notoritey )
		pFnSetBackground_Notoritey = (UFunction*) UObject::GObjObjects()->Data[ 39630 ];

	UBioPawnBehavior_execSetBackground_Notoritey_Parms SetBackground_Notoritey_Parms;
	SetBackground_Notoritey_Parms.nValue = nValue;

	this->ProcessEvent ( pFnSetBackground_Notoritey, &SetBackground_Notoritey_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.GetBackground_Notoritey
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioPawnBehavior::GetBackground_Notoritey ( )
{
	static UFunction* pFnGetBackground_Notoritey = NULL;

	if ( ! pFnGetBackground_Notoritey )
		pFnGetBackground_Notoritey = (UFunction*) UObject::GObjObjects()->Data[ 39627 ];

	UBioPawnBehavior_execGetBackground_Notoritey_Parms GetBackground_Notoritey_Parms;

	this->ProcessEvent ( pFnGetBackground_Notoritey, &GetBackground_Notoritey_Parms, NULL );

	return GetBackground_Notoritey_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.SetBackground_Childhood
// [0x00020002] 
// Parameters infos:
// int                            nValue                         ( CPF_Parm )

void UBioPawnBehavior::SetBackground_Childhood ( int nValue )
{
	static UFunction* pFnSetBackground_Childhood = NULL;

	if ( ! pFnSetBackground_Childhood )
		pFnSetBackground_Childhood = (UFunction*) UObject::GObjObjects()->Data[ 39625 ];

	UBioPawnBehavior_execSetBackground_Childhood_Parms SetBackground_Childhood_Parms;
	SetBackground_Childhood_Parms.nValue = nValue;

	this->ProcessEvent ( pFnSetBackground_Childhood, &SetBackground_Childhood_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.GetBackground_Childhood
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioPawnBehavior::GetBackground_Childhood ( )
{
	static UFunction* pFnGetBackground_Childhood = NULL;

	if ( ! pFnGetBackground_Childhood )
		pFnGetBackground_Childhood = (UFunction*) UObject::GObjObjects()->Data[ 39622 ];

	UBioPawnBehavior_execGetBackground_Childhood_Parms GetBackground_Childhood_Parms;

	this->ProcessEvent ( pFnGetBackground_Childhood, &GetBackground_Childhood_Parms, NULL );

	return GetBackground_Childhood_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.HasKey
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   Key                            ( CPF_Parm )

bool UBioPawnBehavior::eventHasKey ( struct FName Key )
{
	static UFunction* pFnHasKey = NULL;

	if ( ! pFnHasKey )
		pFnHasKey = (UFunction*) UObject::GObjObjects()->Data[ 39619 ];

	UBioPawnBehavior_eventHasKey_Parms HasKey_Parms;
	memcpy ( &HasKey_Parms.Key, &Key, 0x8 );

	this->ProcessEvent ( pFnHasKey, &HasKey_Parms, NULL );

	return HasKey_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.AmplifyDamage
// [0x00420002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm | CPF_OutParm )

void UBioPawnBehavior::AmplifyDamage ( float* Damage )
{
	static UFunction* pFnAmplifyDamage = NULL;

	if ( ! pFnAmplifyDamage )
		pFnAmplifyDamage = (UFunction*) UObject::GObjObjects()->Data[ 39617 ];

	UBioPawnBehavior_execAmplifyDamage_Parms AmplifyDamage_Parms;

	this->ProcessEvent ( pFnAmplifyDamage, &AmplifyDamage_Parms, NULL );

	if ( Damage )
		*Damage = AmplifyDamage_Parms.Damage;
};

// Function SFXGame.BioPawnBehavior.ComputeLevel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioPawnBehavior::eventComputeLevel ( )
{
	static UFunction* pFnComputeLevel = NULL;

	if ( ! pFnComputeLevel )
		pFnComputeLevel = (UFunction*) UObject::GObjObjects()->Data[ 39615 ];

	UBioPawnBehavior_eventComputeLevel_Parms ComputeLevel_Parms;

	this->ProcessEvent ( pFnComputeLevel, &ComputeLevel_Parms, NULL );

	return ComputeLevel_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.ForceArmorOverride
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void UBioPawnBehavior::ForceArmorOverride ( unsigned long B )
{
	static UFunction* pFnForceArmorOverride = NULL;

	if ( ! pFnForceArmorOverride )
		pFnForceArmorOverride = (UFunction*) UObject::GObjObjects()->Data[ 39613 ];

	UBioPawnBehavior_execForceArmorOverride_Parms ForceArmorOverride_Parms;
	ForceArmorOverride_Parms.B = B;

	pFnForceArmorOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceArmorOverride, &ForceArmorOverride_Parms, NULL );

	pFnForceArmorOverride->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawnBehavior.IsArmorOverridden
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPawnBehavior::IsArmorOverridden ( )
{
	static UFunction* pFnIsArmorOverridden = NULL;

	if ( ! pFnIsArmorOverridden )
		pFnIsArmorOverridden = (UFunction*) UObject::GObjObjects()->Data[ 39611 ];

	UBioPawnBehavior_execIsArmorOverridden_Parms IsArmorOverridden_Parms;

	pFnIsArmorOverridden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsArmorOverridden, &IsArmorOverridden_Parms, NULL );

	pFnIsArmorOverridden->FunctionFlags |= 0x400;

	return IsArmorOverridden_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void UBioPawnBehavior::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 39610 ];

	UBioPawnBehavior_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.BioPawnBehavior.SoftResetMovementAndAnimationState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPawnBehavior::SoftResetMovementAndAnimationState ( )
{
	static UFunction* pFnSoftResetMovementAndAnimationState = NULL;

	if ( ! pFnSoftResetMovementAndAnimationState )
		pFnSoftResetMovementAndAnimationState = (UFunction*) UObject::GObjObjects()->Data[ 39609 ];

	UBioPawnBehavior_execSoftResetMovementAndAnimationState_Parms SoftResetMovementAndAnimationState_Parms;

	pFnSoftResetMovementAndAnimationState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSoftResetMovementAndAnimationState, &SoftResetMovementAndAnimationState_Parms, NULL );

	pFnSoftResetMovementAndAnimationState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawnBehavior.HardResetActionAndAnimationState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPawnBehavior::HardResetActionAndAnimationState ( )
{
	static UFunction* pFnHardResetActionAndAnimationState = NULL;

	if ( ! pFnHardResetActionAndAnimationState )
		pFnHardResetActionAndAnimationState = (UFunction*) UObject::GObjObjects()->Data[ 39608 ];

	UBioPawnBehavior_execHardResetActionAndAnimationState_Parms HardResetActionAndAnimationState_Parms;

	pFnHardResetActionAndAnimationState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHardResetActionAndAnimationState, &HardResetActionAndAnimationState_Parms, NULL );

	pFnHardResetActionAndAnimationState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawnBehavior.TickBehavior
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UBioPawnBehavior::TickBehavior ( float DeltaTime )
{
	static UFunction* pFnTickBehavior = NULL;

	if ( ! pFnTickBehavior )
		pFnTickBehavior = (UFunction*) UObject::GObjObjects()->Data[ 39606 ];

	UBioPawnBehavior_execTickBehavior_Parms TickBehavior_Parms;
	TickBehavior_Parms.DeltaTime = DeltaTime;

	pFnTickBehavior->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickBehavior, &TickBehavior_Parms, NULL );

	pFnTickBehavior->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawnBehavior.FindFirstValidSecondaryAttribute
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBio2DA*                 table                          ( CPF_Parm )
// int                            nRankedLevel                   ( CPF_Parm )
// struct FName                   ColumnName                     ( CPF_Parm )
// unsigned char                  modType                        ( CPF_Parm )
// class UBioGameProperty*        oGameProperty                  ( CPF_Parm )

void UBioPawnBehavior::FindFirstValidSecondaryAttribute ( class UBio2DA* table, int nRankedLevel, struct FName ColumnName, unsigned char modType, class UBioGameProperty* oGameProperty )
{
	static UFunction* pFnFindFirstValidSecondaryAttribute = NULL;

	if ( ! pFnFindFirstValidSecondaryAttribute )
		pFnFindFirstValidSecondaryAttribute = (UFunction*) UObject::GObjObjects()->Data[ 39600 ];

	UBioPawnBehavior_execFindFirstValidSecondaryAttribute_Parms FindFirstValidSecondaryAttribute_Parms;
	FindFirstValidSecondaryAttribute_Parms.table = table;
	FindFirstValidSecondaryAttribute_Parms.nRankedLevel = nRankedLevel;
	memcpy ( &FindFirstValidSecondaryAttribute_Parms.ColumnName, &ColumnName, 0x8 );
	FindFirstValidSecondaryAttribute_Parms.modType = modType;
	FindFirstValidSecondaryAttribute_Parms.oGameProperty = oGameProperty;

	pFnFindFirstValidSecondaryAttribute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindFirstValidSecondaryAttribute, &FindFirstValidSecondaryAttribute_Parms, NULL );

	pFnFindFirstValidSecondaryAttribute->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawnBehavior.FindFirstValidPrimaryFloatAttribute
// [0x00440401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBio2DA*                 table                          ( CPF_Parm )
// int                            nRankedLevel                   ( CPF_Parm )
// struct FName                   ColumnName                     ( CPF_Parm )
// float                          fValue                         ( CPF_Parm | CPF_OutParm )

bool UBioPawnBehavior::FindFirstValidPrimaryFloatAttribute ( class UBio2DA* table, int nRankedLevel, struct FName ColumnName, float* fValue )
{
	static UFunction* pFnFindFirstValidPrimaryFloatAttribute = NULL;

	if ( ! pFnFindFirstValidPrimaryFloatAttribute )
		pFnFindFirstValidPrimaryFloatAttribute = (UFunction*) UObject::GObjObjects()->Data[ 39594 ];

	UBioPawnBehavior_execFindFirstValidPrimaryFloatAttribute_Parms FindFirstValidPrimaryFloatAttribute_Parms;
	FindFirstValidPrimaryFloatAttribute_Parms.table = table;
	FindFirstValidPrimaryFloatAttribute_Parms.nRankedLevel = nRankedLevel;
	memcpy ( &FindFirstValidPrimaryFloatAttribute_Parms.ColumnName, &ColumnName, 0x8 );

	pFnFindFirstValidPrimaryFloatAttribute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindFirstValidPrimaryFloatAttribute, &FindFirstValidPrimaryFloatAttribute_Parms, NULL );

	pFnFindFirstValidPrimaryFloatAttribute->FunctionFlags |= 0x400;

	if ( fValue )
		*fValue = FindFirstValidPrimaryFloatAttribute_Parms.fValue;

	return FindFirstValidPrimaryFloatAttribute_Parms.ReturnValue;
};

// Function SFXGame.BioPawnBehavior.InitializeActionFramework
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioPawnBehavior::InitializeActionFramework ( )
{
	static UFunction* pFnInitializeActionFramework = NULL;

	if ( ! pFnInitializeActionFramework )
		pFnInitializeActionFramework = (UFunction*) UObject::GObjObjects()->Data[ 39593 ];

	UBioPawnBehavior_execInitializeActionFramework_Parms InitializeActionFramework_Parms;

	pFnInitializeActionFramework->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeActionFramework, &InitializeActionFramework_Parms, NULL );

	pFnInitializeActionFramework->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* UBioVehicleBehaviorBase::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 50680 ];

	UBioVehicleBehaviorBase_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.StartUprighting
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioVehicleBehaviorBase::eventStartUprighting ( )
{
	static UFunction* pFnStartUprighting = NULL;

	if ( ! pFnStartUprighting )
		pFnStartUprighting = (UFunction*) UObject::GObjObjects()->Data[ 50677 ];

	UBioVehicleBehaviorBase_eventStartUprighting_Parms StartUprighting_Parms;

	this->ProcessEvent ( pFnStartUprighting, &StartUprighting_Parms, NULL );

	return StartUprighting_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.SetMaterialParameterState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bState                         ( CPF_Parm )

void UBioVehicleBehaviorBase::SetMaterialParameterState ( unsigned long bState )
{
	static UFunction* pFnSetMaterialParameterState = NULL;

	if ( ! pFnSetMaterialParameterState )
		pFnSetMaterialParameterState = (UFunction*) UObject::GObjObjects()->Data[ 50675 ];

	UBioVehicleBehaviorBase_execSetMaterialParameterState_Parms SetMaterialParameterState_Parms;
	SetMaterialParameterState_Parms.bState = bState;

	pFnSetMaterialParameterState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMaterialParameterState, &SetMaterialParameterState_Parms, NULL );

	pFnSetMaterialParameterState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.OnVehiclePause
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bPaused                        ( CPF_Parm )

bool UBioVehicleBehaviorBase::OnVehiclePause ( unsigned long bPaused )
{
	static UFunction* pFnOnVehiclePause = NULL;

	if ( ! pFnOnVehiclePause )
		pFnOnVehiclePause = (UFunction*) UObject::GObjObjects()->Data[ 50672 ];

	UBioVehicleBehaviorBase_execOnVehiclePause_Parms OnVehiclePause_Parms;
	OnVehiclePause_Parms.bPaused = bPaused;

	pFnOnVehiclePause->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnVehiclePause, &OnVehiclePause_Parms, NULL );

	pFnOnVehiclePause->FunctionFlags |= 0x400;

	return OnVehiclePause_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.ScaleVehicleEquipment
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioVehicleBehaviorBase::ScaleVehicleEquipment ( )
{
	static UFunction* pFnScaleVehicleEquipment = NULL;

	if ( ! pFnScaleVehicleEquipment )
		pFnScaleVehicleEquipment = (UFunction*) UObject::GObjObjects()->Data[ 50670 ];

	UBioVehicleBehaviorBase_execScaleVehicleEquipment_Parms ScaleVehicleEquipment_Parms;

	pFnScaleVehicleEquipment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScaleVehicleEquipment, &ScaleVehicleEquipment_Parms, NULL );

	pFnScaleVehicleEquipment->FunctionFlags |= 0x400;

	return ScaleVehicleEquipment_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.GetRequiredEquipmentSophisticationLevel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nCurrentPlayerLevel            ( CPF_Parm )

int UBioVehicleBehaviorBase::GetRequiredEquipmentSophisticationLevel ( int nCurrentPlayerLevel )
{
	static UFunction* pFnGetRequiredEquipmentSophisticationLevel = NULL;

	if ( ! pFnGetRequiredEquipmentSophisticationLevel )
		pFnGetRequiredEquipmentSophisticationLevel = (UFunction*) UObject::GObjObjects()->Data[ 50667 ];

	UBioVehicleBehaviorBase_execGetRequiredEquipmentSophisticationLevel_Parms GetRequiredEquipmentSophisticationLevel_Parms;
	GetRequiredEquipmentSophisticationLevel_Parms.nCurrentPlayerLevel = nCurrentPlayerLevel;

	pFnGetRequiredEquipmentSophisticationLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRequiredEquipmentSophisticationLevel, &GetRequiredEquipmentSophisticationLevel_Parms, NULL );

	pFnGetRequiredEquipmentSophisticationLevel->FunctionFlags |= 0x400;

	return GetRequiredEquipmentSophisticationLevel_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.GetCameraHookName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UBioVehicleBehaviorBase::GetCameraHookName ( )
{
	static UFunction* pFnGetCameraHookName = NULL;

	if ( ! pFnGetCameraHookName )
		pFnGetCameraHookName = (UFunction*) UObject::GObjObjects()->Data[ 50665 ];

	UBioVehicleBehaviorBase_execGetCameraHookName_Parms GetCameraHookName_Parms;

	pFnGetCameraHookName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCameraHookName, &GetCameraHookName_Parms, NULL );

	pFnGetCameraHookName->FunctionFlags |= 0x400;

	return GetCameraHookName_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.GetCameraFollowDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioVehicleBehaviorBase::GetCameraFollowDistance ( )
{
	static UFunction* pFnGetCameraFollowDistance = NULL;

	if ( ! pFnGetCameraFollowDistance )
		pFnGetCameraFollowDistance = (UFunction*) UObject::GObjObjects()->Data[ 50663 ];

	UBioVehicleBehaviorBase_execGetCameraFollowDistance_Parms GetCameraFollowDistance_Parms;

	pFnGetCameraFollowDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCameraFollowDistance, &GetCameraFollowDistance_Parms, NULL );

	pFnGetCameraFollowDistance->FunctionFlags |= 0x400;

	return GetCameraFollowDistance_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.GetCameraFollowHeight
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioVehicleBehaviorBase::GetCameraFollowHeight ( )
{
	static UFunction* pFnGetCameraFollowHeight = NULL;

	if ( ! pFnGetCameraFollowHeight )
		pFnGetCameraFollowHeight = (UFunction*) UObject::GObjObjects()->Data[ 50661 ];

	UBioVehicleBehaviorBase_execGetCameraFollowHeight_Parms GetCameraFollowHeight_Parms;

	pFnGetCameraFollowHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCameraFollowHeight, &GetCameraFollowHeight_Parms, NULL );

	pFnGetCameraFollowHeight->FunctionFlags |= 0x400;

	return GetCameraFollowHeight_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.UpdateDamageModel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioVehicleBehaviorBase::UpdateDamageModel ( )
{
	static UFunction* pFnUpdateDamageModel = NULL;

	if ( ! pFnUpdateDamageModel )
		pFnUpdateDamageModel = (UFunction*) UObject::GObjObjects()->Data[ 50659 ];

	UBioVehicleBehaviorBase_execUpdateDamageModel_Parms UpdateDamageModel_Parms;

	pFnUpdateDamageModel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDamageModel, &UpdateDamageModel_Parms, NULL );

	pFnUpdateDamageModel->FunctionFlags |= 0x400;

	return UpdateDamageModel_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.InitializeSounds
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioVehicleBehaviorBase::InitializeSounds ( )
{
	static UFunction* pFnInitializeSounds = NULL;

	if ( ! pFnInitializeSounds )
		pFnInitializeSounds = (UFunction*) UObject::GObjObjects()->Data[ 50657 ];

	UBioVehicleBehaviorBase_execInitializeSounds_Parms InitializeSounds_Parms;

	pFnInitializeSounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeSounds, &InitializeSounds_Parms, NULL );

	pFnInitializeSounds->FunctionFlags |= 0x400;

	return InitializeSounds_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.UpdateThrusterScalars
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fXaxis                         ( CPF_Parm )
// float                          fYaxis                         ( CPF_Parm )

void UBioVehicleBehaviorBase::UpdateThrusterScalars ( float fXaxis, float fYaxis )
{
	static UFunction* pFnUpdateThrusterScalars = NULL;

	if ( ! pFnUpdateThrusterScalars )
		pFnUpdateThrusterScalars = (UFunction*) UObject::GObjObjects()->Data[ 50654 ];

	UBioVehicleBehaviorBase_execUpdateThrusterScalars_Parms UpdateThrusterScalars_Parms;
	UpdateThrusterScalars_Parms.fXaxis = fXaxis;
	UpdateThrusterScalars_Parms.fYaxis = fYaxis;

	pFnUpdateThrusterScalars->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateThrusterScalars, &UpdateThrusterScalars_Parms, NULL );

	pFnUpdateThrusterScalars->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.DeactivateThruster
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void UBioVehicleBehaviorBase::DeactivateThruster ( int nIndex )
{
	static UFunction* pFnDeactivateThruster = NULL;

	if ( ! pFnDeactivateThruster )
		pFnDeactivateThruster = (UFunction*) UObject::GObjObjects()->Data[ 50652 ];

	UBioVehicleBehaviorBase_execDeactivateThruster_Parms DeactivateThruster_Parms;
	DeactivateThruster_Parms.nIndex = nIndex;

	pFnDeactivateThruster->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateThruster, &DeactivateThruster_Parms, NULL );

	pFnDeactivateThruster->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.ActivateThruster
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )
// struct FVector                 vMaxForce                      ( CPF_Parm )
// float                          fScale                         ( CPF_Parm )

void UBioVehicleBehaviorBase::ActivateThruster ( int nIndex, struct FVector vMaxForce, float fScale )
{
	static UFunction* pFnActivateThruster = NULL;

	if ( ! pFnActivateThruster )
		pFnActivateThruster = (UFunction*) UObject::GObjObjects()->Data[ 50648 ];

	UBioVehicleBehaviorBase_execActivateThruster_Parms ActivateThruster_Parms;
	ActivateThruster_Parms.nIndex = nIndex;
	memcpy ( &ActivateThruster_Parms.vMaxForce, &vMaxForce, 0xC );
	ActivateThruster_Parms.fScale = fScale;

	pFnActivateThruster->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateThruster, &ActivateThruster_Parms, NULL );

	pFnActivateThruster->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.UpdateThrusters
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void UBioVehicleBehaviorBase::UpdateThrusters ( float fDeltaTime )
{
	static UFunction* pFnUpdateThrusters = NULL;

	if ( ! pFnUpdateThrusters )
		pFnUpdateThrusters = (UFunction*) UObject::GObjObjects()->Data[ 50646 ];

	UBioVehicleBehaviorBase_execUpdateThrusters_Parms UpdateThrusters_Parms;
	UpdateThrusters_Parms.fDeltaTime = fDeltaTime;

	pFnUpdateThrusters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateThrusters, &UpdateThrusters_Parms, NULL );

	pFnUpdateThrusters->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.InitializeThrusters
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioVehicleBehaviorBase::InitializeThrusters ( )
{
	static UFunction* pFnInitializeThrusters = NULL;

	if ( ! pFnInitializeThrusters )
		pFnInitializeThrusters = (UFunction*) UObject::GObjObjects()->Data[ 50644 ];

	UBioVehicleBehaviorBase_execInitializeThrusters_Parms InitializeThrusters_Parms;

	pFnInitializeThrusters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeThrusters, &InitializeThrusters_Parms, NULL );

	pFnInitializeThrusters->FunctionFlags |= 0x400;

	return InitializeThrusters_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.InitializeVehicleSquad
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioVehicleBehaviorBase::InitializeVehicleSquad ( )
{
	static UFunction* pFnInitializeVehicleSquad = NULL;

	if ( ! pFnInitializeVehicleSquad )
		pFnInitializeVehicleSquad = (UFunction*) UObject::GObjObjects()->Data[ 50643 ];

	UBioVehicleBehaviorBase_execInitializeVehicleSquad_Parms InitializeVehicleSquad_Parms;

	pFnInitializeVehicleSquad->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeVehicleSquad, &InitializeVehicleSquad_Parms, NULL );

	pFnInitializeVehicleSquad->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.SquadExit
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioVehicleBehaviorBase::SquadExit ( )
{
	static UFunction* pFnSquadExit = NULL;

	if ( ! pFnSquadExit )
		pFnSquadExit = (UFunction*) UObject::GObjObjects()->Data[ 50642 ];

	UBioVehicleBehaviorBase_execSquadExit_Parms SquadExit_Parms;

	pFnSquadExit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSquadExit, &SquadExit_Parms, NULL );

	pFnSquadExit->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.SquadEnter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioBaseSquad*           oEnterSquad                    ( CPF_Parm )

void UBioVehicleBehaviorBase::SquadEnter ( class ABioBaseSquad* oEnterSquad )
{
	static UFunction* pFnSquadEnter = NULL;

	if ( ! pFnSquadEnter )
		pFnSquadEnter = (UFunction*) UObject::GObjObjects()->Data[ 50640 ];

	UBioVehicleBehaviorBase_execSquadEnter_Parms SquadEnter_Parms;
	SquadEnter_Parms.oEnterSquad = oEnterSquad;

	pFnSquadEnter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSquadEnter, &SquadEnter_Parms, NULL );

	pFnSquadEnter->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.OnDriverPartyDeath
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioVehicleBehaviorBase::OnDriverPartyDeath ( )
{
	static UFunction* pFnOnDriverPartyDeath = NULL;

	if ( ! pFnOnDriverPartyDeath )
		pFnOnDriverPartyDeath = (UFunction*) UObject::GObjObjects()->Data[ 50639 ];

	UBioVehicleBehaviorBase_execOnDriverPartyDeath_Parms OnDriverPartyDeath_Parms;

	pFnOnDriverPartyDeath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnDriverPartyDeath, &OnDriverPartyDeath_Parms, NULL );

	pFnOnDriverPartyDeath->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.UpdateCurrentZoomTurret
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaYaw                      ( CPF_Parm )
// float                          fDeltaPitch                    ( CPF_Parm )

bool UBioVehicleBehaviorBase::UpdateCurrentZoomTurret ( float fDeltaYaw, float fDeltaPitch )
{
	static UFunction* pFnUpdateCurrentZoomTurret = NULL;

	if ( ! pFnUpdateCurrentZoomTurret )
		pFnUpdateCurrentZoomTurret = (UFunction*) UObject::GObjObjects()->Data[ 50635 ];

	UBioVehicleBehaviorBase_execUpdateCurrentZoomTurret_Parms UpdateCurrentZoomTurret_Parms;
	UpdateCurrentZoomTurret_Parms.fDeltaYaw = fDeltaYaw;
	UpdateCurrentZoomTurret_Parms.fDeltaPitch = fDeltaPitch;

	pFnUpdateCurrentZoomTurret->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCurrentZoomTurret, &UpdateCurrentZoomTurret_Parms, NULL );

	pFnUpdateCurrentZoomTurret->FunctionFlags |= 0x400;

	return UpdateCurrentZoomTurret_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.ExitZoomMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioVehicleBehaviorBase::ExitZoomMode ( )
{
	static UFunction* pFnExitZoomMode = NULL;

	if ( ! pFnExitZoomMode )
		pFnExitZoomMode = (UFunction*) UObject::GObjObjects()->Data[ 50633 ];

	UBioVehicleBehaviorBase_execExitZoomMode_Parms ExitZoomMode_Parms;

	pFnExitZoomMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExitZoomMode, &ExitZoomMode_Parms, NULL );

	pFnExitZoomMode->FunctionFlags |= 0x400;

	return ExitZoomMode_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.EnterZoomMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nZoomTurretIndex               ( CPF_Parm )

bool UBioVehicleBehaviorBase::EnterZoomMode ( int nZoomTurretIndex )
{
	static UFunction* pFnEnterZoomMode = NULL;

	if ( ! pFnEnterZoomMode )
		pFnEnterZoomMode = (UFunction*) UObject::GObjObjects()->Data[ 50630 ];

	UBioVehicleBehaviorBase_execEnterZoomMode_Parms EnterZoomMode_Parms;
	EnterZoomMode_Parms.nZoomTurretIndex = nZoomTurretIndex;

	pFnEnterZoomMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnterZoomMode, &EnterZoomMode_Parms, NULL );

	pFnEnterZoomMode->FunctionFlags |= 0x400;

	return EnterZoomMode_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.IsWorldLocationWithinTurretCone
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTurretIndex                   ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm )

bool UBioVehicleBehaviorBase::IsWorldLocationWithinTurretCone ( int nTurretIndex, struct FVector vLocation )
{
	static UFunction* pFnIsWorldLocationWithinTurretCone = NULL;

	if ( ! pFnIsWorldLocationWithinTurretCone )
		pFnIsWorldLocationWithinTurretCone = (UFunction*) UObject::GObjObjects()->Data[ 50626 ];

	UBioVehicleBehaviorBase_execIsWorldLocationWithinTurretCone_Parms IsWorldLocationWithinTurretCone_Parms;
	IsWorldLocationWithinTurretCone_Parms.nTurretIndex = nTurretIndex;
	memcpy ( &IsWorldLocationWithinTurretCone_Parms.vLocation, &vLocation, 0xC );

	pFnIsWorldLocationWithinTurretCone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsWorldLocationWithinTurretCone, &IsWorldLocationWithinTurretCone_Parms, NULL );

	pFnIsWorldLocationWithinTurretCone->FunctionFlags |= 0x400;

	return IsWorldLocationWithinTurretCone_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.SetDesiredTurretAimPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTurretIndex                   ( CPF_Parm )
// struct FVector                 vTargetLocation                ( CPF_Parm )

struct FRotator UBioVehicleBehaviorBase::SetDesiredTurretAimPoint ( int nTurretIndex, struct FVector vTargetLocation )
{
	static UFunction* pFnSetDesiredTurretAimPoint = NULL;

	if ( ! pFnSetDesiredTurretAimPoint )
		pFnSetDesiredTurretAimPoint = (UFunction*) UObject::GObjObjects()->Data[ 50622 ];

	UBioVehicleBehaviorBase_execSetDesiredTurretAimPoint_Parms SetDesiredTurretAimPoint_Parms;
	SetDesiredTurretAimPoint_Parms.nTurretIndex = nTurretIndex;
	memcpy ( &SetDesiredTurretAimPoint_Parms.vTargetLocation, &vTargetLocation, 0xC );

	pFnSetDesiredTurretAimPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDesiredTurretAimPoint, &SetDesiredTurretAimPoint_Parms, NULL );

	pFnSetDesiredTurretAimPoint->FunctionFlags |= 0x400;

	return SetDesiredTurretAimPoint_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.InitializeVehicleWeapons
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioVehicleBehaviorBase::InitializeVehicleWeapons ( )
{
	static UFunction* pFnInitializeVehicleWeapons = NULL;

	if ( ! pFnInitializeVehicleWeapons )
		pFnInitializeVehicleWeapons = (UFunction*) UObject::GObjObjects()->Data[ 50620 ];

	UBioVehicleBehaviorBase_execInitializeVehicleWeapons_Parms InitializeVehicleWeapons_Parms;

	pFnInitializeVehicleWeapons->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeVehicleWeapons, &InitializeVehicleWeapons_Parms, NULL );

	pFnInitializeVehicleWeapons->FunctionFlags |= 0x400;

	return InitializeVehicleWeapons_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.InitializeVehicle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioVehicleBehaviorBase::InitializeVehicle ( )
{
	static UFunction* pFnInitializeVehicle = NULL;

	if ( ! pFnInitializeVehicle )
		pFnInitializeVehicle = (UFunction*) UObject::GObjObjects()->Data[ 50618 ];

	UBioVehicleBehaviorBase_execInitializeVehicle_Parms InitializeVehicle_Parms;

	pFnInitializeVehicle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeVehicle, &InitializeVehicle_Parms, NULL );

	pFnInitializeVehicle->FunctionFlags |= 0x400;

	return InitializeVehicle_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.OnVehicleExit
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioVehicleBehaviorBase::OnVehicleExit ( )
{
	static UFunction* pFnOnVehicleExit = NULL;

	if ( ! pFnOnVehicleExit )
		pFnOnVehicleExit = (UFunction*) UObject::GObjObjects()->Data[ 50616 ];

	UBioVehicleBehaviorBase_execOnVehicleExit_Parms OnVehicleExit_Parms;

	pFnOnVehicleExit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnVehicleExit, &OnVehicleExit_Parms, NULL );

	pFnOnVehicleExit->FunctionFlags |= 0x400;

	return OnVehicleExit_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.OnVehicleEnter
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioVehicleBehaviorBase::OnVehicleEnter ( )
{
	static UFunction* pFnOnVehicleEnter = NULL;

	if ( ! pFnOnVehicleEnter )
		pFnOnVehicleEnter = (UFunction*) UObject::GObjObjects()->Data[ 50614 ];

	UBioVehicleBehaviorBase_execOnVehicleEnter_Parms OnVehicleEnter_Parms;

	pFnOnVehicleEnter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnVehicleEnter, &OnVehicleEnter_Parms, NULL );

	pFnOnVehicleEnter->FunctionFlags |= 0x400;

	return OnVehicleEnter_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.SetBrakeState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bStatus                        ( CPF_Parm )

void UBioVehicleBehaviorBase::SetBrakeState ( unsigned long bStatus )
{
	static UFunction* pFnSetBrakeState = NULL;

	if ( ! pFnSetBrakeState )
		pFnSetBrakeState = (UFunction*) UObject::GObjObjects()->Data[ 50612 ];

	UBioVehicleBehaviorBase_execSetBrakeState_Parms SetBrakeState_Parms;
	SetBrakeState_Parms.bStatus = bStatus;

	pFnSetBrakeState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBrakeState, &SetBrakeState_Parms, NULL );

	pFnSetBrakeState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.SetVehicleFunctionState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bStatus                        ( CPF_Parm )

void UBioVehicleBehaviorBase::SetVehicleFunctionState ( unsigned long bStatus )
{
	static UFunction* pFnSetVehicleFunctionState = NULL;

	if ( ! pFnSetVehicleFunctionState )
		pFnSetVehicleFunctionState = (UFunction*) UObject::GObjObjects()->Data[ 50610 ];

	UBioVehicleBehaviorBase_execSetVehicleFunctionState_Parms SetVehicleFunctionState_Parms;
	SetVehicleFunctionState_Parms.bStatus = bStatus;

	pFnSetVehicleFunctionState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVehicleFunctionState, &SetVehicleFunctionState_Parms, NULL );

	pFnSetVehicleFunctionState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.SetPowertrainState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bStatus                        ( CPF_Parm )

void UBioVehicleBehaviorBase::SetPowertrainState ( unsigned long bStatus )
{
	static UFunction* pFnSetPowertrainState = NULL;

	if ( ! pFnSetPowertrainState )
		pFnSetPowertrainState = (UFunction*) UObject::GObjObjects()->Data[ 50608 ];

	UBioVehicleBehaviorBase_execSetPowertrainState_Parms SetPowertrainState_Parms;
	SetPowertrainState_Parms.bStatus = bStatus;

	pFnSetPowertrainState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPowertrainState, &SetPowertrainState_Parms, NULL );

	pFnSetPowertrainState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.SetSuperMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  nSuperMode                     ( CPF_Parm )
// unsigned long                  bActivate                      ( CPF_Parm )
// unsigned long                  bReturnToSuperMode             ( CPF_Parm )

bool UBioVehicleBehaviorBase::SetSuperMode ( unsigned char nSuperMode, unsigned long bActivate, unsigned long bReturnToSuperMode )
{
	static UFunction* pFnSetSuperMode = NULL;

	if ( ! pFnSetSuperMode )
		pFnSetSuperMode = (UFunction*) UObject::GObjObjects()->Data[ 50603 ];

	UBioVehicleBehaviorBase_execSetSuperMode_Parms SetSuperMode_Parms;
	SetSuperMode_Parms.nSuperMode = nSuperMode;
	SetSuperMode_Parms.bActivate = bActivate;
	SetSuperMode_Parms.bReturnToSuperMode = bReturnToSuperMode;

	pFnSetSuperMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSuperMode, &SetSuperMode_Parms, NULL );

	pFnSetSuperMode->FunctionFlags |= 0x400;

	return SetSuperMode_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.ReleaseActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioVehicleBehaviorBase::ReleaseActive ( )
{
	static UFunction* pFnReleaseActive = NULL;

	if ( ! pFnReleaseActive )
		pFnReleaseActive = (UFunction*) UObject::GObjObjects()->Data[ 50601 ];

	UBioVehicleBehaviorBase_execReleaseActive_Parms ReleaseActive_Parms;

	pFnReleaseActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleaseActive, &ReleaseActive_Parms, NULL );

	pFnReleaseActive->FunctionFlags |= 0x400;

	return ReleaseActive_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleBehaviorBase.InitializePawnBehaviorForPlay
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioVehicleBehaviorBase::InitializePawnBehaviorForPlay ( )
{
	static UFunction* pFnInitializePawnBehaviorForPlay = NULL;

	if ( ! pFnInitializePawnBehaviorForPlay )
		pFnInitializePawnBehaviorForPlay = (UFunction*) UObject::GObjObjects()->Data[ 50600 ];

	UBioVehicleBehaviorBase_execInitializePawnBehaviorForPlay_Parms InitializePawnBehaviorForPlay_Parms;

	pFnInitializePawnBehaviorForPlay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializePawnBehaviorForPlay, &InitializePawnBehaviorForPlay_Parms, NULL );

	pFnInitializePawnBehaviorForPlay->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorBase.InitializeActionFramework
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioVehicleBehaviorBase::InitializeActionFramework ( )
{
	static UFunction* pFnInitializeActionFramework = NULL;

	if ( ! pFnInitializeActionFramework )
		pFnInitializeActionFramework = (UFunction*) UObject::GObjObjects()->Data[ 50599 ];

	UBioVehicleBehaviorBase_execInitializeActionFramework_Parms InitializeActionFramework_Parms;

	pFnInitializeActionFramework->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeActionFramework, &InitializeActionFramework_Parms, NULL );

	pFnInitializeActionFramework->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorWheeled.InitializeActionFramework
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioVehicleBehaviorWheeled::InitializeActionFramework ( )
{
	static UFunction* pFnInitializeActionFramework = NULL;

	if ( ! pFnInitializeActionFramework )
		pFnInitializeActionFramework = (UFunction*) UObject::GObjObjects()->Data[ 50793 ];

	UBioVehicleBehaviorWheeled_execInitializeActionFramework_Parms InitializeActionFramework_Parms;

	pFnInitializeActionFramework->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeActionFramework, &InitializeActionFramework_Parms, NULL );

	pFnInitializeActionFramework->FunctionFlags |= 0x400;
};

// Function SFXGame.BioVehicleBehaviorWheeled.InitializeVehicle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioVehicleBehaviorWheeled::InitializeVehicle ( )
{
	static UFunction* pFnInitializeVehicle = NULL;

	if ( ! pFnInitializeVehicle )
		pFnInitializeVehicle = (UFunction*) UObject::GObjObjects()->Data[ 50791 ];

	UBioVehicleBehaviorWheeled_execInitializeVehicle_Parms InitializeVehicle_Parms;

	pFnInitializeVehicle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeVehicle, &InitializeVehicle_Parms, NULL );

	pFnInitializeVehicle->FunctionFlags |= 0x400;

	return InitializeVehicle_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode.GetActorCameraHook
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USFXCameraMode::GetActorCameraHook ( )
{
	static UFunction* pFnGetActorCameraHook = NULL;

	if ( ! pFnGetActorCameraHook )
		pFnGetActorCameraHook = (UFunction*) UObject::GObjObjects()->Data[ 32416 ];

	USFXCameraMode_execGetActorCameraHook_Parms GetActorCameraHook_Parms;

	this->ProcessEvent ( pFnGetActorCameraHook, &GetActorCameraHook_Parms, NULL );

	return GetActorCameraHook_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode.GetCollisionCameraHook
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USFXCameraMode::GetCollisionCameraHook ( )
{
	static UFunction* pFnGetCollisionCameraHook = NULL;

	if ( ! pFnGetCollisionCameraHook )
		pFnGetCollisionCameraHook = (UFunction*) UObject::GObjObjects()->Data[ 32412 ];

	USFXCameraMode_execGetCollisionCameraHook_Parms GetCollisionCameraHook_Parms;

	this->ProcessEvent ( pFnGetCollisionCameraHook, &GetCollisionCameraHook_Parms, NULL );

	return GetCollisionCameraHook_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode.CheckLoop
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXCameraMode*          M                              ( CPF_Parm )
// int                            RecurseLevel                   ( CPF_Parm )

bool USFXCameraMode::CheckLoop ( class USFXCameraMode* M, int RecurseLevel )
{
	static UFunction* pFnCheckLoop = NULL;

	if ( ! pFnCheckLoop )
		pFnCheckLoop = (UFunction*) UObject::GObjObjects()->Data[ 32408 ];

	USFXCameraMode_execCheckLoop_Parms CheckLoop_Parms;
	CheckLoop_Parms.M = M;
	CheckLoop_Parms.RecurseLevel = RecurseLevel;

	this->ProcessEvent ( pFnCheckLoop, &CheckLoop_Parms, NULL );

	return CheckLoop_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode.DrawHUD
// [0x00020002] 
// Parameters infos:
// class UBioCheatManager*        M                              ( CPF_Parm )

void USFXCameraMode::DrawHUD ( class UBioCheatManager* M )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 32404 ];

	USFXCameraMode_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.M = M;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function SFXGame.SFXCameraMode.GetCurrentShake
// [0x00820002] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator USFXCameraMode::GetCurrentShake ( )
{
	static UFunction* pFnGetCurrentShake = NULL;

	if ( ! pFnGetCurrentShake )
		pFnGetCurrentShake = (UFunction*) UObject::GObjObjects()->Data[ 32400 ];

	USFXCameraMode_execGetCurrentShake_Parms GetCurrentShake_Parms;

	this->ProcessEvent ( pFnGetCurrentShake, &GetCurrentShake_Parms, NULL );

	return GetCurrentShake_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode.IsCollisionEnabled
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXCameraMode::IsCollisionEnabled ( )
{
	static UFunction* pFnIsCollisionEnabled = NULL;

	if ( ! pFnIsCollisionEnabled )
		pFnIsCollisionEnabled = (UFunction*) UObject::GObjObjects()->Data[ 32398 ];

	USFXCameraMode_execIsCollisionEnabled_Parms IsCollisionEnabled_Parms;

	this->ProcessEvent ( pFnIsCollisionEnabled, &IsCollisionEnabled_Parms, NULL );

	return IsCollisionEnabled_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode.Initialize
// [0x00020002] 
// Parameters infos:
// class ABioPlayerController*    NewOwner                       ( CPF_Parm )

void USFXCameraMode::Initialize ( class ABioPlayerController* NewOwner )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 32396 ];

	USFXCameraMode_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.NewOwner = NewOwner;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.SFXCameraMode.OnUnPossess
// [0x00020000] 
// Parameters infos:

void USFXCameraMode::OnUnPossess ( )
{
	static UFunction* pFnOnUnPossess = NULL;

	if ( ! pFnOnUnPossess )
		pFnOnUnPossess = (UFunction*) UObject::GObjObjects()->Data[ 32395 ];

	USFXCameraMode_execOnUnPossess_Parms OnUnPossess_Parms;

	this->ProcessEvent ( pFnOnUnPossess, &OnUnPossess_Parms, NULL );
};

// Function SFXGame.SFXCameraMode.OnPossess
// [0x00020002] 
// Parameters infos:
// class APawn*                   NewPawn                        ( CPF_Parm )

void USFXCameraMode::OnPossess ( class APawn* NewPawn )
{
	static UFunction* pFnOnPossess = NULL;

	if ( ! pFnOnPossess )
		pFnOnPossess = (UFunction*) UObject::GObjObjects()->Data[ 32393 ];

	USFXCameraMode_execOnPossess_Parms OnPossess_Parms;
	OnPossess_Parms.NewPawn = NewPawn;

	this->ProcessEvent ( pFnOnPossess, &OnPossess_Parms, NULL );
};

// Function SFXGame.SFXCameraMode.MakeInactive
// [0x00020000] 
// Parameters infos:

void USFXCameraMode::MakeInactive ( )
{
	static UFunction* pFnMakeInactive = NULL;

	if ( ! pFnMakeInactive )
		pFnMakeInactive = (UFunction*) UObject::GObjObjects()->Data[ 32392 ];

	USFXCameraMode_execMakeInactive_Parms MakeInactive_Parms;

	this->ProcessEvent ( pFnMakeInactive, &MakeInactive_Parms, NULL );
};

// Function SFXGame.SFXCameraMode.MakeActive
// [0x00020000] 
// Parameters infos:

void USFXCameraMode::MakeActive ( )
{
	static UFunction* pFnMakeActive = NULL;

	if ( ! pFnMakeActive )
		pFnMakeActive = (UFunction*) UObject::GObjObjects()->Data[ 32391 ];

	USFXCameraMode_execMakeActive_Parms MakeActive_Parms;

	this->ProcessEvent ( pFnMakeActive, &MakeActive_Parms, NULL );
};

// Function SFXGame.SFXCameraMode.AimAtPoint
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 V                              ( CPF_Parm )

void USFXCameraMode::eventAimAtPoint ( struct FVector V )
{
	static UFunction* pFnAimAtPoint = NULL;

	if ( ! pFnAimAtPoint )
		pFnAimAtPoint = (UFunction*) UObject::GObjObjects()->Data[ 32377 ];

	USFXCameraMode_eventAimAtPoint_Parms AimAtPoint_Parms;
	memcpy ( &AimAtPoint_Parms.V, &V, 0xC );

	this->ProcessEvent ( pFnAimAtPoint, &AimAtPoint_Parms, NULL );
};

// Function SFXGame.SFXCameraMode.Tick
// [0x00020002] 
// Parameters infos:
// float                          fTimeDelta                     ( CPF_Parm )

void USFXCameraMode::Tick ( float fTimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 32375 ];

	USFXCameraMode_execTick_Parms Tick_Parms;
	Tick_Parms.fTimeDelta = fTimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXCameraMode.GetCameraLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USFXCameraMode::GetCameraLocation ( )
{
	static UFunction* pFnGetCameraLocation = NULL;

	if ( ! pFnGetCameraLocation )
		pFnGetCameraLocation = (UFunction*) UObject::GObjObjects()->Data[ 32373 ];

	USFXCameraMode_execGetCameraLocation_Parms GetCameraLocation_Parms;

	this->ProcessEvent ( pFnGetCameraLocation, &GetCameraLocation_Parms, NULL );

	return GetCameraLocation_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode.DrawHook
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 V                              ( CPF_Parm )
// class AActor*                  Actor                          ( CPF_Parm )

void USFXCameraMode::DrawHook ( struct FVector V, class AActor* Actor )
{
	static UFunction* pFnDrawHook = NULL;

	if ( ! pFnDrawHook )
		pFnDrawHook = (UFunction*) UObject::GObjObjects()->Data[ 32370 ];

	USFXCameraMode_execDrawHook_Parms DrawHook_Parms;
	memcpy ( &DrawHook_Parms.V, &V, 0xC );
	DrawHook_Parms.Actor = Actor;

	pFnDrawHook->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawHook, &DrawHook_Parms, NULL );

	pFnDrawHook->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXCameraMode.ModifyPostProcessSettings
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// struct FPostProcessSettings    PPSettings                     ( CPF_Parm | CPF_OutParm )

void USFXCameraMode::eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings )
{
	static UFunction* pFnModifyPostProcessSettings = NULL;

	if ( ! pFnModifyPostProcessSettings )
		pFnModifyPostProcessSettings = (UFunction*) UObject::GObjObjects()->Data[ 32368 ];

	USFXCameraMode_eventModifyPostProcessSettings_Parms ModifyPostProcessSettings_Parms;

	this->ProcessEvent ( pFnModifyPostProcessSettings, &ModifyPostProcessSettings_Parms, NULL );

	if ( PPSettings )
		memcpy ( PPSettings, &ModifyPostProcessSettings_Parms.PPSettings, 0x90 );
};

// Function SFXGame.SFXCameraMode.ComputeClipPlaneRect
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          fFov                           ( CPF_Parm )
// float                          fNearClipPlane                 ( CPF_Parm )
// float                          fWidth                         ( CPF_Parm | CPF_OutParm )
// float                          fHeight                        ( CPF_Parm | CPF_OutParm )

void USFXCameraMode::ComputeClipPlaneRect ( float fFov, float fNearClipPlane, float* fWidth, float* fHeight )
{
	static UFunction* pFnComputeClipPlaneRect = NULL;

	if ( ! pFnComputeClipPlaneRect )
		pFnComputeClipPlaneRect = (UFunction*) UObject::GObjObjects()->Data[ 32363 ];

	USFXCameraMode_execComputeClipPlaneRect_Parms ComputeClipPlaneRect_Parms;
	ComputeClipPlaneRect_Parms.fFov = fFov;
	ComputeClipPlaneRect_Parms.fNearClipPlane = fNearClipPlane;

	pFnComputeClipPlaneRect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnComputeClipPlaneRect, &ComputeClipPlaneRect_Parms, NULL );

	pFnComputeClipPlaneRect->FunctionFlags |= 0x400;

	if ( fWidth )
		*fWidth = ComputeClipPlaneRect_Parms.fWidth;

	if ( fHeight )
		*fHeight = ComputeClipPlaneRect_Parms.fHeight;
};

// Function SFXGame.SFXCameraMode.DoCameraCollisionNative
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 CollisionHook                  ( CPF_Parm )
// class AActor*                  A                              ( CPF_Parm )
// struct FVector                 V                              ( CPF_Parm | CPF_OutParm )
// struct FRotator                R                              ( CPF_Parm | CPF_OutParm )

void USFXCameraMode::DoCameraCollisionNative ( struct FVector CollisionHook, class AActor* A, struct FVector* V, struct FRotator* R )
{
	static UFunction* pFnDoCameraCollisionNative = NULL;

	if ( ! pFnDoCameraCollisionNative )
		pFnDoCameraCollisionNative = (UFunction*) UObject::GObjObjects()->Data[ 32358 ];

	USFXCameraMode_execDoCameraCollisionNative_Parms DoCameraCollisionNative_Parms;
	memcpy ( &DoCameraCollisionNative_Parms.CollisionHook, &CollisionHook, 0xC );
	DoCameraCollisionNative_Parms.A = A;

	pFnDoCameraCollisionNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoCameraCollisionNative, &DoCameraCollisionNative_Parms, NULL );

	pFnDoCameraCollisionNative->FunctionFlags |= 0x400;

	if ( V )
		memcpy ( V, &DoCameraCollisionNative_Parms.V, 0xC );

	if ( R )
		memcpy ( R, &DoCameraCollisionNative_Parms.R, 0xC );
};

// Function SFXGame.SFXCameraMode.DoCameraCollision
// [0x00420002] 
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )
// struct FVector                 V                              ( CPF_Parm | CPF_OutParm )
// struct FRotator                R                              ( CPF_Parm | CPF_OutParm )

void USFXCameraMode::DoCameraCollision ( class AActor* A, struct FVector* V, struct FRotator* R )
{
	static UFunction* pFnDoCameraCollision = NULL;

	if ( ! pFnDoCameraCollision )
		pFnDoCameraCollision = (UFunction*) UObject::GObjObjects()->Data[ 32354 ];

	USFXCameraMode_execDoCameraCollision_Parms DoCameraCollision_Parms;
	DoCameraCollision_Parms.A = A;

	this->ProcessEvent ( pFnDoCameraCollision, &DoCameraCollision_Parms, NULL );

	if ( V )
		memcpy ( V, &DoCameraCollision_Parms.V, 0xC );

	if ( R )
		memcpy ( R, &DoCameraCollision_Parms.R, 0xC );
};

// Function SFXGame.BioCameraBehavior.Tick
// [0x00020000] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void UBioCameraBehavior::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 32424 ];

	UBioCameraBehavior_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorConversation.ModifyPostProcessSettings
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FPostProcessSettings    PPSettings                     ( CPF_Parm | CPF_OutParm )

void UBioCameraBehaviorConversation::eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings )
{
	static UFunction* pFnModifyPostProcessSettings = NULL;

	if ( ! pFnModifyPostProcessSettings )
		pFnModifyPostProcessSettings = (UFunction*) UObject::GObjObjects()->Data[ 32489 ];

	UBioCameraBehaviorConversation_eventModifyPostProcessSettings_Parms ModifyPostProcessSettings_Parms;

	this->ProcessEvent ( pFnModifyPostProcessSettings, &ModifyPostProcessSettings_Parms, NULL );

	if ( PPSettings )
		memcpy ( PPSettings, &ModifyPostProcessSettings_Parms.PPSettings, 0x90 );
};

// Function SFXGame.BioCameraBehaviorConversation.InternalModifyPostProcessSettings
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FPostProcessSettings    PPSettings                     ( CPF_Parm | CPF_OutParm )

void UBioCameraBehaviorConversation::InternalModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings )
{
	static UFunction* pFnInternalModifyPostProcessSettings = NULL;

	if ( ! pFnInternalModifyPostProcessSettings )
		pFnInternalModifyPostProcessSettings = (UFunction*) UObject::GObjObjects()->Data[ 32487 ];

	UBioCameraBehaviorConversation_execInternalModifyPostProcessSettings_Parms InternalModifyPostProcessSettings_Parms;

	pFnInternalModifyPostProcessSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInternalModifyPostProcessSettings, &InternalModifyPostProcessSettings_Parms, NULL );

	pFnInternalModifyPostProcessSettings->FunctionFlags |= 0x400;

	if ( PPSettings )
		memcpy ( PPSettings, &InternalModifyPostProcessSettings_Parms.PPSettings, 0x90 );
};

// Function SFXGame.BioCameraBehaviorConversation.DrawHUD
// [0x00020002] 
// Parameters infos:
// class UBioCheatManager*        M                              ( CPF_Parm )

void UBioCameraBehaviorConversation::DrawHUD ( class UBioCheatManager* M )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 32485 ];

	UBioCameraBehaviorConversation_execDrawHUD_Parms DrawHUD_Parms;
	DrawHUD_Parms.M = M;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorConversation.GetProceduralCam
// [0x00C20802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bInvert                        ( CPF_Parm )
// struct FVector                 vCamLocation                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                rCamRotation                   ( CPF_Parm | CPF_OutParm )

void UBioCameraBehaviorConversation::eventGetProceduralCam ( unsigned long bInvert, struct FVector* vCamLocation, struct FRotator* rCamRotation )
{
	static UFunction* pFnGetProceduralCam = NULL;

	if ( ! pFnGetProceduralCam )
		pFnGetProceduralCam = (UFunction*) UObject::GObjObjects()->Data[ 32476 ];

	UBioCameraBehaviorConversation_eventGetProceduralCam_Parms GetProceduralCam_Parms;
	GetProceduralCam_Parms.bInvert = bInvert;

	this->ProcessEvent ( pFnGetProceduralCam, &GetProceduralCam_Parms, NULL );

	if ( vCamLocation )
		memcpy ( vCamLocation, &GetProceduralCam_Parms.vCamLocation, 0xC );

	if ( rCamRotation )
		memcpy ( rCamRotation, &GetProceduralCam_Parms.rCamRotation, 0xC );
};

// Function SFXGame.BioCameraBehaviorConversation.BlendIdleCameraAnimation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioCameraBehaviorConversation::BlendIdleCameraAnimation ( )
{
	static UFunction* pFnBlendIdleCameraAnimation = NULL;

	if ( ! pFnBlendIdleCameraAnimation )
		pFnBlendIdleCameraAnimation = (UFunction*) UObject::GObjObjects()->Data[ 32462 ];

	UBioCameraBehaviorConversation_execBlendIdleCameraAnimation_Parms BlendIdleCameraAnimation_Parms;

	pFnBlendIdleCameraAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBlendIdleCameraAnimation, &BlendIdleCameraAnimation_Parms, NULL );

	pFnBlendIdleCameraAnimation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCameraBehaviorConversation.InitProceduralCameraClass
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioCameraBehaviorConversation::InitProceduralCameraClass ( )
{
	static UFunction* pFnInitProceduralCameraClass = NULL;

	if ( ! pFnInitProceduralCameraClass )
		pFnInitProceduralCameraClass = (UFunction*) UObject::GObjObjects()->Data[ 32461 ];

	UBioCameraBehaviorConversation_execInitProceduralCameraClass_Parms InitProceduralCameraClass_Parms;

	pFnInitProceduralCameraClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitProceduralCameraClass, &InitProceduralCameraClass_Parms, NULL );

	pFnInitProceduralCameraClass->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCameraBehaviorConversation.Reset
// [0x00020002] 
// Parameters infos:

void UBioCameraBehaviorConversation::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 32460 ];

	UBioCameraBehaviorConversation_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorConversation.MakeInactive
// [0x00020002] 
// Parameters infos:

void UBioCameraBehaviorConversation::MakeInactive ( )
{
	static UFunction* pFnMakeInactive = NULL;

	if ( ! pFnMakeInactive )
		pFnMakeInactive = (UFunction*) UObject::GObjObjects()->Data[ 32459 ];

	UBioCameraBehaviorConversation_execMakeInactive_Parms MakeInactive_Parms;

	this->ProcessEvent ( pFnMakeInactive, &MakeInactive_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorConversation.Initialize
// [0x00020002] 
// Parameters infos:
// class ABioPlayerController*    NewOwner                       ( CPF_Parm )

void UBioCameraBehaviorConversation::Initialize ( class ABioPlayerController* NewOwner )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 32457 ];

	UBioCameraBehaviorConversation_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.NewOwner = NewOwner;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorConversation.ForcePOV
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioCameraBehaviorConversation::ForcePOV ( )
{
	static UFunction* pFnForcePOV = NULL;

	if ( ! pFnForcePOV )
		pFnForcePOV = (UFunction*) UObject::GObjObjects()->Data[ 32456 ];

	UBioCameraBehaviorConversation_execForcePOV_Parms ForcePOV_Parms;

	pFnForcePOV->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForcePOV, &ForcePOV_Parms, NULL );

	pFnForcePOV->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCameraBehaviorConversation.ShutDown
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioCameraBehaviorConversation::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 32455 ];

	UBioCameraBehaviorConversation_execShutDown_Parms ShutDown_Parms;

	pFnShutDown->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );

	pFnShutDown->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCameraBehaviorConversation.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void UBioCameraBehaviorConversation::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 32453 ];

	UBioCameraBehaviorConversation_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCameraBehaviorGalaxy.TriggerEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   sEvent                         ( CPF_Parm )
// struct FName                   nParameter                     ( CPF_OptionalParm | CPF_Parm )

bool UBioCameraBehaviorGalaxy::TriggerEvent ( struct FName sEvent, struct FName nParameter )
{
	static UFunction* pFnTriggerEvent = NULL;

	if ( ! pFnTriggerEvent )
		pFnTriggerEvent = (UFunction*) UObject::GObjObjects()->Data[ 32742 ];

	UBioCameraBehaviorGalaxy_execTriggerEvent_Parms TriggerEvent_Parms;
	memcpy ( &TriggerEvent_Parms.sEvent, &sEvent, 0x8 );
	memcpy ( &TriggerEvent_Parms.nParameter, &nParameter, 0x8 );

	pFnTriggerEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTriggerEvent, &TriggerEvent_Parms, NULL );

	pFnTriggerEvent->FunctionFlags |= 0x400;

	return TriggerEvent_Parms.ReturnValue;
};

// Function SFXGame.BioCameraBehaviorGalaxy.GetCameraLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector UBioCameraBehaviorGalaxy::GetCameraLocation ( )
{
	static UFunction* pFnGetCameraLocation = NULL;

	if ( ! pFnGetCameraLocation )
		pFnGetCameraLocation = (UFunction*) UObject::GObjObjects()->Data[ 32740 ];

	UBioCameraBehaviorGalaxy_execGetCameraLocation_Parms GetCameraLocation_Parms;

	this->ProcessEvent ( pFnGetCameraLocation, &GetCameraLocation_Parms, NULL );

	return GetCameraLocation_Parms.ReturnValue;
};

// Function SFXGame.BioCameraBehaviorGalaxy.SetExplorationAchievementCompleted
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioCameraBehaviorGalaxy::eventSetExplorationAchievementCompleted ( )
{
	static UFunction* pFnSetExplorationAchievementCompleted = NULL;

	if ( ! pFnSetExplorationAchievementCompleted )
		pFnSetExplorationAchievementCompleted = (UFunction*) UObject::GObjObjects()->Data[ 32738 ];

	UBioCameraBehaviorGalaxy_eventSetExplorationAchievementCompleted_Parms SetExplorationAchievementCompleted_Parms;

	this->ProcessEvent ( pFnSetExplorationAchievementCompleted, &SetExplorationAchievementCompleted_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorGalaxy.UpdateClusterTravelEffects
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void UBioCameraBehaviorGalaxy::eventUpdateClusterTravelEffects ( float TimeDelta )
{
	static UFunction* pFnUpdateClusterTravelEffects = NULL;

	if ( ! pFnUpdateClusterTravelEffects )
		pFnUpdateClusterTravelEffects = (UFunction*) UObject::GObjObjects()->Data[ 32735 ];

	UBioCameraBehaviorGalaxy_eventUpdateClusterTravelEffects_Parms UpdateClusterTravelEffects_Parms;
	UpdateClusterTravelEffects_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnUpdateClusterTravelEffects, &UpdateClusterTravelEffects_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorGalaxy.OutOfFuelPenalty
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDistToDepot                   ( CPF_Parm )

void UBioCameraBehaviorGalaxy::eventOutOfFuelPenalty ( float fDistToDepot )
{
	static UFunction* pFnOutOfFuelPenalty = NULL;

	if ( ! pFnOutOfFuelPenalty )
		pFnOutOfFuelPenalty = (UFunction*) UObject::GObjObjects()->Data[ 32725 ];

	UBioCameraBehaviorGalaxy_eventOutOfFuelPenalty_Parms OutOfFuelPenalty_Parms;
	OutOfFuelPenalty_Parms.fDistToDepot = fDistToDepot;

	this->ProcessEvent ( pFnOutOfFuelPenalty, &OutOfFuelPenalty_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorGalaxy.BurnFuel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fFuel                          ( CPF_Parm )

void UBioCameraBehaviorGalaxy::eventBurnFuel ( float fFuel )
{
	static UFunction* pFnBurnFuel = NULL;

	if ( ! pFnBurnFuel )
		pFnBurnFuel = (UFunction*) UObject::GObjObjects()->Data[ 32721 ];

	UBioCameraBehaviorGalaxy_eventBurnFuel_Parms BurnFuel_Parms;
	BurnFuel_Parms.fFuel = fFuel;

	this->ProcessEvent ( pFnBurnFuel, &BurnFuel_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorGalaxy.GetFuelEfficiency
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioCameraBehaviorGalaxy::eventGetFuelEfficiency ( )
{
	static UFunction* pFnGetFuelEfficiency = NULL;

	if ( ! pFnGetFuelEfficiency )
		pFnGetFuelEfficiency = (UFunction*) UObject::GObjObjects()->Data[ 32716 ];

	UBioCameraBehaviorGalaxy_eventGetFuelEfficiency_Parms GetFuelEfficiency_Parms;

	this->ProcessEvent ( pFnGetFuelEfficiency, &GetFuelEfficiency_Parms, NULL );

	return GetFuelEfficiency_Parms.ReturnValue;
};

// Function SFXGame.BioCameraBehaviorGalaxy.GetMaxFuel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioCameraBehaviorGalaxy::eventGetMaxFuel ( )
{
	static UFunction* pFnGetMaxFuel = NULL;

	if ( ! pFnGetMaxFuel )
		pFnGetMaxFuel = (UFunction*) UObject::GObjObjects()->Data[ 32712 ];

	UBioCameraBehaviorGalaxy_eventGetMaxFuel_Parms GetMaxFuel_Parms;

	this->ProcessEvent ( pFnGetMaxFuel, &GetMaxFuel_Parms, NULL );

	return GetMaxFuel_Parms.ReturnValue;
};

// Function SFXGame.BioCameraBehaviorGalaxy.GetRemainingFuel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioCameraBehaviorGalaxy::eventGetRemainingFuel ( )
{
	static UFunction* pFnGetRemainingFuel = NULL;

	if ( ! pFnGetRemainingFuel )
		pFnGetRemainingFuel = (UFunction*) UObject::GObjObjects()->Data[ 32707 ];

	UBioCameraBehaviorGalaxy_eventGetRemainingFuel_Parms GetRemainingFuel_Parms;

	this->ProcessEvent ( pFnGetRemainingFuel, &GetRemainingFuel_Parms, NULL );

	return GetRemainingFuel_Parms.ReturnValue;
};

// Function SFXGame.BioCameraBehaviorGalaxy.GetNumCredits
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioCameraBehaviorGalaxy::eventGetNumCredits ( )
{
	static UFunction* pFnGetNumCredits = NULL;

	if ( ! pFnGetNumCredits )
		pFnGetNumCredits = (UFunction*) UObject::GObjObjects()->Data[ 32703 ];

	UBioCameraBehaviorGalaxy_eventGetNumCredits_Parms GetNumCredits_Parms;

	this->ProcessEvent ( pFnGetNumCredits, &GetNumCredits_Parms, NULL );

	return GetNumCredits_Parms.ReturnValue;
};

// Function SFXGame.BioCameraBehaviorGalaxy.GetMaxProbes
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioCameraBehaviorGalaxy::eventGetMaxProbes ( )
{
	static UFunction* pFnGetMaxProbes = NULL;

	if ( ! pFnGetMaxProbes )
		pFnGetMaxProbes = (UFunction*) UObject::GObjObjects()->Data[ 32699 ];

	UBioCameraBehaviorGalaxy_eventGetMaxProbes_Parms GetMaxProbes_Parms;

	this->ProcessEvent ( pFnGetMaxProbes, &GetMaxProbes_Parms, NULL );

	return GetMaxProbes_Parms.ReturnValue;
};

// Function SFXGame.BioCameraBehaviorGalaxy.GetRemainingProbes
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioCameraBehaviorGalaxy::eventGetRemainingProbes ( )
{
	static UFunction* pFnGetRemainingProbes = NULL;

	if ( ! pFnGetRemainingProbes )
		pFnGetRemainingProbes = (UFunction*) UObject::GObjObjects()->Data[ 32694 ];

	UBioCameraBehaviorGalaxy_eventGetRemainingProbes_Parms GetRemainingProbes_Parms;

	this->ProcessEvent ( pFnGetRemainingProbes, &GetRemainingProbes_Parms, NULL );

	return GetRemainingProbes_Parms.ReturnValue;
};

// Function SFXGame.BioCameraBehaviorGalaxy.HandleRevealLandingSite
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioCameraBehaviorGalaxy::HandleRevealLandingSite ( )
{
	static UFunction* pFnHandleRevealLandingSite = NULL;

	if ( ! pFnHandleRevealLandingSite )
		pFnHandleRevealLandingSite = (UFunction*) UObject::GObjObjects()->Data[ 32693 ];

	UBioCameraBehaviorGalaxy_execHandleRevealLandingSite_Parms HandleRevealLandingSite_Parms;

	pFnHandleRevealLandingSite->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHandleRevealLandingSite, &HandleRevealLandingSite_Parms, NULL );

	pFnHandleRevealLandingSite->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCameraBehaviorGalaxy.HandleSelectPlanet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioCameraBehaviorGalaxy::HandleSelectPlanet ( )
{
	static UFunction* pFnHandleSelectPlanet = NULL;

	if ( ! pFnHandleSelectPlanet )
		pFnHandleSelectPlanet = (UFunction*) UObject::GObjObjects()->Data[ 32691 ];

	UBioCameraBehaviorGalaxy_execHandleSelectPlanet_Parms HandleSelectPlanet_Parms;

	pFnHandleSelectPlanet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHandleSelectPlanet, &HandleSelectPlanet_Parms, NULL );

	pFnHandleSelectPlanet->FunctionFlags |= 0x400;

	return HandleSelectPlanet_Parms.ReturnValue;
};

// Function SFXGame.BioCameraBehaviorGalaxy.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void UBioCameraBehaviorGalaxy::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 32689 ];

	UBioCameraBehaviorGalaxy_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCameraBehaviorLocked.Initialize
// [0x00020002] 
// Parameters infos:
// class ABioPlayerController*    NewOwner                       ( CPF_Parm )

void UBioCameraBehaviorLocked::Initialize ( class ABioPlayerController* NewOwner )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 32747 ];

	UBioCameraBehaviorLocked_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.NewOwner = NewOwner;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorSpectator.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void UBioCameraBehaviorSpectator::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 32773 ];

	UBioCameraBehaviorSpectator_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCameraBehaviorSpectator.SetTarget
// [0x00820002] 
// Parameters infos:
// class AActor*                  NewTarget                      ( CPF_Parm )

void UBioCameraBehaviorSpectator::SetTarget ( class AActor* NewTarget )
{
	static UFunction* pFnSetTarget = NULL;

	if ( ! pFnSetTarget )
		pFnSetTarget = (UFunction*) UObject::GObjObjects()->Data[ 32769 ];

	UBioCameraBehaviorSpectator_execSetTarget_Parms SetTarget_Parms;
	SetTarget_Parms.NewTarget = NewTarget;

	this->ProcessEvent ( pFnSetTarget, &SetTarget_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorSpectator.MakeInactive
// [0x00020002] 
// Parameters infos:

void UBioCameraBehaviorSpectator::MakeInactive ( )
{
	static UFunction* pFnMakeInactive = NULL;

	if ( ! pFnMakeInactive )
		pFnMakeInactive = (UFunction*) UObject::GObjObjects()->Data[ 32768 ];

	UBioCameraBehaviorSpectator_execMakeInactive_Parms MakeInactive_Parms;

	this->ProcessEvent ( pFnMakeInactive, &MakeInactive_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorSpectator.Reset
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioCameraBehaviorSpectator::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 32767 ];

	UBioCameraBehaviorSpectator_execReset_Parms Reset_Parms;

	pFnReset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );

	pFnReset->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCameraBehaviorSpectator.SetTargetLocalizedCameraParams
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 vPosition                      ( CPF_Parm )
// struct FRotator                rRotation                      ( CPF_Parm )
// struct FRotator                rLockRotation                  ( CPF_Parm )

void UBioCameraBehaviorSpectator::SetTargetLocalizedCameraParams ( struct FVector vPosition, struct FRotator rRotation, struct FRotator rLockRotation )
{
	static UFunction* pFnSetTargetLocalizedCameraParams = NULL;

	if ( ! pFnSetTargetLocalizedCameraParams )
		pFnSetTargetLocalizedCameraParams = (UFunction*) UObject::GObjObjects()->Data[ 32763 ];

	UBioCameraBehaviorSpectator_execSetTargetLocalizedCameraParams_Parms SetTargetLocalizedCameraParams_Parms;
	memcpy ( &SetTargetLocalizedCameraParams_Parms.vPosition, &vPosition, 0xC );
	memcpy ( &SetTargetLocalizedCameraParams_Parms.rRotation, &rRotation, 0xC );
	memcpy ( &SetTargetLocalizedCameraParams_Parms.rLockRotation, &rLockRotation, 0xC );

	pFnSetTargetLocalizedCameraParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTargetLocalizedCameraParams, &SetTargetLocalizedCameraParams_Parms, NULL );

	pFnSetTargetLocalizedCameraParams->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCameraBehaviorSpectator.GetTargetLocalizedCameraParams
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 vPosition                      ( CPF_Parm | CPF_OutParm )
// struct FRotator                rRotation                      ( CPF_Parm | CPF_OutParm )
// struct FRotator                rLockRotation                  ( CPF_Parm | CPF_OutParm )

void UBioCameraBehaviorSpectator::GetTargetLocalizedCameraParams ( struct FVector* vPosition, struct FRotator* rRotation, struct FRotator* rLockRotation )
{
	static UFunction* pFnGetTargetLocalizedCameraParams = NULL;

	if ( ! pFnGetTargetLocalizedCameraParams )
		pFnGetTargetLocalizedCameraParams = (UFunction*) UObject::GObjObjects()->Data[ 32759 ];

	UBioCameraBehaviorSpectator_execGetTargetLocalizedCameraParams_Parms GetTargetLocalizedCameraParams_Parms;

	pFnGetTargetLocalizedCameraParams->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetLocalizedCameraParams, &GetTargetLocalizedCameraParams_Parms, NULL );

	pFnGetTargetLocalizedCameraParams->FunctionFlags |= 0x400;

	if ( vPosition )
		memcpy ( vPosition, &GetTargetLocalizedCameraParams_Parms.vPosition, 0xC );

	if ( rRotation )
		memcpy ( rRotation, &GetTargetLocalizedCameraParams_Parms.rRotation, 0xC );

	if ( rLockRotation )
		memcpy ( rLockRotation, &GetTargetLocalizedCameraParams_Parms.rLockRotation, 0xC );
};

// Function SFXGame.BioCameraDebugger.GetFlag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eFlag                          ( CPF_Parm )

bool UBioCameraDebugger::GetFlag ( unsigned char eFlag )
{
	static UFunction* pFnGetFlag = NULL;

	if ( ! pFnGetFlag )
		pFnGetFlag = (UFunction*) UObject::GObjObjects()->Data[ 32327 ];

	UBioCameraDebugger_execGetFlag_Parms GetFlag_Parms;
	GetFlag_Parms.eFlag = eFlag;

	pFnGetFlag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFlag, &GetFlag_Parms, NULL );

	pFnGetFlag->FunctionFlags |= 0x400;

	return GetFlag_Parms.ReturnValue;
};

// Function SFXGame.BioCameraDebugger.SetFlag
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  eFlag                          ( CPF_Parm )
// unsigned long                  B                              ( CPF_Parm )

void UBioCameraDebugger::SetFlag ( unsigned char eFlag, unsigned long B )
{
	static UFunction* pFnSetFlag = NULL;

	if ( ! pFnSetFlag )
		pFnSetFlag = (UFunction*) UObject::GObjObjects()->Data[ 32324 ];

	UBioCameraDebugger_execSetFlag_Parms SetFlag_Parms;
	SetFlag_Parms.eFlag = eFlag;
	SetFlag_Parms.B = B;

	pFnSetFlag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFlag, &SetFlag_Parms, NULL );

	pFnSetFlag->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCameraZoom.ModifyPostProcessSettings
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FPostProcessSettings    PPSettings                     ( CPF_Parm | CPF_OutParm )

void UBioCameraZoom::ModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings )
{
	static UFunction* pFnModifyPostProcessSettings = NULL;

	if ( ! pFnModifyPostProcessSettings )
		pFnModifyPostProcessSettings = (UFunction*) UObject::GObjObjects()->Data[ 32831 ];

	UBioCameraZoom_execModifyPostProcessSettings_Parms ModifyPostProcessSettings_Parms;

	pFnModifyPostProcessSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnModifyPostProcessSettings, &ModifyPostProcessSettings_Parms, NULL );

	pFnModifyPostProcessSettings->FunctionFlags |= 0x400;

	if ( PPSettings )
		memcpy ( PPSettings, &ModifyPostProcessSettings_Parms.PPSettings, 0x90 );
};

// Function SFXGame.BioCameraZoom.Tick
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )
// float                          FOV                            ( CPF_Parm )
// float                          CamStickScalar                 ( CPF_Parm )

void UBioCameraZoom::Tick ( float TimeDelta, float FOV, float CamStickScalar )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 32827 ];

	UBioCameraZoom_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;
	Tick_Parms.FOV = FOV;
	Tick_Parms.CamStickScalar = CamStickScalar;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCameraZoom.GetCurrentMagnificationLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioCameraZoom::GetCurrentMagnificationLevel ( )
{
	static UFunction* pFnGetCurrentMagnificationLevel = NULL;

	if ( ! pFnGetCurrentMagnificationLevel )
		pFnGetCurrentMagnificationLevel = (UFunction*) UObject::GObjObjects()->Data[ 32825 ];

	UBioCameraZoom_execGetCurrentMagnificationLevel_Parms GetCurrentMagnificationLevel_Parms;

	pFnGetCurrentMagnificationLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentMagnificationLevel, &GetCurrentMagnificationLevel_Parms, NULL );

	pFnGetCurrentMagnificationLevel->FunctionFlags |= 0x400;

	return GetCurrentMagnificationLevel_Parms.ReturnValue;
};

// Function SFXGame.BioCameraZoom.Focus
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          fDistance                      ( CPF_Parm )
// class ABioWorldInfo*           pWorldInfo                     ( CPF_Parm )

void UBioCameraZoom::Focus ( float fDistance, class ABioWorldInfo* pWorldInfo )
{
	static UFunction* pFnFocus = NULL;

	if ( ! pFnFocus )
		pFnFocus = (UFunction*) UObject::GObjObjects()->Data[ 32822 ];

	UBioCameraZoom_execFocus_Parms Focus_Parms;
	Focus_Parms.fDistance = fDistance;
	Focus_Parms.pWorldInfo = pWorldInfo;

	pFnFocus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFocus, &Focus_Parms, NULL );

	pFnFocus->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXCameraModifier_ScreenShake.ModifyCamera
// [0x00C20002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ACamera*                 Camera                         ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

bool USFXCameraModifier_ScreenShake::ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV )
{
	static UFunction* pFnModifyCamera = NULL;

	if ( ! pFnModifyCamera )
		pFnModifyCamera = (UFunction*) UObject::GObjObjects()->Data[ 53713 ];

	USFXCameraModifier_ScreenShake_execModifyCamera_Parms ModifyCamera_Parms;
	ModifyCamera_Parms.Camera = Camera;
	ModifyCamera_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnModifyCamera, &ModifyCamera_Parms, NULL );

	if ( OutPOV )
		memcpy ( OutPOV, &ModifyCamera_Parms.OutPOV, 0x1C );

	return ModifyCamera_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraModifier_ScreenShake.UpdateScreenShake
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FScreenShakeStruct      Shake                          ( CPF_Parm | CPF_OutParm )
// struct FTPOV                   OutPOV                         ( CPF_Parm | CPF_OutParm )

void USFXCameraModifier_ScreenShake::UpdateScreenShake ( float DeltaTime, struct FScreenShakeStruct* Shake, struct FTPOV* OutPOV )
{
	static UFunction* pFnUpdateScreenShake = NULL;

	if ( ! pFnUpdateScreenShake )
		pFnUpdateScreenShake = (UFunction*) UObject::GObjObjects()->Data[ 53709 ];

	USFXCameraModifier_ScreenShake_execUpdateScreenShake_Parms UpdateScreenShake_Parms;
	UpdateScreenShake_Parms.DeltaTime = DeltaTime;

	pFnUpdateScreenShake->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateScreenShake, &UpdateScreenShake_Parms, NULL );

	pFnUpdateScreenShake->FunctionFlags |= 0x400;

	if ( Shake )
		memcpy ( Shake, &UpdateScreenShake_Parms.Shake, 0x70 );

	if ( OutPOV )
		memcpy ( OutPOV, &UpdateScreenShake_Parms.OutPOV, 0x1C );
};

// Function SFXGame.SFXCameraModifier_ScreenShake.StartNewShake
// [0x00820002] 
// Parameters infos:
// float                          Duration                       ( CPF_Parm )
// struct FVector                 newRotAmplitude                ( CPF_Parm )
// struct FVector                 newRotFrequency                ( CPF_Parm )
// struct FVector                 newLocAmplitude                ( CPF_Parm )
// struct FVector                 newLocFrequency                ( CPF_Parm )
// float                          newFOVAmplitude                ( CPF_Parm )
// float                          newFOVFrequency                ( CPF_Parm )

void USFXCameraModifier_ScreenShake::StartNewShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency )
{
	static UFunction* pFnStartNewShake = NULL;

	if ( ! pFnStartNewShake )
		pFnStartNewShake = (UFunction*) UObject::GObjObjects()->Data[ 53700 ];

	USFXCameraModifier_ScreenShake_execStartNewShake_Parms StartNewShake_Parms;
	StartNewShake_Parms.Duration = Duration;
	memcpy ( &StartNewShake_Parms.newRotAmplitude, &newRotAmplitude, 0xC );
	memcpy ( &StartNewShake_Parms.newRotFrequency, &newRotFrequency, 0xC );
	memcpy ( &StartNewShake_Parms.newLocAmplitude, &newLocAmplitude, 0xC );
	memcpy ( &StartNewShake_Parms.newLocFrequency, &newLocFrequency, 0xC );
	StartNewShake_Parms.newFOVAmplitude = newFOVAmplitude;
	StartNewShake_Parms.newFOVFrequency = newFOVFrequency;

	this->ProcessEvent ( pFnStartNewShake, &StartNewShake_Parms, NULL );
};

// Function SFXGame.SFXCameraModifier_ScreenShake.ComposeNewShake
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FScreenShakeStruct      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Duration                       ( CPF_Parm )
// struct FVector                 newRotAmplitude                ( CPF_Parm )
// struct FVector                 newRotFrequency                ( CPF_Parm )
// struct FVector                 newLocAmplitude                ( CPF_Parm )
// struct FVector                 newLocFrequency                ( CPF_Parm )
// float                          newFOVAmplitude                ( CPF_Parm )
// float                          newFOVFrequency                ( CPF_Parm )

struct FScreenShakeStruct USFXCameraModifier_ScreenShake::ComposeNewShake ( float Duration, struct FVector newRotAmplitude, struct FVector newRotFrequency, struct FVector newLocAmplitude, struct FVector newLocFrequency, float newFOVAmplitude, float newFOVFrequency )
{
	static UFunction* pFnComposeNewShake = NULL;

	if ( ! pFnComposeNewShake )
		pFnComposeNewShake = (UFunction*) UObject::GObjObjects()->Data[ 53690 ];

	USFXCameraModifier_ScreenShake_execComposeNewShake_Parms ComposeNewShake_Parms;
	ComposeNewShake_Parms.Duration = Duration;
	memcpy ( &ComposeNewShake_Parms.newRotAmplitude, &newRotAmplitude, 0xC );
	memcpy ( &ComposeNewShake_Parms.newRotFrequency, &newRotFrequency, 0xC );
	memcpy ( &ComposeNewShake_Parms.newLocAmplitude, &newLocAmplitude, 0xC );
	memcpy ( &ComposeNewShake_Parms.newLocFrequency, &newLocFrequency, 0xC );
	ComposeNewShake_Parms.newFOVAmplitude = newFOVAmplitude;
	ComposeNewShake_Parms.newFOVFrequency = newFOVFrequency;

	this->ProcessEvent ( pFnComposeNewShake, &ComposeNewShake_Parms, NULL );

	return ComposeNewShake_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraModifier_ScreenShake.InitializeOffset
// [0x00022003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Param                          ( CPF_Parm )

float USFXCameraModifier_ScreenShake::InitializeOffset ( unsigned char Param )
{
	static UFunction* pFnInitializeOffset = NULL;

	if ( ! pFnInitializeOffset )
		pFnInitializeOffset = (UFunction*) UObject::GObjObjects()->Data[ 53687 ];

	USFXCameraModifier_ScreenShake_execInitializeOffset_Parms InitializeOffset_Parms;
	InitializeOffset_Parms.Param = Param;

	this->ProcessEvent ( pFnInitializeOffset, &InitializeOffset_Parms, NULL );

	return InitializeOffset_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraModifier_ScreenShake.InitializeShake
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScreenShakeStruct      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FScreenShakeStruct      NewShake                       ( CPF_Parm )

struct FScreenShakeStruct USFXCameraModifier_ScreenShake::InitializeShake ( struct FScreenShakeStruct NewShake )
{
	static UFunction* pFnInitializeShake = NULL;

	if ( ! pFnInitializeShake )
		pFnInitializeShake = (UFunction*) UObject::GObjObjects()->Data[ 53684 ];

	USFXCameraModifier_ScreenShake_execInitializeShake_Parms InitializeShake_Parms;
	memcpy ( &InitializeShake_Parms.NewShake, &NewShake, 0x70 );

	this->ProcessEvent ( pFnInitializeShake, &InitializeShake_Parms, NULL );

	return InitializeShake_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraModifier_ScreenShake.AddScreenShake
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScreenShakeStruct      NewShake                       ( CPF_Parm )

void USFXCameraModifier_ScreenShake::AddScreenShake ( struct FScreenShakeStruct NewShake )
{
	static UFunction* pFnAddScreenShake = NULL;

	if ( ! pFnAddScreenShake )
		pFnAddScreenShake = (UFunction*) UObject::GObjObjects()->Data[ 53680 ];

	USFXCameraModifier_ScreenShake_execAddScreenShake_Parms AddScreenShake_Parms;
	memcpy ( &AddScreenShake_Parms.NewShake, &NewShake, 0x70 );

	this->ProcessEvent ( pFnAddScreenShake, &AddScreenShake_Parms, NULL );
};

// Function SFXGame.SFXCameraModifier_ScreenShake.RemoveScreenShake
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   ShakeName                      ( CPF_Parm )

void USFXCameraModifier_ScreenShake::RemoveScreenShake ( struct FName ShakeName )
{
	static UFunction* pFnRemoveScreenShake = NULL;

	if ( ! pFnRemoveScreenShake )
		pFnRemoveScreenShake = (UFunction*) UObject::GObjObjects()->Data[ 53677 ];

	USFXCameraModifier_ScreenShake_execRemoveScreenShake_Parms RemoveScreenShake_Parms;
	memcpy ( &RemoveScreenShake_Parms.ShakeName, &ShakeName, 0x8 );

	this->ProcessEvent ( pFnRemoveScreenShake, &RemoveScreenShake_Parms, NULL );
};

// Function SFXGame.SFXCameraModifier_ScreenShake.RemoveAllScreenShakes
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXCameraModifier_ScreenShake::RemoveAllScreenShakes ( )
{
	static UFunction* pFnRemoveAllScreenShakes = NULL;

	if ( ! pFnRemoveAllScreenShakes )
		pFnRemoveAllScreenShakes = (UFunction*) UObject::GObjObjects()->Data[ 53676 ];

	USFXCameraModifier_ScreenShake_execRemoveAllScreenShakes_Parms RemoveAllScreenShakes_Parms;

	this->ProcessEvent ( pFnRemoveAllScreenShakes, &RemoveAllScreenShakes_Parms, NULL );
};

// Function SFXGame.SFXCameraNativeBase.AddScreenShake
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FScreenShakeStruct      Shake                          ( CPF_Parm )

void ASFXCameraNativeBase::eventAddScreenShake ( struct FScreenShakeStruct Shake )
{
	static UFunction* pFnAddScreenShake = NULL;

	if ( ! pFnAddScreenShake )
		pFnAddScreenShake = (UFunction*) UObject::GObjObjects()->Data[ 53764 ];

	ASFXCameraNativeBase_eventAddScreenShake_Parms AddScreenShake_Parms;
	memcpy ( &AddScreenShake_Parms.Shake, &Shake, 0x70 );

	this->ProcessEvent ( pFnAddScreenShake, &AddScreenShake_Parms, NULL );
};

// Function SFXGame.SFXCameraNativeBase.CreateIPECommands
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioInGamePropertyEditor* IPE                            ( CPF_Parm )
// class UBioPropertyEditorBaseNode* Parent                         ( CPF_Parm )

void ASFXCameraNativeBase::eventCreateIPECommands ( class UBioInGamePropertyEditor* IPE, class UBioPropertyEditorBaseNode* Parent )
{
	static UFunction* pFnCreateIPECommands = NULL;

	if ( ! pFnCreateIPECommands )
		pFnCreateIPECommands = (UFunction*) UObject::GObjObjects()->Data[ 53759 ];

	ASFXCameraNativeBase_eventCreateIPECommands_Parms CreateIPECommands_Parms;
	CreateIPECommands_Parms.IPE = IPE;
	CreateIPECommands_Parms.Parent = Parent;

	this->ProcessEvent ( pFnCreateIPECommands, &CreateIPECommands_Parms, NULL );
};

// Function SFXGame.SFXCameraNativeBase.OnUnPossess
// [0x00020002] 
// Parameters infos:

void ASFXCameraNativeBase::OnUnPossess ( )
{
	static UFunction* pFnOnUnPossess = NULL;

	if ( ! pFnOnUnPossess )
		pFnOnUnPossess = (UFunction*) UObject::GObjObjects()->Data[ 53758 ];

	ASFXCameraNativeBase_execOnUnPossess_Parms OnUnPossess_Parms;

	this->ProcessEvent ( pFnOnUnPossess, &OnUnPossess_Parms, NULL );
};

// Function SFXGame.SFXCameraNativeBase.OnPossess
// [0x00020002] 
// Parameters infos:
// class APawn*                   pPawn                          ( CPF_Parm )

void ASFXCameraNativeBase::OnPossess ( class APawn* pPawn )
{
	static UFunction* pFnOnPossess = NULL;

	if ( ! pFnOnPossess )
		pFnOnPossess = (UFunction*) UObject::GObjObjects()->Data[ 53756 ];

	ASFXCameraNativeBase_execOnPossess_Parms OnPossess_Parms;
	OnPossess_Parms.pPawn = pPawn;

	this->ProcessEvent ( pFnOnPossess, &OnPossess_Parms, NULL );
};

// Function SFXGame.SFXCameraNativeBase.LineCheck
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  TraceActors                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Extent                         ( CPF_OptionalParm | CPF_Parm )
// int                            ExtraTraceFlags                ( CPF_OptionalParm | CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitNormal                      ( CPF_Parm | CPF_OutParm )
// struct FVector                 TraceEnd                       ( CPF_Const | CPF_Parm | CPF_OutParm )

class AActor* ASFXCameraNativeBase::LineCheck ( unsigned long TraceActors, struct FVector Extent, int ExtraTraceFlags, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* HitNormal, struct FVector* TraceEnd )
{
	static UFunction* pFnLineCheck = NULL;

	if ( ! pFnLineCheck )
		pFnLineCheck = (UFunction*) UObject::GObjObjects()->Data[ 41911 ];

	ASFXCameraNativeBase_execLineCheck_Parms LineCheck_Parms;
	LineCheck_Parms.TraceActors = TraceActors;
	memcpy ( &LineCheck_Parms.Extent, &Extent, 0xC );
	LineCheck_Parms.ExtraTraceFlags = ExtraTraceFlags;

	pFnLineCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineCheck, &LineCheck_Parms, NULL );

	pFnLineCheck->FunctionFlags |= 0x400;

	if ( HitInfo )
		memcpy ( HitInfo, &LineCheck_Parms.HitInfo, 0x1C );

	if ( HitLocation )
		memcpy ( HitLocation, &LineCheck_Parms.HitLocation, 0xC );

	if ( HitNormal )
		memcpy ( HitNormal, &LineCheck_Parms.HitNormal, 0xC );

	if ( TraceEnd )
		memcpy ( TraceEnd, &LineCheck_Parms.TraceEnd, 0xC );

	return LineCheck_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraNativeBase.ResetHiddenActors
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ASFXCameraNativeBase::ResetHiddenActors ( )
{
	static UFunction* pFnResetHiddenActors = NULL;

	if ( ! pFnResetHiddenActors )
		pFnResetHiddenActors = (UFunction*) UObject::GObjObjects()->Data[ 53747 ];

	ASFXCameraNativeBase_execResetHiddenActors_Parms ResetHiddenActors_Parms;

	pFnResetHiddenActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetHiddenActors, &ResetHiddenActors_Parms, NULL );

	pFnResetHiddenActors->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXCameraNativeBase.TraceCamera
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ASFXCameraNativeBase::TraceCamera ( )
{
	static UFunction* pFnTraceCamera = NULL;

	if ( ! pFnTraceCamera )
		pFnTraceCamera = (UFunction*) UObject::GObjObjects()->Data[ 53746 ];

	ASFXCameraNativeBase_execTraceCamera_Parms TraceCamera_Parms;

	pFnTraceCamera->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTraceCamera, &TraceCamera_Parms, NULL );

	pFnTraceCamera->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXCameraNativeBase.WorldToScreenSnapToEdge
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          i_fSafeZoneX                   ( CPF_Parm )
// float                          i_fSafeZoneY                   ( CPF_Parm )
// struct FVector                 vWorldLoc                      ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector ASFXCameraNativeBase::WorldToScreenSnapToEdge ( float i_fSafeZoneX, float i_fSafeZoneY, struct FVector* vWorldLoc )
{
	static UFunction* pFnWorldToScreenSnapToEdge = NULL;

	if ( ! pFnWorldToScreenSnapToEdge )
		pFnWorldToScreenSnapToEdge = (UFunction*) UObject::GObjObjects()->Data[ 53741 ];

	ASFXCameraNativeBase_execWorldToScreenSnapToEdge_Parms WorldToScreenSnapToEdge_Parms;
	WorldToScreenSnapToEdge_Parms.i_fSafeZoneX = i_fSafeZoneX;
	WorldToScreenSnapToEdge_Parms.i_fSafeZoneY = i_fSafeZoneY;

	pFnWorldToScreenSnapToEdge->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWorldToScreenSnapToEdge, &WorldToScreenSnapToEdge_Parms, NULL );

	pFnWorldToScreenSnapToEdge->FunctionFlags |= 0x400;

	if ( vWorldLoc )
		memcpy ( vWorldLoc, &WorldToScreenSnapToEdge_Parms.vWorldLoc, 0xC );

	return WorldToScreenSnapToEdge_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraNativeBase.WorldToCanonicalScreen
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vWorldLoc                      ( CPF_Const | CPF_Parm | CPF_OutParm )

struct FVector ASFXCameraNativeBase::WorldToCanonicalScreen ( struct FVector* vWorldLoc )
{
	static UFunction* pFnWorldToCanonicalScreen = NULL;

	if ( ! pFnWorldToCanonicalScreen )
		pFnWorldToCanonicalScreen = (UFunction*) UObject::GObjObjects()->Data[ 53738 ];

	ASFXCameraNativeBase_execWorldToCanonicalScreen_Parms WorldToCanonicalScreen_Parms;

	pFnWorldToCanonicalScreen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWorldToCanonicalScreen, &WorldToCanonicalScreen_Parms, NULL );

	pFnWorldToCanonicalScreen->FunctionFlags |= 0x400;

	if ( vWorldLoc )
		memcpy ( vWorldLoc, &WorldToCanonicalScreen_Parms.vWorldLoc, 0xC );

	return WorldToCanonicalScreen_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraNativeBase.GetTrace
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oHit                           ( CPF_Parm | CPF_OutParm )
// struct FVector                 vLocation                      ( CPF_Parm | CPF_OutParm )
// struct FVector                 vNormal                        ( CPF_Parm | CPF_OutParm )

bool ASFXCameraNativeBase::GetTrace ( class AActor** oHit, struct FVector* vLocation, struct FVector* vNormal )
{
	static UFunction* pFnGetTrace = NULL;

	if ( ! pFnGetTrace )
		pFnGetTrace = (UFunction*) UObject::GObjObjects()->Data[ 38070 ];

	ASFXCameraNativeBase_execGetTrace_Parms GetTrace_Parms;

	pFnGetTrace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTrace, &GetTrace_Parms, NULL );

	pFnGetTrace->FunctionFlags |= 0x400;

	if ( oHit )
		*oHit = GetTrace_Parms.oHit;

	if ( vLocation )
		memcpy ( vLocation, &GetTrace_Parms.vLocation, 0xC );

	if ( vNormal )
		memcpy ( vNormal, &GetTrace_Parms.vNormal, 0xC );

	return GetTrace_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceable.ReactToDeath
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// float                          fDeathDamage                   ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  clsDamageType                  ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class USFXDamageType*          pDamage                        ( CPF_OptionalParm | CPF_Parm )

void ABioArtPlaceable::ReactToDeath ( float Damage, float fDeathDamage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* clsDamageType, struct FTraceHitInfo HitInfo, class USFXDamageType* pDamage )
{
	static UFunction* pFnReactToDeath = NULL;

	if ( ! pFnReactToDeath )
		pFnReactToDeath = (UFunction*) UObject::GObjObjects()->Data[ 31692 ];

	ABioArtPlaceable_execReactToDeath_Parms ReactToDeath_Parms;
	ReactToDeath_Parms.Damage = Damage;
	ReactToDeath_Parms.fDeathDamage = fDeathDamage;
	ReactToDeath_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &ReactToDeath_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ReactToDeath_Parms.Momentum, &Momentum, 0xC );
	ReactToDeath_Parms.clsDamageType = clsDamageType;
	memcpy ( &ReactToDeath_Parms.HitInfo, &HitInfo, 0x1C );
	ReactToDeath_Parms.pDamage = pDamage;

	this->ProcessEvent ( pFnReactToDeath, &ReactToDeath_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.DestroyedCleanupTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioArtPlaceable::eventDestroyedCleanupTimer ( )
{
	static UFunction* pFnDestroyedCleanupTimer = NULL;

	if ( ! pFnDestroyedCleanupTimer )
		pFnDestroyedCleanupTimer = (UFunction*) UObject::GObjObjects()->Data[ 31687 ];

	ABioArtPlaceable_eventDestroyedCleanupTimer_Parms DestroyedCleanupTimer_Parms;

	this->ProcessEvent ( pFnDestroyedCleanupTimer, &DestroyedCleanupTimer_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.FinishAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ABioArtPlaceable::eventFinishAnimControl ( )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 31686 ];

	ABioArtPlaceable_eventFinishAnimControl_Parms FinishAnimControl_Parms;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.SetAnimWeights
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// TArray< struct FAnimSlotInfo > SlotInfos                      ( CPF_Parm | CPF_NeedCtorLink )

void ABioArtPlaceable::eventSetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos )
{
	static UFunction* pFnSetAnimWeights = NULL;

	if ( ! pFnSetAnimWeights )
		pFnSetAnimWeights = (UFunction*) UObject::GObjObjects()->Data[ 31683 ];

	ABioArtPlaceable_eventSetAnimWeights_Parms SetAnimWeights_Parms;
	memcpy ( &SetAnimWeights_Parms.SlotInfos, &SlotInfos, 0xC );

	this->ProcessEvent ( pFnSetAnimWeights, &SetAnimWeights_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.SetAnimPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void ABioArtPlaceable::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 31676 ];

	ABioArtPlaceable_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.BeginAnimControl
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// TArray< class UAnimSet* >      InAnimSets                     ( CPF_Parm | CPF_NeedCtorLink )

void ABioArtPlaceable::eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 31673 ];

	ABioArtPlaceable_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	memcpy ( &BeginAnimControl_Parms.InAnimSets, &InAnimSets, 0xC );

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ABioArtPlaceable::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 31671 ];

	ABioArtPlaceable_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceable.OnSkillGameCanceled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ABioPawn*                oUsingPawn                     ( CPF_Parm )

void ABioArtPlaceable::eventOnSkillGameCanceled ( class ABioPawn* oUsingPawn )
{
	static UFunction* pFnOnSkillGameCanceled = NULL;

	if ( ! pFnOnSkillGameCanceled )
		pFnOnSkillGameCanceled = (UFunction*) UObject::GObjObjects()->Data[ 31668 ];

	ABioArtPlaceable_eventOnSkillGameCanceled_Parms OnSkillGameCanceled_Parms;
	OnSkillGameCanceled_Parms.oUsingPawn = oUsingPawn;

	this->ProcessEvent ( pFnOnSkillGameCanceled, &OnSkillGameCanceled_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.OnSkillGameSucceeded
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ABioPawn*                oUsingPawn                     ( CPF_Parm )

void ABioArtPlaceable::eventOnSkillGameSucceeded ( class ABioPawn* oUsingPawn )
{
	static UFunction* pFnOnSkillGameSucceeded = NULL;

	if ( ! pFnOnSkillGameSucceeded )
		pFnOnSkillGameSucceeded = (UFunction*) UObject::GObjObjects()->Data[ 31664 ];

	ABioArtPlaceable_eventOnSkillGameSucceeded_Parms OnSkillGameSucceeded_Parms;
	OnSkillGameSucceeded_Parms.oUsingPawn = oUsingPawn;

	this->ProcessEvent ( pFnOnSkillGameSucceeded, &OnSkillGameSucceeded_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.OnSkillGameFailed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ABioPawn*                oUsingPawn                     ( CPF_Parm )

void ABioArtPlaceable::eventOnSkillGameFailed ( class ABioPawn* oUsingPawn )
{
	static UFunction* pFnOnSkillGameFailed = NULL;

	if ( ! pFnOnSkillGameFailed )
		pFnOnSkillGameFailed = (UFunction*) UObject::GObjObjects()->Data[ 31660 ];

	ABioArtPlaceable_eventOnSkillGameFailed_Parms OnSkillGameFailed_Parms;
	OnSkillGameFailed_Parms.oUsingPawn = oUsingPawn;

	this->ProcessEvent ( pFnOnSkillGameFailed, &OnSkillGameFailed_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.AbortReactive
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   nmToState                      ( CPF_Parm )

void ABioArtPlaceable::eventAbortReactive ( struct FName nmToState )
{
	static UFunction* pFnAbortReactive = NULL;

	if ( ! pFnAbortReactive )
		pFnAbortReactive = (UFunction*) UObject::GObjObjects()->Data[ 31654 ];

	ABioArtPlaceable_eventAbortReactive_Parms AbortReactive_Parms;
	memcpy ( &AbortReactive_Parms.nmToState, &nmToState, 0x8 );

	this->ProcessEvent ( pFnAbortReactive, &AbortReactive_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.RanInto
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ABioArtPlaceable::eventRanInto ( class AActor* Other )
{
	static UFunction* pFnRanInto = NULL;

	if ( ! pFnRanInto )
		pFnRanInto = (UFunction*) UObject::GObjObjects()->Data[ 31650 ];

	ABioArtPlaceable_eventRanInto_Parms RanInto_Parms;
	RanInto_Parms.Other = Other;

	this->ProcessEvent ( pFnRanInto, &RanInto_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.IsDestroyed
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioArtPlaceable::IsDestroyed ( )
{
	static UFunction* pFnIsDestroyed = NULL;

	if ( ! pFnIsDestroyed )
		pFnIsDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 31647 ];

	ABioArtPlaceable_execIsDestroyed_Parms IsDestroyed_Parms;

	this->ProcessEvent ( pFnIsDestroyed, &IsDestroyed_Parms, NULL );

	return IsDestroyed_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceable.OnCastAt
// [0x00020002] 
// Parameters infos:
// class APawn*                   oAttacker                      ( CPF_Parm )
// class USFXPower*               Power                          ( CPF_Parm )

void ABioArtPlaceable::OnCastAt ( class APawn* oAttacker, class USFXPower* Power )
{
	static UFunction* pFnOnCastAt = NULL;

	if ( ! pFnOnCastAt )
		pFnOnCastAt = (UFunction*) UObject::GObjObjects()->Data[ 31640 ];

	ABioArtPlaceable_execOnCastAt_Parms OnCastAt_Parms;
	OnCastAt_Parms.oAttacker = oAttacker;
	OnCastAt_Parms.Power = Power;

	this->ProcessEvent ( pFnOnCastAt, &OnCastAt_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.OnAttacked
// [0x00020002] 
// Parameters infos:
// class APawn*                   oAttacker                      ( CPF_Parm )
// struct FName                   WeaponName                     ( CPF_Parm )

void ABioArtPlaceable::OnAttacked ( class APawn* oAttacker, struct FName WeaponName )
{
	static UFunction* pFnOnAttacked = NULL;

	if ( ! pFnOnAttacked )
		pFnOnAttacked = (UFunction*) UObject::GObjObjects()->Data[ 31635 ];

	ABioArtPlaceable_execOnAttacked_Parms OnAttacked_Parms;
	OnAttacked_Parms.oAttacker = oAttacker;
	memcpy ( &OnAttacked_Parms.WeaponName, &WeaponName, 0x8 );

	this->ProcessEvent ( pFnOnAttacked, &OnAttacked_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.CreateSelection
// [0x00020002] 
// Parameters infos:

void ABioArtPlaceable::CreateSelection ( )
{
	static UFunction* pFnCreateSelection = NULL;

	if ( ! pFnCreateSelection )
		pFnCreateSelection = (UFunction*) UObject::GObjObjects()->Data[ 31628 ];

	ABioArtPlaceable_execCreateSelection_Parms CreateSelection_Parms;

	this->ProcessEvent ( pFnCreateSelection, &CreateSelection_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ABioArtPlaceable::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 31627 ];

	ABioArtPlaceable_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.BioArtPlaceable.UnfreezeAnimation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioArtPlaceable::UnfreezeAnimation ( )
{
	static UFunction* pFnUnfreezeAnimation = NULL;

	if ( ! pFnUnfreezeAnimation )
		pFnUnfreezeAnimation = (UFunction*) UObject::GObjObjects()->Data[ 31626 ];

	ABioArtPlaceable_execUnfreezeAnimation_Parms UnfreezeAnimation_Parms;

	pFnUnfreezeAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnfreezeAnimation, &UnfreezeAnimation_Parms, NULL );

	pFnUnfreezeAnimation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceable.FreezeAnimation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioArtPlaceable::FreezeAnimation ( )
{
	static UFunction* pFnFreezeAnimation = NULL;

	if ( ! pFnFreezeAnimation )
		pFnFreezeAnimation = (UFunction*) UObject::GObjObjects()->Data[ 31625 ];

	ABioArtPlaceable_execFreezeAnimation_Parms FreezeAnimation_Parms;

	pFnFreezeAnimation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreezeAnimation, &FreezeAnimation_Parms, NULL );

	pFnFreezeAnimation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceable.MAT_FinishAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioArtPlaceable::MAT_FinishAnimControl ( )
{
	static UFunction* pFnMAT_FinishAnimControl = NULL;

	if ( ! pFnMAT_FinishAnimControl )
		pFnMAT_FinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 31624 ];

	ABioArtPlaceable_execMAT_FinishAnimControl_Parms MAT_FinishAnimControl_Parms;

	pFnMAT_FinishAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_FinishAnimControl, &MAT_FinishAnimControl_Parms, NULL );

	pFnMAT_FinishAnimControl->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceable.MAT_SetAnimWeights
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FAnimSlotInfo > SlotInfos                      ( CPF_Parm | CPF_NeedCtorLink )

void ABioArtPlaceable::MAT_SetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos )
{
	static UFunction* pFnMAT_SetAnimWeights = NULL;

	if ( ! pFnMAT_SetAnimWeights )
		pFnMAT_SetAnimWeights = (UFunction*) UObject::GObjObjects()->Data[ 31621 ];

	ABioArtPlaceable_execMAT_SetAnimWeights_Parms MAT_SetAnimWeights_Parms;
	memcpy ( &MAT_SetAnimWeights_Parms.SlotInfos, &SlotInfos, 0xC );

	pFnMAT_SetAnimWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimWeights, &MAT_SetAnimWeights_Parms, NULL );

	pFnMAT_SetAnimWeights->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceable.MAT_SetAnimPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void ABioArtPlaceable::MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnMAT_SetAnimPosition = NULL;

	if ( ! pFnMAT_SetAnimPosition )
		pFnMAT_SetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 31614 ];

	ABioArtPlaceable_execMAT_SetAnimPosition_Parms MAT_SetAnimPosition_Parms;
	memcpy ( &MAT_SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	MAT_SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &MAT_SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	MAT_SetAnimPosition_Parms.InPosition = InPosition;
	MAT_SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	MAT_SetAnimPosition_Parms.bLooping = bLooping;

	pFnMAT_SetAnimPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_SetAnimPosition, &MAT_SetAnimPosition_Parms, NULL );

	pFnMAT_SetAnimPosition->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceable.MAT_BeginAnimControl
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< class UAnimSet* >      InAnimSets                     ( CPF_Parm | CPF_NeedCtorLink )

void ABioArtPlaceable::MAT_BeginAnimControl ( TArray< class UAnimSet* > InAnimSets )
{
	static UFunction* pFnMAT_BeginAnimControl = NULL;

	if ( ! pFnMAT_BeginAnimControl )
		pFnMAT_BeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 31611 ];

	ABioArtPlaceable_execMAT_BeginAnimControl_Parms MAT_BeginAnimControl_Parms;
	memcpy ( &MAT_BeginAnimControl_Parms.InAnimSets, &InAnimSets, 0xC );

	pFnMAT_BeginAnimControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMAT_BeginAnimControl, &MAT_BeginAnimControl_Parms, NULL );

	pFnMAT_BeginAnimControl->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceable.OverrideUseCase
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  UseCase                        ( CPF_Parm )

void ABioArtPlaceable::OverrideUseCase ( unsigned char UseCase )
{
	static UFunction* pFnOverrideUseCase = NULL;

	if ( ! pFnOverrideUseCase )
		pFnOverrideUseCase = (UFunction*) UObject::GObjObjects()->Data[ 31609 ];

	ABioArtPlaceable_execOverrideUseCase_Parms OverrideUseCase_Parms;
	OverrideUseCase_Parms.UseCase = UseCase;

	pFnOverrideUseCase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOverrideUseCase, &OverrideUseCase_Parms, NULL );

	pFnOverrideUseCase->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceable.AddProximityTimer
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioArtPlaceable::AddProximityTimer ( )
{
	static UFunction* pFnAddProximityTimer = NULL;

	if ( ! pFnAddProximityTimer )
		pFnAddProximityTimer = (UFunction*) UObject::GObjObjects()->Data[ 31608 ];

	ABioArtPlaceable_execAddProximityTimer_Parms AddProximityTimer_Parms;

	pFnAddProximityTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddProximityTimer, &AddProximityTimer_Parms, NULL );

	pFnAddProximityTimer->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceable.BioDoProximityCheck
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioArtPlaceable::BioDoProximityCheck ( )
{
	static UFunction* pFnBioDoProximityCheck = NULL;

	if ( ! pFnBioDoProximityCheck )
		pFnBioDoProximityCheck = (UFunction*) UObject::GObjObjects()->Data[ 31606 ];

	ABioArtPlaceable_execBioDoProximityCheck_Parms BioDoProximityCheck_Parms;

	pFnBioDoProximityCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioDoProximityCheck, &BioDoProximityCheck_Parms, NULL );

	pFnBioDoProximityCheck->FunctionFlags |= 0x400;

	return BioDoProximityCheck_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceable.TermRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioArtPlaceable::TermRagdoll ( )
{
	static UFunction* pFnTermRagdoll = NULL;

	if ( ! pFnTermRagdoll )
		pFnTermRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 31605 ];

	ABioArtPlaceable_execTermRagdoll_Parms TermRagdoll_Parms;

	pFnTermRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermRagdoll, &TermRagdoll_Parms, NULL );

	pFnTermRagdoll->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceable.InitRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioArtPlaceable::InitRagdoll ( )
{
	static UFunction* pFnInitRagdoll = NULL;

	if ( ! pFnInitRagdoll )
		pFnInitRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 31604 ];

	ABioArtPlaceable_execInitRagdoll_Parms InitRagdoll_Parms;

	pFnInitRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitRagdoll, &InitRagdoll_Parms, NULL );

	pFnInitRagdoll->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceable.UpdateWpPointPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioArtPlaceable::UpdateWpPointPosition ( )
{
	static UFunction* pFnUpdateWpPointPosition = NULL;

	if ( ! pFnUpdateWpPointPosition )
		pFnUpdateWpPointPosition = (UFunction*) UObject::GObjObjects()->Data[ 31603 ];

	ABioArtPlaceable_execUpdateWpPointPosition_Parms UpdateWpPointPosition_Parms;

	pFnUpdateWpPointPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateWpPointPosition, &UpdateWpPointPosition_Parms, NULL );

	pFnUpdateWpPointPosition->FunctionFlags |= 0x400;
};

// Function SFXGame.BioArtPlaceable.SetActionStationWP
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        oWP                            ( CPF_Parm )
// struct FName                   nmSocket                       ( CPF_Parm )

void ABioArtPlaceable::SetActionStationWP ( class ANavigationPoint* oWP, struct FName nmSocket )
{
	static UFunction* pFnSetActionStationWP = NULL;

	if ( ! pFnSetActionStationWP )
		pFnSetActionStationWP = (UFunction*) UObject::GObjObjects()->Data[ 31600 ];

	ABioArtPlaceable_execSetActionStationWP_Parms SetActionStationWP_Parms;
	SetActionStationWP_Parms.oWP = oWP;
	memcpy ( &SetActionStationWP_Parms.nmSocket, &nmSocket, 0x8 );

	pFnSetActionStationWP->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActionStationWP, &SetActionStationWP_Parms, NULL );

	pFnSetActionStationWP->FunctionFlags |= 0x400;
};

// Function SFXGame.BioDoor.CalcDistanceFromDoorPlane
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vWorldLocation                 ( CPF_Const | CPF_Parm | CPF_OutParm )

float ABioDoor::CalcDistanceFromDoorPlane ( struct FVector* vWorldLocation )
{
	static UFunction* pFnCalcDistanceFromDoorPlane = NULL;

	if ( ! pFnCalcDistanceFromDoorPlane )
		pFnCalcDistanceFromDoorPlane = (UFunction*) UObject::GObjObjects()->Data[ 35504 ];

	ABioDoor_execCalcDistanceFromDoorPlane_Parms CalcDistanceFromDoorPlane_Parms;

	pFnCalcDistanceFromDoorPlane->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcDistanceFromDoorPlane, &CalcDistanceFromDoorPlane_Parms, NULL );

	pFnCalcDistanceFromDoorPlane->FunctionFlags |= 0x400;

	if ( vWorldLocation )
		memcpy ( vWorldLocation, &CalcDistanceFromDoorPlane_Parms.vWorldLocation, 0xC );

	return CalcDistanceFromDoorPlane_Parms.ReturnValue;
};

// Function SFXGame.BioDoor.BioDoProximityCheck
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioDoor::BioDoProximityCheck ( )
{
	static UFunction* pFnBioDoProximityCheck = NULL;

	if ( ! pFnBioDoProximityCheck )
		pFnBioDoProximityCheck = (UFunction*) UObject::GObjObjects()->Data[ 35502 ];

	ABioDoor_execBioDoProximityCheck_Parms BioDoProximityCheck_Parms;

	pFnBioDoProximityCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioDoProximityCheck, &BioDoProximityCheck_Parms, NULL );

	pFnBioDoProximityCheck->FunctionFlags |= 0x400;

	return BioDoProximityCheck_Parms.ReturnValue;
};

// Function SFXGame.BioProjectile.ProcessPhysicsTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  oOther                         ( CPF_Parm )
// struct FVector                 vHitLocation                   ( CPF_Parm )
// struct FVector                 vHitNormal                     ( CPF_Parm )

void ABioProjectile::eventProcessPhysicsTouch ( class AActor* oOther, struct FVector vHitLocation, struct FVector vHitNormal )
{
	static UFunction* pFnProcessPhysicsTouch = NULL;

	if ( ! pFnProcessPhysicsTouch )
		pFnProcessPhysicsTouch = (UFunction*) UObject::GObjObjects()->Data[ 43566 ];

	ABioProjectile_eventProcessPhysicsTouch_Parms ProcessPhysicsTouch_Parms;
	ProcessPhysicsTouch_Parms.oOther = oOther;
	memcpy ( &ProcessPhysicsTouch_Parms.vHitLocation, &vHitLocation, 0xC );
	memcpy ( &ProcessPhysicsTouch_Parms.vHitNormal, &vHitNormal, 0xC );

	this->ProcessEvent ( pFnProcessPhysicsTouch, &ProcessPhysicsTouch_Parms, NULL );
};

// Function SFXGame.BioProjectile.ProcessTouch
// [0x00820102] 
// Parameters infos:
// class AActor*                  oOther                         ( CPF_Parm )
// struct FVector                 vHitLocation                   ( CPF_Parm )
// struct FVector                 vHitNormal                     ( CPF_Parm )

void ABioProjectile::ProcessTouch ( class AActor* oOther, struct FVector vHitLocation, struct FVector vHitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 43560 ];

	ABioProjectile_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.oOther = oOther;
	memcpy ( &ProcessTouch_Parms.vHitLocation, &vHitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.vHitNormal, &vHitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function SFXGame.BioProjectile.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 vHitLocation                   ( CPF_Parm )
// struct FVector                 vHitNormal                     ( CPF_Parm )

void ABioProjectile::Explode ( struct FVector vHitLocation, struct FVector vHitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 43553 ];

	ABioProjectile_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.vHitLocation, &vHitLocation, 0xC );
	memcpy ( &Explode_Parms.vHitNormal, &vHitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function SFXGame.BioProjectile.IsValidTarget
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool ABioProjectile::IsValidTarget ( class AActor* oActor )
{
	static UFunction* pFnIsValidTarget = NULL;

	if ( ! pFnIsValidTarget )
		pFnIsValidTarget = (UFunction*) UObject::GObjObjects()->Data[ 43550 ];

	ABioProjectile_execIsValidTarget_Parms IsValidTarget_Parms;
	IsValidTarget_Parms.oActor = oActor;

	pFnIsValidTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidTarget, &IsValidTarget_Parms, NULL );

	pFnIsValidTarget->FunctionFlags |= 0x400;

	return IsValidTarget_Parms.ReturnValue;
};

// Function SFXGame.BioMapNote.ShowMapNote
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bAreaMap                       ( CPF_Parm )

bool ABioMapNote::ShowMapNote ( unsigned long bAreaMap )
{
	static UFunction* pFnShowMapNote = NULL;

	if ( ! pFnShowMapNote )
		pFnShowMapNote = (UFunction*) UObject::GObjObjects()->Data[ 38506 ];

	ABioMapNote_execShowMapNote_Parms ShowMapNote_Parms;
	ShowMapNote_Parms.bAreaMap = bAreaMap;

	pFnShowMapNote->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowMapNote, &ShowMapNote_Parms, NULL );

	pFnShowMapNote->FunctionFlags |= 0x400;

	return ShowMapNote_Parms.ReturnValue;
};

// Function SFXGame.BioPathPoint.DoReachedWaypointEvent
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )

bool ABioPathPoint::DoReachedWaypointEvent ( class ABioPawn* oPawn )
{
	static UFunction* pFnDoReachedWaypointEvent = NULL;

	if ( ! pFnDoReachedWaypointEvent )
		pFnDoReachedWaypointEvent = (UFunction*) UObject::GObjObjects()->Data[ 38961 ];

	ABioPathPoint_execDoReachedWaypointEvent_Parms DoReachedWaypointEvent_Parms;
	DoReachedWaypointEvent_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnDoReachedWaypointEvent, &DoReachedWaypointEvent_Parms, NULL );

	return DoReachedWaypointEvent_Parms.ReturnValue;
};

// Function SFXGame.BioPathPoint.OnCreatureReachedWayPoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   PathFindingCreature            ( CPF_Parm )

bool ABioPathPoint::OnCreatureReachedWayPoint ( class APawn* PathFindingCreature )
{
	static UFunction* pFnOnCreatureReachedWayPoint = NULL;

	if ( ! pFnOnCreatureReachedWayPoint )
		pFnOnCreatureReachedWayPoint = (UFunction*) UObject::GObjObjects()->Data[ 38958 ];

	ABioPathPoint_execOnCreatureReachedWayPoint_Parms OnCreatureReachedWayPoint_Parms;
	OnCreatureReachedWayPoint_Parms.PathFindingCreature = PathFindingCreature;

	this->ProcessEvent ( pFnOnCreatureReachedWayPoint, &OnCreatureReachedWayPoint_Parms, NULL );

	return OnCreatureReachedWayPoint_Parms.ReturnValue;
};

// Function SFXGame.BioWaypointSet.GetWaypoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ANavigationPoint*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIdx                           ( CPF_Parm )

class ANavigationPoint* ABioWaypointSet::GetWaypoint ( int nIdx )
{
	static UFunction* pFnGetWaypoint = NULL;

	if ( ! pFnGetWaypoint )
		pFnGetWaypoint = (UFunction*) UObject::GObjObjects()->Data[ 51000 ];

	ABioWaypointSet_execGetWaypoint_Parms GetWaypoint_Parms;
	GetWaypoint_Parms.nIdx = nIdx;

	pFnGetWaypoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWaypoint, &GetWaypoint_Parms, NULL );

	pFnGetWaypoint->FunctionFlags |= 0x400;

	return GetWaypoint_Parms.ReturnValue;
};

// Function SFXGame.BioWaypointSet.FindNearestPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vLoc                           ( CPF_Parm )

int ABioWaypointSet::FindNearestPoint ( struct FVector vLoc )
{
	static UFunction* pFnFindNearestPoint = NULL;

	if ( ! pFnFindNearestPoint )
		pFnFindNearestPoint = (UFunction*) UObject::GObjObjects()->Data[ 50997 ];

	ABioWaypointSet_execFindNearestPoint_Parms FindNearestPoint_Parms;
	memcpy ( &FindNearestPoint_Parms.vLoc, &vLoc, 0xC );

	pFnFindNearestPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindNearestPoint, &FindNearestPoint_Parms, NULL );

	pFnFindNearestPoint->FunctionFlags |= 0x400;

	return FindNearestPoint_Parms.ReturnValue;
};

// Function SFXGame.BioWp_ActionStation.OnCreatureReachedWayPoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   PathFindingCreature            ( CPF_Parm )

bool ABioWp_ActionStation::OnCreatureReachedWayPoint ( class APawn* PathFindingCreature )
{
	static UFunction* pFnOnCreatureReachedWayPoint = NULL;

	if ( ! pFnOnCreatureReachedWayPoint )
		pFnOnCreatureReachedWayPoint = (UFunction*) UObject::GObjObjects()->Data[ 51424 ];

	ABioWp_ActionStation_execOnCreatureReachedWayPoint_Parms OnCreatureReachedWayPoint_Parms;
	OnCreatureReachedWayPoint_Parms.PathFindingCreature = PathFindingCreature;

	this->ProcessEvent ( pFnOnCreatureReachedWayPoint, &OnCreatureReachedWayPoint_Parms, NULL );

	return OnCreatureReachedWayPoint_Parms.ReturnValue;
};

// Function SFXGame.BioWp_DoorMarker.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ABioWp_DoorMarker::eventSuggestMovePreparation ( class APawn* Other )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = (UFunction*) UObject::GObjObjects()->Data[ 51482 ];

	ABioWp_DoorMarker_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;
	SuggestMovePreparation_Parms.Other = Other;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );

	return SuggestMovePreparation_Parms.ReturnValue;
};

// Function SFXGame.BioWp_DoorMarker.ProceedWithMove
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ABioWp_DoorMarker::ProceedWithMove ( class APawn* Other )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = (UFunction*) UObject::GObjObjects()->Data[ 51479 ];

	ABioWp_DoorMarker_execProceedWithMove_Parms ProceedWithMove_Parms;
	ProceedWithMove_Parms.Other = Other;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );

	return ProceedWithMove_Parms.ReturnValue;
};

// Function SFXGame.BioWp_DoorMarker.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

class AActor* ABioWp_DoorMarker::eventSpecialHandling ( class APawn* Other )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = (UFunction*) UObject::GObjObjects()->Data[ 51476 ];

	ABioWp_DoorMarker_eventSpecialHandling_Parms SpecialHandling_Parms;
	SpecialHandling_Parms.Other = Other;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );

	return SpecialHandling_Parms.ReturnValue;
};

// Function SFXGame.BioWp_DoorMarker.IsDoorClosed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioWp_DoorMarker::IsDoorClosed ( )
{
	static UFunction* pFnIsDoorClosed = NULL;

	if ( ! pFnIsDoorClosed )
		pFnIsDoorClosed = (UFunction*) UObject::GObjObjects()->Data[ 51474 ];

	ABioWp_DoorMarker_execIsDoorClosed_Parms IsDoorClosed_Parms;

	pFnIsDoorClosed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDoorClosed, &IsDoorClosed_Parms, NULL );

	pFnIsDoorClosed->FunctionFlags |= 0x400;

	return IsDoorClosed_Parms.ReturnValue;
};

// Function SFXGame.BioWp_DoorMarker.IsDoorOpen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioWp_DoorMarker::IsDoorOpen ( )
{
	static UFunction* pFnIsDoorOpen = NULL;

	if ( ! pFnIsDoorOpen )
		pFnIsDoorOpen = (UFunction*) UObject::GObjObjects()->Data[ 51472 ];

	ABioWp_DoorMarker_execIsDoorOpen_Parms IsDoorOpen_Parms;

	pFnIsDoorOpen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDoorOpen, &IsDoorOpen_Parms, NULL );

	pFnIsDoorOpen->FunctionFlags |= 0x400;

	return IsDoorOpen_Parms.ReturnValue;
};

// Function SFXGame.BioAttributeMapper.GetAttributes
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioAttributes*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oSrc                           ( CPF_Parm )
// unsigned char                  eType                          ( CPF_Parm )

class UBioAttributes* UBioAttributeMapper::GetAttributes ( class UObject* oSrc, unsigned char eType )
{
	static UFunction* pFnGetAttributes = NULL;

	if ( ! pFnGetAttributes )
		pFnGetAttributes = (UFunction*) UObject::GObjObjects()->Data[ 31801 ];

	UBioAttributeMapper_execGetAttributes_Parms GetAttributes_Parms;
	GetAttributes_Parms.oSrc = oSrc;
	GetAttributes_Parms.eType = eType;

	pFnGetAttributes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAttributes, &GetAttributes_Parms, NULL );

	pFnGetAttributes->FunctionFlags |= 0x400;

	return GetAttributes_Parms.ReturnValue;
};

// Function SFXGame.BioAttributes.IntToString
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FBioComplexIntStructAttribute attribute                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FString UBioAttributes::IntToString ( struct FBioComplexIntStructAttribute* attribute )
{
	static UFunction* pFnIntToString = NULL;

	if ( ! pFnIntToString )
		pFnIntToString = (UFunction*) UObject::GObjObjects()->Data[ 31934 ];

	UBioAttributes_execIntToString_Parms IntToString_Parms;

	pFnIntToString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIntToString, &IntToString_Parms, NULL );

	pFnIntToString->FunctionFlags |= 0x400;

	if ( attribute )
		memcpy ( attribute, &IntToString_Parms.attribute, 0x74 );

	return IntToString_Parms.ReturnValue;
};

// Function SFXGame.BioAttributes.GetBaseIntValue
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBioComplexIntStructAttribute attribute                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UBioAttributes::GetBaseIntValue ( struct FBioComplexIntStructAttribute* attribute )
{
	static UFunction* pFnGetBaseIntValue = NULL;

	if ( ! pFnGetBaseIntValue )
		pFnGetBaseIntValue = (UFunction*) UObject::GObjObjects()->Data[ 31931 ];

	UBioAttributes_execGetBaseIntValue_Parms GetBaseIntValue_Parms;

	pFnGetBaseIntValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBaseIntValue, &GetBaseIntValue_Parms, NULL );

	pFnGetBaseIntValue->FunctionFlags |= 0x400;

	if ( attribute )
		memcpy ( attribute, &GetBaseIntValue_Parms.attribute, 0x74 );

	return GetBaseIntValue_Parms.ReturnValue;
};

// Function SFXGame.BioAttributes.SetBaseIntValue
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            baseValue                      ( CPF_Parm )
// struct FBioComplexIntStructAttribute attribute                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioAttributes::SetBaseIntValue ( int baseValue, struct FBioComplexIntStructAttribute* attribute )
{
	static UFunction* pFnSetBaseIntValue = NULL;

	if ( ! pFnSetBaseIntValue )
		pFnSetBaseIntValue = (UFunction*) UObject::GObjObjects()->Data[ 31928 ];

	UBioAttributes_execSetBaseIntValue_Parms SetBaseIntValue_Parms;
	SetBaseIntValue_Parms.baseValue = baseValue;

	pFnSetBaseIntValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBaseIntValue, &SetBaseIntValue_Parms, NULL );

	pFnSetBaseIntValue->FunctionFlags |= 0x400;

	if ( attribute )
		memcpy ( attribute, &SetBaseIntValue_Parms.attribute, 0x74 );
};

// Function SFXGame.BioAttributes.GetCurrentIntValue
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBioComplexIntStructAttribute attribute                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int UBioAttributes::GetCurrentIntValue ( struct FBioComplexIntStructAttribute* attribute )
{
	static UFunction* pFnGetCurrentIntValue = NULL;

	if ( ! pFnGetCurrentIntValue )
		pFnGetCurrentIntValue = (UFunction*) UObject::GObjObjects()->Data[ 31925 ];

	UBioAttributes_execGetCurrentIntValue_Parms GetCurrentIntValue_Parms;

	pFnGetCurrentIntValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentIntValue, &GetCurrentIntValue_Parms, NULL );

	pFnGetCurrentIntValue->FunctionFlags |= 0x400;

	if ( attribute )
		memcpy ( attribute, &GetCurrentIntValue_Parms.attribute, 0x74 );

	return GetCurrentIntValue_Parms.ReturnValue;
};

// Function SFXGame.BioAttributes.FloatToString
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FBioComplexFloatStructAttribute attribute                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FString UBioAttributes::FloatToString ( struct FBioComplexFloatStructAttribute* attribute )
{
	static UFunction* pFnFloatToString = NULL;

	if ( ! pFnFloatToString )
		pFnFloatToString = (UFunction*) UObject::GObjObjects()->Data[ 31922 ];

	UBioAttributes_execFloatToString_Parms FloatToString_Parms;

	pFnFloatToString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFloatToString, &FloatToString_Parms, NULL );

	pFnFloatToString->FunctionFlags |= 0x400;

	if ( attribute )
		memcpy ( attribute, &FloatToString_Parms.attribute, 0x5C );

	return FloatToString_Parms.ReturnValue;
};

// Function SFXGame.BioAttributes.GetBaseFloatValue
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBioComplexFloatStructAttribute attribute                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

float UBioAttributes::GetBaseFloatValue ( struct FBioComplexFloatStructAttribute* attribute )
{
	static UFunction* pFnGetBaseFloatValue = NULL;

	if ( ! pFnGetBaseFloatValue )
		pFnGetBaseFloatValue = (UFunction*) UObject::GObjObjects()->Data[ 31919 ];

	UBioAttributes_execGetBaseFloatValue_Parms GetBaseFloatValue_Parms;

	pFnGetBaseFloatValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBaseFloatValue, &GetBaseFloatValue_Parms, NULL );

	pFnGetBaseFloatValue->FunctionFlags |= 0x400;

	if ( attribute )
		memcpy ( attribute, &GetBaseFloatValue_Parms.attribute, 0x5C );

	return GetBaseFloatValue_Parms.ReturnValue;
};

// Function SFXGame.BioAttributes.SetBaseFloatValue
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          baseValue                      ( CPF_Parm )
// struct FBioComplexFloatStructAttribute attribute                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioAttributes::SetBaseFloatValue ( float baseValue, struct FBioComplexFloatStructAttribute* attribute )
{
	static UFunction* pFnSetBaseFloatValue = NULL;

	if ( ! pFnSetBaseFloatValue )
		pFnSetBaseFloatValue = (UFunction*) UObject::GObjObjects()->Data[ 31916 ];

	UBioAttributes_execSetBaseFloatValue_Parms SetBaseFloatValue_Parms;
	SetBaseFloatValue_Parms.baseValue = baseValue;

	pFnSetBaseFloatValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBaseFloatValue, &SetBaseFloatValue_Parms, NULL );

	pFnSetBaseFloatValue->FunctionFlags |= 0x400;

	if ( attribute )
		memcpy ( attribute, &SetBaseFloatValue_Parms.attribute, 0x5C );
};

// Function SFXGame.BioAttributes.GetCurrentFloatValue
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBioComplexFloatStructAttribute attribute                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

float UBioAttributes::GetCurrentFloatValue ( struct FBioComplexFloatStructAttribute* attribute )
{
	static UFunction* pFnGetCurrentFloatValue = NULL;

	if ( ! pFnGetCurrentFloatValue )
		pFnGetCurrentFloatValue = (UFunction*) UObject::GObjObjects()->Data[ 31913 ];

	UBioAttributes_execGetCurrentFloatValue_Parms GetCurrentFloatValue_Parms;

	pFnGetCurrentFloatValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentFloatValue, &GetCurrentFloatValue_Parms, NULL );

	pFnGetCurrentFloatValue->FunctionFlags |= 0x400;

	if ( attribute )
		memcpy ( attribute, &GetCurrentFloatValue_Parms.attribute, 0x5C );

	return GetCurrentFloatValue_Parms.ReturnValue;
};

// Function SFXGame.BioAttributes.ClearStringAttribute
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmAttribute                    ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::ClearStringAttribute ( struct FName nmAttribute, int nIndexOfAttributeInArray )
{
	static UFunction* pFnClearStringAttribute = NULL;

	if ( ! pFnClearStringAttribute )
		pFnClearStringAttribute = (UFunction*) UObject::GObjObjects()->Data[ 31910 ];

	UBioAttributes_execClearStringAttribute_Parms ClearStringAttribute_Parms;
	memcpy ( &ClearStringAttribute_Parms.nmAttribute, &nmAttribute, 0x8 );
	ClearStringAttribute_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnClearStringAttribute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearStringAttribute, &ClearStringAttribute_Parms, NULL );

	pFnClearStringAttribute->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.RemoveFloatAttributeBaseOverrideModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// int                            nIndexOfOverride               ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::RemoveFloatAttributeBaseOverrideModifier ( struct FName attribute, int nIndexOfOverride, int nIndexOfAttributeInArray )
{
	static UFunction* pFnRemoveFloatAttributeBaseOverrideModifier = NULL;

	if ( ! pFnRemoveFloatAttributeBaseOverrideModifier )
		pFnRemoveFloatAttributeBaseOverrideModifier = (UFunction*) UObject::GObjObjects()->Data[ 31906 ];

	UBioAttributes_execRemoveFloatAttributeBaseOverrideModifier_Parms RemoveFloatAttributeBaseOverrideModifier_Parms;
	memcpy ( &RemoveFloatAttributeBaseOverrideModifier_Parms.attribute, &attribute, 0x8 );
	RemoveFloatAttributeBaseOverrideModifier_Parms.nIndexOfOverride = nIndexOfOverride;
	RemoveFloatAttributeBaseOverrideModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnRemoveFloatAttributeBaseOverrideModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveFloatAttributeBaseOverrideModifier, &RemoveFloatAttributeBaseOverrideModifier_Parms, NULL );

	pFnRemoveFloatAttributeBaseOverrideModifier->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.RemoveIntAttributeBaseOverrideModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// int                            nIndexOfOverride               ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::RemoveIntAttributeBaseOverrideModifier ( struct FName attribute, int nIndexOfOverride, int nIndexOfAttributeInArray )
{
	static UFunction* pFnRemoveIntAttributeBaseOverrideModifier = NULL;

	if ( ! pFnRemoveIntAttributeBaseOverrideModifier )
		pFnRemoveIntAttributeBaseOverrideModifier = (UFunction*) UObject::GObjObjects()->Data[ 31902 ];

	UBioAttributes_execRemoveIntAttributeBaseOverrideModifier_Parms RemoveIntAttributeBaseOverrideModifier_Parms;
	memcpy ( &RemoveIntAttributeBaseOverrideModifier_Parms.attribute, &attribute, 0x8 );
	RemoveIntAttributeBaseOverrideModifier_Parms.nIndexOfOverride = nIndexOfOverride;
	RemoveIntAttributeBaseOverrideModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnRemoveIntAttributeBaseOverrideModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveIntAttributeBaseOverrideModifier, &RemoveIntAttributeBaseOverrideModifier_Parms, NULL );

	pFnRemoveIntAttributeBaseOverrideModifier->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.RemoveFloatAttributeModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// unsigned char                  modType                        ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::RemoveFloatAttributeModifier ( struct FName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnRemoveFloatAttributeModifier = NULL;

	if ( ! pFnRemoveFloatAttributeModifier )
		pFnRemoveFloatAttributeModifier = (UFunction*) UObject::GObjObjects()->Data[ 31897 ];

	UBioAttributes_execRemoveFloatAttributeModifier_Parms RemoveFloatAttributeModifier_Parms;
	memcpy ( &RemoveFloatAttributeModifier_Parms.attribute, &attribute, 0x8 );
	RemoveFloatAttributeModifier_Parms.modType = modType;
	RemoveFloatAttributeModifier_Parms.fValue = fValue;
	RemoveFloatAttributeModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnRemoveFloatAttributeModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveFloatAttributeModifier, &RemoveFloatAttributeModifier_Parms, NULL );

	pFnRemoveFloatAttributeModifier->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.RemoveIntAttributeModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// unsigned char                  modType                        ( CPF_Parm )
// int                            nValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::RemoveIntAttributeModifier ( struct FName attribute, unsigned char modType, int nValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnRemoveIntAttributeModifier = NULL;

	if ( ! pFnRemoveIntAttributeModifier )
		pFnRemoveIntAttributeModifier = (UFunction*) UObject::GObjObjects()->Data[ 31892 ];

	UBioAttributes_execRemoveIntAttributeModifier_Parms RemoveIntAttributeModifier_Parms;
	memcpy ( &RemoveIntAttributeModifier_Parms.attribute, &attribute, 0x8 );
	RemoveIntAttributeModifier_Parms.modType = modType;
	RemoveIntAttributeModifier_Parms.nValue = nValue;
	RemoveIntAttributeModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnRemoveIntAttributeModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveIntAttributeModifier, &RemoveIntAttributeModifier_Parms, NULL );

	pFnRemoveIntAttributeModifier->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.AddFloatAttributeBaseOverrideModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   attribute                      ( CPF_Parm )
// float                          Value                          ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

int UBioAttributes::AddFloatAttributeBaseOverrideModifier ( struct FName attribute, float Value, int nIndexOfAttributeInArray )
{
	static UFunction* pFnAddFloatAttributeBaseOverrideModifier = NULL;

	if ( ! pFnAddFloatAttributeBaseOverrideModifier )
		pFnAddFloatAttributeBaseOverrideModifier = (UFunction*) UObject::GObjObjects()->Data[ 31887 ];

	UBioAttributes_execAddFloatAttributeBaseOverrideModifier_Parms AddFloatAttributeBaseOverrideModifier_Parms;
	memcpy ( &AddFloatAttributeBaseOverrideModifier_Parms.attribute, &attribute, 0x8 );
	AddFloatAttributeBaseOverrideModifier_Parms.Value = Value;
	AddFloatAttributeBaseOverrideModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnAddFloatAttributeBaseOverrideModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddFloatAttributeBaseOverrideModifier, &AddFloatAttributeBaseOverrideModifier_Parms, NULL );

	pFnAddFloatAttributeBaseOverrideModifier->FunctionFlags |= 0x400;

	return AddFloatAttributeBaseOverrideModifier_Parms.ReturnValue;
};

// Function SFXGame.BioAttributes.AddIntAttributeBaseOverrideModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   attribute                      ( CPF_Parm )
// int                            Value                          ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

int UBioAttributes::AddIntAttributeBaseOverrideModifier ( struct FName attribute, int Value, int nIndexOfAttributeInArray )
{
	static UFunction* pFnAddIntAttributeBaseOverrideModifier = NULL;

	if ( ! pFnAddIntAttributeBaseOverrideModifier )
		pFnAddIntAttributeBaseOverrideModifier = (UFunction*) UObject::GObjObjects()->Data[ 31882 ];

	UBioAttributes_execAddIntAttributeBaseOverrideModifier_Parms AddIntAttributeBaseOverrideModifier_Parms;
	memcpy ( &AddIntAttributeBaseOverrideModifier_Parms.attribute, &attribute, 0x8 );
	AddIntAttributeBaseOverrideModifier_Parms.Value = Value;
	AddIntAttributeBaseOverrideModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnAddIntAttributeBaseOverrideModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddIntAttributeBaseOverrideModifier, &AddIntAttributeBaseOverrideModifier_Parms, NULL );

	pFnAddIntAttributeBaseOverrideModifier->FunctionFlags |= 0x400;

	return AddIntAttributeBaseOverrideModifier_Parms.ReturnValue;
};

// Function SFXGame.BioAttributes.AddFloatAttributeModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// unsigned char                  modType                        ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::AddFloatAttributeModifier ( struct FName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnAddFloatAttributeModifier = NULL;

	if ( ! pFnAddFloatAttributeModifier )
		pFnAddFloatAttributeModifier = (UFunction*) UObject::GObjObjects()->Data[ 31877 ];

	UBioAttributes_execAddFloatAttributeModifier_Parms AddFloatAttributeModifier_Parms;
	memcpy ( &AddFloatAttributeModifier_Parms.attribute, &attribute, 0x8 );
	AddFloatAttributeModifier_Parms.modType = modType;
	AddFloatAttributeModifier_Parms.fValue = fValue;
	AddFloatAttributeModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnAddFloatAttributeModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddFloatAttributeModifier, &AddFloatAttributeModifier_Parms, NULL );

	pFnAddFloatAttributeModifier->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.AddIntAttributeModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// unsigned char                  modType                        ( CPF_Parm )
// int                            nValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::AddIntAttributeModifier ( struct FName attribute, unsigned char modType, int nValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnAddIntAttributeModifier = NULL;

	if ( ! pFnAddIntAttributeModifier )
		pFnAddIntAttributeModifier = (UFunction*) UObject::GObjObjects()->Data[ 31872 ];

	UBioAttributes_execAddIntAttributeModifier_Parms AddIntAttributeModifier_Parms;
	memcpy ( &AddIntAttributeModifier_Parms.attribute, &attribute, 0x8 );
	AddIntAttributeModifier_Parms.modType = modType;
	AddIntAttributeModifier_Parms.nValue = nValue;
	AddIntAttributeModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnAddIntAttributeModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddIntAttributeModifier, &AddIntAttributeModifier_Parms, NULL );

	pFnAddIntAttributeModifier->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.SetNameAttribute
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// struct FName                   nmValue                        ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::SetNameAttribute ( struct FName attribute, struct FName nmValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnSetNameAttribute = NULL;

	if ( ! pFnSetNameAttribute )
		pFnSetNameAttribute = (UFunction*) UObject::GObjObjects()->Data[ 31868 ];

	UBioAttributes_execSetNameAttribute_Parms SetNameAttribute_Parms;
	memcpy ( &SetNameAttribute_Parms.attribute, &attribute, 0x8 );
	memcpy ( &SetNameAttribute_Parms.nmValue, &nmValue, 0x8 );
	SetNameAttribute_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnSetNameAttribute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNameAttribute, &SetNameAttribute_Parms, NULL );

	pFnSetNameAttribute->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.SetBoolAttribute
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// unsigned long                  bValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::SetBoolAttribute ( struct FName attribute, unsigned long bValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnSetBoolAttribute = NULL;

	if ( ! pFnSetBoolAttribute )
		pFnSetBoolAttribute = (UFunction*) UObject::GObjObjects()->Data[ 31864 ];

	UBioAttributes_execSetBoolAttribute_Parms SetBoolAttribute_Parms;
	memcpy ( &SetBoolAttribute_Parms.attribute, &attribute, 0x8 );
	SetBoolAttribute_Parms.bValue = bValue;
	SetBoolAttribute_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnSetBoolAttribute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBoolAttribute, &SetBoolAttribute_Parms, NULL );

	pFnSetBoolAttribute->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.SetEnumAttribute
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmAttributeName                ( CPF_Parm )
// struct FString                 sValue                         ( CPF_Parm | CPF_NeedCtorLink )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::SetEnumAttribute ( struct FName nmAttributeName, struct FString sValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnSetEnumAttribute = NULL;

	if ( ! pFnSetEnumAttribute )
		pFnSetEnumAttribute = (UFunction*) UObject::GObjObjects()->Data[ 31860 ];

	UBioAttributes_execSetEnumAttribute_Parms SetEnumAttribute_Parms;
	memcpy ( &SetEnumAttribute_Parms.nmAttributeName, &nmAttributeName, 0x8 );
	memcpy ( &SetEnumAttribute_Parms.sValue, &sValue, 0xC );
	SetEnumAttribute_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnSetEnumAttribute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEnumAttribute, &SetEnumAttribute_Parms, NULL );

	pFnSetEnumAttribute->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.SetStringAttribute
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// struct FString                 sValue                         ( CPF_Parm | CPF_NeedCtorLink )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::SetStringAttribute ( struct FName attribute, struct FString sValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnSetStringAttribute = NULL;

	if ( ! pFnSetStringAttribute )
		pFnSetStringAttribute = (UFunction*) UObject::GObjObjects()->Data[ 31856 ];

	UBioAttributes_execSetStringAttribute_Parms SetStringAttribute_Parms;
	memcpy ( &SetStringAttribute_Parms.attribute, &attribute, 0x8 );
	memcpy ( &SetStringAttribute_Parms.sValue, &sValue, 0xC );
	SetStringAttribute_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnSetStringAttribute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetStringAttribute, &SetStringAttribute_Parms, NULL );

	pFnSetStringAttribute->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.SetByteAttribute
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// unsigned char                  cValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::SetByteAttribute ( struct FName attribute, unsigned char cValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnSetByteAttribute = NULL;

	if ( ! pFnSetByteAttribute )
		pFnSetByteAttribute = (UFunction*) UObject::GObjObjects()->Data[ 31852 ];

	UBioAttributes_execSetByteAttribute_Parms SetByteAttribute_Parms;
	memcpy ( &SetByteAttribute_Parms.attribute, &attribute, 0x8 );
	SetByteAttribute_Parms.cValue = cValue;
	SetByteAttribute_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnSetByteAttribute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetByteAttribute, &SetByteAttribute_Parms, NULL );

	pFnSetByteAttribute->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.SetFloatAttribute
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::SetFloatAttribute ( struct FName attribute, float fValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnSetFloatAttribute = NULL;

	if ( ! pFnSetFloatAttribute )
		pFnSetFloatAttribute = (UFunction*) UObject::GObjObjects()->Data[ 31848 ];

	UBioAttributes_execSetFloatAttribute_Parms SetFloatAttribute_Parms;
	memcpy ( &SetFloatAttribute_Parms.attribute, &attribute, 0x8 );
	SetFloatAttribute_Parms.fValue = fValue;
	SetFloatAttribute_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnSetFloatAttribute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatAttribute, &SetFloatAttribute_Parms, NULL );

	pFnSetFloatAttribute->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.SetIntAttribute
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// int                            nValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributes::SetIntAttribute ( struct FName attribute, int nValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnSetIntAttribute = NULL;

	if ( ! pFnSetIntAttribute )
		pFnSetIntAttribute = (UFunction*) UObject::GObjObjects()->Data[ 31844 ];

	UBioAttributes_execSetIntAttribute_Parms SetIntAttribute_Parms;
	memcpy ( &SetIntAttribute_Parms.attribute, &attribute, 0x8 );
	SetIntAttribute_Parms.nValue = nValue;
	SetIntAttribute_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnSetIntAttribute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntAttribute, &SetIntAttribute_Parms, NULL );

	pFnSetIntAttribute->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributes.EnsureInitialized
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioAttributes::EnsureInitialized ( )
{
	static UFunction* pFnEnsureInitialized = NULL;

	if ( ! pFnEnsureInitialized )
		pFnEnsureInitialized = (UFunction*) UObject::GObjObjects()->Data[ 31843 ];

	UBioAttributes_execEnsureInitialized_Parms EnsureInitialized_Parms;

	pFnEnsureInitialized->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnsureInitialized, &EnsureInitialized_Parms, NULL );

	pFnEnsureInitialized->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributesDamageComponent.RemoveFloatAttributeBaseOverrideModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// int                            nIndexOfOverride               ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributesDamageComponent::RemoveFloatAttributeBaseOverrideModifier ( struct FName attribute, int nIndexOfOverride, int nIndexOfAttributeInArray )
{
	static UFunction* pFnRemoveFloatAttributeBaseOverrideModifier = NULL;

	if ( ! pFnRemoveFloatAttributeBaseOverrideModifier )
		pFnRemoveFloatAttributeBaseOverrideModifier = (UFunction*) UObject::GObjObjects()->Data[ 31970 ];

	UBioAttributesDamageComponent_execRemoveFloatAttributeBaseOverrideModifier_Parms RemoveFloatAttributeBaseOverrideModifier_Parms;
	memcpy ( &RemoveFloatAttributeBaseOverrideModifier_Parms.attribute, &attribute, 0x8 );
	RemoveFloatAttributeBaseOverrideModifier_Parms.nIndexOfOverride = nIndexOfOverride;
	RemoveFloatAttributeBaseOverrideModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnRemoveFloatAttributeBaseOverrideModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveFloatAttributeBaseOverrideModifier, &RemoveFloatAttributeBaseOverrideModifier_Parms, NULL );

	pFnRemoveFloatAttributeBaseOverrideModifier->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributesDamageComponent.AddFloatAttributeBaseOverrideModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   attribute                      ( CPF_Parm )
// float                          Value                          ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

int UBioAttributesDamageComponent::AddFloatAttributeBaseOverrideModifier ( struct FName attribute, float Value, int nIndexOfAttributeInArray )
{
	static UFunction* pFnAddFloatAttributeBaseOverrideModifier = NULL;

	if ( ! pFnAddFloatAttributeBaseOverrideModifier )
		pFnAddFloatAttributeBaseOverrideModifier = (UFunction*) UObject::GObjObjects()->Data[ 31965 ];

	UBioAttributesDamageComponent_execAddFloatAttributeBaseOverrideModifier_Parms AddFloatAttributeBaseOverrideModifier_Parms;
	memcpy ( &AddFloatAttributeBaseOverrideModifier_Parms.attribute, &attribute, 0x8 );
	AddFloatAttributeBaseOverrideModifier_Parms.Value = Value;
	AddFloatAttributeBaseOverrideModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnAddFloatAttributeBaseOverrideModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddFloatAttributeBaseOverrideModifier, &AddFloatAttributeBaseOverrideModifier_Parms, NULL );

	pFnAddFloatAttributeBaseOverrideModifier->FunctionFlags |= 0x400;

	return AddFloatAttributeBaseOverrideModifier_Parms.ReturnValue;
};

// Function SFXGame.BioAttributesDamageComponent.RemoveFloatAttributeModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// unsigned char                  modType                        ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributesDamageComponent::RemoveFloatAttributeModifier ( struct FName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnRemoveFloatAttributeModifier = NULL;

	if ( ! pFnRemoveFloatAttributeModifier )
		pFnRemoveFloatAttributeModifier = (UFunction*) UObject::GObjObjects()->Data[ 31960 ];

	UBioAttributesDamageComponent_execRemoveFloatAttributeModifier_Parms RemoveFloatAttributeModifier_Parms;
	memcpy ( &RemoveFloatAttributeModifier_Parms.attribute, &attribute, 0x8 );
	RemoveFloatAttributeModifier_Parms.modType = modType;
	RemoveFloatAttributeModifier_Parms.fValue = fValue;
	RemoveFloatAttributeModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnRemoveFloatAttributeModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveFloatAttributeModifier, &RemoveFloatAttributeModifier_Parms, NULL );

	pFnRemoveFloatAttributeModifier->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributesDamageComponent.AddFloatAttributeModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// unsigned char                  modType                        ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributesDamageComponent::AddFloatAttributeModifier ( struct FName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnAddFloatAttributeModifier = NULL;

	if ( ! pFnAddFloatAttributeModifier )
		pFnAddFloatAttributeModifier = (UFunction*) UObject::GObjObjects()->Data[ 31955 ];

	UBioAttributesDamageComponent_execAddFloatAttributeModifier_Parms AddFloatAttributeModifier_Parms;
	memcpy ( &AddFloatAttributeModifier_Parms.attribute, &attribute, 0x8 );
	AddFloatAttributeModifier_Parms.modType = modType;
	AddFloatAttributeModifier_Parms.fValue = fValue;
	AddFloatAttributeModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnAddFloatAttributeModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddFloatAttributeModifier, &AddFloatAttributeModifier_Parms, NULL );

	pFnAddFloatAttributeModifier->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributesDamageComponent.SetFloatAttribute
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributesDamageComponent::SetFloatAttribute ( struct FName attribute, float fValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnSetFloatAttribute = NULL;

	if ( ! pFnSetFloatAttribute )
		pFnSetFloatAttribute = (UFunction*) UObject::GObjObjects()->Data[ 31951 ];

	UBioAttributesDamageComponent_execSetFloatAttribute_Parms SetFloatAttribute_Parms;
	memcpy ( &SetFloatAttribute_Parms.attribute, &attribute, 0x8 );
	SetFloatAttribute_Parms.fValue = fValue;
	SetFloatAttribute_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnSetFloatAttribute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatAttribute, &SetFloatAttribute_Parms, NULL );

	pFnSetFloatAttribute->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributesEpicPawn.GetName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioAttributesEpicPawn::GetName ( )
{
	static UFunction* pFnGetName = NULL;

	if ( ! pFnGetName )
		pFnGetName = (UFunction*) UObject::GObjObjects()->Data[ 31984 ];

	UBioAttributesEpicPawn_execGetName_Parms GetName_Parms;

	this->ProcessEvent ( pFnGetName, &GetName_Parms, NULL );

	return GetName_Parms.ReturnValue;
};

// Function SFXGame.BioAttributesEpicPawn.GetDesignedName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioAttributesEpicPawn::GetDesignedName ( )
{
	static UFunction* pFnGetDesignedName = NULL;

	if ( ! pFnGetDesignedName )
		pFnGetDesignedName = (UFunction*) UObject::GObjObjects()->Data[ 31982 ];

	UBioAttributesEpicPawn_execGetDesignedName_Parms GetDesignedName_Parms;

	pFnGetDesignedName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDesignedName, &GetDesignedName_Parms, NULL );

	pFnGetDesignedName->FunctionFlags |= 0x400;

	return GetDesignedName_Parms.ReturnValue;
};

// Function SFXGame.BioAttributesItem.DescribeAttributes
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioAttributesItem::eventDescribeAttributes ( )
{
	static UFunction* pFnDescribeAttributes = NULL;

	if ( ! pFnDescribeAttributes )
		pFnDescribeAttributes = (UFunction*) UObject::GObjObjects()->Data[ 31995 ];

	UBioAttributesItem_eventDescribeAttributes_Parms DescribeAttributes_Parms;

	this->ProcessEvent ( pFnDescribeAttributes, &DescribeAttributes_Parms, NULL );
};

// Function SFXGame.BioAttributesItemSophisticated.DescribeAttributes
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioAttributesItemSophisticated::eventDescribeAttributes ( )
{
	static UFunction* pFnDescribeAttributes = NULL;

	if ( ! pFnDescribeAttributes )
		pFnDescribeAttributes = (UFunction*) UObject::GObjObjects()->Data[ 31998 ];

	UBioAttributesItemSophisticated_eventDescribeAttributes_Parms DescribeAttributes_Parms;

	this->ProcessEvent ( pFnDescribeAttributes, &DescribeAttributes_Parms, NULL );
};

// Function SFXGame.BioAttributesItemEquippable.DescribeAttributes
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioAttributesItemEquippable::eventDescribeAttributes ( )
{
	static UFunction* pFnDescribeAttributes = NULL;

	if ( ! pFnDescribeAttributes )
		pFnDescribeAttributes = (UFunction*) UObject::GObjObjects()->Data[ 31999 ];

	UBioAttributesItemEquippable_eventDescribeAttributes_Parms DescribeAttributes_Parms;

	this->ProcessEvent ( pFnDescribeAttributes, &DescribeAttributes_Parms, NULL );
};

// Function SFXGame.BioAttributesItemXMod.DescribeAttributes
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioAttributesItemXMod::eventDescribeAttributes ( )
{
	static UFunction* pFnDescribeAttributes = NULL;

	if ( ! pFnDescribeAttributes )
		pFnDescribeAttributes = (UFunction*) UObject::GObjObjects()->Data[ 32022 ];

	UBioAttributesItemXMod_eventDescribeAttributes_Parms DescribeAttributes_Parms;

	this->ProcessEvent ( pFnDescribeAttributes, &DescribeAttributes_Parms, NULL );
};

// Function SFXGame.BioAttributesPawn.RemoveFloatAttributeModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// unsigned char                  modType                        ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributesPawn::RemoveFloatAttributeModifier ( struct FName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnRemoveFloatAttributeModifier = NULL;

	if ( ! pFnRemoveFloatAttributeModifier )
		pFnRemoveFloatAttributeModifier = (UFunction*) UObject::GObjObjects()->Data[ 32053 ];

	UBioAttributesPawn_execRemoveFloatAttributeModifier_Parms RemoveFloatAttributeModifier_Parms;
	memcpy ( &RemoveFloatAttributeModifier_Parms.attribute, &attribute, 0x8 );
	RemoveFloatAttributeModifier_Parms.modType = modType;
	RemoveFloatAttributeModifier_Parms.fValue = fValue;
	RemoveFloatAttributeModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnRemoveFloatAttributeModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveFloatAttributeModifier, &RemoveFloatAttributeModifier_Parms, NULL );

	pFnRemoveFloatAttributeModifier->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributesPawn.AddFloatAttributeModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// unsigned char                  modType                        ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributesPawn::AddFloatAttributeModifier ( struct FName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnAddFloatAttributeModifier = NULL;

	if ( ! pFnAddFloatAttributeModifier )
		pFnAddFloatAttributeModifier = (UFunction*) UObject::GObjObjects()->Data[ 32048 ];

	UBioAttributesPawn_execAddFloatAttributeModifier_Parms AddFloatAttributeModifier_Parms;
	memcpy ( &AddFloatAttributeModifier_Parms.attribute, &attribute, 0x8 );
	AddFloatAttributeModifier_Parms.modType = modType;
	AddFloatAttributeModifier_Parms.fValue = fValue;
	AddFloatAttributeModifier_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnAddFloatAttributeModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddFloatAttributeModifier, &AddFloatAttributeModifier_Parms, NULL );

	pFnAddFloatAttributeModifier->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributesPawn.SetFloatAttribute
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   attribute                      ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// int                            nIndexOfAttributeInArray       ( CPF_OptionalParm | CPF_Parm )

void UBioAttributesPawn::SetFloatAttribute ( struct FName attribute, float fValue, int nIndexOfAttributeInArray )
{
	static UFunction* pFnSetFloatAttribute = NULL;

	if ( ! pFnSetFloatAttribute )
		pFnSetFloatAttribute = (UFunction*) UObject::GObjObjects()->Data[ 32044 ];

	UBioAttributesPawn_execSetFloatAttribute_Parms SetFloatAttribute_Parms;
	memcpy ( &SetFloatAttribute_Parms.attribute, &attribute, 0x8 );
	SetFloatAttribute_Parms.fValue = fValue;
	SetFloatAttribute_Parms.nIndexOfAttributeInArray = nIndexOfAttributeInArray;

	pFnSetFloatAttribute->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatAttribute, &SetFloatAttribute_Parms, NULL );

	pFnSetFloatAttribute->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAttributesPawnParty.SetCombatAttributes
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDamageDurationMult            ( CPF_Parm )

void UBioAttributesPawnParty::SetCombatAttributes ( float fDamageDurationMult )
{
	static UFunction* pFnSetCombatAttributes = NULL;

	if ( ! pFnSetCombatAttributes )
		pFnSetCombatAttributes = (UFunction*) UObject::GObjObjects()->Data[ 32066 ];

	UBioAttributesPawnParty_execSetCombatAttributes_Parms SetCombatAttributes_Parms;
	SetCombatAttributes_Parms.fDamageDurationMult = fDamageDurationMult;

	pFnSetCombatAttributes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCombatAttributes, &SetCombatAttributes_Parms, NULL );

	pFnSetCombatAttributes->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPower.GetDifficultyCooldownMultiplier
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::eventGetDifficultyCooldownMultiplier ( )
{
	static UFunction* pFnGetDifficultyCooldownMultiplier = NULL;

	if ( ! pFnGetDifficultyCooldownMultiplier )
		pFnGetDifficultyCooldownMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 42921 ];

	UBioPower_eventGetDifficultyCooldownMultiplier_Parms GetDifficultyCooldownMultiplier_Parms;

	this->ProcessEvent ( pFnGetDifficultyCooldownMultiplier, &GetDifficultyCooldownMultiplier_Parms, NULL );

	return GetDifficultyCooldownMultiplier_Parms.ReturnValue;
};

// Function SFXGame.BioPower.ShouldDisplayInHUD
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPower::ShouldDisplayInHUD ( )
{
	static UFunction* pFnShouldDisplayInHUD = NULL;

	if ( ! pFnShouldDisplayInHUD )
		pFnShouldDisplayInHUD = (UFunction*) UObject::GObjObjects()->Data[ 42919 ];

	UBioPower_execShouldDisplayInHUD_Parms ShouldDisplayInHUD_Parms;

	pFnShouldDisplayInHUD->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldDisplayInHUD, &ShouldDisplayInHUD_Parms, NULL );

	pFnShouldDisplayInHUD->FunctionFlags |= 0x400;

	return ShouldDisplayInHUD_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetDescription
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sDescription                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioPower::GetDescription ( struct FString* sDescription )
{
	static UFunction* pFnGetDescription = NULL;

	if ( ! pFnGetDescription )
		pFnGetDescription = (UFunction*) UObject::GObjObjects()->Data[ 42916 ];

	UBioPower_execGetDescription_Parms GetDescription_Parms;

	pFnGetDescription->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDescription, &GetDescription_Parms, NULL );

	pFnGetDescription->FunctionFlags |= 0x400;

	if ( sDescription )
		memcpy ( sDescription, &GetDescription_Parms.sDescription, 0xC );

	return GetDescription_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetImpactText
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPower::GetImpactText ( )
{
	static UFunction* pFnGetImpactText = NULL;

	if ( ! pFnGetImpactText )
		pFnGetImpactText = (UFunction*) UObject::GObjObjects()->Data[ 42913 ];

	UBioPower_execGetImpactText_Parms GetImpactText_Parms;

	pFnGetImpactText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetImpactText, &GetImpactText_Parms, NULL );

	pFnGetImpactText->FunctionFlags |= 0x400;

	//if ( srImpactText )

	return GetImpactText_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetDisplayName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sDisplayName                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioPower::GetDisplayName ( struct FString* sDisplayName )
{
	static UFunction* pFnGetDisplayName = NULL;

	if ( ! pFnGetDisplayName )
		pFnGetDisplayName = (UFunction*) UObject::GObjObjects()->Data[ 42910 ];

	UBioPower_execGetDisplayName_Parms GetDisplayName_Parms;

	pFnGetDisplayName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDisplayName, &GetDisplayName_Parms, NULL );

	pFnGetDisplayName->FunctionFlags |= 0x400;

	if ( sDisplayName )
		memcpy ( sDisplayName, &GetDisplayName_Parms.sDisplayName, 0xC );

	return GetDisplayName_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetPowerIcon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioPower::GetPowerIcon ( )
{
	static UFunction* pFnGetPowerIcon = NULL;

	if ( ! pFnGetPowerIcon )
		pFnGetPowerIcon = (UFunction*) UObject::GObjObjects()->Data[ 42908 ];

	UBioPower_execGetPowerIcon_Parms GetPowerIcon_Parms;

	pFnGetPowerIcon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPowerIcon, &GetPowerIcon_Parms, NULL );

	pFnGetPowerIcon->FunctionFlags |= 0x400;

	return GetPowerIcon_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetImpactNoise
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetImpactNoise ( )
{
	static UFunction* pFnGetImpactNoise = NULL;

	if ( ! pFnGetImpactNoise )
		pFnGetImpactNoise = (UFunction*) UObject::GObjObjects()->Data[ 42906 ];

	UBioPower_execGetImpactNoise_Parms GetImpactNoise_Parms;

	pFnGetImpactNoise->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetImpactNoise, &GetImpactNoise_Parms, NULL );

	pFnGetImpactNoise->FunctionFlags |= 0x400;

	return GetImpactNoise_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetReleaseNoise
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetReleaseNoise ( )
{
	static UFunction* pFnGetReleaseNoise = NULL;

	if ( ! pFnGetReleaseNoise )
		pFnGetReleaseNoise = (UFunction*) UObject::GObjObjects()->Data[ 42904 ];

	UBioPower_execGetReleaseNoise_Parms GetReleaseNoise_Parms;

	pFnGetReleaseNoise->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReleaseNoise, &GetReleaseNoise_Parms, NULL );

	pFnGetReleaseNoise->FunctionFlags |= 0x400;

	return GetReleaseNoise_Parms.ReturnValue;
};

// Function SFXGame.BioPower.CancelPower
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPower::CancelPower ( )
{
	static UFunction* pFnCancelPower = NULL;

	if ( ! pFnCancelPower )
		pFnCancelPower = (UFunction*) UObject::GObjObjects()->Data[ 42902 ];

	UBioPower_execCancelPower_Parms CancelPower_Parms;

	pFnCancelPower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCancelPower, &CancelPower_Parms, NULL );

	pFnCancelPower->FunctionFlags |= 0x400;

	return CancelPower_Parms.ReturnValue;
};

// Function SFXGame.BioPower.IsActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPower::IsActive ( )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 42900 ];

	UBioPower_execIsActive_Parms IsActive_Parms;

	pFnIsActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	pFnIsActive->FunctionFlags |= 0x400;

	return IsActive_Parms.ReturnValue;
};

// Function SFXGame.BioPower.CanCasterMoveDuringPower
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPower::CanCasterMoveDuringPower ( )
{
	static UFunction* pFnCanCasterMoveDuringPower = NULL;

	if ( ! pFnCanCasterMoveDuringPower )
		pFnCanCasterMoveDuringPower = (UFunction*) UObject::GObjObjects()->Data[ 42898 ];

	UBioPower_execCanCasterMoveDuringPower_Parms CanCasterMoveDuringPower_Parms;

	pFnCanCasterMoveDuringPower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanCasterMoveDuringPower, &CanCasterMoveDuringPower_Parms, NULL );

	pFnCanCasterMoveDuringPower->FunctionFlags |= 0x400;

	return CanCasterMoveDuringPower_Parms.ReturnValue;
};

// Function SFXGame.BioPower.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void UBioPower::Tick ( float fDeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 42896 ];

	UBioPower_execTick_Parms Tick_Parms;
	Tick_Parms.fDeltaTime = fDeltaTime;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPower.SetTotalCooldownTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fTotalCooldown                 ( CPF_Parm )

void UBioPower::SetTotalCooldownTime ( float fTotalCooldown )
{
	static UFunction* pFnSetTotalCooldownTime = NULL;

	if ( ! pFnSetTotalCooldownTime )
		pFnSetTotalCooldownTime = (UFunction*) UObject::GObjObjects()->Data[ 42894 ];

	UBioPower_execSetTotalCooldownTime_Parms SetTotalCooldownTime_Parms;
	SetTotalCooldownTime_Parms.fTotalCooldown = fTotalCooldown;

	pFnSetTotalCooldownTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTotalCooldownTime, &SetTotalCooldownTime_Parms, NULL );

	pFnSetTotalCooldownTime->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPower.GetTotalCooldownTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetTotalCooldownTime ( )
{
	static UFunction* pFnGetTotalCooldownTime = NULL;

	if ( ! pFnGetTotalCooldownTime )
		pFnGetTotalCooldownTime = (UFunction*) UObject::GObjObjects()->Data[ 42892 ];

	UBioPower_execGetTotalCooldownTime_Parms GetTotalCooldownTime_Parms;

	pFnGetTotalCooldownTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTotalCooldownTime, &GetTotalCooldownTime_Parms, NULL );

	pFnGetTotalCooldownTime->FunctionFlags |= 0x400;

	return GetTotalCooldownTime_Parms.ReturnValue;
};

// Function SFXGame.BioPower.SetCooldownRemaining
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fCooldownRemaining             ( CPF_Parm )

void UBioPower::SetCooldownRemaining ( float fCooldownRemaining )
{
	static UFunction* pFnSetCooldownRemaining = NULL;

	if ( ! pFnSetCooldownRemaining )
		pFnSetCooldownRemaining = (UFunction*) UObject::GObjObjects()->Data[ 42890 ];

	UBioPower_execSetCooldownRemaining_Parms SetCooldownRemaining_Parms;
	SetCooldownRemaining_Parms.fCooldownRemaining = fCooldownRemaining;

	pFnSetCooldownRemaining->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCooldownRemaining, &SetCooldownRemaining_Parms, NULL );

	pFnSetCooldownRemaining->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPower.GetCooldownRemaining
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetCooldownRemaining ( )
{
	static UFunction* pFnGetCooldownRemaining = NULL;

	if ( ! pFnGetCooldownRemaining )
		pFnGetCooldownRemaining = (UFunction*) UObject::GObjObjects()->Data[ 42888 ];

	UBioPower_execGetCooldownRemaining_Parms GetCooldownRemaining_Parms;

	pFnGetCooldownRemaining->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCooldownRemaining, &GetCooldownRemaining_Parms, NULL );

	pFnGetCooldownRemaining->FunctionFlags |= 0x400;

	return GetCooldownRemaining_Parms.ReturnValue;
};

// Function SFXGame.BioPower.IsSuppressed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPower::IsSuppressed ( )
{
	static UFunction* pFnIsSuppressed = NULL;

	if ( ! pFnIsSuppressed )
		pFnIsSuppressed = (UFunction*) UObject::GObjObjects()->Data[ 42886 ];

	UBioPower_execIsSuppressed_Parms IsSuppressed_Parms;

	pFnIsSuppressed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSuppressed, &IsSuppressed_Parms, NULL );

	pFnIsSuppressed->FunctionFlags |= 0x400;

	return IsSuppressed_Parms.ReturnValue;
};

// Function SFXGame.BioPower.SuppressPower
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bSuppress                      ( CPF_Parm )

int UBioPower::SuppressPower ( unsigned long bSuppress )
{
	static UFunction* pFnSuppressPower = NULL;

	if ( ! pFnSuppressPower )
		pFnSuppressPower = (UFunction*) UObject::GObjObjects()->Data[ 42883 ];

	UBioPower_execSuppressPower_Parms SuppressPower_Parms;
	SuppressPower_Parms.bSuppress = bSuppress;

	pFnSuppressPower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuppressPower, &SuppressPower_Parms, NULL );

	pFnSuppressPower->FunctionFlags |= 0x400;

	return SuppressPower_Parms.ReturnValue;
};

// Function SFXGame.BioPower.IsEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPower::IsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 42881 ];

	UBioPower_execIsEnabled_Parms IsEnabled_Parms;

	pFnIsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	pFnIsEnabled->FunctionFlags |= 0x400;

	return IsEnabled_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UBioPower::GetType ( )
{
	static UFunction* pFnGetType = NULL;

	if ( ! pFnGetType )
		pFnGetType = (UFunction*) UObject::GObjObjects()->Data[ 42879 ];

	UBioPower_execGetType_Parms GetType_Parms;

	pFnGetType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetType, &GetType_Parms, NULL );

	pFnGetType->FunctionFlags |= 0x400;

	return GetType_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetProjectileAttachPoint
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   pPawn                          ( CPF_Parm )
// struct FVector                 vAttachPoint                   ( CPF_Parm | CPF_OutParm )

bool UBioPower::GetProjectileAttachPoint ( class APawn* pPawn, struct FVector* vAttachPoint )
{
	static UFunction* pFnGetProjectileAttachPoint = NULL;

	if ( ! pFnGetProjectileAttachPoint )
		pFnGetProjectileAttachPoint = (UFunction*) UObject::GObjObjects()->Data[ 42875 ];

	UBioPower_execGetProjectileAttachPoint_Parms GetProjectileAttachPoint_Parms;
	GetProjectileAttachPoint_Parms.pPawn = pPawn;

	pFnGetProjectileAttachPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProjectileAttachPoint, &GetProjectileAttachPoint_Parms, NULL );

	pFnGetProjectileAttachPoint->FunctionFlags |= 0x400;

	if ( vAttachPoint )
		memcpy ( vAttachPoint, &GetProjectileAttachPoint_Parms.vAttachPoint, 0xC );

	return GetProjectileAttachPoint_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetAnimSet
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimSet*                oAnimSet                       ( CPF_Parm | CPF_OutParm )

bool UBioPower::GetAnimSet ( class UAnimSet** oAnimSet )
{
	static UFunction* pFnGetAnimSet = NULL;

	if ( ! pFnGetAnimSet )
		pFnGetAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 42872 ];

	UBioPower_execGetAnimSet_Parms GetAnimSet_Parms;

	pFnGetAnimSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimSet, &GetAnimSet_Parms, NULL );

	pFnGetAnimSet->FunctionFlags |= 0x400;

	if ( oAnimSet )
		*oAnimSet = GetAnimSet_Parms.oAnimSet;

	return GetAnimSet_Parms.ReturnValue;
};

// Function SFXGame.BioPower.DoImpactVFX
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ImpactType                     ( CPF_Parm )
// class AActor*                  oActor                         ( CPF_Parm )
// struct FVector                 vLocation                      ( CPF_Parm )
// struct FVector                 vHitNormal                     ( CPF_Parm )
// float                          fCastingTimeRemaining          ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_OptionalParm | CPF_Parm )

void UBioPower::DoImpactVFX ( unsigned char ImpactType, class AActor* oActor, struct FVector vLocation, struct FVector vHitNormal, float fCastingTimeRemaining, struct FName BoneName )
{
	static UFunction* pFnDoImpactVFX = NULL;

	if ( ! pFnDoImpactVFX )
		pFnDoImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 42865 ];

	UBioPower_execDoImpactVFX_Parms DoImpactVFX_Parms;
	DoImpactVFX_Parms.ImpactType = ImpactType;
	DoImpactVFX_Parms.oActor = oActor;
	memcpy ( &DoImpactVFX_Parms.vLocation, &vLocation, 0xC );
	memcpy ( &DoImpactVFX_Parms.vHitNormal, &vHitNormal, 0xC );
	DoImpactVFX_Parms.fCastingTimeRemaining = fCastingTimeRemaining;
	memcpy ( &DoImpactVFX_Parms.BoneName, &BoneName, 0x8 );

	pFnDoImpactVFX->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoImpactVFX, &DoImpactVFX_Parms, NULL );

	pFnDoImpactVFX->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPower.GetVFXLifetime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eResource                      ( CPF_Parm )
// float                          fCastingTimeRemaining          ( CPF_Parm )

float UBioPower::GetVFXLifetime ( unsigned char eResource, float fCastingTimeRemaining )
{
	static UFunction* pFnGetVFXLifetime = NULL;

	if ( ! pFnGetVFXLifetime )
		pFnGetVFXLifetime = (UFunction*) UObject::GObjObjects()->Data[ 42861 ];

	UBioPower_execGetVFXLifetime_Parms GetVFXLifetime_Parms;
	GetVFXLifetime_Parms.eResource = eResource;
	GetVFXLifetime_Parms.fCastingTimeRemaining = fCastingTimeRemaining;

	pFnGetVFXLifetime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVFXLifetime, &GetVFXLifetime_Parms, NULL );

	pFnGetVFXLifetime->FunctionFlags |= 0x400;

	return GetVFXLifetime_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetVFXTemplate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioVFXTemplate*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eResource                      ( CPF_Parm )

class UBioVFXTemplate* UBioPower::GetVFXTemplate ( unsigned char eResource )
{
	static UFunction* pFnGetVFXTemplate = NULL;

	if ( ! pFnGetVFXTemplate )
		pFnGetVFXTemplate = (UFunction*) UObject::GObjObjects()->Data[ 42858 ];

	UBioPower_execGetVFXTemplate_Parms GetVFXTemplate_Parms;
	GetVFXTemplate_Parms.eResource = eResource;

	pFnGetVFXTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVFXTemplate, &GetVFXTemplate_Parms, NULL );

	pFnGetVFXTemplate->FunctionFlags |= 0x400;

	return GetVFXTemplate_Parms.ReturnValue;
};

// Function SFXGame.BioPower.EndVisualEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eResource                      ( CPF_Parm )
// unsigned long                  bAllowVFXToFinish              ( CPF_OptionalParm | CPF_Parm )

void UBioPower::EndVisualEffect ( unsigned char eResource, unsigned long bAllowVFXToFinish )
{
	static UFunction* pFnEndVisualEffect = NULL;

	if ( ! pFnEndVisualEffect )
		pFnEndVisualEffect = (UFunction*) UObject::GObjObjects()->Data[ 42855 ];

	UBioPower_execEndVisualEffect_Parms EndVisualEffect_Parms;
	EndVisualEffect_Parms.eResource = eResource;
	EndVisualEffect_Parms.bAllowVFXToFinish = bAllowVFXToFinish;

	pFnEndVisualEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndVisualEffect, &EndVisualEffect_Parms, NULL );

	pFnEndVisualEffect->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPower.CreateVisualEffect
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eResource                      ( CPF_Parm )
// class ABioVisualEffect*        pEffect                        ( CPF_Parm | CPF_OutParm )

bool UBioPower::CreateVisualEffect ( unsigned char eResource, class ABioVisualEffect** pEffect )
{
	static UFunction* pFnCreateVisualEffect = NULL;

	if ( ! pFnCreateVisualEffect )
		pFnCreateVisualEffect = (UFunction*) UObject::GObjObjects()->Data[ 42851 ];

	UBioPower_execCreateVisualEffect_Parms CreateVisualEffect_Parms;
	CreateVisualEffect_Parms.eResource = eResource;

	pFnCreateVisualEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateVisualEffect, &CreateVisualEffect_Parms, NULL );

	pFnCreateVisualEffect->FunctionFlags |= 0x400;

	if ( pEffect )
		*pEffect = CreateVisualEffect_Parms.pEffect;

	return CreateVisualEffect_Parms.ReturnValue;
};

// Function SFXGame.BioPower.CreatePowerScript
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioPower::CreatePowerScript ( )
{
	static UFunction* pFnCreatePowerScript = NULL;

	if ( ! pFnCreatePowerScript )
		pFnCreatePowerScript = (UFunction*) UObject::GObjObjects()->Data[ 42850 ];

	UBioPower_execCreatePowerScript_Parms CreatePowerScript_Parms;

	pFnCreatePowerScript->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreatePowerScript, &CreatePowerScript_Parms, NULL );

	pFnCreatePowerScript->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPower.InitializePower
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmPower                        ( CPF_Parm )

void UBioPower::InitializePower ( struct FName nmPower )
{
	static UFunction* pFnInitializePower = NULL;

	if ( ! pFnInitializePower )
		pFnInitializePower = (UFunction*) UObject::GObjObjects()->Data[ 42848 ];

	UBioPower_execInitializePower_Parms InitializePower_Parms;
	memcpy ( &InitializePower_Parms.nmPower, &nmPower, 0x8 );

	pFnInitializePower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializePower, &InitializePower_Parms, NULL );

	pFnInitializePower->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPower.GetDiscipline
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UBioPower::GetDiscipline ( )
{
	static UFunction* pFnGetDiscipline = NULL;

	if ( ! pFnGetDiscipline )
		pFnGetDiscipline = (UFunction*) UObject::GObjObjects()->Data[ 42846 ];

	UBioPower_execGetDiscipline_Parms GetDiscipline_Parms;

	pFnGetDiscipline->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDiscipline, &GetDiscipline_Parms, NULL );

	pFnGetDiscipline->FunctionFlags |= 0x400;

	return GetDiscipline_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetCapabilityType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UBioPower::GetCapabilityType ( )
{
	static UFunction* pFnGetCapabilityType = NULL;

	if ( ! pFnGetCapabilityType )
		pFnGetCapabilityType = (UFunction*) UObject::GObjObjects()->Data[ 42844 ];

	UBioPower_execGetCapabilityType_Parms GetCapabilityType_Parms;

	pFnGetCapabilityType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCapabilityType, &GetCapabilityType_Parms, NULL );

	pFnGetCapabilityType->FunctionFlags |= 0x400;

	return GetCapabilityType_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetStopOnFirstHit
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPower::GetStopOnFirstHit ( )
{
	static UFunction* pFnGetStopOnFirstHit = NULL;

	if ( ! pFnGetStopOnFirstHit )
		pFnGetStopOnFirstHit = (UFunction*) UObject::GObjObjects()->Data[ 42842 ];

	UBioPower_execGetStopOnFirstHit_Parms GetStopOnFirstHit_Parms;

	pFnGetStopOnFirstHit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStopOnFirstHit, &GetStopOnFirstHit_Parms, NULL );

	pFnGetStopOnFirstHit->FunctionFlags |= 0x400;

	return GetStopOnFirstHit_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetBlockedByObjects
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPower::GetBlockedByObjects ( )
{
	static UFunction* pFnGetBlockedByObjects = NULL;

	if ( ! pFnGetBlockedByObjects )
		pFnGetBlockedByObjects = (UFunction*) UObject::GObjObjects()->Data[ 42840 ];

	UBioPower_execGetBlockedByObjects_Parms GetBlockedByObjects_Parms;

	pFnGetBlockedByObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBlockedByObjects, &GetBlockedByObjects_Parms, NULL );

	pFnGetBlockedByObjects->FunctionFlags |= 0x400;

	return GetBlockedByObjects_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetConeHalfAngle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetConeHalfAngle ( )
{
	static UFunction* pFnGetConeHalfAngle = NULL;

	if ( ! pFnGetConeHalfAngle )
		pFnGetConeHalfAngle = (UFunction*) UObject::GObjObjects()->Data[ 42838 ];

	UBioPower_execGetConeHalfAngle_Parms GetConeHalfAngle_Parms;

	pFnGetConeHalfAngle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetConeHalfAngle, &GetConeHalfAngle_Parms, NULL );

	pFnGetConeHalfAngle->FunctionFlags |= 0x400;

	return GetConeHalfAngle_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetVFXIntensity
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetVFXIntensity ( )
{
	static UFunction* pFnGetVFXIntensity = NULL;

	if ( ! pFnGetVFXIntensity )
		pFnGetVFXIntensity = (UFunction*) UObject::GObjObjects()->Data[ 42836 ];

	UBioPower_execGetVFXIntensity_Parms GetVFXIntensity_Parms;

	pFnGetVFXIntensity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVFXIntensity, &GetVFXIntensity_Parms, NULL );

	pFnGetVFXIntensity->FunctionFlags |= 0x400;

	return GetVFXIntensity_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetEffectDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetEffectDuration ( )
{
	static UFunction* pFnGetEffectDuration = NULL;

	if ( ! pFnGetEffectDuration )
		pFnGetEffectDuration = (UFunction*) UObject::GObjObjects()->Data[ 42834 ];

	UBioPower_execGetEffectDuration_Parms GetEffectDuration_Parms;

	pFnGetEffectDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectDuration, &GetEffectDuration_Parms, NULL );

	pFnGetEffectDuration->FunctionFlags |= 0x400;

	return GetEffectDuration_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetImpactRadius
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetImpactRadius ( )
{
	static UFunction* pFnGetImpactRadius = NULL;

	if ( ! pFnGetImpactRadius )
		pFnGetImpactRadius = (UFunction*) UObject::GObjObjects()->Data[ 42832 ];

	UBioPower_execGetImpactRadius_Parms GetImpactRadius_Parms;

	pFnGetImpactRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetImpactRadius, &GetImpactRadius_Parms, NULL );

	pFnGetImpactRadius->FunctionFlags |= 0x400;

	return GetImpactRadius_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetMaximumRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetMaximumRange ( )
{
	static UFunction* pFnGetMaximumRange = NULL;

	if ( ! pFnGetMaximumRange )
		pFnGetMaximumRange = (UFunction*) UObject::GObjObjects()->Data[ 42830 ];

	UBioPower_execGetMaximumRange_Parms GetMaximumRange_Parms;

	pFnGetMaximumRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaximumRange, &GetMaximumRange_Parms, NULL );

	pFnGetMaximumRange->FunctionFlags |= 0x400;

	return GetMaximumRange_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetMinimumRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetMinimumRange ( )
{
	static UFunction* pFnGetMinimumRange = NULL;

	if ( ! pFnGetMinimumRange )
		pFnGetMinimumRange = (UFunction*) UObject::GObjObjects()->Data[ 42828 ];

	UBioPower_execGetMinimumRange_Parms GetMinimumRange_Parms;

	pFnGetMinimumRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMinimumRange, &GetMinimumRange_Parms, NULL );

	pFnGetMinimumRange->FunctionFlags |= 0x400;

	return GetMinimumRange_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetProjectileRadius
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetProjectileRadius ( )
{
	static UFunction* pFnGetProjectileRadius = NULL;

	if ( ! pFnGetProjectileRadius )
		pFnGetProjectileRadius = (UFunction*) UObject::GObjObjects()->Data[ 42826 ];

	UBioPower_execGetProjectileRadius_Parms GetProjectileRadius_Parms;

	pFnGetProjectileRadius->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProjectileRadius, &GetProjectileRadius_Parms, NULL );

	pFnGetProjectileRadius->FunctionFlags |= 0x400;

	return GetProjectileRadius_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetProjectileSpeed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetProjectileSpeed ( )
{
	static UFunction* pFnGetProjectileSpeed = NULL;

	if ( ! pFnGetProjectileSpeed )
		pFnGetProjectileSpeed = (UFunction*) UObject::GObjObjects()->Data[ 42824 ];

	UBioPower_execGetProjectileSpeed_Parms GetProjectileSpeed_Parms;

	pFnGetProjectileSpeed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProjectileSpeed, &GetProjectileSpeed_Parms, NULL );

	pFnGetProjectileSpeed->FunctionFlags |= 0x400;

	return GetProjectileSpeed_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetGlobalCooldown
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetGlobalCooldown ( )
{
	static UFunction* pFnGetGlobalCooldown = NULL;

	if ( ! pFnGetGlobalCooldown )
		pFnGetGlobalCooldown = (UFunction*) UObject::GObjObjects()->Data[ 42822 ];

	UBioPower_execGetGlobalCooldown_Parms GetGlobalCooldown_Parms;

	pFnGetGlobalCooldown->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGlobalCooldown, &GetGlobalCooldown_Parms, NULL );

	pFnGetGlobalCooldown->FunctionFlags |= 0x400;

	return GetGlobalCooldown_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetCooldownTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetCooldownTime ( )
{
	static UFunction* pFnGetCooldownTime = NULL;

	if ( ! pFnGetCooldownTime )
		pFnGetCooldownTime = (UFunction*) UObject::GObjObjects()->Data[ 42820 ];

	UBioPower_execGetCooldownTime_Parms GetCooldownTime_Parms;

	pFnGetCooldownTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCooldownTime, &GetCooldownTime_Parms, NULL );

	pFnGetCooldownTime->FunctionFlags |= 0x400;

	return GetCooldownTime_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetReleaseAnimRate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetReleaseAnimRate ( )
{
	static UFunction* pFnGetReleaseAnimRate = NULL;

	if ( ! pFnGetReleaseAnimRate )
		pFnGetReleaseAnimRate = (UFunction*) UObject::GObjObjects()->Data[ 42818 ];

	UBioPower_execGetReleaseAnimRate_Parms GetReleaseAnimRate_Parms;

	pFnGetReleaseAnimRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReleaseAnimRate, &GetReleaseAnimRate_Parms, NULL );

	pFnGetReleaseAnimRate->FunctionFlags |= 0x400;

	return GetReleaseAnimRate_Parms.ReturnValue;
};

// Function SFXGame.BioPower.GetCastingTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPower::GetCastingTime ( )
{
	static UFunction* pFnGetCastingTime = NULL;

	if ( ! pFnGetCastingTime )
		pFnGetCastingTime = (UFunction*) UObject::GObjObjects()->Data[ 42816 ];

	UBioPower_execGetCastingTime_Parms GetCastingTime_Parms;

	pFnGetCastingTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCastingTime, &GetCastingTime_Parms, NULL );

	pFnGetCastingTime->FunctionFlags |= 0x400;

	return GetCastingTime_Parms.ReturnValue;
};

// Function SFXGame.BioPowerManager.CanImpactActor
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool UBioPowerManager::eventCanImpactActor ( class AActor* oActor )
{
	static UFunction* pFnCanImpactActor = NULL;

	if ( ! pFnCanImpactActor )
		pFnCanImpactActor = (UFunction*) UObject::GObjObjects()->Data[ 42984 ];

	UBioPowerManager_eventCanImpactActor_Parms CanImpactActor_Parms;
	CanImpactActor_Parms.oActor = oActor;

	this->ProcessEvent ( pFnCanImpactActor, &CanImpactActor_Parms, NULL );

	return CanImpactActor_Parms.ReturnValue;
};

// Function SFXGame.BioPowerManager.TickReservations
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void UBioPowerManager::TickReservations ( float fDeltaTime )
{
	static UFunction* pFnTickReservations = NULL;

	if ( ! pFnTickReservations )
		pFnTickReservations = (UFunction*) UObject::GObjObjects()->Data[ 42982 ];

	UBioPowerManager_execTickReservations_Parms TickReservations_Parms;
	TickReservations_Parms.fDeltaTime = fDeltaTime;

	pFnTickReservations->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickReservations, &TickReservations_Parms, NULL );

	pFnTickReservations->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPowerManager.StartReservation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nReservationID                 ( CPF_Parm )

bool UBioPowerManager::StartReservation ( int nReservationID )
{
	static UFunction* pFnStartReservation = NULL;

	if ( ! pFnStartReservation )
		pFnStartReservation = (UFunction*) UObject::GObjObjects()->Data[ 42979 ];

	UBioPowerManager_execStartReservation_Parms StartReservation_Parms;
	StartReservation_Parms.nReservationID = nReservationID;

	pFnStartReservation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartReservation, &StartReservation_Parms, NULL );

	pFnStartReservation->FunctionFlags |= 0x400;

	return StartReservation_Parms.ReturnValue;
};

// Function SFXGame.BioPowerManager.ClearReservation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nReservationID                 ( CPF_Parm )

void UBioPowerManager::ClearReservation ( int nReservationID )
{
	static UFunction* pFnClearReservation = NULL;

	if ( ! pFnClearReservation )
		pFnClearReservation = (UFunction*) UObject::GObjObjects()->Data[ 42977 ];

	UBioPowerManager_execClearReservation_Parms ClearReservation_Parms;
	ClearReservation_Parms.nReservationID = nReservationID;

	pFnClearReservation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearReservation, &ClearReservation_Parms, NULL );

	pFnClearReservation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPowerManager.MakeReservation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioPower*               oPower                         ( CPF_Parm )
// class APawn*                   oPawn                          ( CPF_Parm )
// unsigned long                  bForceSuccess                  ( CPF_OptionalParm | CPF_Parm )

int UBioPowerManager::MakeReservation ( class UBioPower* oPower, class APawn* oPawn, unsigned long bForceSuccess )
{
	static UFunction* pFnMakeReservation = NULL;

	if ( ! pFnMakeReservation )
		pFnMakeReservation = (UFunction*) UObject::GObjObjects()->Data[ 42972 ];

	UBioPowerManager_execMakeReservation_Parms MakeReservation_Parms;
	MakeReservation_Parms.oPower = oPower;
	MakeReservation_Parms.oPawn = oPawn;
	MakeReservation_Parms.bForceSuccess = bForceSuccess;

	pFnMakeReservation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeReservation, &MakeReservation_Parms, NULL );

	pFnMakeReservation->FunctionFlags |= 0x400;

	return MakeReservation_Parms.ReturnValue;
};

// Function SFXGame.BioPowerManager.TickGlobalCooldowns
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void UBioPowerManager::TickGlobalCooldowns ( float fDeltaTime )
{
	static UFunction* pFnTickGlobalCooldowns = NULL;

	if ( ! pFnTickGlobalCooldowns )
		pFnTickGlobalCooldowns = (UFunction*) UObject::GObjObjects()->Data[ 42970 ];

	UBioPowerManager_execTickGlobalCooldowns_Parms TickGlobalCooldowns_Parms;
	TickGlobalCooldowns_Parms.fDeltaTime = fDeltaTime;

	pFnTickGlobalCooldowns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickGlobalCooldowns, &TickGlobalCooldowns_Parms, NULL );

	pFnTickGlobalCooldowns->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPowerManager.GetGlobalCooldown
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPower                        ( CPF_Parm )

float UBioPowerManager::GetGlobalCooldown ( struct FName nmPower )
{
	static UFunction* pFnGetGlobalCooldown = NULL;

	if ( ! pFnGetGlobalCooldown )
		pFnGetGlobalCooldown = (UFunction*) UObject::GObjObjects()->Data[ 42967 ];

	UBioPowerManager_execGetGlobalCooldown_Parms GetGlobalCooldown_Parms;
	memcpy ( &GetGlobalCooldown_Parms.nmPower, &nmPower, 0x8 );

	pFnGetGlobalCooldown->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGlobalCooldown, &GetGlobalCooldown_Parms, NULL );

	pFnGetGlobalCooldown->FunctionFlags |= 0x400;

	return GetGlobalCooldown_Parms.ReturnValue;
};

// Function SFXGame.BioPowerManager.SetGlobalCooldown
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmPower                        ( CPF_Parm )
// float                          fCooldown                      ( CPF_Parm )

void UBioPowerManager::SetGlobalCooldown ( struct FName nmPower, float fCooldown )
{
	static UFunction* pFnSetGlobalCooldown = NULL;

	if ( ! pFnSetGlobalCooldown )
		pFnSetGlobalCooldown = (UFunction*) UObject::GObjObjects()->Data[ 42964 ];

	UBioPowerManager_execSetGlobalCooldown_Parms SetGlobalCooldown_Parms;
	memcpy ( &SetGlobalCooldown_Parms.nmPower, &nmPower, 0x8 );
	SetGlobalCooldown_Parms.fCooldown = fCooldown;

	pFnSetGlobalCooldown->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGlobalCooldown, &SetGlobalCooldown_Parms, NULL );

	pFnSetGlobalCooldown->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPowerManager.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void UBioPowerManager::Tick ( float fDeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 42962 ];

	UBioPowerManager_execTick_Parms Tick_Parms;
	Tick_Parms.fDeltaTime = fDeltaTime;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPowerManager.ChooseTargetForPlayer
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class UBioPower*               oPower                         ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 vTargetLocation                ( CPF_Parm | CPF_OutParm )

void UBioPowerManager::ChooseTargetForPlayer ( class UBioPower* oPower, class AActor** oTarget, struct FVector* vTargetLocation )
{
	static UFunction* pFnChooseTargetForPlayer = NULL;

	if ( ! pFnChooseTargetForPlayer )
		pFnChooseTargetForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 42958 ];

	UBioPowerManager_execChooseTargetForPlayer_Parms ChooseTargetForPlayer_Parms;
	ChooseTargetForPlayer_Parms.oPower = oPower;

	pFnChooseTargetForPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChooseTargetForPlayer, &ChooseTargetForPlayer_Parms, NULL );

	pFnChooseTargetForPlayer->FunctionFlags |= 0x400;

	if ( oTarget )
		*oTarget = ChooseTargetForPlayer_Parms.oTarget;

	if ( vTargetLocation )
		memcpy ( vTargetLocation, &ChooseTargetForPlayer_Parms.vTargetLocation, 0xC );
};

// Function SFXGame.BioPowerManager.AreActorsFriendly
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oFirstActor                    ( CPF_Parm )
// class AActor*                  oSecondActor                   ( CPF_Parm )

bool UBioPowerManager::AreActorsFriendly ( class AActor* oFirstActor, class AActor* oSecondActor )
{
	static UFunction* pFnAreActorsFriendly = NULL;

	if ( ! pFnAreActorsFriendly )
		pFnAreActorsFriendly = (UFunction*) UObject::GObjObjects()->Data[ 42954 ];

	UBioPowerManager_execAreActorsFriendly_Parms AreActorsFriendly_Parms;
	AreActorsFriendly_Parms.oFirstActor = oFirstActor;
	AreActorsFriendly_Parms.oSecondActor = oSecondActor;

	pFnAreActorsFriendly->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAreActorsFriendly, &AreActorsFriendly_Parms, NULL );

	pFnAreActorsFriendly->FunctionFlags |= 0x400;

	return AreActorsFriendly_Parms.ReturnValue;
};

// Function SFXGame.BioPowerManager.CheckLOSToLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oSourceActor                   ( CPF_Parm )
// struct FVector                 vStartLocation                 ( CPF_Parm )
// struct FVector                 vEndLocation                   ( CPF_Parm )
// float                          fMaxRange                      ( CPF_Parm )
// unsigned long                  bIgnoreFriendlies              ( CPF_Parm )
// class AActor*                  oHitActor                      ( CPF_Parm | CPF_OutParm )
// struct FVector                 vHitLocation                   ( CPF_Parm | CPF_OutParm )
// struct FVector                 vHitNormal                     ( CPF_Parm | CPF_OutParm )

bool UBioPowerManager::CheckLOSToLocation ( class AActor* oSourceActor, struct FVector vStartLocation, struct FVector vEndLocation, float fMaxRange, unsigned long bIgnoreFriendlies, class AActor** oHitActor, struct FVector* vHitLocation, struct FVector* vHitNormal )
{
	static UFunction* pFnCheckLOSToLocation = NULL;

	if ( ! pFnCheckLOSToLocation )
		pFnCheckLOSToLocation = (UFunction*) UObject::GObjObjects()->Data[ 42944 ];

	UBioPowerManager_execCheckLOSToLocation_Parms CheckLOSToLocation_Parms;
	CheckLOSToLocation_Parms.oSourceActor = oSourceActor;
	memcpy ( &CheckLOSToLocation_Parms.vStartLocation, &vStartLocation, 0xC );
	memcpy ( &CheckLOSToLocation_Parms.vEndLocation, &vEndLocation, 0xC );
	CheckLOSToLocation_Parms.fMaxRange = fMaxRange;
	CheckLOSToLocation_Parms.bIgnoreFriendlies = bIgnoreFriendlies;

	pFnCheckLOSToLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckLOSToLocation, &CheckLOSToLocation_Parms, NULL );

	pFnCheckLOSToLocation->FunctionFlags |= 0x400;

	if ( oHitActor )
		*oHitActor = CheckLOSToLocation_Parms.oHitActor;

	if ( vHitLocation )
		memcpy ( vHitLocation, &CheckLOSToLocation_Parms.vHitLocation, 0xC );

	if ( vHitNormal )
		memcpy ( vHitNormal, &CheckLOSToLocation_Parms.vHitNormal, 0xC );

	return CheckLOSToLocation_Parms.ReturnValue;
};

// Function SFXGame.BioPowerManager.CheckLOSToActor
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oSourceActor                   ( CPF_Parm )
// class AActor*                  oDestinationActor              ( CPF_Parm )
// struct FVector                 vStartLocation                 ( CPF_Parm )
// float                          fMaxRange                      ( CPF_Parm )
// unsigned long                  bIgnoreFriendlies              ( CPF_Parm )
// unsigned long                  bIgnorePawns                   ( CPF_Parm )
// class AActor*                  oHitActor                      ( CPF_Parm | CPF_OutParm )
// struct FVector                 vHitLocation                   ( CPF_Parm | CPF_OutParm )
// struct FVector                 vHitNormal                     ( CPF_Parm | CPF_OutParm )

bool UBioPowerManager::CheckLOSToActor ( class AActor* oSourceActor, class AActor* oDestinationActor, struct FVector vStartLocation, float fMaxRange, unsigned long bIgnoreFriendlies, unsigned long bIgnorePawns, class AActor** oHitActor, struct FVector* vHitLocation, struct FVector* vHitNormal )
{
	static UFunction* pFnCheckLOSToActor = NULL;

	if ( ! pFnCheckLOSToActor )
		pFnCheckLOSToActor = (UFunction*) UObject::GObjObjects()->Data[ 42933 ];

	UBioPowerManager_execCheckLOSToActor_Parms CheckLOSToActor_Parms;
	CheckLOSToActor_Parms.oSourceActor = oSourceActor;
	CheckLOSToActor_Parms.oDestinationActor = oDestinationActor;
	memcpy ( &CheckLOSToActor_Parms.vStartLocation, &vStartLocation, 0xC );
	CheckLOSToActor_Parms.fMaxRange = fMaxRange;
	CheckLOSToActor_Parms.bIgnoreFriendlies = bIgnoreFriendlies;
	CheckLOSToActor_Parms.bIgnorePawns = bIgnorePawns;

	pFnCheckLOSToActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckLOSToActor, &CheckLOSToActor_Parms, NULL );

	pFnCheckLOSToActor->FunctionFlags |= 0x400;

	if ( oHitActor )
		*oHitActor = CheckLOSToActor_Parms.oHitActor;

	if ( vHitLocation )
		memcpy ( vHitLocation, &CheckLOSToActor_Parms.vHitLocation, 0xC );

	if ( vHitNormal )
		memcpy ( vHitNormal, &CheckLOSToActor_Parms.vHitNormal, 0xC );

	return CheckLOSToActor_Parms.ReturnValue;
};

// Function SFXGame.BioPowerManager.GetStartLocationForLOSCheck
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   Caster                         ( CPF_Parm )
// struct FVector                 vStartLocation                 ( CPF_Parm | CPF_OutParm )

void UBioPowerManager::GetStartLocationForLOSCheck ( class APawn* Caster, struct FVector* vStartLocation )
{
	static UFunction* pFnGetStartLocationForLOSCheck = NULL;

	if ( ! pFnGetStartLocationForLOSCheck )
		pFnGetStartLocationForLOSCheck = (UFunction*) UObject::GObjObjects()->Data[ 42930 ];

	UBioPowerManager_execGetStartLocationForLOSCheck_Parms GetStartLocationForLOSCheck_Parms;
	GetStartLocationForLOSCheck_Parms.Caster = Caster;

	pFnGetStartLocationForLOSCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStartLocationForLOSCheck, &GetStartLocationForLOSCheck_Parms, NULL );

	pFnGetStartLocationForLOSCheck->FunctionFlags |= 0x400;

	if ( vStartLocation )
		memcpy ( vStartLocation, &GetStartLocationForLOSCheck_Parms.vStartLocation, 0xC );
};

// Function SFXGame.BioPowerScript.DebugDraw_Power
// [0x00020000] 
// Parameters infos:
// class ABioHUD*                 H                              ( CPF_Parm )

void UBioPowerScript::DebugDraw_Power ( class ABioHUD* H )
{
	static UFunction* pFnDebugDraw_Power = NULL;

	if ( ! pFnDebugDraw_Power )
		pFnDebugDraw_Power = (UFunction*) UObject::GObjObjects()->Data[ 43126 ];

	UBioPowerScript_execDebugDraw_Power_Parms DebugDraw_Power_Parms;
	DebugDraw_Power_Parms.H = H;

	this->ProcessEvent ( pFnDebugDraw_Power, &DebugDraw_Power_Parms, NULL );
};

// Function SFXGame.BioPowerScript.GetHUDWheelIconInfo
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class ABioPawn*                OwnerPawn                      ( CPF_Parm )

struct FString UBioPowerScript::eventGetHUDWheelIconInfo ( class ABioPawn* OwnerPawn )
{
	static UFunction* pFnGetHUDWheelIconInfo = NULL;

	if ( ! pFnGetHUDWheelIconInfo )
		pFnGetHUDWheelIconInfo = (UFunction*) UObject::GObjObjects()->Data[ 43123 ];

	UBioPowerScript_eventGetHUDWheelIconInfo_Parms GetHUDWheelIconInfo_Parms;
	GetHUDWheelIconInfo_Parms.OwnerPawn = OwnerPawn;

	this->ProcessEvent ( pFnGetHUDWheelIconInfo, &GetHUDWheelIconInfo_Parms, NULL );

	return GetHUDWheelIconInfo_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.ReloadAmmoPower
// [0x00020000] 
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void UBioPowerScript::ReloadAmmoPower ( class ABioPawn* Target, class ASFXWeapon* Weapon )
{
	static UFunction* pFnReloadAmmoPower = NULL;

	if ( ! pFnReloadAmmoPower )
		pFnReloadAmmoPower = (UFunction*) UObject::GObjObjects()->Data[ 43120 ];

	UBioPowerScript_execReloadAmmoPower_Parms ReloadAmmoPower_Parms;
	ReloadAmmoPower_Parms.Target = Target;
	ReloadAmmoPower_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnReloadAmmoPower, &ReloadAmmoPower_Parms, NULL );
};

// Function SFXGame.BioPowerScript.OnOwnerDied
// [0x00020000] 
// Parameters infos:

void UBioPowerScript::OnOwnerDied ( )
{
	static UFunction* pFnOnOwnerDied = NULL;

	if ( ! pFnOnOwnerDied )
		pFnOnOwnerDied = (UFunction*) UObject::GObjObjects()->Data[ 43119 ];

	UBioPowerScript_execOnOwnerDied_Parms OnOwnerDied_Parms;

	this->ProcessEvent ( pFnOnOwnerDied, &OnOwnerDied_Parms, NULL );
};

// Function SFXGame.BioPowerScript.OnSquadMemberAdded
// [0x00020000] 
// Parameters infos:
// class APawn*                   Pawn                           ( CPF_Parm )

void UBioPowerScript::OnSquadMemberAdded ( class APawn* Pawn )
{
	static UFunction* pFnOnSquadMemberAdded = NULL;

	if ( ! pFnOnSquadMemberAdded )
		pFnOnSquadMemberAdded = (UFunction*) UObject::GObjObjects()->Data[ 43117 ];

	UBioPowerScript_execOnSquadMemberAdded_Parms OnSquadMemberAdded_Parms;
	OnSquadMemberAdded_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnOnSquadMemberAdded, &OnSquadMemberAdded_Parms, NULL );
};

// Function SFXGame.BioPowerScript.OnPowersLoaded
// [0x00020000] 
// Parameters infos:

void UBioPowerScript::OnPowersLoaded ( )
{
	static UFunction* pFnOnPowersLoaded = NULL;

	if ( ! pFnOnPowersLoaded )
		pFnOnPowersLoaded = (UFunction*) UObject::GObjObjects()->Data[ 43116 ];

	UBioPowerScript_execOnPowersLoaded_Parms OnPowersLoaded_Parms;

	this->ProcessEvent ( pFnOnPowersLoaded, &OnPowersLoaded_Parms, NULL );
};

// Function SFXGame.BioPowerScript.OnPowerRankIncreased
// [0x00020000] 
// Parameters infos:

void UBioPowerScript::OnPowerRankIncreased ( )
{
	static UFunction* pFnOnPowerRankIncreased = NULL;

	if ( ! pFnOnPowerRankIncreased )
		pFnOnPowerRankIncreased = (UFunction*) UObject::GObjObjects()->Data[ 43115 ];

	UBioPowerScript_execOnPowerRankIncreased_Parms OnPowerRankIncreased_Parms;

	this->ProcessEvent ( pFnOnPowerRankIncreased, &OnPowerRankIncreased_Parms, NULL );
};

// Function SFXGame.BioPowerScript.OnPowerAdded
// [0x00020000] 
// Parameters infos:
// class USFXPower*               Power                          ( CPF_Parm )

void UBioPowerScript::OnPowerAdded ( class USFXPower* Power )
{
	static UFunction* pFnOnPowerAdded = NULL;

	if ( ! pFnOnPowerAdded )
		pFnOnPowerAdded = (UFunction*) UObject::GObjObjects()->Data[ 43113 ];

	UBioPowerScript_execOnPowerAdded_Parms OnPowerAdded_Parms;
	OnPowerAdded_Parms.Power = Power;

	this->ProcessEvent ( pFnOnPowerAdded, &OnPowerAdded_Parms, NULL );
};

// Function SFXGame.BioPowerScript.GetCurrentShields
// [0x00020002] 
// Parameters infos:
// class ASFXShield_Base*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )

class ASFXShield_Base* UBioPowerScript::GetCurrentShields ( class ABioPawn* Target )
{
	static UFunction* pFnGetCurrentShields = NULL;

	if ( ! pFnGetCurrentShields )
		pFnGetCurrentShields = (UFunction*) UObject::GObjObjects()->Data[ 43109 ];

	UBioPowerScript_execGetCurrentShields_Parms GetCurrentShields_Parms;
	GetCurrentShields_Parms.Target = Target;

	this->ProcessEvent ( pFnGetCurrentShields, &GetCurrentShields_Parms, NULL );

	return GetCurrentShields_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.ShouldUsePowerOnShields
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Target                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioPowerScript::ShouldUsePowerOnShields ( class ABioPawn* Target, class UClass* DamageType, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePowerOnShields = NULL;

	if ( ! pFnShouldUsePowerOnShields )
		pFnShouldUsePowerOnShields = (UFunction*) UObject::GObjObjects()->Data[ 43100 ];

	UBioPowerScript_execShouldUsePowerOnShields_Parms ShouldUsePowerOnShields_Parms;
	ShouldUsePowerOnShields_Parms.Target = Target;
	ShouldUsePowerOnShields_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnShouldUsePowerOnShields, &ShouldUsePowerOnShields_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePowerOnShields_Parms.sOptionalInfo, 0xC );

	return ShouldUsePowerOnShields_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.ShouldUsePower
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Caster                         ( CPF_Parm )
// class AActor*                  Target                         ( CPF_Parm )
// struct FString                 sOptionalInfo                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioPowerScript::eventShouldUsePower ( class AActor* Caster, class AActor* Target, struct FString* sOptionalInfo )
{
	static UFunction* pFnShouldUsePower = NULL;

	if ( ! pFnShouldUsePower )
		pFnShouldUsePower = (UFunction*) UObject::GObjObjects()->Data[ 43095 ];

	UBioPowerScript_eventShouldUsePower_Parms ShouldUsePower_Parms;
	ShouldUsePower_Parms.Caster = Caster;
	ShouldUsePower_Parms.Target = Target;

	this->ProcessEvent ( pFnShouldUsePower, &ShouldUsePower_Parms, NULL );

	if ( sOptionalInfo )
		memcpy ( sOptionalInfo, &ShouldUsePower_Parms.sOptionalInfo, 0xC );

	return ShouldUsePower_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.GetDuration
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPowerScript::GetDuration ( )
{
	static UFunction* pFnGetDuration = NULL;

	if ( ! pFnGetDuration )
		pFnGetDuration = (UFunction*) UObject::GObjObjects()->Data[ 43093 ];

	UBioPowerScript_execGetDuration_Parms GetDuration_Parms;

	this->ProcessEvent ( pFnGetDuration, &GetDuration_Parms, NULL );

	return GetDuration_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.GetElapsedTime
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioPowerScript::GetElapsedTime ( )
{
	static UFunction* pFnGetElapsedTime = NULL;

	if ( ! pFnGetElapsedTime )
		pFnGetElapsedTime = (UFunction*) UObject::GObjObjects()->Data[ 43091 ];

	UBioPowerScript_execGetElapsedTime_Parms GetElapsedTime_Parms;

	this->ProcessEvent ( pFnGetElapsedTime, &GetElapsedTime_Parms, NULL );

	return GetElapsedTime_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.PlayForceFeedback
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool UBioPowerScript::PlayForceFeedback ( class AActor* oCaster, class AActor* oImpacted )
{
	static UFunction* pFnPlayForceFeedback = NULL;

	if ( ! pFnPlayForceFeedback )
		pFnPlayForceFeedback = (UFunction*) UObject::GObjObjects()->Data[ 43081 ];

	UBioPowerScript_execPlayForceFeedback_Parms PlayForceFeedback_Parms;
	PlayForceFeedback_Parms.oCaster = oCaster;
	PlayForceFeedback_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnPlayForceFeedback, &PlayForceFeedback_Parms, NULL );

	return PlayForceFeedback_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.PlayGuiSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmSound                        ( CPF_Parm )

bool UBioPowerScript::PlayGuiSound ( struct FName nmSound )
{
	static UFunction* pFnPlayGuiSound = NULL;

	if ( ! pFnPlayGuiSound )
		pFnPlayGuiSound = (UFunction*) UObject::GObjObjects()->Data[ 43078 ];

	UBioPowerScript_execPlayGuiSound_Parms PlayGuiSound_Parms;
	memcpy ( &PlayGuiSound_Parms.nmSound, &nmSound, 0x8 );

	pFnPlayGuiSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayGuiSound, &PlayGuiSound_Parms, NULL );

	pFnPlayGuiSound->FunctionFlags |= 0x400;

	return PlayGuiSound_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.GetFloorLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vStartLocation                 ( CPF_Parm )
// struct FVector                 vFloorLocation                 ( CPF_Parm | CPF_OutParm )

bool UBioPowerScript::GetFloorLocation ( struct FVector vStartLocation, struct FVector* vFloorLocation )
{
	static UFunction* pFnGetFloorLocation = NULL;

	if ( ! pFnGetFloorLocation )
		pFnGetFloorLocation = (UFunction*) UObject::GObjObjects()->Data[ 43074 ];

	UBioPowerScript_execGetFloorLocation_Parms GetFloorLocation_Parms;
	memcpy ( &GetFloorLocation_Parms.vStartLocation, &vStartLocation, 0xC );

	pFnGetFloorLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFloorLocation, &GetFloorLocation_Parms, NULL );

	pFnGetFloorLocation->FunctionFlags |= 0x400;

	if ( vFloorLocation )
		memcpy ( vFloorLocation, &GetFloorLocation_Parms.vFloorLocation, 0xC );

	return GetFloorLocation_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.GetCooldownResearchBonus
// [0x00420002] 
// Parameters infos:
// float                          fStaticResearchBonus           ( CPF_Parm | CPF_OutParm )

void UBioPowerScript::GetCooldownResearchBonus ( float* fStaticResearchBonus )
{
	static UFunction* pFnGetCooldownResearchBonus = NULL;

	if ( ! pFnGetCooldownResearchBonus )
		pFnGetCooldownResearchBonus = (UFunction*) UObject::GObjObjects()->Data[ 43072 ];

	UBioPowerScript_execGetCooldownResearchBonus_Parms GetCooldownResearchBonus_Parms;

	this->ProcessEvent ( pFnGetCooldownResearchBonus, &GetCooldownResearchBonus_Parms, NULL );

	if ( fStaticResearchBonus )
		*fStaticResearchBonus = GetCooldownResearchBonus_Parms.fStaticResearchBonus;
};

// Function SFXGame.BioPowerScript.AdjustCooldown
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fCoolDownTime                  ( CPF_Parm | CPF_OutParm )

bool UBioPowerScript::eventAdjustCooldown ( float* fCoolDownTime )
{
	static UFunction* pFnAdjustCooldown = NULL;

	if ( ! pFnAdjustCooldown )
		pFnAdjustCooldown = (UFunction*) UObject::GObjObjects()->Data[ 43067 ];

	UBioPowerScript_eventAdjustCooldown_Parms AdjustCooldown_Parms;

	this->ProcessEvent ( pFnAdjustCooldown, &AdjustCooldown_Parms, NULL );

	if ( fCoolDownTime )
		*fCoolDownTime = AdjustCooldown_Parms.fCoolDownTime;

	return AdjustCooldown_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.EffectUnapply
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// float                          fCasterStability               ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )

bool UBioPowerScript::eventEffectUnapply ( class AActor* oCaster, float fCasterStability, class AActor* oImpacted, int nPreviouslyImpacted )
{
	static UFunction* pFnEffectUnapply = NULL;

	if ( ! pFnEffectUnapply )
		pFnEffectUnapply = (UFunction*) UObject::GObjObjects()->Data[ 43061 ];

	UBioPowerScript_eventEffectUnapply_Parms EffectUnapply_Parms;
	EffectUnapply_Parms.oCaster = oCaster;
	EffectUnapply_Parms.fCasterStability = fCasterStability;
	EffectUnapply_Parms.oImpacted = oImpacted;
	EffectUnapply_Parms.nPreviouslyImpacted = nPreviouslyImpacted;

	this->ProcessEvent ( pFnEffectUnapply, &EffectUnapply_Parms, NULL );

	return EffectUnapply_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.OnImpact
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// float                          fCasterStability               ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// int                            nPreviouslyImpacted            ( CPF_Parm )

bool UBioPowerScript::eventOnImpact ( class AActor* oCaster, float fCasterStability, class AActor* oImpacted, int nPreviouslyImpacted )
{
	static UFunction* pFnOnImpact = NULL;

	if ( ! pFnOnImpact )
		pFnOnImpact = (UFunction*) UObject::GObjObjects()->Data[ 43055 ];

	UBioPowerScript_eventOnImpact_Parms OnImpact_Parms;
	OnImpact_Parms.oCaster = oCaster;
	OnImpact_Parms.fCasterStability = fCasterStability;
	OnImpact_Parms.oImpacted = oImpacted;
	OnImpact_Parms.nPreviouslyImpacted = nPreviouslyImpacted;

	this->ProcessEvent ( pFnOnImpact, &OnImpact_Parms, NULL );

	return OnImpact_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.PowerSharesCooldown
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioPower*               Power                          ( CPF_Parm )

bool UBioPowerScript::PowerSharesCooldown ( class UBioPower* Power )
{
	static UFunction* pFnPowerSharesCooldown = NULL;

	if ( ! pFnPowerSharesCooldown )
		pFnPowerSharesCooldown = (UFunction*) UObject::GObjObjects()->Data[ 43052 ];

	UBioPowerScript_execPowerSharesCooldown_Parms PowerSharesCooldown_Parms;
	PowerSharesCooldown_Parms.Power = Power;

	this->ProcessEvent ( pFnPowerSharesCooldown, &PowerSharesCooldown_Parms, NULL );

	return PowerSharesCooldown_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.SetPowerCooldowns
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )
// float                          Cooldown                       ( CPF_Parm )

void UBioPowerScript::SetPowerCooldowns ( class ABioPawn* Pawn, float Cooldown )
{
	static UFunction* pFnSetPowerCooldowns = NULL;

	if ( ! pFnSetPowerCooldowns )
		pFnSetPowerCooldowns = (UFunction*) UObject::GObjObjects()->Data[ 43046 ];

	UBioPowerScript_execSetPowerCooldowns_Parms SetPowerCooldowns_Parms;
	SetPowerCooldowns_Parms.Pawn = Pawn;
	SetPowerCooldowns_Parms.Cooldown = Cooldown;

	this->ProcessEvent ( pFnSetPowerCooldowns, &SetPowerCooldowns_Parms, NULL );
};

// Function SFXGame.BioPowerScript.GetPowerCooldown
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Cooldown                       ( CPF_Parm | CPF_OutParm )

bool UBioPowerScript::GetPowerCooldown ( float* Cooldown )
{
	static UFunction* pFnGetPowerCooldown = NULL;

	if ( ! pFnGetPowerCooldown )
		pFnGetPowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 43043 ];

	UBioPowerScript_execGetPowerCooldown_Parms GetPowerCooldown_Parms;

	this->ProcessEvent ( pFnGetPowerCooldown, &GetPowerCooldown_Parms, NULL );

	if ( Cooldown )
		*Cooldown = GetPowerCooldown_Parms.Cooldown;

	return GetPowerCooldown_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.EndPhase
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ePhase                         ( CPF_Parm )
// class AActor*                  oCaster                        ( CPF_Parm )

bool UBioPowerScript::eventEndPhase ( unsigned char ePhase, class AActor* oCaster )
{
	static UFunction* pFnEndPhase = NULL;

	if ( ! pFnEndPhase )
		pFnEndPhase = (UFunction*) UObject::GObjObjects()->Data[ 43036 ];

	UBioPowerScript_eventEndPhase_Parms EndPhase_Parms;
	EndPhase_Parms.ePhase = ePhase;
	EndPhase_Parms.oCaster = oCaster;

	this->ProcessEvent ( pFnEndPhase, &EndPhase_Parms, NULL );

	return EndPhase_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.StartPhase
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ePhase                         ( CPF_Parm )
// class AActor*                  oCaster                        ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )

bool UBioPowerScript::eventStartPhase ( unsigned char ePhase, class AActor* oCaster, float fDuration )
{
	static UFunction* pFnStartPhase = NULL;

	if ( ! pFnStartPhase )
		pFnStartPhase = (UFunction*) UObject::GObjObjects()->Data[ 43031 ];

	UBioPowerScript_eventStartPhase_Parms StartPhase_Parms;
	StartPhase_Parms.ePhase = ePhase;
	StartPhase_Parms.oCaster = oCaster;
	StartPhase_Parms.fDuration = fDuration;

	this->ProcessEvent ( pFnStartPhase, &StartPhase_Parms, NULL );

	return StartPhase_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.CanStartPower
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )

bool UBioPowerScript::eventCanStartPower ( class AActor* oCaster )
{
	static UFunction* pFnCanStartPower = NULL;

	if ( ! pFnCanStartPower )
		pFnCanStartPower = (UFunction*) UObject::GObjObjects()->Data[ 43028 ];

	UBioPowerScript_eventCanStartPower_Parms CanStartPower_Parms;
	CanStartPower_Parms.oCaster = oCaster;

	this->ProcessEvent ( pFnCanStartPower, &CanStartPower_Parms, NULL );

	return CanStartPower_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScript.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UBioPowerScript::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 43026 ];

	UBioPowerScript_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.BioPowerScript.OnProjectileExploded
// [0x00020000] 
// Parameters infos:
// class AActor*                  oCaster                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FVector                 Velocity                       ( CPF_Parm )

void UBioPowerScript::OnProjectileExploded ( class AActor* oCaster, struct FVector HitLocation, struct FVector HitNormal, struct FVector Velocity )
{
	static UFunction* pFnOnProjectileExploded = NULL;

	if ( ! pFnOnProjectileExploded )
		pFnOnProjectileExploded = (UFunction*) UObject::GObjObjects()->Data[ 43021 ];

	UBioPowerScript_execOnProjectileExploded_Parms OnProjectileExploded_Parms;
	OnProjectileExploded_Parms.oCaster = oCaster;
	memcpy ( &OnProjectileExploded_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &OnProjectileExploded_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &OnProjectileExploded_Parms.Velocity, &Velocity, 0xC );

	this->ProcessEvent ( pFnOnProjectileExploded, &OnProjectileExploded_Parms, NULL );
};

// Function SFXGame.BioPowerScript.OnWeaponReload
// [0x00020000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// unsigned long                  QuickReload                    ( CPF_Parm )

void UBioPowerScript::OnWeaponReload ( class ASFXWeapon* Weapon, unsigned long QuickReload )
{
	static UFunction* pFnOnWeaponReload = NULL;

	if ( ! pFnOnWeaponReload )
		pFnOnWeaponReload = (UFunction*) UObject::GObjObjects()->Data[ 43018 ];

	UBioPowerScript_execOnWeaponReload_Parms OnWeaponReload_Parms;
	OnWeaponReload_Parms.Weapon = Weapon;
	OnWeaponReload_Parms.QuickReload = QuickReload;

	this->ProcessEvent ( pFnOnWeaponReload, &OnWeaponReload_Parms, NULL );
};

// Function SFXGame.BioPowerScript.OnWeaponUnequip
// [0x00020000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void UBioPowerScript::OnWeaponUnequip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponUnequip = NULL;

	if ( ! pFnOnWeaponUnequip )
		pFnOnWeaponUnequip = (UFunction*) UObject::GObjObjects()->Data[ 43016 ];

	UBioPowerScript_execOnWeaponUnequip_Parms OnWeaponUnequip_Parms;
	OnWeaponUnequip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponUnequip, &OnWeaponUnequip_Parms, NULL );
};

// Function SFXGame.BioPowerScript.OnWeaponEquip
// [0x00020000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void UBioPowerScript::OnWeaponEquip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponEquip = NULL;

	if ( ! pFnOnWeaponEquip )
		pFnOnWeaponEquip = (UFunction*) UObject::GObjObjects()->Data[ 43014 ];

	UBioPowerScript_execOnWeaponEquip_Parms OnWeaponEquip_Parms;
	OnWeaponEquip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponEquip, &OnWeaponEquip_Parms, NULL );
};

// Function SFXGame.BioPowerScript.OnWeaponImpact
// [0x00020000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void UBioPowerScript::OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact )
{
	static UFunction* pFnOnWeaponImpact = NULL;

	if ( ! pFnOnWeaponImpact )
		pFnOnWeaponImpact = (UFunction*) UObject::GObjObjects()->Data[ 43011 ];

	UBioPowerScript_execOnWeaponImpact_Parms OnWeaponImpact_Parms;
	OnWeaponImpact_Parms.Weapon = Weapon;
	memcpy ( &OnWeaponImpact_Parms.Impact, &Impact, 0x44 );

	this->ProcessEvent ( pFnOnWeaponImpact, &OnWeaponImpact_Parms, NULL );
};

// Function SFXGame.BioPowerScript.InitializePowerScript
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioPowerScript::eventInitializePowerScript ( )
{
	static UFunction* pFnInitializePowerScript = NULL;

	if ( ! pFnInitializePowerScript )
		pFnInitializePowerScript = (UFunction*) UObject::GObjObjects()->Data[ 43010 ];

	UBioPowerScript_eventInitializePowerScript_Parms InitializePowerScript_Parms;

	this->ProcessEvent ( pFnInitializePowerScript, &InitializePowerScript_Parms, NULL );
};

// Function SFXGame.BioMaterialOverride.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* UBioMaterialOverride::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 38254 ];

	UBioMaterialOverride_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffect.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffect::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36269 ];

	UBioGameEffect_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffect.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffect::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36266 ];

	UBioGameEffect_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffect.GetActorFromTarget
// [0x00080400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class AActor* UBioGameEffect::GetActorFromTarget ( class UObject* oTarget )
{
	static UFunction* pFnGetActorFromTarget = NULL;

	if ( ! pFnGetActorFromTarget )
		pFnGetActorFromTarget = (UFunction*) UObject::GObjObjects()->Data[ 36263 ];

	UBioGameEffect_execGetActorFromTarget_Parms GetActorFromTarget_Parms;
	GetActorFromTarget_Parms.oTarget = oTarget;

	pFnGetActorFromTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorFromTarget, &GetActorFromTarget_Parms, NULL );

	pFnGetActorFromTarget->FunctionFlags |= 0x400;

	return GetActorFromTarget_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffect.Scale
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nRank                          ( CPF_Parm )

void UBioGameEffect::Scale ( int nRank )
{
	static UFunction* pFnScale = NULL;

	if ( ! pFnScale )
		pFnScale = (UFunction*) UObject::GObjObjects()->Data[ 36261 ];

	UBioGameEffect_execScale_Parms Scale_Parms;
	Scale_Parms.nRank = nRank;

	pFnScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScale, &Scale_Parms, NULL );

	pFnScale->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffect.SetScalingData
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBio2DA*                 pEffectLevels2DA               ( CPF_Parm )
// TArray< int >                  aEffectLevelRows               ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            maxRanks                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void UBioGameEffect::SetScalingData ( class UBio2DA* pEffectLevels2DA, TArray< int >* aEffectLevelRows, int* maxRanks )
{
	static UFunction* pFnSetScalingData = NULL;

	if ( ! pFnSetScalingData )
		pFnSetScalingData = (UFunction*) UObject::GObjObjects()->Data[ 36256 ];

	UBioGameEffect_execSetScalingData_Parms SetScalingData_Parms;
	SetScalingData_Parms.pEffectLevels2DA = pEffectLevels2DA;

	pFnSetScalingData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalingData, &SetScalingData_Parms, NULL );

	pFnSetScalingData->FunctionFlags |= 0x400;

	if ( aEffectLevelRows )
		memcpy ( aEffectLevelRows, &SetScalingData_Parms.aEffectLevelRows, 0xC );

	if ( maxRanks )
		*maxRanks = SetScalingData_Parms.maxRanks;
};

// Function SFXGame.BioGameEffect.Update
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_OptionalParm | CPF_Parm )

void UBioGameEffect::eventUpdate ( class UObject* oTarget )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 36254 ];

	UBioGameEffect_eventUpdate_Parms Update_Parms;
	Update_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioGameEffect.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )
// float                          fDeltaTime                     ( CPF_Parm )

void UBioGameEffect::eventTick ( class UObject* oTarget, float fDeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 36251 ];

	UBioGameEffect_eventTick_Parms Tick_Parms;
	Tick_Parms.oTarget = oTarget;
	Tick_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.BioGameEffectAddForce.GetClosestBone
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

struct FName UBioGameEffectAddForce::GetClosestBone ( class AActor* oTarget )
{
	static UFunction* pFnGetClosestBone = NULL;

	if ( ! pFnGetClosestBone )
		pFnGetClosestBone = (UFunction*) UObject::GObjObjects()->Data[ 36305 ];

	UBioGameEffectAddForce_execGetClosestBone_Parms GetClosestBone_Parms;
	GetClosestBone_Parms.oTarget = oTarget;

	pFnGetClosestBone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClosestBone, &GetClosestBone_Parms, NULL );

	pFnGetClosestBone->FunctionFlags |= 0x400;

	return GetClosestBone_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectAddForce.Decelerate
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )

void UBioGameEffectAddForce::Decelerate ( class AActor* oActor )
{
	static UFunction* pFnDecelerate = NULL;

	if ( ! pFnDecelerate )
		pFnDecelerate = (UFunction*) UObject::GObjObjects()->Data[ 36303 ];

	UBioGameEffectAddForce_execDecelerate_Parms Decelerate_Parms;
	Decelerate_Parms.oActor = oActor;

	pFnDecelerate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecelerate, &Decelerate_Parms, NULL );

	pFnDecelerate->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAddForce.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )
// float                          fDeltaTime                     ( CPF_Parm )

void UBioGameEffectAddForce::Tick ( class UObject* oTarget, float fDeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 36300 ];

	UBioGameEffectAddForce_execTick_Parms Tick_Parms;
	Tick_Parms.oTarget = oTarget;
	Tick_Parms.fDeltaTime = fDeltaTime;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAddForce.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectAddForce::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36298 ];

	UBioGameEffectAddForce_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAddForce.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectAddForce::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36295 ];

	UBioGameEffectAddForce_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectAddForce.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )
// struct FVector                 vForce                         ( CPF_Parm )
// struct FName                   nmBoneName                     ( CPF_Parm )
// struct FVector                 vPosition                      ( CPF_Parm )
// struct FVector                 vDestination                   ( CPF_Parm )
// unsigned long                  bDecelerateAtDestination       ( CPF_Parm )
// struct FVector                 vDeceleration                  ( CPF_Parm )
// float                          fMinVelocity                   ( CPF_Parm )
// class AActor*                  oInstigator                    ( CPF_Parm )
// unsigned long                  bApplyToAllBones               ( CPF_Parm )

void UBioGameEffectAddForce::eventCreate ( class UBioGameProperty* oProperty, struct FVector vForce, struct FName nmBoneName, struct FVector vPosition, struct FVector vDestination, unsigned long bDecelerateAtDestination, struct FVector vDeceleration, float fMinVelocity, class AActor* oInstigator, unsigned long bApplyToAllBones )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36283 ];

	UBioGameEffectAddForce_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;
	memcpy ( &Create_Parms.vForce, &vForce, 0xC );
	memcpy ( &Create_Parms.nmBoneName, &nmBoneName, 0x8 );
	memcpy ( &Create_Parms.vPosition, &vPosition, 0xC );
	memcpy ( &Create_Parms.vDestination, &vDestination, 0xC );
	Create_Parms.bDecelerateAtDestination = bDecelerateAtDestination;
	memcpy ( &Create_Parms.vDeceleration, &vDeceleration, 0xC );
	Create_Parms.fMinVelocity = fMinVelocity;
	Create_Parms.oInstigator = oInstigator;
	Create_Parms.bApplyToAllBones = bApplyToAllBones;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectAddItemProperty.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectAddItemProperty::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36312 ];

	UBioGameEffectAddItemProperty_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAddItemProperty.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectAddItemProperty::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36309 ];

	UBioGameEffectAddItemProperty_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectAttribute.GetAttributes
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioAttributes*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UBioAttributes* UBioGameEffectAttribute::GetAttributes ( class UObject* oTarget )
{
	static UFunction* pFnGetAttributes = NULL;

	if ( ! pFnGetAttributes )
		pFnGetAttributes = (UFunction*) UObject::GObjObjects()->Data[ 36329 ];

	UBioGameEffectAttribute_execGetAttributes_Parms GetAttributes_Parms;
	GetAttributes_Parms.oTarget = oTarget;

	pFnGetAttributes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAttributes, &GetAttributes_Parms, NULL );

	pFnGetAttributes->FunctionFlags |= 0x400;

	return GetAttributes_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectAttribute.StaticGetAttributes
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioAttributes*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )
// unsigned char                  eType                          ( CPF_Parm )

class UBioAttributes* UBioGameEffectAttribute::StaticGetAttributes ( class UObject* oTarget, unsigned char eType )
{
	static UFunction* pFnStaticGetAttributes = NULL;

	if ( ! pFnStaticGetAttributes )
		pFnStaticGetAttributes = (UFunction*) UObject::GObjObjects()->Data[ 36325 ];

	UBioGameEffectAttribute_execStaticGetAttributes_Parms StaticGetAttributes_Parms;
	StaticGetAttributes_Parms.oTarget = oTarget;
	StaticGetAttributes_Parms.eType = eType;

	pFnStaticGetAttributes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStaticGetAttributes, &StaticGetAttributes_Parms, NULL );

	pFnStaticGetAttributes->FunctionFlags |= 0x400;

	return StaticGetAttributes_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectAttribute.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectAttribute::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36323 ];

	UBioGameEffectAttribute_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAttribute.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectAttribute::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36320 ];

	UBioGameEffectAttribute_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectAttributeBool.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )
// unsigned long                  bValue                         ( CPF_Parm )
// struct FName                   nmAttributeName                ( CPF_Parm )
// unsigned char                  eType                          ( CPF_Parm )
// unsigned long                  bSetToOppositeOnUnapply        ( CPF_Parm )

void UBioGameEffectAttributeBool::eventCreate ( class UBioGameProperty* oProperty, unsigned long bValue, struct FName nmAttributeName, unsigned char eType, unsigned long bSetToOppositeOnUnapply )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36340 ];

	UBioGameEffectAttributeBool_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;
	Create_Parms.bValue = bValue;
	memcpy ( &Create_Parms.nmAttributeName, &nmAttributeName, 0x8 );
	Create_Parms.eType = eType;
	Create_Parms.bSetToOppositeOnUnapply = bSetToOppositeOnUnapply;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectAttributeBool.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectAttributeBool::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36338 ];

	UBioGameEffectAttributeBool_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAttributeBool.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectAttributeBool::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36335 ];

	UBioGameEffectAttributeBool_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectAttributeByte.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )
// unsigned char                  Value                          ( CPF_Parm )
// struct FName                   nmAttributeName                ( CPF_Parm )
// unsigned char                  eType                          ( CPF_Parm )
// unsigned long                  bZeroOnUnapply                 ( CPF_Parm )

void UBioGameEffectAttributeByte::eventCreate ( class UBioGameProperty* oProperty, unsigned char Value, struct FName nmAttributeName, unsigned char eType, unsigned long bZeroOnUnapply )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36354 ];

	UBioGameEffectAttributeByte_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;
	Create_Parms.Value = Value;
	memcpy ( &Create_Parms.nmAttributeName, &nmAttributeName, 0x8 );
	Create_Parms.eType = eType;
	Create_Parms.bZeroOnUnapply = bZeroOnUnapply;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectAttributeByte.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectAttributeByte::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36352 ];

	UBioGameEffectAttributeByte_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAttributeByte.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectAttributeByte::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36349 ];

	UBioGameEffectAttributeByte_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectAttributeString.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectAttributeString::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36365 ];

	UBioGameEffectAttributeString_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAttributeString.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectAttributeString::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36362 ];

	UBioGameEffectAttributeString_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectAttributeEnum.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectAttributeEnum::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36367 ];

	UBioGameEffectAttributeEnum_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectAttributeNumeric.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectAttributeNumeric::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36377 ];

	UBioGameEffectAttributeNumeric_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAttributeNumeric.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectAttributeNumeric::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36374 ];

	UBioGameEffectAttributeNumeric_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectAttributeFloat.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        gp                             ( CPF_Parm )
// float                          fValue                         ( CPF_Parm )
// struct FName                   nmAttributeName                ( CPF_Parm )
// unsigned char                  eAspect                        ( CPF_Parm )
// unsigned char                  eModifier                      ( CPF_Parm )
// unsigned char                  eType                          ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm )

void UBioGameEffectAttributeFloat::eventCreate ( class UBioGameProperty* gp, float fValue, struct FName nmAttributeName, unsigned char eAspect, unsigned char eModifier, unsigned char eType, int nIndex )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36385 ];

	UBioGameEffectAttributeFloat_eventCreate_Parms Create_Parms;
	Create_Parms.gp = gp;
	Create_Parms.fValue = fValue;
	memcpy ( &Create_Parms.nmAttributeName, &nmAttributeName, 0x8 );
	Create_Parms.eAspect = eAspect;
	Create_Parms.eModifier = eModifier;
	Create_Parms.eType = eType;
	Create_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectAttributeFloat.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectAttributeFloat::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36383 ];

	UBioGameEffectAttributeFloat_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAttributeFloat.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectAttributeFloat::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36380 ];

	UBioGameEffectAttributeFloat_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectAttributeInt.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        gp                             ( CPF_Parm )
// int                            nValue                         ( CPF_Parm )
// struct FName                   nmAttributeName                ( CPF_Parm )
// unsigned char                  eAspect                        ( CPF_Parm )
// unsigned char                  eModifier                      ( CPF_Parm )
// unsigned char                  eType                          ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm )
// unsigned long                  bSetToZeroOnUnapply            ( CPF_Parm )

void UBioGameEffectAttributeInt::eventCreate ( class UBioGameProperty* gp, int nValue, struct FName nmAttributeName, unsigned char eAspect, unsigned char eModifier, unsigned char eType, int nIndex, unsigned long bSetToZeroOnUnapply )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36404 ];

	UBioGameEffectAttributeInt_eventCreate_Parms Create_Parms;
	Create_Parms.gp = gp;
	Create_Parms.nValue = nValue;
	memcpy ( &Create_Parms.nmAttributeName, &nmAttributeName, 0x8 );
	Create_Parms.eAspect = eAspect;
	Create_Parms.eModifier = eModifier;
	Create_Parms.eType = eType;
	Create_Parms.nIndex = nIndex;
	Create_Parms.bSetToZeroOnUnapply = bSetToZeroOnUnapply;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectAttributeInt.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectAttributeInt::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36402 ];

	UBioGameEffectAttributeInt_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAttributeInt.RemoveModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioAttributes*          attribs                        ( CPF_Parm )

void UBioGameEffectAttributeInt::RemoveModifier ( class UBioAttributes* attribs )
{
	static UFunction* pFnRemoveModifier = NULL;

	if ( ! pFnRemoveModifier )
		pFnRemoveModifier = (UFunction*) UObject::GObjObjects()->Data[ 36400 ];

	UBioGameEffectAttributeInt_execRemoveModifier_Parms RemoveModifier_Parms;
	RemoveModifier_Parms.attribs = attribs;

	pFnRemoveModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveModifier, &RemoveModifier_Parms, NULL );

	pFnRemoveModifier->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAttributeInt.AddModifier
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioAttributes*          attribs                        ( CPF_Parm )

void UBioGameEffectAttributeInt::AddModifier ( class UBioAttributes* attribs )
{
	static UFunction* pFnAddModifier = NULL;

	if ( ! pFnAddModifier )
		pFnAddModifier = (UFunction*) UObject::GObjObjects()->Data[ 36398 ];

	UBioGameEffectAttributeInt_execAddModifier_Parms AddModifier_Parms;
	AddModifier_Parms.attribs = attribs;

	pFnAddModifier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddModifier, &AddModifier_Parms, NULL );

	pFnAddModifier->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAttributeInt.SetBase
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioAttributes*          attribs                        ( CPF_Parm )

void UBioGameEffectAttributeInt::SetBase ( class UBioAttributes* attribs )
{
	static UFunction* pFnSetBase = NULL;

	if ( ! pFnSetBase )
		pFnSetBase = (UFunction*) UObject::GObjObjects()->Data[ 36396 ];

	UBioGameEffectAttributeInt_execSetBase_Parms SetBase_Parms;
	SetBase_Parms.attribs = attribs;

	pFnSetBase->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBase, &SetBase_Parms, NULL );

	pFnSetBase->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAttributeName.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )
// struct FName                   nmValue                        ( CPF_Parm )
// struct FName                   nmAttributeName                ( CPF_Parm )
// unsigned char                  eType                          ( CPF_Parm )
// unsigned long                  bSetToNoneOnUnapply            ( CPF_Parm )

void UBioGameEffectAttributeName::eventCreate ( class UBioGameProperty* oProperty, struct FName nmValue, struct FName nmAttributeName, unsigned char eType, unsigned long bSetToNoneOnUnapply )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36421 ];

	UBioGameEffectAttributeName_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;
	memcpy ( &Create_Parms.nmValue, &nmValue, 0x8 );
	memcpy ( &Create_Parms.nmAttributeName, &nmAttributeName, 0x8 );
	Create_Parms.eType = eType;
	Create_Parms.bSetToNoneOnUnapply = bSetToNoneOnUnapply;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectAttributeName.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectAttributeName::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36419 ];

	UBioGameEffectAttributeName_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectAttributeName.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectAttributeName::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36416 ];

	UBioGameEffectAttributeName_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectDisableAI.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectDisableAI::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36439 ];

	UBioGameEffectDisableAI_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectDisableAI.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectDisableAI::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36436 ];

	UBioGameEffectDisableAI_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectDisableAI.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )
// unsigned char                  eType                          ( CPF_Parm )
// struct FName                   nmSubType                      ( CPF_Parm )

void UBioGameEffectDisableAI::eventCreate ( class UBioGameProperty* oProperty, unsigned char eType, struct FName nmSubType )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36431 ];

	UBioGameEffectDisableAI_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;
	Create_Parms.eType = eType;
	memcpy ( &Create_Parms.nmSubType, &nmSubType, 0x8 );

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectDmgVulnerability.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectDmgVulnerability::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36449 ];

	UBioGameEffectDmgVulnerability_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectDmgVulnerability.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectDmgVulnerability::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36446 ];

	UBioGameEffectDmgVulnerability_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectDmgVulnerability.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )
// float                          fDamageVulnerability           ( CPF_Parm )

void UBioGameEffectDmgVulnerability::eventCreate ( class UBioGameProperty* oProperty, float fDamageVulnerability )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36442 ];

	UBioGameEffectDmgVulnerability_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;
	Create_Parms.fDamageVulnerability = fDamageVulnerability;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectGiveGP.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectGiveGP::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36457 ];

	UBioGameEffectGiveGP_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectGiveGP.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectGiveGP::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36454 ];

	UBioGameEffectGiveGP_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectGiveGP.SetGP
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UBioGameProperty*        pGP                            ( CPF_Parm )

void UBioGameEffectGiveGP::SetGP ( class UBioGameProperty* pGP )
{
	static UFunction* pFnSetGP = NULL;

	if ( ! pFnSetGP )
		pFnSetGP = (UFunction*) UObject::GObjObjects()->Data[ 36452 ];

	UBioGameEffectGiveGP_execSetGP_Parms SetGP_Parms;
	SetGP_Parms.pGP = pGP;

	this->ProcessEvent ( pFnSetGP, &SetGP_Parms, NULL );
};

// Function SFXGame.BioGameEffectHackAI.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )
// class UBioEpicPawnBehavior*    oHacker                        ( CPF_Parm )

void UBioGameEffectHackAI::eventCreate ( class UBioGameProperty* oProperty, class UBioEpicPawnBehavior* oHacker )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36468 ];

	UBioGameEffectHackAI_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;
	Create_Parms.oHacker = oHacker;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectHackAI.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 pTarget                        ( CPF_Parm )

void UBioGameEffectHackAI::Unapply ( class UObject* pTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36466 ];

	UBioGameEffectHackAI_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.pTarget = pTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectHackAI.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 pTarget                        ( CPF_Parm )

class UObject* UBioGameEffectHackAI::Apply ( class UObject* pTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36463 ];

	UBioGameEffectHackAI_execApply_Parms Apply_Parms;
	Apply_Parms.pTarget = pTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectHackAI.InitializeHackAI
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioEpicPawnBehavior*    pSourceBehavior                ( CPF_Parm )

void UBioGameEffectHackAI::eventInitializeHackAI ( class UBioEpicPawnBehavior* pSourceBehavior )
{
	static UFunction* pFnInitializeHackAI = NULL;

	if ( ! pFnInitializeHackAI )
		pFnInitializeHackAI = (UFunction*) UObject::GObjObjects()->Data[ 36461 ];

	UBioGameEffectHackAI_eventInitializeHackAI_Parms InitializeHackAI_Parms;
	InitializeHackAI_Parms.pSourceBehavior = pSourceBehavior;

	this->ProcessEvent ( pFnInitializeHackAI, &InitializeHackAI_Parms, NULL );
};

// Function SFXGame.BioGameEffectHeadExplode.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectHeadExplode::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36475 ];

	UBioGameEffectHeadExplode_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectHeadExplode.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectHeadExplode::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36472 ];

	UBioGameEffectHeadExplode_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectHeal.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectHeal::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36484 ];

	UBioGameEffectHeal_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectHeal.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )
// float                          fHealthAmount                  ( CPF_Parm )
// int                            nResourcesRequired             ( CPF_Parm )

void UBioGameEffectHeal::eventCreate ( class UBioGameProperty* oProperty, float fHealthAmount, int nResourcesRequired )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36479 ];

	UBioGameEffectHeal_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;
	Create_Parms.fHealthAmount = fHealthAmount;
	Create_Parms.nResourcesRequired = nResourcesRequired;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectImporter.CreateGameEffect
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UBioGameEffect*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 _outer                         ( CPF_Parm )
// class UBio2DA*                 gameEffectTable                ( CPF_Parm )
// int                            nGameEffectID                  ( CPF_Parm )
// unsigned long                  bUseInstantGamePropertyAllocator ( CPF_Parm )

class UBioGameEffect* UBioGameEffectImporter::CreateGameEffect ( class UObject* _outer, class UBio2DA* gameEffectTable, int nGameEffectID, unsigned long bUseInstantGamePropertyAllocator )
{
	static UFunction* pFnCreateGameEffect = NULL;

	if ( ! pFnCreateGameEffect )
		pFnCreateGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 36488 ];

	UBioGameEffectImporter_execCreateGameEffect_Parms CreateGameEffect_Parms;
	CreateGameEffect_Parms._outer = _outer;
	CreateGameEffect_Parms.gameEffectTable = gameEffectTable;
	CreateGameEffect_Parms.nGameEffectID = nGameEffectID;
	CreateGameEffect_Parms.bUseInstantGamePropertyAllocator = bUseInstantGamePropertyAllocator;

	pFnCreateGameEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateGameEffect, &CreateGameEffect_Parms, NULL );

	pFnCreateGameEffect->FunctionFlags |= 0x400;

	return CreateGameEffect_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectModifyGravity.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectModifyGravity::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36515 ];

	UBioGameEffectModifyGravity_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectModifyGravity.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectModifyGravity::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36512 ];

	UBioGameEffectModifyGravity_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectModifyGravity.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )
// float                          fScalingValue                  ( CPF_Parm )

void UBioGameEffectModifyGravity::eventCreate ( class UBioGameProperty* oProperty, float fScalingValue )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36508 ];

	UBioGameEffectModifyGravity_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;
	Create_Parms.fScalingValue = fScalingValue;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectPoolAllocator.FreeGEAttributeInt
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioGameEffect*          IntGE                          ( CPF_Parm )

bool UBioGameEffectPoolAllocator::FreeGEAttributeInt ( class UBioGameEffect* IntGE )
{
	static UFunction* pFnFreeGEAttributeInt = NULL;

	if ( ! pFnFreeGEAttributeInt )
		pFnFreeGEAttributeInt = (UFunction*) UObject::GObjObjects()->Data[ 36532 ];

	UBioGameEffectPoolAllocator_execFreeGEAttributeInt_Parms FreeGEAttributeInt_Parms;
	FreeGEAttributeInt_Parms.IntGE = IntGE;

	pFnFreeGEAttributeInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreeGEAttributeInt, &FreeGEAttributeInt_Parms, NULL );

	pFnFreeGEAttributeInt->FunctionFlags |= 0x400;

	return FreeGEAttributeInt_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectPoolAllocator.FreeGEAttributeFloat
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioGameEffect*          FloatGE                        ( CPF_Parm )

bool UBioGameEffectPoolAllocator::FreeGEAttributeFloat ( class UBioGameEffect* FloatGE )
{
	static UFunction* pFnFreeGEAttributeFloat = NULL;

	if ( ! pFnFreeGEAttributeFloat )
		pFnFreeGEAttributeFloat = (UFunction*) UObject::GObjObjects()->Data[ 36529 ];

	UBioGameEffectPoolAllocator_execFreeGEAttributeFloat_Parms FreeGEAttributeFloat_Parms;
	FreeGEAttributeFloat_Parms.FloatGE = FloatGE;

	pFnFreeGEAttributeFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFreeGEAttributeFloat, &FreeGEAttributeFloat_Parms, NULL );

	pFnFreeGEAttributeFloat->FunctionFlags |= 0x400;

	return FreeGEAttributeFloat_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectPoolAllocator.AllocateGEAttributeInt
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioGameEffectAttributeInt* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioGameEffectAttributeInt* UBioGameEffectPoolAllocator::AllocateGEAttributeInt ( )
{
	static UFunction* pFnAllocateGEAttributeInt = NULL;

	if ( ! pFnAllocateGEAttributeInt )
		pFnAllocateGEAttributeInt = (UFunction*) UObject::GObjObjects()->Data[ 36527 ];

	UBioGameEffectPoolAllocator_execAllocateGEAttributeInt_Parms AllocateGEAttributeInt_Parms;

	pFnAllocateGEAttributeInt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllocateGEAttributeInt, &AllocateGEAttributeInt_Parms, NULL );

	pFnAllocateGEAttributeInt->FunctionFlags |= 0x400;

	return AllocateGEAttributeInt_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectPoolAllocator.AllocateGEAttributeFloat
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioGameEffectAttributeFloat* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioGameEffectAttributeFloat* UBioGameEffectPoolAllocator::AllocateGEAttributeFloat ( )
{
	static UFunction* pFnAllocateGEAttributeFloat = NULL;

	if ( ! pFnAllocateGEAttributeFloat )
		pFnAllocateGEAttributeFloat = (UFunction*) UObject::GObjObjects()->Data[ 36525 ];

	UBioGameEffectPoolAllocator_execAllocateGEAttributeFloat_Parms AllocateGEAttributeFloat_Parms;

	pFnAllocateGEAttributeFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllocateGEAttributeFloat, &AllocateGEAttributeFloat_Parms, NULL );

	pFnAllocateGEAttributeFloat->FunctionFlags |= 0x400;

	return AllocateGEAttributeFloat_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectPowerAttributeBool.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectPowerAttributeBool::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36539 ];

	UBioGameEffectPowerAttributeBool_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectPowerAttributeBool.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectPowerAttributeBool::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36536 ];

	UBioGameEffectPowerAttributeBool_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectPowerAttributeFloat.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectPowerAttributeFloat::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36545 ];

	UBioGameEffectPowerAttributeFloat_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectPowerAttributeFloat.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectPowerAttributeFloat::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36542 ];

	UBioGameEffectPowerAttributeFloat_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectPowerAttributeSet.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectPowerAttributeSet::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36570 ];

	UBioGameEffectPowerAttributeSet_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectPowerAttributeSet.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectPowerAttributeSet::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36567 ];

	UBioGameEffectPowerAttributeSet_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectPowerBuildUp.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )
// float                          fDeltaTime                     ( CPF_Parm )

void UBioGameEffectPowerBuildUp::Tick ( class UObject* oTarget, float fDeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 36585 ];

	UBioGameEffectPowerBuildUp_execTick_Parms Tick_Parms;
	Tick_Parms.oTarget = oTarget;
	Tick_Parms.fDeltaTime = fDeltaTime;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectPowerBuildUp.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectPowerBuildUp::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36583 ];

	UBioGameEffectPowerBuildUp_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectPowerBuildUp.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectPowerBuildUp::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36580 ];

	UBioGameEffectPowerBuildUp_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectPowerBuildUp.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )
// class UBioPower*               oPower                         ( CPF_Parm )
// float                          fTimeOut                       ( CPF_Parm )

void UBioGameEffectPowerBuildUp::eventCreate ( class UBioGameProperty* oProperty, class UBioPower* oPower, float fTimeOut )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36575 ];

	UBioGameEffectPowerBuildUp_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;
	Create_Parms.oPower = oPower;
	Create_Parms.fTimeOut = fTimeOut;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectPowerGive.Create
// [0x00022002] 
// Parameters infos:
// class UBioGameProperty*        gp                             ( CPF_Parm )
// struct FName                   PowerName                      ( CPF_Parm )

void UBioGameEffectPowerGive::Create ( class UBioGameProperty* gp, struct FName PowerName )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36592 ];

	UBioGameEffectPowerGive_execCreate_Parms Create_Parms;
	Create_Parms.gp = gp;
	memcpy ( &Create_Parms.PowerName, &PowerName, 0x8 );

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectPowerGive.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectPowerGive::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36589 ];

	UBioGameEffectPowerGive_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectPowerParameter.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectPowerParameter::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36600 ];

	UBioGameEffectPowerParameter_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectPowerParameter.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectPowerParameter::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36597 ];

	UBioGameEffectPowerParameter_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectPowerText.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectPowerText::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36610 ];

	UBioGameEffectPowerText_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectPowerText.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectPowerText::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36607 ];

	UBioGameEffectPowerText_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectPowerText.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )

void UBioGameEffectPowerText::eventCreate ( class UBioGameProperty* oProperty )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36603 ];

	UBioGameEffectPowerText_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectRagdoll.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectRagdoll::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36619 ];

	UBioGameEffectRagdoll_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectRagdoll.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectRagdoll::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36616 ];

	UBioGameEffectRagdoll_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectRagdoll.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )

void UBioGameEffectRagdoll::eventCreate ( class UBioGameProperty* oProperty )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36613 ];

	UBioGameEffectRagdoll_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectRegenerateShield.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectRegenerateShield::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36626 ];

	UBioGameEffectRegenerateShield_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectRegenerateShield.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )
// float                          fAmount                        ( CPF_Parm )

void UBioGameEffectRegenerateShield::eventCreate ( class UBioGameProperty* oProperty, float fAmount )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36622 ];

	UBioGameEffectRegenerateShield_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;
	Create_Parms.fAmount = fAmount;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectSetMaterialParameterColor.Apply
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 pTarget                        ( CPF_Parm )

class UObject* UBioGameEffectSetMaterialParameterColor::eventApply ( class UObject* pTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36634 ];

	UBioGameEffectSetMaterialParameterColor_eventApply_Parms Apply_Parms;
	Apply_Parms.pTarget = pTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectSetMaterialParameterScalar.Apply
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 pTarget                        ( CPF_Parm )

class UObject* UBioGameEffectSetMaterialParameterScalar::eventApply ( class UObject* pTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36638 ];

	UBioGameEffectSetMaterialParameterScalar_eventApply_Parms Apply_Parms;
	Apply_Parms.pTarget = pTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectSetMaterialParameterTexture.Apply
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 pTarget                        ( CPF_Parm )

class UObject* UBioGameEffectSetMaterialParameterTexture::eventApply ( class UObject* pTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36642 ];

	UBioGameEffectSetMaterialParameterTexture_eventApply_Parms Apply_Parms;
	Apply_Parms.pTarget = pTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectSetProperty.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 pTarget                        ( CPF_Parm )

void UBioGameEffectSetProperty::Unapply ( class UObject* pTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36653 ];

	UBioGameEffectSetProperty_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.pTarget = pTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectSetProperty.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 pTarget                        ( CPF_Parm )

class UObject* UBioGameEffectSetProperty::Apply ( class UObject* pTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36650 ];

	UBioGameEffectSetProperty_execApply_Parms Apply_Parms;
	Apply_Parms.pTarget = pTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectSingularity.MoveActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )

void UBioGameEffectSingularity::MoveActor ( class AActor* oActor )
{
	static UFunction* pFnMoveActor = NULL;

	if ( ! pFnMoveActor )
		pFnMoveActor = (UFunction*) UObject::GObjObjects()->Data[ 36686 ];

	UBioGameEffectSingularity_execMoveActor_Parms MoveActor_Parms;
	MoveActor_Parms.oActor = oActor;

	pFnMoveActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveActor, &MoveActor_Parms, NULL );

	pFnMoveActor->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectSingularity.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )
// float                          fDeltaTime                     ( CPF_Parm )

void UBioGameEffectSingularity::Tick ( class UObject* oTarget, float fDeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 36683 ];

	UBioGameEffectSingularity_execTick_Parms Tick_Parms;
	Tick_Parms.oTarget = oTarget;
	Tick_Parms.fDeltaTime = fDeltaTime;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectSingularity.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameEffectSingularity::Unapply ( class UObject* oTarget )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36681 ];

	UBioGameEffectSingularity_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.oTarget = oTarget;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameEffectSingularity.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectSingularity::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36678 ];

	UBioGameEffectSingularity_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectSingularity.Create
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )
// struct FVector                 vSingularityLocation           ( CPF_Parm )
// float                          fForce                         ( CPF_Parm )
// struct FName                   nmBoneName                     ( CPF_Parm )
// struct FVector                 vPosition                      ( CPF_Parm )
// float                          fForceInterval                 ( CPF_Parm )
// float                          fOuterBubbleRange              ( CPF_Parm )
// float                          fVelocityThresholdOuterBubble  ( CPF_Parm )
// float                          fInnerBubbleRange              ( CPF_Parm )
// float                          fBubbleForce                   ( CPF_Parm )

void UBioGameEffectSingularity::eventCreate ( class UBioGameProperty* oProperty, struct FVector vSingularityLocation, float fForce, struct FName nmBoneName, struct FVector vPosition, float fForceInterval, float fOuterBubbleRange, float fVelocityThresholdOuterBubble, float fInnerBubbleRange, float fBubbleForce )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36666 ];

	UBioGameEffectSingularity_eventCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;
	memcpy ( &Create_Parms.vSingularityLocation, &vSingularityLocation, 0xC );
	Create_Parms.fForce = fForce;
	memcpy ( &Create_Parms.nmBoneName, &nmBoneName, 0x8 );
	memcpy ( &Create_Parms.vPosition, &vPosition, 0xC );
	Create_Parms.fForceInterval = fForceInterval;
	Create_Parms.fOuterBubbleRange = fOuterBubbleRange;
	Create_Parms.fVelocityThresholdOuterBubble = fVelocityThresholdOuterBubble;
	Create_Parms.fInnerBubbleRange = fInnerBubbleRange;
	Create_Parms.fBubbleForce = fBubbleForce;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioGameEffectTakeDamage.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UObject* UBioGameEffectTakeDamage::Apply ( class UObject* oTarget )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36707 ];

	UBioGameEffectTakeDamage_execApply_Parms Apply_Parms;
	Apply_Parms.oTarget = oTarget;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;

	return Apply_Parms.ReturnValue;
};

// Function SFXGame.BioGameEffectTakeDamage.Create
// [0x00022002] 
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )
// float                          fDamage                        ( CPF_Parm )
// class AController*             oInstigatorController          ( CPF_Parm )
// struct FVector                 vHitLocation                   ( CPF_Parm )
// struct FVector                 vMomentum                      ( CPF_Parm )
// class UClass*                  NewDamageClass                 ( CPF_Parm )

void UBioGameEffectTakeDamage::Create ( class UBioGameProperty* oProperty, float fDamage, class AController* oInstigatorController, struct FVector vHitLocation, struct FVector vMomentum, class UClass* NewDamageClass )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36699 ];

	UBioGameEffectTakeDamage_execCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;
	Create_Parms.fDamage = fDamage;
	Create_Parms.oInstigatorController = oInstigatorController;
	memcpy ( &Create_Parms.vHitLocation, &vHitLocation, 0xC );
	memcpy ( &Create_Parms.vMomentum, &vMomentum, 0xC );
	Create_Parms.NewDamageClass = NewDamageClass;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.BioFSM.GetStateByIndex
// [0x00020002] 
// Parameters infos:
// class UBioState*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )

class UBioState* UBioFSM::GetStateByIndex ( int Index )
{
	static UFunction* pFnGetStateByIndex = NULL;

	if ( ! pFnGetStateByIndex )
		pFnGetStateByIndex = (UFunction*) UObject::GObjObjects()->Data[ 36240 ];

	UBioFSM_execGetStateByIndex_Parms GetStateByIndex_Parms;
	GetStateByIndex_Parms.Index = Index;

	this->ProcessEvent ( pFnGetStateByIndex, &GetStateByIndex_Parms, NULL );

	return GetStateByIndex_Parms.ReturnValue;
};

// Function SFXGame.BioFSM.DEBUG_DumpStates
// [0x00020002] 
// Parameters infos:
// class ABioPlayerController*    BPC                            ( CPF_Parm )

void UBioFSM::DEBUG_DumpStates ( class ABioPlayerController* BPC )
{
	static UFunction* pFnDEBUG_DumpStates = NULL;

	if ( ! pFnDEBUG_DumpStates )
		pFnDEBUG_DumpStates = (UFunction*) UObject::GObjObjects()->Data[ 36231 ];

	UBioFSM_execDEBUG_DumpStates_Parms DEBUG_DumpStates_Parms;
	DEBUG_DumpStates_Parms.BPC = BPC;

	this->ProcessEvent ( pFnDEBUG_DumpStates, &DEBUG_DumpStates_Parms, NULL );
};

// Function SFXGame.BioFSM.GetState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioState*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   RequestedState                 ( CPF_Parm )

class UBioState* UBioFSM::eventGetState ( struct FName RequestedState )
{
	static UFunction* pFnGetState = NULL;

	if ( ! pFnGetState )
		pFnGetState = (UFunction*) UObject::GObjObjects()->Data[ 36227 ];

	UBioFSM_eventGetState_Parms GetState_Parms;
	memcpy ( &GetState_Parms.RequestedState, &RequestedState, 0x8 );

	this->ProcessEvent ( pFnGetState, &GetState_Parms, NULL );

	return GetState_Parms.ReturnValue;
};

// Function SFXGame.BioFSMComponent.IsTransitioning
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioFSMComponent::eventIsTransitioning ( )
{
	static UFunction* pFnIsTransitioning = NULL;

	if ( ! pFnIsTransitioning )
		pFnIsTransitioning = (UFunction*) UObject::GObjObjects()->Data[ 31268 ];

	UBioFSMComponent_eventIsTransitioning_Parms IsTransitioning_Parms;

	this->ProcessEvent ( pFnIsTransitioning, &IsTransitioning_Parms, NULL );

	return IsTransitioning_Parms.ReturnValue;
};

// Function SFXGame.BioFSMComponent.CallTransitionDelegate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   From                           ( CPF_Parm )
// struct FName                   To                             ( CPF_Parm )

void UBioFSMComponent::eventCallTransitionDelegate ( struct FName From, struct FName To )
{
	static UFunction* pFnCallTransitionDelegate = NULL;

	if ( ! pFnCallTransitionDelegate )
		pFnCallTransitionDelegate = (UFunction*) UObject::GObjObjects()->Data[ 31265 ];

	UBioFSMComponent_eventCallTransitionDelegate_Parms CallTransitionDelegate_Parms;
	memcpy ( &CallTransitionDelegate_Parms.From, &From, 0x8 );
	memcpy ( &CallTransitionDelegate_Parms.To, &To, 0x8 );

	this->ProcessEvent ( pFnCallTransitionDelegate, &CallTransitionDelegate_Parms, NULL );
};

// Function SFXGame.BioFSMComponent.TransitionStarted
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioFSMComponent::eventTransitionStarted ( )
{
	static UFunction* pFnTransitionStarted = NULL;

	if ( ! pFnTransitionStarted )
		pFnTransitionStarted = (UFunction*) UObject::GObjObjects()->Data[ 31264 ];

	UBioFSMComponent_eventTransitionStarted_Parms TransitionStarted_Parms;

	this->ProcessEvent ( pFnTransitionStarted, &TransitionStarted_Parms, NULL );
};

// Function SFXGame.BioFSMComponent.HasState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ToState                        ( CPF_Parm )

bool UBioFSMComponent::eventHasState ( struct FName ToState )
{
	static UFunction* pFnHasState = NULL;

	if ( ! pFnHasState )
		pFnHasState = (UFunction*) UObject::GObjObjects()->Data[ 31261 ];

	UBioFSMComponent_eventHasState_Parms HasState_Parms;
	memcpy ( &HasState_Parms.ToState, &ToState, 0x8 );

	this->ProcessEvent ( pFnHasState, &HasState_Parms, NULL );

	return HasState_Parms.ReturnValue;
};

// Function SFXGame.BioFSMComponent.SetState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioState*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ToState                        ( CPF_Parm )
// struct FName                   NamedTransition                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  IgnoreTransition               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceStateNow                 ( CPF_OptionalParm | CPF_Parm )

class UBioState* UBioFSMComponent::SetState ( struct FName ToState, struct FName NamedTransition, unsigned long IgnoreTransition, unsigned long bForceStateNow )
{
	static UFunction* pFnSetState = NULL;

	if ( ! pFnSetState )
		pFnSetState = (UFunction*) UObject::GObjObjects()->Data[ 31255 ];

	UBioFSMComponent_execSetState_Parms SetState_Parms;
	memcpy ( &SetState_Parms.ToState, &ToState, 0x8 );
	memcpy ( &SetState_Parms.NamedTransition, &NamedTransition, 0x8 );
	SetState_Parms.IgnoreTransition = IgnoreTransition;
	SetState_Parms.bForceStateNow = bForceStateNow;

	pFnSetState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetState, &SetState_Parms, NULL );

	pFnSetState->FunctionFlags |= 0x400;

	return SetState_Parms.ReturnValue;
};

// Function SFXGame.BioFSMComponent.GetTransition
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioTransition*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ToState                        ( CPF_Parm )
// struct FName                   NamedTransition                ( CPF_OptionalParm | CPF_Parm )

class UBioTransition* UBioFSMComponent::eventGetTransition ( struct FName ToState, struct FName NamedTransition )
{
	static UFunction* pFnGetTransition = NULL;

	if ( ! pFnGetTransition )
		pFnGetTransition = (UFunction*) UObject::GObjObjects()->Data[ 31251 ];

	UBioFSMComponent_eventGetTransition_Parms GetTransition_Parms;
	memcpy ( &GetTransition_Parms.ToState, &ToState, 0x8 );
	memcpy ( &GetTransition_Parms.NamedTransition, &NamedTransition, 0x8 );

	this->ProcessEvent ( pFnGetTransition, &GetTransition_Parms, NULL );

	return GetTransition_Parms.ReturnValue;
};

// Function SFXGame.BioFSMComponent.TransitionComplete
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioFSMComponent::TransitionComplete ( )
{
	static UFunction* pFnTransitionComplete = NULL;

	if ( ! pFnTransitionComplete )
		pFnTransitionComplete = (UFunction*) UObject::GObjObjects()->Data[ 31250 ];

	UBioFSMComponent_execTransitionComplete_Parms TransitionComplete_Parms;

	pFnTransitionComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTransitionComplete, &TransitionComplete_Parms, NULL );

	pFnTransitionComplete->FunctionFlags |= 0x400;
};

// Function SFXGame.BioFSMComponent.OnTransitionDelegate
// [0x00120000] 
// Parameters infos:
// struct FName                   FromState                      ( CPF_Parm )
// struct FName                   ToState                        ( CPF_Parm )
// unsigned long                  bCallCPP                       ( CPF_Parm )

void UBioFSMComponent::OnTransitionDelegate ( struct FName FromState, struct FName ToState, unsigned long bCallCPP )
{
	static UFunction* pFnOnTransitionDelegate = NULL;

	if ( ! pFnOnTransitionDelegate )
		pFnOnTransitionDelegate = (UFunction*) UObject::GObjObjects()->Data[ 31240 ];

	UBioFSMComponent_execOnTransitionDelegate_Parms OnTransitionDelegate_Parms;
	memcpy ( &OnTransitionDelegate_Parms.FromState, &FromState, 0x8 );
	memcpy ( &OnTransitionDelegate_Parms.ToState, &ToState, 0x8 );
	OnTransitionDelegate_Parms.bCallCPP = bCallCPP;

	this->ProcessEvent ( pFnOnTransitionDelegate, &OnTransitionDelegate_Parms, NULL );
};

// Function SFXGame.BioState.GetTransition
// [0x00020002] 
// Parameters infos:
// class UBioTransition*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ToState                        ( CPF_Parm )
// struct FName                   NamedTransition                ( CPF_OptionalParm | CPF_Parm )

class UBioTransition* UBioState::GetTransition ( struct FName ToState, struct FName NamedTransition )
{
	static UFunction* pFnGetTransition = NULL;

	if ( ! pFnGetTransition )
		pFnGetTransition = (UFunction*) UObject::GObjObjects()->Data[ 50037 ];

	UBioState_execGetTransition_Parms GetTransition_Parms;
	memcpy ( &GetTransition_Parms.ToState, &ToState, 0x8 );
	memcpy ( &GetTransition_Parms.NamedTransition, &NamedTransition, 0x8 );

	this->ProcessEvent ( pFnGetTransition, &GetTransition_Parms, NULL );

	return GetTransition_Parms.ReturnValue;
};

// Function SFXGame.BioState.HasTransitionTo
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   ToState                        ( CPF_Parm )
// struct FName                   NamedTransition                ( CPF_OptionalParm | CPF_Parm )

bool UBioState::HasTransitionTo ( struct FName ToState, struct FName NamedTransition )
{
	static UFunction* pFnHasTransitionTo = NULL;

	if ( ! pFnHasTransitionTo )
		pFnHasTransitionTo = (UFunction*) UObject::GObjObjects()->Data[ 50032 ];

	UBioState_execHasTransitionTo_Parms HasTransitionTo_Parms;
	memcpy ( &HasTransitionTo_Parms.ToState, &ToState, 0x8 );
	memcpy ( &HasTransitionTo_Parms.NamedTransition, &NamedTransition, 0x8 );

	this->ProcessEvent ( pFnHasTransitionTo, &HasTransitionTo_Parms, NULL );

	return HasTransitionTo_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.DisableCamera
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDisableCamera                 ( CPF_Parm )

void UBioConversation::eventDisableCamera ( unsigned long bDisableCamera )
{
	static UFunction* pFnDisableCamera = NULL;

	if ( ! pFnDisableCamera )
		pFnDisableCamera = (UFunction*) UObject::GObjObjects()->Data[ 34798 ];

	UBioConversation_eventDisableCamera_Parms DisableCamera_Parms;
	DisableCamera_Parms.bDisableCamera = bDisableCamera;

	this->ProcessEvent ( pFnDisableCamera, &DisableCamera_Parms, NULL );
};

// Function SFXGame.BioConversation.SelectInterruption
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioConversation::SelectInterruption ( )
{
	static UFunction* pFnSelectInterruption = NULL;

	if ( ! pFnSelectInterruption )
		pFnSelectInterruption = (UFunction*) UObject::GObjObjects()->Data[ 34796 ];

	UBioConversation_execSelectInterruption_Parms SelectInterruption_Parms;

	pFnSelectInterruption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectInterruption, &SelectInterruption_Parms, NULL );

	pFnSelectInterruption->FunctionFlags |= 0x400;

	return SelectInterruption_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.NeedToDisplayInterrupt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioConversation::NeedToDisplayInterrupt ( )
{
	static UFunction* pFnNeedToDisplayInterrupt = NULL;

	if ( ! pFnNeedToDisplayInterrupt )
		pFnNeedToDisplayInterrupt = (UFunction*) UObject::GObjObjects()->Data[ 34794 ];

	UBioConversation_execNeedToDisplayInterrupt_Parms NeedToDisplayInterrupt_Parms;

	pFnNeedToDisplayInterrupt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNeedToDisplayInterrupt, &NeedToDisplayInterrupt_Parms, NULL );

	pFnNeedToDisplayInterrupt->FunctionFlags |= 0x400;

	return NeedToDisplayInterrupt_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.SetCustomInterruptWindow
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fStart                         ( CPF_Parm )
// float                          fDuraton                       ( CPF_OptionalParm | CPF_Parm )

void UBioConversation::SetCustomInterruptWindow ( float fStart, float fDuraton )
{
	static UFunction* pFnSetCustomInterruptWindow = NULL;

	if ( ! pFnSetCustomInterruptWindow )
		pFnSetCustomInterruptWindow = (UFunction*) UObject::GObjObjects()->Data[ 34791 ];

	UBioConversation_execSetCustomInterruptWindow_Parms SetCustomInterruptWindow_Parms;
	SetCustomInterruptWindow_Parms.fStart = fStart;
	SetCustomInterruptWindow_Parms.fDuraton = fDuraton;

	pFnSetCustomInterruptWindow->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCustomInterruptWindow, &SetCustomInterruptWindow_Parms, NULL );

	pFnSetCustomInterruptWindow->FunctionFlags |= 0x400;
};

// Function SFXGame.BioConversation.EnableCustomInterruptWindow
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioConversation::EnableCustomInterruptWindow ( )
{
	static UFunction* pFnEnableCustomInterruptWindow = NULL;

	if ( ! pFnEnableCustomInterruptWindow )
		pFnEnableCustomInterruptWindow = (UFunction*) UObject::GObjObjects()->Data[ 34790 ];

	UBioConversation_execEnableCustomInterruptWindow_Parms EnableCustomInterruptWindow_Parms;

	pFnEnableCustomInterruptWindow->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableCustomInterruptWindow, &EnableCustomInterruptWindow_Parms, NULL );

	pFnEnableCustomInterruptWindow->FunctionFlags |= 0x400;
};

// Function SFXGame.BioConversation.TickInterruptionData
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDelta                         ( CPF_Parm )

bool UBioConversation::TickInterruptionData ( float fDelta )
{
	static UFunction* pFnTickInterruptionData = NULL;

	if ( ! pFnTickInterruptionData )
		pFnTickInterruptionData = (UFunction*) UObject::GObjObjects()->Data[ 34787 ];

	UBioConversation_execTickInterruptionData_Parms TickInterruptionData_Parms;
	TickInterruptionData_Parms.fDelta = fDelta;

	pFnTickInterruptionData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickInterruptionData, &TickInterruptionData_Parms, NULL );

	pFnTickInterruptionData->FunctionFlags |= 0x400;

	return TickInterruptionData_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.MissingLipSync
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioConversation::MissingLipSync ( )
{
	static UFunction* pFnMissingLipSync = NULL;

	if ( ! pFnMissingLipSync )
		pFnMissingLipSync = (UFunction*) UObject::GObjObjects()->Data[ 34786 ];

	UBioConversation_execMissingLipSync_Parms MissingLipSync_Parms;

	pFnMissingLipSync->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMissingLipSync, &MissingLipSync_Parms, NULL );

	pFnMissingLipSync->FunctionFlags |= 0x400;
};

// Function SFXGame.BioConversation.MissingVO
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioConversation::MissingVO ( )
{
	static UFunction* pFnMissingVO = NULL;

	if ( ! pFnMissingVO )
		pFnMissingVO = (UFunction*) UObject::GObjObjects()->Data[ 34785 ];

	UBioConversation_execMissingVO_Parms MissingVO_Parms;

	pFnMissingVO->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMissingVO, &MissingVO_Parms, NULL );

	pFnMissingVO->FunctionFlags |= 0x400;
};

// Function SFXGame.BioConversation.GetReplyGUIStyle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

unsigned char UBioConversation::GetReplyGUIStyle ( int nIndex )
{
	static UFunction* pFnGetReplyGUIStyle = NULL;

	if ( ! pFnGetReplyGUIStyle )
		pFnGetReplyGUIStyle = (UFunction*) UObject::GObjObjects()->Data[ 34782 ];

	UBioConversation_execGetReplyGUIStyle_Parms GetReplyGUIStyle_Parms;
	GetReplyGUIStyle_Parms.nIndex = nIndex;

	pFnGetReplyGUIStyle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReplyGUIStyle, &GetReplyGUIStyle_Parms, NULL );

	pFnGetReplyGUIStyle->FunctionFlags |= 0x400;

	return GetReplyGUIStyle_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.FinishEntryNode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nEntryIndex                    ( CPF_Parm )

bool UBioConversation::FinishEntryNode ( int nEntryIndex )
{
	static UFunction* pFnFinishEntryNode = NULL;

	if ( ! pFnFinishEntryNode )
		pFnFinishEntryNode = (UFunction*) UObject::GObjObjects()->Data[ 34779 ];

	UBioConversation_execFinishEntryNode_Parms FinishEntryNode_Parms;
	FinishEntryNode_Parms.nEntryIndex = nEntryIndex;

	pFnFinishEntryNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinishEntryNode, &FinishEntryNode_Parms, NULL );

	pFnFinishEntryNode->FunctionFlags |= 0x400;

	return FinishEntryNode_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.NeedToDisplayReplies
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioConversation::NeedToDisplayReplies ( )
{
	static UFunction* pFnNeedToDisplayReplies = NULL;

	if ( ! pFnNeedToDisplayReplies )
		pFnNeedToDisplayReplies = (UFunction*) UObject::GObjObjects()->Data[ 34777 ];

	UBioConversation_execNeedToDisplayReplies_Parms NeedToDisplayReplies_Parms;

	pFnNeedToDisplayReplies->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNeedToDisplayReplies, &NeedToDisplayReplies_Parms, NULL );

	pFnNeedToDisplayReplies->FunctionFlags |= 0x400;

	return NeedToDisplayReplies_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.StopScript
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Script                         ( CPF_Parm | CPF_NeedCtorLink )

void UBioConversation::StopScript ( struct FString Script )
{
	static UFunction* pFnStopScript = NULL;

	if ( ! pFnStopScript )
		pFnStopScript = (UFunction*) UObject::GObjObjects()->Data[ 34775 ];

	UBioConversation_execStopScript_Parms StopScript_Parms;
	memcpy ( &StopScript_Parms.Script, &Script, 0xC );

	pFnStopScript->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopScript, &StopScript_Parms, NULL );

	pFnStopScript->FunctionFlags |= 0x400;
};

// Function SFXGame.BioConversation.GetReplyExportID
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

int UBioConversation::GetReplyExportID ( int nIndex )
{
	static UFunction* pFnGetReplyExportID = NULL;

	if ( ! pFnGetReplyExportID )
		pFnGetReplyExportID = (UFunction*) UObject::GObjObjects()->Data[ 34772 ];

	UBioConversation_execGetReplyExportID_Parms GetReplyExportID_Parms;
	GetReplyExportID_Parms.nIndex = nIndex;

	pFnGetReplyExportID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReplyExportID, &GetReplyExportID_Parms, NULL );

	pFnGetReplyExportID->FunctionFlags |= 0x400;

	return GetReplyExportID_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.GetReplyCategory
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

int UBioConversation::GetReplyCategory ( int nIndex )
{
	static UFunction* pFnGetReplyCategory = NULL;

	if ( ! pFnGetReplyCategory )
		pFnGetReplyCategory = (UFunction*) UObject::GObjObjects()->Data[ 34769 ];

	UBioConversation_execGetReplyCategory_Parms GetReplyCategory_Parms;
	GetReplyCategory_Parms.nIndex = nIndex;

	pFnGetReplyCategory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReplyCategory, &GetReplyCategory_Parms, NULL );

	pFnGetReplyCategory->FunctionFlags |= 0x400;

	return GetReplyCategory_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.GetReplyParaphraseText
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nIndex                         ( CPF_Parm )

struct FString UBioConversation::GetReplyParaphraseText ( int nIndex )
{
	static UFunction* pFnGetReplyParaphraseText = NULL;

	if ( ! pFnGetReplyParaphraseText )
		pFnGetReplyParaphraseText = (UFunction*) UObject::GObjObjects()->Data[ 34766 ];

	UBioConversation_execGetReplyParaphraseText_Parms GetReplyParaphraseText_Parms;
	GetReplyParaphraseText_Parms.nIndex = nIndex;

	pFnGetReplyParaphraseText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReplyParaphraseText, &GetReplyParaphraseText_Parms, NULL );

	pFnGetReplyParaphraseText->FunctionFlags |= 0x400;

	return GetReplyParaphraseText_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.GetReplyText
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nIndex                         ( CPF_Parm )
// unsigned long                  bParse                         ( CPF_OptionalParm | CPF_Parm )

struct FString UBioConversation::GetReplyText ( int nIndex, unsigned long bParse )
{
	static UFunction* pFnGetReplyText = NULL;

	if ( ! pFnGetReplyText )
		pFnGetReplyText = (UFunction*) UObject::GObjObjects()->Data[ 34762 ];

	UBioConversation_execGetReplyText_Parms GetReplyText_Parms;
	GetReplyText_Parms.nIndex = nIndex;
	GetReplyText_Parms.bParse = bParse;

	pFnGetReplyText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetReplyText, &GetReplyText_Parms, NULL );

	pFnGetReplyText->FunctionFlags |= 0x400;

	return GetReplyText_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.GetEntryText
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bParse                         ( CPF_OptionalParm | CPF_Parm )

struct FString UBioConversation::GetEntryText ( unsigned long bParse )
{
	static UFunction* pFnGetEntryText = NULL;

	if ( ! pFnGetEntryText )
		pFnGetEntryText = (UFunction*) UObject::GObjObjects()->Data[ 34759 ];

	UBioConversation_execGetEntryText_Parms GetEntryText_Parms;
	GetEntryText_Parms.bParse = bParse;

	pFnGetEntryText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEntryText, &GetEntryText_Parms, NULL );

	pFnGetEntryText->FunctionFlags |= 0x400;

	return GetEntryText_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.GetSpeaker
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

class AActor* UBioConversation::GetSpeaker ( int nIndex )
{
	static UFunction* pFnGetSpeaker = NULL;

	if ( ! pFnGetSpeaker )
		pFnGetSpeaker = (UFunction*) UObject::GObjObjects()->Data[ 34756 ];

	UBioConversation_execGetSpeaker_Parms GetSpeaker_Parms;
	GetSpeaker_Parms.nIndex = nIndex;

	pFnGetSpeaker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSpeaker, &GetSpeaker_Parms, NULL );

	pFnGetSpeaker->FunctionFlags |= 0x400;

	return GetSpeaker_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.UpdateFacing
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioConversation::UpdateFacing ( )
{
	static UFunction* pFnUpdateFacing = NULL;

	if ( ! pFnUpdateFacing )
		pFnUpdateFacing = (UFunction*) UObject::GObjObjects()->Data[ 34755 ];

	UBioConversation_execUpdateFacing_Parms UpdateFacing_Parms;

	pFnUpdateFacing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateFacing, &UpdateFacing_Parms, NULL );

	pFnUpdateFacing->FunctionFlags |= 0x400;
};

// Function SFXGame.BioConversation.UpdateLookAtTargets
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioConversation::UpdateLookAtTargets ( float fDeltaT )
{
	static UFunction* pFnUpdateLookAtTargets = NULL;

	if ( ! pFnUpdateLookAtTargets )
		pFnUpdateLookAtTargets = (UFunction*) UObject::GObjObjects()->Data[ 34753 ];

	UBioConversation_execUpdateLookAtTargets_Parms UpdateLookAtTargets_Parms;
	UpdateLookAtTargets_Parms.fDeltaT = fDeltaT;

	pFnUpdateLookAtTargets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateLookAtTargets, &UpdateLookAtTargets_Parms, NULL );

	pFnUpdateLookAtTargets->FunctionFlags |= 0x400;
};

// Function SFXGame.BioConversation.UpdateLookAtList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                pBioPawn                       ( CPF_Parm )

void UBioConversation::UpdateLookAtList ( class ABioPawn* pBioPawn )
{
	static UFunction* pFnUpdateLookAtList = NULL;

	if ( ! pFnUpdateLookAtList )
		pFnUpdateLookAtList = (UFunction*) UObject::GObjObjects()->Data[ 34751 ];

	UBioConversation_execUpdateLookAtList_Parms UpdateLookAtList_Parms;
	UpdateLookAtList_Parms.pBioPawn = pBioPawn;

	pFnUpdateLookAtList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateLookAtList, &UpdateLookAtList_Parms, NULL );

	pFnUpdateLookAtList->FunctionFlags |= 0x400;
};

// Function SFXGame.BioConversation.switchToAmbient
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bWasNonAmbient                 ( CPF_Parm )

void UBioConversation::switchToAmbient ( unsigned long bWasNonAmbient )
{
	static UFunction* pFnswitchToAmbient = NULL;

	if ( ! pFnswitchToAmbient )
		pFnswitchToAmbient = (UFunction*) UObject::GObjObjects()->Data[ 34749 ];

	UBioConversation_execswitchToAmbient_Parms switchToAmbient_Parms;
	switchToAmbient_Parms.bWasNonAmbient = bWasNonAmbient;

	pFnswitchToAmbient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnswitchToAmbient, &switchToAmbient_Parms, NULL );

	pFnswitchToAmbient->FunctionFlags |= 0x400;
};

// Function SFXGame.BioConversation.IsAmbient
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioConversation::IsAmbient ( )
{
	static UFunction* pFnIsAmbient = NULL;

	if ( ! pFnIsAmbient )
		pFnIsAmbient = (UFunction*) UObject::GObjObjects()->Data[ 34747 ];

	UBioConversation_execIsAmbient_Parms IsAmbient_Parms;

	pFnIsAmbient->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAmbient, &IsAmbient_Parms, NULL );

	pFnIsAmbient->FunctionFlags |= 0x400;

	return IsAmbient_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.WaitingForReply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioConversation::WaitingForReply ( )
{
	static UFunction* pFnWaitingForReply = NULL;

	if ( ! pFnWaitingForReply )
		pFnWaitingForReply = (UFunction*) UObject::GObjObjects()->Data[ 34745 ];

	UBioConversation_execWaitingForReply_Parms WaitingForReply_Parms;

	pFnWaitingForReply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWaitingForReply, &WaitingForReply_Parms, NULL );

	pFnWaitingForReply->FunctionFlags |= 0x400;

	return WaitingForReply_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.SkipNode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioConversation::SkipNode ( )
{
	static UFunction* pFnSkipNode = NULL;

	if ( ! pFnSkipNode )
		pFnSkipNode = (UFunction*) UObject::GObjObjects()->Data[ 34743 ];

	UBioConversation_execSkipNode_Parms SkipNode_Parms;

	pFnSkipNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSkipNode, &SkipNode_Parms, NULL );

	pFnSkipNode->FunctionFlags |= 0x400;

	return SkipNode_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.FinishSelectedReply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioConversation::FinishSelectedReply ( )
{
	static UFunction* pFnFinishSelectedReply = NULL;

	if ( ! pFnFinishSelectedReply )
		pFnFinishSelectedReply = (UFunction*) UObject::GObjObjects()->Data[ 34741 ];

	UBioConversation_execFinishSelectedReply_Parms FinishSelectedReply_Parms;

	pFnFinishSelectedReply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFinishSelectedReply, &FinishSelectedReply_Parms, NULL );

	pFnFinishSelectedReply->FunctionFlags |= 0x400;

	return FinishSelectedReply_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.QueueReply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nReply                         ( CPF_Parm )

bool UBioConversation::QueueReply ( int nReply )
{
	static UFunction* pFnQueueReply = NULL;

	if ( ! pFnQueueReply )
		pFnQueueReply = (UFunction*) UObject::GObjObjects()->Data[ 34738 ];

	UBioConversation_execQueueReply_Parms QueueReply_Parms;
	QueueReply_Parms.nReply = nReply;

	pFnQueueReply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueueReply, &QueueReply_Parms, NULL );

	pFnQueueReply->FunctionFlags |= 0x400;

	return QueueReply_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.SelectReply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nReply                         ( CPF_Parm )

bool UBioConversation::SelectReply ( int nReply )
{
	static UFunction* pFnSelectReply = NULL;

	if ( ! pFnSelectReply )
		pFnSelectReply = (UFunction*) UObject::GObjObjects()->Data[ 34735 ];

	UBioConversation_execSelectReply_Parms SelectReply_Parms;
	SelectReply_Parms.nReply = nReply;

	pFnSelectReply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectReply, &SelectReply_Parms, NULL );

	pFnSelectReply->FunctionFlags |= 0x400;

	return SelectReply_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.UpdateConversation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool UBioConversation::UpdateConversation ( float fDeltaT )
{
	static UFunction* pFnUpdateConversation = NULL;

	if ( ! pFnUpdateConversation )
		pFnUpdateConversation = (UFunction*) UObject::GObjObjects()->Data[ 34732 ];

	UBioConversation_execUpdateConversation_Parms UpdateConversation_Parms;
	UpdateConversation_Parms.fDeltaT = fDeltaT;

	pFnUpdateConversation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateConversation, &UpdateConversation_Parms, NULL );

	pFnUpdateConversation->FunctionFlags |= 0x400;

	return UpdateConversation_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.EndConversation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioConversation::EndConversation ( )
{
	static UFunction* pFnEndConversation = NULL;

	if ( ! pFnEndConversation )
		pFnEndConversation = (UFunction*) UObject::GObjObjects()->Data[ 34731 ];

	UBioConversation_execEndConversation_Parms EndConversation_Parms;

	pFnEndConversation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndConversation, &EndConversation_Parms, NULL );

	pFnEndConversation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioConversation.StartConversation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  aOwner                         ( CPF_Parm )
// class AActor*                  aPlayer                        ( CPF_Parm )

bool UBioConversation::StartConversation ( class AActor* aOwner, class AActor* aPlayer )
{
	static UFunction* pFnStartConversation = NULL;

	if ( ! pFnStartConversation )
		pFnStartConversation = (UFunction*) UObject::GObjObjects()->Data[ 34727 ];

	UBioConversation_execStartConversation_Parms StartConversation_Parms;
	StartConversation_Parms.aOwner = aOwner;
	StartConversation_Parms.aPlayer = aPlayer;

	pFnStartConversation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartConversation, &StartConversation_Parms, NULL );

	pFnStartConversation->FunctionFlags |= 0x400;

	return StartConversation_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.GetConversationObject
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nObjectIndex                   ( CPF_Parm )
// unsigned long                  bNoisyErrors                   ( CPF_OptionalParm | CPF_Parm )

class AActor* UBioConversation::GetConversationObject ( int nObjectIndex, unsigned long bNoisyErrors )
{
	static UFunction* pFnGetConversationObject = NULL;

	if ( ! pFnGetConversationObject )
		pFnGetConversationObject = (UFunction*) UObject::GObjObjects()->Data[ 34723 ];

	UBioConversation_execGetConversationObject_Parms GetConversationObject_Parms;
	GetConversationObject_Parms.nObjectIndex = nObjectIndex;
	GetConversationObject_Parms.bNoisyErrors = bNoisyErrors;

	pFnGetConversationObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetConversationObject, &GetConversationObject_Parms, NULL );

	pFnGetConversationObject->FunctionFlags |= 0x400;

	return GetConversationObject_Parms.ReturnValue;
};

// Function SFXGame.BioConversation.SetPositionRotator
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  pActor                         ( CPF_Parm )
// struct FVector                 Position                       ( CPF_Parm )
// struct FRotator                facing                         ( CPF_Parm )

void UBioConversation::SetPositionRotator ( class AActor* pActor, struct FVector Position, struct FRotator facing )
{
	static UFunction* pFnSetPositionRotator = NULL;

	if ( ! pFnSetPositionRotator )
		pFnSetPositionRotator = (UFunction*) UObject::GObjObjects()->Data[ 34719 ];

	UBioConversation_execSetPositionRotator_Parms SetPositionRotator_Parms;
	SetPositionRotator_Parms.pActor = pActor;
	memcpy ( &SetPositionRotator_Parms.Position, &Position, 0xC );
	memcpy ( &SetPositionRotator_Parms.facing, &facing, 0xC );

	pFnSetPositionRotator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPositionRotator, &SetPositionRotator_Parms, NULL );

	pFnSetPositionRotator->FunctionFlags |= 0x400;
};

// Function SFXGame.BioStage.ProfileStage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioHUD*                 HUD                            ( CPF_Parm )

void ABioStage::ProfileStage ( class ABioHUD* HUD )
{
	static UFunction* pFnProfileStage = NULL;

	if ( ! pFnProfileStage )
		pFnProfileStage = (UFunction*) UObject::GObjObjects()->Data[ 50013 ];

	ABioStage_execProfileStage_Parms ProfileStage_Parms;
	ProfileStage_Parms.HUD = HUD;

	pFnProfileStage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileStage, &ProfileStage_Parms, NULL );

	pFnProfileStage->FunctionFlags |= 0x400;
};

// Function SFXGame.BioStage.SetActorToNode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  aInput                         ( CPF_Parm )
// struct FName                   nmNodeName                     ( CPF_Parm )

void ABioStage::SetActorToNode ( class AActor* aInput, struct FName nmNodeName )
{
	static UFunction* pFnSetActorToNode = NULL;

	if ( ! pFnSetActorToNode )
		pFnSetActorToNode = (UFunction*) UObject::GObjObjects()->Data[ 50010 ];

	ABioStage_execSetActorToNode_Parms SetActorToNode_Parms;
	SetActorToNode_Parms.aInput = aInput;
	memcpy ( &SetActorToNode_Parms.nmNodeName, &nmNodeName, 0x8 );

	pFnSetActorToNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActorToNode, &SetActorToNode_Parms, NULL );

	pFnSetActorToNode->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGUIBox.Draw
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 oCanvas                        ( CPF_Parm )

void UBioGUIBox::Draw ( class UCanvas* oCanvas )
{
	static UFunction* pFnDraw = NULL;

	if ( ! pFnDraw )
		pFnDraw = (UFunction*) UObject::GObjObjects()->Data[ 35434 ];

	UBioGUIBox_execDraw_Parms Draw_Parms;
	Draw_Parms.oCanvas = oCanvas;

	this->ProcessEvent ( pFnDraw, &Draw_Parms, NULL );
};

// Function SFXGame.BioGUIBox.SetFont
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UFont*                   Font                           ( CPF_Parm )

void UBioGUIBox::SetFont ( class UFont* Font )
{
	static UFunction* pFnSetFont = NULL;

	if ( ! pFnSetFont )
		pFnSetFont = (UFunction*) UObject::GObjObjects()->Data[ 35432 ];

	UBioGUIBox_execSetFont_Parms SetFont_Parms;
	SetFont_Parms.Font = Font;

	pFnSetFont->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFont, &SetFont_Parms, NULL );

	pFnSetFont->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGUIBox.PopCanvasProperties
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 oCanvas                        ( CPF_Parm )

void UBioGUIBox::PopCanvasProperties ( class UCanvas* oCanvas )
{
	static UFunction* pFnPopCanvasProperties = NULL;

	if ( ! pFnPopCanvasProperties )
		pFnPopCanvasProperties = (UFunction*) UObject::GObjObjects()->Data[ 35430 ];

	UBioGUIBox_execPopCanvasProperties_Parms PopCanvasProperties_Parms;
	PopCanvasProperties_Parms.oCanvas = oCanvas;

	this->ProcessEvent ( pFnPopCanvasProperties, &PopCanvasProperties_Parms, NULL );
};

// Function SFXGame.BioGUIBox.PushCanvasProperties
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UCanvas*                 oCanvas                        ( CPF_Parm )

void UBioGUIBox::PushCanvasProperties ( class UCanvas* oCanvas )
{
	static UFunction* pFnPushCanvasProperties = NULL;

	if ( ! pFnPushCanvasProperties )
		pFnPushCanvasProperties = (UFunction*) UObject::GObjObjects()->Data[ 35428 ];

	UBioGUIBox_execPushCanvasProperties_Parms PushCanvasProperties_Parms;
	PushCanvasProperties_Parms.oCanvas = oCanvas;

	this->ProcessEvent ( pFnPushCanvasProperties, &PushCanvasProperties_Parms, NULL );
};

// Function SFXGame.BioGUIBox.RenderContent
// [0x00080000] 
// Parameters infos:
// class UCanvas*                 oCanvas                        ( CPF_Parm )

void UBioGUIBox::RenderContent ( class UCanvas* oCanvas )
{
	static UFunction* pFnRenderContent = NULL;

	if ( ! pFnRenderContent )
		pFnRenderContent = (UFunction*) UObject::GObjObjects()->Data[ 35426 ];

	UBioGUIBox_execRenderContent_Parms RenderContent_Parms;
	RenderContent_Parms.oCanvas = oCanvas;

	this->ProcessEvent ( pFnRenderContent, &RenderContent_Parms, NULL );
};

// Function SFXGame.BioGUIBox.ComputeDrawParameters
// [0x00080000] 
// Parameters infos:
// class UCanvas*                 oCanvas                        ( CPF_Parm )

void UBioGUIBox::ComputeDrawParameters ( class UCanvas* oCanvas )
{
	static UFunction* pFnComputeDrawParameters = NULL;

	if ( ! pFnComputeDrawParameters )
		pFnComputeDrawParameters = (UFunction*) UObject::GObjObjects()->Data[ 35424 ];

	UBioGUIBox_execComputeDrawParameters_Parms ComputeDrawParameters_Parms;
	ComputeDrawParameters_Parms.oCanvas = oCanvas;

	this->ProcessEvent ( pFnComputeDrawParameters, &ComputeDrawParameters_Parms, NULL );
};

// Function SFXGame.BioGUIBox.ShouldRender
// [0x00080000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioGUIBox::ShouldRender ( )
{
	static UFunction* pFnShouldRender = NULL;

	if ( ! pFnShouldRender )
		pFnShouldRender = (UFunction*) UObject::GObjObjects()->Data[ 35422 ];

	UBioGUIBox_execShouldRender_Parms ShouldRender_Parms;

	this->ProcessEvent ( pFnShouldRender, &ShouldRender_Parms, NULL );

	return ShouldRender_Parms.ReturnValue;
};

// Function SFXGame.BioDebugMenu.ScrollUp
// [0x00020002] 
// Parameters infos:

void UBioDebugMenu::ScrollUp ( )
{
	static UFunction* pFnScrollUp = NULL;

	if ( ! pFnScrollUp )
		pFnScrollUp = (UFunction*) UObject::GObjObjects()->Data[ 35460 ];

	UBioDebugMenu_execScrollUp_Parms ScrollUp_Parms;

	this->ProcessEvent ( pFnScrollUp, &ScrollUp_Parms, NULL );
};

// Function SFXGame.BioDebugMenu.ScrollDown
// [0x00020002] 
// Parameters infos:

void UBioDebugMenu::ScrollDown ( )
{
	static UFunction* pFnScrollDown = NULL;

	if ( ! pFnScrollDown )
		pFnScrollDown = (UFunction*) UObject::GObjObjects()->Data[ 35459 ];

	UBioDebugMenu_execScrollDown_Parms ScrollDown_Parms;

	this->ProcessEvent ( pFnScrollDown, &ScrollDown_Parms, NULL );
};

// Function SFXGame.BioDebugMenu.RenderContent
// [0x00080002] 
// Parameters infos:
// class UCanvas*                 oCanvas                        ( CPF_Parm )

void UBioDebugMenu::RenderContent ( class UCanvas* oCanvas )
{
	static UFunction* pFnRenderContent = NULL;

	if ( ! pFnRenderContent )
		pFnRenderContent = (UFunction*) UObject::GObjObjects()->Data[ 35456 ];

	UBioDebugMenu_execRenderContent_Parms RenderContent_Parms;
	RenderContent_Parms.oCanvas = oCanvas;

	this->ProcessEvent ( pFnRenderContent, &RenderContent_Parms, NULL );
};

// Function SFXGame.BioDebugMenu.ComputeDrawParameters
// [0x00080002] 
// Parameters infos:
// class UCanvas*                 oCanvas                        ( CPF_Parm )

void UBioDebugMenu::ComputeDrawParameters ( class UCanvas* oCanvas )
{
	static UFunction* pFnComputeDrawParameters = NULL;

	if ( ! pFnComputeDrawParameters )
		pFnComputeDrawParameters = (UFunction*) UObject::GObjObjects()->Data[ 35449 ];

	UBioDebugMenu_execComputeDrawParameters_Parms ComputeDrawParameters_Parms;
	ComputeDrawParameters_Parms.oCanvas = oCanvas;

	this->ProcessEvent ( pFnComputeDrawParameters, &ComputeDrawParameters_Parms, NULL );
};

// Function SFXGame.BioDebugMenu.ShouldRender
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioDebugMenu::ShouldRender ( )
{
	static UFunction* pFnShouldRender = NULL;

	if ( ! pFnShouldRender )
		pFnShouldRender = (UFunction*) UObject::GObjObjects()->Data[ 35447 ];

	UBioDebugMenu_execShouldRender_Parms ShouldRender_Parms;

	this->ProcessEvent ( pFnShouldRender, &ShouldRender_Parms, NULL );

	return ShouldRender_Parms.ReturnValue;
};

// Function SFXGame.BioDebugMenu.Clear
// [0x00020002] 
// Parameters infos:

void UBioDebugMenu::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 35446 ];

	UBioDebugMenu_execClear_Parms Clear_Parms;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );
};

// Function SFXGame.BioDebugMenu.AddEntry
// [0x00020002] 
// Parameters infos:
// struct FString                 sMenuEntry                     ( CPF_Parm | CPF_NeedCtorLink )

void UBioDebugMenu::AddEntry ( struct FString sMenuEntry )
{
	static UFunction* pFnAddEntry = NULL;

	if ( ! pFnAddEntry )
		pFnAddEntry = (UFunction*) UObject::GObjObjects()->Data[ 35444 ];

	UBioDebugMenu_execAddEntry_Parms AddEntry_Parms;
	memcpy ( &AddEntry_Parms.sMenuEntry, &sMenuEntry, 0xC );

	this->ProcessEvent ( pFnAddEntry, &AddEntry_Parms, NULL );
};

// Function SFXGame.BioHUD.IsFinalReleaseBuild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioHUD::IsFinalReleaseBuild ( )
{
	static UFunction* pFnIsFinalReleaseBuild = NULL;

	if ( ! pFnIsFinalReleaseBuild )
		pFnIsFinalReleaseBuild = (UFunction*) UObject::GObjObjects()->Data[ 38128 ];

	ABioHUD_execIsFinalReleaseBuild_Parms IsFinalReleaseBuild_Parms;

	pFnIsFinalReleaseBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFinalReleaseBuild, &IsFinalReleaseBuild_Parms, NULL );

	pFnIsFinalReleaseBuild->FunctionFlags |= 0x400;

	return IsFinalReleaseBuild_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.DisplayNavWeight
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ProfileTarget                  ( CPF_Parm )
// class ANavigationPoint*        Nav                            ( CPF_Parm )

void ABioHUD::eventDisplayNavWeight ( class AActor* ProfileTarget, class ANavigationPoint* Nav )
{
	static UFunction* pFnDisplayNavWeight = NULL;

	if ( ! pFnDisplayNavWeight )
		pFnDisplayNavWeight = (UFunction*) UObject::GObjObjects()->Data[ 38118 ];

	ABioHUD_eventDisplayNavWeight_Parms DisplayNavWeight_Parms;
	DisplayNavWeight_Parms.ProfileTarget = ProfileTarget;
	DisplayNavWeight_Parms.Nav = Nav;

	this->ProcessEvent ( pFnDisplayNavWeight, &DisplayNavWeight_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawAngstIcon
// [0x00820002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )

void ABioHUD::DrawAngstIcon ( class AActor* oActor )
{
	static UFunction* pFnDrawAngstIcon = NULL;

	if ( ! pFnDrawAngstIcon )
		pFnDrawAngstIcon = (UFunction*) UObject::GObjObjects()->Data[ 38110 ];

	ABioHUD_execDrawAngstIcon_Parms DrawAngstIcon_Parms;
	DrawAngstIcon_Parms.oActor = oActor;

	this->ProcessEvent ( pFnDrawAngstIcon, &DrawAngstIcon_Parms, NULL );
};

// Function SFXGame.BioHUD.ShowReachSpecs
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmNavigationPoint              ( CPF_Parm )

void ABioHUD::ShowReachSpecs ( struct FName nmNavigationPoint )
{
	static UFunction* pFnShowReachSpecs = NULL;

	if ( ! pFnShowReachSpecs )
		pFnShowReachSpecs = (UFunction*) UObject::GObjObjects()->Data[ 38105 ];

	ABioHUD_execShowReachSpecs_Parms ShowReachSpecs_Parms;
	memcpy ( &ShowReachSpecs_Parms.nmNavigationPoint, &nmNavigationPoint, 0x8 );

	this->ProcessEvent ( pFnShowReachSpecs, &ShowReachSpecs_Parms, NULL );
};

// Function SFXGame.BioHUD.DisplayRouteInfo
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// class APawn*                   pPawn                          ( CPF_Parm )
// struct FColor                  PathColor                      ( CPF_Parm )
// unsigned long                  bDrawPathOnly                  ( CPF_OptionalParm | CPF_Parm )

void ABioHUD::DisplayRouteInfo ( class APawn* pPawn, struct FColor PathColor, unsigned long bDrawPathOnly )
{
	static UFunction* pFnDisplayRouteInfo = NULL;

	if ( ! pFnDisplayRouteInfo )
		pFnDisplayRouteInfo = (UFunction*) UObject::GObjObjects()->Data[ 38101 ];

	ABioHUD_execDisplayRouteInfo_Parms DisplayRouteInfo_Parms;
	DisplayRouteInfo_Parms.pPawn = pPawn;
	memcpy ( &DisplayRouteInfo_Parms.PathColor, &PathColor, 0x4 );
	DisplayRouteInfo_Parms.bDrawPathOnly = bDrawPathOnly;

	pFnDisplayRouteInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayRouteInfo, &DisplayRouteInfo_Parms, NULL );

	pFnDisplayRouteInfo->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.UpdateCoverNames
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void ABioHUD::UpdateCoverNames ( )
{
	static UFunction* pFnUpdateCoverNames = NULL;

	if ( ! pFnUpdateCoverNames )
		pFnUpdateCoverNames = (UFunction*) UObject::GObjObjects()->Data[ 38090 ];

	ABioHUD_execUpdateCoverNames_Parms UpdateCoverNames_Parms;

	this->ProcessEvent ( pFnUpdateCoverNames, &UpdateCoverNames_Parms, NULL );
};

// Function SFXGame.BioHUD.ShowCoverNames
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ABioHUD::ShowCoverNames ( )
{
	static UFunction* pFnShowCoverNames = NULL;

	if ( ! pFnShowCoverNames )
		pFnShowCoverNames = (UFunction*) UObject::GObjObjects()->Data[ 38089 ];

	ABioHUD_execShowCoverNames_Parms ShowCoverNames_Parms;

	this->ProcessEvent ( pFnShowCoverNames, &ShowCoverNames_Parms, NULL );
};

// Function SFXGame.BioHUD.UpdateCover
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShowRotation                  ( CPF_Parm )

void ABioHUD::UpdateCover ( unsigned long bShowRotation )
{
	static UFunction* pFnUpdateCover = NULL;

	if ( ! pFnUpdateCover )
		pFnUpdateCover = (UFunction*) UObject::GObjObjects()->Data[ 38087 ];

	ABioHUD_execUpdateCover_Parms UpdateCover_Parms;
	UpdateCover_Parms.bShowRotation = bShowRotation;

	pFnUpdateCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCover, &UpdateCover_Parms, NULL );

	pFnUpdateCover->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ShowCover
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bShowRotation                  ( CPF_OptionalParm | CPF_Parm )

void ABioHUD::ShowCover ( unsigned long bShowRotation )
{
	static UFunction* pFnShowCover = NULL;

	if ( ! pFnShowCover )
		pFnShowCover = (UFunction*) UObject::GObjObjects()->Data[ 38085 ];

	ABioHUD_execShowCover_Parms ShowCover_Parms;
	ShowCover_Parms.bShowRotation = bShowRotation;

	this->ProcessEvent ( pFnShowCover, &ShowCover_Parms, NULL );
};

// Function SFXGame.BioHUD.UpdateActorInfo
// [0x00820002] 
// Parameters infos:

void ABioHUD::UpdateActorInfo ( )
{
	static UFunction* pFnUpdateActorInfo = NULL;

	if ( ! pFnUpdateActorInfo )
		pFnUpdateActorInfo = (UFunction*) UObject::GObjObjects()->Data[ 38076 ];

	ABioHUD_execUpdateActorInfo_Parms UpdateActorInfo_Parms;

	this->ProcessEvent ( pFnUpdateActorInfo, &UpdateActorInfo_Parms, NULL );
};

// Function SFXGame.BioHUD.HideLocation
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ABioHUD::HideLocation ( )
{
	static UFunction* pFnHideLocation = NULL;

	if ( ! pFnHideLocation )
		pFnHideLocation = (UFunction*) UObject::GObjObjects()->Data[ 38075 ];

	ABioHUD_execHideLocation_Parms HideLocation_Parms;

	this->ProcessEvent ( pFnHideLocation, &HideLocation_Parms, NULL );
};

// Function SFXGame.BioHUD.ShowLocation
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ABioHUD::ShowLocation ( )
{
	static UFunction* pFnShowLocation = NULL;

	if ( ! pFnShowLocation )
		pFnShowLocation = (UFunction*) UObject::GObjObjects()->Data[ 38074 ];

	ABioHUD_execShowLocation_Parms ShowLocation_Parms;

	this->ProcessEvent ( pFnShowLocation, &ShowLocation_Parms, NULL );
};

// Function SFXGame.BioHUD.SetActorForActorInfo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmActor                        ( CPF_Parm )

void ABioHUD::SetActorForActorInfo ( struct FName nmActor )
{
	static UFunction* pFnSetActorForActorInfo = NULL;

	if ( ! pFnSetActorForActorInfo )
		pFnSetActorForActorInfo = (UFunction*) UObject::GObjObjects()->Data[ 38071 ];

	ABioHUD_execSetActorForActorInfo_Parms SetActorForActorInfo_Parms;
	memcpy ( &SetActorForActorInfo_Parms.nmActor, &nmActor, 0x8 );

	this->ProcessEvent ( pFnSetActorForActorInfo, &SetActorForActorInfo_Parms, NULL );
};

// Function SFXGame.BioHUD.LockActorInfo
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void ABioHUD::LockActorInfo ( )
{
	static UFunction* pFnLockActorInfo = NULL;

	if ( ! pFnLockActorInfo )
		pFnLockActorInfo = (UFunction*) UObject::GObjObjects()->Data[ 38066 ];

	ABioHUD_execLockActorInfo_Parms LockActorInfo_Parms;

	this->ProcessEvent ( pFnLockActorInfo, &LockActorInfo_Parms, NULL );
};

// Function SFXGame.BioHUD.DisplayActorInfo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ABioHUD::DisplayActorInfo ( )
{
	static UFunction* pFnDisplayActorInfo = NULL;

	if ( ! pFnDisplayActorInfo )
		pFnDisplayActorInfo = (UFunction*) UObject::GObjObjects()->Data[ 38065 ];

	ABioHUD_execDisplayActorInfo_Parms DisplayActorInfo_Parms;

	this->ProcessEvent ( pFnDisplayActorInfo, &DisplayActorInfo_Parms, NULL );
};

// Function SFXGame.BioHUD.LoadGUIResources
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioHUD::LoadGUIResources ( )
{
	static UFunction* pFnLoadGUIResources = NULL;

	if ( ! pFnLoadGUIResources )
		pFnLoadGUIResources = (UFunction*) UObject::GObjObjects()->Data[ 38064 ];

	ABioHUD_execLoadGUIResources_Parms LoadGUIResources_Parms;

	pFnLoadGUIResources->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadGUIResources, &LoadGUIResources_Parms, NULL );

	pFnLoadGUIResources->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.SetGUITexture
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 sMaterial                      ( CPF_Parm | CPF_NeedCtorLink )

void ABioHUD::SetGUITexture ( struct FString sMaterial )
{
	static UFunction* pFnSetGUITexture = NULL;

	if ( ! pFnSetGUITexture )
		pFnSetGUITexture = (UFunction*) UObject::GObjObjects()->Data[ 38062 ];

	ABioHUD_execSetGUITexture_Parms SetGUITexture_Parms;
	memcpy ( &SetGUITexture_Parms.sMaterial, &sMaterial, 0xC );

	this->ProcessEvent ( pFnSetGUITexture, &SetGUITexture_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawTextWithColor
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 valuename                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FColor                  LabelColor                     ( CPF_Parm )
// struct FColor                  DataColor                      ( CPF_Parm )

void ABioHUD::eventDrawTextWithColor ( struct FString valuename, struct FString Value, struct FColor LabelColor, struct FColor DataColor )
{
	static UFunction* pFnDrawTextWithColor = NULL;

	if ( ! pFnDrawTextWithColor )
		pFnDrawTextWithColor = (UFunction*) UObject::GObjObjects()->Data[ 38054 ];

	ABioHUD_eventDrawTextWithColor_Parms DrawTextWithColor_Parms;
	memcpy ( &DrawTextWithColor_Parms.valuename, &valuename, 0xC );
	memcpy ( &DrawTextWithColor_Parms.Value, &Value, 0xC );
	memcpy ( &DrawTextWithColor_Parms.LabelColor, &LabelColor, 0x4 );
	memcpy ( &DrawTextWithColor_Parms.DataColor, &DataColor, 0x4 );

	this->ProcessEvent ( pFnDrawTextWithColor, &DrawTextWithColor_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawText
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 valuename                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Value                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FColor                  LabelColor                     ( CPF_OptionalParm | CPF_Parm )
// struct FColor                  DataColor                      ( CPF_OptionalParm | CPF_Parm )

void ABioHUD::eventDrawText ( struct FString valuename, struct FString Value, struct FColor LabelColor, struct FColor DataColor )
{
	static UFunction* pFnDrawText = NULL;

	if ( ! pFnDrawText )
		pFnDrawText = (UFunction*) UObject::GObjObjects()->Data[ 38049 ];

	ABioHUD_eventDrawText_Parms DrawText_Parms;
	memcpy ( &DrawText_Parms.valuename, &valuename, 0xC );
	memcpy ( &DrawText_Parms.Value, &Value, 0xC );
	memcpy ( &DrawText_Parms.LabelColor, &LabelColor, 0x4 );
	memcpy ( &DrawText_Parms.DataColor, &DataColor, 0x4 );

	this->ProcessEvent ( pFnDrawText, &DrawText_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawCircle
// [0x00020002] 
// Parameters infos:
// float                          fX                             ( CPF_Parm )
// float                          fY                             ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

void ABioHUD::DrawCircle ( float fX, float fY, float Radius )
{
	static UFunction* pFnDrawCircle = NULL;

	if ( ! pFnDrawCircle )
		pFnDrawCircle = (UFunction*) UObject::GObjObjects()->Data[ 38038 ];

	ABioHUD_execDrawCircle_Parms DrawCircle_Parms;
	DrawCircle_Parms.fX = fX;
	DrawCircle_Parms.fY = fY;
	DrawCircle_Parms.Radius = Radius;

	this->ProcessEvent ( pFnDrawCircle, &DrawCircle_Parms, NULL );
};

// Function SFXGame.BioHUD.CDrawSquare
// [0x00020002] 
// Parameters infos:
// int                            nSize                          ( CPF_Parm )

void ABioHUD::CDrawSquare ( int nSize )
{
	static UFunction* pFnCDrawSquare = NULL;

	if ( ! pFnCDrawSquare )
		pFnCDrawSquare = (UFunction*) UObject::GObjObjects()->Data[ 38034 ];

	ABioHUD_execCDrawSquare_Parms CDrawSquare_Parms;
	CDrawSquare_Parms.nSize = nSize;

	this->ProcessEvent ( pFnCDrawSquare, &CDrawSquare_Parms, NULL );
};

// Function SFXGame.BioHUD.PointInsideBox
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          CX                             ( CPF_Parm )
// float                          CY                             ( CPF_Parm )
// float                          nSize                          ( CPF_Parm )

bool ABioHUD::PointInsideBox ( float X, float Y, float CX, float CY, float nSize )
{
	static UFunction* pFnPointInsideBox = NULL;

	if ( ! pFnPointInsideBox )
		pFnPointInsideBox = (UFunction*) UObject::GObjObjects()->Data[ 38027 ];

	ABioHUD_execPointInsideBox_Parms PointInsideBox_Parms;
	PointInsideBox_Parms.X = X;
	PointInsideBox_Parms.Y = Y;
	PointInsideBox_Parms.CX = CX;
	PointInsideBox_Parms.CY = CY;
	PointInsideBox_Parms.nSize = nSize;

	this->ProcessEvent ( pFnPointInsideBox, &PointInsideBox_Parms, NULL );

	return PointInsideBox_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.GetBoxCoordsFromAngle
// [0x00420002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Size                           ( CPF_Parm )
// float                          Angle                          ( CPF_Parm )
// float                          XSt                            ( CPF_Parm | CPF_OutParm )
// float                          YSt                            ( CPF_Parm | CPF_OutParm )

void ABioHUD::GetBoxCoordsFromAngle ( float X, float Y, float Size, float Angle, float* XSt, float* YSt )
{
	static UFunction* pFnGetBoxCoordsFromAngle = NULL;

	if ( ! pFnGetBoxCoordsFromAngle )
		pFnGetBoxCoordsFromAngle = (UFunction*) UObject::GObjObjects()->Data[ 38020 ];

	ABioHUD_execGetBoxCoordsFromAngle_Parms GetBoxCoordsFromAngle_Parms;
	GetBoxCoordsFromAngle_Parms.X = X;
	GetBoxCoordsFromAngle_Parms.Y = Y;
	GetBoxCoordsFromAngle_Parms.Size = Size;
	GetBoxCoordsFromAngle_Parms.Angle = Angle;

	this->ProcessEvent ( pFnGetBoxCoordsFromAngle, &GetBoxCoordsFromAngle_Parms, NULL );

	if ( XSt )
		*XSt = GetBoxCoordsFromAngle_Parms.XSt;

	if ( YSt )
		*YSt = GetBoxCoordsFromAngle_Parms.YSt;
};

// Function SFXGame.BioHUD.BoxesIntersecting
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            X1                             ( CPF_Parm )
// int                            Y1                             ( CPF_Parm )
// int                            nSize1                         ( CPF_Parm )
// int                            X2                             ( CPF_Parm )
// int                            Y2                             ( CPF_Parm )
// int                            nSize2                         ( CPF_Parm )

bool ABioHUD::BoxesIntersecting ( int X1, int Y1, int nSize1, int X2, int Y2, int nSize2 )
{
	static UFunction* pFnBoxesIntersecting = NULL;

	if ( ! pFnBoxesIntersecting )
		pFnBoxesIntersecting = (UFunction*) UObject::GObjObjects()->Data[ 38009 ];

	ABioHUD_execBoxesIntersecting_Parms BoxesIntersecting_Parms;
	BoxesIntersecting_Parms.X1 = X1;
	BoxesIntersecting_Parms.Y1 = Y1;
	BoxesIntersecting_Parms.nSize1 = nSize1;
	BoxesIntersecting_Parms.X2 = X2;
	BoxesIntersecting_Parms.Y2 = Y2;
	BoxesIntersecting_Parms.nSize2 = nSize2;

	this->ProcessEvent ( pFnBoxesIntersecting, &BoxesIntersecting_Parms, NULL );

	return BoxesIntersecting_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.CDrawVertLine
// [0x00020002] 
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y1                             ( CPF_Parm )
// float                          Y2                             ( CPF_Parm )

void ABioHUD::CDrawVertLine ( float X, float Y1, float Y2 )
{
	static UFunction* pFnCDrawVertLine = NULL;

	if ( ! pFnCDrawVertLine )
		pFnCDrawVertLine = (UFunction*) UObject::GObjObjects()->Data[ 38005 ];

	ABioHUD_execCDrawVertLine_Parms CDrawVertLine_Parms;
	CDrawVertLine_Parms.X = X;
	CDrawVertLine_Parms.Y1 = Y1;
	CDrawVertLine_Parms.Y2 = Y2;

	this->ProcessEvent ( pFnCDrawVertLine, &CDrawVertLine_Parms, NULL );
};

// Function SFXGame.BioHUD.CDrawHorzLine
// [0x00020002] 
// Parameters infos:
// float                          X1                             ( CPF_Parm )
// float                          X2                             ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void ABioHUD::CDrawHorzLine ( float X1, float X2, float Y )
{
	static UFunction* pFnCDrawHorzLine = NULL;

	if ( ! pFnCDrawHorzLine )
		pFnCDrawHorzLine = (UFunction*) UObject::GObjObjects()->Data[ 38001 ];

	ABioHUD_execCDrawHorzLine_Parms CDrawHorzLine_Parms;
	CDrawHorzLine_Parms.X1 = X1;
	CDrawHorzLine_Parms.X2 = X2;
	CDrawHorzLine_Parms.Y = Y;

	this->ProcessEvent ( pFnCDrawHorzLine, &CDrawHorzLine_Parms, NULL );
};

// Function SFXGame.BioHUD.ConnectBoxes
// [0x00020002] 
// Parameters infos:
// float                          X1                             ( CPF_Parm )
// float                          Y1                             ( CPF_Parm )
// float                          nSize1                         ( CPF_Parm )
// float                          X2                             ( CPF_Parm )
// float                          Y2                             ( CPF_Parm )
// float                          nSize2                         ( CPF_Parm )

void ABioHUD::ConnectBoxes ( float X1, float Y1, float nSize1, float X2, float Y2, float nSize2 )
{
	static UFunction* pFnConnectBoxes = NULL;

	if ( ! pFnConnectBoxes )
		pFnConnectBoxes = (UFunction*) UObject::GObjObjects()->Data[ 37988 ];

	ABioHUD_execConnectBoxes_Parms ConnectBoxes_Parms;
	ConnectBoxes_Parms.X1 = X1;
	ConnectBoxes_Parms.Y1 = Y1;
	ConnectBoxes_Parms.nSize1 = nSize1;
	ConnectBoxes_Parms.X2 = X2;
	ConnectBoxes_Parms.Y2 = Y2;
	ConnectBoxes_Parms.nSize2 = nSize2;

	this->ProcessEvent ( pFnConnectBoxes, &ConnectBoxes_Parms, NULL );
};

// Function SFXGame.BioHUD.LoadTestTextStringFromFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ABioHUD::LoadTestTextStringFromFile ( )
{
	static UFunction* pFnLoadTestTextStringFromFile = NULL;

	if ( ! pFnLoadTestTextStringFromFile )
		pFnLoadTestTextStringFromFile = (UFunction*) UObject::GObjObjects()->Data[ 37986 ];

	ABioHUD_execLoadTestTextStringFromFile_Parms LoadTestTextStringFromFile_Parms;

	pFnLoadTestTextStringFromFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadTestTextStringFromFile, &LoadTestTextStringFromFile_Parms, NULL );

	pFnLoadTestTextStringFromFile->FunctionFlags |= 0x400;

	return LoadTestTextStringFromFile_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.SmartWrapStringToArray
// [0x00420002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sText                          ( CPF_Parm | CPF_NeedCtorLink )
// int                            nTextWidth                     ( CPF_Parm )
// TArray< struct FString >       OutArray                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

float ABioHUD::SmartWrapStringToArray ( struct FString sText, int nTextWidth, TArray< struct FString >* OutArray )
{
	static UFunction* pFnSmartWrapStringToArray = NULL;

	if ( ! pFnSmartWrapStringToArray )
		pFnSmartWrapStringToArray = (UFunction*) UObject::GObjObjects()->Data[ 37975 ];

	ABioHUD_execSmartWrapStringToArray_Parms SmartWrapStringToArray_Parms;
	memcpy ( &SmartWrapStringToArray_Parms.sText, &sText, 0xC );
	SmartWrapStringToArray_Parms.nTextWidth = nTextWidth;

	this->ProcessEvent ( pFnSmartWrapStringToArray, &SmartWrapStringToArray_Parms, NULL );

	if ( OutArray )
		memcpy ( OutArray, &SmartWrapStringToArray_Parms.OutArray, 0xC );

	return SmartWrapStringToArray_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.DrawFakeShadowText
// [0x00020002] 
// Parameters infos:
// int                            X                              ( CPF_Parm )
// int                            Y                              ( CPF_Parm )
// struct FColor                  DrawColor                      ( CPF_Parm )
// struct FString                 sText                          ( CPF_Parm | CPF_NeedCtorLink )

void ABioHUD::DrawFakeShadowText ( int X, int Y, struct FColor DrawColor, struct FString sText )
{
	static UFunction* pFnDrawFakeShadowText = NULL;

	if ( ! pFnDrawFakeShadowText )
		pFnDrawFakeShadowText = (UFunction*) UObject::GObjObjects()->Data[ 37969 ];

	ABioHUD_execDrawFakeShadowText_Parms DrawFakeShadowText_Parms;
	DrawFakeShadowText_Parms.X = X;
	DrawFakeShadowText_Parms.Y = Y;
	memcpy ( &DrawFakeShadowText_Parms.DrawColor, &DrawColor, 0x4 );
	memcpy ( &DrawFakeShadowText_Parms.sText, &sText, 0xC );

	this->ProcessEvent ( pFnDrawFakeShadowText, &DrawFakeShadowText_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawEngineHUD
// [0x00020000] 
// Parameters infos:

void ABioHUD::DrawEngineHUD ( )
{
	static UFunction* pFnDrawEngineHUD = NULL;

	if ( ! pFnDrawEngineHUD )
		pFnDrawEngineHUD = (UFunction*) UObject::GObjObjects()->Data[ 37968 ];

	ABioHUD_execDrawEngineHUD_Parms DrawEngineHUD_Parms;

	this->ProcessEvent ( pFnDrawEngineHUD, &DrawEngineHUD_Parms, NULL );
};

// Function SFXGame.BioHUD.DebugDraw
// [0x00120000] 
// Parameters infos:
// class ABioHUD*                 H                              ( CPF_Parm )

void ABioHUD::DebugDraw ( class ABioHUD* H )
{
	static UFunction* pFnDebugDraw = NULL;

	if ( ! pFnDebugDraw )
		pFnDebugDraw = (UFunction*) UObject::GObjObjects()->Data[ 37796 ];

	ABioHUD_execDebugDraw_Parms DebugDraw_Parms;
	DebugDraw_Parms.H = H;

	this->ProcessEvent ( pFnDebugDraw, &DebugDraw_Parms, NULL );
};

// Function SFXGame.BioHUD.IsDrawing
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FScriptDelegate         DebugDrawFunc                  ( CPF_Parm | CPF_NeedCtorLink )

bool ABioHUD::IsDrawing ( struct FScriptDelegate DebugDrawFunc )
{
	static UFunction* pFnIsDrawing = NULL;

	if ( ! pFnIsDrawing )
		pFnIsDrawing = (UFunction*) UObject::GObjObjects()->Data[ 37963 ];

	ABioHUD_execIsDrawing_Parms IsDrawing_Parms;
	memcpy ( &IsDrawing_Parms.DebugDrawFunc, &DebugDrawFunc, 0xC );

	this->ProcessEvent ( pFnIsDrawing, &IsDrawing_Parms, NULL );

	return IsDrawing_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.SetDebugDraw
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         DebugDrawFunc                  ( CPF_Parm | CPF_NeedCtorLink )

void ABioHUD::SetDebugDraw ( struct FScriptDelegate DebugDrawFunc )
{
	static UFunction* pFnSetDebugDraw = NULL;

	if ( ! pFnSetDebugDraw )
		pFnSetDebugDraw = (UFunction*) UObject::GObjObjects()->Data[ 37960 ];

	ABioHUD_execSetDebugDraw_Parms SetDebugDraw_Parms;
	memcpy ( &SetDebugDraw_Parms.DebugDrawFunc, &DebugDrawFunc, 0xC );

	this->ProcessEvent ( pFnSetDebugDraw, &SetDebugDraw_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawDebugCrossHair
// [0x00820002] 
// Parameters infos:

void ABioHUD::DrawDebugCrossHair ( )
{
	static UFunction* pFnDrawDebugCrossHair = NULL;

	if ( ! pFnDrawDebugCrossHair )
		pFnDrawDebugCrossHair = (UFunction*) UObject::GObjObjects()->Data[ 37957 ];

	ABioHUD_execDrawDebugCrossHair_Parms DrawDebugCrossHair_Parms;

	this->ProcessEvent ( pFnDrawDebugCrossHair, &DrawDebugCrossHair_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawSelection
// [0x00820002] 
// Parameters infos:

void ABioHUD::DrawSelection ( )
{
	static UFunction* pFnDrawSelection = NULL;

	if ( ! pFnDrawSelection )
		pFnDrawSelection = (UFunction*) UObject::GObjObjects()->Data[ 37943 ];

	ABioHUD_execDrawSelection_Parms DrawSelection_Parms;

	this->ProcessEvent ( pFnDrawSelection, &DrawSelection_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawHUD
// [0x00020002] 
// Parameters infos:

void ABioHUD::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = (UFunction*) UObject::GObjObjects()->Data[ 37939 ];

	ABioHUD_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function SFXGame.BioHUD.PostRender
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ABioHUD::eventPostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = (UFunction*) UObject::GObjObjects()->Data[ 37931 ];

	ABioHUD_eventPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function SFXGame.BioHUD.DoFontTest
// [0x00020002] 
// Parameters infos:

void ABioHUD::DoFontTest ( )
{
	static UFunction* pFnDoFontTest = NULL;

	if ( ! pFnDoFontTest )
		pFnDoFontTest = (UFunction*) UObject::GObjObjects()->Data[ 37927 ];

	ABioHUD_execDoFontTest_Parms DoFontTest_Parms;

	this->ProcessEvent ( pFnDoFontTest, &DoFontTest_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawTestFontString
// [0x00020002] 
// Parameters infos:
// int                            Y                              ( CPF_Parm )
// struct FString                 sFontName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sTestString                    ( CPF_Parm | CPF_NeedCtorLink )

void ABioHUD::DrawTestFontString ( int Y, struct FString sFontName, struct FString sTestString )
{
	static UFunction* pFnDrawTestFontString = NULL;

	if ( ! pFnDrawTestFontString )
		pFnDrawTestFontString = (UFunction*) UObject::GObjObjects()->Data[ 37922 ];

	ABioHUD_execDrawTestFontString_Parms DrawTestFontString_Parms;
	DrawTestFontString_Parms.Y = Y;
	memcpy ( &DrawTestFontString_Parms.sFontName, &sFontName, 0xC );
	memcpy ( &DrawTestFontString_Parms.sTestString, &sTestString, 0xC );

	this->ProcessEvent ( pFnDrawTestFontString, &DrawTestFontString_Parms, NULL );
};

// Function SFXGame.BioHUD.DrawTestFont
// [0x00020002] 
// Parameters infos:
// int                            Y                              ( CPF_Parm )
// struct FString                 sFontName                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            nPoint                         ( CPF_Parm )
// unsigned long                  bScaled                        ( CPF_OptionalParm | CPF_Parm )
// float                          fScale                         ( CPF_OptionalParm | CPF_Parm )

void ABioHUD::DrawTestFont ( int Y, struct FString sFontName, int nPoint, unsigned long bScaled, float fScale )
{
	static UFunction* pFnDrawTestFont = NULL;

	if ( ! pFnDrawTestFont )
		pFnDrawTestFont = (UFunction*) UObject::GObjObjects()->Data[ 37914 ];

	ABioHUD_execDrawTestFont_Parms DrawTestFont_Parms;
	DrawTestFont_Parms.Y = Y;
	memcpy ( &DrawTestFont_Parms.sFontName, &sFontName, 0xC );
	DrawTestFont_Parms.nPoint = nPoint;
	DrawTestFont_Parms.bScaled = bScaled;
	DrawTestFont_Parms.fScale = fScale;

	this->ProcessEvent ( pFnDrawTestFont, &DrawTestFont_Parms, NULL );
};

// Function SFXGame.BioHUD.ToggleSafeArea
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void ABioHUD::ToggleSafeArea ( )
{
	static UFunction* pFnToggleSafeArea = NULL;

	if ( ! pFnToggleSafeArea )
		pFnToggleSafeArea = (UFunction*) UObject::GObjObjects()->Data[ 37913 ];

	ABioHUD_execToggleSafeArea_Parms ToggleSafeArea_Parms;

	this->ProcessEvent ( pFnToggleSafeArea, &ToggleSafeArea_Parms, NULL );
};

// Function SFXGame.BioHUD.DisplaySafeArea
// [0x00020002] 
// Parameters infos:

void ABioHUD::DisplaySafeArea ( )
{
	static UFunction* pFnDisplaySafeArea = NULL;

	if ( ! pFnDisplaySafeArea )
		pFnDisplaySafeArea = (UFunction*) UObject::GObjObjects()->Data[ 37912 ];

	ABioHUD_execDisplaySafeArea_Parms DisplaySafeArea_Parms;

	this->ProcessEvent ( pFnDisplaySafeArea, &DisplaySafeArea_Parms, NULL );
};

// Function SFXGame.BioHUD.ProfileConversationExtra
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioConversation*        oCurConv                       ( CPF_Parm )

void ABioHUD::eventProfileConversationExtra ( class UBioConversation* oCurConv )
{
	static UFunction* pFnProfileConversationExtra = NULL;

	if ( ! pFnProfileConversationExtra )
		pFnProfileConversationExtra = (UFunction*) UObject::GObjObjects()->Data[ 37897 ];

	ABioHUD_eventProfileConversationExtra_Parms ProfileConversationExtra_Parms;
	ProfileConversationExtra_Parms.oCurConv = oCurConv;

	this->ProcessEvent ( pFnProfileConversationExtra, &ProfileConversationExtra_Parms, NULL );
};

// Function SFXGame.BioHUD.ProxyCanvasProject
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 V                              ( CPF_Parm )

struct FVector ABioHUD::eventProxyCanvasProject ( struct FVector V )
{
	static UFunction* pFnProxyCanvasProject = NULL;

	if ( ! pFnProxyCanvasProject )
		pFnProxyCanvasProject = (UFunction*) UObject::GObjObjects()->Data[ 37894 ];

	ABioHUD_eventProxyCanvasProject_Parms ProxyCanvasProject_Parms;
	memcpy ( &ProxyCanvasProject_Parms.V, &V, 0xC );

	this->ProcessEvent ( pFnProxyCanvasProject, &ProxyCanvasProject_Parms, NULL );

	return ProxyCanvasProject_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.ProxyCanvasDrawMaterialTile
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UMaterialInstanceConstant* Mat                            ( CPF_Parm )
// float                          XL                             ( CPF_Parm )
// float                          YL                             ( CPF_Parm )

void ABioHUD::eventProxyCanvasDrawMaterialTile ( class UMaterialInstanceConstant* Mat, float XL, float YL )
{
	static UFunction* pFnProxyCanvasDrawMaterialTile = NULL;

	if ( ! pFnProxyCanvasDrawMaterialTile )
		pFnProxyCanvasDrawMaterialTile = (UFunction*) UObject::GObjObjects()->Data[ 37890 ];

	ABioHUD_eventProxyCanvasDrawMaterialTile_Parms ProxyCanvasDrawMaterialTile_Parms;
	ProxyCanvasDrawMaterialTile_Parms.Mat = Mat;
	ProxyCanvasDrawMaterialTile_Parms.XL = XL;
	ProxyCanvasDrawMaterialTile_Parms.YL = YL;

	this->ProcessEvent ( pFnProxyCanvasDrawMaterialTile, &ProxyCanvasDrawMaterialTile_Parms, NULL );
};

// Function SFXGame.BioHUD.ProxyCanvasSetPos
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void ABioHUD::eventProxyCanvasSetPos ( float X, float Y )
{
	static UFunction* pFnProxyCanvasSetPos = NULL;

	if ( ! pFnProxyCanvasSetPos )
		pFnProxyCanvasSetPos = (UFunction*) UObject::GObjObjects()->Data[ 37887 ];

	ABioHUD_eventProxyCanvasSetPos_Parms ProxyCanvasSetPos_Parms;
	ProxyCanvasSetPos_Parms.X = X;
	ProxyCanvasSetPos_Parms.Y = Y;

	this->ProcessEvent ( pFnProxyCanvasSetPos, &ProxyCanvasSetPos_Parms, NULL );
};

// Function SFXGame.BioHUD.ProxyMakeLinearColor
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FLinearColor            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          R                              ( CPF_Parm )
// float                          G                              ( CPF_Parm )
// float                          B                              ( CPF_Parm )
// float                          A                              ( CPF_Parm )

struct FLinearColor ABioHUD::eventProxyMakeLinearColor ( float R, float G, float B, float A )
{
	static UFunction* pFnProxyMakeLinearColor = NULL;

	if ( ! pFnProxyMakeLinearColor )
		pFnProxyMakeLinearColor = (UFunction*) UObject::GObjObjects()->Data[ 37881 ];

	ABioHUD_eventProxyMakeLinearColor_Parms ProxyMakeLinearColor_Parms;
	ProxyMakeLinearColor_Parms.R = R;
	ProxyMakeLinearColor_Parms.G = G;
	ProxyMakeLinearColor_Parms.B = B;
	ProxyMakeLinearColor_Parms.A = A;

	this->ProcessEvent ( pFnProxyMakeLinearColor, &ProxyMakeLinearColor_Parms, NULL );

	return ProxyMakeLinearColor_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.ViewportDeProject
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class ULocalPlayer*            LocalPlayerOwner               ( CPF_Parm )
// struct FVector                 ScreenLocation                 ( CPF_Parm )
// struct FVector                 OutLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 OutDirection                   ( CPF_Parm | CPF_OutParm )

void ABioHUD::ViewportDeProject ( class ULocalPlayer* LocalPlayerOwner, struct FVector ScreenLocation, struct FVector* OutLocation, struct FVector* OutDirection )
{
	static UFunction* pFnViewportDeProject = NULL;

	if ( ! pFnViewportDeProject )
		pFnViewportDeProject = (UFunction*) UObject::GObjObjects()->Data[ 37876 ];

	ABioHUD_execViewportDeProject_Parms ViewportDeProject_Parms;
	ViewportDeProject_Parms.LocalPlayerOwner = LocalPlayerOwner;
	memcpy ( &ViewportDeProject_Parms.ScreenLocation, &ScreenLocation, 0xC );

	pFnViewportDeProject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnViewportDeProject, &ViewportDeProject_Parms, NULL );

	pFnViewportDeProject->FunctionFlags |= 0x400;

	if ( OutLocation )
		memcpy ( OutLocation, &ViewportDeProject_Parms.OutLocation, 0xC );

	if ( OutDirection )
		memcpy ( OutDirection, &ViewportDeProject_Parms.OutDirection, 0xC );
};

// Function SFXGame.BioHUD.DisplaySquadMember
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            X                              ( CPF_Parm )
// int                            Y                              ( CPF_Parm )
// class UBioPawnBehavior*        targetBehavior                 ( CPF_Parm )
// class ABioPawn*                oBP                            ( CPF_Parm )

int ABioHUD::DisplaySquadMember ( int X, int Y, class UBioPawnBehavior* targetBehavior, class ABioPawn* oBP )
{
	static UFunction* pFnDisplaySquadMember = NULL;

	if ( ! pFnDisplaySquadMember )
		pFnDisplaySquadMember = (UFunction*) UObject::GObjObjects()->Data[ 37870 ];

	ABioHUD_execDisplaySquadMember_Parms DisplaySquadMember_Parms;
	DisplaySquadMember_Parms.X = X;
	DisplaySquadMember_Parms.Y = Y;
	DisplaySquadMember_Parms.targetBehavior = targetBehavior;
	DisplaySquadMember_Parms.oBP = oBP;

	pFnDisplaySquadMember->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplaySquadMember, &DisplaySquadMember_Parms, NULL );

	pFnDisplaySquadMember->FunctionFlags |= 0x400;

	return DisplaySquadMember_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.DisplaySquad_QA
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            X                              ( CPF_Parm )
// int                            Y                              ( CPF_Parm )
// class UBioPawnBehavior*        targetBehavior                 ( CPF_Parm )

int ABioHUD::DisplaySquad_QA ( int X, int Y, class UBioPawnBehavior* targetBehavior )
{
	static UFunction* pFnDisplaySquad_QA = NULL;

	if ( ! pFnDisplaySquad_QA )
		pFnDisplaySquad_QA = (UFunction*) UObject::GObjObjects()->Data[ 37865 ];

	ABioHUD_execDisplaySquad_QA_Parms DisplaySquad_QA_Parms;
	DisplaySquad_QA_Parms.X = X;
	DisplaySquad_QA_Parms.Y = Y;
	DisplaySquad_QA_Parms.targetBehavior = targetBehavior;

	pFnDisplaySquad_QA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplaySquad_QA, &DisplaySquad_QA_Parms, NULL );

	pFnDisplaySquad_QA->FunctionFlags |= 0x400;

	return DisplaySquad_QA_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.DisplayStateStack
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            X                              ( CPF_Parm )
// int                            Y                              ( CPF_Parm )
// class ABioAiController*        oController                    ( CPF_Parm )

int ABioHUD::DisplayStateStack ( int X, int Y, class ABioAiController* oController )
{
	static UFunction* pFnDisplayStateStack = NULL;

	if ( ! pFnDisplayStateStack )
		pFnDisplayStateStack = (UFunction*) UObject::GObjObjects()->Data[ 37860 ];

	ABioHUD_execDisplayStateStack_Parms DisplayStateStack_Parms;
	DisplayStateStack_Parms.X = X;
	DisplayStateStack_Parms.Y = Y;
	DisplayStateStack_Parms.oController = oController;

	pFnDisplayStateStack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayStateStack, &DisplayStateStack_Parms, NULL );

	pFnDisplayStateStack->FunctionFlags |= 0x400;

	return DisplayStateStack_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.GetNameOfEnumEntry
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )
// struct FString                 EnumName                       ( CPF_Parm | CPF_NeedCtorLink )

struct FName ABioHUD::GetNameOfEnumEntry ( int nIndex, struct FString EnumName )
{
	static UFunction* pFnGetNameOfEnumEntry = NULL;

	if ( ! pFnGetNameOfEnumEntry )
		pFnGetNameOfEnumEntry = (UFunction*) UObject::GObjObjects()->Data[ 37856 ];

	ABioHUD_execGetNameOfEnumEntry_Parms GetNameOfEnumEntry_Parms;
	GetNameOfEnumEntry_Parms.nIndex = nIndex;
	memcpy ( &GetNameOfEnumEntry_Parms.EnumName, &EnumName, 0xC );

	pFnGetNameOfEnumEntry->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNameOfEnumEntry, &GetNameOfEnumEntry_Parms, NULL );

	pFnGetNameOfEnumEntry->FunctionFlags |= 0x400;

	return GetNameOfEnumEntry_Parms.ReturnValue;
};

// Function SFXGame.BioHUD.DisplayIcon
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UMaterialInstanceConstant* oMatInstance                   ( CPF_Parm )
// struct FVector                 vWorldLocation                 ( CPF_Parm )
// unsigned long                  bScaleWithDistance             ( CPF_OptionalParm | CPF_Parm )
// float                          fMinTextureSize                ( CPF_OptionalParm | CPF_Parm )
// float                          fMaxTextureSize                ( CPF_OptionalParm | CPF_Parm )
// float                          fScaleRange                    ( CPF_OptionalParm | CPF_Parm )

void ABioHUD::DisplayIcon ( class UMaterialInstanceConstant* oMatInstance, struct FVector vWorldLocation, unsigned long bScaleWithDistance, float fMinTextureSize, float fMaxTextureSize, float fScaleRange )
{
	static UFunction* pFnDisplayIcon = NULL;

	if ( ! pFnDisplayIcon )
		pFnDisplayIcon = (UFunction*) UObject::GObjObjects()->Data[ 37849 ];

	ABioHUD_execDisplayIcon_Parms DisplayIcon_Parms;
	DisplayIcon_Parms.oMatInstance = oMatInstance;
	memcpy ( &DisplayIcon_Parms.vWorldLocation, &vWorldLocation, 0xC );
	DisplayIcon_Parms.bScaleWithDistance = bScaleWithDistance;
	DisplayIcon_Parms.fMinTextureSize = fMinTextureSize;
	DisplayIcon_Parms.fMaxTextureSize = fMaxTextureSize;
	DisplayIcon_Parms.fScaleRange = fScaleRange;

	pFnDisplayIcon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayIcon, &DisplayIcon_Parms, NULL );

	pFnDisplayIcon->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileDesignBudgetGeneral
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioHUD::ProfileDesignBudgetGeneral ( )
{
	static UFunction* pFnProfileDesignBudgetGeneral = NULL;

	if ( ! pFnProfileDesignBudgetGeneral )
		pFnProfileDesignBudgetGeneral = (UFunction*) UObject::GObjObjects()->Data[ 37848 ];

	ABioHUD_execProfileDesignBudgetGeneral_Parms ProfileDesignBudgetGeneral_Parms;

	pFnProfileDesignBudgetGeneral->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileDesignBudgetGeneral, &ProfileDesignBudgetGeneral_Parms, NULL );

	pFnProfileDesignBudgetGeneral->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileLookAt
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioActorBehavior*       targetActorBehavior            ( CPF_Parm )

void ABioHUD::ProfileLookAt ( class UBioActorBehavior* targetActorBehavior )
{
	static UFunction* pFnProfileLookAt = NULL;

	if ( ! pFnProfileLookAt )
		pFnProfileLookAt = (UFunction*) UObject::GObjObjects()->Data[ 37846 ];

	ABioHUD_execProfileLookAt_Parms ProfileLookAt_Parms;
	ProfileLookAt_Parms.targetActorBehavior = targetActorBehavior;

	pFnProfileLookAt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileLookAt, &ProfileLookAt_Parms, NULL );

	pFnProfileLookAt->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileCover
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioActorBehavior*       targetActorBehavior            ( CPF_Parm )

void ABioHUD::ProfileCover ( class UBioActorBehavior* targetActorBehavior )
{
	static UFunction* pFnProfileCover = NULL;

	if ( ! pFnProfileCover )
		pFnProfileCover = (UFunction*) UObject::GObjObjects()->Data[ 37844 ];

	ABioHUD_execProfileCover_Parms ProfileCover_Parms;
	ProfileCover_Parms.targetActorBehavior = targetActorBehavior;

	pFnProfileCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileCover, &ProfileCover_Parms, NULL );

	pFnProfileCover->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioActorBehavior*       targetActorBehavior            ( CPF_Parm )

void ABioHUD::ProfileAnim ( class UBioActorBehavior* targetActorBehavior )
{
	static UFunction* pFnProfileAnim = NULL;

	if ( ! pFnProfileAnim )
		pFnProfileAnim = (UFunction*) UObject::GObjObjects()->Data[ 37842 ];

	ABioHUD_execProfileAnim_Parms ProfileAnim_Parms;
	ProfileAnim_Parms.targetActorBehavior = targetActorBehavior;

	pFnProfileAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileAnim, &ProfileAnim_Parms, NULL );

	pFnProfileAnim->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileGestures
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioActorBehavior*       targetActorBehavior            ( CPF_Parm )

void ABioHUD::ProfileGestures ( class UBioActorBehavior* targetActorBehavior )
{
	static UFunction* pFnProfileGestures = NULL;

	if ( ! pFnProfileGestures )
		pFnProfileGestures = (UFunction*) UObject::GObjObjects()->Data[ 37840 ];

	ABioHUD_execProfileGestures_Parms ProfileGestures_Parms;
	ProfileGestures_Parms.targetActorBehavior = targetActorBehavior;

	pFnProfileGestures->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileGestures, &ProfileGestures_Parms, NULL );

	pFnProfileGestures->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileConversation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioActorBehavior*       targetActorBehavior            ( CPF_Parm )

void ABioHUD::ProfileConversation ( class UBioActorBehavior* targetActorBehavior )
{
	static UFunction* pFnProfileConversation = NULL;

	if ( ! pFnProfileConversation )
		pFnProfileConversation = (UFunction*) UObject::GObjObjects()->Data[ 37838 ];

	ABioHUD_execProfileConversation_Parms ProfileConversation_Parms;
	ProfileConversation_Parms.targetActorBehavior = targetActorBehavior;

	pFnProfileConversation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileConversation, &ProfileConversation_Parms, NULL );

	pFnProfileConversation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioHUD.ProfileConversationBug
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioActorBehavior*       targetActorBehavior            ( CPF_Parm )

void ABioHUD::ProfileConversationBug ( class UBioActorBehavior* targetActorBehavior )
{
	static UFunction* pFnProfileConversationBug = NULL;

	if ( ! pFnProfileConversationBug )
		pFnProfileConversationBug = (UFunction*) UObject::GObjObjects()->Data[ 37836 ];

	ABioHUD_execProfileConversationBug_Parms ProfileConversationBug_Parms;
	ProfileConversationBug_Parms.targetActorBehavior = targetActorBehavior;

	pFnProfileConversationBug->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileConversationBug, &ProfileConversationBug_Parms, NULL );

	pFnProfileConversationBug->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMessageBox.PageUp
// [0x00020002] 
// Parameters infos:

void UBioMessageBox::PageUp ( )
{
	static UFunction* pFnPageUp = NULL;

	if ( ! pFnPageUp )
		pFnPageUp = (UFunction*) UObject::GObjObjects()->Data[ 37778 ];

	UBioMessageBox_execPageUp_Parms PageUp_Parms;

	this->ProcessEvent ( pFnPageUp, &PageUp_Parms, NULL );
};

// Function SFXGame.BioMessageBox.PageDown
// [0x00020002] 
// Parameters infos:

void UBioMessageBox::PageDown ( )
{
	static UFunction* pFnPageDown = NULL;

	if ( ! pFnPageDown )
		pFnPageDown = (UFunction*) UObject::GObjObjects()->Data[ 37777 ];

	UBioMessageBox_execPageDown_Parms PageDown_Parms;

	this->ProcessEvent ( pFnPageDown, &PageDown_Parms, NULL );
};

// Function SFXGame.BioMessageBox.ScrollUp
// [0x00020002] 
// Parameters infos:

void UBioMessageBox::ScrollUp ( )
{
	static UFunction* pFnScrollUp = NULL;

	if ( ! pFnScrollUp )
		pFnScrollUp = (UFunction*) UObject::GObjObjects()->Data[ 37776 ];

	UBioMessageBox_execScrollUp_Parms ScrollUp_Parms;

	this->ProcessEvent ( pFnScrollUp, &ScrollUp_Parms, NULL );
};

// Function SFXGame.BioMessageBox.ScrollDown
// [0x00020002] 
// Parameters infos:

void UBioMessageBox::ScrollDown ( )
{
	static UFunction* pFnScrollDown = NULL;

	if ( ! pFnScrollDown )
		pFnScrollDown = (UFunction*) UObject::GObjObjects()->Data[ 37775 ];

	UBioMessageBox_execScrollDown_Parms ScrollDown_Parms;

	this->ProcessEvent ( pFnScrollDown, &ScrollDown_Parms, NULL );
};

// Function SFXGame.BioMessageBox.RenderContent
// [0x00080002] 
// Parameters infos:
// class UCanvas*                 oCanvas                        ( CPF_Parm )

void UBioMessageBox::RenderContent ( class UCanvas* oCanvas )
{
	static UFunction* pFnRenderContent = NULL;

	if ( ! pFnRenderContent )
		pFnRenderContent = (UFunction*) UObject::GObjObjects()->Data[ 37772 ];

	UBioMessageBox_execRenderContent_Parms RenderContent_Parms;
	RenderContent_Parms.oCanvas = oCanvas;

	this->ProcessEvent ( pFnRenderContent, &RenderContent_Parms, NULL );
};

// Function SFXGame.BioMessageBox.HasText
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioMessageBox::eventHasText ( )
{
	static UFunction* pFnHasText = NULL;

	if ( ! pFnHasText )
		pFnHasText = (UFunction*) UObject::GObjObjects()->Data[ 37769 ];

	UBioMessageBox_eventHasText_Parms HasText_Parms;

	this->ProcessEvent ( pFnHasText, &HasText_Parms, NULL );

	return HasText_Parms.ReturnValue;
};

// Function SFXGame.BioMessageBox.SetTextArray
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FString >       aText                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioMessageBox::SetTextArray ( TArray< struct FString >* aText )
{
	static UFunction* pFnSetTextArray = NULL;

	if ( ! pFnSetTextArray )
		pFnSetTextArray = (UFunction*) UObject::GObjObjects()->Data[ 37766 ];

	UBioMessageBox_execSetTextArray_Parms SetTextArray_Parms;

	pFnSetTextArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextArray, &SetTextArray_Parms, NULL );

	pFnSetTextArray->FunctionFlags |= 0x400;

	if ( aText )
		memcpy ( aText, &SetTextArray_Parms.aText, 0xC );
};

// Function SFXGame.BioMessageBox.SetText
// [0x00020002] 
// Parameters infos:
// struct FString                 S                              ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UBioMessageBox::SetText ( struct FString S )
{
	static UFunction* pFnSetText = NULL;

	if ( ! pFnSetText )
		pFnSetText = (UFunction*) UObject::GObjObjects()->Data[ 37764 ];

	UBioMessageBox_execSetText_Parms SetText_Parms;
	memcpy ( &SetText_Parms.S, &S, 0xC );

	this->ProcessEvent ( pFnSetText, &SetText_Parms, NULL );
};

// Function SFXGame.BioMessageBox.ShouldRender
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioMessageBox::ShouldRender ( )
{
	static UFunction* pFnShouldRender = NULL;

	if ( ! pFnShouldRender )
		pFnShouldRender = (UFunction*) UObject::GObjObjects()->Data[ 37762 ];

	UBioMessageBox_execShouldRender_Parms ShouldRender_Parms;

	this->ProcessEvent ( pFnShouldRender, &ShouldRender_Parms, NULL );

	return ShouldRender_Parms.ReturnValue;
};

// Function SFXGame.BioMessageBox.ComputeDrawParameters
// [0x00080002] 
// Parameters infos:
// class UCanvas*                 oCanvas                        ( CPF_Parm )

void UBioMessageBox::ComputeDrawParameters ( class UCanvas* oCanvas )
{
	static UFunction* pFnComputeDrawParameters = NULL;

	if ( ! pFnComputeDrawParameters )
		pFnComputeDrawParameters = (UFunction*) UObject::GObjObjects()->Data[ 37755 ];

	UBioMessageBox_execComputeDrawParameters_Parms ComputeDrawParameters_Parms;
	ComputeDrawParameters_Parms.oCanvas = oCanvas;

	this->ProcessEvent ( pFnComputeDrawParameters, &ComputeDrawParameters_Parms, NULL );
};

// Function SFXGame.BioMoviePlayer.ShutdownMovie
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioMoviePlayer::eventShutdownMovie ( )
{
	static UFunction* pFnShutdownMovie = NULL;

	if ( ! pFnShutdownMovie )
		pFnShutdownMovie = (UFunction*) UObject::GObjObjects()->Data[ 37793 ];

	UBioMoviePlayer_eventShutdownMovie_Parms ShutdownMovie_Parms;

	this->ProcessEvent ( pFnShutdownMovie, &ShutdownMovie_Parms, NULL );
};

// Function SFXGame.BioMoviePlayer.Draw
// [0x00020002] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void UBioMoviePlayer::Draw ( class UCanvas* Canvas )
{
	static UFunction* pFnDraw = NULL;

	if ( ! pFnDraw )
		pFnDraw = (UFunction*) UObject::GObjObjects()->Data[ 37791 ];

	UBioMoviePlayer_execDraw_Parms Draw_Parms;
	Draw_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnDraw, &Draw_Parms, NULL );
};

// Function SFXGame.BioMoviePlayer.SetMaterial
// [0x00020002] 
// Parameters infos:
// class UMaterial*               Material                       ( CPF_Parm )

void UBioMoviePlayer::SetMaterial ( class UMaterial* Material )
{
	static UFunction* pFnSetMaterial = NULL;

	if ( ! pFnSetMaterial )
		pFnSetMaterial = (UFunction*) UObject::GObjObjects()->Data[ 37788 ];

	UBioMoviePlayer_execSetMaterial_Parms SetMaterial_Parms;
	SetMaterial_Parms.Material = Material;

	this->ProcessEvent ( pFnSetMaterial, &SetMaterial_Parms, NULL );
};

// Function SFXGame.BioMoviePlayer.SetTextureMovie
// [0x00020002] 
// Parameters infos:
// class UTextureMovie*           TextureMovie                   ( CPF_Parm )

void UBioMoviePlayer::SetTextureMovie ( class UTextureMovie* TextureMovie )
{
	static UFunction* pFnSetTextureMovie = NULL;

	if ( ! pFnSetTextureMovie )
		pFnSetTextureMovie = (UFunction*) UObject::GObjObjects()->Data[ 37785 ];

	UBioMoviePlayer_execSetTextureMovie_Parms SetTextureMovie_Parms;
	SetTextureMovie_Parms.TextureMovie = TextureMovie;

	this->ProcessEvent ( pFnSetTextureMovie, &SetTextureMovie_Parms, NULL );
};

// Function SFXGame.BioMoviePlayer.InitializeMovie
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UBioMoviePlayer::InitializeMovie ( )
{
	static UFunction* pFnInitializeMovie = NULL;

	if ( ! pFnInitializeMovie )
		pFnInitializeMovie = (UFunction*) UObject::GObjObjects()->Data[ 37784 ];

	UBioMoviePlayer_execInitializeMovie_Parms InitializeMovie_Parms;

	this->ProcessEvent ( pFnInitializeMovie, &InitializeMovie_Parms, NULL );
};

// Function SFXGame.BioMoviePlayer.OnMovieFinished
// [0x00120000] 
// Parameters infos:
// class UTextureMovie*           TextureMovie                   ( CPF_Parm )

void UBioMoviePlayer::OnMovieFinished ( class UTextureMovie* TextureMovie )
{
	static UFunction* pFnOnMovieFinished = NULL;

	if ( ! pFnOnMovieFinished )
		pFnOnMovieFinished = (UFunction*) UObject::GObjObjects()->Data[ 37780 ];

	UBioMoviePlayer_execOnMovieFinished_Parms OnMovieFinished_Parms;
	OnMovieFinished_Parms.TextureMovie = TextureMovie;

	this->ProcessEvent ( pFnOnMovieFinished, &OnMovieFinished_Parms, NULL );
};

// Function SFXGame.BioSubtitles.UpdateSubtitles
// [0x00020002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSubtitles::UpdateSubtitles ( float fDeltaT )
{
	static UFunction* pFnUpdateSubtitles = NULL;

	if ( ! pFnUpdateSubtitles )
		pFnUpdateSubtitles = (UFunction*) UObject::GObjObjects()->Data[ 50076 ];

	UBioSubtitles_execUpdateSubtitles_Parms UpdateSubtitles_Parms;
	UpdateSubtitles_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateSubtitles, &UpdateSubtitles_Parms, NULL );
};

// Function SFXGame.BioSubtitles.PrivateUpdateSubtitles
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSubtitles::PrivateUpdateSubtitles ( float fDeltaT )
{
	static UFunction* pFnPrivateUpdateSubtitles = NULL;

	if ( ! pFnPrivateUpdateSubtitles )
		pFnPrivateUpdateSubtitles = (UFunction*) UObject::GObjObjects()->Data[ 50074 ];

	UBioSubtitles_execPrivateUpdateSubtitles_Parms PrivateUpdateSubtitles_Parms;
	PrivateUpdateSubtitles_Parms.fDeltaT = fDeltaT;

	pFnPrivateUpdateSubtitles->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrivateUpdateSubtitles, &PrivateUpdateSubtitles_Parms, NULL );

	pFnPrivateUpdateSubtitles->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSubtitles.GetAlert
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSubtitles::GetAlert ( )
{
	static UFunction* pFnGetAlert = NULL;

	if ( ! pFnGetAlert )
		pFnGetAlert = (UFunction*) UObject::GObjObjects()->Data[ 50072 ];

	UBioSubtitles_execGetAlert_Parms GetAlert_Parms;

	pFnGetAlert->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAlert, &GetAlert_Parms, NULL );

	pFnGetAlert->FunctionFlags |= 0x400;

	return GetAlert_Parms.ReturnValue;
};

// Function SFXGame.BioSubtitles.SetAlert
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAlert                         ( CPF_Parm )

void UBioSubtitles::SetAlert ( unsigned long bAlert )
{
	static UFunction* pFnSetAlert = NULL;

	if ( ! pFnSetAlert )
		pFnSetAlert = (UFunction*) UObject::GObjObjects()->Data[ 50070 ];

	UBioSubtitles_execSetAlert_Parms SetAlert_Parms;
	SetAlert_Parms.bAlert = bAlert;

	pFnSetAlert->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAlert, &SetAlert_Parms, NULL );

	pFnSetAlert->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSubtitles.GetFontColor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FColor UBioSubtitles::GetFontColor ( )
{
	static UFunction* pFnGetFontColor = NULL;

	if ( ! pFnGetFontColor )
		pFnGetFontColor = (UFunction*) UObject::GObjObjects()->Data[ 50068 ];

	UBioSubtitles_execGetFontColor_Parms GetFontColor_Parms;

	pFnGetFontColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFontColor, &GetFontColor_Parms, NULL );

	pFnGetFontColor->FunctionFlags |= 0x400;

	return GetFontColor_Parms.ReturnValue;
};

// Function SFXGame.BioSubtitles.SetFontColor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FColor                  oColor                         ( CPF_Parm )

void UBioSubtitles::SetFontColor ( struct FColor oColor )
{
	static UFunction* pFnSetFontColor = NULL;

	if ( ! pFnSetFontColor )
		pFnSetFontColor = (UFunction*) UObject::GObjObjects()->Data[ 50066 ];

	UBioSubtitles_execSetFontColor_Parms SetFontColor_Parms;
	memcpy ( &SetFontColor_Parms.oColor, &oColor, 0x4 );

	pFnSetFontColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFontColor, &SetFontColor_Parms, NULL );

	pFnSetFontColor->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSubtitles.GetSubtitle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioSubtitles::GetSubtitle ( )
{
	static UFunction* pFnGetSubtitle = NULL;

	if ( ! pFnGetSubtitle )
		pFnGetSubtitle = (UFunction*) UObject::GObjObjects()->Data[ 50064 ];

	UBioSubtitles_execGetSubtitle_Parms GetSubtitle_Parms;

	pFnGetSubtitle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSubtitle, &GetSubtitle_Parms, NULL );

	pFnGetSubtitle->FunctionFlags |= 0x400;

	return GetSubtitle_Parms.ReturnValue;
};

// Function SFXGame.BioSubtitles.SetSubtitle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 strSubtitle                    ( CPF_Parm | CPF_NeedCtorLink )

void UBioSubtitles::SetSubtitle ( struct FString strSubtitle )
{
	static UFunction* pFnSetSubtitle = NULL;

	if ( ! pFnSetSubtitle )
		pFnSetSubtitle = (UFunction*) UObject::GObjObjects()->Data[ 50062 ];

	UBioSubtitles_execSetSubtitle_Parms SetSubtitle_Parms;
	memcpy ( &SetSubtitle_Parms.strSubtitle, &strSubtitle, 0xC );

	pFnSetSubtitle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSubtitle, &SetSubtitle_Parms, NULL );

	pFnSetSubtitle->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSubtitles.ClearHistory
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSubtitles::ClearHistory ( )
{
	static UFunction* pFnClearHistory = NULL;

	if ( ! pFnClearHistory )
		pFnClearHistory = (UFunction*) UObject::GObjObjects()->Data[ 50061 ];

	UBioSubtitles_execClearHistory_Parms ClearHistory_Parms;

	pFnClearHistory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearHistory, &ClearHistory_Parms, NULL );

	pFnClearHistory->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSubtitles.SetRenderMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  RenderMode                     ( CPF_Parm )
// unsigned long                  bForceDisplay                  ( CPF_OptionalParm | CPF_Parm )

unsigned char UBioSubtitles::SetRenderMode ( unsigned char RenderMode, unsigned long bForceDisplay )
{
	static UFunction* pFnSetRenderMode = NULL;

	if ( ! pFnSetRenderMode )
		pFnSetRenderMode = (UFunction*) UObject::GObjObjects()->Data[ 50057 ];

	UBioSubtitles_execSetRenderMode_Parms SetRenderMode_Parms;
	SetRenderMode_Parms.RenderMode = RenderMode;
	SetRenderMode_Parms.bForceDisplay = bForceDisplay;

	pFnSetRenderMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRenderMode, &SetRenderMode_Parms, NULL );

	pFnSetRenderMode->FunctionFlags |= 0x400;

	return SetRenderMode_Parms.ReturnValue;
};

// Function SFXGame.BioSubtitles.GetRenderMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char UBioSubtitles::GetRenderMode ( )
{
	static UFunction* pFnGetRenderMode = NULL;

	if ( ! pFnGetRenderMode )
		pFnGetRenderMode = (UFunction*) UObject::GObjObjects()->Data[ 50055 ];

	UBioSubtitles_execGetRenderMode_Parms GetRenderMode_Parms;

	pFnGetRenderMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRenderMode, &GetRenderMode_Parms, NULL );

	pFnGetRenderMode->FunctionFlags |= 0x400;

	return GetRenderMode_Parms.ReturnValue;
};

// Function SFXGame.BioSubtitles.HasSubtitle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSubtitles::HasSubtitle ( )
{
	static UFunction* pFnHasSubtitle = NULL;

	if ( ! pFnHasSubtitle )
		pFnHasSubtitle = (UFunction*) UObject::GObjObjects()->Data[ 50053 ];

	UBioSubtitles_execHasSubtitle_Parms HasSubtitle_Parms;

	pFnHasSubtitle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasSubtitle, &HasSubtitle_Parms, NULL );

	pFnHasSubtitle->FunctionFlags |= 0x400;

	return HasSubtitle_Parms.ReturnValue;
};

// Function SFXGame.BioSubtitles.DisplaySubtitle
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sSubtitle                      ( CPF_Parm | CPF_NeedCtorLink )
// float                          fDuration                      ( CPF_Parm )

void UBioSubtitles::DisplaySubtitle ( struct FString sSubtitle, float fDuration )
{
	static UFunction* pFnDisplaySubtitle = NULL;

	if ( ! pFnDisplaySubtitle )
		pFnDisplaySubtitle = (UFunction*) UObject::GObjObjects()->Data[ 50050 ];

	UBioSubtitles_execDisplaySubtitle_Parms DisplaySubtitle_Parms;
	memcpy ( &DisplaySubtitle_Parms.sSubtitle, &sSubtitle, 0xC );
	DisplaySubtitle_Parms.fDuration = fDuration;

	pFnDisplaySubtitle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplaySubtitle, &DisplaySubtitle_Parms, NULL );

	pFnDisplaySubtitle->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.ClearScarFromPawn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ABioPawn*                PawnToClear                    ( CPF_Parm )

void UBioUIWorld::eventClearScarFromPawn ( class ABioPawn* PawnToClear )
{
	static UFunction* pFnClearScarFromPawn = NULL;

	if ( ! pFnClearScarFromPawn )
		pFnClearScarFromPawn = (UFunction*) UObject::GObjObjects()->Data[ 50552 ];

	UBioUIWorld_eventClearScarFromPawn_Parms ClearScarFromPawn_Parms;
	ClearScarFromPawn_Parms.PawnToClear = PawnToClear;

	this->ProcessEvent ( pFnClearScarFromPawn, &ClearScarFromPawn_Parms, NULL );
};

// Function SFXGame.BioUIWorld.RotatePawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                a_pOriginalPawn                ( CPF_Parm )
// struct FRotator                a_newRot                       ( CPF_Parm )

void UBioUIWorld::RotatePawn ( class ABioPawn* a_pOriginalPawn, struct FRotator a_newRot )
{
	static UFunction* pFnRotatePawn = NULL;

	if ( ! pFnRotatePawn )
		pFnRotatePawn = (UFunction*) UObject::GObjObjects()->Data[ 50549 ];

	UBioUIWorld_execRotatePawn_Parms RotatePawn_Parms;
	RotatePawn_Parms.a_pOriginalPawn = a_pOriginalPawn;
	memcpy ( &RotatePawn_Parms.a_newRot, &a_newRot, 0xC );

	pFnRotatePawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRotatePawn, &RotatePawn_Parms, NULL );

	pFnRotatePawn->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.GetSpawnedPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                a_pOriginalPawn                ( CPF_Parm )

class ABioPawn* UBioUIWorld::GetSpawnedPawn ( class ABioPawn* a_pOriginalPawn )
{
	static UFunction* pFnGetSpawnedPawn = NULL;

	if ( ! pFnGetSpawnedPawn )
		pFnGetSpawnedPawn = (UFunction*) UObject::GObjObjects()->Data[ 50546 ];

	UBioUIWorld_execGetSpawnedPawn_Parms GetSpawnedPawn_Parms;
	GetSpawnedPawn_Parms.a_pOriginalPawn = a_pOriginalPawn;

	pFnGetSpawnedPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSpawnedPawn, &GetSpawnedPawn_Parms, NULL );

	pFnGetSpawnedPawn->FunctionFlags |= 0x400;

	return GetSpawnedPawn_Parms.ReturnValue;
};

// Function SFXGame.BioUIWorld.FlushPendingCommands
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioUIWorld::FlushPendingCommands ( )
{
	static UFunction* pFnFlushPendingCommands = NULL;

	if ( ! pFnFlushPendingCommands )
		pFnFlushPendingCommands = (UFunction*) UObject::GObjObjects()->Data[ 50545 ];

	UBioUIWorld_execFlushPendingCommands_Parms FlushPendingCommands_Parms;

	pFnFlushPendingCommands->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlushPendingCommands, &FlushPendingCommands_Parms, NULL );

	pFnFlushPendingCommands->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.HidePawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                a_pOriginalPawn                ( CPF_Parm )
// unsigned long                  bHidden                        ( CPF_OptionalParm | CPF_Parm )

void UBioUIWorld::HidePawn ( class ABioPawn* a_pOriginalPawn, unsigned long bHidden )
{
	static UFunction* pFnHidePawn = NULL;

	if ( ! pFnHidePawn )
		pFnHidePawn = (UFunction*) UObject::GObjObjects()->Data[ 50542 ];

	UBioUIWorld_execHidePawn_Parms HidePawn_Parms;
	HidePawn_Parms.a_pOriginalPawn = a_pOriginalPawn;
	HidePawn_Parms.bHidden = bHidden;

	pFnHidePawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHidePawn, &HidePawn_Parms, NULL );

	pFnHidePawn->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.SetAnimSet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                SourcePawn                     ( CPF_Parm )
// class UAnimSet*                AnimSet                        ( CPF_Parm )

void UBioUIWorld::SetAnimSet ( class ABioPawn* SourcePawn, class UAnimSet* AnimSet )
{
	static UFunction* pFnSetAnimSet = NULL;

	if ( ! pFnSetAnimSet )
		pFnSetAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 50539 ];

	UBioUIWorld_execSetAnimSet_Parms SetAnimSet_Parms;
	SetAnimSet_Parms.SourcePawn = SourcePawn;
	SetAnimSet_Parms.AnimSet = AnimSet;

	pFnSetAnimSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnimSet, &SetAnimSet_Parms, NULL );

	pFnSetAnimSet->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.ClearVFX
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                SourcePawn                     ( CPF_Parm )

void UBioUIWorld::ClearVFX ( class ABioPawn* SourcePawn )
{
	static UFunction* pFnClearVFX = NULL;

	if ( ! pFnClearVFX )
		pFnClearVFX = (UFunction*) UObject::GObjObjects()->Data[ 50537 ];

	UBioUIWorld_execClearVFX_Parms ClearVFX_Parms;
	ClearVFX_Parms.SourcePawn = SourcePawn;

	pFnClearVFX->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearVFX, &ClearVFX_Parms, NULL );

	pFnClearVFX->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.ApplyVFXTemplate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                SourcePawn                     ( CPF_Parm )
// class UBioVFXTemplate*         Template                       ( CPF_Parm )

void UBioUIWorld::ApplyVFXTemplate ( class ABioPawn* SourcePawn, class UBioVFXTemplate* Template )
{
	static UFunction* pFnApplyVFXTemplate = NULL;

	if ( ! pFnApplyVFXTemplate )
		pFnApplyVFXTemplate = (UFunction*) UObject::GObjObjects()->Data[ 50534 ];

	UBioUIWorld_execApplyVFXTemplate_Parms ApplyVFXTemplate_Parms;
	ApplyVFXTemplate_Parms.SourcePawn = SourcePawn;
	ApplyVFXTemplate_Parms.Template = Template;

	pFnApplyVFXTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyVFXTemplate, &ApplyVFXTemplate_Parms, NULL );

	pFnApplyVFXTemplate->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.AttachOmnitool
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                a_pSourcePawn                  ( CPF_Parm )
// unsigned long                  a_fnClassName                  ( CPF_Parm )

void UBioUIWorld::AttachOmnitool ( class ABioPawn* a_pSourcePawn, unsigned long a_fnClassName )
{
	static UFunction* pFnAttachOmnitool = NULL;

	if ( ! pFnAttachOmnitool )
		pFnAttachOmnitool = (UFunction*) UObject::GObjObjects()->Data[ 50531 ];

	UBioUIWorld_execAttachOmnitool_Parms AttachOmnitool_Parms;
	AttachOmnitool_Parms.a_pSourcePawn = a_pSourcePawn;
	AttachOmnitool_Parms.a_fnClassName = a_fnClassName;

	pFnAttachOmnitool->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachOmnitool, &AttachOmnitool_Parms, NULL );

	pFnAttachOmnitool->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.PrimeTextures
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                a_pSourcePawn                  ( CPF_Parm )

void UBioUIWorld::PrimeTextures ( class ABioPawn* a_pSourcePawn )
{
	static UFunction* pFnPrimeTextures = NULL;

	if ( ! pFnPrimeTextures )
		pFnPrimeTextures = (UFunction*) UObject::GObjObjects()->Data[ 50529 ];

	UBioUIWorld_execPrimeTextures_Parms PrimeTextures_Parms;
	PrimeTextures_Parms.a_pSourcePawn = a_pSourcePawn;

	pFnPrimeTextures->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrimeTextures, &PrimeTextures_Parms, NULL );

	pFnPrimeTextures->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.AttachBioticsAndTech
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                a_pSourcePawn                  ( CPF_Parm )
// struct FName                   a_fnClassName                  ( CPF_Parm )

void UBioUIWorld::AttachBioticsAndTech ( class ABioPawn* a_pSourcePawn, struct FName a_fnClassName )
{
	static UFunction* pFnAttachBioticsAndTech = NULL;

	if ( ! pFnAttachBioticsAndTech )
		pFnAttachBioticsAndTech = (UFunction*) UObject::GObjObjects()->Data[ 50526 ];

	UBioUIWorld_execAttachBioticsAndTech_Parms AttachBioticsAndTech_Parms;
	AttachBioticsAndTech_Parms.a_pSourcePawn = a_pSourcePawn;
	memcpy ( &AttachBioticsAndTech_Parms.a_fnClassName, &a_fnClassName, 0x8 );

	pFnAttachBioticsAndTech->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAttachBioticsAndTech, &AttachBioticsAndTech_Parms, NULL );

	pFnAttachBioticsAndTech->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.MovePawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                a_pOriginalPawn                ( CPF_Parm )
// struct FName                   a_fnNewLocation                ( CPF_Parm )

void UBioUIWorld::MovePawn ( class ABioPawn* a_pOriginalPawn, struct FName a_fnNewLocation )
{
	static UFunction* pFnMovePawn = NULL;

	if ( ! pFnMovePawn )
		pFnMovePawn = (UFunction*) UObject::GObjObjects()->Data[ 50523 ];

	UBioUIWorld_execMovePawn_Parms MovePawn_Parms;
	MovePawn_Parms.a_pOriginalPawn = a_pOriginalPawn;
	memcpy ( &MovePawn_Parms.a_fnNewLocation, &a_fnNewLocation, 0x8 );

	pFnMovePawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMovePawn, &MovePawn_Parms, NULL );

	pFnMovePawn->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.SwapPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                a_pSourcePawn                  ( CPF_Parm )
// struct FName                   a_fnSourceVarName              ( CPF_Parm )
// class ABioPawn*                a_pOtherPawn                   ( CPF_Parm )
// struct FName                   a_fnOtherVarName               ( CPF_Parm )

void UBioUIWorld::SwapPawn ( class ABioPawn* a_pSourcePawn, struct FName a_fnSourceVarName, class ABioPawn* a_pOtherPawn, struct FName a_fnOtherVarName )
{
	static UFunction* pFnSwapPawn = NULL;

	if ( ! pFnSwapPawn )
		pFnSwapPawn = (UFunction*) UObject::GObjObjects()->Data[ 50518 ];

	UBioUIWorld_execSwapPawn_Parms SwapPawn_Parms;
	SwapPawn_Parms.a_pSourcePawn = a_pSourcePawn;
	memcpy ( &SwapPawn_Parms.a_fnSourceVarName, &a_fnSourceVarName, 0x8 );
	SwapPawn_Parms.a_pOtherPawn = a_pOtherPawn;
	memcpy ( &SwapPawn_Parms.a_fnOtherVarName, &a_fnOtherVarName, 0x8 );

	pFnSwapPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapPawn, &SwapPawn_Parms, NULL );

	pFnSwapPawn->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.ResetActors
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioUIWorld::ResetActors ( )
{
	static UFunction* pFnResetActors = NULL;

	if ( ! pFnResetActors )
		pFnResetActors = (UFunction*) UObject::GObjObjects()->Data[ 50517 ];

	UBioUIWorld_execResetActors_Parms ResetActors_Parms;

	pFnResetActors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetActors, &ResetActors_Parms, NULL );

	pFnResetActors->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.SetBoolVariable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   a_fnVariableName               ( CPF_Parm )
// unsigned long                  a_bValue                       ( CPF_Parm )

void UBioUIWorld::SetBoolVariable ( struct FName a_fnVariableName, unsigned long a_bValue )
{
	static UFunction* pFnSetBoolVariable = NULL;

	if ( ! pFnSetBoolVariable )
		pFnSetBoolVariable = (UFunction*) UObject::GObjObjects()->Data[ 50514 ];

	UBioUIWorld_execSetBoolVariable_Parms SetBoolVariable_Parms;
	memcpy ( &SetBoolVariable_Parms.a_fnVariableName, &a_fnVariableName, 0x8 );
	SetBoolVariable_Parms.a_bValue = a_bValue;

	pFnSetBoolVariable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBoolVariable, &SetBoolVariable_Parms, NULL );

	pFnSetBoolVariable->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.SetNameVariable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   a_fnVariableName               ( CPF_Parm )
// struct FName                   a_nmValue                      ( CPF_Parm )

void UBioUIWorld::SetNameVariable ( struct FName a_fnVariableName, struct FName a_nmValue )
{
	static UFunction* pFnSetNameVariable = NULL;

	if ( ! pFnSetNameVariable )
		pFnSetNameVariable = (UFunction*) UObject::GObjObjects()->Data[ 50511 ];

	UBioUIWorld_execSetNameVariable_Parms SetNameVariable_Parms;
	memcpy ( &SetNameVariable_Parms.a_fnVariableName, &a_fnVariableName, 0x8 );
	memcpy ( &SetNameVariable_Parms.a_nmValue, &a_nmValue, 0x8 );

	pFnSetNameVariable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNameVariable, &SetNameVariable_Parms, NULL );

	pFnSetNameVariable->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.SetObjectVariable
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   a_fnVariableName               ( CPF_Parm )
// class UObject*                 a_pValue                       ( CPF_Parm )

void UBioUIWorld::SetObjectVariable ( struct FName a_fnVariableName, class UObject* a_pValue )
{
	static UFunction* pFnSetObjectVariable = NULL;

	if ( ! pFnSetObjectVariable )
		pFnSetObjectVariable = (UFunction*) UObject::GObjObjects()->Data[ 50508 ];

	UBioUIWorld_execSetObjectVariable_Parms SetObjectVariable_Parms;
	memcpy ( &SetObjectVariable_Parms.a_fnVariableName, &a_fnVariableName, 0x8 );
	SetObjectVariable_Parms.a_pValue = a_pValue;

	pFnSetObjectVariable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetObjectVariable, &SetObjectVariable_Parms, NULL );

	pFnSetObjectVariable->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.UpdateHeadGearVisibility
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ABioPawn*                pOriginalPawn                  ( CPF_Parm )

void UBioUIWorld::UpdateHeadGearVisibility ( class ABioPawn* pOriginalPawn )
{
	static UFunction* pFnUpdateHeadGearVisibility = NULL;

	if ( ! pFnUpdateHeadGearVisibility )
		pFnUpdateHeadGearVisibility = (UFunction*) UObject::GObjObjects()->Data[ 50506 ];

	UBioUIWorld_execUpdateHeadGearVisibility_Parms UpdateHeadGearVisibility_Parms;
	UpdateHeadGearVisibility_Parms.pOriginalPawn = pOriginalPawn;

	pFnUpdateHeadGearVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateHeadGearVisibility, &UpdateHeadGearVisibility_Parms, NULL );

	pFnUpdateHeadGearVisibility->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.UpdateAppearance
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                a_pOriginalPawn                ( CPF_Parm )
// class UAnimSet*                a_AnimSet                      ( CPF_OptionalParm | CPF_Parm )
// int                            a_Flags                        ( CPF_OptionalParm | CPF_Parm )

void UBioUIWorld::UpdateAppearance ( class ABioPawn* a_pOriginalPawn, class UAnimSet* a_AnimSet, int a_Flags )
{
	static UFunction* pFnUpdateAppearance = NULL;

	if ( ! pFnUpdateAppearance )
		pFnUpdateAppearance = (UFunction*) UObject::GObjObjects()->Data[ 50502 ];

	UBioUIWorld_execUpdateAppearance_Parms UpdateAppearance_Parms;
	UpdateAppearance_Parms.a_pOriginalPawn = a_pOriginalPawn;
	UpdateAppearance_Parms.a_AnimSet = a_AnimSet;
	UpdateAppearance_Parms.a_Flags = a_Flags;

	pFnUpdateAppearance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAppearance, &UpdateAppearance_Parms, NULL );

	pFnUpdateAppearance->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.DestroyPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                a_pOriginalPawn                ( CPF_Parm )

void UBioUIWorld::DestroyPawn ( class ABioPawn* a_pOriginalPawn )
{
	static UFunction* pFnDestroyPawn = NULL;

	if ( ! pFnDestroyPawn )
		pFnDestroyPawn = (UFunction*) UObject::GObjObjects()->Data[ 50500 ];

	UBioUIWorld_execDestroyPawn_Parms DestroyPawn_Parms;
	DestroyPawn_Parms.a_pOriginalPawn = a_pOriginalPawn;

	pFnDestroyPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroyPawn, &DestroyPawn_Parms, NULL );

	pFnDestroyPawn->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.SpawnPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                a_pOriginalPawn                ( CPF_Parm )
// struct FName                   a_fnSpawnLocation              ( CPF_Parm )
// struct FName                   a_fnSpawnVariable              ( CPF_Parm )
// class UAnimSet*                InAnimSet                      ( CPF_OptionalParm | CPF_Parm )
// struct FName                   a_fnRemoteEvent                ( CPF_OptionalParm | CPF_Parm )
// int                            a_Flags                        ( CPF_OptionalParm | CPF_Parm )

void UBioUIWorld::SpawnPawn ( class ABioPawn* a_pOriginalPawn, struct FName a_fnSpawnLocation, struct FName a_fnSpawnVariable, class UAnimSet* InAnimSet, struct FName a_fnRemoteEvent, int a_Flags )
{
	static UFunction* pFnSpawnPawn = NULL;

	if ( ! pFnSpawnPawn )
		pFnSpawnPawn = (UFunction*) UObject::GObjObjects()->Data[ 50493 ];

	UBioUIWorld_execSpawnPawn_Parms SpawnPawn_Parms;
	SpawnPawn_Parms.a_pOriginalPawn = a_pOriginalPawn;
	memcpy ( &SpawnPawn_Parms.a_fnSpawnLocation, &a_fnSpawnLocation, 0x8 );
	memcpy ( &SpawnPawn_Parms.a_fnSpawnVariable, &a_fnSpawnVariable, 0x8 );
	SpawnPawn_Parms.InAnimSet = InAnimSet;
	memcpy ( &SpawnPawn_Parms.a_fnRemoteEvent, &a_fnRemoteEvent, 0x8 );
	SpawnPawn_Parms.a_Flags = a_Flags;

	pFnSpawnPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnPawn, &SpawnPawn_Parms, NULL );

	pFnSpawnPawn->FunctionFlags |= 0x400;
};

// Function SFXGame.BioUIWorld.TriggerEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   a_fnEventName                  ( CPF_Parm )
// class AActor*                  a_pCaller                      ( CPF_Parm )

void UBioUIWorld::TriggerEvent ( struct FName a_fnEventName, class AActor* a_pCaller )
{
	static UFunction* pFnTriggerEvent = NULL;

	if ( ! pFnTriggerEvent )
		pFnTriggerEvent = (UFunction*) UObject::GObjObjects()->Data[ 50490 ];

	UBioUIWorld_execTriggerEvent_Parms TriggerEvent_Parms;
	memcpy ( &TriggerEvent_Parms.a_fnEventName, &a_fnEventName, 0x8 );
	TriggerEvent_Parms.a_pCaller = a_pCaller;

	pFnTriggerEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTriggerEvent, &TriggerEvent_Parms, NULL );

	pFnTriggerEvent->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXConsole.RetrieveClipboard
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXConsole::RetrieveClipboard ( )
{
	static UFunction* pFnRetrieveClipboard = NULL;

	if ( ! pFnRetrieveClipboard )
		pFnRetrieveClipboard = (UFunction*) UObject::GObjObjects()->Data[ 53954 ];

	USFXConsole_execRetrieveClipboard_Parms RetrieveClipboard_Parms;

	pFnRetrieveClipboard->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetrieveClipboard, &RetrieveClipboard_Parms, NULL );

	pFnRetrieveClipboard->FunctionFlags |= 0x400;

	return RetrieveClipboard_Parms.ReturnValue;
};

// Function SFXGame.SFXConsole.FindBreak
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 CurrentString                  ( CPF_Parm | CPF_NeedCtorLink )
// int                            CurrentStringPos               ( CPF_Parm )
// unsigned long                  bForward                       ( CPF_Parm )

int USFXConsole::FindBreak ( struct FString CurrentString, int CurrentStringPos, unsigned long bForward )
{
	static UFunction* pFnFindBreak = NULL;

	if ( ! pFnFindBreak )
		pFnFindBreak = (UFunction*) UObject::GObjObjects()->Data[ 53965 ];

	USFXConsole_execFindBreak_Parms FindBreak_Parms;
	memcpy ( &FindBreak_Parms.CurrentString, &CurrentString, 0xC );
	FindBreak_Parms.CurrentStringPos = CurrentStringPos;
	FindBreak_Parms.bForward = bForward;

	this->ProcessEvent ( pFnFindBreak, &FindBreak_Parms, NULL );

	return FindBreak_Parms.ReturnValue;
};

// Function SFXGame.SFXConsole.FindNextMatchingHistory
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 CurrentString                  ( CPF_Parm | CPF_NeedCtorLink )
// int                            CurrentStringPos               ( CPF_Parm )
// int                            outNextHistory                 ( CPF_Parm | CPF_OutParm )

bool USFXConsole::FindNextMatchingHistory ( struct FString CurrentString, int CurrentStringPos, int* outNextHistory )
{
	static UFunction* pFnFindNextMatchingHistory = NULL;

	if ( ! pFnFindNextMatchingHistory )
		pFnFindNextMatchingHistory = (UFunction*) UObject::GObjObjects()->Data[ 53955 ];

	USFXConsole_execFindNextMatchingHistory_Parms FindNextMatchingHistory_Parms;
	memcpy ( &FindNextMatchingHistory_Parms.CurrentString, &CurrentString, 0xC );
	FindNextMatchingHistory_Parms.CurrentStringPos = CurrentStringPos;

	this->ProcessEvent ( pFnFindNextMatchingHistory, &FindNextMatchingHistory_Parms, NULL );

	if ( outNextHistory )
		*outNextHistory = FindNextMatchingHistory_Parms.outNextHistory;

	return FindNextMatchingHistory_Parms.ReturnValue;
};

// Function SFXGame.SFXConsole.CommonInputKey
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          AmountDepressed                ( CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_Parm )

bool USFXConsole::CommonInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnCommonInputKey = NULL;

	if ( ! pFnCommonInputKey )
		pFnCommonInputKey = (UFunction*) UObject::GObjObjects()->Data[ 53944 ];

	USFXConsole_execCommonInputKey_Parms CommonInputKey_Parms;
	CommonInputKey_Parms.ControllerId = ControllerId;
	memcpy ( &CommonInputKey_Parms.Key, &Key, 0x8 );
	CommonInputKey_Parms.Event = Event;
	CommonInputKey_Parms.AmountDepressed = AmountDepressed;
	CommonInputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnCommonInputKey, &CommonInputKey_Parms, NULL );

	return CommonInputKey_Parms.ReturnValue;
};

// Function SFXGame.SFXConsole.FindNextMatchingAutoComplete
// [0x00420002] 
// Parameters infos:
// int                            CurrentStringPos               ( CPF_Parm )
// struct FString                 CurrentString                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXConsole::FindNextMatchingAutoComplete ( int CurrentStringPos, struct FString* CurrentString )
{
	static UFunction* pFnFindNextMatchingAutoComplete = NULL;

	if ( ! pFnFindNextMatchingAutoComplete )
		pFnFindNextMatchingAutoComplete = (UFunction*) UObject::GObjObjects()->Data[ 53930 ];

	USFXConsole_execFindNextMatchingAutoComplete_Parms FindNextMatchingAutoComplete_Parms;
	FindNextMatchingAutoComplete_Parms.CurrentStringPos = CurrentStringPos;

	this->ProcessEvent ( pFnFindNextMatchingAutoComplete, &FindNextMatchingAutoComplete_Parms, NULL );

	if ( CurrentString )
		memcpy ( CurrentString, &FindNextMatchingAutoComplete_Parms.CurrentString, 0xC );
};

// Function SFXGame.SFXConsole.FindObjectUnqualified
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ObjectName                     ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  ObjectClass                    ( CPF_Parm )

class UObject* USFXConsole::FindObjectUnqualified ( struct FString ObjectName, class UClass* ObjectClass )
{
	static UFunction* pFnFindObjectUnqualified = NULL;

	if ( ! pFnFindObjectUnqualified )
		pFnFindObjectUnqualified = (UFunction*) UObject::GObjObjects()->Data[ 53926 ];

	USFXConsole_execFindObjectUnqualified_Parms FindObjectUnqualified_Parms;
	memcpy ( &FindObjectUnqualified_Parms.ObjectName, &ObjectName, 0xC );
	FindObjectUnqualified_Parms.ObjectClass = ObjectClass;

	pFnFindObjectUnqualified->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindObjectUnqualified, &FindObjectUnqualified_Parms, NULL );

	pFnFindObjectUnqualified->FunctionFlags |= 0x400;

	return FindObjectUnqualified_Parms.ReturnValue;
};

// Function SFXGame.SFXConsole.FindNextPropertyMatching
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class UClass*                  C                              ( CPF_Parm )
// struct FString                 PropertyPrefix                 ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 AfterThisProperty              ( CPF_Parm | CPF_NeedCtorLink )

struct FString USFXConsole::FindNextPropertyMatching ( class UClass* C, struct FString PropertyPrefix, struct FString AfterThisProperty )
{
	static UFunction* pFnFindNextPropertyMatching = NULL;

	if ( ! pFnFindNextPropertyMatching )
		pFnFindNextPropertyMatching = (UFunction*) UObject::GObjObjects()->Data[ 53921 ];

	USFXConsole_execFindNextPropertyMatching_Parms FindNextPropertyMatching_Parms;
	FindNextPropertyMatching_Parms.C = C;
	memcpy ( &FindNextPropertyMatching_Parms.PropertyPrefix, &PropertyPrefix, 0xC );
	memcpy ( &FindNextPropertyMatching_Parms.AfterThisProperty, &AfterThisProperty, 0xC );

	pFnFindNextPropertyMatching->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindNextPropertyMatching, &FindNextPropertyMatching_Parms, NULL );

	pFnFindNextPropertyMatching->FunctionFlags |= 0x400;

	return FindNextPropertyMatching_Parms.ReturnValue;
};

// Function SFXGame.SFXConsole.InputChar
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FString                 Unicode                        ( CPF_Parm | CPF_NeedCtorLink )

bool USFXConsole::InputChar ( int ControllerId, struct FString Unicode )
{
	static UFunction* pFnInputChar = NULL;

	if ( ! pFnInputChar )
		pFnInputChar = (UFunction*) UObject::GObjObjects()->Data[ 53917 ];

	USFXConsole_execInputChar_Parms InputChar_Parms;
	InputChar_Parms.ControllerId = ControllerId;
	memcpy ( &InputChar_Parms.Unicode, &Unicode, 0xC );

	this->ProcessEvent ( pFnInputChar, &InputChar_Parms, NULL );

	return InputChar_Parms.ReturnValue;
};

// Function SFXGame.SFXConsole.SaveHistory
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXConsole::SaveHistory ( )
{
	static UFunction* pFnSaveHistory = NULL;

	if ( ! pFnSaveHistory )
		pFnSaveHistory = (UFunction*) UObject::GObjObjects()->Data[ 53904 ];

	USFXConsole_execSaveHistory_Parms SaveHistory_Parms;

	pFnSaveHistory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveHistory, &SaveHistory_Parms, NULL );

	pFnSaveHistory->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXConsole.LoadHistory
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void USFXConsole::LoadHistory ( )
{
	static UFunction* pFnLoadHistory = NULL;

	if ( ! pFnLoadHistory )
		pFnLoadHistory = (UFunction*) UObject::GObjObjects()->Data[ 53880 ];

	USFXConsole_execLoadHistory_Parms LoadHistory_Parms;

	pFnLoadHistory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadHistory, &LoadHistory_Parms, NULL );

	pFnLoadHistory->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXConsole.InputKey
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  Event                          ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool USFXConsole::InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnInputKey = NULL;

	if ( ! pFnInputKey )
		pFnInputKey = (UFunction*) UObject::GObjObjects()->Data[ 53910 ];

	USFXConsole_execInputKey_Parms InputKey_Parms;
	InputKey_Parms.ControllerId = ControllerId;
	memcpy ( &InputKey_Parms.Key, &Key, 0x8 );
	InputKey_Parms.Event = Event;
	InputKey_Parms.AmountDepressed = AmountDepressed;
	InputKey_Parms.bGamepad = bGamepad;

	this->ProcessEvent ( pFnInputKey, &InputKey_Parms, NULL );

	return InputKey_Parms.ReturnValue;
};

// Function SFXGame.SFXConsole.PostRender_Console
// [0x00020000] 
// Parameters infos:
// class UCanvas*                 Canvas                         ( CPF_Parm )

void USFXConsole::PostRender_Console ( class UCanvas* Canvas )
{
	static UFunction* pFnPostRender_Console = NULL;

	if ( ! pFnPostRender_Console )
		pFnPostRender_Console = (UFunction*) UObject::GObjObjects()->Data[ 53908 ];

	USFXConsole_execPostRender_Console_Parms PostRender_Console_Parms;
	PostRender_Console_Parms.Canvas = Canvas;

	this->ProcessEvent ( pFnPostRender_Console, &PostRender_Console_Parms, NULL );
};

// Function SFXGame.SFXConsole.StartTyping
// [0x00020002] 
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void USFXConsole::StartTyping ( struct FString Text )
{
	static UFunction* pFnStartTyping = NULL;

	if ( ! pFnStartTyping )
		pFnStartTyping = (UFunction*) UObject::GObjObjects()->Data[ 53906 ];

	USFXConsole_execStartTyping_Parms StartTyping_Parms;
	memcpy ( &StartTyping_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnStartTyping, &StartTyping_Parms, NULL );
};

// Function SFXGame.SFXConsole.ClearOutput
// [0x00020002] 
// Parameters infos:

void USFXConsole::ClearOutput ( )
{
	static UFunction* pFnClearOutput = NULL;

	if ( ! pFnClearOutput )
		pFnClearOutput = (UFunction*) UObject::GObjObjects()->Data[ 53905 ];

	USFXConsole_execClearOutput_Parms ClearOutput_Parms;

	this->ProcessEvent ( pFnClearOutput, &ClearOutput_Parms, NULL );
};

// Function SFXGame.SFXConsole.ConsoleCommand
// [0x00020002] 
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXConsole::ConsoleCommand ( struct FString Command )
{
	static UFunction* pFnConsoleCommand = NULL;

	if ( ! pFnConsoleCommand )
		pFnConsoleCommand = (UFunction*) UObject::GObjObjects()->Data[ 53902 ];

	USFXConsole_execConsoleCommand_Parms ConsoleCommand_Parms;
	memcpy ( &ConsoleCommand_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnConsoleCommand, &ConsoleCommand_Parms, NULL );
};

// Function SFXGame.SFXConsole.PreParseCommand
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

struct FString USFXConsole::PreParseCommand ( struct FString Command )
{
	static UFunction* pFnPreParseCommand = NULL;

	if ( ! pFnPreParseCommand )
		pFnPreParseCommand = (UFunction*) UObject::GObjObjects()->Data[ 53894 ];

	USFXConsole_execPreParseCommand_Parms PreParseCommand_Parms;
	memcpy ( &PreParseCommand_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnPreParseCommand, &PreParseCommand_Parms, NULL );

	return PreParseCommand_Parms.ReturnValue;
};

// Function SFXGame.SFXConsole.GetCameraActor
// [0x00820002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* USFXConsole::GetCameraActor ( )
{
	static UFunction* pFnGetCameraActor = NULL;

	if ( ! pFnGetCameraActor )
		pFnGetCameraActor = (UFunction*) UObject::GObjObjects()->Data[ 53889 ];

	USFXConsole_execGetCameraActor_Parms GetCameraActor_Parms;

	this->ProcessEvent ( pFnGetCameraActor, &GetCameraActor_Parms, NULL );

	return GetCameraActor_Parms.ReturnValue;
};

// Function SFXGame.SFXConsole.PurgeCommandFromHistory
// [0x00020002] 
// Parameters infos:
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXConsole::PurgeCommandFromHistory ( struct FString Command )
{
	static UFunction* pFnPurgeCommandFromHistory = NULL;

	if ( ! pFnPurgeCommandFromHistory )
		pFnPurgeCommandFromHistory = (UFunction*) UObject::GObjObjects()->Data[ 53881 ];

	USFXConsole_execPurgeCommandFromHistory_Parms PurgeCommandFromHistory_Parms;
	memcpy ( &PurgeCommandFromHistory_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnPurgeCommandFromHistory, &PurgeCommandFromHistory_Parms, NULL );
};

// Function SFXGame.SFXConsole.Initialized
// [0x00020002] 
// Parameters infos:

void USFXConsole::Initialized ( )
{
	static UFunction* pFnInitialized = NULL;

	if ( ! pFnInitialized )
		pFnInitialized = (UFunction*) UObject::GObjObjects()->Data[ 53879 ];

	USFXConsole_execInitialized_Parms Initialized_Parms;

	this->ProcessEvent ( pFnInitialized, &Initialized_Parms, NULL );
};

// Function SFXGame.BioTrigger.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ABioTrigger::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 50393 ];

	ABioTrigger_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function SFXGame.BioTrigger.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ABioTrigger::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 50388 ];

	ABioTrigger_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function SFXGame.BioEventNotifier.RemoveTalentNotify
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ABioPawn*                oCharacter                     ( CPF_Parm )

void UBioEventNotifier::RemoveTalentNotify ( class ABioPawn* oCharacter )
{
	static UFunction* pFnRemoveTalentNotify = NULL;

	if ( ! pFnRemoveTalentNotify )
		pFnRemoveTalentNotify = (UFunction*) UObject::GObjObjects()->Data[ 35736 ];

	UBioEventNotifier_execRemoveTalentNotify_Parms RemoveTalentNotify_Parms;
	RemoveTalentNotify_Parms.oCharacter = oCharacter;

	pFnRemoveTalentNotify->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveTalentNotify, &RemoveTalentNotify_Parms, NULL );

	pFnRemoveTalentNotify->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEventNotifier.AddTalentNotifyStringRef
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nTalentIcon                    ( CPF_Parm )
// class ABioPawn*                pPawn                          ( CPF_Parm )

void UBioEventNotifier::AddTalentNotifyStringRef ( int nTalentIcon, class ABioPawn* pPawn )
{
	static UFunction* pFnAddTalentNotifyStringRef = NULL;

	if ( ! pFnAddTalentNotifyStringRef )
		pFnAddTalentNotifyStringRef = (UFunction*) UObject::GObjObjects()->Data[ 35732 ];

	UBioEventNotifier_execAddTalentNotifyStringRef_Parms AddTalentNotifyStringRef_Parms;
	AddTalentNotifyStringRef_Parms.nTalentIcon = nTalentIcon;
	AddTalentNotifyStringRef_Parms.pPawn = pPawn;

	pFnAddTalentNotifyStringRef->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTalentNotifyStringRef, &AddTalentNotifyStringRef_Parms, NULL );

	pFnAddTalentNotifyStringRef->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEventNotifier.AddTalentNotifyString
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nTalentIcon                    ( CPF_Parm )
// struct FString                 sTalentName                    ( CPF_Parm | CPF_NeedCtorLink )
// class ABioPawn*                pPawn                          ( CPF_Parm )

void UBioEventNotifier::AddTalentNotifyString ( int nTalentIcon, struct FString sTalentName, class ABioPawn* pPawn )
{
	static UFunction* pFnAddTalentNotifyString = NULL;

	if ( ! pFnAddTalentNotifyString )
		pFnAddTalentNotifyString = (UFunction*) UObject::GObjObjects()->Data[ 35728 ];

	UBioEventNotifier_execAddTalentNotifyString_Parms AddTalentNotifyString_Parms;
	AddTalentNotifyString_Parms.nTalentIcon = nTalentIcon;
	memcpy ( &AddTalentNotifyString_Parms.sTalentName, &sTalentName, 0xC );
	AddTalentNotifyString_Parms.pPawn = pPawn;

	pFnAddTalentNotifyString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTalentNotifyString, &AddTalentNotifyString_Parms, NULL );

	pFnAddTalentNotifyString->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEventNotifier.OnTalentNoticeInput
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioEventNotifier::OnTalentNoticeInput ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnOnTalentNoticeInput = NULL;

	if ( ! pFnOnTalentNoticeInput )
		pFnOnTalentNoticeInput = (UFunction*) UObject::GObjObjects()->Data[ 35725 ];

	UBioEventNotifier_execOnTalentNoticeInput_Parms OnTalentNoticeInput_Parms;
	OnTalentNoticeInput_Parms.bAPressed = bAPressed;
	OnTalentNoticeInput_Parms.nContext = nContext;

	pFnOnTalentNoticeInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnTalentNoticeInput, &OnTalentNoticeInput_Parms, NULL );

	pFnOnTalentNoticeInput->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEventNotifier.PendingTalentNotify
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oCharacter                     ( CPF_Parm )

bool UBioEventNotifier::PendingTalentNotify ( class ABioPawn* oCharacter )
{
	static UFunction* pFnPendingTalentNotify = NULL;

	if ( ! pFnPendingTalentNotify )
		pFnPendingTalentNotify = (UFunction*) UObject::GObjObjects()->Data[ 35722 ];

	UBioEventNotifier_execPendingTalentNotify_Parms PendingTalentNotify_Parms;
	PendingTalentNotify_Parms.oCharacter = oCharacter;

	pFnPendingTalentNotify->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPendingTalentNotify, &PendingTalentNotify_Parms, NULL );

	pFnPendingTalentNotify->FunctionFlags |= 0x400;

	return PendingTalentNotify_Parms.ReturnValue;
};

// Function SFXGame.BioEventNotifier.ShowTalentNotify
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ABioPawn*                oCharacter                     ( CPF_Parm )

void UBioEventNotifier::ShowTalentNotify ( class ABioPawn* oCharacter )
{
	static UFunction* pFnShowTalentNotify = NULL;

	if ( ! pFnShowTalentNotify )
		pFnShowTalentNotify = (UFunction*) UObject::GObjObjects()->Data[ 35720 ];

	UBioEventNotifier_execShowTalentNotify_Parms ShowTalentNotify_Parms;
	ShowTalentNotify_Parms.oCharacter = oCharacter;

	pFnShowTalentNotify->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowTalentNotify, &ShowTalentNotify_Parms, NULL );

	pFnShowTalentNotify->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEventNotifier.AddNotice
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nType                          ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )
// int                            nTimeToLive                    ( CPF_Parm )
// int                            nIconIndex                     ( CPF_Parm )
// struct FString                 strTitle                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            nQuantity                      ( CPF_OptionalParm | CPF_Parm )
// int                            nQuantMin                      ( CPF_OptionalParm | CPF_Parm )
// int                            nQuantMax                      ( CPF_OptionalParm | CPF_Parm )

void UBioEventNotifier::AddNotice ( int nType, int nContext, int nTimeToLive, int nIconIndex, struct FString strTitle, int nQuantity, int nQuantMin, int nQuantMax )
{
	static UFunction* pFnAddNotice = NULL;

	if ( ! pFnAddNotice )
		pFnAddNotice = (UFunction*) UObject::GObjObjects()->Data[ 35710 ];

	UBioEventNotifier_execAddNotice_Parms AddNotice_Parms;
	AddNotice_Parms.nType = nType;
	AddNotice_Parms.nContext = nContext;
	AddNotice_Parms.nTimeToLive = nTimeToLive;
	AddNotice_Parms.nIconIndex = nIconIndex;
	memcpy ( &AddNotice_Parms.strTitle, &strTitle, 0xC );
	AddNotice_Parms.nQuantity = nQuantity;
	AddNotice_Parms.nQuantMin = nQuantMin;
	AddNotice_Parms.nQuantMax = nQuantMax;

	pFnAddNotice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNotice, &AddNotice_Parms, NULL );

	pFnAddNotice->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEventNotifier.NotarizeNotices
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioEventNotifier::NotarizeNotices ( )
{
	static UFunction* pFnNotarizeNotices = NULL;

	if ( ! pFnNotarizeNotices )
		pFnNotarizeNotices = (UFunction*) UObject::GObjObjects()->Data[ 35709 ];

	UBioEventNotifier_execNotarizeNotices_Parms NotarizeNotices_Parms;

	pFnNotarizeNotices->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotarizeNotices, &NotarizeNotices_Parms, NULL );

	pFnNotarizeNotices->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEventNotifier.HasListChanged
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioEventNotifier::HasListChanged ( )
{
	static UFunction* pFnHasListChanged = NULL;

	if ( ! pFnHasListChanged )
		pFnHasListChanged = (UFunction*) UObject::GObjObjects()->Data[ 35708 ];

	UBioEventNotifier_execHasListChanged_Parms HasListChanged_Parms;

	pFnHasListChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasListChanged, &HasListChanged_Parms, NULL );

	pFnHasListChanged->FunctionFlags |= 0x400;
};

// Function SFXGame.BioEventNotifier.RetrieveNotices
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FBioDisplayNotice > lstNotices                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioEventNotifier::RetrieveNotices ( TArray< struct FBioDisplayNotice >* lstNotices )
{
	static UFunction* pFnRetrieveNotices = NULL;

	if ( ! pFnRetrieveNotices )
		pFnRetrieveNotices = (UFunction*) UObject::GObjObjects()->Data[ 35705 ];

	UBioEventNotifier_execRetrieveNotices_Parms RetrieveNotices_Parms;

	pFnRetrieveNotices->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetrieveNotices, &RetrieveNotices_Parms, NULL );

	pFnRetrieveNotices->FunctionFlags |= 0x400;

	if ( lstNotices )
		memcpy ( lstNotices, &RetrieveNotices_Parms.lstNotices, 0xC );
};

// Function SFXGame.SFXModule_Locomotion.SetAcceleration
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Acceleration                   ( CPF_Parm )

void USFXModule_Locomotion::SetAcceleration ( struct FVector Acceleration )
{
	static UFunction* pFnSetAcceleration = NULL;

	if ( ! pFnSetAcceleration )
		pFnSetAcceleration = (UFunction*) UObject::GObjObjects()->Data[ 41569 ];

	USFXModule_Locomotion_execSetAcceleration_Parms SetAcceleration_Parms;
	memcpy ( &SetAcceleration_Parms.Acceleration, &Acceleration, 0xC );

	pFnSetAcceleration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAcceleration, &SetAcceleration_Parms, NULL );

	pFnSetAcceleration->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXModule_Locomotion.SetDesiredRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                DesiredRotation                ( CPF_Parm )

void USFXModule_Locomotion::SetDesiredRotation ( struct FRotator DesiredRotation )
{
	static UFunction* pFnSetDesiredRotation = NULL;

	if ( ! pFnSetDesiredRotation )
		pFnSetDesiredRotation = (UFunction*) UObject::GObjObjects()->Data[ 41568 ];

	USFXModule_Locomotion_execSetDesiredRotation_Parms SetDesiredRotation_Parms;
	memcpy ( &SetDesiredRotation_Parms.DesiredRotation, &DesiredRotation, 0xC );

	pFnSetDesiredRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDesiredRotation, &SetDesiredRotation_Parms, NULL );

	pFnSetDesiredRotation->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXProjectile_Trajectory.Explode
// [0x00020100] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_Trajectory::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 59594 ];

	ASFXProjectile_Trajectory_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Trajectory.HitWall
// [0x00020920] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ASFXProjectile_Trajectory::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 59590 ];

	ASFXProjectile_Trajectory_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Trajectory.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXProjectile_Trajectory::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 59589 ];

	ASFXProjectile_Trajectory_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Trajectory.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile_Trajectory::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 59587 ];

	ASFXProjectile_Trajectory_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Trajectory.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Trajectory::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 59585 ];

	ASFXProjectile_Trajectory_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Trajectory.RunPhysicsSimulationTilEnd
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          GrenadeLifeSpan                ( CPF_Parm )

void ASFXProjectile_Trajectory::RunPhysicsSimulationTilEnd ( float GrenadeLifeSpan )
{
	static UFunction* pFnRunPhysicsSimulationTilEnd = NULL;

	if ( ! pFnRunPhysicsSimulationTilEnd )
		pFnRunPhysicsSimulationTilEnd = (UFunction*) UObject::GObjObjects()->Data[ 59583 ];

	ASFXProjectile_Trajectory_execRunPhysicsSimulationTilEnd_Parms RunPhysicsSimulationTilEnd_Parms;
	RunPhysicsSimulationTilEnd_Parms.GrenadeLifeSpan = GrenadeLifeSpan;

	pFnRunPhysicsSimulationTilEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRunPhysicsSimulationTilEnd, &RunPhysicsSimulationTilEnd_Parms, NULL );

	pFnRunPhysicsSimulationTilEnd->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXWeapon_NativeBase.CalculateCoverLeanOutOffset
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Direction                      ( CPF_Parm )
// unsigned char                  Type                           ( CPF_Parm )
// struct FVector                 Offset                         ( CPF_Parm | CPF_OutParm )

bool ASFXWeapon_NativeBase::eventCalculateCoverLeanOutOffset ( unsigned char Direction, unsigned char Type, struct FVector* Offset )
{
	static UFunction* pFnCalculateCoverLeanOutOffset = NULL;

	if ( ! pFnCalculateCoverLeanOutOffset )
		pFnCalculateCoverLeanOutOffset = (UFunction*) UObject::GObjObjects()->Data[ 56636 ];

	ASFXWeapon_NativeBase_eventCalculateCoverLeanOutOffset_Parms CalculateCoverLeanOutOffset_Parms;
	CalculateCoverLeanOutOffset_Parms.Direction = Direction;
	CalculateCoverLeanOutOffset_Parms.Type = Type;

	this->ProcessEvent ( pFnCalculateCoverLeanOutOffset, &CalculateCoverLeanOutOffset_Parms, NULL );

	if ( Offset )
		memcpy ( Offset, &CalculateCoverLeanOutOffset_Parms.Offset, 0xC );

	return CalculateCoverLeanOutOffset_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_NativeBase.PrecacheVFX
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void ASFXWeapon_NativeBase::eventPrecacheVFX ( )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 56635 ];

	ASFXWeapon_NativeBase_eventPrecacheVFX_Parms PrecacheVFX_Parms;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXWeapon_NativeBase.FireAmmunition
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void ASFXWeapon_NativeBase::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = (UFunction*) UObject::GObjObjects()->Data[ 56634 ];

	ASFXWeapon_NativeBase_execFireAmmunition_Parms FireAmmunition_Parms;

	pFnFireAmmunition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );

	pFnFireAmmunition->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXWeapon_NativeBase.IsZoomed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon_NativeBase::IsZoomed ( )
{
	static UFunction* pFnIsZoomed = NULL;

	if ( ! pFnIsZoomed )
		pFnIsZoomed = (UFunction*) UObject::GObjObjects()->Data[ 42603 ];

	ASFXWeapon_NativeBase_execIsZoomed_Parms IsZoomed_Parms;

	pFnIsZoomed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsZoomed, &IsZoomed_Parms, NULL );

	pFnIsZoomed->FunctionFlags |= 0x400;

	return IsZoomed_Parms.ReturnValue;
};

// Function SFXGame.BioTalent.AddGameProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioGameProperty*        GameProperty                   ( CPF_Parm )

void UBioTalent::AddGameProperty ( class UBioGameProperty* GameProperty )
{
	static UFunction* pFnAddGameProperty = NULL;

	if ( ! pFnAddGameProperty )
		pFnAddGameProperty = (UFunction*) UObject::GObjObjects()->Data[ 50196 ];

	UBioTalent_execAddGameProperty_Parms AddGameProperty_Parms;
	AddGameProperty_Parms.GameProperty = GameProperty;

	pFnAddGameProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddGameProperty, &AddGameProperty_Parms, NULL );

	pFnAddGameProperty->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTalent.ScaleToRank
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Rank                           ( CPF_Parm )

void UBioTalent::ScaleToRank ( int Rank )
{
	static UFunction* pFnScaleToRank = NULL;

	if ( ! pFnScaleToRank )
		pFnScaleToRank = (UFunction*) UObject::GObjObjects()->Data[ 50194 ];

	UBioTalent_execScaleToRank_Parms ScaleToRank_Parms;
	ScaleToRank_Parms.Rank = Rank;

	pFnScaleToRank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScaleToRank, &ScaleToRank_Parms, NULL );

	pFnScaleToRank->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTalent.Unapply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 Target                         ( CPF_Parm )

void UBioTalent::Unapply ( class UObject* Target )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 50192 ];

	UBioTalent_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.Target = Target;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTalent.Apply
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 Target                         ( CPF_Parm )

void UBioTalent::Apply ( class UObject* Target )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 50190 ];

	UBioTalent_execApply_Parms Apply_Parms;
	Apply_Parms.Target = Target;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTalent.GetRank
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioTalent::GetRank ( )
{
	static UFunction* pFnGetRank = NULL;

	if ( ! pFnGetRank )
		pFnGetRank = (UFunction*) UObject::GObjObjects()->Data[ 50188 ];

	UBioTalent_execGetRank_Parms GetRank_Parms;

	pFnGetRank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRank, &GetRank_Parms, NULL );

	pFnGetRank->FunctionFlags |= 0x400;

	return GetRank_Parms.ReturnValue;
};

// Function SFXGame.BioTalent.GetID
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioTalent::GetID ( )
{
	static UFunction* pFnGetID = NULL;

	if ( ! pFnGetID )
		pFnGetID = (UFunction*) UObject::GObjObjects()->Data[ 50186 ];

	UBioTalent_execGetID_Parms GetID_Parms;

	pFnGetID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetID, &GetID_Parms, NULL );

	pFnGetID->FunctionFlags |= 0x400;

	return GetID_Parms.ReturnValue;
};

// Function SFXGame.BioTalent.Initialize
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Id                             ( CPF_Parm )
// int                            StartingRank                   ( CPF_Parm )

void UBioTalent::Initialize ( int Id, int StartingRank )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 50183 ];

	UBioTalent_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.Id = Id;
	Initialize_Parms.StartingRank = StartingRank;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTalentContainer.ReloadTalentContainer
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioPawnBehavior*        targetBehavior                 ( CPF_Parm )
// TArray< struct FBioSimpleTalentSave > simpleTalents                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FBioComplexTalentSave > complexTalents                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioTalentContainer::ReloadTalentContainer ( class UBioPawnBehavior* targetBehavior, TArray< struct FBioSimpleTalentSave >* simpleTalents, TArray< struct FBioComplexTalentSave >* complexTalents )
{
	static UFunction* pFnReloadTalentContainer = NULL;

	if ( ! pFnReloadTalentContainer )
		pFnReloadTalentContainer = (UFunction*) UObject::GObjObjects()->Data[ 39470 ];

	UBioTalentContainer_execReloadTalentContainer_Parms ReloadTalentContainer_Parms;
	ReloadTalentContainer_Parms.targetBehavior = targetBehavior;

	pFnReloadTalentContainer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReloadTalentContainer, &ReloadTalentContainer_Parms, NULL );

	pFnReloadTalentContainer->FunctionFlags |= 0x400;

	if ( simpleTalents )
		memcpy ( simpleTalents, &ReloadTalentContainer_Parms.simpleTalents, 0xC );

	if ( complexTalents )
		memcpy ( complexTalents, &ReloadTalentContainer_Parms.complexTalents, 0xC );
};

// Function SFXGame.BioTalentContainer.GetTalentSaveData
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< struct FBioSimpleTalentSave > simpleTalents                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FBioComplexTalentSave > complexTalents                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioTalentContainer::GetTalentSaveData ( TArray< struct FBioSimpleTalentSave >* simpleTalents, TArray< struct FBioComplexTalentSave >* complexTalents )
{
	static UFunction* pFnGetTalentSaveData = NULL;

	if ( ! pFnGetTalentSaveData )
		pFnGetTalentSaveData = (UFunction*) UObject::GObjObjects()->Data[ 39450 ];

	UBioTalentContainer_execGetTalentSaveData_Parms GetTalentSaveData_Parms;

	pFnGetTalentSaveData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTalentSaveData, &GetTalentSaveData_Parms, NULL );

	pFnGetTalentSaveData->FunctionFlags |= 0x400;

	if ( simpleTalents )
		memcpy ( simpleTalents, &GetTalentSaveData_Parms.simpleTalents, 0xC );

	if ( complexTalents )
		memcpy ( complexTalents, &GetTalentSaveData_Parms.complexTalents, 0xC );
};

// Function SFXGame.BioTalentContainer.GetTalentRank
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TalentID                       ( CPF_Parm )
// int                            talentRank                     ( CPF_Parm | CPF_OutParm )

bool UBioTalentContainer::GetTalentRank ( int TalentID, int* talentRank )
{
	static UFunction* pFnGetTalentRank = NULL;

	if ( ! pFnGetTalentRank )
		pFnGetTalentRank = (UFunction*) UObject::GObjObjects()->Data[ 39446 ];

	UBioTalentContainer_execGetTalentRank_Parms GetTalentRank_Parms;
	GetTalentRank_Parms.TalentID = TalentID;

	pFnGetTalentRank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTalentRank, &GetTalentRank_Parms, NULL );

	pFnGetTalentRank->FunctionFlags |= 0x400;

	if ( talentRank )
		*talentRank = GetTalentRank_Parms.talentRank;

	return GetTalentRank_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.GetTalentDebugData
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FBioTalentDebugData > dataArray                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            simpleTalentStartIndex         ( CPF_Parm | CPF_OutParm )

bool UBioTalentContainer::GetTalentDebugData ( TArray< struct FBioTalentDebugData >* dataArray, int* simpleTalentStartIndex )
{
	static UFunction* pFnGetTalentDebugData = NULL;

	if ( ! pFnGetTalentDebugData )
		pFnGetTalentDebugData = (UFunction*) UObject::GObjObjects()->Data[ 39441 ];

	UBioTalentContainer_execGetTalentDebugData_Parms GetTalentDebugData_Parms;

	pFnGetTalentDebugData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTalentDebugData, &GetTalentDebugData_Parms, NULL );

	pFnGetTalentDebugData->FunctionFlags |= 0x400;

	if ( dataArray )
		memcpy ( dataArray, &GetTalentDebugData_Parms.dataArray, 0xC );

	if ( simpleTalentStartIndex )
		*simpleTalentStartIndex = GetTalentDebugData_Parms.simpleTalentStartIndex;

	return GetTalentDebugData_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.CanEvolveTalent
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            talentIndex                    ( CPF_Parm )
// int                            TalentID                       ( CPF_Parm | CPF_OutParm )

bool UBioTalentContainer::CanEvolveTalent ( int talentIndex, int* TalentID )
{
	static UFunction* pFnCanEvolveTalent = NULL;

	if ( ! pFnCanEvolveTalent )
		pFnCanEvolveTalent = (UFunction*) UObject::GObjObjects()->Data[ 39437 ];

	UBioTalentContainer_execCanEvolveTalent_Parms CanEvolveTalent_Parms;
	CanEvolveTalent_Parms.talentIndex = talentIndex;

	pFnCanEvolveTalent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanEvolveTalent, &CanEvolveTalent_Parms, NULL );

	pFnCanEvolveTalent->FunctionFlags |= 0x400;

	if ( TalentID )
		*TalentID = CanEvolveTalent_Parms.TalentID;

	return CanEvolveTalent_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.CanDecrementLevelUpRank
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            talentIndex                    ( CPF_Parm )

bool UBioTalentContainer::CanDecrementLevelUpRank ( int talentIndex )
{
	static UFunction* pFnCanDecrementLevelUpRank = NULL;

	if ( ! pFnCanDecrementLevelUpRank )
		pFnCanDecrementLevelUpRank = (UFunction*) UObject::GObjObjects()->Data[ 39434 ];

	UBioTalentContainer_execCanDecrementLevelUpRank_Parms CanDecrementLevelUpRank_Parms;
	CanDecrementLevelUpRank_Parms.talentIndex = talentIndex;

	pFnCanDecrementLevelUpRank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanDecrementLevelUpRank, &CanDecrementLevelUpRank_Parms, NULL );

	pFnCanDecrementLevelUpRank->FunctionFlags |= 0x400;

	return CanDecrementLevelUpRank_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.CanIncrementLevelUpRank
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            talentIndex                    ( CPF_Parm )
// int                            incrementCost                  ( CPF_Parm | CPF_OutParm )

bool UBioTalentContainer::CanIncrementLevelUpRank ( int talentIndex, int* incrementCost )
{
	static UFunction* pFnCanIncrementLevelUpRank = NULL;

	if ( ! pFnCanIncrementLevelUpRank )
		pFnCanIncrementLevelUpRank = (UFunction*) UObject::GObjObjects()->Data[ 39430 ];

	UBioTalentContainer_execCanIncrementLevelUpRank_Parms CanIncrementLevelUpRank_Parms;
	CanIncrementLevelUpRank_Parms.talentIndex = talentIndex;

	pFnCanIncrementLevelUpRank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanIncrementLevelUpRank, &CanIncrementLevelUpRank_Parms, NULL );

	pFnCanIncrementLevelUpRank->FunctionFlags |= 0x400;

	if ( incrementCost )
		*incrementCost = CanIncrementLevelUpRank_Parms.incrementCost;

	return CanIncrementLevelUpRank_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.DecrementLevelUpRank
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            talentIndex                    ( CPF_Parm )

bool UBioTalentContainer::DecrementLevelUpRank ( int talentIndex )
{
	static UFunction* pFnDecrementLevelUpRank = NULL;

	if ( ! pFnDecrementLevelUpRank )
		pFnDecrementLevelUpRank = (UFunction*) UObject::GObjObjects()->Data[ 39427 ];

	UBioTalentContainer_execDecrementLevelUpRank_Parms DecrementLevelUpRank_Parms;
	DecrementLevelUpRank_Parms.talentIndex = talentIndex;

	pFnDecrementLevelUpRank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementLevelUpRank, &DecrementLevelUpRank_Parms, NULL );

	pFnDecrementLevelUpRank->FunctionFlags |= 0x400;

	return DecrementLevelUpRank_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.IncrementLevelUpRank
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            talentIndex                    ( CPF_Parm )

bool UBioTalentContainer::IncrementLevelUpRank ( int talentIndex )
{
	static UFunction* pFnIncrementLevelUpRank = NULL;

	if ( ! pFnIncrementLevelUpRank )
		pFnIncrementLevelUpRank = (UFunction*) UObject::GObjObjects()->Data[ 39424 ];

	UBioTalentContainer_execIncrementLevelUpRank_Parms IncrementLevelUpRank_Parms;
	IncrementLevelUpRank_Parms.talentIndex = talentIndex;

	pFnIncrementLevelUpRank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementLevelUpRank, &IncrementLevelUpRank_Parms, NULL );

	pFnIncrementLevelUpRank->FunctionFlags |= 0x400;

	return IncrementLevelUpRank_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.GetTalentLevelUpRank
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            talentIndex                    ( CPF_Parm )
// int                            talentRank                     ( CPF_Parm | CPF_OutParm )

bool UBioTalentContainer::GetTalentLevelUpRank ( int talentIndex, int* talentRank )
{
	static UFunction* pFnGetTalentLevelUpRank = NULL;

	if ( ! pFnGetTalentLevelUpRank )
		pFnGetTalentLevelUpRank = (UFunction*) UObject::GObjObjects()->Data[ 39420 ];

	UBioTalentContainer_execGetTalentLevelUpRank_Parms GetTalentLevelUpRank_Parms;
	GetTalentLevelUpRank_Parms.talentIndex = talentIndex;

	pFnGetTalentLevelUpRank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTalentLevelUpRank, &GetTalentLevelUpRank_Parms, NULL );

	pFnGetTalentLevelUpRank->FunctionFlags |= 0x400;

	if ( talentRank )
		*talentRank = GetTalentLevelUpRank_Parms.talentRank;

	return GetTalentLevelUpRank_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.GetTalentLevelUpIndex
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TalentID                       ( CPF_Parm )
// int                            talentIndex                    ( CPF_Parm | CPF_OutParm )

bool UBioTalentContainer::GetTalentLevelUpIndex ( int TalentID, int* talentIndex )
{
	static UFunction* pFnGetTalentLevelUpIndex = NULL;

	if ( ! pFnGetTalentLevelUpIndex )
		pFnGetTalentLevelUpIndex = (UFunction*) UObject::GObjObjects()->Data[ 39416 ];

	UBioTalentContainer_execGetTalentLevelUpIndex_Parms GetTalentLevelUpIndex_Parms;
	GetTalentLevelUpIndex_Parms.TalentID = TalentID;

	pFnGetTalentLevelUpIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTalentLevelUpIndex, &GetTalentLevelUpIndex_Parms, NULL );

	pFnGetTalentLevelUpIndex->FunctionFlags |= 0x400;

	if ( talentIndex )
		*talentIndex = GetTalentLevelUpIndex_Parms.talentIndex;

	return GetTalentLevelUpIndex_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.GetDynamicLevelUpTalentData
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            talentIndex                    ( CPF_Parm )
// struct FBioTalentDynamicData   Data                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioTalentContainer::GetDynamicLevelUpTalentData ( int talentIndex, struct FBioTalentDynamicData* Data )
{
	static UFunction* pFnGetDynamicLevelUpTalentData = NULL;

	if ( ! pFnGetDynamicLevelUpTalentData )
		pFnGetDynamicLevelUpTalentData = (UFunction*) UObject::GObjObjects()->Data[ 39412 ];

	UBioTalentContainer_execGetDynamicLevelUpTalentData_Parms GetDynamicLevelUpTalentData_Parms;
	GetDynamicLevelUpTalentData_Parms.talentIndex = talentIndex;

	pFnGetDynamicLevelUpTalentData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDynamicLevelUpTalentData, &GetDynamicLevelUpTalentData_Parms, NULL );

	pFnGetDynamicLevelUpTalentData->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &GetDynamicLevelUpTalentData_Parms.Data, 0x40 );

	return GetDynamicLevelUpTalentData_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.GetStaticLevelUpTalentData
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< struct FBioTalentStaticData > dataArray                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioTalentContainer::GetStaticLevelUpTalentData ( TArray< struct FBioTalentStaticData >* dataArray )
{
	static UFunction* pFnGetStaticLevelUpTalentData = NULL;

	if ( ! pFnGetStaticLevelUpTalentData )
		pFnGetStaticLevelUpTalentData = (UFunction*) UObject::GObjObjects()->Data[ 39408 ];

	UBioTalentContainer_execGetStaticLevelUpTalentData_Parms GetStaticLevelUpTalentData_Parms;

	pFnGetStaticLevelUpTalentData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStaticLevelUpTalentData, &GetStaticLevelUpTalentData_Parms, NULL );

	pFnGetStaticLevelUpTalentData->FunctionFlags |= 0x400;

	if ( dataArray )
		memcpy ( dataArray, &GetStaticLevelUpTalentData_Parms.dataArray, 0xC );

	return GetStaticLevelUpTalentData_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.GetNumLevelUpPoints
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            numPoints                      ( CPF_Parm | CPF_OutParm )
// int                            pointsSpent                    ( CPF_Parm | CPF_OutParm )

bool UBioTalentContainer::GetNumLevelUpPoints ( int* numPoints, int* pointsSpent )
{
	static UFunction* pFnGetNumLevelUpPoints = NULL;

	if ( ! pFnGetNumLevelUpPoints )
		pFnGetNumLevelUpPoints = (UFunction*) UObject::GObjObjects()->Data[ 39404 ];

	UBioTalentContainer_execGetNumLevelUpPoints_Parms GetNumLevelUpPoints_Parms;

	pFnGetNumLevelUpPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumLevelUpPoints, &GetNumLevelUpPoints_Parms, NULL );

	pFnGetNumLevelUpPoints->FunctionFlags |= 0x400;

	if ( numPoints )
		*numPoints = GetNumLevelUpPoints_Parms.numPoints;

	if ( pointsSpent )
		*pointsSpent = GetNumLevelUpPoints_Parms.pointsSpent;

	return GetNumLevelUpPoints_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.GetNumLevelUpTalents
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            numTalents                     ( CPF_Parm | CPF_OutParm )

bool UBioTalentContainer::GetNumLevelUpTalents ( int* numTalents )
{
	static UFunction* pFnGetNumLevelUpTalents = NULL;

	if ( ! pFnGetNumLevelUpTalents )
		pFnGetNumLevelUpTalents = (UFunction*) UObject::GObjObjects()->Data[ 39401 ];

	UBioTalentContainer_execGetNumLevelUpTalents_Parms GetNumLevelUpTalents_Parms;

	pFnGetNumLevelUpTalents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumLevelUpTalents, &GetNumLevelUpTalents_Parms, NULL );

	pFnGetNumLevelUpTalents->FunctionFlags |= 0x400;

	if ( numTalents )
		*numTalents = GetNumLevelUpTalents_Parms.numTalents;

	return GetNumLevelUpTalents_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.ClearLevelUp
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioTalentContainer::ClearLevelUp ( )
{
	static UFunction* pFnClearLevelUp = NULL;

	if ( ! pFnClearLevelUp )
		pFnClearLevelUp = (UFunction*) UObject::GObjObjects()->Data[ 39399 ];

	UBioTalentContainer_execClearLevelUp_Parms ClearLevelUp_Parms;

	pFnClearLevelUp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearLevelUp, &ClearLevelUp_Parms, NULL );

	pFnClearLevelUp->FunctionFlags |= 0x400;

	return ClearLevelUp_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.ApplyLevelUp
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioTalentContainer::ApplyLevelUp ( )
{
	static UFunction* pFnApplyLevelUp = NULL;

	if ( ! pFnApplyLevelUp )
		pFnApplyLevelUp = (UFunction*) UObject::GObjObjects()->Data[ 39397 ];

	UBioTalentContainer_execApplyLevelUp_Parms ApplyLevelUp_Parms;

	pFnApplyLevelUp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyLevelUp, &ApplyLevelUp_Parms, NULL );

	pFnApplyLevelUp->FunctionFlags |= 0x400;

	return ApplyLevelUp_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.InitializeLevelUp
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioTalentContainer::InitializeLevelUp ( )
{
	static UFunction* pFnInitializeLevelUp = NULL;

	if ( ! pFnInitializeLevelUp )
		pFnInitializeLevelUp = (UFunction*) UObject::GObjObjects()->Data[ 39395 ];

	UBioTalentContainer_execInitializeLevelUp_Parms InitializeLevelUp_Parms;

	pFnInitializeLevelUp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeLevelUp, &InitializeLevelUp_Parms, NULL );

	pFnInitializeLevelUp->FunctionFlags |= 0x400;

	return InitializeLevelUp_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.UpdateRequired
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioTalentContainer::UpdateRequired ( )
{
	static UFunction* pFnUpdateRequired = NULL;

	if ( ! pFnUpdateRequired )
		pFnUpdateRequired = (UFunction*) UObject::GObjObjects()->Data[ 39393 ];

	UBioTalentContainer_execUpdateRequired_Parms UpdateRequired_Parms;

	pFnUpdateRequired->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateRequired, &UpdateRequired_Parms, NULL );

	pFnUpdateRequired->FunctionFlags |= 0x400;

	return UpdateRequired_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.AddPrerequisiteTalent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            TalentID                       ( CPF_Parm )
// int                            prereqID                       ( CPF_Parm )
// int                            prereqRank                     ( CPF_Parm )

void UBioTalentContainer::AddPrerequisiteTalent ( int TalentID, int prereqID, int prereqRank )
{
	static UFunction* pFnAddPrerequisiteTalent = NULL;

	if ( ! pFnAddPrerequisiteTalent )
		pFnAddPrerequisiteTalent = (UFunction*) UObject::GObjObjects()->Data[ 39389 ];

	UBioTalentContainer_execAddPrerequisiteTalent_Parms AddPrerequisiteTalent_Parms;
	AddPrerequisiteTalent_Parms.TalentID = TalentID;
	AddPrerequisiteTalent_Parms.prereqID = prereqID;
	AddPrerequisiteTalent_Parms.prereqRank = prereqRank;

	pFnAddPrerequisiteTalent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPrerequisiteTalent, &AddPrerequisiteTalent_Parms, NULL );

	pFnAddPrerequisiteTalent->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTalentContainer.ScaleTalentByIncrement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            Id                             ( CPF_Parm )
// int                            rankIncrement                  ( CPF_Parm )

void UBioTalentContainer::ScaleTalentByIncrement ( int Id, int rankIncrement )
{
	static UFunction* pFnScaleTalentByIncrement = NULL;

	if ( ! pFnScaleTalentByIncrement )
		pFnScaleTalentByIncrement = (UFunction*) UObject::GObjObjects()->Data[ 33075 ];

	UBioTalentContainer_execScaleTalentByIncrement_Parms ScaleTalentByIncrement_Parms;
	ScaleTalentByIncrement_Parms.Id = Id;
	ScaleTalentByIncrement_Parms.rankIncrement = rankIncrement;

	pFnScaleTalentByIncrement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScaleTalentByIncrement, &ScaleTalentByIncrement_Parms, NULL );

	pFnScaleTalentByIncrement->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTalentContainer.ScaleTalentToRank
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            Id                             ( CPF_Parm )
// int                            Rank                           ( CPF_Parm )

void UBioTalentContainer::ScaleTalentToRank ( int Id, int Rank )
{
	static UFunction* pFnScaleTalentToRank = NULL;

	if ( ! pFnScaleTalentToRank )
		pFnScaleTalentToRank = (UFunction*) UObject::GObjObjects()->Data[ 39384 ];

	UBioTalentContainer_execScaleTalentToRank_Parms ScaleTalentToRank_Parms;
	ScaleTalentToRank_Parms.Id = Id;
	ScaleTalentToRank_Parms.Rank = Rank;

	pFnScaleTalentToRank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScaleTalentToRank, &ScaleTalentToRank_Parms, NULL );

	pFnScaleTalentToRank->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTalentContainer.IncreaseTalentMaxRankByIncrement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Id                             ( CPF_Parm )
// int                            MaxRankIncrement               ( CPF_Parm )

bool UBioTalentContainer::IncreaseTalentMaxRankByIncrement ( int Id, int MaxRankIncrement )
{
	static UFunction* pFnIncreaseTalentMaxRankByIncrement = NULL;

	if ( ! pFnIncreaseTalentMaxRankByIncrement )
		pFnIncreaseTalentMaxRankByIncrement = (UFunction*) UObject::GObjObjects()->Data[ 33070 ];

	UBioTalentContainer_execIncreaseTalentMaxRankByIncrement_Parms IncreaseTalentMaxRankByIncrement_Parms;
	IncreaseTalentMaxRankByIncrement_Parms.Id = Id;
	IncreaseTalentMaxRankByIncrement_Parms.MaxRankIncrement = MaxRankIncrement;

	pFnIncreaseTalentMaxRankByIncrement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncreaseTalentMaxRankByIncrement, &IncreaseTalentMaxRankByIncrement_Parms, NULL );

	pFnIncreaseTalentMaxRankByIncrement->FunctionFlags |= 0x400;

	return IncreaseTalentMaxRankByIncrement_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.IncreaseTalentMaxRank
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Id                             ( CPF_Parm )
// int                            MaxRank                        ( CPF_Parm )

bool UBioTalentContainer::IncreaseTalentMaxRank ( int Id, int MaxRank )
{
	static UFunction* pFnIncreaseTalentMaxRank = NULL;

	if ( ! pFnIncreaseTalentMaxRank )
		pFnIncreaseTalentMaxRank = (UFunction*) UObject::GObjObjects()->Data[ 33065 ];

	UBioTalentContainer_execIncreaseTalentMaxRank_Parms IncreaseTalentMaxRank_Parms;
	IncreaseTalentMaxRank_Parms.Id = Id;
	IncreaseTalentMaxRank_Parms.MaxRank = MaxRank;

	pFnIncreaseTalentMaxRank->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncreaseTalentMaxRank, &IncreaseTalentMaxRank_Parms, NULL );

	pFnIncreaseTalentMaxRank->FunctionFlags |= 0x400;

	return IncreaseTalentMaxRank_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.RemoveTalent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioTalent*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Id                             ( CPF_Parm )

class UBioTalent* UBioTalentContainer::RemoveTalent ( int Id )
{
	static UFunction* pFnRemoveTalent = NULL;

	if ( ! pFnRemoveTalent )
		pFnRemoveTalent = (UFunction*) UObject::GObjObjects()->Data[ 39375 ];

	UBioTalentContainer_execRemoveTalent_Parms RemoveTalent_Parms;
	RemoveTalent_Parms.Id = Id;

	pFnRemoveTalent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveTalent, &RemoveTalent_Parms, NULL );

	pFnRemoveTalent->FunctionFlags |= 0x400;

	return RemoveTalent_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.AddSimpleTalent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioTalent*              Talent                         ( CPF_Parm )

void UBioTalentContainer::AddSimpleTalent ( class UBioTalent* Talent )
{
	static UFunction* pFnAddSimpleTalent = NULL;

	if ( ! pFnAddSimpleTalent )
		pFnAddSimpleTalent = (UFunction*) UObject::GObjObjects()->Data[ 39373 ];

	UBioTalentContainer_execAddSimpleTalent_Parms AddSimpleTalent_Parms;
	AddSimpleTalent_Parms.Talent = Talent;

	pFnAddSimpleTalent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSimpleTalent, &AddSimpleTalent_Parms, NULL );

	pFnAddSimpleTalent->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTalentContainer.AddSpecialization
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            bonusIdentification            ( CPF_Parm )
// int                            ReplaceTalentID                ( CPF_Parm )

bool UBioTalentContainer::AddSpecialization ( int bonusIdentification, int ReplaceTalentID )
{
	static UFunction* pFnAddSpecialization = NULL;

	if ( ! pFnAddSpecialization )
		pFnAddSpecialization = (UFunction*) UObject::GObjObjects()->Data[ 39369 ];

	UBioTalentContainer_execAddSpecialization_Parms AddSpecialization_Parms;
	AddSpecialization_Parms.bonusIdentification = bonusIdentification;
	AddSpecialization_Parms.ReplaceTalentID = ReplaceTalentID;

	pFnAddSpecialization->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSpecialization, &AddSpecialization_Parms, NULL );

	pFnAddSpecialization->FunctionFlags |= 0x400;

	return AddSpecialization_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.AddBonusTalents
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            bonusIdentifier                ( CPF_Parm )

bool UBioTalentContainer::AddBonusTalents ( int bonusIdentifier )
{
	static UFunction* pFnAddBonusTalents = NULL;

	if ( ! pFnAddBonusTalents )
		pFnAddBonusTalents = (UFunction*) UObject::GObjObjects()->Data[ 33060 ];

	UBioTalentContainer_execAddBonusTalents_Parms AddBonusTalents_Parms;
	AddBonusTalents_Parms.bonusIdentifier = bonusIdentifier;

	pFnAddBonusTalents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddBonusTalents, &AddBonusTalents_Parms, NULL );

	pFnAddBonusTalents->FunctionFlags |= 0x400;

	return AddBonusTalents_Parms.ReturnValue;
};

// Function SFXGame.BioTalentContainer.AddTalent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioTalent*              Talent                         ( CPF_Parm )
// int                            MaxRank                        ( CPF_Parm )
// int                            LevelOffset                    ( CPF_Parm )
// int                            LevelsPerRank                  ( CPF_Parm )
// int                            VisualOrder                    ( CPF_Parm )

void UBioTalentContainer::AddTalent ( class UBioTalent* Talent, int MaxRank, int LevelOffset, int LevelsPerRank, int VisualOrder )
{
	static UFunction* pFnAddTalent = NULL;

	if ( ! pFnAddTalent )
		pFnAddTalent = (UFunction*) UObject::GObjObjects()->Data[ 39361 ];

	UBioTalentContainer_execAddTalent_Parms AddTalent_Parms;
	AddTalent_Parms.Talent = Talent;
	AddTalent_Parms.MaxRank = MaxRank;
	AddTalent_Parms.LevelOffset = LevelOffset;
	AddTalent_Parms.LevelsPerRank = LevelsPerRank;
	AddTalent_Parms.VisualOrder = VisualOrder;

	pFnAddTalent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTalent, &AddTalent_Parms, NULL );

	pFnAddTalent->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTalentContainer.SetTarget
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ABioPawn*                Target                         ( CPF_Parm )

void UBioTalentContainer::SetTarget ( class ABioPawn* Target )
{
	static UFunction* pFnSetTarget = NULL;

	if ( ! pFnSetTarget )
		pFnSetTarget = (UFunction*) UObject::GObjObjects()->Data[ 39359 ];

	UBioTalentContainer_execSetTarget_Parms SetTarget_Parms;
	SetTarget_Parms.Target = Target;

	pFnSetTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTarget, &SetTarget_Parms, NULL );

	pFnSetTarget->FunctionFlags |= 0x400;
};

// Function SFXGame.BioTalentImporter.LoadSpecializationData
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            oldTalentID                    ( CPF_Parm )
// TArray< struct FBioSpecializationData > specData                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioTalentImporter::LoadSpecializationData ( int oldTalentID, TArray< struct FBioSpecializationData >* specData )
{
	static UFunction* pFnLoadSpecializationData = NULL;

	if ( ! pFnLoadSpecializationData )
		pFnLoadSpecializationData = (UFunction*) UObject::GObjObjects()->Data[ 50255 ];

	UBioTalentImporter_execLoadSpecializationData_Parms LoadSpecializationData_Parms;
	LoadSpecializationData_Parms.oldTalentID = oldTalentID;

	pFnLoadSpecializationData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadSpecializationData, &LoadSpecializationData_Parms, NULL );

	pFnLoadSpecializationData->FunctionFlags |= 0x400;

	if ( specData )
		memcpy ( specData, &LoadSpecializationData_Parms.specData, 0xC );

	return LoadSpecializationData_Parms.ReturnValue;
};

// Function SFXGame.BioTalentImporter.DoesSpecializationExist
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TalentID                       ( CPF_Parm )

bool UBioTalentImporter::DoesSpecializationExist ( int TalentID )
{
	static UFunction* pFnDoesSpecializationExist = NULL;

	if ( ! pFnDoesSpecializationExist )
		pFnDoesSpecializationExist = (UFunction*) UObject::GObjObjects()->Data[ 50252 ];

	UBioTalentImporter_execDoesSpecializationExist_Parms DoesSpecializationExist_Parms;
	DoesSpecializationExist_Parms.TalentID = TalentID;

	pFnDoesSpecializationExist->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoesSpecializationExist, &DoesSpecializationExist_Parms, NULL );

	pFnDoesSpecializationExist->FunctionFlags |= 0x400;

	return DoesSpecializationExist_Parms.ReturnValue;
};

// Function SFXGame.BioTalentImporter.GetTalentUpgradeCost
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            costTemplateID                 ( CPF_Parm )
// int                            Rank                           ( CPF_Parm )
// int                            Cost                           ( CPF_Parm | CPF_OutParm )

bool UBioTalentImporter::GetTalentUpgradeCost ( int costTemplateID, int Rank, int* Cost )
{
	static UFunction* pFnGetTalentUpgradeCost = NULL;

	if ( ! pFnGetTalentUpgradeCost )
		pFnGetTalentUpgradeCost = (UFunction*) UObject::GObjObjects()->Data[ 50247 ];

	UBioTalentImporter_execGetTalentUpgradeCost_Parms GetTalentUpgradeCost_Parms;
	GetTalentUpgradeCost_Parms.costTemplateID = costTemplateID;
	GetTalentUpgradeCost_Parms.Rank = Rank;

	pFnGetTalentUpgradeCost->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTalentUpgradeCost, &GetTalentUpgradeCost_Parms, NULL );

	pFnGetTalentUpgradeCost->FunctionFlags |= 0x400;

	if ( Cost )
		*Cost = GetTalentUpgradeCost_Parms.Cost;

	return GetTalentUpgradeCost_Parms.ReturnValue;
};

// Function SFXGame.BioTalentImporter.GetTalentRankGuiData
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TalentID                       ( CPF_Parm )
// int                            MaxRank                        ( CPF_Parm )
// TArray< int >                  iconArray                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioTalentImporter::GetTalentRankGuiData ( int TalentID, int MaxRank, TArray< int >* iconArray )
{
	static UFunction* pFnGetTalentRankGuiData = NULL;

	if ( ! pFnGetTalentRankGuiData )
		pFnGetTalentRankGuiData = (UFunction*) UObject::GObjObjects()->Data[ 50235 ];

	UBioTalentImporter_execGetTalentRankGuiData_Parms GetTalentRankGuiData_Parms;
	GetTalentRankGuiData_Parms.TalentID = TalentID;
	GetTalentRankGuiData_Parms.MaxRank = MaxRank;

	pFnGetTalentRankGuiData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTalentRankGuiData, &GetTalentRankGuiData_Parms, NULL );

	pFnGetTalentRankGuiData->FunctionFlags |= 0x400;

	if ( iconArray )
		memcpy ( iconArray, &GetTalentRankGuiData_Parms.iconArray, 0xC );

	//if ( nameArray )

	//if ( descArray )

	//if ( unlockBlurbArray )

	return GetTalentRankGuiData_Parms.ReturnValue;
};

// Function SFXGame.BioTalentImporter.GetTalentGuiData
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TalentID                       ( CPF_Parm )
// int                            costTemplateID                 ( CPF_Parm | CPF_OutParm )

bool UBioTalentImporter::GetTalentGuiData ( int TalentID, int* costTemplateID )
{
	static UFunction* pFnGetTalentGuiData = NULL;

	if ( ! pFnGetTalentGuiData )
		pFnGetTalentGuiData = (UFunction*) UObject::GObjObjects()->Data[ 50227 ];

	UBioTalentImporter_execGetTalentGuiData_Parms GetTalentGuiData_Parms;
	GetTalentGuiData_Parms.TalentID = TalentID;

	pFnGetTalentGuiData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTalentGuiData, &GetTalentGuiData_Parms, NULL );

	pFnGetTalentGuiData->FunctionFlags |= 0x400;

	//if ( talentName )

	//if ( Description )

	//if ( UnlockName )

	//if ( unlockBlurb )

	if ( costTemplateID )
		*costTemplateID = GetTalentGuiData_Parms.costTemplateID;

	return GetTalentGuiData_Parms.ReturnValue;
};

// Function SFXGame.BioTalentImporter.LoadBonusTalentData
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Row                            ( CPF_Parm )
// int                            MaxRank                        ( CPF_Parm | CPF_OutParm )
// int                            LevelOffset                    ( CPF_Parm | CPF_OutParm )
// int                            LevelsPerRank                  ( CPF_Parm | CPF_OutParm )
// int                            StartingRank                   ( CPF_Parm | CPF_OutParm )
// int                            IsVisible                      ( CPF_Parm | CPF_OutParm )
// int                            VisualOrder                    ( CPF_Parm | CPF_OutParm )

bool UBioTalentImporter::LoadBonusTalentData ( int Row, int* MaxRank, int* LevelOffset, int* LevelsPerRank, int* StartingRank, int* IsVisible, int* VisualOrder )
{
	static UFunction* pFnLoadBonusTalentData = NULL;

	if ( ! pFnLoadBonusTalentData )
		pFnLoadBonusTalentData = (UFunction*) UObject::GObjObjects()->Data[ 50218 ];

	UBioTalentImporter_execLoadBonusTalentData_Parms LoadBonusTalentData_Parms;
	LoadBonusTalentData_Parms.Row = Row;

	pFnLoadBonusTalentData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadBonusTalentData, &LoadBonusTalentData_Parms, NULL );

	pFnLoadBonusTalentData->FunctionFlags |= 0x400;

	if ( MaxRank )
		*MaxRank = LoadBonusTalentData_Parms.MaxRank;

	if ( LevelOffset )
		*LevelOffset = LoadBonusTalentData_Parms.LevelOffset;

	if ( LevelsPerRank )
		*LevelsPerRank = LoadBonusTalentData_Parms.LevelsPerRank;

	if ( StartingRank )
		*StartingRank = LoadBonusTalentData_Parms.StartingRank;

	if ( IsVisible )
		*IsVisible = LoadBonusTalentData_Parms.IsVisible;

	if ( VisualOrder )
		*VisualOrder = LoadBonusTalentData_Parms.VisualOrder;

	return LoadBonusTalentData_Parms.ReturnValue;
};

// Function SFXGame.BioTalentImporter.LoadBonusTalentRowsAndIDs
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            bonusIdentifier                ( CPF_Parm )
// TArray< int >                  Rows                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< int >                  talentIDs                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioTalentImporter::LoadBonusTalentRowsAndIDs ( int bonusIdentifier, TArray< int >* Rows, TArray< int >* talentIDs )
{
	static UFunction* pFnLoadBonusTalentRowsAndIDs = NULL;

	if ( ! pFnLoadBonusTalentRowsAndIDs )
		pFnLoadBonusTalentRowsAndIDs = (UFunction*) UObject::GObjObjects()->Data[ 50211 ];

	UBioTalentImporter_execLoadBonusTalentRowsAndIDs_Parms LoadBonusTalentRowsAndIDs_Parms;
	LoadBonusTalentRowsAndIDs_Parms.bonusIdentifier = bonusIdentifier;

	pFnLoadBonusTalentRowsAndIDs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadBonusTalentRowsAndIDs, &LoadBonusTalentRowsAndIDs_Parms, NULL );

	pFnLoadBonusTalentRowsAndIDs->FunctionFlags |= 0x400;

	if ( Rows )
		memcpy ( Rows, &LoadBonusTalentRowsAndIDs_Parms.Rows, 0xC );

	if ( talentIDs )
		memcpy ( talentIDs, &LoadBonusTalentRowsAndIDs_Parms.talentIDs, 0xC );

	return LoadBonusTalentRowsAndIDs_Parms.ReturnValue;
};

// Function SFXGame.BioTalentImporter.LoadTalent
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UBioTalent*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioActorBehavior*       Behavior                       ( CPF_Parm )
// int                            TalentID                       ( CPF_Parm )
// int                            Rank                           ( CPF_Parm )

class UBioTalent* UBioTalentImporter::LoadTalent ( class UBioActorBehavior* Behavior, int TalentID, int Rank )
{
	static UFunction* pFnLoadTalent = NULL;

	if ( ! pFnLoadTalent )
		pFnLoadTalent = (UFunction*) UObject::GObjObjects()->Data[ 50206 ];

	UBioTalentImporter_execLoadTalent_Parms LoadTalent_Parms;
	LoadTalent_Parms.Behavior = Behavior;
	LoadTalent_Parms.TalentID = TalentID;
	LoadTalent_Parms.Rank = Rank;

	pFnLoadTalent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadTalent, &LoadTalent_Parms, NULL );

	pFnLoadTalent->FunctionFlags |= 0x400;

	return LoadTalent_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.OnLastManStanding
// [0x00020000] 
// Parameters infos:

void ABioAiController::OnLastManStanding ( )
{
	static UFunction* pFnOnLastManStanding = NULL;

	if ( ! pFnOnLastManStanding )
		pFnOnLastManStanding = (UFunction*) UObject::GObjObjects()->Data[ 30500 ];

	ABioAiController_execOnLastManStanding_Parms OnLastManStanding_Parms;

	this->ProcessEvent ( pFnOnLastManStanding, &OnLastManStanding_Parms, NULL );
};

// Function SFXGame.BioAiController.RemoveIgnoredSquad
// [0x00020002] 
// Parameters infos:
// class ABioBaseSquad*           oSquad                         ( CPF_Parm )

void ABioAiController::RemoveIgnoredSquad ( class ABioBaseSquad* oSquad )
{
	static UFunction* pFnRemoveIgnoredSquad = NULL;

	if ( ! pFnRemoveIgnoredSquad )
		pFnRemoveIgnoredSquad = (UFunction*) UObject::GObjObjects()->Data[ 30498 ];

	ABioAiController_execRemoveIgnoredSquad_Parms RemoveIgnoredSquad_Parms;
	RemoveIgnoredSquad_Parms.oSquad = oSquad;

	this->ProcessEvent ( pFnRemoveIgnoredSquad, &RemoveIgnoredSquad_Parms, NULL );
};

// Function SFXGame.BioAiController.AddIgnoredSquad
// [0x00020002] 
// Parameters infos:
// class ABioBaseSquad*           oSquad                         ( CPF_Parm )

void ABioAiController::AddIgnoredSquad ( class ABioBaseSquad* oSquad )
{
	static UFunction* pFnAddIgnoredSquad = NULL;

	if ( ! pFnAddIgnoredSquad )
		pFnAddIgnoredSquad = (UFunction*) UObject::GObjObjects()->Data[ 30495 ];

	ABioAiController_execAddIgnoredSquad_Parms AddIgnoredSquad_Parms;
	AddIgnoredSquad_Parms.oSquad = oSquad;

	this->ProcessEvent ( pFnAddIgnoredSquad, &AddIgnoredSquad_Parms, NULL );
};

// Function SFXGame.BioAiController.RemoveIgnoredTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )

void ABioAiController::RemoveIgnoredTarget ( class AActor* oTarget )
{
	static UFunction* pFnRemoveIgnoredTarget = NULL;

	if ( ! pFnRemoveIgnoredTarget )
		pFnRemoveIgnoredTarget = (UFunction*) UObject::GObjObjects()->Data[ 30493 ];

	ABioAiController_execRemoveIgnoredTarget_Parms RemoveIgnoredTarget_Parms;
	RemoveIgnoredTarget_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnRemoveIgnoredTarget, &RemoveIgnoredTarget_Parms, NULL );
};

// Function SFXGame.BioAiController.AddIgnoredTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )

void ABioAiController::AddIgnoredTarget ( class AActor* oTarget )
{
	static UFunction* pFnAddIgnoredTarget = NULL;

	if ( ! pFnAddIgnoredTarget )
		pFnAddIgnoredTarget = (UFunction*) UObject::GObjObjects()->Data[ 30491 ];

	ABioAiController_execAddIgnoredTarget_Parms AddIgnoredTarget_Parms;
	AddIgnoredTarget_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnAddIgnoredTarget, &AddIgnoredTarget_Parms, NULL );
};

// Function SFXGame.BioAiController.GetPreferredTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ABioAiController::GetPreferredTarget ( )
{
	static UFunction* pFnGetPreferredTarget = NULL;

	if ( ! pFnGetPreferredTarget )
		pFnGetPreferredTarget = (UFunction*) UObject::GObjObjects()->Data[ 30489 ];

	ABioAiController_execGetPreferredTarget_Parms GetPreferredTarget_Parms;

	this->ProcessEvent ( pFnGetPreferredTarget, &GetPreferredTarget_Parms, NULL );

	return GetPreferredTarget_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.SetPreferredTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )

void ABioAiController::SetPreferredTarget ( class AActor* oTarget )
{
	static UFunction* pFnSetPreferredTarget = NULL;

	if ( ! pFnSetPreferredTarget )
		pFnSetPreferredTarget = (UFunction*) UObject::GObjObjects()->Data[ 30487 ];

	ABioAiController_execSetPreferredTarget_Parms SetPreferredTarget_Parms;
	SetPreferredTarget_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnSetPreferredTarget, &SetPreferredTarget_Parms, NULL );
};

// Function SFXGame.BioAiController.GetForcedTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ABioAiController::GetForcedTarget ( )
{
	static UFunction* pFnGetForcedTarget = NULL;

	if ( ! pFnGetForcedTarget )
		pFnGetForcedTarget = (UFunction*) UObject::GObjObjects()->Data[ 30485 ];

	ABioAiController_execGetForcedTarget_Parms GetForcedTarget_Parms;

	this->ProcessEvent ( pFnGetForcedTarget, &GetForcedTarget_Parms, NULL );

	return GetForcedTarget_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.SetForcedTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )

void ABioAiController::SetForcedTarget ( class AActor* oTarget )
{
	static UFunction* pFnSetForcedTarget = NULL;

	if ( ! pFnSetForcedTarget )
		pFnSetForcedTarget = (UFunction*) UObject::GObjObjects()->Data[ 30483 ];

	ABioAiController_execSetForcedTarget_Parms SetForcedTarget_Parms;
	SetForcedTarget_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnSetForcedTarget, &SetForcedTarget_Parms, NULL );
};

// Function SFXGame.BioAiController.GetBehaviourList
// [0x00422800] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         Behaviours                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ABioAiController::eventGetBehaviourList ( TArray< struct FName >* Behaviours )
{
	static UFunction* pFnGetBehaviourList = NULL;

	if ( ! pFnGetBehaviourList )
		pFnGetBehaviourList = (UFunction*) UObject::GObjObjects()->Data[ 30480 ];

	ABioAiController_eventGetBehaviourList_Parms GetBehaviourList_Parms;

	this->ProcessEvent ( pFnGetBehaviourList, &GetBehaviourList_Parms, NULL );

	if ( Behaviours )
		memcpy ( Behaviours, &GetBehaviourList_Parms.Behaviours, 0xC );
};

// Function SFXGame.BioAiController.IsTargetInFiringArc
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                pPawn                          ( CPF_Parm )
// class AActor*                  pTarget                        ( CPF_Parm )
// float                          fFiringArcAsDot                ( CPF_Parm )

bool ABioAiController::IsTargetInFiringArc ( class ABioPawn* pPawn, class AActor* pTarget, float fFiringArcAsDot )
{
	static UFunction* pFnIsTargetInFiringArc = NULL;

	if ( ! pFnIsTargetInFiringArc )
		pFnIsTargetInFiringArc = (UFunction*) UObject::GObjObjects()->Data[ 30475 ];

	ABioAiController_execIsTargetInFiringArc_Parms IsTargetInFiringArc_Parms;
	IsTargetInFiringArc_Parms.pPawn = pPawn;
	IsTargetInFiringArc_Parms.pTarget = pTarget;
	IsTargetInFiringArc_Parms.fFiringArcAsDot = fFiringArcAsDot;

	pFnIsTargetInFiringArc->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTargetInFiringArc, &IsTargetInFiringArc_Parms, NULL );

	pFnIsTargetInFiringArc->FunctionFlags |= 0x400;

	return IsTargetInFiringArc_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.HasLOSToTarget
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  pTarget                        ( CPF_Parm )
// float                          fTimeOfHit                     ( CPF_Parm | CPF_OutParm )

bool ABioAiController::HasLOSToTarget ( class AActor* pTarget, float* fTimeOfHit )
{
	static UFunction* pFnHasLOSToTarget = NULL;

	if ( ! pFnHasLOSToTarget )
		pFnHasLOSToTarget = (UFunction*) UObject::GObjObjects()->Data[ 30471 ];

	ABioAiController_execHasLOSToTarget_Parms HasLOSToTarget_Parms;
	HasLOSToTarget_Parms.pTarget = pTarget;

	pFnHasLOSToTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasLOSToTarget, &HasLOSToTarget_Parms, NULL );

	pFnHasLOSToTarget->FunctionFlags |= 0x400;

	if ( fTimeOfHit )
		*fTimeOfHit = HasLOSToTarget_Parms.fTimeOfHit;

	return HasLOSToTarget_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.SetBestTargetCoverAction
// [0x00020000] 
// Parameters infos:
// unsigned char                  BestAction                     ( CPF_Parm )

void ABioAiController::SetBestTargetCoverAction ( unsigned char BestAction )
{
	static UFunction* pFnSetBestTargetCoverAction = NULL;

	if ( ! pFnSetBestTargetCoverAction )
		pFnSetBestTargetCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 30469 ];

	ABioAiController_execSetBestTargetCoverAction_Parms SetBestTargetCoverAction_Parms;
	SetBestTargetCoverAction_Parms.BestAction = BestAction;

	this->ProcessEvent ( pFnSetBestTargetCoverAction, &SetBestTargetCoverAction_Parms, NULL );
};

// Function SFXGame.BioAiController.CanAttack
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// struct FVector                 AttackOrigin                   ( CPF_OptionalParm | CPF_Parm )

bool ABioAiController::CanAttack ( class AActor* oTarget, struct FVector AttackOrigin )
{
	static UFunction* pFnCanAttack = NULL;

	if ( ! pFnCanAttack )
		pFnCanAttack = (UFunction*) UObject::GObjObjects()->Data[ 30455 ];

	ABioAiController_execCanAttack_Parms CanAttack_Parms;
	CanAttack_Parms.oTarget = oTarget;
	memcpy ( &CanAttack_Parms.AttackOrigin, &AttackOrigin, 0xC );

	this->ProcessEvent ( pFnCanAttack, &CanAttack_Parms, NULL );

	return CanAttack_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.NotifyLimbDetached
// [0x00020000] 
// Parameters infos:
// unsigned char                  ePartGroup                     ( CPF_Parm )

void ABioAiController::NotifyLimbDetached ( unsigned char ePartGroup )
{
	static UFunction* pFnNotifyLimbDetached = NULL;

	if ( ! pFnNotifyLimbDetached )
		pFnNotifyLimbDetached = (UFunction*) UObject::GObjObjects()->Data[ 30444 ];

	ABioAiController_execNotifyLimbDetached_Parms NotifyLimbDetached_Parms;
	NotifyLimbDetached_Parms.ePartGroup = ePartGroup;

	this->ProcessEvent ( pFnNotifyLimbDetached, &NotifyLimbDetached_Parms, NULL );
};

// Function SFXGame.BioAiController.Initialize
// [0x00020000] 
// Parameters infos:

void ABioAiController::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 30443 ];

	ABioAiController_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.BioAiController.OnEnteredPlaypen
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ABioAiController::eventOnEnteredPlaypen ( )
{
	static UFunction* pFnOnEnteredPlaypen = NULL;

	if ( ! pFnOnEnteredPlaypen )
		pFnOnEnteredPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 30442 ];

	ABioAiController_eventOnEnteredPlaypen_Parms OnEnteredPlaypen_Parms;

	this->ProcessEvent ( pFnOnEnteredPlaypen, &OnEnteredPlaypen_Parms, NULL );
};

// Function SFXGame.BioAiController.OnLeftPlaypen
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ABioAiController::eventOnLeftPlaypen ( )
{
	static UFunction* pFnOnLeftPlaypen = NULL;

	if ( ! pFnOnLeftPlaypen )
		pFnOnLeftPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 30441 ];

	ABioAiController_eventOnLeftPlaypen_Parms OnLeftPlaypen_Parms;

	this->ProcessEvent ( pFnOnLeftPlaypen, &OnLeftPlaypen_Parms, NULL );
};

// Function SFXGame.BioAiController.NotifyUnableToFireFromOpen
// [0x00020000] 
// Parameters infos:

void ABioAiController::NotifyUnableToFireFromOpen ( )
{
	static UFunction* pFnNotifyUnableToFireFromOpen = NULL;

	if ( ! pFnNotifyUnableToFireFromOpen )
		pFnNotifyUnableToFireFromOpen = (UFunction*) UObject::GObjObjects()->Data[ 30440 ];

	ABioAiController_execNotifyUnableToFireFromOpen_Parms NotifyUnableToFireFromOpen_Parms;

	this->ProcessEvent ( pFnNotifyUnableToFireFromOpen, &NotifyUnableToFireFromOpen_Parms, NULL );
};

// Function SFXGame.BioAiController.NotifyCastAt
// [0x00020002] 
// Parameters infos:
// class APawn*                   Attacker                       ( CPF_Parm )
// class USFXPower*               Power                          ( CPF_Parm )

void ABioAiController::NotifyCastAt ( class APawn* Attacker, class USFXPower* Power )
{
	static UFunction* pFnNotifyCastAt = NULL;

	if ( ! pFnNotifyCastAt )
		pFnNotifyCastAt = (UFunction*) UObject::GObjObjects()->Data[ 30435 ];

	ABioAiController_execNotifyCastAt_Parms NotifyCastAt_Parms;
	NotifyCastAt_Parms.Attacker = Attacker;
	NotifyCastAt_Parms.Power = Power;

	this->ProcessEvent ( pFnNotifyCastAt, &NotifyCastAt_Parms, NULL );
};

// Function SFXGame.BioAiController.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void ABioAiController::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 30428 ];

	ABioAiController_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function SFXGame.BioAiController.NotifyEnemyVisible
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            EnemyIdx                       ( CPF_Parm )
// float                          TimeSinceSeen                  ( CPF_Parm )

void ABioAiController::eventNotifyEnemyVisible ( int EnemyIdx, float TimeSinceSeen )
{
	static UFunction* pFnNotifyEnemyVisible = NULL;

	if ( ! pFnNotifyEnemyVisible )
		pFnNotifyEnemyVisible = (UFunction*) UObject::GObjObjects()->Data[ 30425 ];

	ABioAiController_eventNotifyEnemyVisible_Parms NotifyEnemyVisible_Parms;
	NotifyEnemyVisible_Parms.EnemyIdx = EnemyIdx;
	NotifyEnemyVisible_Parms.TimeSinceSeen = TimeSinceSeen;

	this->ProcessEvent ( pFnNotifyEnemyVisible, &NotifyEnemyVisible_Parms, NULL );
};

// Function SFXGame.BioAiController.NotifyNewEnemy
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class APawn*                   NewEnemy                       ( CPF_Parm )

void ABioAiController::eventNotifyNewEnemy ( class APawn* NewEnemy )
{
	static UFunction* pFnNotifyNewEnemy = NULL;

	if ( ! pFnNotifyNewEnemy )
		pFnNotifyNewEnemy = (UFunction*) UObject::GObjObjects()->Data[ 30423 ];

	ABioAiController_eventNotifyNewEnemy_Parms NotifyNewEnemy_Parms;
	NotifyNewEnemy_Parms.NewEnemy = NewEnemy;

	this->ProcessEvent ( pFnNotifyNewEnemy, &NotifyNewEnemy_Parms, NULL );
};

// Function SFXGame.BioAiController.PawnDied
// [0x00020002] 
// Parameters infos:
// class APawn*                   inPawn                         ( CPF_Parm )

void ABioAiController::PawnDied ( class APawn* inPawn )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = (UFunction*) UObject::GObjObjects()->Data[ 30421 ];

	ABioAiController_execPawnDied_Parms PawnDied_Parms;
	PawnDied_Parms.inPawn = inPawn;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function SFXGame.BioAiController.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ABioAiController::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 30418 ];

	ABioAiController_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.GetRouteCacheDistance
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioAiController::GetRouteCacheDistance ( )
{
	static UFunction* pFnGetRouteCacheDistance = NULL;

	if ( ! pFnGetRouteCacheDistance )
		pFnGetRouteCacheDistance = (UFunction*) UObject::GObjObjects()->Data[ 30413 ];

	ABioAiController_execGetRouteCacheDistance_Parms GetRouteCacheDistance_Parms;

	this->ProcessEvent ( pFnGetRouteCacheDistance, &GetRouteCacheDistance_Parms, NULL );

	return GetRouteCacheDistance_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.GetMoveTimeOutDuration
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioAiController::GetMoveTimeOutDuration ( )
{
	static UFunction* pFnGetMoveTimeOutDuration = NULL;

	if ( ! pFnGetMoveTimeOutDuration )
		pFnGetMoveTimeOutDuration = (UFunction*) UObject::GObjObjects()->Data[ 30411 ];

	ABioAiController_execGetMoveTimeOutDuration_Parms GetMoveTimeOutDuration_Parms;

	this->ProcessEvent ( pFnGetMoveTimeOutDuration, &GetMoveTimeOutDuration_Parms, NULL );

	return GetMoveTimeOutDuration_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.MoveToSlot
// [0x00020409] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 vSlotLocation                  ( CPF_Parm )

void ABioAiController::MoveToSlot ( struct FVector vSlotLocation )
{
	static UFunction* pFnMoveToSlot = NULL;

	if ( ! pFnMoveToSlot )
		pFnMoveToSlot = (UFunction*) UObject::GObjObjects()->Data[ 30409 ];

	ABioAiController_execMoveToSlot_Parms MoveToSlot_Parms;
	memcpy ( &MoveToSlot_Parms.vSlotLocation, &vSlotLocation, 0xC );

	pFnMoveToSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveToSlot, &MoveToSlot_Parms, NULL );

	pFnMoveToSlot->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAiController.AdjustToSlot
// [0x00020409] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            TargetSlotIdx                  ( CPF_Parm )

void ABioAiController::AdjustToSlot ( int TargetSlotIdx )
{
	static UFunction* pFnAdjustToSlot = NULL;

	if ( ! pFnAdjustToSlot )
		pFnAdjustToSlot = (UFunction*) UObject::GObjObjects()->Data[ 30407 ];

	ABioAiController_execAdjustToSlot_Parms AdjustToSlot_Parms;
	AdjustToSlot_Parms.TargetSlotIdx = TargetSlotIdx;

	pFnAdjustToSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustToSlot, &AdjustToSlot_Parms, NULL );

	pFnAdjustToSlot->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAiController.NotifyReachedCoverSlot
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )

void ABioAiController::NotifyReachedCoverSlot ( int SlotIdx )
{
	static UFunction* pFnNotifyReachedCoverSlot = NULL;

	if ( ! pFnNotifyReachedCoverSlot )
		pFnNotifyReachedCoverSlot = (UFunction*) UObject::GObjObjects()->Data[ 30402 ];

	ABioAiController_execNotifyReachedCoverSlot_Parms NotifyReachedCoverSlot_Parms;
	NotifyReachedCoverSlot_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnNotifyReachedCoverSlot, &NotifyReachedCoverSlot_Parms, NULL );
};

// Function SFXGame.BioAiController.NotifyReachedCover
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ABioAiController::NotifyReachedCover ( )
{
	static UFunction* pFnNotifyReachedCover = NULL;

	if ( ! pFnNotifyReachedCover )
		pFnNotifyReachedCover = (UFunction*) UObject::GObjObjects()->Data[ 30401 ];

	ABioAiController_execNotifyReachedCover_Parms NotifyReachedCover_Parms;

	this->ProcessEvent ( pFnNotifyReachedCover, &NotifyReachedCover_Parms, NULL );
};

// Function SFXGame.BioAiController.GetCoverAction
// [0x00C20003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCoverInfo              ChkCover                       ( CPF_Parm )
// class AActor*                  ChkTarget                      ( CPF_Parm )
// unsigned long                  bSetPendingCoverAction         ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AttackerCoverAction            ( CPF_Parm | CPF_OutParm )
// unsigned char                  TargetCoverAction              ( CPF_Parm | CPF_OutParm )

bool ABioAiController::GetCoverAction ( struct FCoverInfo ChkCover, class AActor* ChkTarget, unsigned long bSetPendingCoverAction, unsigned char* AttackerCoverAction, unsigned char* TargetCoverAction )
{
	static UFunction* pFnGetCoverAction = NULL;

	if ( ! pFnGetCoverAction )
		pFnGetCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 30383 ];

	ABioAiController_execGetCoverAction_Parms GetCoverAction_Parms;
	memcpy ( &GetCoverAction_Parms.ChkCover, &ChkCover, 0x8 );
	GetCoverAction_Parms.ChkTarget = ChkTarget;
	GetCoverAction_Parms.bSetPendingCoverAction = bSetPendingCoverAction;

	this->ProcessEvent ( pFnGetCoverAction, &GetCoverAction_Parms, NULL );

	if ( AttackerCoverAction )
		*AttackerCoverAction = GetCoverAction_Parms.AttackerCoverAction;

	if ( TargetCoverAction )
		*TargetCoverAction = GetCoverAction_Parms.TargetCoverAction;

	return GetCoverAction_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.IsPeeking
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::IsPeeking ( )
{
	static UFunction* pFnIsPeeking = NULL;

	if ( ! pFnIsPeeking )
		pFnIsPeeking = (UFunction*) UObject::GObjObjects()->Data[ 30380 ];

	ABioAiController_execIsPeeking_Parms IsPeeking_Parms;

	this->ProcessEvent ( pFnIsPeeking, &IsPeeking_Parms, NULL );

	return IsPeeking_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.IsLeaning
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::IsLeaning ( )
{
	static UFunction* pFnIsLeaning = NULL;

	if ( ! pFnIsLeaning )
		pFnIsLeaning = (UFunction*) UObject::GObjObjects()->Data[ 30376 ];

	ABioAiController_execIsLeaning_Parms IsLeaning_Parms;

	this->ProcessEvent ( pFnIsLeaning, &IsLeaning_Parms, NULL );

	return IsLeaning_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.SetCoverType
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::SetCoverType ( )
{
	static UFunction* pFnSetCoverType = NULL;

	if ( ! pFnSetCoverType )
		pFnSetCoverType = (UFunction*) UObject::GObjObjects()->Data[ 30370 ];

	ABioAiController_execSetCoverType_Parms SetCoverType_Parms;

	this->ProcessEvent ( pFnSetCoverType, &SetCoverType_Parms, NULL );

	return SetCoverType_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.UnClaimCover
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ABioAiController::UnClaimCover ( )
{
	static UFunction* pFnUnClaimCover = NULL;

	if ( ! pFnUnClaimCover )
		pFnUnClaimCover = (UFunction*) UObject::GObjObjects()->Data[ 30369 ];

	ABioAiController_execUnClaimCover_Parms UnClaimCover_Parms;

	this->ProcessEvent ( pFnUnClaimCover, &UnClaimCover_Parms, NULL );
};

// Function SFXGame.BioAiController.ClaimCover
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCoverInfo              NewCover                       ( CPF_Parm )

bool ABioAiController::ClaimCover ( struct FCoverInfo NewCover )
{
	static UFunction* pFnClaimCover = NULL;

	if ( ! pFnClaimCover )
		pFnClaimCover = (UFunction*) UObject::GObjObjects()->Data[ 30365 ];

	ABioAiController_execClaimCover_Parms ClaimCover_Parms;
	memcpy ( &ClaimCover_Parms.NewCover, &NewCover, 0x8 );

	this->ProcessEvent ( pFnClaimCover, &ClaimCover_Parms, NULL );

	return ClaimCover_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.IsAtCover
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::eventIsAtCover ( )
{
	static UFunction* pFnIsAtCover = NULL;

	if ( ! pFnIsAtCover )
		pFnIsAtCover = (UFunction*) UObject::GObjObjects()->Data[ 30363 ];

	ABioAiController_eventIsAtCover_Parms IsAtCover_Parms;

	this->ProcessEvent ( pFnIsAtCover, &IsAtCover_Parms, NULL );

	return IsAtCover_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.HasValidCover
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::HasValidCover ( )
{
	static UFunction* pFnHasValidCover = NULL;

	if ( ! pFnHasValidCover )
		pFnHasValidCover = (UFunction*) UObject::GObjObjects()->Data[ 30361 ];

	ABioAiController_execHasValidCover_Parms HasValidCover_Parms;

	pFnHasValidCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasValidCover, &HasValidCover_Parms, NULL );

	pFnHasValidCover->FunctionFlags |= 0x400;

	return HasValidCover_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.UnPossess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioAiController::eventUnPossess ( )
{
	static UFunction* pFnUnPossess = NULL;

	if ( ! pFnUnPossess )
		pFnUnPossess = (UFunction*) UObject::GObjObjects()->Data[ 30360 ];

	ABioAiController_eventUnPossess_Parms UnPossess_Parms;

	this->ProcessEvent ( pFnUnPossess, &UnPossess_Parms, NULL );
};

// Function SFXGame.BioAiController.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   NewPawn                        ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ABioAiController::eventPossess ( class APawn* NewPawn, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = (UFunction*) UObject::GObjObjects()->Data[ 30357 ];

	ABioAiController_eventPossess_Parms Possess_Parms;
	Possess_Parms.NewPawn = NewPawn;
	Possess_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function SFXGame.BioAiController.FindNearestOpenLocation
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vStartLocation                 ( CPF_Parm )
// class APawn*                   oTarget                        ( CPF_OptionalParm | CPF_Parm )
// int                            nMaxShellsToCheck              ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 vFoundLocation                 ( CPF_Parm | CPF_OutParm )

bool ABioAiController::FindNearestOpenLocation ( struct FVector vStartLocation, class APawn* oTarget, int nMaxShellsToCheck, struct FVector* vFoundLocation )
{
	static UFunction* pFnFindNearestOpenLocation = NULL;

	if ( ! pFnFindNearestOpenLocation )
		pFnFindNearestOpenLocation = (UFunction*) UObject::GObjObjects()->Data[ 30351 ];

	ABioAiController_execFindNearestOpenLocation_Parms FindNearestOpenLocation_Parms;
	memcpy ( &FindNearestOpenLocation_Parms.vStartLocation, &vStartLocation, 0xC );
	FindNearestOpenLocation_Parms.oTarget = oTarget;
	FindNearestOpenLocation_Parms.nMaxShellsToCheck = nMaxShellsToCheck;

	pFnFindNearestOpenLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindNearestOpenLocation, &FindNearestOpenLocation_Parms, NULL );

	pFnFindNearestOpenLocation->FunctionFlags |= 0x400;

	if ( vFoundLocation )
		memcpy ( vFoundLocation, &FindNearestOpenLocation_Parms.vFoundLocation, 0xC );

	return FindNearestOpenLocation_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.PushOntoRouteCache
// [0x00020002] 
// Parameters infos:
// class ANavigationPoint*        Marker                         ( CPF_Parm )

void ABioAiController::PushOntoRouteCache ( class ANavigationPoint* Marker )
{
	static UFunction* pFnPushOntoRouteCache = NULL;

	if ( ! pFnPushOntoRouteCache )
		pFnPushOntoRouteCache = (UFunction*) UObject::GObjObjects()->Data[ 30347 ];

	ABioAiController_execPushOntoRouteCache_Parms PushOntoRouteCache_Parms;
	PushOntoRouteCache_Parms.Marker = Marker;

	this->ProcessEvent ( pFnPushOntoRouteCache, &PushOntoRouteCache_Parms, NULL );
};

// Function SFXGame.BioAiController.GetLastObjectInRouteCache
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oMoveTarget                    ( CPF_Parm )

class AActor* ABioAiController::GetLastObjectInRouteCache ( class AActor* oMoveTarget )
{
	static UFunction* pFnGetLastObjectInRouteCache = NULL;

	if ( ! pFnGetLastObjectInRouteCache )
		pFnGetLastObjectInRouteCache = (UFunction*) UObject::GObjObjects()->Data[ 30344 ];

	ABioAiController_execGetLastObjectInRouteCache_Parms GetLastObjectInRouteCache_Parms;
	GetLastObjectInRouteCache_Parms.oMoveTarget = oMoveTarget;

	this->ProcessEvent ( pFnGetLastObjectInRouteCache, &GetLastObjectInRouteCache_Parms, NULL );

	return GetLastObjectInRouteCache_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.DecrementRouteCache
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ABioAiController::DecrementRouteCache ( )
{
	static UFunction* pFnDecrementRouteCache = NULL;

	if ( ! pFnDecrementRouteCache )
		pFnDecrementRouteCache = (UFunction*) UObject::GObjObjects()->Data[ 30339 ];

	ABioAiController_execDecrementRouteCache_Parms DecrementRouteCache_Parms;

	this->ProcessEvent ( pFnDecrementRouteCache, &DecrementRouteCache_Parms, NULL );

	return DecrementRouteCache_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.RouteCacheSize
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ABioAiController::RouteCacheSize ( )
{
	static UFunction* pFnRouteCacheSize = NULL;

	if ( ! pFnRouteCacheSize )
		pFnRouteCacheSize = (UFunction*) UObject::GObjObjects()->Data[ 30337 ];

	ABioAiController_execRouteCacheSize_Parms RouteCacheSize_Parms;

	this->ProcessEvent ( pFnRouteCacheSize, &RouteCacheSize_Parms, NULL );

	return RouteCacheSize_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.ClearRouteCache
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ABioAiController::ClearRouteCache ( )
{
	static UFunction* pFnClearRouteCache = NULL;

	if ( ! pFnClearRouteCache )
		pFnClearRouteCache = (UFunction*) UObject::GObjObjects()->Data[ 30336 ];

	ABioAiController_execClearRouteCache_Parms ClearRouteCache_Parms;

	this->ProcessEvent ( pFnClearRouteCache, &ClearRouteCache_Parms, NULL );
};

// Function SFXGame.BioAiController.RestoreAI
// [0x00020002] 
// Parameters infos:

void ABioAiController::RestoreAI ( )
{
	static UFunction* pFnRestoreAI = NULL;

	if ( ! pFnRestoreAI )
		pFnRestoreAI = (UFunction*) UObject::GObjObjects()->Data[ 30335 ];

	ABioAiController_execRestoreAI_Parms RestoreAI_Parms;

	this->ProcessEvent ( pFnRestoreAI, &RestoreAI_Parms, NULL );
};

// Function SFXGame.BioAiController.ChangeAI
// [0x00020002] 
// Parameters infos:
// class UClass*                  NewAIClass                     ( CPF_Parm )
// unsigned long                  bCacheOldController            ( CPF_OptionalParm | CPF_Parm )

void ABioAiController::ChangeAI ( class UClass* NewAIClass, unsigned long bCacheOldController )
{
	static UFunction* pFnChangeAI = NULL;

	if ( ! pFnChangeAI )
		pFnChangeAI = (UFunction*) UObject::GObjObjects()->Data[ 30331 ];

	ABioAiController_execChangeAI_Parms ChangeAI_Parms;
	ChangeAI_Parms.NewAIClass = NewAIClass;
	ChangeAI_Parms.bCacheOldController = bCacheOldController;

	this->ProcessEvent ( pFnChangeAI, &ChangeAI_Parms, NULL );
};

// Function SFXGame.BioAiController.DrawDebug
// [0x00020002] 
// Parameters infos:
// class ABioHUD*                 HUD                            ( CPF_Parm )

void ABioAiController::DrawDebug ( class ABioHUD* HUD )
{
	static UFunction* pFnDrawDebug = NULL;

	if ( ! pFnDrawDebug )
		pFnDrawDebug = (UFunction*) UObject::GObjObjects()->Data[ 30322 ];

	ABioAiController_execDrawDebug_Parms DrawDebug_Parms;
	DrawDebug_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDrawDebug, &DrawDebug_Parms, NULL );
};

// Function SFXGame.BioAiController.AILog_Internal
// [0x00020801] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 LogText                        ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// struct FName                   LogCategory                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

void ABioAiController::eventAILog_Internal ( struct FString LogText, struct FName LogCategory, unsigned long bForce )
{
	static UFunction* pFnAILog_Internal = NULL;

	if ( ! pFnAILog_Internal )
		pFnAILog_Internal = (UFunction*) UObject::GObjObjects()->Data[ 30318 ];

	ABioAiController_eventAILog_Internal_Parms AILog_Internal_Parms;
	memcpy ( &AILog_Internal_Parms.LogText, &LogText, 0xC );
	memcpy ( &AILog_Internal_Parms.LogCategory, &LogCategory, 0x8 );
	AILog_Internal_Parms.bForce = bForce;

	this->ProcessEvent ( pFnAILog_Internal, &AILog_Internal_Parms, NULL );
};

// Function SFXGame.BioAiController.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ABioAiController::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 30316 ];

	ABioAiController_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.BioAiController.PlayerActivate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target_                        ( CPF_Parm )

bool ABioAiController::eventPlayerActivate ( class AActor* Target_ )
{
	static UFunction* pFnPlayerActivate = NULL;

	if ( ! pFnPlayerActivate )
		pFnPlayerActivate = (UFunction*) UObject::GObjObjects()->Data[ 30310 ];

	ABioAiController_eventPlayerActivate_Parms PlayerActivate_Parms;
	PlayerActivate_Parms.Target_ = Target_;

	this->ProcessEvent ( pFnPlayerActivate, &PlayerActivate_Parms, NULL );

	return PlayerActivate_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.LookAtPawn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   oLookTarget                    ( CPF_Parm )
// int                            nRank                          ( CPF_Parm )

void ABioAiController::eventLookAtPawn ( class APawn* oLookTarget, int nRank )
{
	static UFunction* pFnLookAtPawn = NULL;

	if ( ! pFnLookAtPawn )
		pFnLookAtPawn = (UFunction*) UObject::GObjObjects()->Data[ 30306 ];

	ABioAiController_eventLookAtPawn_Parms LookAtPawn_Parms;
	LookAtPawn_Parms.oLookTarget = oLookTarget;
	LookAtPawn_Parms.nRank = nRank;

	this->ProcessEvent ( pFnLookAtPawn, &LookAtPawn_Parms, NULL );
};

// Function SFXGame.BioAiController.OnLeavingStasis
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioAiController::eventOnLeavingStasis ( )
{
	static UFunction* pFnOnLeavingStasis = NULL;

	if ( ! pFnOnLeavingStasis )
		pFnOnLeavingStasis = (UFunction*) UObject::GObjObjects()->Data[ 30301 ];

	ABioAiController_eventOnLeavingStasis_Parms OnLeavingStasis_Parms;

	this->ProcessEvent ( pFnOnLeavingStasis, &OnLeavingStasis_Parms, NULL );
};

// Function SFXGame.BioAiController.OnEnteringStasis
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioAiController::eventOnEnteringStasis ( )
{
	static UFunction* pFnOnEnteringStasis = NULL;

	if ( ! pFnOnEnteringStasis )
		pFnOnEnteringStasis = (UFunction*) UObject::GObjObjects()->Data[ 30296 ];

	ABioAiController_eventOnEnteringStasis_Parms OnEnteringStasis_Parms;

	this->ProcessEvent ( pFnOnEnteringStasis, &OnEnteringStasis_Parms, NULL );
};

// Function SFXGame.BioAiController.OnStreamingLevelLeavingStasis
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioAiController::OnStreamingLevelLeavingStasis ( )
{
	static UFunction* pFnOnStreamingLevelLeavingStasis = NULL;

	if ( ! pFnOnStreamingLevelLeavingStasis )
		pFnOnStreamingLevelLeavingStasis = (UFunction*) UObject::GObjObjects()->Data[ 30295 ];

	ABioAiController_execOnStreamingLevelLeavingStasis_Parms OnStreamingLevelLeavingStasis_Parms;

	pFnOnStreamingLevelLeavingStasis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnStreamingLevelLeavingStasis, &OnStreamingLevelLeavingStasis_Parms, NULL );

	pFnOnStreamingLevelLeavingStasis->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAiController.OnStreamingLevelEnteringStasis
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioAiController::OnStreamingLevelEnteringStasis ( )
{
	static UFunction* pFnOnStreamingLevelEnteringStasis = NULL;

	if ( ! pFnOnStreamingLevelEnteringStasis )
		pFnOnStreamingLevelEnteringStasis = (UFunction*) UObject::GObjObjects()->Data[ 30294 ];

	ABioAiController_execOnStreamingLevelEnteringStasis_Parms OnStreamingLevelEnteringStasis_Parms;

	pFnOnStreamingLevelEnteringStasis->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnStreamingLevelEnteringStasis, &OnStreamingLevelEnteringStasis_Parms, NULL );

	pFnOnStreamingLevelEnteringStasis->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAiController.GetPawnBehavior
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioEpicPawnBehavior*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oPawn                          ( CPF_Parm )

class UBioEpicPawnBehavior* ABioAiController::GetPawnBehavior ( class APawn* oPawn )
{
	static UFunction* pFnGetPawnBehavior = NULL;

	if ( ! pFnGetPawnBehavior )
		pFnGetPawnBehavior = (UFunction*) UObject::GObjObjects()->Data[ 30291 ];

	ABioAiController_execGetPawnBehavior_Parms GetPawnBehavior_Parms;
	GetPawnBehavior_Parms.oPawn = oPawn;

	pFnGetPawnBehavior->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPawnBehavior, &GetPawnBehavior_Parms, NULL );

	pFnGetPawnBehavior->FunctionFlags |= 0x400;

	return GetPawnBehavior_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.BioSetAdjustLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 vAdjustLoc                     ( CPF_Parm )

void ABioAiController::BioSetAdjustLocation ( struct FVector vAdjustLoc )
{
	static UFunction* pFnBioSetAdjustLocation = NULL;

	if ( ! pFnBioSetAdjustLocation )
		pFnBioSetAdjustLocation = (UFunction*) UObject::GObjObjects()->Data[ 30289 ];

	ABioAiController_execBioSetAdjustLocation_Parms BioSetAdjustLocation_Parms;
	memcpy ( &BioSetAdjustLocation_Parms.vAdjustLoc, &vAdjustLoc, 0xC );

	pFnBioSetAdjustLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioSetAdjustLocation, &BioSetAdjustLocation_Parms, NULL );

	pFnBioSetAdjustLocation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAiController.MobTarget
// [0x00020409] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// float                          fMoveTolerance                 ( CPF_Parm )

void ABioAiController::MobTarget ( class AActor* oTarget, float fMoveTolerance )
{
	static UFunction* pFnMobTarget = NULL;

	if ( ! pFnMobTarget )
		pFnMobTarget = (UFunction*) UObject::GObjObjects()->Data[ 30286 ];

	ABioAiController_execMobTarget_Parms MobTarget_Parms;
	MobTarget_Parms.oTarget = oTarget;
	MobTarget_Parms.fMoveTolerance = fMoveTolerance;

	pFnMobTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMobTarget, &MobTarget_Parms, NULL );

	pFnMobTarget->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAiController.AdjustSteeringMoveSpeed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vSteering                      ( CPF_Parm )

bool ABioAiController::AdjustSteeringMoveSpeed ( struct FVector vSteering )
{
	static UFunction* pFnAdjustSteeringMoveSpeed = NULL;

	if ( ! pFnAdjustSteeringMoveSpeed )
		pFnAdjustSteeringMoveSpeed = (UFunction*) UObject::GObjObjects()->Data[ 30283 ];

	ABioAiController_execAdjustSteeringMoveSpeed_Parms AdjustSteeringMoveSpeed_Parms;
	memcpy ( &AdjustSteeringMoveSpeed_Parms.vSteering, &vSteering, 0xC );

	pFnAdjustSteeringMoveSpeed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustSteeringMoveSpeed, &AdjustSteeringMoveSpeed_Parms, NULL );

	pFnAdjustSteeringMoveSpeed->FunctionFlags |= 0x400;

	return AdjustSteeringMoveSpeed_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.GetSteeringVector
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vSteering                      ( CPF_Parm | CPF_OutParm )

bool ABioAiController::GetSteeringVector ( struct FVector* vSteering )
{
	static UFunction* pFnGetSteeringVector = NULL;

	if ( ! pFnGetSteeringVector )
		pFnGetSteeringVector = (UFunction*) UObject::GObjObjects()->Data[ 30280 ];

	ABioAiController_execGetSteeringVector_Parms GetSteeringVector_Parms;

	pFnGetSteeringVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSteeringVector, &GetSteeringVector_Parms, NULL );

	pFnGetSteeringVector->FunctionFlags |= 0x400;

	if ( vSteering )
		memcpy ( vSteering, &GetSteeringVector_Parms.vSteering, 0xC );

	return GetSteeringVector_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.SteeringMovement
// [0x00020409] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ABioAiController::SteeringMovement ( )
{
	static UFunction* pFnSteeringMovement = NULL;

	if ( ! pFnSteeringMovement )
		pFnSteeringMovement = (UFunction*) UObject::GObjObjects()->Data[ 30279 ];

	ABioAiController_execSteeringMovement_Parms SteeringMovement_Parms;

	pFnSteeringMovement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSteeringMovement, &SteeringMovement_Parms, NULL );

	pFnSteeringMovement->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAiController.GetTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* ABioAiController::GetTarget ( )
{
	static UFunction* pFnGetTarget = NULL;

	if ( ! pFnGetTarget )
		pFnGetTarget = (UFunction*) UObject::GObjObjects()->Data[ 30277 ];

	ABioAiController_execGetTarget_Parms GetTarget_Parms;

	pFnGetTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTarget, &GetTarget_Parms, NULL );

	pFnGetTarget->FunctionFlags |= 0x400;

	return GetTarget_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.ExploreMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDelaySeconds                  ( CPF_OptionalParm | CPF_Parm )

bool ABioAiController::ExploreMode ( float fDelaySeconds )
{
	static UFunction* pFnExploreMode = NULL;

	if ( ! pFnExploreMode )
		pFnExploreMode = (UFunction*) UObject::GObjObjects()->Data[ 30274 ];

	ABioAiController_execExploreMode_Parms ExploreMode_Parms;
	ExploreMode_Parms.fDelaySeconds = fDelaySeconds;

	pFnExploreMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExploreMode, &ExploreMode_Parms, NULL );

	pFnExploreMode->FunctionFlags |= 0x400;

	return ExploreMode_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.ReadyMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDelaySeconds                  ( CPF_OptionalParm | CPF_Parm )

bool ABioAiController::ReadyMode ( float fDelaySeconds )
{
	static UFunction* pFnReadyMode = NULL;

	if ( ! pFnReadyMode )
		pFnReadyMode = (UFunction*) UObject::GObjObjects()->Data[ 30271 ];

	ABioAiController_execReadyMode_Parms ReadyMode_Parms;
	ReadyMode_Parms.fDelaySeconds = fDelaySeconds;

	pFnReadyMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReadyMode, &ReadyMode_Parms, NULL );

	pFnReadyMode->FunctionFlags |= 0x400;

	return ReadyMode_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.InvalidateCover
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioAiController::eventInvalidateCover ( )
{
	static UFunction* pFnInvalidateCover = NULL;

	if ( ! pFnInvalidateCover )
		pFnInvalidateCover = (UFunction*) UObject::GObjObjects()->Data[ 30269 ];

	ABioAiController_eventInvalidateCover_Parms InvalidateCover_Parms;

	this->ProcessEvent ( pFnInvalidateCover, &InvalidateCover_Parms, NULL );
};

// Function SFXGame.BioAiController.IsValidCover
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCoverInfo              TestCover                      ( CPF_Const | CPF_Parm )

bool ABioAiController::IsValidCover ( struct FCoverInfo TestCover )
{
	static UFunction* pFnIsValidCover = NULL;

	if ( ! pFnIsValidCover )
		pFnIsValidCover = (UFunction*) UObject::GObjObjects()->Data[ 30266 ];

	ABioAiController_execIsValidCover_Parms IsValidCover_Parms;
	memcpy ( &IsValidCover_Parms.TestCover, &TestCover, 0x8 );

	pFnIsValidCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidCover, &IsValidCover_Parms, NULL );

	pFnIsValidCover->FunctionFlags |= 0x400;

	return IsValidCover_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.GetPawnCover
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ChkPawn                        ( CPF_Parm )
// struct FCoverInfo              out_Cover                      ( CPF_Parm | CPF_OutParm )

bool ABioAiController::GetPawnCover ( class APawn* ChkPawn, struct FCoverInfo* out_Cover )
{
	static UFunction* pFnGetPawnCover = NULL;

	if ( ! pFnGetPawnCover )
		pFnGetPawnCover = (UFunction*) UObject::GObjObjects()->Data[ 30262 ];

	ABioAiController_execGetPawnCover_Parms GetPawnCover_Parms;
	GetPawnCover_Parms.ChkPawn = ChkPawn;

	pFnGetPawnCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPawnCover, &GetPawnCover_Parms, NULL );

	pFnGetPawnCover->FunctionFlags |= 0x400;

	if ( out_Cover )
		memcpy ( out_Cover, &GetPawnCover_Parms.out_Cover, 0x8 );

	return GetPawnCover_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.GetCover
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   ChkPawn                        ( CPF_Parm )
// struct FCoverInfo              out_Cover                      ( CPF_Parm | CPF_OutParm )

bool ABioAiController::GetCover ( class APawn* ChkPawn, struct FCoverInfo* out_Cover )
{
	static UFunction* pFnGetCover = NULL;

	if ( ! pFnGetCover )
		pFnGetCover = (UFunction*) UObject::GObjObjects()->Data[ 30258 ];

	ABioAiController_execGetCover_Parms GetCover_Parms;
	GetCover_Parms.ChkPawn = ChkPawn;

	pFnGetCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCover, &GetCover_Parms, NULL );

	pFnGetCover->FunctionFlags |= 0x400;

	if ( out_Cover )
		memcpy ( out_Cover, &GetCover_Parms.out_Cover, 0x8 );

	return GetCover_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.IsCoverExposedToAnEnemy
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCoverInfo              TestCover                      ( CPF_Parm )
// class APawn*                   TestEnemy                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bActualLocation                ( CPF_OptionalParm | CPF_Parm )
// float                          out_ExposedScale               ( CPF_Parm | CPF_OutParm )

bool ABioAiController::IsCoverExposedToAnEnemy ( struct FCoverInfo TestCover, class APawn* TestEnemy, unsigned long bActualLocation, float* out_ExposedScale )
{
	static UFunction* pFnIsCoverExposedToAnEnemy = NULL;

	if ( ! pFnIsCoverExposedToAnEnemy )
		pFnIsCoverExposedToAnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 30252 ];

	ABioAiController_execIsCoverExposedToAnEnemy_Parms IsCoverExposedToAnEnemy_Parms;
	memcpy ( &IsCoverExposedToAnEnemy_Parms.TestCover, &TestCover, 0x8 );
	IsCoverExposedToAnEnemy_Parms.TestEnemy = TestEnemy;
	IsCoverExposedToAnEnemy_Parms.bActualLocation = bActualLocation;

	pFnIsCoverExposedToAnEnemy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCoverExposedToAnEnemy, &IsCoverExposedToAnEnemy_Parms, NULL );

	pFnIsCoverExposedToAnEnemy->FunctionFlags |= 0x400;

	if ( out_ExposedScale )
		*out_ExposedScale = IsCoverExposedToAnEnemy_Parms.out_ExposedScale;

	return IsCoverExposedToAnEnemy_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.DirectWalkCheck
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  pTarget                        ( CPF_Parm )
// struct FVector                 vTarget                        ( CPF_Const | CPF_Parm | CPF_OutParm )

bool ABioAiController::DirectWalkCheck ( class AActor* pTarget, struct FVector* vTarget )
{
	static UFunction* pFnDirectWalkCheck = NULL;

	if ( ! pFnDirectWalkCheck )
		pFnDirectWalkCheck = (UFunction*) UObject::GObjObjects()->Data[ 30248 ];

	ABioAiController_execDirectWalkCheck_Parms DirectWalkCheck_Parms;
	DirectWalkCheck_Parms.pTarget = pTarget;

	pFnDirectWalkCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDirectWalkCheck, &DirectWalkCheck_Parms, NULL );

	pFnDirectWalkCheck->FunctionFlags |= 0x400;

	if ( vTarget )
		memcpy ( vTarget, &DirectWalkCheck_Parms.vTarget, 0xC );

	return DirectWalkCheck_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.PrecisionMoveTo
// [0x00020409] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 vLoc                           ( CPF_Parm )
// struct FRotator                rRot                           ( CPF_Parm )

void ABioAiController::PrecisionMoveTo ( struct FVector vLoc, struct FRotator rRot )
{
	static UFunction* pFnPrecisionMoveTo = NULL;

	if ( ! pFnPrecisionMoveTo )
		pFnPrecisionMoveTo = (UFunction*) UObject::GObjObjects()->Data[ 30245 ];

	ABioAiController_execPrecisionMoveTo_Parms PrecisionMoveTo_Parms;
	memcpy ( &PrecisionMoveTo_Parms.vLoc, &vLoc, 0xC );
	memcpy ( &PrecisionMoveTo_Parms.rRot, &rRot, 0xC );

	pFnPrecisionMoveTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrecisionMoveTo, &PrecisionMoveTo_Parms, NULL );

	pFnPrecisionMoveTo->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAiController.WaitForActionToComplete
// [0x00020409] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioSeqData*             oSeqData                       ( CPF_Parm )

bool ABioAiController::WaitForActionToComplete ( class UBioSeqData* oSeqData )
{
	static UFunction* pFnWaitForActionToComplete = NULL;

	if ( ! pFnWaitForActionToComplete )
		pFnWaitForActionToComplete = (UFunction*) UObject::GObjObjects()->Data[ 30242 ];

	ABioAiController_execWaitForActionToComplete_Parms WaitForActionToComplete_Parms;
	WaitForActionToComplete_Parms.oSeqData = oSeqData;

	pFnWaitForActionToComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWaitForActionToComplete, &WaitForActionToComplete_Parms, NULL );

	pFnWaitForActionToComplete->FunctionFlags |= 0x400;

	return WaitForActionToComplete_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.IsSwitchingWeapons
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::IsSwitchingWeapons ( )
{
	static UFunction* pFnIsSwitchingWeapons = NULL;

	if ( ! pFnIsSwitchingWeapons )
		pFnIsSwitchingWeapons = (UFunction*) UObject::GObjObjects()->Data[ 30216 ];

	ABioAiController_execIsSwitchingWeapons_Parms IsSwitchingWeapons_Parms;

	this->ProcessEvent ( pFnIsSwitchingWeapons, &IsSwitchingWeapons_Parms, NULL );

	return IsSwitchingWeapons_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.ShouldAutoReload
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = (UFunction*) UObject::GObjObjects()->Data[ 30237 ];

	ABioAiController_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );

	return ShouldAutoReload_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.IsReloading
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::IsReloading ( )
{
	static UFunction* pFnIsReloading = NULL;

	if ( ! pFnIsReloading )
		pFnIsReloading = (UFunction*) UObject::GObjObjects()->Data[ 30215 ];

	ABioAiController_execIsReloading_Parms IsReloading_Parms;

	this->ProcessEvent ( pFnIsReloading, &IsReloading_Parms, NULL );

	return IsReloading_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.NotifyWeaponFinishedFiring
// [0x00020002] 
// Parameters infos:
// class AWeapon*                 W                              ( CPF_Parm )
// unsigned char                  FireMode                       ( CPF_Parm )

void ABioAiController::NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFinishedFiring = NULL;

	if ( ! pFnNotifyWeaponFinishedFiring )
		pFnNotifyWeaponFinishedFiring = (UFunction*) UObject::GObjObjects()->Data[ 30229 ];

	ABioAiController_execNotifyWeaponFinishedFiring_Parms NotifyWeaponFinishedFiring_Parms;
	NotifyWeaponFinishedFiring_Parms.W = W;
	NotifyWeaponFinishedFiring_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFinishedFiring, &NotifyWeaponFinishedFiring_Parms, NULL );
};

// Function SFXGame.BioAiController.NotifyWeaponFired
// [0x00020002] 
// Parameters infos:
// class AWeapon*                 W                              ( CPF_Parm )
// unsigned char                  FireMode                       ( CPF_Parm )

void ABioAiController::NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode )
{
	static UFunction* pFnNotifyWeaponFired = NULL;

	if ( ! pFnNotifyWeaponFired )
		pFnNotifyWeaponFired = (UFunction*) UObject::GObjObjects()->Data[ 30226 ];

	ABioAiController_execNotifyWeaponFired_Parms NotifyWeaponFired_Parms;
	NotifyWeaponFired_Parms.W = W;
	NotifyWeaponFired_Parms.FireMode = FireMode;

	this->ProcessEvent ( pFnNotifyWeaponFired, &NotifyWeaponFired_Parms, NULL );
};

// Function SFXGame.BioAiController.ShouldStopFiring
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::ShouldStopFiring ( )
{
	static UFunction* pFnShouldStopFiring = NULL;

	if ( ! pFnShouldStopFiring )
		pFnShouldStopFiring = (UFunction*) UObject::GObjObjects()->Data[ 30224 ];

	ABioAiController_execShouldStopFiring_Parms ShouldStopFiring_Parms;

	this->ProcessEvent ( pFnShouldStopFiring, &ShouldStopFiring_Parms, NULL );

	return ShouldStopFiring_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.ShouldRefire
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = (UFunction*) UObject::GObjObjects()->Data[ 30222 ];

	ABioAiController_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.StopFiring
// [0x00020002] 
// Parameters infos:

void ABioAiController::StopFiring ( )
{
	static UFunction* pFnStopFiring = NULL;

	if ( ! pFnStopFiring )
		pFnStopFiring = (UFunction*) UObject::GObjObjects()->Data[ 30221 ];

	ABioAiController_execStopFiring_Parms StopFiring_Parms;

	this->ProcessEvent ( pFnStopFiring, &StopFiring_Parms, NULL );
};

// Function SFXGame.BioAiController.StartFiring
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioAiController::eventStartFiring ( )
{
	static UFunction* pFnStartFiring = NULL;

	if ( ! pFnStartFiring )
		pFnStartFiring = (UFunction*) UObject::GObjObjects()->Data[ 30220 ];

	ABioAiController_eventStartFiring_Parms StartFiring_Parms;

	this->ProcessEvent ( pFnStartFiring, &StartFiring_Parms, NULL );
};

// Function SFXGame.BioAiController.NotifyFireLineBlocked
// [0x00020000] 
// Parameters infos:

void ABioAiController::NotifyFireLineBlocked ( )
{
	static UFunction* pFnNotifyFireLineBlocked = NULL;

	if ( ! pFnNotifyFireLineBlocked )
		pFnNotifyFireLineBlocked = (UFunction*) UObject::GObjObjects()->Data[ 30219 ];

	ABioAiController_execNotifyFireLineBlocked_Parms NotifyFireLineBlocked_Parms;

	this->ProcessEvent ( pFnNotifyFireLineBlocked, &NotifyFireLineBlocked_Parms, NULL );
};

// Function SFXGame.BioAiController.RefireWeapon
// [0x00020002] 
// Parameters infos:

void ABioAiController::RefireWeapon ( )
{
	static UFunction* pFnRefireWeapon = NULL;

	if ( ! pFnRefireWeapon )
		pFnRefireWeapon = (UFunction*) UObject::GObjObjects()->Data[ 30218 ];

	ABioAiController_execRefireWeapon_Parms RefireWeapon_Parms;

	this->ProcessEvent ( pFnRefireWeapon, &RefireWeapon_Parms, NULL );
};

// Function SFXGame.BioAiController.PollRefireWeapon
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ABioAiController::PollRefireWeapon ( )
{
	static UFunction* pFnPollRefireWeapon = NULL;

	if ( ! pFnPollRefireWeapon )
		pFnPollRefireWeapon = (UFunction*) UObject::GObjObjects()->Data[ 30217 ];

	ABioAiController_execPollRefireWeapon_Parms PollRefireWeapon_Parms;

	this->ProcessEvent ( pFnPollRefireWeapon, &PollRefireWeapon_Parms, NULL );
};

// Function SFXGame.BioAiController.FireWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            NewBurstCount                  ( CPF_OptionalParm | CPF_Parm )
// float                          NewBurstDelay                  ( CPF_OptionalParm | CPF_Parm )

bool ABioAiController::FireWeapon ( int NewBurstCount, float NewBurstDelay )
{
	static UFunction* pFnFireWeapon = NULL;

	if ( ! pFnFireWeapon )
		pFnFireWeapon = (UFunction*) UObject::GObjObjects()->Data[ 30211 ];

	ABioAiController_execFireWeapon_Parms FireWeapon_Parms;
	FireWeapon_Parms.NewBurstCount = NewBurstCount;
	FireWeapon_Parms.NewBurstDelay = NewBurstDelay;

	this->ProcessEvent ( pFnFireWeapon, &FireWeapon_Parms, NULL );

	return FireWeapon_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.ModifyBurstDelay
// [0x00420000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// float                          BurstDelay                     ( CPF_Parm | CPF_OutParm )

void ABioAiController::ModifyBurstDelay ( class ASFXWeapon* Weapon, float* BurstDelay )
{
	static UFunction* pFnModifyBurstDelay = NULL;

	if ( ! pFnModifyBurstDelay )
		pFnModifyBurstDelay = (UFunction*) UObject::GObjObjects()->Data[ 30208 ];

	ABioAiController_execModifyBurstDelay_Parms ModifyBurstDelay_Parms;
	ModifyBurstDelay_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnModifyBurstDelay, &ModifyBurstDelay_Parms, NULL );

	if ( BurstDelay )
		*BurstDelay = ModifyBurstDelay_Parms.BurstDelay;
};

// Function SFXGame.BioAiController.FireWeaponBurst
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::FireWeaponBurst ( )
{
	static UFunction* pFnFireWeaponBurst = NULL;

	if ( ! pFnFireWeaponBurst )
		pFnFireWeaponBurst = (UFunction*) UObject::GObjObjects()->Data[ 30201 ];

	ABioAiController_execFireWeaponBurst_Parms FireWeaponBurst_Parms;

	this->ProcessEvent ( pFnFireWeaponBurst, &FireWeaponBurst_Parms, NULL );

	return FireWeaponBurst_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.HandleFireLineObstruction
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::HandleFireLineObstruction ( )
{
	static UFunction* pFnHandleFireLineObstruction = NULL;

	if ( ! pFnHandleFireLineObstruction )
		pFnHandleFireLineObstruction = (UFunction*) UObject::GObjObjects()->Data[ 30198 ];

	ABioAiController_execHandleFireLineObstruction_Parms HandleFireLineObstruction_Parms;

	this->ProcessEvent ( pFnHandleFireLineObstruction, &HandleFireLineObstruction_Parms, NULL );

	return HandleFireLineObstruction_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.IsFriendlyBlockingFireLine
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::IsFriendlyBlockingFireLine ( )
{
	static UFunction* pFnIsFriendlyBlockingFireLine = NULL;

	if ( ! pFnIsFriendlyBlockingFireLine )
		pFnIsFriendlyBlockingFireLine = (UFunction*) UObject::GObjObjects()->Data[ 30190 ];

	ABioAiController_execIsFriendlyBlockingFireLine_Parms IsFriendlyBlockingFireLine_Parms;

	this->ProcessEvent ( pFnIsFriendlyBlockingFireLine, &IsFriendlyBlockingFireLine_Parms, NULL );

	return IsFriendlyBlockingFireLine_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.IsFireLineObstructed
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::IsFireLineObstructed ( )
{
	static UFunction* pFnIsFireLineObstructed = NULL;

	if ( ! pFnIsFireLineObstructed )
		pFnIsFireLineObstructed = (UFunction*) UObject::GObjObjects()->Data[ 30188 ];

	ABioAiController_execIsFireLineObstructed_Parms IsFireLineObstructed_Parms;

	this->ProcessEvent ( pFnIsFireLineObstructed, &IsFireLineObstructed_Parms, NULL );

	return IsFireLineObstructed_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.GetPlayerViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 out_Location                   ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_Rotation                   ( CPF_Parm | CPF_OutParm )

void ABioAiController::eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = (UFunction*) UObject::GObjObjects()->Data[ 30184 ];

	ABioAiController_eventGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );

	if ( out_Location )
		memcpy ( out_Location, &GetPlayerViewPoint_Parms.out_Location, 0xC );

	if ( out_Rotation )
		memcpy ( out_Rotation, &GetPlayerViewPoint_Parms.out_Rotation, 0xC );
};

// Function SFXGame.BioAiController.GetAdjustedAimFor
// [0x00820002] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ABioAiController::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 30160 ];

	ABioAiController_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.UpdateAccuracy
// [0x00020002] 
// Parameters infos:

void ABioAiController::UpdateAccuracy ( )
{
	static UFunction* pFnUpdateAccuracy = NULL;

	if ( ! pFnUpdateAccuracy )
		pFnUpdateAccuracy = (UFunction*) UObject::GObjObjects()->Data[ 30158 ];

	ABioAiController_execUpdateAccuracy_Parms UpdateAccuracy_Parms;

	this->ProcessEvent ( pFnUpdateAccuracy, &UpdateAccuracy_Parms, NULL );
};

// Function SFXGame.BioAiController.ResetAimInstability
// [0x00020002] 
// Parameters infos:

void ABioAiController::ResetAimInstability ( )
{
	static UFunction* pFnResetAimInstability = NULL;

	if ( ! pFnResetAimInstability )
		pFnResetAimInstability = (UFunction*) UObject::GObjObjects()->Data[ 30157 ];

	ABioAiController_execResetAimInstability_Parms ResetAimInstability_Parms;

	this->ProcessEvent ( pFnResetAimInstability, &ResetAimInstability_Parms, NULL );
};

// Function SFXGame.BioAiController.GetAimLocation
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            EnemyIdx                       ( CPF_Parm )
// struct FVector                 StartLoc                       ( CPF_Parm )

struct FVector ABioAiController::GetAimLocation ( int EnemyIdx, struct FVector StartLoc )
{
	static UFunction* pFnGetAimLocation = NULL;

	if ( ! pFnGetAimLocation )
		pFnGetAimLocation = (UFunction*) UObject::GObjObjects()->Data[ 30152 ];

	ABioAiController_execGetAimLocation_Parms GetAimLocation_Parms;
	GetAimLocation_Parms.EnemyIdx = EnemyIdx;
	memcpy ( &GetAimLocation_Parms.StartLoc, &StartLoc, 0xC );

	this->ProcessEvent ( pFnGetAimLocation, &GetAimLocation_Parms, NULL );

	return GetAimLocation_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.CanFireAt
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ChkTarget                      ( CPF_Parm )
// struct FVector                 ViewPt                         ( CPF_Parm )
// unsigned long                  bUseEyeLocation                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUseRotation                   ( CPF_OptionalParm | CPF_Parm )

bool ABioAiController::CanFireAt ( class AActor* ChkTarget, struct FVector ViewPt, unsigned long bUseEyeLocation, unsigned long bUseRotation )
{
	static UFunction* pFnCanFireAt = NULL;

	if ( ! pFnCanFireAt )
		pFnCanFireAt = (UFunction*) UObject::GObjObjects()->Data[ 30146 ];

	ABioAiController_execCanFireAt_Parms CanFireAt_Parms;
	CanFireAt_Parms.ChkTarget = ChkTarget;
	memcpy ( &CanFireAt_Parms.ViewPt, &ViewPt, 0xC );
	CanFireAt_Parms.bUseEyeLocation = bUseEyeLocation;
	CanFireAt_Parms.bUseRotation = bUseRotation;

	pFnCanFireAt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanFireAt, &CanFireAt_Parms, NULL );

	pFnCanFireAt->FunctionFlags |= 0x400;

	return CanFireAt_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.HasValidTarget
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TestTarget                     ( CPF_OptionalParm | CPF_Parm )

bool ABioAiController::HasValidTarget ( class AActor* TestTarget )
{
	static UFunction* pFnHasValidTarget = NULL;

	if ( ! pFnHasValidTarget )
		pFnHasValidTarget = (UFunction*) UObject::GObjObjects()->Data[ 30142 ];

	ABioAiController_execHasValidTarget_Parms HasValidTarget_Parms;
	HasValidTarget_Parms.TestTarget = TestTarget;

	this->ProcessEvent ( pFnHasValidTarget, &HasValidTarget_Parms, NULL );

	return HasValidTarget_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.HasValidEnemy
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   TestEnemy                      ( CPF_OptionalParm | CPF_Parm )

bool ABioAiController::HasValidEnemy ( class APawn* TestEnemy )
{
	static UFunction* pFnHasValidEnemy = NULL;

	if ( ! pFnHasValidEnemy )
		pFnHasValidEnemy = (UFunction*) UObject::GObjObjects()->Data[ 30139 ];

	ABioAiController_execHasValidEnemy_Parms HasValidEnemy_Parms;
	HasValidEnemy_Parms.TestEnemy = TestEnemy;

	this->ProcessEvent ( pFnHasValidEnemy, &HasValidEnemy_Parms, NULL );

	return HasValidEnemy_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.HasAnyEnemies
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioAiController::HasAnyEnemies ( )
{
	static UFunction* pFnHasAnyEnemies = NULL;

	if ( ! pFnHasAnyEnemies )
		pFnHasAnyEnemies = (UFunction*) UObject::GObjObjects()->Data[ 30137 ];

	ABioAiController_execHasAnyEnemies_Parms HasAnyEnemies_Parms;

	this->ProcessEvent ( pFnHasAnyEnemies, &HasAnyEnemies_Parms, NULL );

	return HasAnyEnemies_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.GetSquadName
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName ABioAiController::GetSquadName ( )
{
	static UFunction* pFnGetSquadName = NULL;

	if ( ! pFnGetSquadName )
		pFnGetSquadName = (UFunction*) UObject::GObjObjects()->Data[ 30081 ];

	ABioAiController_execGetSquadName_Parms GetSquadName_Parms;

	this->ProcessEvent ( pFnGetSquadName, &GetSquadName_Parms, NULL );

	return GetSquadName_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.AddEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   NewEnemy                       ( CPF_Parm )
// struct FName                   BroadcastSquad                 ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bForceNotice                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipBroadcast                 ( CPF_OptionalParm | CPF_Parm )

bool ABioAiController::eventAddEnemy ( class APawn* NewEnemy, struct FName BroadcastSquad, unsigned long bForceNotice, unsigned long bSkipBroadcast )
{
	static UFunction* pFnAddEnemy = NULL;

	if ( ! pFnAddEnemy )
		pFnAddEnemy = (UFunction*) UObject::GObjObjects()->Data[ 30126 ];

	ABioAiController_eventAddEnemy_Parms AddEnemy_Parms;
	AddEnemy_Parms.NewEnemy = NewEnemy;
	memcpy ( &AddEnemy_Parms.BroadcastSquad, &BroadcastSquad, 0x8 );
	AddEnemy_Parms.bForceNotice = bForceNotice;
	AddEnemy_Parms.bSkipBroadcast = bSkipBroadcast;

	this->ProcessEvent ( pFnAddEnemy, &AddEnemy_Parms, NULL );

	return AddEnemy_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.NotifyNearMiss
// [0x00020000] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void ABioAiController::NotifyNearMiss ( struct FVector HitLocation )
{
	static UFunction* pFnNotifyNearMiss = NULL;

	if ( ! pFnNotifyNearMiss )
		pFnNotifyNearMiss = (UFunction*) UObject::GObjObjects()->Data[ 30124 ];

	ABioAiController_execNotifyNearMiss_Parms NotifyNearMiss_Parms;
	memcpy ( &NotifyNearMiss_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnNotifyNearMiss, &NotifyNearMiss_Parms, NULL );
};

// Function SFXGame.BioAiController.CheckNearMiss
// [0x00820002] 
// Parameters infos:
// class APawn*                   Shooter                        ( CPF_Parm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 WeapLoc                        ( CPF_Parm )
// struct FVector                 LineDir                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ABioAiController::CheckNearMiss ( class APawn* Shooter, class AWeapon* W, struct FVector WeapLoc, struct FVector LineDir, struct FVector HitLocation )
{
	static UFunction* pFnCheckNearMiss = NULL;

	if ( ! pFnCheckNearMiss )
		pFnCheckNearMiss = (UFunction*) UObject::GObjObjects()->Data[ 30117 ];

	ABioAiController_execCheckNearMiss_Parms CheckNearMiss_Parms;
	CheckNearMiss_Parms.Shooter = Shooter;
	CheckNearMiss_Parms.W = W;
	memcpy ( &CheckNearMiss_Parms.WeapLoc, &WeapLoc, 0xC );
	memcpy ( &CheckNearMiss_Parms.LineDir, &LineDir, 0xC );
	memcpy ( &CheckNearMiss_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnCheckNearMiss, &CheckNearMiss_Parms, NULL );
};

// Function SFXGame.BioAiController.CanHearPawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Heard                          ( CPF_Parm )
// float                          Loudness                       ( CPF_Parm )
// struct FName                   NoiseType                      ( CPF_Parm )

bool ABioAiController::CanHearPawn ( class APawn* Heard, float Loudness, struct FName NoiseType )
{
	static UFunction* pFnCanHearPawn = NULL;

	if ( ! pFnCanHearPawn )
		pFnCanHearPawn = (UFunction*) UObject::GObjObjects()->Data[ 30109 ];

	ABioAiController_execCanHearPawn_Parms CanHearPawn_Parms;
	CanHearPawn_Parms.Heard = Heard;
	CanHearPawn_Parms.Loudness = Loudness;
	memcpy ( &CanHearPawn_Parms.NoiseType, &NoiseType, 0x8 );

	this->ProcessEvent ( pFnCanHearPawn, &CanHearPawn_Parms, NULL );

	return CanHearPawn_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.HearNoise
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Loudness                       ( CPF_Parm )
// class AActor*                  NoiseMaker                     ( CPF_Parm )
// struct FName                   NoiseType                      ( CPF_OptionalParm | CPF_Parm )

void ABioAiController::eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType )
{
	static UFunction* pFnHearNoise = NULL;

	if ( ! pFnHearNoise )
		pFnHearNoise = (UFunction*) UObject::GObjObjects()->Data[ 30104 ];

	ABioAiController_eventHearNoise_Parms HearNoise_Parms;
	HearNoise_Parms.Loudness = Loudness;
	HearNoise_Parms.NoiseMaker = NoiseMaker;
	memcpy ( &HearNoise_Parms.NoiseType, &NoiseType, 0x8 );

	this->ProcessEvent ( pFnHearNoise, &HearNoise_Parms, NULL );
};

// Function SFXGame.BioAiController.CanSeePawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Seen                           ( CPF_Parm )

bool ABioAiController::CanSeePawn ( class APawn* Seen )
{
	static UFunction* pFnCanSeePawn = NULL;

	if ( ! pFnCanSeePawn )
		pFnCanSeePawn = (UFunction*) UObject::GObjObjects()->Data[ 30101 ];

	ABioAiController_execCanSeePawn_Parms CanSeePawn_Parms;
	CanSeePawn_Parms.Seen = Seen;

	this->ProcessEvent ( pFnCanSeePawn, &CanSeePawn_Parms, NULL );

	return CanSeePawn_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.SeeMonster
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Seen                           ( CPF_Parm )

void ABioAiController::eventSeeMonster ( class APawn* Seen )
{
	static UFunction* pFnSeeMonster = NULL;

	if ( ! pFnSeeMonster )
		pFnSeeMonster = (UFunction*) UObject::GObjObjects()->Data[ 30099 ];

	ABioAiController_eventSeeMonster_Parms SeeMonster_Parms;
	SeeMonster_Parms.Seen = Seen;

	this->ProcessEvent ( pFnSeeMonster, &SeeMonster_Parms, NULL );
};

// Function SFXGame.BioAiController.SeePlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   Seen                           ( CPF_Parm )

void ABioAiController::eventSeePlayer ( class APawn* Seen )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = (UFunction*) UObject::GObjObjects()->Data[ 30097 ];

	ABioAiController_eventSeePlayer_Parms SeePlayer_Parms;
	SeePlayer_Parms.Seen = Seen;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function SFXGame.BioAiController.AddDelayedUpdate
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// int                            EnemyIdx                       ( CPF_Parm )
// unsigned char                  Type                           ( CPF_Parm )
// struct FName                   EventName                      ( CPF_Parm )
// float                          delay                          ( CPF_Parm )

void ABioAiController::AddDelayedUpdate ( int EnemyIdx, unsigned char Type, struct FName EventName, float delay )
{
	static UFunction* pFnAddDelayedUpdate = NULL;

	if ( ! pFnAddDelayedUpdate )
		pFnAddDelayedUpdate = (UFunction*) UObject::GObjObjects()->Data[ 30090 ];

	ABioAiController_execAddDelayedUpdate_Parms AddDelayedUpdate_Parms;
	AddDelayedUpdate_Parms.EnemyIdx = EnemyIdx;
	AddDelayedUpdate_Parms.Type = Type;
	memcpy ( &AddDelayedUpdate_Parms.EventName, &EventName, 0x8 );
	AddDelayedUpdate_Parms.delay = delay;

	this->ProcessEvent ( pFnAddDelayedUpdate, &AddDelayedUpdate_Parms, NULL );
};

// Function SFXGame.BioAiController.UpdateAllEnemyInfo
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ABioAiController::UpdateAllEnemyInfo ( )
{
	static UFunction* pFnUpdateAllEnemyInfo = NULL;

	if ( ! pFnUpdateAllEnemyInfo )
		pFnUpdateAllEnemyInfo = (UFunction*) UObject::GObjObjects()->Data[ 30086 ];

	ABioAiController_execUpdateAllEnemyInfo_Parms UpdateAllEnemyInfo_Parms;

	this->ProcessEvent ( pFnUpdateAllEnemyInfo, &UpdateAllEnemyInfo_Parms, NULL );
};

// Function SFXGame.BioAiController.AutoNotifyEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioAiController::eventAutoNotifyEnemy ( )
{
	static UFunction* pFnAutoNotifyEnemy = NULL;

	if ( ! pFnAutoNotifyEnemy )
		pFnAutoNotifyEnemy = (UFunction*) UObject::GObjObjects()->Data[ 30084 ];

	ABioAiController_eventAutoNotifyEnemy_Parms AutoNotifyEnemy_Parms;

	this->ProcessEvent ( pFnAutoNotifyEnemy, &AutoNotifyEnemy_Parms, NULL );
};

// Function SFXGame.BioAiController.AutoAcquireEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioAiController::eventAutoAcquireEnemy ( )
{
	static UFunction* pFnAutoAcquireEnemy = NULL;

	if ( ! pFnAutoAcquireEnemy )
		pFnAutoAcquireEnemy = (UFunction*) UObject::GObjObjects()->Data[ 30082 ];

	ABioAiController_eventAutoAcquireEnemy_Parms AutoAcquireEnemy_Parms;

	this->ProcessEvent ( pFnAutoAcquireEnemy, &AutoAcquireEnemy_Parms, NULL );
};

// Function SFXGame.BioAiController.FillEnemyList
// [0x00020002] 
// Parameters infos:

void ABioAiController::FillEnemyList ( )
{
	static UFunction* pFnFillEnemyList = NULL;

	if ( ! pFnFillEnemyList )
		pFnFillEnemyList = (UFunction*) UObject::GObjObjects()->Data[ 30077 ];

	ABioAiController_execFillEnemyList_Parms FillEnemyList_Parms;

	this->ProcessEvent ( pFnFillEnemyList, &FillEnemyList_Parms, NULL );
};

// Function SFXGame.BioAiController.IsMediumRange
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )

bool ABioAiController::IsMediumRange ( struct FVector TestLocation )
{
	static UFunction* pFnIsMediumRange = NULL;

	if ( ! pFnIsMediumRange )
		pFnIsMediumRange = (UFunction*) UObject::GObjObjects()->Data[ 30074 ];

	ABioAiController_execIsMediumRange_Parms IsMediumRange_Parms;
	memcpy ( &IsMediumRange_Parms.TestLocation, &TestLocation, 0xC );

	this->ProcessEvent ( pFnIsMediumRange, &IsMediumRange_Parms, NULL );

	return IsMediumRange_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.IsShortRange
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )

bool ABioAiController::IsShortRange ( struct FVector TestLocation )
{
	static UFunction* pFnIsShortRange = NULL;

	if ( ! pFnIsShortRange )
		pFnIsShortRange = (UFunction*) UObject::GObjObjects()->Data[ 30071 ];

	ABioAiController_execIsShortRange_Parms IsShortRange_Parms;
	memcpy ( &IsShortRange_Parms.TestLocation, &TestLocation, 0xC );

	this->ProcessEvent ( pFnIsShortRange, &IsShortRange_Parms, NULL );

	return IsShortRange_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.TimeSinceEnemyVisible
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

float ABioAiController::TimeSinceEnemyVisible ( int idx )
{
	static UFunction* pFnTimeSinceEnemyVisible = NULL;

	if ( ! pFnTimeSinceEnemyVisible )
		pFnTimeSinceEnemyVisible = (UFunction*) UObject::GObjObjects()->Data[ 30068 ];

	ABioAiController_execTimeSinceEnemyVisible_Parms TimeSinceEnemyVisible_Parms;
	TimeSinceEnemyVisible_Parms.idx = idx;

	this->ProcessEvent ( pFnTimeSinceEnemyVisible, &TimeSinceEnemyVisible_Parms, NULL );

	return TimeSinceEnemyVisible_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.InterpEnemyLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            idx                            ( CPF_Parm )

void ABioAiController::InterpEnemyLocation ( int idx )
{
	static UFunction* pFnInterpEnemyLocation = NULL;

	if ( ! pFnInterpEnemyLocation )
		pFnInterpEnemyLocation = (UFunction*) UObject::GObjObjects()->Data[ 30066 ];

	ABioAiController_execInterpEnemyLocation_Parms InterpEnemyLocation_Parms;
	InterpEnemyLocation_Parms.idx = idx;

	pFnInterpEnemyLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInterpEnemyLocation, &InterpEnemyLocation_Parms, NULL );

	pFnInterpEnemyLocation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAiController.IsEnemyVisibleByIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )

bool ABioAiController::IsEnemyVisibleByIndex ( int idx )
{
	static UFunction* pFnIsEnemyVisibleByIndex = NULL;

	if ( ! pFnIsEnemyVisibleByIndex )
		pFnIsEnemyVisibleByIndex = (UFunction*) UObject::GObjObjects()->Data[ 30063 ];

	ABioAiController_execIsEnemyVisibleByIndex_Parms IsEnemyVisibleByIndex_Parms;
	IsEnemyVisibleByIndex_Parms.idx = idx;

	pFnIsEnemyVisibleByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnemyVisibleByIndex, &IsEnemyVisibleByIndex_Parms, NULL );

	pFnIsEnemyVisibleByIndex->FunctionFlags |= 0x400;

	return IsEnemyVisibleByIndex_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.SetKnownEnemyInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            EnemyIdx                       ( CPF_Parm )
// class APawn*                   EnemyPawn                      ( CPF_Parm )
// struct FVector                 EnemyLoc                       ( CPF_Parm )

void ABioAiController::SetKnownEnemyInfo ( int EnemyIdx, class APawn* EnemyPawn, struct FVector EnemyLoc )
{
	static UFunction* pFnSetKnownEnemyInfo = NULL;

	if ( ! pFnSetKnownEnemyInfo )
		pFnSetKnownEnemyInfo = (UFunction*) UObject::GObjObjects()->Data[ 30059 ];

	ABioAiController_execSetKnownEnemyInfo_Parms SetKnownEnemyInfo_Parms;
	SetKnownEnemyInfo_Parms.EnemyIdx = EnemyIdx;
	SetKnownEnemyInfo_Parms.EnemyPawn = EnemyPawn;
	memcpy ( &SetKnownEnemyInfo_Parms.EnemyLoc, &EnemyLoc, 0xC );

	pFnSetKnownEnemyInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetKnownEnemyInfo, &SetKnownEnemyInfo_Parms, NULL );

	pFnSetKnownEnemyInfo->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAiController.GetEnemyLocationByIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )
// unsigned char                  LT                             ( CPF_OptionalParm | CPF_Parm )

struct FVector ABioAiController::GetEnemyLocationByIndex ( int idx, unsigned char LT )
{
	static UFunction* pFnGetEnemyLocationByIndex = NULL;

	if ( ! pFnGetEnemyLocationByIndex )
		pFnGetEnemyLocationByIndex = (UFunction*) UObject::GObjObjects()->Data[ 30055 ];

	ABioAiController_execGetEnemyLocationByIndex_Parms GetEnemyLocationByIndex_Parms;
	GetEnemyLocationByIndex_Parms.idx = idx;
	GetEnemyLocationByIndex_Parms.LT = LT;

	pFnGetEnemyLocationByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEnemyLocationByIndex, &GetEnemyLocationByIndex_Parms, NULL );

	pFnGetEnemyLocationByIndex->FunctionFlags |= 0x400;

	return GetEnemyLocationByIndex_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.GetEnemyLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   TestPawn                       ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  LT                             ( CPF_OptionalParm | CPF_Parm )

struct FVector ABioAiController::GetEnemyLocation ( class APawn* TestPawn, unsigned char LT )
{
	static UFunction* pFnGetEnemyLocation = NULL;

	if ( ! pFnGetEnemyLocation )
		pFnGetEnemyLocation = (UFunction*) UObject::GObjObjects()->Data[ 30051 ];

	ABioAiController_execGetEnemyLocation_Parms GetEnemyLocation_Parms;
	GetEnemyLocation_Parms.TestPawn = TestPawn;
	GetEnemyLocation_Parms.LT = LT;

	pFnGetEnemyLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEnemyLocation, &GetEnemyLocation_Parms, NULL );

	pFnGetEnemyLocation->FunctionFlags |= 0x400;

	return GetEnemyLocation_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.GetFireTargetLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  LT                             ( CPF_OptionalParm | CPF_Parm )

struct FVector ABioAiController::GetFireTargetLocation ( unsigned char LT )
{
	static UFunction* pFnGetFireTargetLocation = NULL;

	if ( ! pFnGetFireTargetLocation )
		pFnGetFireTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 30048 ];

	ABioAiController_execGetFireTargetLocation_Parms GetFireTargetLocation_Parms;
	GetFireTargetLocation_Parms.LT = LT;

	pFnGetFireTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFireTargetLocation, &GetFireTargetLocation_Parms, NULL );

	pFnGetFireTargetLocation->FunctionFlags |= 0x400;

	return GetFireTargetLocation_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.GetEnemyIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   TestPawn                       ( CPF_Parm )

int ABioAiController::GetEnemyIndex ( class APawn* TestPawn )
{
	static UFunction* pFnGetEnemyIndex = NULL;

	if ( ! pFnGetEnemyIndex )
		pFnGetEnemyIndex = (UFunction*) UObject::GObjObjects()->Data[ 30045 ];

	ABioAiController_execGetEnemyIndex_Parms GetEnemyIndex_Parms;
	GetEnemyIndex_Parms.TestPawn = TestPawn;

	pFnGetEnemyIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEnemyIndex, &GetEnemyIndex_Parms, NULL );

	pFnGetEnemyIndex->FunctionFlags |= 0x400;

	return GetEnemyIndex_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.UpdateEnemyInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            idx                            ( CPF_Parm )
// unsigned char                  Type                           ( CPF_Parm )
// struct FName                   EventName                      ( CPF_OptionalParm | CPF_Parm )

bool ABioAiController::UpdateEnemyInfo ( int idx, unsigned char Type, struct FName EventName )
{
	static UFunction* pFnUpdateEnemyInfo = NULL;

	if ( ! pFnUpdateEnemyInfo )
		pFnUpdateEnemyInfo = (UFunction*) UObject::GObjObjects()->Data[ 30040 ];

	ABioAiController_execUpdateEnemyInfo_Parms UpdateEnemyInfo_Parms;
	UpdateEnemyInfo_Parms.idx = idx;
	UpdateEnemyInfo_Parms.Type = Type;
	memcpy ( &UpdateEnemyInfo_Parms.EventName, &EventName, 0x8 );

	pFnUpdateEnemyInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateEnemyInfo, &UpdateEnemyInfo_Parms, NULL );

	pFnUpdateEnemyInfo->FunctionFlags |= 0x400;

	return UpdateEnemyInfo_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.IsFriendly
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )

bool ABioAiController::IsFriendly ( class AController* Other )
{
	static UFunction* pFnIsFriendly = NULL;

	if ( ! pFnIsFriendly )
		pFnIsFriendly = (UFunction*) UObject::GObjObjects()->Data[ 30037 ];

	ABioAiController_execIsFriendly_Parms IsFriendly_Parms;
	IsFriendly_Parms.Other = Other;

	pFnIsFriendly->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFriendly, &IsFriendly_Parms, NULL );

	pFnIsFriendly->FunctionFlags |= 0x400;

	return IsFriendly_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.IsHostile
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Other                          ( CPF_Parm )

bool ABioAiController::IsHostile ( class AController* Other )
{
	static UFunction* pFnIsHostile = NULL;

	if ( ! pFnIsHostile )
		pFnIsHostile = (UFunction*) UObject::GObjObjects()->Data[ 30034 ];

	ABioAiController_execIsHostile_Parms IsHostile_Parms;
	IsHostile_Parms.Other = Other;

	pFnIsHostile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHostile, &IsHostile_Parms, NULL );

	pFnIsHostile->FunctionFlags |= 0x400;

	return IsHostile_Parms.ReturnValue;
};

// Function SFXGame.BioAiController.MapName_Hench_Teleport
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void ABioAiController::MapName_Hench_Teleport ( float X, float Y )
{
	static UFunction* pFnMapName_Hench_Teleport = NULL;

	if ( ! pFnMapName_Hench_Teleport )
		pFnMapName_Hench_Teleport = (UFunction*) UObject::GObjObjects()->Data[ 30031 ];

	ABioAiController_execMapName_Hench_Teleport_Parms MapName_Hench_Teleport_Parms;
	MapName_Hench_Teleport_Parms.X = X;
	MapName_Hench_Teleport_Parms.Y = Y;

	pFnMapName_Hench_Teleport->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMapName_Hench_Teleport, &MapName_Hench_Teleport_Parms, NULL );

	pFnMapName_Hench_Teleport->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAiController.MapName_Hench_FailToPath
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )

void ABioAiController::MapName_Hench_FailToPath ( float X, float Y )
{
	static UFunction* pFnMapName_Hench_FailToPath = NULL;

	if ( ! pFnMapName_Hench_FailToPath )
		pFnMapName_Hench_FailToPath = (UFunction*) UObject::GObjObjects()->Data[ 30028 ];

	ABioAiController_execMapName_Hench_FailToPath_Parms MapName_Hench_FailToPath_Parms;
	MapName_Hench_FailToPath_Parms.X = X;
	MapName_Hench_FailToPath_Parms.Y = Y;

	pFnMapName_Hench_FailToPath->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMapName_Hench_FailToPath, &MapName_Hench_FailToPath_Parms, NULL );

	pFnMapName_Hench_FailToPath->FunctionFlags |= 0x400;
};

// Function SFXGame.BioAiController.BioOnPawnActionStateChanged
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioAiController::BioOnPawnActionStateChanged ( )
{
	static UFunction* pFnBioOnPawnActionStateChanged = NULL;

	if ( ! pFnBioOnPawnActionStateChanged )
		pFnBioOnPawnActionStateChanged = (UFunction*) UObject::GObjObjects()->Data[ 30027 ];

	ABioAiController_execBioOnPawnActionStateChanged_Parms BioOnPawnActionStateChanged_Parms;

	pFnBioOnPawnActionStateChanged->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioOnPawnActionStateChanged, &BioOnPawnActionStateChanged_Parms, NULL );

	pFnBioOnPawnActionStateChanged->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.IgnorePlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bIgnore                        ( CPF_Parm )

void UBioCheatManager::IgnorePlayer ( unsigned long bIgnore )
{
	static UFunction* pFnIgnorePlayer = NULL;

	if ( ! pFnIgnorePlayer )
		pFnIgnorePlayer = (UFunction*) UObject::GObjObjects()->Data[ 34464 ];

	UBioCheatManager_execIgnorePlayer_Parms IgnorePlayer_Parms;
	IgnorePlayer_Parms.bIgnore = bIgnore;

	this->ProcessEvent ( pFnIgnorePlayer, &IgnorePlayer_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ToggleThreatRadius
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 PawnName                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::ToggleThreatRadius ( struct FString PawnName )
{
	static UFunction* pFnToggleThreatRadius = NULL;

	if ( ! pFnToggleThreatRadius )
		pFnToggleThreatRadius = (UFunction*) UObject::GObjObjects()->Data[ 34460 ];

	UBioCheatManager_execToggleThreatRadius_Parms ToggleThreatRadius_Parms;
	memcpy ( &ToggleThreatRadius_Parms.PawnName, &PawnName, 0xC );

	this->ProcessEvent ( pFnToggleThreatRadius, &ToggleThreatRadius_Parms, NULL );
};

// Function SFXGame.BioCheatManager.TestSavingMessage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          fSaveTime                      ( CPF_Parm )

void UBioCheatManager::TestSavingMessage ( float fSaveTime )
{
	static UFunction* pFnTestSavingMessage = NULL;

	if ( ! pFnTestSavingMessage )
		pFnTestSavingMessage = (UFunction*) UObject::GObjObjects()->Data[ 34456 ];

	UBioCheatManager_execTestSavingMessage_Parms TestSavingMessage_Parms;
	TestSavingMessage_Parms.fSaveTime = fSaveTime;

	this->ProcessEvent ( pFnTestSavingMessage, &TestSavingMessage_Parms, NULL );
};

// Function SFXGame.BioCheatManager.TestPulseFullAmmo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::TestPulseFullAmmo ( )
{
	static UFunction* pFnTestPulseFullAmmo = NULL;

	if ( ! pFnTestPulseFullAmmo )
		pFnTestPulseFullAmmo = (UFunction*) UObject::GObjObjects()->Data[ 34454 ];

	UBioCheatManager_execTestPulseFullAmmo_Parms TestPulseFullAmmo_Parms;

	this->ProcessEvent ( pFnTestPulseFullAmmo, &TestPulseFullAmmo_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DumpSFXObjectPool
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DumpSFXObjectPool ( )
{
	static UFunction* pFnDumpSFXObjectPool = NULL;

	if ( ! pFnDumpSFXObjectPool )
		pFnDumpSFXObjectPool = (UFunction*) UObject::GObjObjects()->Data[ 34452 ];

	UBioCheatManager_execDumpSFXObjectPool_Parms DumpSFXObjectPool_Parms;

	this->ProcessEvent ( pFnDumpSFXObjectPool, &DumpSFXObjectPool_Parms, NULL );
};

// Function SFXGame.BioCheatManager.PauseNotifications
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bPause                         ( CPF_Parm )

void UBioCheatManager::PauseNotifications ( unsigned long bPause )
{
	static UFunction* pFnPauseNotifications = NULL;

	if ( ! pFnPauseNotifications )
		pFnPauseNotifications = (UFunction*) UObject::GObjObjects()->Data[ 34448 ];

	UBioCheatManager_execPauseNotifications_Parms PauseNotifications_Parms;
	PauseNotifications_Parms.bPause = bPause;

	this->ProcessEvent ( pFnPauseNotifications, &PauseNotifications_Parms, NULL );
};

// Function SFXGame.BioCheatManager.Test_Notifications
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::Test_Notifications ( )
{
	static UFunction* pFnTest_Notifications = NULL;

	if ( ! pFnTest_Notifications )
		pFnTest_Notifications = (UFunction*) UObject::GObjObjects()->Data[ 34443 ];

	UBioCheatManager_execTest_Notifications_Parms Test_Notifications_Parms;

	this->ProcessEvent ( pFnTest_Notifications, &Test_Notifications_Parms, NULL );
};

// Function SFXGame.BioCheatManager.PowersWhileVisible
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::PowersWhileVisible ( )
{
	static UFunction* pFnPowersWhileVisible = NULL;

	if ( ! pFnPowersWhileVisible )
		pFnPowersWhileVisible = (UFunction*) UObject::GObjObjects()->Data[ 34437 ];

	UBioCheatManager_execPowersWhileVisible_Parms PowersWhileVisible_Parms;

	this->ProcessEvent ( pFnPowersWhileVisible, &PowersWhileVisible_Parms, NULL );
};

// Function SFXGame.BioCheatManager.HolsterWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 nmPawn                         ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::HolsterWeapon ( struct FString nmPawn )
{
	static UFunction* pFnHolsterWeapon = NULL;

	if ( ! pFnHolsterWeapon )
		pFnHolsterWeapon = (UFunction*) UObject::GObjObjects()->Data[ 34433 ];

	UBioCheatManager_execHolsterWeapon_Parms HolsterWeapon_Parms;
	memcpy ( &HolsterWeapon_Parms.nmPawn, &nmPawn, 0xC );

	this->ProcessEvent ( pFnHolsterWeapon, &HolsterWeapon_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ResetAlwaysPlay
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ResetAlwaysPlay ( )
{
	static UFunction* pFnResetAlwaysPlay = NULL;

	if ( ! pFnResetAlwaysPlay )
		pFnResetAlwaysPlay = (UFunction*) UObject::GObjObjects()->Data[ 34432 ];

	UBioCheatManager_execResetAlwaysPlay_Parms ResetAlwaysPlay_Parms;

	this->ProcessEvent ( pFnResetAlwaysPlay, &ResetAlwaysPlay_Parms, NULL );
};

// Function SFXGame.BioCheatManager.Speak
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  EventID                        ( CPF_Parm )
// struct FString                 sInstigator                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sRecipient                     ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::Speak ( unsigned char EventID, struct FString sInstigator, struct FString sRecipient )
{
	static UFunction* pFnSpeak = NULL;

	if ( ! pFnSpeak )
		pFnSpeak = (UFunction*) UObject::GObjObjects()->Data[ 34426 ];

	UBioCheatManager_execSpeak_Parms Speak_Parms;
	Speak_Parms.EventID = EventID;
	memcpy ( &Speak_Parms.sInstigator, &sInstigator, 0xC );
	memcpy ( &Speak_Parms.sRecipient, &sRecipient, 0xC );

	this->ProcessEvent ( pFnSpeak, &Speak_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ShowOnlineMarketplace
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::ShowOnlineMarketplace ( )
{
	static UFunction* pFnShowOnlineMarketplace = NULL;

	if ( ! pFnShowOnlineMarketplace )
		pFnShowOnlineMarketplace = (UFunction*) UObject::GObjObjects()->Data[ 34420 ];

	UBioCheatManager_execShowOnlineMarketplace_Parms ShowOnlineMarketplace_Parms;

	this->ProcessEvent ( pFnShowOnlineMarketplace, &ShowOnlineMarketplace_Parms, NULL );
};

// Function SFXGame.BioCheatManager.LogActorClasses
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::LogActorClasses ( )
{
	static UFunction* pFnLogActorClasses = NULL;

	if ( ! pFnLogActorClasses )
		pFnLogActorClasses = (UFunction*) UObject::GObjObjects()->Data[ 34419 ];

	UBioCheatManager_execLogActorClasses_Parms LogActorClasses_Parms;

	pFnLogActorClasses->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogActorClasses, &LogActorClasses_Parms, NULL );

	pFnLogActorClasses->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.LogActorUnclassified
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::LogActorUnclassified ( )
{
	static UFunction* pFnLogActorUnclassified = NULL;

	if ( ! pFnLogActorUnclassified )
		pFnLogActorUnclassified = (UFunction*) UObject::GObjObjects()->Data[ 34418 ];

	UBioCheatManager_execLogActorUnclassified_Parms LogActorUnclassified_Parms;

	pFnLogActorUnclassified->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogActorUnclassified, &LogActorUnclassified_Parms, NULL );

	pFnLogActorUnclassified->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.LogActorArtPlaceables
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::LogActorArtPlaceables ( )
{
	static UFunction* pFnLogActorArtPlaceables = NULL;

	if ( ! pFnLogActorArtPlaceables )
		pFnLogActorArtPlaceables = (UFunction*) UObject::GObjObjects()->Data[ 34417 ];

	UBioCheatManager_execLogActorArtPlaceables_Parms LogActorArtPlaceables_Parms;

	pFnLogActorArtPlaceables->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogActorArtPlaceables, &LogActorArtPlaceables_Parms, NULL );

	pFnLogActorArtPlaceables->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.LogActorPrefabInstances
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::LogActorPrefabInstances ( )
{
	static UFunction* pFnLogActorPrefabInstances = NULL;

	if ( ! pFnLogActorPrefabInstances )
		pFnLogActorPrefabInstances = (UFunction*) UObject::GObjObjects()->Data[ 34416 ];

	UBioCheatManager_execLogActorPrefabInstances_Parms LogActorPrefabInstances_Parms;

	pFnLogActorPrefabInstances->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogActorPrefabInstances, &LogActorPrefabInstances_Parms, NULL );

	pFnLogActorPrefabInstances->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.LogActorEmitters
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::LogActorEmitters ( )
{
	static UFunction* pFnLogActorEmitters = NULL;

	if ( ! pFnLogActorEmitters )
		pFnLogActorEmitters = (UFunction*) UObject::GObjObjects()->Data[ 34415 ];

	UBioCheatManager_execLogActorEmitters_Parms LogActorEmitters_Parms;

	pFnLogActorEmitters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogActorEmitters, &LogActorEmitters_Parms, NULL );

	pFnLogActorEmitters->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.LogActorSkelMeshes
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::LogActorSkelMeshes ( )
{
	static UFunction* pFnLogActorSkelMeshes = NULL;

	if ( ! pFnLogActorSkelMeshes )
		pFnLogActorSkelMeshes = (UFunction*) UObject::GObjObjects()->Data[ 34414 ];

	UBioCheatManager_execLogActorSkelMeshes_Parms LogActorSkelMeshes_Parms;

	pFnLogActorSkelMeshes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogActorSkelMeshes, &LogActorSkelMeshes_Parms, NULL );

	pFnLogActorSkelMeshes->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.LogActorPawns
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::LogActorPawns ( )
{
	static UFunction* pFnLogActorPawns = NULL;

	if ( ! pFnLogActorPawns )
		pFnLogActorPawns = (UFunction*) UObject::GObjObjects()->Data[ 34413 ];

	UBioCheatManager_execLogActorPawns_Parms LogActorPawns_Parms;

	pFnLogActorPawns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogActorPawns, &LogActorPawns_Parms, NULL );

	pFnLogActorPawns->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.LogAnimSequences
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::LogAnimSequences ( )
{
	static UFunction* pFnLogAnimSequences = NULL;

	if ( ! pFnLogAnimSequences )
		pFnLogAnimSequences = (UFunction*) UObject::GObjObjects()->Data[ 34412 ];

	UBioCheatManager_execLogAnimSequences_Parms LogAnimSequences_Parms;

	pFnLogAnimSequences->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogAnimSequences, &LogAnimSequences_Parms, NULL );

	pFnLogAnimSequences->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.EnableFaceFX
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void UBioCheatManager::EnableFaceFX ( unsigned long bEnable )
{
	static UFunction* pFnEnableFaceFX = NULL;

	if ( ! pFnEnableFaceFX )
		pFnEnableFaceFX = (UFunction*) UObject::GObjObjects()->Data[ 34409 ];

	UBioCheatManager_execEnableFaceFX_Parms EnableFaceFX_Parms;
	EnableFaceFX_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnEnableFaceFX, &EnableFaceFX_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ReadAchievements
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            TitleId                        ( CPF_OptionalParm | CPF_Parm )

void UBioCheatManager::ReadAchievements ( int TitleId )
{
	static UFunction* pFnReadAchievements = NULL;

	if ( ! pFnReadAchievements )
		pFnReadAchievements = (UFunction*) UObject::GObjObjects()->Data[ 34404 ];

	UBioCheatManager_execReadAchievements_Parms ReadAchievements_Parms;
	ReadAchievements_Parms.TitleId = TitleId;

	this->ProcessEvent ( pFnReadAchievements, &ReadAchievements_Parms, NULL );
};

// Function SFXGame.BioCheatManager.UnlockAllGamerpics
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::UnlockAllGamerpics ( )
{
	static UFunction* pFnUnlockAllGamerpics = NULL;

	if ( ! pFnUnlockAllGamerpics )
		pFnUnlockAllGamerpics = (UFunction*) UObject::GObjObjects()->Data[ 34403 ];

	UBioCheatManager_execUnlockAllGamerpics_Parms UnlockAllGamerpics_Parms;

	this->ProcessEvent ( pFnUnlockAllGamerpics, &UnlockAllGamerpics_Parms, NULL );
};

// Function SFXGame.BioCheatManager.UnlockAchievementRange
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Start                          ( CPF_Parm )
// int                            End                            ( CPF_Parm )

void UBioCheatManager::UnlockAchievementRange ( int Start, int End )
{
	static UFunction* pFnUnlockAchievementRange = NULL;

	if ( ! pFnUnlockAchievementRange )
		pFnUnlockAchievementRange = (UFunction*) UObject::GObjObjects()->Data[ 34397 ];

	UBioCheatManager_execUnlockAchievementRange_Parms UnlockAchievementRange_Parms;
	UnlockAchievementRange_Parms.Start = Start;
	UnlockAchievementRange_Parms.End = End;

	this->ProcessEvent ( pFnUnlockAchievementRange, &UnlockAchievementRange_Parms, NULL );
};

// Function SFXGame.BioCheatManager.UnlockAllAchievements
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::UnlockAllAchievements ( )
{
	static UFunction* pFnUnlockAllAchievements = NULL;

	if ( ! pFnUnlockAllAchievements )
		pFnUnlockAllAchievements = (UFunction*) UObject::GObjObjects()->Data[ 34395 ];

	UBioCheatManager_execUnlockAllAchievements_Parms UnlockAllAchievements_Parms;

	this->ProcessEvent ( pFnUnlockAllAchievements, &UnlockAllAchievements_Parms, NULL );
};

// Function SFXGame.BioCheatManager.UnlockAchievement
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  AchievementId                  ( CPF_Parm )

void UBioCheatManager::UnlockAchievement ( unsigned char AchievementId )
{
	static UFunction* pFnUnlockAchievement = NULL;

	if ( ! pFnUnlockAchievement )
		pFnUnlockAchievement = (UFunction*) UObject::GObjObjects()->Data[ 34393 ];

	UBioCheatManager_execUnlockAchievement_Parms UnlockAchievement_Parms;
	UnlockAchievement_Parms.AchievementId = AchievementId;

	this->ProcessEvent ( pFnUnlockAchievement, &UnlockAchievement_Parms, NULL );
};

// Function SFXGame.BioCheatManager.TogglePlayersOnly
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::TogglePlayersOnly ( )
{
	static UFunction* pFnTogglePlayersOnly = NULL;

	if ( ! pFnTogglePlayersOnly )
		pFnTogglePlayersOnly = (UFunction*) UObject::GObjObjects()->Data[ 34391 ];

	UBioCheatManager_execTogglePlayersOnly_Parms TogglePlayersOnly_Parms;

	this->ProcessEvent ( pFnTogglePlayersOnly, &TogglePlayersOnly_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugSetPlotState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   Type                           ( CPF_Parm )
// struct FName                   plotVarName                    ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void UBioCheatManager::DebugSetPlotState ( struct FName Type, struct FName plotVarName, float Value )
{
	static UFunction* pFnDebugSetPlotState = NULL;

	if ( ! pFnDebugSetPlotState )
		pFnDebugSetPlotState = (UFunction*) UObject::GObjObjects()->Data[ 34386 ];

	UBioCheatManager_execDebugSetPlotState_Parms DebugSetPlotState_Parms;
	memcpy ( &DebugSetPlotState_Parms.Type, &Type, 0x8 );
	memcpy ( &DebugSetPlotState_Parms.plotVarName, &plotVarName, 0x8 );
	DebugSetPlotState_Parms.Value = Value;

	this->ProcessEvent ( pFnDebugSetPlotState, &DebugSetPlotState_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetPlotVariableID
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   plotVarName                    ( CPF_Parm )

void UBioCheatManager::GetPlotVariableID ( struct FName plotVarName )
{
	static UFunction* pFnGetPlotVariableID = NULL;

	if ( ! pFnGetPlotVariableID )
		pFnGetPlotVariableID = (UFunction*) UObject::GObjObjects()->Data[ 34381 ];

	UBioCheatManager_execGetPlotVariableID_Parms GetPlotVariableID_Parms;
	memcpy ( &GetPlotVariableID_Parms.plotVarName, &plotVarName, 0x8 );

	this->ProcessEvent ( pFnGetPlotVariableID, &GetPlotVariableID_Parms, NULL );
};

// Function SFXGame.BioCheatManager.HideWwiseVolumeLocations
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 nmVolume                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::HideWwiseVolumeLocations ( struct FString nmVolume )
{
	static UFunction* pFnHideWwiseVolumeLocations = NULL;

	if ( ! pFnHideWwiseVolumeLocations )
		pFnHideWwiseVolumeLocations = (UFunction*) UObject::GObjObjects()->Data[ 34378 ];

	UBioCheatManager_execHideWwiseVolumeLocations_Parms HideWwiseVolumeLocations_Parms;
	memcpy ( &HideWwiseVolumeLocations_Parms.nmVolume, &nmVolume, 0xC );

	this->ProcessEvent ( pFnHideWwiseVolumeLocations, &HideWwiseVolumeLocations_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ShowWwiseVolumeLocations
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 nmVolume                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::ShowWwiseVolumeLocations ( struct FString nmVolume )
{
	static UFunction* pFnShowWwiseVolumeLocations = NULL;

	if ( ! pFnShowWwiseVolumeLocations )
		pFnShowWwiseVolumeLocations = (UFunction*) UObject::GObjObjects()->Data[ 34375 ];

	UBioCheatManager_execShowWwiseVolumeLocations_Parms ShowWwiseVolumeLocations_Parms;
	memcpy ( &ShowWwiseVolumeLocations_Parms.nmVolume, &nmVolume, 0xC );

	this->ProcessEvent ( pFnShowWwiseVolumeLocations, &ShowWwiseVolumeLocations_Parms, NULL );
};

// Function SFXGame.BioCheatManager.CerberusDLC
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bAvail                         ( CPF_Parm )

void UBioCheatManager::CerberusDLC ( unsigned long bAvail )
{
	static UFunction* pFnCerberusDLC = NULL;

	if ( ! pFnCerberusDLC )
		pFnCerberusDLC = (UFunction*) UObject::GObjObjects()->Data[ 34371 ];

	UBioCheatManager_execCerberusDLC_Parms CerberusDLC_Parms;
	CerberusDLC_Parms.bAvail = bAvail;

	this->ProcessEvent ( pFnCerberusDLC, &CerberusDLC_Parms, NULL );
};

// Function SFXGame.BioCheatManager.UpdateHealth
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::UpdateHealth ( )
{
	static UFunction* pFnUpdateHealth = NULL;

	if ( ! pFnUpdateHealth )
		pFnUpdateHealth = (UFunction*) UObject::GObjObjects()->Data[ 34370 ];

	UBioCheatManager_execUpdateHealth_Parms UpdateHealth_Parms;

	this->ProcessEvent ( pFnUpdateHealth, &UpdateHealth_Parms, NULL );
};

// Function SFXGame.BioCheatManager.UpdateShields
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::UpdateShields ( )
{
	static UFunction* pFnUpdateShields = NULL;

	if ( ! pFnUpdateShields )
		pFnUpdateShields = (UFunction*) UObject::GObjObjects()->Data[ 34369 ];

	UBioCheatManager_execUpdateShields_Parms UpdateShields_Parms;

	this->ProcessEvent ( pFnUpdateShields, &UpdateShields_Parms, NULL );
};

// Function SFXGame.BioCheatManager.UpdateBonusListCache
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::UpdateBonusListCache ( )
{
	static UFunction* pFnUpdateBonusListCache = NULL;

	if ( ! pFnUpdateBonusListCache )
		pFnUpdateBonusListCache = (UFunction*) UObject::GObjObjects()->Data[ 34367 ];

	UBioCheatManager_execUpdateBonusListCache_Parms UpdateBonusListCache_Parms;

	this->ProcessEvent ( pFnUpdateBonusListCache, &UpdateBonusListCache_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ApplyAchPartyDamageBonus
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::ApplyAchPartyDamageBonus ( )
{
	static UFunction* pFnApplyAchPartyDamageBonus = NULL;

	if ( ! pFnApplyAchPartyDamageBonus )
		pFnApplyAchPartyDamageBonus = (UFunction*) UObject::GObjObjects()->Data[ 34362 ];

	UBioCheatManager_execApplyAchPartyDamageBonus_Parms ApplyAchPartyDamageBonus_Parms;

	this->ProcessEvent ( pFnApplyAchPartyDamageBonus, &ApplyAchPartyDamageBonus_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ApplyAchPartyHealthBonus
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::ApplyAchPartyHealthBonus ( )
{
	static UFunction* pFnApplyAchPartyHealthBonus = NULL;

	if ( ! pFnApplyAchPartyHealthBonus )
		pFnApplyAchPartyHealthBonus = (UFunction*) UObject::GObjObjects()->Data[ 34357 ];

	UBioCheatManager_execApplyAchPartyHealthBonus_Parms ApplyAchPartyHealthBonus_Parms;

	this->ProcessEvent ( pFnApplyAchPartyHealthBonus, &ApplyAchPartyHealthBonus_Parms, NULL );
};

// Function SFXGame.BioCheatManager.FindSFXGameEffectClass
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 ClassName                      ( CPF_Parm | CPF_NeedCtorLink )

class UClass* UBioCheatManager::FindSFXGameEffectClass ( struct FString ClassName )
{
	static UFunction* pFnFindSFXGameEffectClass = NULL;

	if ( ! pFnFindSFXGameEffectClass )
		pFnFindSFXGameEffectClass = (UFunction*) UObject::GObjObjects()->Data[ 34353 ];

	UBioCheatManager_execFindSFXGameEffectClass_Parms FindSFXGameEffectClass_Parms;
	memcpy ( &FindSFXGameEffectClass_Parms.ClassName, &ClassName, 0xC );

	this->ProcessEvent ( pFnFindSFXGameEffectClass, &FindSFXGameEffectClass_Parms, NULL );

	return FindSFXGameEffectClass_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.CloseGui
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   HandlerId                      ( CPF_Parm )

void UBioCheatManager::CloseGui ( struct FName HandlerId )
{
	static UFunction* pFnCloseGui = NULL;

	if ( ! pFnCloseGui )
		pFnCloseGui = (UFunction*) UObject::GObjObjects()->Data[ 34350 ];

	UBioCheatManager_execCloseGui_Parms CloseGui_Parms;
	memcpy ( &CloseGui_Parms.HandlerId, &HandlerId, 0x8 );

	this->ProcessEvent ( pFnCloseGui, &CloseGui_Parms, NULL );
};

// Function SFXGame.BioCheatManager.OpenGui
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   HandlerId                      ( CPF_Parm )

void UBioCheatManager::OpenGui ( struct FName HandlerId )
{
	static UFunction* pFnOpenGui = NULL;

	if ( ! pFnOpenGui )
		pFnOpenGui = (UFunction*) UObject::GObjObjects()->Data[ 34347 ];

	UBioCheatManager_execOpenGui_Parms OpenGui_Parms;
	memcpy ( &OpenGui_Parms.HandlerId, &HandlerId, 0x8 );

	this->ProcessEvent ( pFnOpenGui, &OpenGui_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DisplayTime
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DisplayTime ( )
{
	static UFunction* pFnDisplayTime = NULL;

	if ( ! pFnDisplayTime )
		pFnDisplayTime = (UFunction*) UObject::GObjObjects()->Data[ 34346 ];

	UBioCheatManager_execDisplayTime_Parms DisplayTime_Parms;

	this->ProcessEvent ( pFnDisplayTime, &DisplayTime_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileDifficulty
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileDifficulty ( )
{
	static UFunction* pFnProfileDifficulty = NULL;

	if ( ! pFnProfileDifficulty )
		pFnProfileDifficulty = (UFunction*) UObject::GObjObjects()->Data[ 34335 ];

	UBioCheatManager_execProfileDifficulty_Parms ProfileDifficulty_Parms;

	this->ProcessEvent ( pFnProfileDifficulty, &ProfileDifficulty_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetCharacterClassName
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  PlayerClass                    ( CPF_Parm )

int UBioCheatManager::eventGetCharacterClassName ( class UClass* PlayerClass )
{
	static UFunction* pFnGetCharacterClassName = NULL;

	if ( ! pFnGetCharacterClassName )
		pFnGetCharacterClassName = (UFunction*) UObject::GObjObjects()->Data[ 34326 ];

	UBioCheatManager_eventGetCharacterClassName_Parms GetCharacterClassName_Parms;
	GetCharacterClassName_Parms.PlayerClass = PlayerClass;

	this->ProcessEvent ( pFnGetCharacterClassName, &GetCharacterClassName_Parms, NULL );

	return GetCharacterClassName_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.LoadExternalSave
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 SavePath                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::LoadExternalSave ( struct FString SavePath )
{
	static UFunction* pFnLoadExternalSave = NULL;

	if ( ! pFnLoadExternalSave )
		pFnLoadExternalSave = (UFunction*) UObject::GObjObjects()->Data[ 34324 ];

	UBioCheatManager_execLoadExternalSave_Parms LoadExternalSave_Parms;
	memcpy ( &LoadExternalSave_Parms.SavePath, &SavePath, 0xC );

	pFnLoadExternalSave->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadExternalSave, &LoadExternalSave_Parms, NULL );

	pFnLoadExternalSave->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.LoadGame
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 LoadName                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::LoadGame ( struct FString LoadName )
{
	static UFunction* pFnLoadGame = NULL;

	if ( ! pFnLoadGame )
		pFnLoadGame = (UFunction*) UObject::GObjObjects()->Data[ 34322 ];

	UBioCheatManager_execLoadGame_Parms LoadGame_Parms;
	memcpy ( &LoadGame_Parms.LoadName, &LoadName, 0xC );

	pFnLoadGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadGame, &LoadGame_Parms, NULL );

	pFnLoadGame->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.SaveGame
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 SaveName                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::SaveGame ( struct FString SaveName )
{
	static UFunction* pFnSaveGame = NULL;

	if ( ! pFnSaveGame )
		pFnSaveGame = (UFunction*) UObject::GObjObjects()->Data[ 34320 ];

	UBioCheatManager_execSaveGame_Parms SaveGame_Parms;
	memcpy ( &SaveGame_Parms.SaveName, &SaveName, 0xC );

	pFnSaveGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveGame, &SaveGame_Parms, NULL );

	pFnSaveGame->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.ImportAllCareersXenon
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            TargetDeviceId                 ( CPF_Parm )

bool UBioCheatManager::ImportAllCareersXenon ( int TargetDeviceId )
{
	static UFunction* pFnImportAllCareersXenon = NULL;

	if ( ! pFnImportAllCareersXenon )
		pFnImportAllCareersXenon = (UFunction*) UObject::GObjObjects()->Data[ 34317 ];

	UBioCheatManager_execImportAllCareersXenon_Parms ImportAllCareersXenon_Parms;
	ImportAllCareersXenon_Parms.TargetDeviceId = TargetDeviceId;

	pFnImportAllCareersXenon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnImportAllCareersXenon, &ImportAllCareersXenon_Parms, NULL );

	pFnImportAllCareersXenon->FunctionFlags |= 0x400;

	return ImportAllCareersXenon_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.ImportAllCareers_OnDeviceSelectionComplete
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UBioCheatManager::ImportAllCareers_OnDeviceSelectionComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnImportAllCareers_OnDeviceSelectionComplete = NULL;

	if ( ! pFnImportAllCareers_OnDeviceSelectionComplete )
		pFnImportAllCareers_OnDeviceSelectionComplete = (UFunction*) UObject::GObjObjects()->Data[ 34309 ];

	UBioCheatManager_execImportAllCareers_OnDeviceSelectionComplete_Parms ImportAllCareers_OnDeviceSelectionComplete_Parms;
	ImportAllCareers_OnDeviceSelectionComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnImportAllCareers_OnDeviceSelectionComplete, &ImportAllCareers_OnDeviceSelectionComplete_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ImportAllCareers
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void UBioCheatManager::ImportAllCareers ( )
{
	static UFunction* pFnImportAllCareers = NULL;

	if ( ! pFnImportAllCareers )
		pFnImportAllCareers = (UFunction*) UObject::GObjObjects()->Data[ 34304 ];

	UBioCheatManager_execImportAllCareers_Parms ImportAllCareers_Parms;

	this->ProcessEvent ( pFnImportAllCareers, &ImportAllCareers_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetUgly
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Ugliness                       ( CPF_Parm )

void UBioCheatManager::SetUgly ( int Ugliness )
{
	static UFunction* pFnSetUgly = NULL;

	if ( ! pFnSetUgly )
		pFnSetUgly = (UFunction*) UObject::GObjObjects()->Data[ 34301 ];

	UBioCheatManager_execSetUgly_Parms SetUgly_Parms;
	SetUgly_Parms.Ugliness = Ugliness;

	this->ProcessEvent ( pFnSetUgly, &SetUgly_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetIntimidate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::GetIntimidate ( )
{
	static UFunction* pFnGetIntimidate = NULL;

	if ( ! pFnGetIntimidate )
		pFnGetIntimidate = (UFunction*) UObject::GObjObjects()->Data[ 34299 ];

	UBioCheatManager_execGetIntimidate_Parms GetIntimidate_Parms;

	this->ProcessEvent ( pFnGetIntimidate, &GetIntimidate_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetCharm
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::GetCharm ( )
{
	static UFunction* pFnGetCharm = NULL;

	if ( ! pFnGetCharm )
		pFnGetCharm = (UFunction*) UObject::GObjObjects()->Data[ 34297 ];

	UBioCheatManager_execGetCharm_Parms GetCharm_Parms;

	this->ProcessEvent ( pFnGetCharm, &GetCharm_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetRenegade
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nPoints                        ( CPF_Parm )

void UBioCheatManager::SetRenegade ( int nPoints )
{
	static UFunction* pFnSetRenegade = NULL;

	if ( ! pFnSetRenegade )
		pFnSetRenegade = (UFunction*) UObject::GObjObjects()->Data[ 34294 ];

	UBioCheatManager_execSetRenegade_Parms SetRenegade_Parms;
	SetRenegade_Parms.nPoints = nPoints;

	this->ProcessEvent ( pFnSetRenegade, &SetRenegade_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetRenegade
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::GetRenegade ( )
{
	static UFunction* pFnGetRenegade = NULL;

	if ( ! pFnGetRenegade )
		pFnGetRenegade = (UFunction*) UObject::GObjObjects()->Data[ 34292 ];

	UBioCheatManager_execGetRenegade_Parms GetRenegade_Parms;

	this->ProcessEvent ( pFnGetRenegade, &GetRenegade_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetParagon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nPoints                        ( CPF_Parm )

void UBioCheatManager::SetParagon ( int nPoints )
{
	static UFunction* pFnSetParagon = NULL;

	if ( ! pFnSetParagon )
		pFnSetParagon = (UFunction*) UObject::GObjObjects()->Data[ 34289 ];

	UBioCheatManager_execSetParagon_Parms SetParagon_Parms;
	SetParagon_Parms.nPoints = nPoints;

	this->ProcessEvent ( pFnSetParagon, &SetParagon_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetParagon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::GetParagon ( )
{
	static UFunction* pFnGetParagon = NULL;

	if ( ! pFnGetParagon )
		pFnGetParagon = (UFunction*) UObject::GObjObjects()->Data[ 34287 ];

	UBioCheatManager_execGetParagon_Parms GetParagon_Parms;

	this->ProcessEvent ( pFnGetParagon, &GetParagon_Parms, NULL );
};

// Function SFXGame.BioCheatManager.Splitscreen
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::Splitscreen ( )
{
	static UFunction* pFnSplitscreen = NULL;

	if ( ! pFnSplitscreen )
		pFnSplitscreen = (UFunction*) UObject::GObjObjects()->Data[ 34285 ];

	UBioCheatManager_execSplitscreen_Parms Splitscreen_Parms;

	this->ProcessEvent ( pFnSplitscreen, &Splitscreen_Parms, NULL );
};

// Function SFXGame.BioCheatManager.UpdateSplitscreenPlayers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bCreatePlayers                 ( CPF_Parm )

void UBioCheatManager::UpdateSplitscreenPlayers ( unsigned long bCreatePlayers )
{
	static UFunction* pFnUpdateSplitscreenPlayers = NULL;

	if ( ! pFnUpdateSplitscreenPlayers )
		pFnUpdateSplitscreenPlayers = (UFunction*) UObject::GObjObjects()->Data[ 34283 ];

	UBioCheatManager_execUpdateSplitscreenPlayers_Parms UpdateSplitscreenPlayers_Parms;
	UpdateSplitscreenPlayers_Parms.bCreatePlayers = bCreatePlayers;

	pFnUpdateSplitscreenPlayers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSplitscreenPlayers, &UpdateSplitscreenPlayers_Parms, NULL );

	pFnUpdateSplitscreenPlayers->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.Unreaper
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::Unreaper ( )
{
	static UFunction* pFnUnreaper = NULL;

	if ( ! pFnUnreaper )
		pFnUnreaper = (UFunction*) UObject::GObjObjects()->Data[ 34282 ];

	UBioCheatManager_execUnreaper_Parms Unreaper_Parms;

	pFnUnreaper->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnreaper, &Unreaper_Parms, NULL );

	pFnUnreaper->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.TeleportHenchman
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 nmPawn                         ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::TeleportHenchman ( struct FString nmPawn )
{
	static UFunction* pFnTeleportHenchman = NULL;

	if ( ! pFnTeleportHenchman )
		pFnTeleportHenchman = (UFunction*) UObject::GObjObjects()->Data[ 34277 ];

	UBioCheatManager_execTeleportHenchman_Parms TeleportHenchman_Parms;
	memcpy ( &TeleportHenchman_Parms.nmPawn, &nmPawn, 0xC );

	this->ProcessEvent ( pFnTeleportHenchman, &TeleportHenchman_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ShowDebugText
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )

void UBioCheatManager::ShowDebugText ( unsigned long bShow )
{
	static UFunction* pFnShowDebugText = NULL;

	if ( ! pFnShowDebugText )
		pFnShowDebugText = (UFunction*) UObject::GObjObjects()->Data[ 34275 ];

	UBioCheatManager_execShowDebugText_Parms ShowDebugText_Parms;
	ShowDebugText_Parms.bShow = bShow;

	this->ProcessEvent ( pFnShowDebugText, &ShowDebugText_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GUICMD
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmPanelTag                     ( CPF_Parm )
// struct FString                 sCmd                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sArg1                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sArg2                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::GUICMD ( struct FName nmPanelTag, struct FString sCmd, struct FString sArg1, struct FString sArg2 )
{
	static UFunction* pFnGUICMD = NULL;

	if ( ! pFnGUICMD )
		pFnGUICMD = (UFunction*) UObject::GObjObjects()->Data[ 34268 ];

	UBioCheatManager_execGUICMD_Parms GUICMD_Parms;
	memcpy ( &GUICMD_Parms.nmPanelTag, &nmPanelTag, 0x8 );
	memcpy ( &GUICMD_Parms.sCmd, &sCmd, 0xC );
	memcpy ( &GUICMD_Parms.sArg1, &sArg1, 0xC );
	memcpy ( &GUICMD_Parms.sArg2, &sArg2, 0xC );

	this->ProcessEvent ( pFnGUICMD, &GUICMD_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ResetTalents
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 nmPawn                         ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::ResetTalents ( struct FString nmPawn )
{
	static UFunction* pFnResetTalents = NULL;

	if ( ! pFnResetTalents )
		pFnResetTalents = (UFunction*) UObject::GObjObjects()->Data[ 34265 ];

	UBioCheatManager_execResetTalents_Parms ResetTalents_Parms;
	memcpy ( &ResetTalents_Parms.nmPawn, &nmPawn, 0xC );

	this->ProcessEvent ( pFnResetTalents, &ResetTalents_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileEffects
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::ProfileEffects ( )
{
	static UFunction* pFnProfileEffects = NULL;

	if ( ! pFnProfileEffects )
		pFnProfileEffects = (UFunction*) UObject::GObjObjects()->Data[ 34257 ];

	UBioCheatManager_execProfileEffects_Parms ProfileEffects_Parms;

	this->ProcessEvent ( pFnProfileEffects, &ProfileEffects_Parms, NULL );
};

// Function SFXGame.BioCheatManager.RemoveEffect
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 nmPawn                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 EffectClassName                ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::RemoveEffect ( struct FString nmPawn, struct FString EffectClassName )
{
	static UFunction* pFnRemoveEffect = NULL;

	if ( ! pFnRemoveEffect )
		pFnRemoveEffect = (UFunction*) UObject::GObjObjects()->Data[ 34250 ];

	UBioCheatManager_execRemoveEffect_Parms RemoveEffect_Parms;
	memcpy ( &RemoveEffect_Parms.nmPawn, &nmPawn, 0xC );
	memcpy ( &RemoveEffect_Parms.EffectClassName, &EffectClassName, 0xC );

	this->ProcessEvent ( pFnRemoveEffect, &RemoveEffect_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GiveEffectWithValue
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 nmPawn                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 EffectClassName                ( CPF_Parm | CPF_NeedCtorLink )
// float                          Value                          ( CPF_Parm )

void UBioCheatManager::GiveEffectWithValue ( struct FString nmPawn, struct FString EffectClassName, float Value )
{
	static UFunction* pFnGiveEffectWithValue = NULL;

	if ( ! pFnGiveEffectWithValue )
		pFnGiveEffectWithValue = (UFunction*) UObject::GObjObjects()->Data[ 34242 ];

	UBioCheatManager_execGiveEffectWithValue_Parms GiveEffectWithValue_Parms;
	memcpy ( &GiveEffectWithValue_Parms.nmPawn, &nmPawn, 0xC );
	memcpy ( &GiveEffectWithValue_Parms.EffectClassName, &EffectClassName, 0xC );
	GiveEffectWithValue_Parms.Value = Value;

	this->ProcessEvent ( pFnGiveEffectWithValue, &GiveEffectWithValue_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GiveEffect
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 nmPawn                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 EffectClassName                ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::GiveEffect ( struct FString nmPawn, struct FString EffectClassName )
{
	static UFunction* pFnGiveEffect = NULL;

	if ( ! pFnGiveEffect )
		pFnGiveEffect = (UFunction*) UObject::GObjObjects()->Data[ 34232 ];

	UBioCheatManager_execGiveEffect_Parms GiveEffect_Parms;
	memcpy ( &GiveEffect_Parms.nmPawn, &nmPawn, 0xC );
	memcpy ( &GiveEffect_Parms.EffectClassName, &EffectClassName, 0xC );

	this->ProcessEvent ( pFnGiveEffect, &GiveEffect_Parms, NULL );
};

// Function SFXGame.BioCheatManager.RemovePower
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 nmPawn                         ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  PowerClass                     ( CPF_Parm )

void UBioCheatManager::RemovePower ( struct FString nmPawn, class UClass* PowerClass )
{
	static UFunction* pFnRemovePower = NULL;

	if ( ! pFnRemovePower )
		pFnRemovePower = (UFunction*) UObject::GObjObjects()->Data[ 34228 ];

	UBioCheatManager_execRemovePower_Parms RemovePower_Parms;
	memcpy ( &RemovePower_Parms.nmPawn, &nmPawn, 0xC );
	RemovePower_Parms.PowerClass = PowerClass;

	this->ProcessEvent ( pFnRemovePower, &RemovePower_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetRank
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 nmPawn                         ( CPF_Parm | CPF_NeedCtorLink )
// class UClass*                  PowerClass                     ( CPF_Parm )
// float                          fRank                          ( CPF_Parm )

void UBioCheatManager::SetRank ( struct FString nmPawn, class UClass* PowerClass, float fRank )
{
	static UFunction* pFnSetRank = NULL;

	if ( ! pFnSetRank )
		pFnSetRank = (UFunction*) UObject::GObjObjects()->Data[ 34219 ];

	UBioCheatManager_execSetRank_Parms SetRank_Parms;
	memcpy ( &SetRank_Parms.nmPawn, &nmPawn, 0xC );
	SetRank_Parms.PowerClass = PowerClass;
	SetRank_Parms.fRank = fRank;

	this->ProcessEvent ( pFnSetRank, &SetRank_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GivePower
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 nmPawn                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 PowerClassName                 ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::GivePower ( struct FString nmPawn, struct FString PowerClassName )
{
	static UFunction* pFnGivePower = NULL;

	if ( ! pFnGivePower )
		pFnGivePower = (UFunction*) UObject::GObjObjects()->Data[ 34212 ];

	UBioCheatManager_execGivePower_Parms GivePower_Parms;
	memcpy ( &GivePower_Parms.nmPawn, &nmPawn, 0xC );
	memcpy ( &GivePower_Parms.PowerClassName, &PowerClassName, 0xC );

	this->ProcessEvent ( pFnGivePower, &GivePower_Parms, NULL );
};

// Function SFXGame.BioCheatManager.FindPowerClass
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 PowerClassName                 ( CPF_Parm | CPF_NeedCtorLink )

class UClass* UBioCheatManager::FindPowerClass ( struct FString PowerClassName )
{
	static UFunction* pFnFindPowerClass = NULL;

	if ( ! pFnFindPowerClass )
		pFnFindPowerClass = (UFunction*) UObject::GObjObjects()->Data[ 34208 ];

	UBioCheatManager_execFindPowerClass_Parms FindPowerClass_Parms;
	memcpy ( &FindPowerClass_Parms.PowerClassName, &PowerClassName, 0xC );

	this->ProcessEvent ( pFnFindPowerClass, &FindPowerClass_Parms, NULL );

	return FindPowerClass_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.MapPower
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   PowerName                      ( CPF_Parm )

void UBioCheatManager::MapPower ( struct FName PowerName )
{
	static UFunction* pFnMapPower = NULL;

	if ( ! pFnMapPower )
		pFnMapPower = (UFunction*) UObject::GObjObjects()->Data[ 34204 ];

	UBioCheatManager_execMapPower_Parms MapPower_Parms;
	memcpy ( &MapPower_Parms.PowerName, &PowerName, 0x8 );

	this->ProcessEvent ( pFnMapPower, &MapPower_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetMorinth
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::GetMorinth ( )
{
	static UFunction* pFnGetMorinth = NULL;

	if ( ! pFnGetMorinth )
		pFnGetMorinth = (UFunction*) UObject::GObjObjects()->Data[ 34201 ];

	UBioCheatManager_execGetMorinth_Parms GetMorinth_Parms;

	this->ProcessEvent ( pFnGetMorinth, &GetMorinth_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetMorinth
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  Value                          ( CPF_Parm )

void UBioCheatManager::SetMorinth ( unsigned long Value )
{
	static UFunction* pFnSetMorinth = NULL;

	if ( ! pFnSetMorinth )
		pFnSetMorinth = (UFunction*) UObject::GObjObjects()->Data[ 34198 ];

	UBioCheatManager_execSetMorinth_Parms SetMorinth_Parms;
	SetMorinth_Parms.Value = Value;

	this->ProcessEvent ( pFnSetMorinth, &SetMorinth_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetSpecialist
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::GetSpecialist ( )
{
	static UFunction* pFnGetSpecialist = NULL;

	if ( ! pFnGetSpecialist )
		pFnGetSpecialist = (UFunction*) UObject::GObjObjects()->Data[ 34194 ];

	UBioCheatManager_execGetSpecialist_Parms GetSpecialist_Parms;

	this->ProcessEvent ( pFnGetSpecialist, &GetSpecialist_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetSpecialist
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::SetSpecialist ( struct FString Henchman )
{
	static UFunction* pFnSetSpecialist = NULL;

	if ( ! pFnSetSpecialist )
		pFnSetSpecialist = (UFunction*) UObject::GObjObjects()->Data[ 34190 ];

	UBioCheatManager_execSetSpecialist_Parms SetSpecialist_Parms;
	memcpy ( &SetSpecialist_Parms.Henchman, &Henchman, 0xC );

	this->ProcessEvent ( pFnSetSpecialist, &SetSpecialist_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetFireTeam
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::GetFireTeam ( )
{
	static UFunction* pFnGetFireTeam = NULL;

	if ( ! pFnGetFireTeam )
		pFnGetFireTeam = (UFunction*) UObject::GObjObjects()->Data[ 34186 ];

	UBioCheatManager_execGetFireTeam_Parms GetFireTeam_Parms;

	this->ProcessEvent ( pFnGetFireTeam, &GetFireTeam_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetFireTeam
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::SetFireTeam ( struct FString Henchman )
{
	static UFunction* pFnSetFireTeam = NULL;

	if ( ! pFnSetFireTeam )
		pFnSetFireTeam = (UFunction*) UObject::GObjObjects()->Data[ 34182 ];

	UBioCheatManager_execSetFireTeam_Parms SetFireTeam_Parms;
	memcpy ( &SetFireTeam_Parms.Henchman, &Henchman, 0xC );

	this->ProcessEvent ( pFnSetFireTeam, &SetFireTeam_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetHenchmanAppearance
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::GetHenchmanAppearance ( struct FString Henchman )
{
	static UFunction* pFnGetHenchmanAppearance = NULL;

	if ( ! pFnGetHenchmanAppearance )
		pFnGetHenchmanAppearance = (UFunction*) UObject::GObjObjects()->Data[ 34176 ];

	UBioCheatManager_execGetHenchmanAppearance_Parms GetHenchmanAppearance_Parms;
	memcpy ( &GetHenchmanAppearance_Parms.Henchman, &Henchman, 0xC );

	this->ProcessEvent ( pFnGetHenchmanAppearance, &GetHenchmanAppearance_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetHenchmanAppearance
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            Value                          ( CPF_Parm )

void UBioCheatManager::SetHenchmanAppearance ( struct FString Henchman, int Value )
{
	static UFunction* pFnSetHenchmanAppearance = NULL;

	if ( ! pFnSetHenchmanAppearance )
		pFnSetHenchmanAppearance = (UFunction*) UObject::GObjObjects()->Data[ 34170 ];

	UBioCheatManager_execSetHenchmanAppearance_Parms SetHenchmanAppearance_Parms;
	memcpy ( &SetHenchmanAppearance_Parms.Henchman, &Henchman, 0xC );
	SetHenchmanAppearance_Parms.Value = Value;

	this->ProcessEvent ( pFnSetHenchmanAppearance, &SetHenchmanAppearance_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetHenchmanAvailable
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::GetHenchmanAvailable ( struct FString Henchman )
{
	static UFunction* pFnGetHenchmanAvailable = NULL;

	if ( ! pFnGetHenchmanAvailable )
		pFnGetHenchmanAvailable = (UFunction*) UObject::GObjObjects()->Data[ 34164 ];

	UBioCheatManager_execGetHenchmanAvailable_Parms GetHenchmanAvailable_Parms;
	memcpy ( &GetHenchmanAvailable_Parms.Henchman, &Henchman, 0xC );

	this->ProcessEvent ( pFnGetHenchmanAvailable, &GetHenchmanAvailable_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetHenchmanAvailable
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  Value                          ( CPF_Parm )

void UBioCheatManager::SetHenchmanAvailable ( struct FString Henchman, unsigned long Value )
{
	static UFunction* pFnSetHenchmanAvailable = NULL;

	if ( ! pFnSetHenchmanAvailable )
		pFnSetHenchmanAvailable = (UFunction*) UObject::GObjObjects()->Data[ 34158 ];

	UBioCheatManager_execSetHenchmanAvailable_Parms SetHenchmanAvailable_Parms;
	memcpy ( &SetHenchmanAvailable_Parms.Henchman, &Henchman, 0xC );
	SetHenchmanAvailable_Parms.Value = Value;

	this->ProcessEvent ( pFnSetHenchmanAvailable, &SetHenchmanAvailable_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetHenchmanKnown
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::GetHenchmanKnown ( struct FString Henchman )
{
	static UFunction* pFnGetHenchmanKnown = NULL;

	if ( ! pFnGetHenchmanKnown )
		pFnGetHenchmanKnown = (UFunction*) UObject::GObjObjects()->Data[ 34152 ];

	UBioCheatManager_execGetHenchmanKnown_Parms GetHenchmanKnown_Parms;
	memcpy ( &GetHenchmanKnown_Parms.Henchman, &Henchman, 0xC );

	this->ProcessEvent ( pFnGetHenchmanKnown, &GetHenchmanKnown_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetHenchmanKnown
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  Value                          ( CPF_Parm )

void UBioCheatManager::SetHenchmanKnown ( struct FString Henchman, unsigned long Value )
{
	static UFunction* pFnSetHenchmanKnown = NULL;

	if ( ! pFnSetHenchmanKnown )
		pFnSetHenchmanKnown = (UFunction*) UObject::GObjObjects()->Data[ 34146 ];

	UBioCheatManager_execSetHenchmanKnown_Parms SetHenchmanKnown_Parms;
	memcpy ( &SetHenchmanKnown_Parms.Henchman, &Henchman, 0xC );
	SetHenchmanKnown_Parms.Value = Value;

	this->ProcessEvent ( pFnSetHenchmanKnown, &SetHenchmanKnown_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetHenchmanDead
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::GetHenchmanDead ( struct FString Henchman )
{
	static UFunction* pFnGetHenchmanDead = NULL;

	if ( ! pFnGetHenchmanDead )
		pFnGetHenchmanDead = (UFunction*) UObject::GObjObjects()->Data[ 34141 ];

	UBioCheatManager_execGetHenchmanDead_Parms GetHenchmanDead_Parms;
	memcpy ( &GetHenchmanDead_Parms.Henchman, &Henchman, 0xC );

	this->ProcessEvent ( pFnGetHenchmanDead, &GetHenchmanDead_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetHenchmanDead
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  Value                          ( CPF_Parm )

void UBioCheatManager::SetHenchmanDead ( struct FString Henchman, unsigned long Value )
{
	static UFunction* pFnSetHenchmanDead = NULL;

	if ( ! pFnSetHenchmanDead )
		pFnSetHenchmanDead = (UFunction*) UObject::GObjObjects()->Data[ 34136 ];

	UBioCheatManager_execSetHenchmanDead_Parms SetHenchmanDead_Parms;
	memcpy ( &SetHenchmanDead_Parms.Henchman, &Henchman, 0xC );
	SetHenchmanDead_Parms.Value = Value;

	this->ProcessEvent ( pFnSetHenchmanDead, &SetHenchmanDead_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetHenchmanSpecialization
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::GetHenchmanSpecialization ( struct FString Henchman )
{
	static UFunction* pFnGetHenchmanSpecialization = NULL;

	if ( ! pFnGetHenchmanSpecialization )
		pFnGetHenchmanSpecialization = (UFunction*) UObject::GObjObjects()->Data[ 34130 ];

	UBioCheatManager_execGetHenchmanSpecialization_Parms GetHenchmanSpecialization_Parms;
	memcpy ( &GetHenchmanSpecialization_Parms.Henchman, &Henchman, 0xC );

	this->ProcessEvent ( pFnGetHenchmanSpecialization, &GetHenchmanSpecialization_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetHenchmanSpecialization
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  Value                          ( CPF_Parm )

void UBioCheatManager::SetHenchmanSpecialization ( struct FString Henchman, unsigned long Value )
{
	static UFunction* pFnSetHenchmanSpecialization = NULL;

	if ( ! pFnSetHenchmanSpecialization )
		pFnSetHenchmanSpecialization = (UFunction*) UObject::GObjObjects()->Data[ 34124 ];

	UBioCheatManager_execSetHenchmanSpecialization_Parms SetHenchmanSpecialization_Parms;
	memcpy ( &SetHenchmanSpecialization_Parms.Henchman, &Henchman, 0xC );
	SetHenchmanSpecialization_Parms.Value = Value;

	this->ProcessEvent ( pFnSetHenchmanSpecialization, &SetHenchmanSpecialization_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetHenchmanLoyalty
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::GetHenchmanLoyalty ( struct FString Henchman )
{
	static UFunction* pFnGetHenchmanLoyalty = NULL;

	if ( ! pFnGetHenchmanLoyalty )
		pFnGetHenchmanLoyalty = (UFunction*) UObject::GObjObjects()->Data[ 34118 ];

	UBioCheatManager_execGetHenchmanLoyalty_Parms GetHenchmanLoyalty_Parms;
	memcpy ( &GetHenchmanLoyalty_Parms.Henchman, &Henchman, 0xC );

	this->ProcessEvent ( pFnGetHenchmanLoyalty, &GetHenchmanLoyalty_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetHenchmanLoyalty
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  Value                          ( CPF_Parm )

void UBioCheatManager::SetHenchmanLoyalty ( struct FString Henchman, unsigned long Value )
{
	static UFunction* pFnSetHenchmanLoyalty = NULL;

	if ( ! pFnSetHenchmanLoyalty )
		pFnSetHenchmanLoyalty = (UFunction*) UObject::GObjObjects()->Data[ 34112 ];

	UBioCheatManager_execSetHenchmanLoyalty_Parms SetHenchmanLoyalty_Parms;
	memcpy ( &SetHenchmanLoyalty_Parms.Henchman, &Henchman, 0xC );
	SetHenchmanLoyalty_Parms.Value = Value;

	this->ProcessEvent ( pFnSetHenchmanLoyalty, &SetHenchmanLoyalty_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetHenchIsDeadGVarIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )

int UBioCheatManager::GetHenchIsDeadGVarIndex ( struct FString Henchman )
{
	static UFunction* pFnGetHenchIsDeadGVarIndex = NULL;

	if ( ! pFnGetHenchIsDeadGVarIndex )
		pFnGetHenchIsDeadGVarIndex = (UFunction*) UObject::GObjObjects()->Data[ 34109 ];

	UBioCheatManager_execGetHenchIsDeadGVarIndex_Parms GetHenchIsDeadGVarIndex_Parms;
	memcpy ( &GetHenchIsDeadGVarIndex_Parms.Henchman, &Henchman, 0xC );

	this->ProcessEvent ( pFnGetHenchIsDeadGVarIndex, &GetHenchIsDeadGVarIndex_Parms, NULL );

	return GetHenchIsDeadGVarIndex_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.GetHenchmanByName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sName                          ( CPF_Parm | CPF_NeedCtorLink )

class AActor* UBioCheatManager::eventGetHenchmanByName ( struct FString sName )
{
	static UFunction* pFnGetHenchmanByName = NULL;

	if ( ! pFnGetHenchmanByName )
		pFnGetHenchmanByName = (UFunction*) UObject::GObjObjects()->Data[ 34103 ];

	UBioCheatManager_eventGetHenchmanByName_Parms GetHenchmanByName_Parms;
	memcpy ( &GetHenchmanByName_Parms.sName, &sName, 0xC );

	this->ProcessEvent ( pFnGetHenchmanByName, &GetHenchmanByName_Parms, NULL );

	return GetHenchmanByName_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.GetHenchName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Henchman                       ( CPF_Parm )

struct FString UBioCheatManager::GetHenchName ( int Henchman )
{
	static UFunction* pFnGetHenchName = NULL;

	if ( ! pFnGetHenchName )
		pFnGetHenchName = (UFunction*) UObject::GObjObjects()->Data[ 34100 ];

	UBioCheatManager_execGetHenchName_Parms GetHenchName_Parms;
	GetHenchName_Parms.Henchman = Henchman;

	this->ProcessEvent ( pFnGetHenchName, &GetHenchName_Parms, NULL );

	return GetHenchName_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.GetHenchIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )

int UBioCheatManager::GetHenchIndex ( struct FString Henchman )
{
	static UFunction* pFnGetHenchIndex = NULL;

	if ( ! pFnGetHenchIndex )
		pFnGetHenchIndex = (UFunction*) UObject::GObjObjects()->Data[ 34097 ];

	UBioCheatManager_execGetHenchIndex_Parms GetHenchIndex_Parms;
	memcpy ( &GetHenchIndex_Parms.Henchman, &Henchman, 0xC );

	this->ProcessEvent ( pFnGetHenchIndex, &GetHenchIndex_Parms, NULL );

	return GetHenchIndex_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.GetHenchCodename
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Henchman                       ( CPF_Parm | CPF_NeedCtorLink )

struct FString UBioCheatManager::GetHenchCodename ( struct FString Henchman )
{
	static UFunction* pFnGetHenchCodename = NULL;

	if ( ! pFnGetHenchCodename )
		pFnGetHenchCodename = (UFunction*) UObject::GObjObjects()->Data[ 34094 ];

	UBioCheatManager_execGetHenchCodename_Parms GetHenchCodename_Parms;
	memcpy ( &GetHenchCodename_Parms.Henchman, &Henchman, 0xC );

	this->ProcessEvent ( pFnGetHenchCodename, &GetHenchCodename_Parms, NULL );

	return GetHenchCodename_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.DisplayNegotiate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DisplayNegotiate ( )
{
	static UFunction* pFnDisplayNegotiate = NULL;

	if ( ! pFnDisplayNegotiate )
		pFnDisplayNegotiate = (UFunction*) UObject::GObjObjects()->Data[ 34092 ];

	UBioCheatManager_execDisplayNegotiate_Parms DisplayNegotiate_Parms;

	this->ProcessEvent ( pFnDisplayNegotiate, &DisplayNegotiate_Parms, NULL );
};

// Function SFXGame.BioCheatManager.MainMenu_ClearNotifications
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::MainMenu_ClearNotifications ( )
{
	static UFunction* pFnMainMenu_ClearNotifications = NULL;

	if ( ! pFnMainMenu_ClearNotifications )
		pFnMainMenu_ClearNotifications = (UFunction*) UObject::GObjObjects()->Data[ 34089 ];

	UBioCheatManager_execMainMenu_ClearNotifications_Parms MainMenu_ClearNotifications_Parms;

	this->ProcessEvent ( pFnMainMenu_ClearNotifications, &MainMenu_ClearNotifications_Parms, NULL );
};

// Function SFXGame.BioCheatManager.MainMenu_AddCerberusItem
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 i_sTitle                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 i_sInfo                        ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::MainMenu_AddCerberusItem ( struct FString i_sTitle, struct FString i_sInfo )
{
	static UFunction* pFnMainMenu_AddCerberusItem = NULL;

	if ( ! pFnMainMenu_AddCerberusItem )
		pFnMainMenu_AddCerberusItem = (UFunction*) UObject::GObjObjects()->Data[ 34083 ];

	UBioCheatManager_execMainMenu_AddCerberusItem_Parms MainMenu_AddCerberusItem_Parms;
	memcpy ( &MainMenu_AddCerberusItem_Parms.i_sTitle, &i_sTitle, 0xC );
	memcpy ( &MainMenu_AddCerberusItem_Parms.i_sInfo, &i_sInfo, 0xC );

	this->ProcessEvent ( pFnMainMenu_AddCerberusItem, &MainMenu_AddCerberusItem_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_ShowCerberusWelcomeMessage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::BlazeTest_ShowCerberusWelcomeMessage ( )
{
	static UFunction* pFnBlazeTest_ShowCerberusWelcomeMessage = NULL;

	if ( ! pFnBlazeTest_ShowCerberusWelcomeMessage )
		pFnBlazeTest_ShowCerberusWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 34081 ];

	UBioCheatManager_execBlazeTest_ShowCerberusWelcomeMessage_Parms BlazeTest_ShowCerberusWelcomeMessage_Parms;

	this->ProcessEvent ( pFnBlazeTest_ShowCerberusWelcomeMessage, &BlazeTest_ShowCerberusWelcomeMessage_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_ShowParentEmail
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::BlazeTest_ShowParentEmail ( )
{
	static UFunction* pFnBlazeTest_ShowParentEmail = NULL;

	if ( ! pFnBlazeTest_ShowParentEmail )
		pFnBlazeTest_ShowParentEmail = (UFunction*) UObject::GObjObjects()->Data[ 34079 ];

	UBioCheatManager_execBlazeTest_ShowParentEmail_Parms BlazeTest_ShowParentEmail_Parms;

	this->ProcessEvent ( pFnBlazeTest_ShowParentEmail, &BlazeTest_ShowParentEmail_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_ShowAccountDemographics
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::BlazeTest_ShowAccountDemographics ( )
{
	static UFunction* pFnBlazeTest_ShowAccountDemographics = NULL;

	if ( ! pFnBlazeTest_ShowAccountDemographics )
		pFnBlazeTest_ShowAccountDemographics = (UFunction*) UObject::GObjObjects()->Data[ 34073 ];

	UBioCheatManager_execBlazeTest_ShowAccountDemographics_Parms BlazeTest_ShowAccountDemographics_Parms;

	this->ProcessEvent ( pFnBlazeTest_ShowAccountDemographics, &BlazeTest_ShowAccountDemographics_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_ShowRedeemCode
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::BlazeTest_ShowRedeemCode ( )
{
	static UFunction* pFnBlazeTest_ShowRedeemCode = NULL;

	if ( ! pFnBlazeTest_ShowRedeemCode )
		pFnBlazeTest_ShowRedeemCode = (UFunction*) UObject::GObjObjects()->Data[ 34071 ];

	UBioCheatManager_execBlazeTest_ShowRedeemCode_Parms BlazeTest_ShowRedeemCode_Parms;

	this->ProcessEvent ( pFnBlazeTest_ShowRedeemCode, &BlazeTest_ShowRedeemCode_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_ShowCerberusIntro
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::BlazeTest_ShowCerberusIntro ( )
{
	static UFunction* pFnBlazeTest_ShowCerberusIntro = NULL;

	if ( ! pFnBlazeTest_ShowCerberusIntro )
		pFnBlazeTest_ShowCerberusIntro = (UFunction*) UObject::GObjObjects()->Data[ 34069 ];

	UBioCheatManager_execBlazeTest_ShowCerberusIntro_Parms BlazeTest_ShowCerberusIntro_Parms;

	this->ProcessEvent ( pFnBlazeTest_ShowCerberusIntro, &BlazeTest_ShowCerberusIntro_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_ShowNucleusWelcomeMessage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::BlazeTest_ShowNucleusWelcomeMessage ( )
{
	static UFunction* pFnBlazeTest_ShowNucleusWelcomeMessage = NULL;

	if ( ! pFnBlazeTest_ShowNucleusWelcomeMessage )
		pFnBlazeTest_ShowNucleusWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 34067 ];

	UBioCheatManager_execBlazeTest_ShowNucleusWelcomeMessage_Parms BlazeTest_ShowNucleusWelcomeMessage_Parms;

	this->ProcessEvent ( pFnBlazeTest_ShowNucleusWelcomeMessage, &BlazeTest_ShowNucleusWelcomeMessage_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_ShowTermsOfService
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 i_sTermsOfService              ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bTOSChanged                    ( CPF_OptionalParm | CPF_Parm )

void UBioCheatManager::BlazeTest_ShowTermsOfService ( struct FString i_sTermsOfService, unsigned long bTOSChanged )
{
	static UFunction* pFnBlazeTest_ShowTermsOfService = NULL;

	if ( ! pFnBlazeTest_ShowTermsOfService )
		pFnBlazeTest_ShowTermsOfService = (UFunction*) UObject::GObjObjects()->Data[ 34063 ];

	UBioCheatManager_execBlazeTest_ShowTermsOfService_Parms BlazeTest_ShowTermsOfService_Parms;
	memcpy ( &BlazeTest_ShowTermsOfService_Parms.i_sTermsOfService, &i_sTermsOfService, 0xC );
	BlazeTest_ShowTermsOfService_Parms.bTOSChanged = bTOSChanged;

	this->ProcessEvent ( pFnBlazeTest_ShowTermsOfService, &BlazeTest_ShowTermsOfService_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_ShowCreateNucleusAccountEx
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 sEmail                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sPassword                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bEAProducts                    ( CPF_Parm )
// unsigned long                  bThirdParty                    ( CPF_Parm )
// unsigned long                  bBioWareProducts               ( CPF_Parm )
// struct FString                 i_sCountryCode                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            BirthDay                       ( CPF_Parm )
// int                            BirthMonth                     ( CPF_Parm )
// int                            BirthYear                      ( CPF_Parm )

void UBioCheatManager::BlazeTest_ShowCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear )
{
	static UFunction* pFnBlazeTest_ShowCreateNucleusAccountEx = NULL;

	if ( ! pFnBlazeTest_ShowCreateNucleusAccountEx )
		pFnBlazeTest_ShowCreateNucleusAccountEx = (UFunction*) UObject::GObjObjects()->Data[ 34048 ];

	UBioCheatManager_execBlazeTest_ShowCreateNucleusAccountEx_Parms BlazeTest_ShowCreateNucleusAccountEx_Parms;
	memcpy ( &BlazeTest_ShowCreateNucleusAccountEx_Parms.sEmail, &sEmail, 0xC );
	memcpy ( &BlazeTest_ShowCreateNucleusAccountEx_Parms.sPassword, &sPassword, 0xC );
	BlazeTest_ShowCreateNucleusAccountEx_Parms.bEAProducts = bEAProducts;
	BlazeTest_ShowCreateNucleusAccountEx_Parms.bThirdParty = bThirdParty;
	BlazeTest_ShowCreateNucleusAccountEx_Parms.bBioWareProducts = bBioWareProducts;
	memcpy ( &BlazeTest_ShowCreateNucleusAccountEx_Parms.i_sCountryCode, &i_sCountryCode, 0xC );
	BlazeTest_ShowCreateNucleusAccountEx_Parms.BirthDay = BirthDay;
	BlazeTest_ShowCreateNucleusAccountEx_Parms.BirthMonth = BirthMonth;
	BlazeTest_ShowCreateNucleusAccountEx_Parms.BirthYear = BirthYear;

	this->ProcessEvent ( pFnBlazeTest_ShowCreateNucleusAccountEx, &BlazeTest_ShowCreateNucleusAccountEx_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_ShowCreateNucleusAccount
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 sEmail                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sPassword                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bEAProducts                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bThirdParty                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bRegisterProduct               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bBioWareProducts               ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bUnderage                      ( CPF_OptionalParm | CPF_Parm )

void UBioCheatManager::BlazeTest_ShowCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bUnderage )
{
	static UFunction* pFnBlazeTest_ShowCreateNucleusAccount = NULL;

	if ( ! pFnBlazeTest_ShowCreateNucleusAccount )
		pFnBlazeTest_ShowCreateNucleusAccount = (UFunction*) UObject::GObjObjects()->Data[ 34039 ];

	UBioCheatManager_execBlazeTest_ShowCreateNucleusAccount_Parms BlazeTest_ShowCreateNucleusAccount_Parms;
	memcpy ( &BlazeTest_ShowCreateNucleusAccount_Parms.sEmail, &sEmail, 0xC );
	memcpy ( &BlazeTest_ShowCreateNucleusAccount_Parms.sPassword, &sPassword, 0xC );
	BlazeTest_ShowCreateNucleusAccount_Parms.bEAProducts = bEAProducts;
	BlazeTest_ShowCreateNucleusAccount_Parms.bThirdParty = bThirdParty;
	BlazeTest_ShowCreateNucleusAccount_Parms.bRegisterProduct = bRegisterProduct;
	BlazeTest_ShowCreateNucleusAccount_Parms.bBioWareProducts = bBioWareProducts;
	BlazeTest_ShowCreateNucleusAccount_Parms.bUnderage = bUnderage;

	this->ProcessEvent ( pFnBlazeTest_ShowCreateNucleusAccount, &BlazeTest_ShowCreateNucleusAccount_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_ShowEmailPasswordMismatch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Email                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::BlazeTest_ShowEmailPasswordMismatch ( struct FString Email, struct FString Password )
{
	static UFunction* pFnBlazeTest_ShowEmailPasswordMismatch = NULL;

	if ( ! pFnBlazeTest_ShowEmailPasswordMismatch )
		pFnBlazeTest_ShowEmailPasswordMismatch = (UFunction*) UObject::GObjObjects()->Data[ 34035 ];

	UBioCheatManager_execBlazeTest_ShowEmailPasswordMismatch_Parms BlazeTest_ShowEmailPasswordMismatch_Parms;
	memcpy ( &BlazeTest_ShowEmailPasswordMismatch_Parms.Email, &Email, 0xC );
	memcpy ( &BlazeTest_ShowEmailPasswordMismatch_Parms.Password, &Password, 0xC );

	this->ProcessEvent ( pFnBlazeTest_ShowEmailPasswordMismatch, &BlazeTest_ShowEmailPasswordMismatch_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_ShowMessageBox
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 sTitle                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sButton1Text                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sButton2Text                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sButton3Text                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::BlazeTest_ShowMessageBox ( struct FString sTitle, struct FString sMessage, struct FString sButton1Text, struct FString sButton2Text, struct FString sButton3Text )
{
	static UFunction* pFnBlazeTest_ShowMessageBox = NULL;

	if ( ! pFnBlazeTest_ShowMessageBox )
		pFnBlazeTest_ShowMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 34028 ];

	UBioCheatManager_execBlazeTest_ShowMessageBox_Parms BlazeTest_ShowMessageBox_Parms;
	memcpy ( &BlazeTest_ShowMessageBox_Parms.sTitle, &sTitle, 0xC );
	memcpy ( &BlazeTest_ShowMessageBox_Parms.sMessage, &sMessage, 0xC );
	memcpy ( &BlazeTest_ShowMessageBox_Parms.sButton1Text, &sButton1Text, 0xC );
	memcpy ( &BlazeTest_ShowMessageBox_Parms.sButton2Text, &sButton2Text, 0xC );
	memcpy ( &BlazeTest_ShowMessageBox_Parms.sButton3Text, &sButton3Text, 0xC );

	this->ProcessEvent ( pFnBlazeTest_ShowMessageBox, &BlazeTest_ShowMessageBox_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_ShowNucleusLogin
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Email                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            eScreenState                   ( CPF_Parm )

void UBioCheatManager::BlazeTest_ShowNucleusLogin ( struct FString Email, struct FString Password, int eScreenState )
{
	static UFunction* pFnBlazeTest_ShowNucleusLogin = NULL;

	if ( ! pFnBlazeTest_ShowNucleusLogin )
		pFnBlazeTest_ShowNucleusLogin = (UFunction*) UObject::GObjObjects()->Data[ 34023 ];

	UBioCheatManager_execBlazeTest_ShowNucleusLogin_Parms BlazeTest_ShowNucleusLogin_Parms;
	memcpy ( &BlazeTest_ShowNucleusLogin_Parms.Email, &Email, 0xC );
	memcpy ( &BlazeTest_ShowNucleusLogin_Parms.Password, &Password, 0xC );
	BlazeTest_ShowNucleusLogin_Parms.eScreenState = eScreenState;

	this->ProcessEvent ( pFnBlazeTest_ShowNucleusLogin, &BlazeTest_ShowNucleusLogin_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_ShowIntroPage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::BlazeTest_ShowIntroPage ( )
{
	static UFunction* pFnBlazeTest_ShowIntroPage = NULL;

	if ( ! pFnBlazeTest_ShowIntroPage )
		pFnBlazeTest_ShowIntroPage = (UFunction*) UObject::GObjObjects()->Data[ 34021 ];

	UBioCheatManager_execBlazeTest_ShowIntroPage_Parms BlazeTest_ShowIntroPage_Parms;

	this->ProcessEvent ( pFnBlazeTest_ShowIntroPage, &BlazeTest_ShowIntroPage_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_DestroyGui
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::BlazeTest_DestroyGui ( )
{
	static UFunction* pFnBlazeTest_DestroyGui = NULL;

	if ( ! pFnBlazeTest_DestroyGui )
		pFnBlazeTest_DestroyGui = (UFunction*) UObject::GObjObjects()->Data[ 34018 ];

	UBioCheatManager_execBlazeTest_DestroyGui_Parms BlazeTest_DestroyGui_Parms;

	this->ProcessEvent ( pFnBlazeTest_DestroyGui, &BlazeTest_DestroyGui_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTest_CreateGui
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::BlazeTest_CreateGui ( )
{
	static UFunction* pFnBlazeTest_CreateGui = NULL;

	if ( ! pFnBlazeTest_CreateGui )
		pFnBlazeTest_CreateGui = (UFunction*) UObject::GObjObjects()->Data[ 34013 ];

	UBioCheatManager_execBlazeTest_CreateGui_Parms BlazeTest_CreateGui_Parms;

	this->ProcessEvent ( pFnBlazeTest_CreateGui, &BlazeTest_CreateGui_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTestConsumeCode
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 sCode                          ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::BlazeTestConsumeCode ( struct FString sCode )
{
	static UFunction* pFnBlazeTestConsumeCode = NULL;

	if ( ! pFnBlazeTestConsumeCode )
		pFnBlazeTestConsumeCode = (UFunction*) UObject::GObjObjects()->Data[ 34010 ];

	UBioCheatManager_execBlazeTestConsumeCode_Parms BlazeTestConsumeCode_Parms;
	memcpy ( &BlazeTestConsumeCode_Parms.sCode, &sCode, 0xC );

	this->ProcessEvent ( pFnBlazeTestConsumeCode, &BlazeTestConsumeCode_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTestJacobStory
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::BlazeTestJacobStory ( )
{
	static UFunction* pFnBlazeTestJacobStory = NULL;

	if ( ! pFnBlazeTestJacobStory )
		pFnBlazeTestJacobStory = (UFunction*) UObject::GObjObjects()->Data[ 34006 ];

	UBioCheatManager_execBlazeTestJacobStory_Parms BlazeTestJacobStory_Parms;

	this->ProcessEvent ( pFnBlazeTestJacobStory, &BlazeTestJacobStory_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTestSetAutoLoginOption
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bAutoLogin                     ( CPF_Parm )

void UBioCheatManager::BlazeTestSetAutoLoginOption ( unsigned long bAutoLogin )
{
	static UFunction* pFnBlazeTestSetAutoLoginOption = NULL;

	if ( ! pFnBlazeTestSetAutoLoginOption )
		pFnBlazeTestSetAutoLoginOption = (UFunction*) UObject::GObjObjects()->Data[ 34003 ];

	UBioCheatManager_execBlazeTestSetAutoLoginOption_Parms BlazeTestSetAutoLoginOption_Parms;
	BlazeTestSetAutoLoginOption_Parms.bAutoLogin = bAutoLogin;

	this->ProcessEvent ( pFnBlazeTestSetAutoLoginOption, &BlazeTestSetAutoLoginOption_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BlazeTestSetNucleusSuccessful
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bArg                           ( CPF_Parm )
// unsigned long                  bSave                          ( CPF_OptionalParm | CPF_Parm )

void UBioCheatManager::BlazeTestSetNucleusSuccessful ( unsigned long bArg, unsigned long bSave )
{
	static UFunction* pFnBlazeTestSetNucleusSuccessful = NULL;

	if ( ! pFnBlazeTestSetNucleusSuccessful )
		pFnBlazeTestSetNucleusSuccessful = (UFunction*) UObject::GObjObjects()->Data[ 34000 ];

	UBioCheatManager_execBlazeTestSetNucleusSuccessful_Parms BlazeTestSetNucleusSuccessful_Parms;
	BlazeTestSetNucleusSuccessful_Parms.bArg = bArg;
	BlazeTestSetNucleusSuccessful_Parms.bSave = bSave;

	pFnBlazeTestSetNucleusSuccessful->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBlazeTestSetNucleusSuccessful, &BlazeTestSetNucleusSuccessful_Parms, NULL );

	pFnBlazeTestSetNucleusSuccessful->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.BlazeTestSetCerberusRefused
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bArg                           ( CPF_Parm )
// unsigned long                  bSave                          ( CPF_OptionalParm | CPF_Parm )

void UBioCheatManager::BlazeTestSetCerberusRefused ( unsigned long bArg, unsigned long bSave )
{
	static UFunction* pFnBlazeTestSetCerberusRefused = NULL;

	if ( ! pFnBlazeTestSetCerberusRefused )
		pFnBlazeTestSetCerberusRefused = (UFunction*) UObject::GObjObjects()->Data[ 33997 ];

	UBioCheatManager_execBlazeTestSetCerberusRefused_Parms BlazeTestSetCerberusRefused_Parms;
	BlazeTestSetCerberusRefused_Parms.bArg = bArg;
	BlazeTestSetCerberusRefused_Parms.bSave = bSave;

	pFnBlazeTestSetCerberusRefused->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBlazeTestSetCerberusRefused, &BlazeTestSetCerberusRefused_Parms, NULL );

	pFnBlazeTestSetCerberusRefused->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.BlazeTestSetNucleusRefused
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bArg                           ( CPF_Parm )
// unsigned long                  bSave                          ( CPF_OptionalParm | CPF_Parm )

void UBioCheatManager::BlazeTestSetNucleusRefused ( unsigned long bArg, unsigned long bSave )
{
	static UFunction* pFnBlazeTestSetNucleusRefused = NULL;

	if ( ! pFnBlazeTestSetNucleusRefused )
		pFnBlazeTestSetNucleusRefused = (UFunction*) UObject::GObjObjects()->Data[ 33994 ];

	UBioCheatManager_execBlazeTestSetNucleusRefused_Parms BlazeTestSetNucleusRefused_Parms;
	BlazeTestSetNucleusRefused_Parms.bArg = bArg;
	BlazeTestSetNucleusRefused_Parms.bSave = bSave;

	pFnBlazeTestSetNucleusRefused->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBlazeTestSetNucleusRefused, &BlazeTestSetNucleusRefused_Parms, NULL );

	pFnBlazeTestSetNucleusRefused->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.BlazeTestReconnect
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned char                  connectMode                    ( CPF_Parm )

void UBioCheatManager::BlazeTestReconnect ( unsigned char connectMode )
{
	static UFunction* pFnBlazeTestReconnect = NULL;

	if ( ! pFnBlazeTestReconnect )
		pFnBlazeTestReconnect = (UFunction*) UObject::GObjObjects()->Data[ 33992 ];

	UBioCheatManager_execBlazeTestReconnect_Parms BlazeTestReconnect_Parms;
	BlazeTestReconnect_Parms.connectMode = connectMode;

	pFnBlazeTestReconnect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBlazeTestReconnect, &BlazeTestReconnect_Parms, NULL );

	pFnBlazeTestReconnect->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.BlazeTestAcceptTOS
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bAccept                        ( CPF_Parm )

void UBioCheatManager::BlazeTestAcceptTOS ( unsigned long bAccept )
{
	static UFunction* pFnBlazeTestAcceptTOS = NULL;

	if ( ! pFnBlazeTestAcceptTOS )
		pFnBlazeTestAcceptTOS = (UFunction*) UObject::GObjObjects()->Data[ 33990 ];

	UBioCheatManager_execBlazeTestAcceptTOS_Parms BlazeTestAcceptTOS_Parms;
	BlazeTestAcceptTOS_Parms.bAccept = bAccept;

	pFnBlazeTestAcceptTOS->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBlazeTestAcceptTOS, &BlazeTestAcceptTOS_Parms, NULL );

	pFnBlazeTestAcceptTOS->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.BlazeTestDisconnect
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::BlazeTestDisconnect ( )
{
	static UFunction* pFnBlazeTestDisconnect = NULL;

	if ( ! pFnBlazeTestDisconnect )
		pFnBlazeTestDisconnect = (UFunction*) UObject::GObjObjects()->Data[ 33989 ];

	UBioCheatManager_execBlazeTestDisconnect_Parms BlazeTestDisconnect_Parms;

	pFnBlazeTestDisconnect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBlazeTestDisconnect, &BlazeTestDisconnect_Parms, NULL );

	pFnBlazeTestDisconnect->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.ForceEndRagdoll
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::ForceEndRagdoll ( )
{
	static UFunction* pFnForceEndRagdoll = NULL;

	if ( ! pFnForceEndRagdoll )
		pFnForceEndRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 33988 ];

	UBioCheatManager_execForceEndRagdoll_Parms ForceEndRagdoll_Parms;

	this->ProcessEvent ( pFnForceEndRagdoll, &ForceEndRagdoll_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugCoverCheck
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DebugCoverCheck ( )
{
	static UFunction* pFnDebugCoverCheck = NULL;

	if ( ! pFnDebugCoverCheck )
		pFnDebugCoverCheck = (UFunction*) UObject::GObjObjects()->Data[ 33985 ];

	UBioCheatManager_execDebugCoverCheck_Parms DebugCoverCheck_Parms;

	this->ProcessEvent ( pFnDebugCoverCheck, &DebugCoverCheck_Parms, NULL );
};

// Function SFXGame.BioCheatManager.AdjustMediGel
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// int                            nMediGelAdjust                 ( CPF_Parm )

void UBioCheatManager::AdjustMediGel ( int nMediGelAdjust )
{
	static UFunction* pFnAdjustMediGel = NULL;

	if ( ! pFnAdjustMediGel )
		pFnAdjustMediGel = (UFunction*) UObject::GObjObjects()->Data[ 33982 ];

	UBioCheatManager_execAdjustMediGel_Parms AdjustMediGel_Parms;
	AdjustMediGel_Parms.nMediGelAdjust = nMediGelAdjust;

	this->ProcessEvent ( pFnAdjustMediGel, &AdjustMediGel_Parms, NULL );
};

// Function SFXGame.BioCheatManager.AdjustCredits
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// int                            nCreditAdjust                  ( CPF_Parm )

void UBioCheatManager::AdjustCredits ( int nCreditAdjust )
{
	static UFunction* pFnAdjustCredits = NULL;

	if ( ! pFnAdjustCredits )
		pFnAdjustCredits = (UFunction*) UObject::GObjObjects()->Data[ 33979 ];

	UBioCheatManager_execAdjustCredits_Parms AdjustCredits_Parms;
	AdjustCredits_Parms.nCreditAdjust = nCreditAdjust;

	this->ProcessEvent ( pFnAdjustCredits, &AdjustCredits_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetAimAssistValues
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// struct FVector2D               Adhesion                       ( CPF_Parm )
// float                          AimCorrection                  ( CPF_Parm )
// struct FVector2D               Friction                       ( CPF_Parm )

void UBioCheatManager::SetAimAssistValues ( struct FVector2D Adhesion, float AimCorrection, struct FVector2D Friction )
{
	static UFunction* pFnSetAimAssistValues = NULL;

	if ( ! pFnSetAimAssistValues )
		pFnSetAimAssistValues = (UFunction*) UObject::GObjObjects()->Data[ 33975 ];

	UBioCheatManager_execSetAimAssistValues_Parms SetAimAssistValues_Parms;
	memcpy ( &SetAimAssistValues_Parms.Adhesion, &Adhesion, 0x8 );
	SetAimAssistValues_Parms.AimCorrection = AimCorrection;
	memcpy ( &SetAimAssistValues_Parms.Friction, &Friction, 0x8 );

	this->ProcessEvent ( pFnSetAimAssistValues, &SetAimAssistValues_Parms, NULL );
};

// Function SFXGame.BioCheatManager.PrintMuzzleLoc
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 Target                         ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::PrintMuzzleLoc ( struct FString Target )
{
	static UFunction* pFnPrintMuzzleLoc = NULL;

	if ( ! pFnPrintMuzzleLoc )
		pFnPrintMuzzleLoc = (UFunction*) UObject::GObjObjects()->Data[ 33973 ];

	UBioCheatManager_execPrintMuzzleLoc_Parms PrintMuzzleLoc_Parms;
	memcpy ( &PrintMuzzleLoc_Parms.Target, &Target, 0xC );

	pFnPrintMuzzleLoc->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrintMuzzleLoc, &PrintMuzzleLoc_Parms, NULL );

	pFnPrintMuzzleLoc->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.CamToggleHook
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::CamToggleHook ( )
{
	static UFunction* pFnCamToggleHook = NULL;

	if ( ! pFnCamToggleHook )
		pFnCamToggleHook = (UFunction*) UObject::GObjObjects()->Data[ 33972 ];

	UBioCheatManager_execCamToggleHook_Parms CamToggleHook_Parms;

	this->ProcessEvent ( pFnCamToggleHook, &CamToggleHook_Parms, NULL );
};

// Function SFXGame.BioCheatManager.CamToggleDebug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::CamToggleDebug ( )
{
	static UFunction* pFnCamToggleDebug = NULL;

	if ( ! pFnCamToggleDebug )
		pFnCamToggleDebug = (UFunction*) UObject::GObjObjects()->Data[ 33971 ];

	UBioCheatManager_execCamToggleDebug_Parms CamToggleDebug_Parms;

	this->ProcessEvent ( pFnCamToggleDebug, &CamToggleDebug_Parms, NULL );
};

// Function SFXGame.BioCheatManager.CamLockCollision
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::CamLockCollision ( )
{
	static UFunction* pFnCamLockCollision = NULL;

	if ( ! pFnCamLockCollision )
		pFnCamLockCollision = (UFunction*) UObject::GObjObjects()->Data[ 33970 ];

	UBioCheatManager_execCamLockCollision_Parms CamLockCollision_Parms;

	this->ProcessEvent ( pFnCamLockCollision, &CamLockCollision_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileScaleform
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileScaleform ( )
{
	static UFunction* pFnProfileScaleform = NULL;

	if ( ! pFnProfileScaleform )
		pFnProfileScaleform = (UFunction*) UObject::GObjObjects()->Data[ 33961 ];

	UBioCheatManager_execProfileScaleform_Parms ProfileScaleform_Parms;

	this->ProcessEvent ( pFnProfileScaleform, &ProfileScaleform_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileHenchmen
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileHenchmen ( )
{
	static UFunction* pFnProfileHenchmen = NULL;

	if ( ! pFnProfileHenchmen )
		pFnProfileHenchmen = (UFunction*) UObject::GObjObjects()->Data[ 33946 ];

	UBioCheatManager_execProfileHenchmen_Parms ProfileHenchmen_Parms;

	this->ProcessEvent ( pFnProfileHenchmen, &ProfileHenchmen_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileTicket
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileTicket ( )
{
	static UFunction* pFnProfileTicket = NULL;

	if ( ! pFnProfileTicket )
		pFnProfileTicket = (UFunction*) UObject::GObjObjects()->Data[ 33937 ];

	UBioCheatManager_execProfileTicket_Parms ProfileTicket_Parms;

	this->ProcessEvent ( pFnProfileTicket, &ProfileTicket_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileAnimTree
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioCheatManager::ProfileAnimTree ( )
{
	static UFunction* pFnProfileAnimTree = NULL;

	if ( ! pFnProfileAnimTree )
		pFnProfileAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 33936 ];

	UBioCheatManager_execProfileAnimTree_Parms ProfileAnimTree_Parms;

	pFnProfileAnimTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileAnimTree, &ProfileAnimTree_Parms, NULL );

	pFnProfileAnimTree->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.ProfileLocomotion
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioCheatManager::ProfileLocomotion ( )
{
	static UFunction* pFnProfileLocomotion = NULL;

	if ( ! pFnProfileLocomotion )
		pFnProfileLocomotion = (UFunction*) UObject::GObjObjects()->Data[ 33935 ];

	UBioCheatManager_execProfileLocomotion_Parms ProfileLocomotion_Parms;

	pFnProfileLocomotion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProfileLocomotion, &ProfileLocomotion_Parms, NULL );

	pFnProfileLocomotion->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.ProfileLookAt
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileLookAt ( )
{
	static UFunction* pFnProfileLookAt = NULL;

	if ( ! pFnProfileLookAt )
		pFnProfileLookAt = (UFunction*) UObject::GObjObjects()->Data[ 33933 ];

	UBioCheatManager_execProfileLookAt_Parms ProfileLookAt_Parms;

	this->ProcessEvent ( pFnProfileLookAt, &ProfileLookAt_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileDesignBudget
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileDesignBudget ( )
{
	static UFunction* pFnProfileDesignBudget = NULL;

	if ( ! pFnProfileDesignBudget )
		pFnProfileDesignBudget = (UFunction*) UObject::GObjObjects()->Data[ 33932 ];

	UBioCheatManager_execProfileDesignBudget_Parms ProfileDesignBudget_Parms;

	this->ProcessEvent ( pFnProfileDesignBudget, &ProfileDesignBudget_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileCamera
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileCamera ( )
{
	static UFunction* pFnProfileCamera = NULL;

	if ( ! pFnProfileCamera )
		pFnProfileCamera = (UFunction*) UObject::GObjObjects()->Data[ 33928 ];

	UBioCheatManager_execProfileCamera_Parms ProfileCamera_Parms;

	this->ProcessEvent ( pFnProfileCamera, &ProfileCamera_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileAnim
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileAnim ( )
{
	static UFunction* pFnProfileAnim = NULL;

	if ( ! pFnProfileAnim )
		pFnProfileAnim = (UFunction*) UObject::GObjObjects()->Data[ 33926 ];

	UBioCheatManager_execProfileAnim_Parms ProfileAnim_Parms;

	this->ProcessEvent ( pFnProfileAnim, &ProfileAnim_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileGestures
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileGestures ( )
{
	static UFunction* pFnProfileGestures = NULL;

	if ( ! pFnProfileGestures )
		pFnProfileGestures = (UFunction*) UObject::GObjObjects()->Data[ 33924 ];

	UBioCheatManager_execProfileGestures_Parms ProfileGestures_Parms;

	this->ProcessEvent ( pFnProfileGestures, &ProfileGestures_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileConversationBug
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileConversationBug ( )
{
	static UFunction* pFnProfileConversationBug = NULL;

	if ( ! pFnProfileConversationBug )
		pFnProfileConversationBug = (UFunction*) UObject::GObjObjects()->Data[ 33923 ];

	UBioCheatManager_execProfileConversationBug_Parms ProfileConversationBug_Parms;

	this->ProcessEvent ( pFnProfileConversationBug, &ProfileConversationBug_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileConversation
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileConversation ( )
{
	static UFunction* pFnProfileConversation = NULL;

	if ( ! pFnProfileConversation )
		pFnProfileConversation = (UFunction*) UObject::GObjObjects()->Data[ 33922 ];

	UBioCheatManager_execProfileConversation_Parms ProfileConversation_Parms;

	this->ProcessEvent ( pFnProfileConversation, &ProfileConversation_Parms, NULL );
};

// Function SFXGame.BioCheatManager.EvalCover
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::EvalCover ( )
{
	static UFunction* pFnEvalCover = NULL;

	if ( ! pFnEvalCover )
		pFnEvalCover = (UFunction*) UObject::GObjObjects()->Data[ 33919 ];

	UBioCheatManager_execEvalCover_Parms EvalCover_Parms;

	this->ProcessEvent ( pFnEvalCover, &EvalCover_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileDoor
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileDoor ( )
{
	static UFunction* pFnProfileDoor = NULL;

	if ( ! pFnProfileDoor )
		pFnProfileDoor = (UFunction*) UObject::GObjObjects()->Data[ 33911 ];

	UBioCheatManager_execProfileDoor_Parms ProfileDoor_Parms;

	this->ProcessEvent ( pFnProfileDoor, &ProfileDoor_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileCover
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileCover ( )
{
	static UFunction* pFnProfileCover = NULL;

	if ( ! pFnProfileCover )
		pFnProfileCover = (UFunction*) UObject::GObjObjects()->Data[ 33909 ];

	UBioCheatManager_execProfileCover_Parms ProfileCover_Parms;

	this->ProcessEvent ( pFnProfileCover, &ProfileCover_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileCooldown
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileCooldown ( )
{
	static UFunction* pFnProfileCooldown = NULL;

	if ( ! pFnProfileCooldown )
		pFnProfileCooldown = (UFunction*) UObject::GObjObjects()->Data[ 33902 ];

	UBioCheatManager_execProfileCooldown_Parms ProfileCooldown_Parms;

	this->ProcessEvent ( pFnProfileCooldown, &ProfileCooldown_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ToggleAngstIcons
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::ToggleAngstIcons ( )
{
	static UFunction* pFnToggleAngstIcons = NULL;

	if ( ! pFnToggleAngstIcons )
		pFnToggleAngstIcons = (UFunction*) UObject::GObjObjects()->Data[ 33901 ];

	UBioCheatManager_execToggleAngstIcons_Parms ToggleAngstIcons_Parms;

	this->ProcessEvent ( pFnToggleAngstIcons, &ToggleAngstIcons_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileAngst
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileAngst ( )
{
	static UFunction* pFnProfileAngst = NULL;

	if ( ! pFnProfileAngst )
		pFnProfileAngst = (UFunction*) UObject::GObjObjects()->Data[ 33900 ];

	UBioCheatManager_execProfileAngst_Parms ProfileAngst_Parms;

	this->ProcessEvent ( pFnProfileAngst, &ProfileAngst_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DisplayAngstInfo
// [0x00020002] 
// Parameters infos:
// unsigned long                  bShowIcons                     ( CPF_Parm )
// unsigned long                  bShowProfileData               ( CPF_Parm )

void UBioCheatManager::DisplayAngstInfo ( unsigned long bShowIcons, unsigned long bShowProfileData )
{
	static UFunction* pFnDisplayAngstInfo = NULL;

	if ( ! pFnDisplayAngstInfo )
		pFnDisplayAngstInfo = (UFunction*) UObject::GObjObjects()->Data[ 33896 ];

	UBioCheatManager_execDisplayAngstInfo_Parms DisplayAngstInfo_Parms;
	DisplayAngstInfo_Parms.bShowIcons = bShowIcons;
	DisplayAngstInfo_Parms.bShowProfileData = bShowProfileData;

	this->ProcessEvent ( pFnDisplayAngstInfo, &DisplayAngstInfo_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DisplayAngstWeaponRange
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// unsigned long                  bShowIcons                     ( CPF_Parm )
// unsigned long                  bShowProfileData               ( CPF_Parm )

void UBioCheatManager::DisplayAngstWeaponRange ( class ABioPawn* oPawn, unsigned long bShowIcons, unsigned long bShowProfileData )
{
	static UFunction* pFnDisplayAngstWeaponRange = NULL;

	if ( ! pFnDisplayAngstWeaponRange )
		pFnDisplayAngstWeaponRange = (UFunction*) UObject::GObjObjects()->Data[ 33889 ];

	UBioCheatManager_execDisplayAngstWeaponRange_Parms DisplayAngstWeaponRange_Parms;
	DisplayAngstWeaponRange_Parms.oPawn = oPawn;
	DisplayAngstWeaponRange_Parms.bShowIcons = bShowIcons;
	DisplayAngstWeaponRange_Parms.bShowProfileData = bShowProfileData;

	this->ProcessEvent ( pFnDisplayAngstWeaponRange, &DisplayAngstWeaponRange_Parms, NULL );
};

// Function SFXGame.BioCheatManager.TestTreasure
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::TestTreasure ( )
{
	static UFunction* pFnTestTreasure = NULL;

	if ( ! pFnTestTreasure )
		pFnTestTreasure = (UFunction*) UObject::GObjObjects()->Data[ 33885 ];

	UBioCheatManager_execTestTreasure_Parms TestTreasure_Parms;

	this->ProcessEvent ( pFnTestTreasure, &TestTreasure_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileTech
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileTech ( )
{
	static UFunction* pFnProfileTech = NULL;

	if ( ! pFnProfileTech )
		pFnProfileTech = (UFunction*) UObject::GObjObjects()->Data[ 33877 ];

	UBioCheatManager_execProfileTech_Parms ProfileTech_Parms;

	this->ProcessEvent ( pFnProfileTech, &ProfileTech_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileTreasure
// [0x00820002] 
// Parameters infos:

void UBioCheatManager::ProfileTreasure ( )
{
	static UFunction* pFnProfileTreasure = NULL;

	if ( ! pFnProfileTreasure )
		pFnProfileTreasure = (UFunction*) UObject::GObjObjects()->Data[ 33862 ];

	UBioCheatManager_execProfileTreasure_Parms ProfileTreasure_Parms;

	this->ProcessEvent ( pFnProfileTreasure, &ProfileTreasure_Parms, NULL );
};

// Function SFXGame.BioCheatManager.UnlockAllTech
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            I                              ( CPF_Parm )

void UBioCheatManager::UnlockAllTech ( int I )
{
	static UFunction* pFnUnlockAllTech = NULL;

	if ( ! pFnUnlockAllTech )
		pFnUnlockAllTech = (UFunction*) UObject::GObjObjects()->Data[ 33751 ];

	UBioCheatManager_execUnlockAllTech_Parms UnlockAllTech_Parms;
	UnlockAllTech_Parms.I = I;

	this->ProcessEvent ( pFnUnlockAllTech, &UnlockAllTech_Parms, NULL );
};

// Function SFXGame.BioCheatManager.UnlockAllResearch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void UBioCheatManager::UnlockAllResearch ( unsigned long B )
{
	static UFunction* pFnUnlockAllResearch = NULL;

	if ( ! pFnUnlockAllResearch )
		pFnUnlockAllResearch = (UFunction*) UObject::GObjObjects()->Data[ 33743 ];

	UBioCheatManager_execUnlockAllResearch_Parms UnlockAllResearch_Parms;
	UnlockAllResearch_Parms.B = B;

	this->ProcessEvent ( pFnUnlockAllResearch, &UnlockAllResearch_Parms, NULL );
};

// Function SFXGame.BioCheatManager.UnlockAllTreasure
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void UBioCheatManager::UnlockAllTreasure ( unsigned long B )
{
	static UFunction* pFnUnlockAllTreasure = NULL;

	if ( ! pFnUnlockAllTreasure )
		pFnUnlockAllTreasure = (UFunction*) UObject::GObjObjects()->Data[ 33736 ];

	UBioCheatManager_execUnlockAllTreasure_Parms UnlockAllTreasure_Parms;
	UnlockAllTreasure_Parms.B = B;

	this->ProcessEvent ( pFnUnlockAllTreasure, &UnlockAllTreasure_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileBonuses
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileBonuses ( )
{
	static UFunction* pFnProfileBonuses = NULL;

	if ( ! pFnProfileBonuses )
		pFnProfileBonuses = (UFunction*) UObject::GObjObjects()->Data[ 33702 ];

	UBioCheatManager_execProfileBonuses_Parms ProfileBonuses_Parms;

	this->ProcessEvent ( pFnProfileBonuses, &ProfileBonuses_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileMultipliers
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileMultipliers ( )
{
	static UFunction* pFnProfileMultipliers = NULL;

	if ( ! pFnProfileMultipliers )
		pFnProfileMultipliers = (UFunction*) UObject::GObjObjects()->Data[ 33684 ];

	UBioCheatManager_execProfileMultipliers_Parms ProfileMultipliers_Parms;

	this->ProcessEvent ( pFnProfileMultipliers, &ProfileMultipliers_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DrawTargetLineUtility
// [0x00820002] 
// Parameters infos:

void UBioCheatManager::DrawTargetLineUtility ( )
{
	static UFunction* pFnDrawTargetLineUtility = NULL;

	if ( ! pFnDrawTargetLineUtility )
		pFnDrawTargetLineUtility = (UFunction*) UObject::GObjObjects()->Data[ 33681 ];

	UBioCheatManager_execDrawTargetLineUtility_Parms DrawTargetLineUtility_Parms;

	this->ProcessEvent ( pFnDrawTargetLineUtility, &DrawTargetLineUtility_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DrawAIUtility
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::DrawAIUtility ( )
{
	static UFunction* pFnDrawAIUtility = NULL;

	if ( ! pFnDrawAIUtility )
		pFnDrawAIUtility = (UFunction*) UObject::GObjObjects()->Data[ 33676 ];

	UBioCheatManager_execDrawAIUtility_Parms DrawAIUtility_Parms;

	this->ProcessEvent ( pFnDrawAIUtility, &DrawAIUtility_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfilePower
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfilePower ( )
{
	static UFunction* pFnProfilePower = NULL;

	if ( ! pFnProfilePower )
		pFnProfilePower = (UFunction*) UObject::GObjObjects()->Data[ 33669 ];

	UBioCheatManager_execProfilePower_Parms ProfilePower_Parms;

	this->ProcessEvent ( pFnProfilePower, &ProfilePower_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetProfileChoseMorinth
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  ChoseMorinth                   ( CPF_Parm )

void UBioCheatManager::SetProfileChoseMorinth ( unsigned long ChoseMorinth )
{
	static UFunction* pFnSetProfileChoseMorinth = NULL;

	if ( ! pFnSetProfileChoseMorinth )
		pFnSetProfileChoseMorinth = (UFunction*) UObject::GObjObjects()->Data[ 33666 ];

	UBioCheatManager_execSetProfileChoseMorinth_Parms SetProfileChoseMorinth_Parms;
	SetProfileChoseMorinth_Parms.ChoseMorinth = ChoseMorinth;

	this->ProcessEvent ( pFnSetProfileChoseMorinth, &SetProfileChoseMorinth_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileGameSettings
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileGameSettings ( )
{
	static UFunction* pFnProfileGameSettings = NULL;

	if ( ! pFnProfileGameSettings )
		pFnProfileGameSettings = (UFunction*) UObject::GObjObjects()->Data[ 33664 ];

	UBioCheatManager_execProfileGameSettings_Parms ProfileGameSettings_Parms;

	this->ProcessEvent ( pFnProfileGameSettings, &ProfileGameSettings_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileVehicle
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileVehicle ( )
{
	static UFunction* pFnProfileVehicle = NULL;

	if ( ! pFnProfileVehicle )
		pFnProfileVehicle = (UFunction*) UObject::GObjObjects()->Data[ 33655 ];

	UBioCheatManager_execProfileVehicle_Parms ProfileVehicle_Parms;

	this->ProcessEvent ( pFnProfileVehicle, &ProfileVehicle_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfilePawn
// [0x00820002] 
// Parameters infos:

void UBioCheatManager::ProfilePawn ( )
{
	static UFunction* pFnProfilePawn = NULL;

	if ( ! pFnProfilePawn )
		pFnProfilePawn = (UFunction*) UObject::GObjObjects()->Data[ 33621 ];

	UBioCheatManager_execProfilePawn_Parms ProfilePawn_Parms;

	this->ProcessEvent ( pFnProfilePawn, &ProfilePawn_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileCombatStats
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileCombatStats ( )
{
	static UFunction* pFnProfileCombatStats = NULL;

	if ( ! pFnProfileCombatStats )
		pFnProfileCombatStats = (UFunction*) UObject::GObjObjects()->Data[ 33576 ];

	UBioCheatManager_execProfileCombatStats_Parms ProfileCombatStats_Parms;

	this->ProcessEvent ( pFnProfileCombatStats, &ProfileCombatStats_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ClearCombatStats
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::ClearCombatStats ( )
{
	static UFunction* pFnClearCombatStats = NULL;

	if ( ! pFnClearCombatStats )
		pFnClearCombatStats = (UFunction*) UObject::GObjObjects()->Data[ 33575 ];

	UBioCheatManager_execClearCombatStats_Parms ClearCombatStats_Parms;

	this->ProcessEvent ( pFnClearCombatStats, &ClearCombatStats_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileCombat
// [0x00820002] 
// Parameters infos:

void UBioCheatManager::ProfileCombat ( )
{
	static UFunction* pFnProfileCombat = NULL;

	if ( ! pFnProfileCombat )
		pFnProfileCombat = (UFunction*) UObject::GObjObjects()->Data[ 33535 ];

	UBioCheatManager_execProfileCombat_Parms ProfileCombat_Parms;

	this->ProcessEvent ( pFnProfileCombat, &ProfileCombat_Parms, NULL );
};

// Function SFXGame.BioCheatManager.LockDifficulty
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          fDifficulty                    ( CPF_Parm )

void UBioCheatManager::LockDifficulty ( float fDifficulty )
{
	static UFunction* pFnLockDifficulty = NULL;

	if ( ! pFnLockDifficulty )
		pFnLockDifficulty = (UFunction*) UObject::GObjObjects()->Data[ 33531 ];

	UBioCheatManager_execLockDifficulty_Parms LockDifficulty_Parms;
	LockDifficulty_Parms.fDifficulty = fDifficulty;

	this->ProcessEvent ( pFnLockDifficulty, &LockDifficulty_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileSysDesign
// [0x00820002] 
// Parameters infos:

void UBioCheatManager::ProfileSysDesign ( )
{
	static UFunction* pFnProfileSysDesign = NULL;

	if ( ! pFnProfileSysDesign )
		pFnProfileSysDesign = (UFunction*) UObject::GObjObjects()->Data[ 33490 ];

	UBioCheatManager_execProfileSysDesign_Parms ProfileSysDesign_Parms;

	this->ProcessEvent ( pFnProfileSysDesign, &ProfileSysDesign_Parms, NULL );
};

// Function SFXGame.BioCheatManager.EmptyInventory
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::EmptyInventory ( )
{
	static UFunction* pFnEmptyInventory = NULL;

	if ( ! pFnEmptyInventory )
		pFnEmptyInventory = (UFunction*) UObject::GObjObjects()->Data[ 33487 ];

	UBioCheatManager_execEmptyInventory_Parms EmptyInventory_Parms;

	this->ProcessEvent ( pFnEmptyInventory, &EmptyInventory_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ShowBodyDamage
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )
// unsigned char                  Group                          ( CPF_Parm )

void UBioCheatManager::ShowBodyDamage ( class ABioPawn* Pawn, unsigned char Group )
{
	static UFunction* pFnShowBodyDamage = NULL;

	if ( ! pFnShowBodyDamage )
		pFnShowBodyDamage = (UFunction*) UObject::GObjObjects()->Data[ 33478 ];

	UBioCheatManager_execShowBodyDamage_Parms ShowBodyDamage_Parms;
	ShowBodyDamage_Parms.Pawn = Pawn;
	ShowBodyDamage_Parms.Group = Group;

	this->ProcessEvent ( pFnShowBodyDamage, &ShowBodyDamage_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileDamage
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::ProfileDamage ( )
{
	static UFunction* pFnProfileDamage = NULL;

	if ( ! pFnProfileDamage )
		pFnProfileDamage = (UFunction*) UObject::GObjObjects()->Data[ 33475 ];

	UBioCheatManager_execProfileDamage_Parms ProfileDamage_Parms;

	this->ProcessEvent ( pFnProfileDamage, &ProfileDamage_Parms, NULL );
};

// Function SFXGame.BioCheatManager.PrettyFloat
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// float                          F                              ( CPF_Parm )
// int                            decimals                       ( CPF_OptionalParm | CPF_Parm )

struct FString UBioCheatManager::PrettyFloat ( float F, int decimals )
{
	static UFunction* pFnPrettyFloat = NULL;

	if ( ! pFnPrettyFloat )
		pFnPrettyFloat = (UFunction*) UObject::GObjObjects()->Data[ 33471 ];

	UBioCheatManager_execPrettyFloat_Parms PrettyFloat_Parms;
	PrettyFloat_Parms.F = F;
	PrettyFloat_Parms.decimals = decimals;

	this->ProcessEvent ( pFnPrettyFloat, &PrettyFloat_Parms, NULL );

	return PrettyFloat_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.Actors
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// class UClass*                  ActorClass                     ( CPF_Parm )

void UBioCheatManager::Actors ( class UClass* ActorClass )
{
	static UFunction* pFnActors = NULL;

	if ( ! pFnActors )
		pFnActors = (UFunction*) UObject::GObjObjects()->Data[ 33464 ];

	UBioCheatManager_execActors_Parms Actors_Parms;
	Actors_Parms.ActorClass = ActorClass;

	this->ProcessEvent ( pFnActors, &Actors_Parms, NULL );
};

// Function SFXGame.BioCheatManager.Playpens
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::Playpens ( )
{
	static UFunction* pFnPlaypens = NULL;

	if ( ! pFnPlaypens )
		pFnPlaypens = (UFunction*) UObject::GObjObjects()->Data[ 33455 ];

	UBioCheatManager_execPlaypens_Parms Playpens_Parms;

	this->ProcessEvent ( pFnPlaypens, &Playpens_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetBoolByID
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            PlotID                         ( CPF_Parm )
// unsigned long                  nValue                         ( CPF_Parm )

void UBioCheatManager::SetBoolByID ( int PlotID, unsigned long nValue )
{
	static UFunction* pFnSetBoolByID = NULL;

	if ( ! pFnSetBoolByID )
		pFnSetBoolByID = (UFunction*) UObject::GObjObjects()->Data[ 33451 ];

	UBioCheatManager_execSetBoolByID_Parms SetBoolByID_Parms;
	SetBoolByID_Parms.PlotID = PlotID;
	SetBoolByID_Parms.nValue = nValue;

	this->ProcessEvent ( pFnSetBoolByID, &SetBoolByID_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetBoolByName
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmVar                          ( CPF_Parm )
// unsigned long                  nValue                         ( CPF_Parm )

void UBioCheatManager::SetBoolByName ( struct FName nmVar, unsigned long nValue )
{
	static UFunction* pFnSetBoolByName = NULL;

	if ( ! pFnSetBoolByName )
		pFnSetBoolByName = (UFunction*) UObject::GObjObjects()->Data[ 33447 ];

	UBioCheatManager_execSetBoolByName_Parms SetBoolByName_Parms;
	memcpy ( &SetBoolByName_Parms.nmVar, &nmVar, 0x8 );
	SetBoolByName_Parms.nValue = nValue;

	this->ProcessEvent ( pFnSetBoolByName, &SetBoolByName_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetIntByName
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmVar                          ( CPF_Parm )
// int                            nValue                         ( CPF_Parm )

void UBioCheatManager::SetIntByName ( struct FName nmVar, int nValue )
{
	static UFunction* pFnSetIntByName = NULL;

	if ( ! pFnSetIntByName )
		pFnSetIntByName = (UFunction*) UObject::GObjObjects()->Data[ 33440 ];

	UBioCheatManager_execSetIntByName_Parms SetIntByName_Parms;
	memcpy ( &SetIntByName_Parms.nmVar, &nmVar, 0x8 );
	SetIntByName_Parms.nValue = nValue;

	this->ProcessEvent ( pFnSetIntByName, &SetIntByName_Parms, NULL );
};

// Function SFXGame.BioCheatManager.AwardTreasure
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nTreasureId                    ( CPF_Parm )

void UBioCheatManager::AwardTreasure ( int nTreasureId )
{
	static UFunction* pFnAwardTreasure = NULL;

	if ( ! pFnAwardTreasure )
		pFnAwardTreasure = (UFunction*) UObject::GObjObjects()->Data[ 33411 ];

	UBioCheatManager_execAwardTreasure_Parms AwardTreasure_Parms;
	AwardTreasure_Parms.nTreasureId = nTreasureId;

	this->ProcessEvent ( pFnAwardTreasure, &AwardTreasure_Parms, NULL );
};

// Function SFXGame.BioCheatManager.Distance
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 nmActor1                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 nmActor2                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::Distance ( struct FString nmActor1, struct FString nmActor2 )
{
	static UFunction* pFnDistance = NULL;

	if ( ! pFnDistance )
		pFnDistance = (UFunction*) UObject::GObjObjects()->Data[ 33406 ];

	UBioCheatManager_execDistance_Parms Distance_Parms;
	memcpy ( &Distance_Parms.nmActor1, &nmActor1, 0xC );
	memcpy ( &Distance_Parms.nmActor2, &nmActor2, 0xC );

	this->ProcessEvent ( pFnDistance, &Distance_Parms, NULL );
};

// Function SFXGame.BioCheatManager.EnableAllAI
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void UBioCheatManager::EnableAllAI ( unsigned long bEnable )
{
	static UFunction* pFnEnableAllAI = NULL;

	if ( ! pFnEnableAllAI )
		pFnEnableAllAI = (UFunction*) UObject::GObjObjects()->Data[ 33402 ];

	UBioCheatManager_execEnableAllAI_Parms EnableAllAI_Parms;
	EnableAllAI_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnEnableAllAI, &EnableAllAI_Parms, NULL );
};

// Function SFXGame.BioCheatManager.EnableAI
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmPawn                         ( CPF_Parm )
// unsigned long                  bEnable                        ( CPF_Parm )

void UBioCheatManager::EnableAI ( struct FName nmPawn, unsigned long bEnable )
{
	static UFunction* pFnEnableAI = NULL;

	if ( ! pFnEnableAI )
		pFnEnableAI = (UFunction*) UObject::GObjObjects()->Data[ 33397 ];

	UBioCheatManager_execEnableAI_Parms EnableAI_Parms;
	memcpy ( &EnableAI_Parms.nmPawn, &nmPawn, 0x8 );
	EnableAI_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnEnableAI, &EnableAI_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetPowerPercent
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmPawn                         ( CPF_Parm )
// float                          fPercent                       ( CPF_Parm )

void UBioCheatManager::SetPowerPercent ( struct FName nmPawn, float fPercent )
{
	static UFunction* pFnSetPowerPercent = NULL;

	if ( ! pFnSetPowerPercent )
		pFnSetPowerPercent = (UFunction*) UObject::GObjObjects()->Data[ 33390 ];

	UBioCheatManager_execSetPowerPercent_Parms SetPowerPercent_Parms;
	memcpy ( &SetPowerPercent_Parms.nmPawn, &nmPawn, 0x8 );
	SetPowerPercent_Parms.fPercent = fPercent;

	this->ProcessEvent ( pFnSetPowerPercent, &SetPowerPercent_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugMoveToGoal
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmPawn                         ( CPF_Parm )
// struct FName                   nmGoalActor                    ( CPF_Parm )
// float                          fOffsetDistance                ( CPF_OptionalParm | CPF_Parm )

void UBioCheatManager::DebugMoveToGoal ( struct FName nmPawn, struct FName nmGoalActor, float fOffsetDistance )
{
	static UFunction* pFnDebugMoveToGoal = NULL;

	if ( ! pFnDebugMoveToGoal )
		pFnDebugMoveToGoal = (UFunction*) UObject::GObjObjects()->Data[ 33383 ];

	UBioCheatManager_execDebugMoveToGoal_Parms DebugMoveToGoal_Parms;
	memcpy ( &DebugMoveToGoal_Parms.nmPawn, &nmPawn, 0x8 );
	memcpy ( &DebugMoveToGoal_Parms.nmGoalActor, &nmGoalActor, 0x8 );
	DebugMoveToGoal_Parms.fOffsetDistance = fOffsetDistance;

	this->ProcessEvent ( pFnDebugMoveToGoal, &DebugMoveToGoal_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugMoveToCover
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmPawn                         ( CPF_Parm )
// struct FName                   nmLink                         ( CPF_Parm )
// int                            nSlot                          ( CPF_Parm )

void UBioCheatManager::DebugMoveToCover ( struct FName nmPawn, struct FName nmLink, int nSlot )
{
	static UFunction* pFnDebugMoveToCover = NULL;

	if ( ! pFnDebugMoveToCover )
		pFnDebugMoveToCover = (UFunction*) UObject::GObjObjects()->Data[ 33375 ];

	UBioCheatManager_execDebugMoveToCover_Parms DebugMoveToCover_Parms;
	memcpy ( &DebugMoveToCover_Parms.nmPawn, &nmPawn, 0x8 );
	memcpy ( &DebugMoveToCover_Parms.nmLink, &nmLink, 0x8 );
	DebugMoveToCover_Parms.nSlot = nSlot;

	this->ProcessEvent ( pFnDebugMoveToCover, &DebugMoveToCover_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugDraw_Ammo
// [0x00020002] 
// Parameters infos:
// class ABioHUD*                 HUD                            ( CPF_Parm )

void UBioCheatManager::DebugDraw_Ammo ( class ABioHUD* HUD )
{
	static UFunction* pFnDebugDraw_Ammo = NULL;

	if ( ! pFnDebugDraw_Ammo )
		pFnDebugDraw_Ammo = (UFunction*) UObject::GObjObjects()->Data[ 33369 ];

	UBioCheatManager_execDebugDraw_Ammo_Parms DebugDraw_Ammo_Parms;
	DebugDraw_Ammo_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDebugDraw_Ammo, &DebugDraw_Ammo_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugAmmo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DebugAmmo ( )
{
	static UFunction* pFnDebugAmmo = NULL;

	if ( ! pFnDebugAmmo )
		pFnDebugAmmo = (UFunction*) UObject::GObjObjects()->Data[ 33367 ];

	UBioCheatManager_execDebugAmmo_Parms DebugAmmo_Parms;

	this->ProcessEvent ( pFnDebugAmmo, &DebugAmmo_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugDraw_Distance
// [0x00820002] 
// Parameters infos:
// class ABioHUD*                 HUD                            ( CPF_Parm )

void UBioCheatManager::DebugDraw_Distance ( class ABioHUD* HUD )
{
	static UFunction* pFnDebugDraw_Distance = NULL;

	if ( ! pFnDebugDraw_Distance )
		pFnDebugDraw_Distance = (UFunction*) UObject::GObjObjects()->Data[ 33355 ];

	UBioCheatManager_execDebugDraw_Distance_Parms DebugDraw_Distance_Parms;
	DebugDraw_Distance_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDebugDraw_Distance, &DebugDraw_Distance_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugDistance
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DebugDistance ( )
{
	static UFunction* pFnDebugDistance = NULL;

	if ( ! pFnDebugDistance )
		pFnDebugDistance = (UFunction*) UObject::GObjObjects()->Data[ 33353 ];

	UBioCheatManager_execDebugDistance_Parms DebugDistance_Parms;

	this->ProcessEvent ( pFnDebugDistance, &DebugDistance_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugDraw_LOD
// [0x00820002] 
// Parameters infos:
// class ABioHUD*                 HUD                            ( CPF_Parm )

void UBioCheatManager::DebugDraw_LOD ( class ABioHUD* HUD )
{
	static UFunction* pFnDebugDraw_LOD = NULL;

	if ( ! pFnDebugDraw_LOD )
		pFnDebugDraw_LOD = (UFunction*) UObject::GObjObjects()->Data[ 33340 ];

	UBioCheatManager_execDebugDraw_LOD_Parms DebugDraw_LOD_Parms;
	DebugDraw_LOD_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDebugDraw_LOD, &DebugDraw_LOD_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugLOD
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DebugLOD ( )
{
	static UFunction* pFnDebugLOD = NULL;

	if ( ! pFnDebugLOD )
		pFnDebugLOD = (UFunction*) UObject::GObjObjects()->Data[ 33338 ];

	UBioCheatManager_execDebugLOD_Parms DebugLOD_Parms;

	this->ProcessEvent ( pFnDebugLOD, &DebugLOD_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugDraw_AI
// [0x00820002] 
// Parameters infos:
// class ABioHUD*                 HUD                            ( CPF_Parm )

void UBioCheatManager::DebugDraw_AI ( class ABioHUD* HUD )
{
	static UFunction* pFnDebugDraw_AI = NULL;

	if ( ! pFnDebugDraw_AI )
		pFnDebugDraw_AI = (UFunction*) UObject::GObjObjects()->Data[ 33333 ];

	UBioCheatManager_execDebugDraw_AI_Parms DebugDraw_AI_Parms;
	DebugDraw_AI_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDebugDraw_AI, &DebugDraw_AI_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugAI
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DebugAI ( )
{
	static UFunction* pFnDebugAI = NULL;

	if ( ! pFnDebugAI )
		pFnDebugAI = (UFunction*) UObject::GObjObjects()->Data[ 33331 ];

	UBioCheatManager_execDebugAI_Parms DebugAI_Parms;

	this->ProcessEvent ( pFnDebugAI, &DebugAI_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DebugWeapon ( )
{
	static UFunction* pFnDebugWeapon = NULL;

	if ( ! pFnDebugWeapon )
		pFnDebugWeapon = (UFunction*) UObject::GObjObjects()->Data[ 33330 ];

	UBioCheatManager_execDebugWeapon_Parms DebugWeapon_Parms;

	this->ProcessEvent ( pFnDebugWeapon, &DebugWeapon_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugFriction
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DebugFriction ( )
{
	static UFunction* pFnDebugFriction = NULL;

	if ( ! pFnDebugFriction )
		pFnDebugFriction = (UFunction*) UObject::GObjObjects()->Data[ 33328 ];

	UBioCheatManager_execDebugFriction_Parms DebugFriction_Parms;

	this->ProcessEvent ( pFnDebugFriction, &DebugFriction_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugAdhesion
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DebugAdhesion ( )
{
	static UFunction* pFnDebugAdhesion = NULL;

	if ( ! pFnDebugAdhesion )
		pFnDebugAdhesion = (UFunction*) UObject::GObjObjects()->Data[ 33326 ];

	UBioCheatManager_execDebugAdhesion_Parms DebugAdhesion_Parms;

	this->ProcessEvent ( pFnDebugAdhesion, &DebugAdhesion_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugBioticCharge
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DebugBioticCharge ( )
{
	static UFunction* pFnDebugBioticCharge = NULL;

	if ( ! pFnDebugBioticCharge )
		pFnDebugBioticCharge = (UFunction*) UObject::GObjObjects()->Data[ 33321 ];

	UBioCheatManager_execDebugBioticCharge_Parms DebugBioticCharge_Parms;

	this->ProcessEvent ( pFnDebugBioticCharge, &DebugBioticCharge_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugDraw_Health
// [0x00020002] 
// Parameters infos:
// class ABioHUD*                 HUD                            ( CPF_Parm )

void UBioCheatManager::DebugDraw_Health ( class ABioHUD* HUD )
{
	static UFunction* pFnDebugDraw_Health = NULL;

	if ( ! pFnDebugDraw_Health )
		pFnDebugDraw_Health = (UFunction*) UObject::GObjObjects()->Data[ 33311 ];

	UBioCheatManager_execDebugDraw_Health_Parms DebugDraw_Health_Parms;
	DebugDraw_Health_Parms.HUD = HUD;

	this->ProcessEvent ( pFnDebugDraw_Health, &DebugDraw_Health_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugHealth
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DebugHealth ( )
{
	static UFunction* pFnDebugHealth = NULL;

	if ( ! pFnDebugHealth )
		pFnDebugHealth = (UFunction*) UObject::GObjObjects()->Data[ 33304 ];

	UBioCheatManager_execDebugHealth_Parms DebugHealth_Parms;

	this->ProcessEvent ( pFnDebugHealth, &DebugHealth_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugZoomSnap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DebugZoomSnap ( )
{
	static UFunction* pFnDebugZoomSnap = NULL;

	if ( ! pFnDebugZoomSnap )
		pFnDebugZoomSnap = (UFunction*) UObject::GObjObjects()->Data[ 33302 ];

	UBioCheatManager_execDebugZoomSnap_Parms DebugZoomSnap_Parms;

	this->ProcessEvent ( pFnDebugZoomSnap, &DebugZoomSnap_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugVoc
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DebugVoc ( )
{
	static UFunction* pFnDebugVoc = NULL;

	if ( ! pFnDebugVoc )
		pFnDebugVoc = (UFunction*) UObject::GObjObjects()->Data[ 33299 ];

	UBioCheatManager_execDebugVoc_Parms DebugVoc_Parms;

	this->ProcessEvent ( pFnDebugVoc, &DebugVoc_Parms, NULL );
};

// Function SFXGame.BioCheatManager.AddResourceToRoot
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 sName                          ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::AddResourceToRoot ( struct FString sName )
{
	static UFunction* pFnAddResourceToRoot = NULL;

	if ( ! pFnAddResourceToRoot )
		pFnAddResourceToRoot = (UFunction*) UObject::GObjObjects()->Data[ 33297 ];

	UBioCheatManager_execAddResourceToRoot_Parms AddResourceToRoot_Parms;
	memcpy ( &AddResourceToRoot_Parms.sName, &sName, 0xC );

	pFnAddResourceToRoot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddResourceToRoot, &AddResourceToRoot_Parms, NULL );

	pFnAddResourceToRoot->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.RemoveAIFilter
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmFilter                       ( CPF_Parm )

void UBioCheatManager::RemoveAIFilter ( struct FName nmFilter )
{
	static UFunction* pFnRemoveAIFilter = NULL;

	if ( ! pFnRemoveAIFilter )
		pFnRemoveAIFilter = (UFunction*) UObject::GObjObjects()->Data[ 33293 ];

	UBioCheatManager_execRemoveAIFilter_Parms RemoveAIFilter_Parms;
	memcpy ( &RemoveAIFilter_Parms.nmFilter, &nmFilter, 0x8 );

	this->ProcessEvent ( pFnRemoveAIFilter, &RemoveAIFilter_Parms, NULL );
};

// Function SFXGame.BioCheatManager.AddAIFilter
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmFilter                       ( CPF_Parm )

void UBioCheatManager::AddAIFilter ( struct FName nmFilter )
{
	static UFunction* pFnAddAIFilter = NULL;

	if ( ! pFnAddAIFilter )
		pFnAddAIFilter = (UFunction*) UObject::GObjObjects()->Data[ 33288 ];

	UBioCheatManager_execAddAIFilter_Parms AddAIFilter_Parms;
	memcpy ( &AddAIFilter_Parms.nmFilter, &nmFilter, 0x8 );

	this->ProcessEvent ( pFnAddAIFilter, &AddAIFilter_Parms, NULL );
};

// Function SFXGame.BioCheatManager.AILog
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 nmPawn                         ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bEnable                        ( CPF_Parm )

void UBioCheatManager::AILog ( struct FString nmPawn, unsigned long bEnable )
{
	static UFunction* pFnAILog = NULL;

	if ( ! pFnAILog )
		pFnAILog = (UFunction*) UObject::GObjObjects()->Data[ 33282 ];

	UBioCheatManager_execAILog_Parms AILog_Parms;
	memcpy ( &AILog_Parms.nmPawn, &nmPawn, 0xC );
	AILog_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnAILog, &AILog_Parms, NULL );
};

// Function SFXGame.BioCheatManager.LogAllInstantGameProperties
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::LogAllInstantGameProperties ( )
{
	static UFunction* pFnLogAllInstantGameProperties = NULL;

	if ( ! pFnLogAllInstantGameProperties )
		pFnLogAllInstantGameProperties = (UFunction*) UObject::GObjObjects()->Data[ 33281 ];

	UBioCheatManager_execLogAllInstantGameProperties_Parms LogAllInstantGameProperties_Parms;

	pFnLogAllInstantGameProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogAllInstantGameProperties, &LogAllInstantGameProperties_Parms, NULL );

	pFnLogAllInstantGameProperties->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.LogAllGameProperties
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::LogAllGameProperties ( )
{
	static UFunction* pFnLogAllGameProperties = NULL;

	if ( ! pFnLogAllGameProperties )
		pFnLogAllGameProperties = (UFunction*) UObject::GObjObjects()->Data[ 33280 ];

	UBioCheatManager_execLogAllGameProperties_Parms LogAllGameProperties_Parms;

	pFnLogAllGameProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogAllGameProperties, &LogAllGameProperties_Parms, NULL );

	pFnLogAllGameProperties->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.SetAutoRightUpForceAndTorque
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          fUpLiftForce                   ( CPF_Parm )
// float                          fUprightTorque                 ( CPF_Parm )

void UBioCheatManager::SetAutoRightUpForceAndTorque ( float fUpLiftForce, float fUprightTorque )
{
	static UFunction* pFnSetAutoRightUpForceAndTorque = NULL;

	if ( ! pFnSetAutoRightUpForceAndTorque )
		pFnSetAutoRightUpForceAndTorque = (UFunction*) UObject::GObjObjects()->Data[ 33276 ];

	UBioCheatManager_execSetAutoRightUpForceAndTorque_Parms SetAutoRightUpForceAndTorque_Parms;
	SetAutoRightUpForceAndTorque_Parms.fUpLiftForce = fUpLiftForce;
	SetAutoRightUpForceAndTorque_Parms.fUprightTorque = fUprightTorque;

	this->ProcessEvent ( pFnSetAutoRightUpForceAndTorque, &SetAutoRightUpForceAndTorque_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetVehicleCOMOffsetZ
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          fOffsetZ                       ( CPF_Parm )

void UBioCheatManager::SetVehicleCOMOffsetZ ( float fOffsetZ )
{
	static UFunction* pFnSetVehicleCOMOffsetZ = NULL;

	if ( ! pFnSetVehicleCOMOffsetZ )
		pFnSetVehicleCOMOffsetZ = (UFunction*) UObject::GObjObjects()->Data[ 33273 ];

	UBioCheatManager_execSetVehicleCOMOffsetZ_Parms SetVehicleCOMOffsetZ_Parms;
	SetVehicleCOMOffsetZ_Parms.fOffsetZ = fOffsetZ;

	this->ProcessEvent ( pFnSetVehicleCOMOffsetZ, &SetVehicleCOMOffsetZ_Parms, NULL );
};

// Function SFXGame.BioCheatManager.Mark
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 sComment                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::Mark ( struct FString sComment )
{
	static UFunction* pFnMark = NULL;

	if ( ! pFnMark )
		pFnMark = (UFunction*) UObject::GObjObjects()->Data[ 33271 ];

	UBioCheatManager_execMark_Parms Mark_Parms;
	memcpy ( &Mark_Parms.sComment, &sComment, 0xC );

	pFnMark->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMark, &Mark_Parms, NULL );

	pFnMark->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.ClearDebugLines
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::ClearDebugLines ( )
{
	static UFunction* pFnClearDebugLines = NULL;

	if ( ! pFnClearDebugLines )
		pFnClearDebugLines = (UFunction*) UObject::GObjObjects()->Data[ 33270 ];

	UBioCheatManager_execClearDebugLines_Parms ClearDebugLines_Parms;

	this->ProcessEvent ( pFnClearDebugLines, &ClearDebugLines_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GameOver
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::GameOver ( )
{
	static UFunction* pFnGameOver = NULL;

	if ( ! pFnGameOver )
		pFnGameOver = (UFunction*) UObject::GObjObjects()->Data[ 33268 ];

	UBioCheatManager_execGameOver_Parms GameOver_Parms;

	this->ProcessEvent ( pFnGameOver, &GameOver_Parms, NULL );
};

// Function SFXGame.BioCheatManager.AddPowerInfoToList
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 sPowerInfo                     ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::eventAddPowerInfoToList ( struct FString sPowerInfo )
{
	static UFunction* pFnAddPowerInfoToList = NULL;

	if ( ! pFnAddPowerInfoToList )
		pFnAddPowerInfoToList = (UFunction*) UObject::GObjObjects()->Data[ 33266 ];

	UBioCheatManager_eventAddPowerInfoToList_Parms AddPowerInfoToList_Parms;
	memcpy ( &AddPowerInfoToList_Parms.sPowerInfo, &sPowerInfo, 0xC );

	this->ProcessEvent ( pFnAddPowerInfoToList, &AddPowerInfoToList_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DisplayPowerList
// [0x00020002] 
// Parameters infos:
// class ABioHUD*                 oHUD                           ( CPF_Parm )

void UBioCheatManager::DisplayPowerList ( class ABioHUD* oHUD )
{
	static UFunction* pFnDisplayPowerList = NULL;

	if ( ! pFnDisplayPowerList )
		pFnDisplayPowerList = (UFunction*) UObject::GObjObjects()->Data[ 33261 ];

	UBioCheatManager_execDisplayPowerList_Parms DisplayPowerList_Parms;
	DisplayPowerList_Parms.oHUD = oHUD;

	this->ProcessEvent ( pFnDisplayPowerList, &DisplayPowerList_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ClearPowerList
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::ClearPowerList ( )
{
	static UFunction* pFnClearPowerList = NULL;

	if ( ! pFnClearPowerList )
		pFnClearPowerList = (UFunction*) UObject::GObjObjects()->Data[ 33260 ];

	UBioCheatManager_execClearPowerList_Parms ClearPowerList_Parms;

	this->ProcessEvent ( pFnClearPowerList, &ClearPowerList_Parms, NULL );
};

// Function SFXGame.BioCheatManager.TogglePowerList
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::TogglePowerList ( )
{
	static UFunction* pFnTogglePowerList = NULL;

	if ( ! pFnTogglePowerList )
		pFnTogglePowerList = (UFunction*) UObject::GObjObjects()->Data[ 33259 ];

	UBioCheatManager_execTogglePowerList_Parms TogglePowerList_Parms;

	this->ProcessEvent ( pFnTogglePowerList, &TogglePowerList_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetVehicleExitLog
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bStatus                        ( CPF_Parm )

void UBioCheatManager::SetVehicleExitLog ( unsigned long bStatus )
{
	static UFunction* pFnSetVehicleExitLog = NULL;

	if ( ! pFnSetVehicleExitLog )
		pFnSetVehicleExitLog = (UFunction*) UObject::GObjObjects()->Data[ 33255 ];

	UBioCheatManager_execSetVehicleExitLog_Parms SetVehicleExitLog_Parms;
	SetVehicleExitLog_Parms.bStatus = bStatus;

	this->ProcessEvent ( pFnSetVehicleExitLog, &SetVehicleExitLog_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetCurvePixelError
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// struct FName                   nmPanel                        ( CPF_Parm )
// float                          fError                         ( CPF_Parm )

void UBioCheatManager::SetCurvePixelError ( struct FName nmPanel, float fError )
{
	static UFunction* pFnSetCurvePixelError = NULL;

	if ( ! pFnSetCurvePixelError )
		pFnSetCurvePixelError = (UFunction*) UObject::GObjObjects()->Data[ 33248 ];

	UBioCheatManager_execSetCurvePixelError_Parms SetCurvePixelError_Parms;
	memcpy ( &SetCurvePixelError_Parms.nmPanel, &nmPanel, 0x8 );
	SetCurvePixelError_Parms.fError = fError;

	this->ProcessEvent ( pFnSetCurvePixelError, &SetCurvePixelError_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ToggleEdgeAA
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// struct FName                   nmPanel                        ( CPF_Parm )

void UBioCheatManager::ToggleEdgeAA ( struct FName nmPanel )
{
	static UFunction* pFnToggleEdgeAA = NULL;

	if ( ! pFnToggleEdgeAA )
		pFnToggleEdgeAA = (UFunction*) UObject::GObjObjects()->Data[ 33242 ];

	UBioCheatManager_execToggleEdgeAA_Parms ToggleEdgeAA_Parms;
	memcpy ( &ToggleEdgeAA_Parms.nmPanel, &nmPanel, 0x8 );

	this->ProcessEvent ( pFnToggleEdgeAA, &ToggleEdgeAA_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DisplayPowerImpactText
// [0x00820002] 
// Parameters infos:
// class ABioHUD*                 oHUD                           ( CPF_Parm )

void UBioCheatManager::DisplayPowerImpactText ( class ABioHUD* oHUD )
{
	static UFunction* pFnDisplayPowerImpactText = NULL;

	if ( ! pFnDisplayPowerImpactText )
		pFnDisplayPowerImpactText = (UFunction*) UObject::GObjObjects()->Data[ 33237 ];

	UBioCheatManager_execDisplayPowerImpactText_Parms DisplayPowerImpactText_Parms;
	DisplayPowerImpactText_Parms.oHUD = oHUD;

	this->ProcessEvent ( pFnDisplayPowerImpactText, &DisplayPowerImpactText_Parms, NULL );
};

// Function SFXGame.BioCheatManager.TogglePowerImpact
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::TogglePowerImpact ( )
{
	static UFunction* pFnTogglePowerImpact = NULL;

	if ( ! pFnTogglePowerImpact )
		pFnTogglePowerImpact = (UFunction*) UObject::GObjObjects()->Data[ 33236 ];

	UBioCheatManager_execTogglePowerImpact_Parms TogglePowerImpact_Parms;

	this->ProcessEvent ( pFnTogglePowerImpact, &TogglePowerImpact_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitPlotManagerValueByIndex
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )
// struct FString                 sVariableType                  ( CPF_Parm | CPF_NeedCtorLink )
// float                          fValue                         ( CPF_Parm )

void UBioCheatManager::InitPlotManagerValueByIndex ( int nIndex, struct FString sVariableType, float fValue )
{
	static UFunction* pFnInitPlotManagerValueByIndex = NULL;

	if ( ! pFnInitPlotManagerValueByIndex )
		pFnInitPlotManagerValueByIndex = (UFunction*) UObject::GObjObjects()->Data[ 33229 ];

	UBioCheatManager_execInitPlotManagerValueByIndex_Parms InitPlotManagerValueByIndex_Parms;
	InitPlotManagerValueByIndex_Parms.nIndex = nIndex;
	memcpy ( &InitPlotManagerValueByIndex_Parms.sVariableType, &sVariableType, 0xC );
	InitPlotManagerValueByIndex_Parms.fValue = fValue;

	this->ProcessEvent ( pFnInitPlotManagerValueByIndex, &InitPlotManagerValueByIndex_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DumpPlotManagerValueByIndex
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )
// struct FString                 sVariableType                  ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::DumpPlotManagerValueByIndex ( int nIndex, struct FString sVariableType )
{
	static UFunction* pFnDumpPlotManagerValueByIndex = NULL;

	if ( ! pFnDumpPlotManagerValueByIndex )
		pFnDumpPlotManagerValueByIndex = (UFunction*) UObject::GObjObjects()->Data[ 33222 ];

	UBioCheatManager_execDumpPlotManagerValueByIndex_Parms DumpPlotManagerValueByIndex_Parms;
	DumpPlotManagerValueByIndex_Parms.nIndex = nIndex;
	memcpy ( &DumpPlotManagerValueByIndex_Parms.sVariableType, &sVariableType, 0xC );

	this->ProcessEvent ( pFnDumpPlotManagerValueByIndex, &DumpPlotManagerValueByIndex_Parms, NULL );
};

// Function SFXGame.BioCheatManager.EnablePowerCooldown
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void UBioCheatManager::EnablePowerCooldown ( unsigned long bEnable )
{
	static UFunction* pFnEnablePowerCooldown = NULL;

	if ( ! pFnEnablePowerCooldown )
		pFnEnablePowerCooldown = (UFunction*) UObject::GObjObjects()->Data[ 33219 ];

	UBioCheatManager_execEnablePowerCooldown_Parms EnablePowerCooldown_Parms;
	EnablePowerCooldown_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnEnablePowerCooldown, &EnablePowerCooldown_Parms, NULL );
};

// Function SFXGame.BioCheatManager.EnterCombatStasis
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmPawn                         ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// unsigned long                  bAllowDamage                   ( CPF_Parm )

void UBioCheatManager::EnterCombatStasis ( struct FName nmPawn, float fDuration, unsigned long bAllowDamage )
{
	static UFunction* pFnEnterCombatStasis = NULL;

	if ( ! pFnEnterCombatStasis )
		pFnEnterCombatStasis = (UFunction*) UObject::GObjObjects()->Data[ 33213 ];

	UBioCheatManager_execEnterCombatStasis_Parms EnterCombatStasis_Parms;
	memcpy ( &EnterCombatStasis_Parms.nmPawn, &nmPawn, 0x8 );
	EnterCombatStasis_Parms.fDuration = fDuration;
	EnterCombatStasis_Parms.bAllowDamage = bAllowDamage;

	this->ProcessEvent ( pFnEnterCombatStasis, &EnterCombatStasis_Parms, NULL );
};

// Function SFXGame.BioCheatManager.UsePower
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmPawn                         ( CPF_Parm )
// struct FName                   nmPower                        ( CPF_Parm )

void UBioCheatManager::UsePower ( struct FName nmPawn, struct FName nmPower )
{
	static UFunction* pFnUsePower = NULL;

	if ( ! pFnUsePower )
		pFnUsePower = (UFunction*) UObject::GObjObjects()->Data[ 33207 ];

	UBioCheatManager_execUsePower_Parms UsePower_Parms;
	memcpy ( &UsePower_Parms.nmPawn, &nmPawn, 0x8 );
	memcpy ( &UsePower_Parms.nmPower, &nmPower, 0x8 );

	this->ProcessEvent ( pFnUsePower, &UsePower_Parms, NULL );
};

// Function SFXGame.BioCheatManager.HideStrings
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  i_bHide                        ( CPF_Parm )

void UBioCheatManager::HideStrings ( unsigned long i_bHide )
{
	static UFunction* pFnHideStrings = NULL;

	if ( ! pFnHideStrings )
		pFnHideStrings = (UFunction*) UObject::GObjObjects()->Data[ 33205 ];

	UBioCheatManager_execHideStrings_Parms HideStrings_Parms;
	HideStrings_Parms.i_bHide = i_bHide;

	pFnHideStrings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideStrings, &HideStrings_Parms, NULL );

	pFnHideStrings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.DisplayStringID
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  i_bDisplay                     ( CPF_Parm )

void UBioCheatManager::DisplayStringID ( unsigned long i_bDisplay )
{
	static UFunction* pFnDisplayStringID = NULL;

	if ( ! pFnDisplayStringID )
		pFnDisplayStringID = (UFunction*) UObject::GObjObjects()->Data[ 33203 ];

	UBioCheatManager_execDisplayStringID_Parms DisplayStringID_Parms;
	DisplayStringID_Parms.i_bDisplay = i_bDisplay;

	pFnDisplayStringID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayStringID, &DisplayStringID_Parms, NULL );

	pFnDisplayStringID->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.CodexAudit
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::CodexAudit ( )
{
	static UFunction* pFnCodexAudit = NULL;

	if ( ! pFnCodexAudit )
		pFnCodexAudit = (UFunction*) UObject::GObjObjects()->Data[ 33202 ];

	UBioCheatManager_execCodexAudit_Parms CodexAudit_Parms;

	pFnCodexAudit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCodexAudit, &CodexAudit_Parms, NULL );

	pFnCodexAudit->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.JournalAudit
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::JournalAudit ( )
{
	static UFunction* pFnJournalAudit = NULL;

	if ( ! pFnJournalAudit )
		pFnJournalAudit = (UFunction*) UObject::GObjObjects()->Data[ 33201 ];

	UBioCheatManager_execJournalAudit_Parms JournalAudit_Parms;

	pFnJournalAudit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnJournalAudit, &JournalAudit_Parms, NULL );

	pFnJournalAudit->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.FeignDeath
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmPawn                         ( CPF_Parm )
// unsigned long                  B                              ( CPF_Parm )

void UBioCheatManager::FeignDeath ( struct FName nmPawn, unsigned long B )
{
	static UFunction* pFnFeignDeath = NULL;

	if ( ! pFnFeignDeath )
		pFnFeignDeath = (UFunction*) UObject::GObjObjects()->Data[ 33197 ];

	UBioCheatManager_execFeignDeath_Parms FeignDeath_Parms;
	memcpy ( &FeignDeath_Parms.nmPawn, &nmPawn, 0x8 );
	FeignDeath_Parms.B = B;

	this->ProcessEvent ( pFnFeignDeath, &FeignDeath_Parms, NULL );
};

// Function SFXGame.BioCheatManager.TogglePowerAiming
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::TogglePowerAiming ( )
{
	static UFunction* pFnTogglePowerAiming = NULL;

	if ( ! pFnTogglePowerAiming )
		pFnTogglePowerAiming = (UFunction*) UObject::GObjObjects()->Data[ 33196 ];

	UBioCheatManager_execTogglePowerAiming_Parms TogglePowerAiming_Parms;

	this->ProcessEvent ( pFnTogglePowerAiming, &TogglePowerAiming_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SkynetSavegame
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 sFilename                      ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::SkynetSavegame ( struct FString sFilename )
{
	static UFunction* pFnSkynetSavegame = NULL;

	if ( ! pFnSkynetSavegame )
		pFnSkynetSavegame = (UFunction*) UObject::GObjObjects()->Data[ 33194 ];

	UBioCheatManager_execSkynetSavegame_Parms SkynetSavegame_Parms;
	memcpy ( &SkynetSavegame_Parms.sFilename, &sFilename, 0xC );

	pFnSkynetSavegame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSkynetSavegame, &SkynetSavegame_Parms, NULL );

	pFnSkynetSavegame->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.SkynetScreenshot
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 sFilename                      ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::SkynetScreenshot ( struct FString sFilename )
{
	static UFunction* pFnSkynetScreenshot = NULL;

	if ( ! pFnSkynetScreenshot )
		pFnSkynetScreenshot = (UFunction*) UObject::GObjObjects()->Data[ 33192 ];

	UBioCheatManager_execSkynetScreenshot_Parms SkynetScreenshot_Parms;
	memcpy ( &SkynetScreenshot_Parms.sFilename, &sFilename, 0xC );

	pFnSkynetScreenshot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSkynetScreenshot, &SkynetScreenshot_Parms, NULL );

	pFnSkynetScreenshot->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.GetPowerField
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioPawnBehavior*        targetBehavior                 ( CPF_Parm )
// struct FName                   PowerName                      ( CPF_Parm )
// struct FName                   FieldName                      ( CPF_Parm )

float UBioCheatManager::GetPowerField ( class UBioPawnBehavior* targetBehavior, struct FName PowerName, struct FName FieldName )
{
	static UFunction* pFnGetPowerField = NULL;

	if ( ! pFnGetPowerField )
		pFnGetPowerField = (UFunction*) UObject::GObjObjects()->Data[ 33187 ];

	UBioCheatManager_execGetPowerField_Parms GetPowerField_Parms;
	GetPowerField_Parms.targetBehavior = targetBehavior;
	memcpy ( &GetPowerField_Parms.PowerName, &PowerName, 0x8 );
	memcpy ( &GetPowerField_Parms.FieldName, &FieldName, 0x8 );

	pFnGetPowerField->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPowerField, &GetPowerField_Parms, NULL );

	pFnGetPowerField->FunctionFlags |= 0x400;

	return GetPowerField_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.NotFun
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::NotFun ( )
{
	static UFunction* pFnNotFun = NULL;

	if ( ! pFnNotFun )
		pFnNotFun = (UFunction*) UObject::GObjObjects()->Data[ 33186 ];

	UBioCheatManager_execNotFun_Parms NotFun_Parms;

	pFnNotFun->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotFun, &NotFun_Parms, NULL );

	pFnNotFun->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.SkynetToggleNucleusTelemetry
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::SkynetToggleNucleusTelemetry ( )
{
	static UFunction* pFnSkynetToggleNucleusTelemetry = NULL;

	if ( ! pFnSkynetToggleNucleusTelemetry )
		pFnSkynetToggleNucleusTelemetry = (UFunction*) UObject::GObjObjects()->Data[ 33185 ];

	UBioCheatManager_execSkynetToggleNucleusTelemetry_Parms SkynetToggleNucleusTelemetry_Parms;

	pFnSkynetToggleNucleusTelemetry->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSkynetToggleNucleusTelemetry, &SkynetToggleNucleusTelemetry_Parms, NULL );

	pFnSkynetToggleNucleusTelemetry->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.SkynetToggleSessionDisplay
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::SkynetToggleSessionDisplay ( )
{
	static UFunction* pFnSkynetToggleSessionDisplay = NULL;

	if ( ! pFnSkynetToggleSessionDisplay )
		pFnSkynetToggleSessionDisplay = (UFunction*) UObject::GObjObjects()->Data[ 33184 ];

	UBioCheatManager_execSkynetToggleSessionDisplay_Parms SkynetToggleSessionDisplay_Parms;

	pFnSkynetToggleSessionDisplay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSkynetToggleSessionDisplay, &SkynetToggleSessionDisplay_Parms, NULL );

	pFnSkynetToggleSessionDisplay->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.SkynetToggleVerboseMode
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::SkynetToggleVerboseMode ( )
{
	static UFunction* pFnSkynetToggleVerboseMode = NULL;

	if ( ! pFnSkynetToggleVerboseMode )
		pFnSkynetToggleVerboseMode = (UFunction*) UObject::GObjObjects()->Data[ 33183 ];

	UBioCheatManager_execSkynetToggleVerboseMode_Parms SkynetToggleVerboseMode_Parms;

	pFnSkynetToggleVerboseMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSkynetToggleVerboseMode, &SkynetToggleVerboseMode_Parms, NULL );

	pFnSkynetToggleVerboseMode->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.SkynetToggleSilentMode
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::SkynetToggleSilentMode ( )
{
	static UFunction* pFnSkynetToggleSilentMode = NULL;

	if ( ! pFnSkynetToggleSilentMode )
		pFnSkynetToggleSilentMode = (UFunction*) UObject::GObjObjects()->Data[ 33182 ];

	UBioCheatManager_execSkynetToggleSilentMode_Parms SkynetToggleSilentMode_Parms;

	pFnSkynetToggleSilentMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSkynetToggleSilentMode, &SkynetToggleSilentMode_Parms, NULL );

	pFnSkynetToggleSilentMode->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.SkynetToggleQAPaths
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UBioCheatManager::SkynetToggleQAPaths ( )
{
	static UFunction* pFnSkynetToggleQAPaths = NULL;

	if ( ! pFnSkynetToggleQAPaths )
		pFnSkynetToggleQAPaths = (UFunction*) UObject::GObjObjects()->Data[ 33181 ];

	UBioCheatManager_execSkynetToggleQAPaths_Parms SkynetToggleQAPaths_Parms;

	pFnSkynetToggleQAPaths->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSkynetToggleQAPaths, &SkynetToggleQAPaths_Parms, NULL );

	pFnSkynetToggleQAPaths->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.GiveSuperGun
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::GiveSuperGun ( )
{
	static UFunction* pFnGiveSuperGun = NULL;

	if ( ! pFnGiveSuperGun )
		pFnGiveSuperGun = (UFunction*) UObject::GObjObjects()->Data[ 33173 ];

	UBioCheatManager_execGiveSuperGun_Parms GiveSuperGun_Parms;

	this->ProcessEvent ( pFnGiveSuperGun, &GiveSuperGun_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetPlayerSquadMin1Health
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void UBioCheatManager::SetPlayerSquadMin1Health ( unsigned long B )
{
	static UFunction* pFnSetPlayerSquadMin1Health = NULL;

	if ( ! pFnSetPlayerSquadMin1Health )
		pFnSetPlayerSquadMin1Health = (UFunction*) UObject::GObjObjects()->Data[ 33167 ];

	UBioCheatManager_execSetPlayerSquadMin1Health_Parms SetPlayerSquadMin1Health_Parms;
	SetPlayerSquadMin1Health_Parms.B = B;

	this->ProcessEvent ( pFnSetPlayerSquadMin1Health, &SetPlayerSquadMin1Health_Parms, NULL );
};

// Function SFXGame.BioCheatManager.Min1Health
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void UBioCheatManager::Min1Health ( unsigned long B )
{
	static UFunction* pFnMin1Health = NULL;

	if ( ! pFnMin1Health )
		pFnMin1Health = (UFunction*) UObject::GObjObjects()->Data[ 33165 ];

	UBioCheatManager_execMin1Health_Parms Min1Health_Parms;
	Min1Health_Parms.B = B;

	this->ProcessEvent ( pFnMin1Health, &Min1Health_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ToggleSFHUD
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::ToggleSFHUD ( )
{
	static UFunction* pFnToggleSFHUD = NULL;

	if ( ! pFnToggleSFHUD )
		pFnToggleSFHUD = (UFunction*) UObject::GObjObjects()->Data[ 33162 ];

	UBioCheatManager_execToggleSFHUD_Parms ToggleSFHUD_Parms;

	this->ProcessEvent ( pFnToggleSFHUD, &ToggleSFHUD_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DownloadContent
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::DownloadContent ( )
{
	static UFunction* pFnDownloadContent = NULL;

	if ( ! pFnDownloadContent )
		pFnDownloadContent = (UFunction*) UObject::GObjObjects()->Data[ 33161 ];

	UBioCheatManager_execDownloadContent_Parms DownloadContent_Parms;

	this->ProcessEvent ( pFnDownloadContent, &DownloadContent_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ShowMarketplaceUI
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioCheatManager::ShowMarketplaceUI ( )
{
	static UFunction* pFnShowMarketplaceUI = NULL;

	if ( ! pFnShowMarketplaceUI )
		pFnShowMarketplaceUI = (UFunction*) UObject::GObjObjects()->Data[ 33160 ];

	UBioCheatManager_execShowMarketplaceUI_Parms ShowMarketplaceUI_Parms;

	pFnShowMarketplaceUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowMarketplaceUI, &ShowMarketplaceUI_Parms, NULL );

	pFnShowMarketplaceUI->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.GiveItem
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 sTarget                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FName                   nmItemLabel                    ( CPF_Parm )

void UBioCheatManager::GiveItem ( struct FString sTarget, struct FName nmItemLabel )
{
	static UFunction* pFnGiveItem = NULL;

	if ( ! pFnGiveItem )
		pFnGiveItem = (UFunction*) UObject::GObjObjects()->Data[ 33154 ];

	UBioCheatManager_execGiveItem_Parms GiveItem_Parms;
	memcpy ( &GiveItem_Parms.sTarget, &sTarget, 0xC );
	memcpy ( &GiveItem_Parms.nmItemLabel, &nmItemLabel, 0x8 );

	this->ProcessEvent ( pFnGiveItem, &GiveItem_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ResetWeapons
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 sTarget                        ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::ResetWeapons ( struct FString sTarget )
{
	static UFunction* pFnResetWeapons = NULL;

	if ( ! pFnResetWeapons )
		pFnResetWeapons = (UFunction*) UObject::GObjObjects()->Data[ 33151 ];

	UBioCheatManager_execResetWeapons_Parms ResetWeapons_Parms;
	memcpy ( &ResetWeapons_Parms.sTarget, &sTarget, 0xC );

	this->ProcessEvent ( pFnResetWeapons, &ResetWeapons_Parms, NULL );
};

// Function SFXGame.BioCheatManager.FindWeaponClass
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 WeaponClassName                ( CPF_Parm | CPF_NeedCtorLink )

class UClass* UBioCheatManager::FindWeaponClass ( struct FString WeaponClassName )
{
	static UFunction* pFnFindWeaponClass = NULL;

	if ( ! pFnFindWeaponClass )
		pFnFindWeaponClass = (UFunction*) UObject::GObjObjects()->Data[ 33145 ];

	UBioCheatManager_execFindWeaponClass_Parms FindWeaponClass_Parms;
	memcpy ( &FindWeaponClass_Parms.WeaponClassName, &WeaponClassName, 0xC );

	this->ProcessEvent ( pFnFindWeaponClass, &FindWeaponClass_Parms, NULL );

	return FindWeaponClass_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.BasicWeapons
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::BasicWeapons ( )
{
	static UFunction* pFnBasicWeapons = NULL;

	if ( ! pFnBasicWeapons )
		pFnBasicWeapons = (UFunction*) UObject::GObjObjects()->Data[ 33141 ];

	UBioCheatManager_execBasicWeapons_Parms BasicWeapons_Parms;

	this->ProcessEvent ( pFnBasicWeapons, &BasicWeapons_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitFuelEfficiency
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          fEff                           ( CPF_Parm )

void UBioCheatManager::InitFuelEfficiency ( float fEff )
{
	static UFunction* pFnInitFuelEfficiency = NULL;

	if ( ! pFnInitFuelEfficiency )
		pFnInitFuelEfficiency = (UFunction*) UObject::GObjObjects()->Data[ 33138 ];

	UBioCheatManager_execInitFuelEfficiency_Parms InitFuelEfficiency_Parms;
	InitFuelEfficiency_Parms.fEff = fEff;

	this->ProcessEvent ( pFnInitFuelEfficiency, &InitFuelEfficiency_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitMaxFuel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          FMax                           ( CPF_Parm )

void UBioCheatManager::InitMaxFuel ( float FMax )
{
	static UFunction* pFnInitMaxFuel = NULL;

	if ( ! pFnInitMaxFuel )
		pFnInitMaxFuel = (UFunction*) UObject::GObjObjects()->Data[ 33135 ];

	UBioCheatManager_execInitMaxFuel_Parms InitMaxFuel_Parms;
	InitMaxFuel_Parms.FMax = FMax;

	this->ProcessEvent ( pFnInitMaxFuel, &InitMaxFuel_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitFuel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          fAmt                           ( CPF_Parm )

void UBioCheatManager::InitFuel ( float fAmt )
{
	static UFunction* pFnInitFuel = NULL;

	if ( ! pFnInitFuel )
		pFnInitFuel = (UFunction*) UObject::GObjObjects()->Data[ 33132 ];

	UBioCheatManager_execInitFuel_Parms InitFuel_Parms;
	InitFuel_Parms.fAmt = fAmt;

	this->ProcessEvent ( pFnInitFuel, &InitFuel_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitAmmo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nAmmo                          ( CPF_Parm )

void UBioCheatManager::InitAmmo ( int nAmmo )
{
	static UFunction* pFnInitAmmo = NULL;

	if ( ! pFnInitAmmo )
		pFnInitAmmo = (UFunction*) UObject::GObjObjects()->Data[ 33125 ];

	UBioCheatManager_execInitAmmo_Parms InitAmmo_Parms;
	InitAmmo_Parms.nAmmo = nAmmo;

	this->ProcessEvent ( pFnInitAmmo, &InitAmmo_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitProbes
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nResource                      ( CPF_Parm )

void UBioCheatManager::InitProbes ( int nResource )
{
	static UFunction* pFnInitProbes = NULL;

	if ( ! pFnInitProbes )
		pFnInitProbes = (UFunction*) UObject::GObjObjects()->Data[ 33123 ];

	UBioCheatManager_execInitProbes_Parms InitProbes_Parms;
	InitProbes_Parms.nResource = nResource;

	this->ProcessEvent ( pFnInitProbes, &InitProbes_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitMedigel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nMedigel                       ( CPF_Parm )

void UBioCheatManager::InitMedigel ( int nMedigel )
{
	static UFunction* pFnInitMedigel = NULL;

	if ( ! pFnInitMedigel )
		pFnInitMedigel = (UFunction*) UObject::GObjObjects()->Data[ 33121 ];

	UBioCheatManager_execInitMedigel_Parms InitMedigel_Parms;
	InitMedigel_Parms.nMedigel = nMedigel;

	this->ProcessEvent ( pFnInitMedigel, &InitMedigel_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitPlatinum
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nResource                      ( CPF_Parm )

void UBioCheatManager::InitPlatinum ( int nResource )
{
	static UFunction* pFnInitPlatinum = NULL;

	if ( ! pFnInitPlatinum )
		pFnInitPlatinum = (UFunction*) UObject::GObjObjects()->Data[ 33119 ];

	UBioCheatManager_execInitPlatinum_Parms InitPlatinum_Parms;
	InitPlatinum_Parms.nResource = nResource;

	this->ProcessEvent ( pFnInitPlatinum, &InitPlatinum_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitSalvage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nSalvage                       ( CPF_Parm )

void UBioCheatManager::InitSalvage ( int nSalvage )
{
	static UFunction* pFnInitSalvage = NULL;

	if ( ! pFnInitSalvage )
		pFnInitSalvage = (UFunction*) UObject::GObjObjects()->Data[ 33117 ];

	UBioCheatManager_execInitSalvage_Parms InitSalvage_Parms;
	InitSalvage_Parms.nSalvage = nSalvage;

	this->ProcessEvent ( pFnInitSalvage, &InitSalvage_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitIridium
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nResource                      ( CPF_Parm )

void UBioCheatManager::InitIridium ( int nResource )
{
	static UFunction* pFnInitIridium = NULL;

	if ( ! pFnInitIridium )
		pFnInitIridium = (UFunction*) UObject::GObjObjects()->Data[ 33115 ];

	UBioCheatManager_execInitIridium_Parms InitIridium_Parms;
	InitIridium_Parms.nResource = nResource;

	this->ProcessEvent ( pFnInitIridium, &InitIridium_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitEezo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nResource                      ( CPF_Parm )

void UBioCheatManager::InitEezo ( int nResource )
{
	static UFunction* pFnInitEezo = NULL;

	if ( ! pFnInitEezo )
		pFnInitEezo = (UFunction*) UObject::GObjObjects()->Data[ 33113 ];

	UBioCheatManager_execInitEezo_Parms InitEezo_Parms;
	InitEezo_Parms.nResource = nResource;

	this->ProcessEvent ( pFnInitEezo, &InitEezo_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitPalladium
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nResource                      ( CPF_Parm )

void UBioCheatManager::InitPalladium ( int nResource )
{
	static UFunction* pFnInitPalladium = NULL;

	if ( ! pFnInitPalladium )
		pFnInitPalladium = (UFunction*) UObject::GObjObjects()->Data[ 33111 ];

	UBioCheatManager_execInitPalladium_Parms InitPalladium_Parms;
	InitPalladium_Parms.nResource = nResource;

	this->ProcessEvent ( pFnInitPalladium, &InitPalladium_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitCredits
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nCredits                       ( CPF_Parm )

void UBioCheatManager::InitCredits ( int nCredits )
{
	static UFunction* pFnInitCredits = NULL;

	if ( ! pFnInitCredits )
		pFnInitCredits = (UFunction*) UObject::GObjObjects()->Data[ 33109 ];

	UBioCheatManager_execInitCredits_Parms InitCredits_Parms;
	InitCredits_Parms.nCredits = nCredits;

	this->ProcessEvent ( pFnInitCredits, &InitCredits_Parms, NULL );
};

// Function SFXGame.BioCheatManager.InitResource
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  eResourceType                  ( CPF_Parm )
// int                            nAmt                           ( CPF_Parm )

void UBioCheatManager::InitResource ( unsigned char eResourceType, int nAmt )
{
	static UFunction* pFnInitResource = NULL;

	if ( ! pFnInitResource )
		pFnInitResource = (UFunction*) UObject::GObjObjects()->Data[ 33103 ];

	UBioCheatManager_execInitResource_Parms InitResource_Parms;
	InitResource_Parms.eResourceType = eResourceType;
	InitResource_Parms.nAmt = nAmt;

	this->ProcessEvent ( pFnInitResource, &InitResource_Parms, NULL );
};

// Function SFXGame.BioCheatManager.EnableDamage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void UBioCheatManager::EnableDamage ( unsigned long B )
{
	static UFunction* pFnEnableDamage = NULL;

	if ( ! pFnEnableDamage )
		pFnEnableDamage = (UFunction*) UObject::GObjObjects()->Data[ 33099 ];

	UBioCheatManager_execEnableDamage_Parms EnableDamage_Parms;
	EnableDamage_Parms.B = B;

	this->ProcessEvent ( pFnEnableDamage, &EnableDamage_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetUIWorldActor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AActor* UBioCheatManager::GetUIWorldActor ( )
{
	static UFunction* pFnGetUIWorldActor = NULL;

	if ( ! pFnGetUIWorldActor )
		pFnGetUIWorldActor = (UFunction*) UObject::GObjObjects()->Data[ 33097 ];

	UBioCheatManager_execGetUIWorldActor_Parms GetUIWorldActor_Parms;

	pFnGetUIWorldActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUIWorldActor, &GetUIWorldActor_Parms, NULL );

	pFnGetUIWorldActor->FunctionFlags |= 0x400;

	return GetUIWorldActor_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.GetActorFromString
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Str                            ( CPF_Parm | CPF_NeedCtorLink )

class AActor* UBioCheatManager::GetActorFromString ( struct FString Str )
{
	static UFunction* pFnGetActorFromString = NULL;

	if ( ! pFnGetActorFromString )
		pFnGetActorFromString = (UFunction*) UObject::GObjObjects()->Data[ 32911 ];

	UBioCheatManager_execGetActorFromString_Parms GetActorFromString_Parms;
	memcpy ( &GetActorFromString_Parms.Str, &Str, 0xC );

	pFnGetActorFromString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActorFromString, &GetActorFromString_Parms, NULL );

	pFnGetActorFromString->FunctionFlags |= 0x400;

	return GetActorFromString_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.TestFalling
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   nmTarget                       ( CPF_Parm )

void UBioCheatManager::TestFalling ( struct FName nmTarget )
{
	static UFunction* pFnTestFalling = NULL;

	if ( ! pFnTestFalling )
		pFnTestFalling = (UFunction*) UObject::GObjObjects()->Data[ 33090 ];

	UBioCheatManager_execTestFalling_Parms TestFalling_Parms;
	memcpy ( &TestFalling_Parms.nmTarget, &nmTarget, 0x8 );

	this->ProcessEvent ( pFnTestFalling, &TestFalling_Parms, NULL );
};

// Function SFXGame.BioCheatManager.TestRagdoll
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 sWhitespaceDelimitedArguments  ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UBioCheatManager::TestRagdoll ( struct FString sWhitespaceDelimitedArguments )
{
	static UFunction* pFnTestRagdoll = NULL;

	if ( ! pFnTestRagdoll )
		pFnTestRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 33088 ];

	UBioCheatManager_execTestRagdoll_Parms TestRagdoll_Parms;
	memcpy ( &TestRagdoll_Parms.sWhitespaceDelimitedArguments, &sWhitespaceDelimitedArguments, 0xC );

	pFnTestRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTestRagdoll, &TestRagdoll_Parms, NULL );

	pFnTestRagdoll->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.DebugSpawnPrefab
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nTestNum                       ( CPF_Parm )

void UBioCheatManager::DebugSpawnPrefab ( int nTestNum )
{
	static UFunction* pFnDebugSpawnPrefab = NULL;

	if ( ! pFnDebugSpawnPrefab )
		pFnDebugSpawnPrefab = (UFunction*) UObject::GObjObjects()->Data[ 33086 ];

	UBioCheatManager_execDebugSpawnPrefab_Parms DebugSpawnPrefab_Parms;
	DebugSpawnPrefab_Parms.nTestNum = nTestNum;

	pFnDebugSpawnPrefab->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugSpawnPrefab, &DebugSpawnPrefab_Parms, NULL );

	pFnDebugSpawnPrefab->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.TestPrefab
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nTestNum                       ( CPF_Parm )

void UBioCheatManager::TestPrefab ( int nTestNum )
{
	static UFunction* pFnTestPrefab = NULL;

	if ( ! pFnTestPrefab )
		pFnTestPrefab = (UFunction*) UObject::GObjObjects()->Data[ 33084 ];

	UBioCheatManager_execTestPrefab_Parms TestPrefab_Parms;
	TestPrefab_Parms.nTestNum = nTestNum;

	this->ProcessEvent ( pFnTestPrefab, &TestPrefab_Parms, NULL );
};

// Function SFXGame.BioCheatManager.BioTransition
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nTransition                    ( CPF_Parm )
// int                            nParam                         ( CPF_Parm )

void UBioCheatManager::BioTransition ( int nTransition, int nParam )
{
	static UFunction* pFnBioTransition = NULL;

	if ( ! pFnBioTransition )
		pFnBioTransition = (UFunction*) UObject::GObjObjects()->Data[ 33081 ];

	UBioCheatManager_execBioTransition_Parms BioTransition_Parms;
	BioTransition_Parms.nTransition = nTransition;
	BioTransition_Parms.nParam = nParam;

	pFnBioTransition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioTransition, &BioTransition_Parms, NULL );

	pFnBioTransition->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.BioLoadState
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nSaveStateSlot                 ( CPF_Parm )

void UBioCheatManager::BioLoadState ( int nSaveStateSlot )
{
	static UFunction* pFnBioLoadState = NULL;

	if ( ! pFnBioLoadState )
		pFnBioLoadState = (UFunction*) UObject::GObjObjects()->Data[ 33079 ];

	UBioCheatManager_execBioLoadState_Parms BioLoadState_Parms;
	BioLoadState_Parms.nSaveStateSlot = nSaveStateSlot;

	pFnBioLoadState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioLoadState, &BioLoadState_Parms, NULL );

	pFnBioLoadState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.BioSaveState
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nSaveStateSlot                 ( CPF_Parm )

void UBioCheatManager::BioSaveState ( int nSaveStateSlot )
{
	static UFunction* pFnBioSaveState = NULL;

	if ( ! pFnBioSaveState )
		pFnBioSaveState = (UFunction*) UObject::GObjObjects()->Data[ 33077 ];

	UBioCheatManager_execBioSaveState_Parms BioSaveState_Parms;
	BioSaveState_Parms.nSaveStateSlot = nSaveStateSlot;

	pFnBioSaveState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioSaveState, &BioSaveState_Parms, NULL );

	pFnBioSaveState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.GiveSpectreTalents
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::GiveSpectreTalents ( )
{
	static UFunction* pFnGiveSpectreTalents = NULL;

	if ( ! pFnGiveSpectreTalents )
		pFnGiveSpectreTalents = (UFunction*) UObject::GObjObjects()->Data[ 33076 ];

	UBioCheatManager_execGiveSpectreTalents_Parms GiveSpectreTalents_Parms;

	this->ProcessEvent ( pFnGiveSpectreTalents, &GiveSpectreTalents_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ScaleTalentByIncrement
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            TalentID                       ( CPF_Parm )
// int                            rankIncrement                  ( CPF_Parm )

void UBioCheatManager::ScaleTalentByIncrement ( int TalentID, int rankIncrement )
{
	static UFunction* pFnScaleTalentByIncrement = NULL;

	if ( ! pFnScaleTalentByIncrement )
		pFnScaleTalentByIncrement = (UFunction*) UObject::GObjObjects()->Data[ 33071 ];

	UBioCheatManager_execScaleTalentByIncrement_Parms ScaleTalentByIncrement_Parms;
	ScaleTalentByIncrement_Parms.TalentID = TalentID;
	ScaleTalentByIncrement_Parms.rankIncrement = rankIncrement;

	this->ProcessEvent ( pFnScaleTalentByIncrement, &ScaleTalentByIncrement_Parms, NULL );
};

// Function SFXGame.BioCheatManager.IncreaseTalentMaxRankByIncrement
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            TalentID                       ( CPF_Parm )
// int                            MaxRankIncrement               ( CPF_Parm )

void UBioCheatManager::IncreaseTalentMaxRankByIncrement ( int TalentID, int MaxRankIncrement )
{
	static UFunction* pFnIncreaseTalentMaxRankByIncrement = NULL;

	if ( ! pFnIncreaseTalentMaxRankByIncrement )
		pFnIncreaseTalentMaxRankByIncrement = (UFunction*) UObject::GObjObjects()->Data[ 33066 ];

	UBioCheatManager_execIncreaseTalentMaxRankByIncrement_Parms IncreaseTalentMaxRankByIncrement_Parms;
	IncreaseTalentMaxRankByIncrement_Parms.TalentID = TalentID;
	IncreaseTalentMaxRankByIncrement_Parms.MaxRankIncrement = MaxRankIncrement;

	this->ProcessEvent ( pFnIncreaseTalentMaxRankByIncrement, &IncreaseTalentMaxRankByIncrement_Parms, NULL );
};

// Function SFXGame.BioCheatManager.IncreaseTalentMaxRank
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            TalentID                       ( CPF_Parm )
// int                            MaxRank                        ( CPF_Parm )

void UBioCheatManager::IncreaseTalentMaxRank ( int TalentID, int MaxRank )
{
	static UFunction* pFnIncreaseTalentMaxRank = NULL;

	if ( ! pFnIncreaseTalentMaxRank )
		pFnIncreaseTalentMaxRank = (UFunction*) UObject::GObjObjects()->Data[ 33061 ];

	UBioCheatManager_execIncreaseTalentMaxRank_Parms IncreaseTalentMaxRank_Parms;
	IncreaseTalentMaxRank_Parms.TalentID = TalentID;
	IncreaseTalentMaxRank_Parms.MaxRank = MaxRank;

	this->ProcessEvent ( pFnIncreaseTalentMaxRank, &IncreaseTalentMaxRank_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GiveBonusTalent
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            bonusIdentifier                ( CPF_Parm )

void UBioCheatManager::GiveBonusTalent ( int bonusIdentifier )
{
	static UFunction* pFnGiveBonusTalent = NULL;

	if ( ! pFnGiveBonusTalent )
		pFnGiveBonusTalent = (UFunction*) UObject::GObjObjects()->Data[ 33056 ];

	UBioCheatManager_execGiveBonusTalent_Parms GiveBonusTalent_Parms;
	GiveBonusTalent_Parms.bonusIdentifier = bonusIdentifier;

	this->ProcessEvent ( pFnGiveBonusTalent, &GiveBonusTalent_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GiveTalentPoints
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            nNumPoints                     ( CPF_Parm )

void UBioCheatManager::GiveTalentPoints ( int nNumPoints )
{
	static UFunction* pFnGiveTalentPoints = NULL;

	if ( ! pFnGiveTalentPoints )
		pFnGiveTalentPoints = (UFunction*) UObject::GObjObjects()->Data[ 33051 ];

	UBioCheatManager_execGiveTalentPoints_Parms GiveTalentPoints_Parms;
	GiveTalentPoints_Parms.nNumPoints = nNumPoints;

	this->ProcessEvent ( pFnGiveTalentPoints, &GiveTalentPoints_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ShowVocInfo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 PawnTag                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 eventStr                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::ShowVocInfo ( struct FString PawnTag, struct FString eventStr )
{
	static UFunction* pFnShowVocInfo = NULL;

	if ( ! pFnShowVocInfo )
		pFnShowVocInfo = (UFunction*) UObject::GObjObjects()->Data[ 33033 ];

	UBioCheatManager_execShowVocInfo_Parms ShowVocInfo_Parms;
	memcpy ( &ShowVocInfo_Parms.PawnTag, &PawnTag, 0xC );
	memcpy ( &ShowVocInfo_Parms.eventStr, &eventStr, 0xC );

	this->ProcessEvent ( pFnShowVocInfo, &ShowVocInfo_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugVocLine
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Instigator                     ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Recipient                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 eventStr                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::DebugVocLine ( struct FString Instigator, struct FString Recipient, struct FString eventStr )
{
	static UFunction* pFnDebugVocLine = NULL;

	if ( ! pFnDebugVocLine )
		pFnDebugVocLine = (UFunction*) UObject::GObjObjects()->Data[ 33023 ];

	UBioCheatManager_execDebugVocLine_Parms DebugVocLine_Parms;
	memcpy ( &DebugVocLine_Parms.Instigator, &Instigator, 0xC );
	memcpy ( &DebugVocLine_Parms.Recipient, &Recipient, 0xC );
	memcpy ( &DebugVocLine_Parms.eventStr, &eventStr, 0xC );

	this->ProcessEvent ( pFnDebugVocLine, &DebugVocLine_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DebugVocSystem
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bEnable                        ( CPF_Parm )

void UBioCheatManager::DebugVocSystem ( unsigned long bEnable )
{
	static UFunction* pFnDebugVocSystem = NULL;

	if ( ! pFnDebugVocSystem )
		pFnDebugVocSystem = (UFunction*) UObject::GObjObjects()->Data[ 32986 ];

	UBioCheatManager_execDebugVocSystem_Parms DebugVocSystem_Parms;
	DebugVocSystem_Parms.bEnable = bEnable;

	this->ProcessEvent ( pFnDebugVocSystem, &DebugVocSystem_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GiveXP
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          XPValue                        ( CPF_Parm )

void UBioCheatManager::GiveXP ( float XPValue )
{
	static UFunction* pFnGiveXP = NULL;

	if ( ! pFnGiveXP )
		pFnGiveXP = (UFunction*) UObject::GObjObjects()->Data[ 32983 ];

	UBioCheatManager_execGiveXP_Parms GiveXP_Parms;
	GiveXP_Parms.XPValue = XPValue;

	this->ProcessEvent ( pFnGiveXP, &GiveXP_Parms, NULL );
};

// Function SFXGame.BioCheatManager.TestConditionals
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::TestConditionals ( )
{
	static UFunction* pFnTestConditionals = NULL;

	if ( ! pFnTestConditionals )
		pFnTestConditionals = (UFunction*) UObject::GObjObjects()->Data[ 32979 ];

	UBioCheatManager_execTestConditionals_Parms TestConditionals_Parms;

	this->ProcessEvent ( pFnTestConditionals, &TestConditionals_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SetVehicleCamRadiusPoint
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )
// float                          fDegVal                        ( CPF_Parm )
// float                          fScaleVal                      ( CPF_Parm )

void UBioCheatManager::SetVehicleCamRadiusPoint ( int nIndex, float fDegVal, float fScaleVal )
{
	static UFunction* pFnSetVehicleCamRadiusPoint = NULL;

	if ( ! pFnSetVehicleCamRadiusPoint )
		pFnSetVehicleCamRadiusPoint = (UFunction*) UObject::GObjObjects()->Data[ 32975 ];

	UBioCheatManager_execSetVehicleCamRadiusPoint_Parms SetVehicleCamRadiusPoint_Parms;
	SetVehicleCamRadiusPoint_Parms.nIndex = nIndex;
	SetVehicleCamRadiusPoint_Parms.fDegVal = fDegVal;
	SetVehicleCamRadiusPoint_Parms.fScaleVal = fScaleVal;

	pFnSetVehicleCamRadiusPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVehicleCamRadiusPoint, &SetVehicleCamRadiusPoint_Parms, NULL );

	pFnSetVehicleCamRadiusPoint->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.BioClearCrossLevelReferences
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// class ULevel*                  pLevel                         ( CPF_Parm )

void UBioCheatManager::BioClearCrossLevelReferences ( class ULevel* pLevel )
{
	static UFunction* pFnBioClearCrossLevelReferences = NULL;

	if ( ! pFnBioClearCrossLevelReferences )
		pFnBioClearCrossLevelReferences = (UFunction*) UObject::GObjObjects()->Data[ 32973 ];

	UBioCheatManager_execBioClearCrossLevelReferences_Parms BioClearCrossLevelReferences_Parms;
	BioClearCrossLevelReferences_Parms.pLevel = pLevel;

	pFnBioClearCrossLevelReferences->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBioClearCrossLevelReferences, &BioClearCrossLevelReferences_Parms, NULL );

	pFnBioClearCrossLevelReferences->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.ForceEnableCCD
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bValue                         ( CPF_Parm )

void UBioCheatManager::ForceEnableCCD ( unsigned long bValue )
{
	static UFunction* pFnForceEnableCCD = NULL;

	if ( ! pFnForceEnableCCD )
		pFnForceEnableCCD = (UFunction*) UObject::GObjObjects()->Data[ 32971 ];

	UBioCheatManager_execForceEnableCCD_Parms ForceEnableCCD_Parms;
	ForceEnableCCD_Parms.bValue = bValue;

	pFnForceEnableCCD->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceEnableCCD, &ForceEnableCCD_Parms, NULL );

	pFnForceEnableCCD->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.SetGCDebugPackage
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 sPackageName                   ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::SetGCDebugPackage ( struct FString sPackageName )
{
	static UFunction* pFnSetGCDebugPackage = NULL;

	if ( ! pFnSetGCDebugPackage )
		pFnSetGCDebugPackage = (UFunction*) UObject::GObjObjects()->Data[ 32969 ];

	UBioCheatManager_execSetGCDebugPackage_Parms SetGCDebugPackage_Parms;
	memcpy ( &SetGCDebugPackage_Parms.sPackageName, &sPackageName, 0xC );

	pFnSetGCDebugPackage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGCDebugPackage, &SetGCDebugPackage_Parms, NULL );

	pFnSetGCDebugPackage->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.SetLocation
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// struct FString                 sDestination                   ( CPF_Parm | CPF_NeedCtorLink )

void UBioCheatManager::SetLocation ( struct FString sDestination )
{
	static UFunction* pFnSetLocation = NULL;

	if ( ! pFnSetLocation )
		pFnSetLocation = (UFunction*) UObject::GObjObjects()->Data[ 32967 ];

	UBioCheatManager_execSetLocation_Parms SetLocation_Parms;
	memcpy ( &SetLocation_Parms.sDestination, &sDestination, 0xC );

	pFnSetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLocation, &SetLocation_Parms, NULL );

	pFnSetLocation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.OutputBugReportXML
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:
// unsigned long                  bCreateSavegame                ( CPF_Parm )
// unsigned long                  bCreateScreenshot              ( CPF_Parm )

void UBioCheatManager::OutputBugReportXML ( unsigned long bCreateSavegame, unsigned long bCreateScreenshot )
{
	static UFunction* pFnOutputBugReportXML = NULL;

	if ( ! pFnOutputBugReportXML )
		pFnOutputBugReportXML = (UFunction*) UObject::GObjObjects()->Data[ 32964 ];

	UBioCheatManager_execOutputBugReportXML_Parms OutputBugReportXML_Parms;
	OutputBugReportXML_Parms.bCreateSavegame = bCreateSavegame;
	OutputBugReportXML_Parms.bCreateScreenshot = bCreateScreenshot;

	pFnOutputBugReportXML->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOutputBugReportXML, &OutputBugReportXML_Parms, NULL );

	pFnOutputBugReportXML->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCheatManager.GetLocation
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::GetLocation ( )
{
	static UFunction* pFnGetLocation = NULL;

	if ( ! pFnGetLocation )
		pFnGetLocation = (UFunction*) UObject::GObjObjects()->Data[ 32962 ];

	UBioCheatManager_execGetLocation_Parms GetLocation_Parms;

	this->ProcessEvent ( pFnGetLocation, &GetLocation_Parms, NULL );
};

// Function SFXGame.BioCheatManager.StasisParty
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bValue                         ( CPF_Parm )

void UBioCheatManager::StasisParty ( unsigned long bValue )
{
	static UFunction* pFnStasisParty = NULL;

	if ( ! pFnStasisParty )
		pFnStasisParty = (UFunction*) UObject::GObjObjects()->Data[ 32958 ];

	UBioCheatManager_execStasisParty_Parms StasisParty_Parms;
	StasisParty_Parms.bValue = bValue;

	this->ProcessEvent ( pFnStasisParty, &StasisParty_Parms, NULL );
};

// Function SFXGame.BioCheatManager.Damage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FString                 Target                         ( CPF_Parm | CPF_NeedCtorLink )
// float                          Amount                         ( CPF_Parm )

void UBioCheatManager::Damage ( struct FString Target, float Amount )
{
	static UFunction* pFnDamage = NULL;

	if ( ! pFnDamage )
		pFnDamage = (UFunction*) UObject::GObjObjects()->Data[ 32953 ];

	UBioCheatManager_execDamage_Parms Damage_Parms;
	memcpy ( &Damage_Parms.Target, &Target, 0xC );
	Damage_Parms.Amount = Amount;

	this->ProcessEvent ( pFnDamage, &Damage_Parms, NULL );
};

// Function SFXGame.BioCheatManager.KillSelf
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::KillSelf ( )
{
	static UFunction* pFnKillSelf = NULL;

	if ( ! pFnKillSelf )
		pFnKillSelf = (UFunction*) UObject::GObjObjects()->Data[ 32952 ];

	UBioCheatManager_execKillSelf_Parms KillSelf_Parms;

	this->ProcessEvent ( pFnKillSelf, &KillSelf_Parms, NULL );
};

// Function SFXGame.BioCheatManager.KillParty
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::KillParty ( )
{
	static UFunction* pFnKillParty = NULL;

	if ( ! pFnKillParty )
		pFnKillParty = (UFunction*) UObject::GObjObjects()->Data[ 32950 ];

	UBioCheatManager_execKillParty_Parms KillParty_Parms;

	this->ProcessEvent ( pFnKillParty, &KillParty_Parms, NULL );
};

// Function SFXGame.BioCheatManager.KillEnemies
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::KillEnemies ( )
{
	static UFunction* pFnKillEnemies = NULL;

	if ( ! pFnKillEnemies )
		pFnKillEnemies = (UFunction*) UObject::GObjObjects()->Data[ 32948 ];

	UBioCheatManager_execKillEnemies_Parms KillEnemies_Parms;

	this->ProcessEvent ( pFnKillEnemies, &KillEnemies_Parms, NULL );
};

// Function SFXGame.BioCheatManager.KillTarget
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UBioCheatManager::KillTarget ( )
{
	static UFunction* pFnKillTarget = NULL;

	if ( ! pFnKillTarget )
		pFnKillTarget = (UFunction*) UObject::GObjObjects()->Data[ 32943 ];

	UBioCheatManager_execKillTarget_Parms KillTarget_Parms;

	this->ProcessEvent ( pFnKillTarget, &KillTarget_Parms, NULL );
};

// Function SFXGame.BioCheatManager.RenderHUD
// [0x00020002] 
// Parameters infos:
// class ABioHUD*                 myHUD                          ( CPF_Parm )

void UBioCheatManager::RenderHUD ( class ABioHUD* myHUD )
{
	static UFunction* pFnRenderHUD = NULL;

	if ( ! pFnRenderHUD )
		pFnRenderHUD = (UFunction*) UObject::GObjObjects()->Data[ 32941 ];

	UBioCheatManager_execRenderHUD_Parms RenderHUD_Parms;
	RenderHUD_Parms.myHUD = myHUD;

	this->ProcessEvent ( pFnRenderHUD, &RenderHUD_Parms, NULL );
};

// Function SFXGame.BioCheatManager.AT
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   newArea                        ( CPF_Parm )
// struct FName                   StartPoint                     ( CPF_OptionalParm | CPF_Parm )

void UBioCheatManager::AT ( struct FName newArea, struct FName StartPoint )
{
	static UFunction* pFnAT = NULL;

	if ( ! pFnAT )
		pFnAT = (UFunction*) UObject::GObjObjects()->Data[ 32938 ];

	UBioCheatManager_execAT_Parms AT_Parms;
	memcpy ( &AT_Parms.newArea, &newArea, 0x8 );
	memcpy ( &AT_Parms.StartPoint, &StartPoint, 0x8 );

	this->ProcessEvent ( pFnAT, &AT_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetStateNameByIdx
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class AController*             AI                             ( CPF_Parm )
// int                            idx                            ( CPF_Parm )

struct FString UBioCheatManager::GetStateNameByIdx ( class AController* AI, int idx )
{
	static UFunction* pFnGetStateNameByIdx = NULL;

	if ( ! pFnGetStateNameByIdx )
		pFnGetStateNameByIdx = (UFunction*) UObject::GObjObjects()->Data[ 32934 ];

	UBioCheatManager_execGetStateNameByIdx_Parms GetStateNameByIdx_Parms;
	GetStateNameByIdx_Parms.AI = AI;
	GetStateNameByIdx_Parms.idx = idx;

	pFnGetStateNameByIdx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStateNameByIdx, &GetStateNameByIdx_Parms, NULL );

	pFnGetStateNameByIdx->FunctionFlags |= 0x400;

	return GetStateNameByIdx_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.GetNumStates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             AI                             ( CPF_Parm )

int UBioCheatManager::GetNumStates ( class AController* AI )
{
	static UFunction* pFnGetNumStates = NULL;

	if ( ! pFnGetNumStates )
		pFnGetNumStates = (UFunction*) UObject::GObjObjects()->Data[ 32931 ];

	UBioCheatManager_execGetNumStates_Parms GetNumStates_Parms;
	GetNumStates_Parms.AI = AI;

	pFnGetNumStates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumStates, &GetNumStates_Parms, NULL );

	pFnGetNumStates->FunctionFlags |= 0x400;

	return GetNumStates_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.GetLatentAction
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class AController*             AI                             ( CPF_Parm )

struct FString UBioCheatManager::GetLatentAction ( class AController* AI )
{
	static UFunction* pFnGetLatentAction = NULL;

	if ( ! pFnGetLatentAction )
		pFnGetLatentAction = (UFunction*) UObject::GObjObjects()->Data[ 32928 ];

	UBioCheatManager_execGetLatentAction_Parms GetLatentAction_Parms;
	GetLatentAction_Parms.AI = AI;

	pFnGetLatentAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLatentAction, &GetLatentAction_Parms, NULL );

	pFnGetLatentAction->FunctionFlags |= 0x400;

	return GetLatentAction_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.SetProfileColumn
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// int                            ColumnIdx                      ( CPF_Parm )

void UBioCheatManager::eventSetProfileColumn ( int ColumnIdx )
{
	static UFunction* pFnSetProfileColumn = NULL;

	if ( ! pFnSetProfileColumn )
		pFnSetProfileColumn = (UFunction*) UObject::GObjObjects()->Data[ 32903 ];

	UBioCheatManager_eventSetProfileColumn_Parms SetProfileColumn_Parms;
	SetProfileColumn_Parms.ColumnIdx = ColumnIdx;

	this->ProcessEvent ( pFnSetProfileColumn, &SetProfileColumn_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetProfileColumnCoord
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioCheatManager::eventGetProfileColumnCoord ( )
{
	static UFunction* pFnGetProfileColumnCoord = NULL;

	if ( ! pFnGetProfileColumnCoord )
		pFnGetProfileColumnCoord = (UFunction*) UObject::GObjObjects()->Data[ 32925 ];

	UBioCheatManager_eventGetProfileColumnCoord_Parms GetProfileColumnCoord_Parms;

	this->ProcessEvent ( pFnGetProfileColumnCoord, &GetProfileColumnCoord_Parms, NULL );

	return GetProfileColumnCoord_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.DrawProfileText
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )
// unsigned long                  Highlight                      ( CPF_OptionalParm | CPF_Parm )

void UBioCheatManager::eventDrawProfileText ( struct FString Text, unsigned long Highlight )
{
	static UFunction* pFnDrawProfileText = NULL;

	if ( ! pFnDrawProfileText )
		pFnDrawProfileText = (UFunction*) UObject::GObjObjects()->Data[ 32406 ];

	UBioCheatManager_eventDrawProfileText_Parms DrawProfileText_Parms;
	memcpy ( &DrawProfileText_Parms.Text, &Text, 0xC );
	DrawProfileText_Parms.Highlight = Highlight;

	this->ProcessEvent ( pFnDrawProfileText, &DrawProfileText_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DrawProfileHeaderText
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FString                 Text                           ( CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink )

void UBioCheatManager::eventDrawProfileHeaderText ( struct FString Text )
{
	static UFunction* pFnDrawProfileHeaderText = NULL;

	if ( ! pFnDrawProfileHeaderText )
		pFnDrawProfileHeaderText = (UFunction*) UObject::GObjObjects()->Data[ 32904 ];

	UBioCheatManager_eventDrawProfileHeaderText_Parms DrawProfileHeaderText_Parms;
	memcpy ( &DrawProfileHeaderText_Parms.Text, &Text, 0xC );

	this->ProcessEvent ( pFnDrawProfileHeaderText, &DrawProfileHeaderText_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DrawProfileTitle
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::DrawProfileTitle ( )
{
	static UFunction* pFnDrawProfileTitle = NULL;

	if ( ! pFnDrawProfileTitle )
		pFnDrawProfileTitle = (UFunction*) UObject::GObjObjects()->Data[ 32915 ];

	UBioCheatManager_execDrawProfileTitle_Parms DrawProfileTitle_Parms;

	this->ProcessEvent ( pFnDrawProfileTitle, &DrawProfileTitle_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DrawCurrentProfile
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::DrawCurrentProfile ( )
{
	static UFunction* pFnDrawCurrentProfile = NULL;

	if ( ! pFnDrawCurrentProfile )
		pFnDrawCurrentProfile = (UFunction*) UObject::GObjObjects()->Data[ 32912 ];

	UBioCheatManager_execDrawCurrentProfile_Parms DrawCurrentProfile_Parms;

	this->ProcessEvent ( pFnDrawCurrentProfile, &DrawCurrentProfile_Parms, NULL );
};

// Function SFXGame.BioCheatManager.Profile
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// struct FName                   Keyword                        ( CPF_Parm )
// struct FString                 Target                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FName                   SubTarget                      ( CPF_OptionalParm | CPF_Parm )

void UBioCheatManager::Profile ( struct FName Keyword, struct FString Target, struct FName SubTarget )
{
	static UFunction* pFnProfile = NULL;

	if ( ! pFnProfile )
		pFnProfile = (UFunction*) UObject::GObjObjects()->Data[ 32905 ];

	UBioCheatManager_execProfile_Parms Profile_Parms;
	memcpy ( &Profile_Parms.Keyword, &Keyword, 0x8 );
	memcpy ( &Profile_Parms.Target, &Target, 0xC );
	memcpy ( &Profile_Parms.SubTarget, &SubTarget, 0x8 );

	this->ProcessEvent ( pFnProfile, &Profile_Parms, NULL );
};

// Function SFXGame.BioCheatManager.DrawProfiles
// [0x00020002] 
// Parameters infos:

void UBioCheatManager::DrawProfiles ( )
{
	static UFunction* pFnDrawProfiles = NULL;

	if ( ! pFnDrawProfiles )
		pFnDrawProfiles = (UFunction*) UObject::GObjObjects()->Data[ 32899 ];

	UBioCheatManager_execDrawProfiles_Parms DrawProfiles_Parms;

	this->ProcessEvent ( pFnDrawProfiles, &DrawProfiles_Parms, NULL );
};

// Function SFXGame.BioCheatManager.Profiles
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          TimeToDisplay                  ( CPF_OptionalParm | CPF_Parm )

void UBioCheatManager::Profiles ( float TimeToDisplay )
{
	static UFunction* pFnProfiles = NULL;

	if ( ! pFnProfiles )
		pFnProfiles = (UFunction*) UObject::GObjObjects()->Data[ 32897 ];

	UBioCheatManager_execProfiles_Parms Profiles_Parms;
	Profiles_Parms.TimeToDisplay = TimeToDisplay;

	this->ProcessEvent ( pFnProfiles, &Profiles_Parms, NULL );
};

// Function SFXGame.BioCheatManager.SloMo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          T                              ( CPF_Parm )

void UBioCheatManager::SloMo ( float T )
{
	static UFunction* pFnSloMo = NULL;

	if ( ! pFnSloMo )
		pFnSloMo = (UFunction*) UObject::GObjObjects()->Data[ 32894 ];

	UBioCheatManager_execSloMo_Parms SloMo_Parms;
	SloMo_Parms.T = T;

	this->ProcessEvent ( pFnSloMo, &SloMo_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ResetGrinder
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  Id                             ( CPF_Parm )

void UBioCheatManager::ResetGrinder ( unsigned char Id )
{
	static UFunction* pFnResetGrinder = NULL;

	if ( ! pFnResetGrinder )
		pFnResetGrinder = (UFunction*) UObject::GObjObjects()->Data[ 32891 ];

	UBioCheatManager_execResetGrinder_Parms ResetGrinder_Parms;
	ResetGrinder_Parms.Id = Id;

	this->ProcessEvent ( pFnResetGrinder, &ResetGrinder_Parms, NULL );
};

// Function SFXGame.BioCheatManager.IncrementGrinder
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned char                  Id                             ( CPF_Parm )

void UBioCheatManager::IncrementGrinder ( unsigned char Id )
{
	static UFunction* pFnIncrementGrinder = NULL;

	if ( ! pFnIncrementGrinder )
		pFnIncrementGrinder = (UFunction*) UObject::GObjObjects()->Data[ 32888 ];

	UBioCheatManager_execIncrementGrinder_Parms IncrementGrinder_Parms;
	IncrementGrinder_Parms.Id = Id;

	this->ProcessEvent ( pFnIncrementGrinder, &IncrementGrinder_Parms, NULL );
};

// Function SFXGame.BioCheatManager.GetHeavyWeapon
// [0x00020002] 
// Parameters infos:
// class ASFXHeavyWeapon*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXHeavyWeapon* UBioCheatManager::GetHeavyWeapon ( )
{
	static UFunction* pFnGetHeavyWeapon = NULL;

	if ( ! pFnGetHeavyWeapon )
		pFnGetHeavyWeapon = (UFunction*) UObject::GObjObjects()->Data[ 32881 ];

	UBioCheatManager_execGetHeavyWeapon_Parms GetHeavyWeapon_Parms;

	this->ProcessEvent ( pFnGetHeavyWeapon, &GetHeavyWeapon_Parms, NULL );

	return GetHeavyWeapon_Parms.ReturnValue;
};

// Function SFXGame.BioCheatManager.ProfileUtility
// [0x00120000] 
// Parameters infos:

void UBioCheatManager::ProfileUtility ( )
{
	static UFunction* pFnProfileUtility = NULL;

	if ( ! pFnProfileUtility )
		pFnProfileUtility = (UFunction*) UObject::GObjObjects()->Data[ 32853 ];

	UBioCheatManager_execProfileUtility_Parms ProfileUtility_Parms;

	this->ProcessEvent ( pFnProfileUtility, &ProfileUtility_Parms, NULL );
};

// Function SFXGame.BioCheatManager.ProfileHandler
// [0x00120000] 
// Parameters infos:

void UBioCheatManager::ProfileHandler ( )
{
	static UFunction* pFnProfileHandler = NULL;

	if ( ! pFnProfileHandler )
		pFnProfileHandler = (UFunction*) UObject::GObjObjects()->Data[ 32855 ];

	UBioCheatManager_execProfileHandler_Parms ProfileHandler_Parms;

	this->ProcessEvent ( pFnProfileHandler, &ProfileHandler_Parms, NULL );
};

// Function SFXGame.BioPlayerInput.GhostMoveDown
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bState                         ( CPF_Parm )

void UBioPlayerInput::GhostMoveDown ( unsigned long bState )
{
	static UFunction* pFnGhostMoveDown = NULL;

	if ( ! pFnGhostMoveDown )
		pFnGhostMoveDown = (UFunction*) UObject::GObjObjects()->Data[ 42634 ];

	UBioPlayerInput_execGhostMoveDown_Parms GhostMoveDown_Parms;
	GhostMoveDown_Parms.bState = bState;

	this->ProcessEvent ( pFnGhostMoveDown, &GhostMoveDown_Parms, NULL );
};

// Function SFXGame.BioPlayerInput.GhostMoveUp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bState                         ( CPF_Parm )

void UBioPlayerInput::GhostMoveUp ( unsigned long bState )
{
	static UFunction* pFnGhostMoveUp = NULL;

	if ( ! pFnGhostMoveUp )
		pFnGhostMoveUp = (UFunction*) UObject::GObjObjects()->Data[ 42632 ];

	UBioPlayerInput_execGhostMoveUp_Parms GhostMoveUp_Parms;
	GhostMoveUp_Parms.bState = bState;

	this->ProcessEvent ( pFnGhostMoveUp, &GhostMoveUp_Parms, NULL );
};

// Function SFXGame.BioPlayerInput.CancelReload
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioPlayerInput::eventCancelReload ( )
{
	static UFunction* pFnCancelReload = NULL;

	if ( ! pFnCancelReload )
		pFnCancelReload = (UFunction*) UObject::GObjObjects()->Data[ 42631 ];

	UBioPlayerInput_eventCancelReload_Parms CancelReload_Parms;

	this->ProcessEvent ( pFnCancelReload, &CancelReload_Parms, NULL );
};

// Function SFXGame.BioPlayerInput.RemapControlsByRotation
// [0x00C20002] 
// Parameters infos:
// struct FRotator                DeltaRot                       ( CPF_Parm )
// float                          NewRight                       ( CPF_Parm | CPF_OutParm )
// float                          NewUp                          ( CPF_Parm | CPF_OutParm )

void UBioPlayerInput::RemapControlsByRotation ( struct FRotator DeltaRot, float* NewRight, float* NewUp )
{
	static UFunction* pFnRemapControlsByRotation = NULL;

	if ( ! pFnRemapControlsByRotation )
		pFnRemapControlsByRotation = (UFunction*) UObject::GObjObjects()->Data[ 42625 ];

	UBioPlayerInput_execRemapControlsByRotation_Parms RemapControlsByRotation_Parms;
	memcpy ( &RemapControlsByRotation_Parms.DeltaRot, &DeltaRot, 0xC );

	this->ProcessEvent ( pFnRemapControlsByRotation, &RemapControlsByRotation_Parms, NULL );

	if ( NewRight )
		*NewRight = RemapControlsByRotation_Parms.NewRight;

	if ( NewUp )
		*NewUp = RemapControlsByRotation_Parms.NewUp;
};

// Function SFXGame.BioPlayerInput.UpdateViewRotation
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UBioPlayerInput::UpdateViewRotation ( float DeltaTime )
{
	static UFunction* pFnUpdateViewRotation = NULL;

	if ( ! pFnUpdateViewRotation )
		pFnUpdateViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 42616 ];

	UBioPlayerInput_execUpdateViewRotation_Parms UpdateViewRotation_Parms;
	UpdateViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateViewRotation, &UpdateViewRotation_Parms, NULL );
};

// Function SFXGame.BioPlayerInput.PlayerInput
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UBioPlayerInput::eventPlayerInput ( float DeltaTime )
{
	static UFunction* pFnPlayerInput = NULL;

	if ( ! pFnPlayerInput )
		pFnPlayerInput = (UFunction*) UObject::GObjObjects()->Data[ 42612 ];

	UBioPlayerInput_eventPlayerInput_Parms PlayerInput_Parms;
	PlayerInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPlayerInput, &PlayerInput_Parms, NULL );
};

// Function SFXGame.BioPlayerInput.PostProcessInput
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UBioPlayerInput::PostProcessInput ( float DeltaTime )
{
	static UFunction* pFnPostProcessInput = NULL;

	if ( ! pFnPostProcessInput )
		pFnPostProcessInput = (UFunction*) UObject::GObjObjects()->Data[ 42607 ];

	UBioPlayerInput_execPostProcessInput_Parms PostProcessInput_Parms;
	PostProcessInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPostProcessInput, &PostProcessInput_Parms, NULL );
};

// Function SFXGame.BioPlayerInput.AdjustMouseSensitivity
// [0x00020002] 
// Parameters infos:
// float                          FOVScale                       ( CPF_Parm )

void UBioPlayerInput::AdjustMouseSensitivity ( float FOVScale )
{
	static UFunction* pFnAdjustMouseSensitivity = NULL;

	if ( ! pFnAdjustMouseSensitivity )
		pFnAdjustMouseSensitivity = (UFunction*) UObject::GObjObjects()->Data[ 42604 ];

	UBioPlayerInput_execAdjustMouseSensitivity_Parms AdjustMouseSensitivity_Parms;
	AdjustMouseSensitivity_Parms.FOVScale = FOVScale;

	this->ProcessEvent ( pFnAdjustMouseSensitivity, &AdjustMouseSensitivity_Parms, NULL );
};

// Function SFXGame.BioPlayerInput.PreProcessInput
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void UBioPlayerInput::PreProcessInput ( float DeltaTime )
{
	static UFunction* pFnPreProcessInput = NULL;

	if ( ! pFnPreProcessInput )
		pFnPreProcessInput = (UFunction*) UObject::GObjObjects()->Data[ 42591 ];

	UBioPlayerInput_execPreProcessInput_Parms PreProcessInput_Parms;
	PreProcessInput_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPreProcessInput, &PreProcessInput_Parms, NULL );
};

// Function SFXGame.BioPlayerInput.ComputeStickResponse
// [0x00820002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          RawStickValue                  ( CPF_Parm )
// class USFXCameraInput*         Input                          ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )

float UBioPlayerInput::ComputeStickResponse ( float RawStickValue, class USFXCameraInput* Input, float DeltaTime )
{
	static UFunction* pFnComputeStickResponse = NULL;

	if ( ! pFnComputeStickResponse )
		pFnComputeStickResponse = (UFunction*) UObject::GObjObjects()->Data[ 42583 ];

	UBioPlayerInput_execComputeStickResponse_Parms ComputeStickResponse_Parms;
	ComputeStickResponse_Parms.RawStickValue = RawStickValue;
	ComputeStickResponse_Parms.Input = Input;
	ComputeStickResponse_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnComputeStickResponse, &ComputeStickResponse_Parms, NULL );

	return ComputeStickResponse_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerInput.IsKeyInputIgnored
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPlayerInput::IsKeyInputIgnored ( )
{
	static UFunction* pFnIsKeyInputIgnored = NULL;

	if ( ! pFnIsKeyInputIgnored )
		pFnIsKeyInputIgnored = (UFunction*) UObject::GObjObjects()->Data[ 42581 ];

	UBioPlayerInput_execIsKeyInputIgnored_Parms IsKeyInputIgnored_Parms;

	pFnIsKeyInputIgnored->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsKeyInputIgnored, &IsKeyInputIgnored_Parms, NULL );

	pFnIsKeyInputIgnored->FunctionFlags |= 0x400;

	return IsKeyInputIgnored_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerInput.IgnoreKeyInput
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bValue                         ( CPF_Parm )

void UBioPlayerInput::IgnoreKeyInput ( unsigned long bValue )
{
	static UFunction* pFnIgnoreKeyInput = NULL;

	if ( ! pFnIgnoreKeyInput )
		pFnIgnoreKeyInput = (UFunction*) UObject::GObjObjects()->Data[ 42579 ];

	UBioPlayerInput_execIgnoreKeyInput_Parms IgnoreKeyInput_Parms;
	IgnoreKeyInput_Parms.bValue = bValue;

	pFnIgnoreKeyInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIgnoreKeyInput, &IgnoreKeyInput_Parms, NULL );

	pFnIgnoreKeyInput->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerInput.SetInputDisabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bValue                         ( CPF_Parm )

void UBioPlayerInput::eventSetInputDisabled ( unsigned long bValue )
{
	static UFunction* pFnSetInputDisabled = NULL;

	if ( ! pFnSetInputDisabled )
		pFnSetInputDisabled = (UFunction*) UObject::GObjObjects()->Data[ 42577 ];

	UBioPlayerInput_eventSetInputDisabled_Parms SetInputDisabled_Parms;
	SetInputDisabled_Parms.bValue = bValue;

	this->ProcessEvent ( pFnSetInputDisabled, &SetInputDisabled_Parms, NULL );
};

// Function SFXGame.BioPlayerInput.GetInputDisabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPlayerInput::eventGetInputDisabled ( )
{
	static UFunction* pFnGetInputDisabled = NULL;

	if ( ! pFnGetInputDisabled )
		pFnGetInputDisabled = (UFunction*) UObject::GObjObjects()->Data[ 42575 ];

	UBioPlayerInput_eventGetInputDisabled_Parms GetInputDisabled_Parms;

	this->ProcessEvent ( pFnGetInputDisabled, &GetInputDisabled_Parms, NULL );

	return GetInputDisabled_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerInput.DebugExecInputCommands
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 Cmd                            ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bButtonPressed                 ( CPF_Parm )

void UBioPlayerInput::DebugExecInputCommands ( struct FString Cmd, unsigned long bButtonPressed )
{
	static UFunction* pFnDebugExecInputCommands = NULL;

	if ( ! pFnDebugExecInputCommands )
		pFnDebugExecInputCommands = (UFunction*) UObject::GObjObjects()->Data[ 42572 ];

	UBioPlayerInput_execDebugExecInputCommands_Parms DebugExecInputCommands_Parms;
	memcpy ( &DebugExecInputCommands_Parms.Cmd, &Cmd, 0xC );
	DebugExecInputCommands_Parms.bButtonPressed = bButtonPressed;

	pFnDebugExecInputCommands->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugExecInputCommands, &DebugExecInputCommands_Parms, NULL );

	pFnDebugExecInputCommands->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerInput.GetBind
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   Key                            ( CPF_Parm )
// unsigned long                  Control                        ( CPF_Parm )
// unsigned long                  Shift                          ( CPF_Parm )
// unsigned long                  Alt                            ( CPF_Parm )

struct FString UBioPlayerInput::GetBind ( struct FName Key, unsigned long Control, unsigned long Shift, unsigned long Alt )
{
	static UFunction* pFnGetBind = NULL;

	if ( ! pFnGetBind )
		pFnGetBind = (UFunction*) UObject::GObjObjects()->Data[ 42566 ];

	UBioPlayerInput_execGetBind_Parms GetBind_Parms;
	memcpy ( &GetBind_Parms.Key, &Key, 0x8 );
	GetBind_Parms.Control = Control;
	GetBind_Parms.Shift = Shift;
	GetBind_Parms.Alt = Alt;

	pFnGetBind->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBind, &GetBind_Parms, NULL );

	pFnGetBind->FunctionFlags |= 0x400;

	return GetBind_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerInput.IsCombatEnabled
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPlayerInput::IsCombatEnabled ( )
{
	static UFunction* pFnIsCombatEnabled = NULL;

	if ( ! pFnIsCombatEnabled )
		pFnIsCombatEnabled = (UFunction*) UObject::GObjObjects()->Data[ 42564 ];

	UBioPlayerInput_execIsCombatEnabled_Parms IsCombatEnabled_Parms;

	pFnIsCombatEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCombatEnabled, &IsCombatEnabled_Parms, NULL );

	pFnIsCombatEnabled->FunctionFlags |= 0x400;

	return IsCombatEnabled_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerInput.ActivatePower
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPower                        ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 vTargetLocation                ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 vOriginalCameraLocation        ( CPF_OptionalParm | CPF_Parm )
// struct FRotator                rOriginalCameraRotation        ( CPF_OptionalParm | CPF_Parm )

bool UBioPlayerInput::ActivatePower ( struct FName nmPower, class AActor* oTarget, struct FVector vTargetLocation, struct FVector vOriginalCameraLocation, struct FRotator rOriginalCameraRotation )
{
	static UFunction* pFnActivatePower = NULL;

	if ( ! pFnActivatePower )
		pFnActivatePower = (UFunction*) UObject::GObjObjects()->Data[ 41506 ];

	UBioPlayerInput_execActivatePower_Parms ActivatePower_Parms;
	memcpy ( &ActivatePower_Parms.nmPower, &nmPower, 0x8 );
	ActivatePower_Parms.oTarget = oTarget;
	memcpy ( &ActivatePower_Parms.vTargetLocation, &vTargetLocation, 0xC );
	memcpy ( &ActivatePower_Parms.vOriginalCameraLocation, &vOriginalCameraLocation, 0xC );
	memcpy ( &ActivatePower_Parms.rOriginalCameraRotation, &rOriginalCameraRotation, 0xC );

	pFnActivatePower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivatePower, &ActivatePower_Parms, NULL );

	pFnActivatePower->FunctionFlags |= 0x400;

	return ActivatePower_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSelection.SetSelectionIconMaterialParam
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   Param                          ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UBioPlayerSelection::SetSelectionIconMaterialParam ( struct FName Param, int Value )
{
	static UFunction* pFnSetSelectionIconMaterialParam = NULL;

	if ( ! pFnSetSelectionIconMaterialParam )
		pFnSetSelectionIconMaterialParam = (UFunction*) UObject::GObjObjects()->Data[ 41929 ];

	UBioPlayerSelection_execSetSelectionIconMaterialParam_Parms SetSelectionIconMaterialParam_Parms;
	memcpy ( &SetSelectionIconMaterialParam_Parms.Param, &Param, 0x8 );
	SetSelectionIconMaterialParam_Parms.Value = Value;

	pFnSetSelectionIconMaterialParam->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSelectionIconMaterialParam, &SetSelectionIconMaterialParam_Parms, NULL );

	pFnSetSelectionIconMaterialParam->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerSelection.IsSelectable
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool UBioPlayerSelection::IsSelectable ( class AActor* oTarget )
{
	static UFunction* pFnIsSelectable = NULL;

	if ( ! pFnIsSelectable )
		pFnIsSelectable = (UFunction*) UObject::GObjObjects()->Data[ 41926 ];

	UBioPlayerSelection_execIsSelectable_Parms IsSelectable_Parms;
	IsSelectable_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnIsSelectable, &IsSelectable_Parms, NULL );

	return IsSelectable_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSelection.UpdateSelection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioPlayerSelection::UpdateSelection ( )
{
	static UFunction* pFnUpdateSelection = NULL;

	if ( ! pFnUpdateSelection )
		pFnUpdateSelection = (UFunction*) UObject::GObjObjects()->Data[ 41925 ];

	UBioPlayerSelection_execUpdateSelection_Parms UpdateSelection_Parms;

	pFnUpdateSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSelection, &UpdateSelection_Parms, NULL );

	pFnUpdateSelection->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPlayerSelection.FindCurrentSelectionTarget
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioPlayerSelection::FindCurrentSelectionTarget ( )
{
	static UFunction* pFnFindCurrentSelectionTarget = NULL;

	if ( ! pFnFindCurrentSelectionTarget )
		pFnFindCurrentSelectionTarget = (UFunction*) UObject::GObjObjects()->Data[ 41924 ];

	UBioPlayerSelection_execFindCurrentSelectionTarget_Parms FindCurrentSelectionTarget_Parms;

	pFnFindCurrentSelectionTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindCurrentSelectionTarget, &FindCurrentSelectionTarget_Parms, NULL );

	pFnFindCurrentSelectionTarget->FunctionFlags |= 0x400;
};

// Function SFXGame.CoverGoalConstraint.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UCoverGoalConstraint::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = (UFunction*) UObject::GObjObjects()->Data[ 51525 ];

	UCoverGoalConstraint_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );

	return GetDumpString_Parms.ReturnValue;
};

// Function SFXGame.CoverGoalConstraint.Init
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class UGoal_AtCover*           GoalEvaluator                  ( CPF_Parm )

void UCoverGoalConstraint::eventInit ( class UGoal_AtCover* GoalEvaluator )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 51523 ];

	UCoverGoalConstraint_eventInit_Parms Init_Parms;
	Init_Parms.GoalEvaluator = GoalEvaluator;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.CovGoal_AvoidEnemies.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class UGoal_AtCover*           GoalEvaluator                  ( CPF_Parm )

void UCovGoal_AvoidEnemies::eventInit ( class UGoal_AtCover* GoalEvaluator )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 51533 ];

	UCovGoal_AvoidEnemies_eventInit_Parms Init_Parms;
	Init_Parms.GoalEvaluator = GoalEvaluator;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function SFXGame.CovGoal_Enemies.Init
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// class UGoal_AtCover*           GoalEvaluator                  ( CPF_Parm )

void UCovGoal_Enemies::eventInit ( class UGoal_AtCover* GoalEvaluator )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 51540 ];

	UCovGoal_Enemies_eventInit_Parms Init_Parms;
	Init_Parms.GoalEvaluator = GoalEvaluator;

	pFnInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );

	pFnInit->FunctionFlags |= 0x400;
};

// Function SFXGame.CovGoal_WeaponRange.Init
// [0x00020002] 
// Parameters infos:
// class UGoal_AtCover*           GoalEvaluator                  ( CPF_Parm )

void UCovGoal_WeaponRange::Init ( class UGoal_AtCover* GoalEvaluator )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 51565 ];

	UCovGoal_WeaponRange_execInit_Parms Init_Parms;
	Init_Parms.GoalEvaluator = GoalEvaluator;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.Goal_AtCover.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UGoal_AtCover::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = (UFunction*) UObject::GObjObjects()->Data[ 51590 ];

	UGoal_AtCover_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );

	return GetDumpString_Parms.ReturnValue;
};

// Function SFXGame.Goal_AtCover.AddCoverGoalConstraint
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UCoverGoalConstraint*    Constraint                     ( CPF_Parm )

void UGoal_AtCover::eventAddCoverGoalConstraint ( class UCoverGoalConstraint* Constraint )
{
	static UFunction* pFnAddCoverGoalConstraint = NULL;

	if ( ! pFnAddCoverGoalConstraint )
		pFnAddCoverGoalConstraint = (UFunction*) UObject::GObjObjects()->Data[ 51588 ];

	UGoal_AtCover_eventAddCoverGoalConstraint_Parms AddCoverGoalConstraint_Parms;
	AddCoverGoalConstraint_Parms.Constraint = Constraint;

	this->ProcessEvent ( pFnAddCoverGoalConstraint, &AddCoverGoalConstraint_Parms, NULL );
};

// Function SFXGame.Goal_AtCover.RateSlotMarker
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ACoverSlotMarker*        Marker                         ( CPF_Parm )
// class APawn*                   Pawn                           ( CPF_Parm )
// int                            BaseRating                     ( CPF_Parm )

void UGoal_AtCover::RateSlotMarker ( class ACoverSlotMarker* Marker, class APawn* Pawn, int BaseRating )
{
	static UFunction* pFnRateSlotMarker = NULL;

	if ( ! pFnRateSlotMarker )
		pFnRateSlotMarker = (UFunction*) UObject::GObjObjects()->Data[ 51584 ];

	UGoal_AtCover_execRateSlotMarker_Parms RateSlotMarker_Parms;
	RateSlotMarker_Parms.Marker = Marker;
	RateSlotMarker_Parms.Pawn = Pawn;
	RateSlotMarker_Parms.BaseRating = BaseRating;

	pFnRateSlotMarker->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRateSlotMarker, &RateSlotMarker_Parms, NULL );

	pFnRateSlotMarker->FunctionFlags |= 0x400;
};

// Function SFXGame.Goal_AtCover.InitNative
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UGoal_AtCover::InitNative ( )
{
	static UFunction* pFnInitNative = NULL;

	if ( ! pFnInitNative )
		pFnInitNative = (UFunction*) UObject::GObjObjects()->Data[ 51583 ];

	UGoal_AtCover_execInitNative_Parms InitNative_Parms;

	pFnInitNative->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitNative, &InitNative_Parms, NULL );

	pFnInitNative->FunctionFlags |= 0x400;
};

// Function SFXGame.Goal_AtCover.Init
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ASFXAI_NativeBase*       oAI                            ( CPF_Parm )
// class AActor*                  GoalActor                      ( CPF_Parm )

void UGoal_AtCover::Init ( class ASFXAI_NativeBase* oAI, class AActor* GoalActor )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 51579 ];

	UGoal_AtCover_execInit_Parms Init_Parms;
	Init_Parms.oAI = oAI;
	Init_Parms.GoalActor = GoalActor;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.Goal_AwayFromPosition.Recycle
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGoal_AwayFromPosition::eventRecycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 51605 ];

	UGoal_AwayFromPosition_eventRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function SFXGame.Goal_AwayFromPosition.FleeFrom
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// struct FVector                 InAvoidPos                     ( CPF_Parm )
// int                            InMaxDist                      ( CPF_Parm )

bool UGoal_AwayFromPosition::FleeFrom ( class APawn* P, struct FVector InAvoidPos, int InMaxDist )
{
	static UFunction* pFnFleeFrom = NULL;

	if ( ! pFnFleeFrom )
		pFnFleeFrom = (UFunction*) UObject::GObjObjects()->Data[ 51599 ];

	UGoal_AwayFromPosition_execFleeFrom_Parms FleeFrom_Parms;
	FleeFrom_Parms.P = P;
	memcpy ( &FleeFrom_Parms.InAvoidPos, &InAvoidPos, 0xC );
	FleeFrom_Parms.InMaxDist = InMaxDist;

	this->ProcessEvent ( pFnFleeFrom, &FleeFrom_Parms, NULL );

	return FleeFrom_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_NativeBase.DebugResetNavWeights
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ASFXAI_NativeBase::DebugResetNavWeights ( )
{
	static UFunction* pFnDebugResetNavWeights = NULL;

	if ( ! pFnDebugResetNavWeights )
		pFnDebugResetNavWeights = (UFunction*) UObject::GObjObjects()->Data[ 51909 ];

	ASFXAI_NativeBase_execDebugResetNavWeights_Parms DebugResetNavWeights_Parms;

	pFnDebugResetNavWeights->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugResetNavWeights, &DebugResetNavWeights_Parms, NULL );

	pFnDebugResetNavWeights->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXAI_NativeBase.SetMoveTimer
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 vMove                          ( CPF_Parm | CPF_OutParm )

void ASFXAI_NativeBase::SetMoveTimer ( struct FVector* vMove )
{
	static UFunction* pFnSetMoveTimer = NULL;

	if ( ! pFnSetMoveTimer )
		pFnSetMoveTimer = (UFunction*) UObject::GObjObjects()->Data[ 51907 ];

	ASFXAI_NativeBase_execSetMoveTimer_Parms SetMoveTimer_Parms;

	pFnSetMoveTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMoveTimer, &SetMoveTimer_Parms, NULL );

	pFnSetMoveTimer->FunctionFlags |= 0x400;

	if ( vMove )
		memcpy ( vMove, &SetMoveTimer_Parms.vMove, 0xC );
};

// Function SFXGame.SFXAI_NativeBase.UpdateMovementActions
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ASFXAI_NativeBase::eventUpdateMovementActions ( )
{
	static UFunction* pFnUpdateMovementActions = NULL;

	if ( ! pFnUpdateMovementActions )
		pFnUpdateMovementActions = (UFunction*) UObject::GObjObjects()->Data[ 51906 ];

	ASFXAI_NativeBase_eventUpdateMovementActions_Parms UpdateMovementActions_Parms;

	this->ProcessEvent ( pFnUpdateMovementActions, &UpdateMovementActions_Parms, NULL );
};

// Function SFXGame.SFXAI_NativeBase.IsSpecialMoveAfterMoveTarget
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_NativeBase::IsSpecialMoveAfterMoveTarget ( )
{
	static UFunction* pFnIsSpecialMoveAfterMoveTarget = NULL;

	if ( ! pFnIsSpecialMoveAfterMoveTarget )
		pFnIsSpecialMoveAfterMoveTarget = (UFunction*) UObject::GObjObjects()->Data[ 51904 ];

	ASFXAI_NativeBase_execIsSpecialMoveAfterMoveTarget_Parms IsSpecialMoveAfterMoveTarget_Parms;

	pFnIsSpecialMoveAfterMoveTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSpecialMoveAfterMoveTarget, &IsSpecialMoveAfterMoveTarget_Parms, NULL );

	pFnIsSpecialMoveAfterMoveTarget->FunctionFlags |= 0x400;

	return IsSpecialMoveAfterMoveTarget_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_NativeBase.CanSkipCurrentPathNode
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_NativeBase::CanSkipCurrentPathNode ( )
{
	static UFunction* pFnCanSkipCurrentPathNode = NULL;

	if ( ! pFnCanSkipCurrentPathNode )
		pFnCanSkipCurrentPathNode = (UFunction*) UObject::GObjObjects()->Data[ 51902 ];

	ASFXAI_NativeBase_execCanSkipCurrentPathNode_Parms CanSkipCurrentPathNode_Parms;

	pFnCanSkipCurrentPathNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSkipCurrentPathNode, &CanSkipCurrentPathNode_Parms, NULL );

	pFnCanSkipCurrentPathNode->FunctionFlags |= 0x400;

	return CanSkipCurrentPathNode_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_NativeBase.SmoothPathMovement
// [0x00020409] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ASFXAI_NativeBase::SmoothPathMovement ( )
{
	static UFunction* pFnSmoothPathMovement = NULL;

	if ( ! pFnSmoothPathMovement )
		pFnSmoothPathMovement = (UFunction*) UObject::GObjObjects()->Data[ 51901 ];

	ASFXAI_NativeBase_execSmoothPathMovement_Parms SmoothPathMovement_Parms;

	pFnSmoothPathMovement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSmoothPathMovement, &SmoothPathMovement_Parms, NULL );

	pFnSmoothPathMovement->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXAI_NativeBase.MoveTowardLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 vLocation                      ( CPF_Parm )
// float                          fOffset                        ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_NativeBase::MoveTowardLocation ( struct FVector vLocation, float fOffset )
{
	static UFunction* pFnMoveTowardLocation = NULL;

	if ( ! pFnMoveTowardLocation )
		pFnMoveTowardLocation = (UFunction*) UObject::GObjObjects()->Data[ 51898 ];

	ASFXAI_NativeBase_execMoveTowardLocation_Parms MoveTowardLocation_Parms;
	memcpy ( &MoveTowardLocation_Parms.vLocation, &vLocation, 0xC );
	MoveTowardLocation_Parms.fOffset = fOffset;

	pFnMoveTowardLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveTowardLocation, &MoveTowardLocation_Parms, NULL );

	pFnMoveTowardLocation->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXAI_NativeBase.AdjustSteeringMoveSpeed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vSteering                      ( CPF_Parm )

bool ASFXAI_NativeBase::AdjustSteeringMoveSpeed ( struct FVector vSteering )
{
	static UFunction* pFnAdjustSteeringMoveSpeed = NULL;

	if ( ! pFnAdjustSteeringMoveSpeed )
		pFnAdjustSteeringMoveSpeed = (UFunction*) UObject::GObjObjects()->Data[ 51895 ];

	ASFXAI_NativeBase_execAdjustSteeringMoveSpeed_Parms AdjustSteeringMoveSpeed_Parms;
	memcpy ( &AdjustSteeringMoveSpeed_Parms.vSteering, &vSteering, 0xC );

	pFnAdjustSteeringMoveSpeed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustSteeringMoveSpeed, &AdjustSteeringMoveSpeed_Parms, NULL );

	pFnAdjustSteeringMoveSpeed->FunctionFlags |= 0x400;

	return AdjustSteeringMoveSpeed_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_NativeBase.GetSteeringVector
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vSteering                      ( CPF_Parm | CPF_OutParm )

bool ASFXAI_NativeBase::GetSteeringVector ( struct FVector* vSteering )
{
	static UFunction* pFnGetSteeringVector = NULL;

	if ( ! pFnGetSteeringVector )
		pFnGetSteeringVector = (UFunction*) UObject::GObjObjects()->Data[ 51892 ];

	ASFXAI_NativeBase_execGetSteeringVector_Parms GetSteeringVector_Parms;

	pFnGetSteeringVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSteeringVector, &GetSteeringVector_Parms, NULL );

	pFnGetSteeringVector->FunctionFlags |= 0x400;

	if ( vSteering )
		memcpy ( vSteering, &GetSteeringVector_Parms.vSteering, 0xC );

	return GetSteeringVector_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_NativeBase.GetActorToFollow
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm | CPF_OutParm )
// struct FVector                 vLocation                      ( CPF_Parm | CPF_OutParm )

void ASFXAI_NativeBase::eventGetActorToFollow ( class AActor** oActor, struct FVector* vLocation )
{
	static UFunction* pFnGetActorToFollow = NULL;

	if ( ! pFnGetActorToFollow )
		pFnGetActorToFollow = (UFunction*) UObject::GObjObjects()->Data[ 51889 ];

	ASFXAI_NativeBase_eventGetActorToFollow_Parms GetActorToFollow_Parms;

	this->ProcessEvent ( pFnGetActorToFollow, &GetActorToFollow_Parms, NULL );

	if ( oActor )
		*oActor = GetActorToFollow_Parms.oActor;

	if ( vLocation )
		memcpy ( vLocation, &GetActorToFollow_Parms.vLocation, 0xC );
};

// Function SFXGame.SFXAI_NativeBase.EnableAI
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bEnable                        ( CPF_Parm )
// int                            nRequestedBy                   ( CPF_Parm )

bool ASFXAI_NativeBase::eventEnableAI ( unsigned long bEnable, int nRequestedBy )
{
	static UFunction* pFnEnableAI = NULL;

	if ( ! pFnEnableAI )
		pFnEnableAI = (UFunction*) UObject::GObjObjects()->Data[ 51884 ];

	ASFXAI_NativeBase_eventEnableAI_Parms EnableAI_Parms;
	EnableAI_Parms.bEnable = bEnable;
	EnableAI_Parms.nRequestedBy = nRequestedBy;

	this->ProcessEvent ( pFnEnableAI, &EnableAI_Parms, NULL );

	return EnableAI_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_NativeBase.CanInterruptCurrentState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_NativeBase::eventCanInterruptCurrentState ( )
{
	static UFunction* pFnCanInterruptCurrentState = NULL;

	if ( ! pFnCanInterruptCurrentState )
		pFnCanInterruptCurrentState = (UFunction*) UObject::GObjObjects()->Data[ 51877 ];

	ASFXAI_NativeBase_eventCanInterruptCurrentState_Parms CanInterruptCurrentState_Parms;

	this->ProcessEvent ( pFnCanInterruptCurrentState, &CanInterruptCurrentState_Parms, NULL );

	return CanInterruptCurrentState_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_NativeBase.CanDoCustomAction
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  CAction                        ( CPF_Parm )

bool ASFXAI_NativeBase::eventCanDoCustomAction ( unsigned char CAction )
{
	static UFunction* pFnCanDoCustomAction = NULL;

	if ( ! pFnCanDoCustomAction )
		pFnCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 51874 ];

	ASFXAI_NativeBase_eventCanDoCustomAction_Parms CanDoCustomAction_Parms;
	CanDoCustomAction_Parms.CAction = CAction;

	this->ProcessEvent ( pFnCanDoCustomAction, &CanDoCustomAction_Parms, NULL );

	return CanDoCustomAction_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_NativeBase.GetCurrentCustomAction
// [0x00420800] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioCustomAction*        pAction                        ( CPF_Parm | CPF_OutParm )

bool ASFXAI_NativeBase::eventGetCurrentCustomAction ( class UBioCustomAction** pAction )
{
	static UFunction* pFnGetCurrentCustomAction = NULL;

	if ( ! pFnGetCurrentCustomAction )
		pFnGetCurrentCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 51871 ];

	ASFXAI_NativeBase_eventGetCurrentCustomAction_Parms GetCurrentCustomAction_Parms;

	this->ProcessEvent ( pFnGetCurrentCustomAction, &GetCurrentCustomAction_Parms, NULL );

	if ( pAction )
		*pAction = GetCurrentCustomAction_Parms.pAction;

	return GetCurrentCustomAction_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_NativeBase.IsActorInLevel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// class ULevel*                  oLevel                         ( CPF_Parm )

bool ASFXAI_NativeBase::IsActorInLevel ( class AActor* oActor, class ULevel* oLevel )
{
	static UFunction* pFnIsActorInLevel = NULL;

	if ( ! pFnIsActorInLevel )
		pFnIsActorInLevel = (UFunction*) UObject::GObjObjects()->Data[ 51867 ];

	ASFXAI_NativeBase_execIsActorInLevel_Parms IsActorInLevel_Parms;
	IsActorInLevel_Parms.oActor = oActor;
	IsActorInLevel_Parms.oLevel = oLevel;

	pFnIsActorInLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActorInLevel, &IsActorInLevel_Parms, NULL );

	pFnIsActorInLevel->FunctionFlags |= 0x400;

	return IsActorInLevel_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_NativeBase.BioClearCrossLevelReferences
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ULevel*                  oLevel                         ( CPF_Parm )

void ASFXAI_NativeBase::eventBioClearCrossLevelReferences ( class ULevel* oLevel )
{
	static UFunction* pFnBioClearCrossLevelReferences = NULL;

	if ( ! pFnBioClearCrossLevelReferences )
		pFnBioClearCrossLevelReferences = (UFunction*) UObject::GObjObjects()->Data[ 51865 ];

	ASFXAI_NativeBase_eventBioClearCrossLevelReferences_Parms BioClearCrossLevelReferences_Parms;
	BioClearCrossLevelReferences_Parms.oLevel = oLevel;

	this->ProcessEvent ( pFnBioClearCrossLevelReferences, &BioClearCrossLevelReferences_Parms, NULL );
};

// Function SFXGame.SFXPath_AvoidClaimedCover.AvoidClaimedCover
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                P                              ( CPF_Parm )

bool USFXPath_AvoidClaimedCover::AvoidClaimedCover ( class ABioPawn* P )
{
	static UFunction* pFnAvoidClaimedCover = NULL;

	if ( ! pFnAvoidClaimedCover )
		pFnAvoidClaimedCover = (UFunction*) UObject::GObjObjects()->Data[ 58198 ];

	USFXPath_AvoidClaimedCover_execAvoidClaimedCover_Parms AvoidClaimedCover_Parms;
	AvoidClaimedCover_Parms.P = P;

	this->ProcessEvent ( pFnAvoidClaimedCover, &AvoidClaimedCover_Parms, NULL );

	return AvoidClaimedCover_Parms.ReturnValue;
};

// Function SFXGame.SFXPath_AvoidFireFromCover.Recycle
// [0x00020002] 
// Parameters infos:

void USFXPath_AvoidFireFromCover::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 58217 ];

	USFXPath_AvoidFireFromCover_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function SFXGame.SFXPath_AvoidFireFromCover.AvoidFireFromCover
// [0x00822002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   P                              ( CPF_Parm )
// unsigned long                  bCheckPlayerOnly               ( CPF_Parm )

bool USFXPath_AvoidFireFromCover::AvoidFireFromCover ( class APawn* P, unsigned long bCheckPlayerOnly )
{
	static UFunction* pFnAvoidFireFromCover = NULL;

	if ( ! pFnAvoidFireFromCover )
		pFnAvoidFireFromCover = (UFunction*) UObject::GObjObjects()->Data[ 58208 ];

	USFXPath_AvoidFireFromCover_execAvoidFireFromCover_Parms AvoidFireFromCover_Parms;
	AvoidFireFromCover_Parms.P = P;
	AvoidFireFromCover_Parms.bCheckPlayerOnly = bCheckPlayerOnly;

	this->ProcessEvent ( pFnAvoidFireFromCover, &AvoidFireFromCover_Parms, NULL );

	return AvoidFireFromCover_Parms.ReturnValue;
};

// Function SFXGame.SFXPath_AvoidPlayer.AvoidPlayer
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Pawn                           ( CPF_Parm )

bool USFXPath_AvoidPlayer::AvoidPlayer ( class ABioPawn* Pawn )
{
	static UFunction* pFnAvoidPlayer = NULL;

	if ( ! pFnAvoidPlayer )
		pFnAvoidPlayer = (UFunction*) UObject::GObjObjects()->Data[ 58218 ];

	USFXPath_AvoidPlayer_execAvoidPlayer_Parms AvoidPlayer_Parms;
	AvoidPlayer_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnAvoidPlayer, &AvoidPlayer_Parms, NULL );

	return AvoidPlayer_Parms.ReturnValue;
};

// Function SFXGame.SFXPath_WithinPlaypen.WithinPlaypen
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                P                              ( CPF_Parm )
// unsigned long                  bAvoidSubtractive              ( CPF_Parm )

bool USFXPath_WithinPlaypen::WithinPlaypen ( class ABioPawn* P, unsigned long bAvoidSubtractive )
{
	static UFunction* pFnWithinPlaypen = NULL;

	if ( ! pFnWithinPlaypen )
		pFnWithinPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 58223 ];

	USFXPath_WithinPlaypen_execWithinPlaypen_Parms WithinPlaypen_Parms;
	WithinPlaypen_Parms.P = P;
	WithinPlaypen_Parms.bAvoidSubtractive = bAvoidSubtractive;

	this->ProcessEvent ( pFnWithinPlaypen, &WithinPlaypen_Parms, NULL );

	return WithinPlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.DisableSquad
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioBaseSquad::eventDisableSquad ( )
{
	static UFunction* pFnDisableSquad = NULL;

	if ( ! pFnDisableSquad )
		pFnDisableSquad = (UFunction*) UObject::GObjObjects()->Data[ 32305 ];

	ABioBaseSquad_eventDisableSquad_Parms DisableSquad_Parms;

	this->ProcessEvent ( pFnDisableSquad, &DisableSquad_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.EnableSquad
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioBaseSquad::eventEnableSquad ( )
{
	static UFunction* pFnEnableSquad = NULL;

	if ( ! pFnEnableSquad )
		pFnEnableSquad = (UFunction*) UObject::GObjObjects()->Data[ 32302 ];

	ABioBaseSquad_eventEnableSquad_Parms EnableSquad_Parms;

	this->ProcessEvent ( pFnEnableSquad, &EnableSquad_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.GetMaxHazardLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ABioBaseSquad::GetMaxHazardLevel ( )
{
	static UFunction* pFnGetMaxHazardLevel = NULL;

	if ( ! pFnGetMaxHazardLevel )
		pFnGetMaxHazardLevel = (UFunction*) UObject::GObjObjects()->Data[ 32300 ];

	ABioBaseSquad_execGetMaxHazardLevel_Parms GetMaxHazardLevel_Parms;

	pFnGetMaxHazardLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxHazardLevel, &GetMaxHazardLevel_Parms, NULL );

	pFnGetMaxHazardLevel->FunctionFlags |= 0x400;

	return GetMaxHazardLevel_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ABioBaseSquad::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 32297 ];

	ABioBaseSquad_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.MakeHackable
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ABioBaseSquad*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ABioBaseSquad* ABioBaseSquad::MakeHackable ( )
{
	static UFunction* pFnMakeHackable = NULL;

	if ( ! pFnMakeHackable )
		pFnMakeHackable = (UFunction*) UObject::GObjObjects()->Data[ 32295 ];

	ABioBaseSquad_execMakeHackable_Parms MakeHackable_Parms;

	pFnMakeHackable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeHackable, &MakeHackable_Parms, NULL );

	pFnMakeHackable->FunctionFlags |= 0x400;

	return MakeHackable_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.IsBioPawnValid
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTestActor                     ( CPF_Parm )
// unsigned long                  bRequiresTargetFlag            ( CPF_OptionalParm | CPF_Parm )

unsigned char ABioBaseSquad::IsBioPawnValid ( class AActor* oTestActor, unsigned long bRequiresTargetFlag )
{
	static UFunction* pFnIsBioPawnValid = NULL;

	if ( ! pFnIsBioPawnValid )
		pFnIsBioPawnValid = (UFunction*) UObject::GObjObjects()->Data[ 32288 ];

	ABioBaseSquad_execIsBioPawnValid_Parms IsBioPawnValid_Parms;
	IsBioPawnValid_Parms.oTestActor = oTestActor;
	IsBioPawnValid_Parms.bRequiresTargetFlag = bRequiresTargetFlag;

	this->ProcessEvent ( pFnIsBioPawnValid, &IsBioPawnValid_Parms, NULL );

	return IsBioPawnValid_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.GenerateProximityAlarmEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   oMember                        ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_Parm )
// int                            nRelationship                  ( CPF_Parm )

void ABioBaseSquad::eventGenerateProximityAlarmEvent ( class APawn* oMember, class AActor* oTarget, int nRelationship )
{
	static UFunction* pFnGenerateProximityAlarmEvent = NULL;

	if ( ! pFnGenerateProximityAlarmEvent )
		pFnGenerateProximityAlarmEvent = (UFunction*) UObject::GObjObjects()->Data[ 32281 ];

	ABioBaseSquad_eventGenerateProximityAlarmEvent_Parms GenerateProximityAlarmEvent_Parms;
	GenerateProximityAlarmEvent_Parms.oMember = oMember;
	GenerateProximityAlarmEvent_Parms.oTarget = oTarget;
	GenerateProximityAlarmEvent_Parms.nRelationship = nRelationship;

	this->ProcessEvent ( pFnGenerateProximityAlarmEvent, &GenerateProximityAlarmEvent_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.MemberRemoved
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )

void ABioBaseSquad::eventMemberRemoved ( class APawn* oPawn )
{
	static UFunction* pFnMemberRemoved = NULL;

	if ( ! pFnMemberRemoved )
		pFnMemberRemoved = (UFunction*) UObject::GObjObjects()->Data[ 32278 ];

	ABioBaseSquad_eventMemberRemoved_Parms MemberRemoved_Parms;
	MemberRemoved_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnMemberRemoved, &MemberRemoved_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.RemoveDyingMember
// [0x00020002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )

void ABioBaseSquad::RemoveDyingMember ( class APawn* oPawn )
{
	static UFunction* pFnRemoveDyingMember = NULL;

	if ( ! pFnRemoveDyingMember )
		pFnRemoveDyingMember = (UFunction*) UObject::GObjObjects()->Data[ 32276 ];

	ABioBaseSquad_execRemoveDyingMember_Parms RemoveDyingMember_Parms;
	RemoveDyingMember_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnRemoveDyingMember, &RemoveDyingMember_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.AddMember
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Pawn                           ( CPF_Parm )
// unsigned long                  bCheckPlaypens                 ( CPF_OptionalParm | CPF_Parm )

int ABioBaseSquad::eventAddMember ( class APawn* Pawn, unsigned long bCheckPlaypens )
{
	static UFunction* pFnAddMember = NULL;

	if ( ! pFnAddMember )
		pFnAddMember = (UFunction*) UObject::GObjObjects()->Data[ 32265 ];

	ABioBaseSquad_eventAddMember_Parms AddMember_Parms;
	AddMember_Parms.Pawn = Pawn;
	AddMember_Parms.bCheckPlaypens = bCheckPlaypens;

	this->ProcessEvent ( pFnAddMember, &AddMember_Parms, NULL );

	return AddMember_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.GetNumberOfLiveMembers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ABioBaseSquad::GetNumberOfLiveMembers ( )
{
	static UFunction* pFnGetNumberOfLiveMembers = NULL;

	if ( ! pFnGetNumberOfLiveMembers )
		pFnGetNumberOfLiveMembers = (UFunction*) UObject::GObjObjects()->Data[ 32263 ];

	ABioBaseSquad_execGetNumberOfLiveMembers_Parms GetNumberOfLiveMembers_Parms;

	pFnGetNumberOfLiveMembers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumberOfLiveMembers, &GetNumberOfLiveMembers_Parms, NULL );

	pFnGetNumberOfLiveMembers->FunctionFlags |= 0x400;

	return GetNumberOfLiveMembers_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.GetPawnBehavior
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioEpicPawnBehavior*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

class UBioEpicPawnBehavior* ABioBaseSquad::GetPawnBehavior ( class AActor* oActor )
{
	static UFunction* pFnGetPawnBehavior = NULL;

	if ( ! pFnGetPawnBehavior )
		pFnGetPawnBehavior = (UFunction*) UObject::GObjObjects()->Data[ 32260 ];

	ABioBaseSquad_execGetPawnBehavior_Parms GetPawnBehavior_Parms;
	GetPawnBehavior_Parms.oActor = oActor;

	pFnGetPawnBehavior->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPawnBehavior, &GetPawnBehavior_Parms, NULL );

	pFnGetPawnBehavior->FunctionFlags |= 0x400;

	return GetPawnBehavior_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.GetSquad
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioBaseSquad*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

class ABioBaseSquad* ABioBaseSquad::GetSquad ( class AActor* oActor )
{
	static UFunction* pFnGetSquad = NULL;

	if ( ! pFnGetSquad )
		pFnGetSquad = (UFunction*) UObject::GObjObjects()->Data[ 32257 ];

	ABioBaseSquad_execGetSquad_Parms GetSquad_Parms;
	GetSquad_Parms.oActor = oActor;

	pFnGetSquad->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSquad, &GetSquad_Parms, NULL );

	pFnGetSquad->FunctionFlags |= 0x400;

	return GetSquad_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.FindSquadMemberByTag
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmTag                          ( CPF_Parm )

class APawn* ABioBaseSquad::FindSquadMemberByTag ( struct FName nmTag )
{
	static UFunction* pFnFindSquadMemberByTag = NULL;

	if ( ! pFnFindSquadMemberByTag )
		pFnFindSquadMemberByTag = (UFunction*) UObject::GObjObjects()->Data[ 32254 ];

	ABioBaseSquad_execFindSquadMemberByTag_Parms FindSquadMemberByTag_Parms;
	memcpy ( &FindSquadMemberByTag_Parms.nmTag, &nmTag, 0x8 );

	pFnFindSquadMemberByTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSquadMemberByTag, &FindSquadMemberByTag_Parms, NULL );

	pFnFindSquadMemberByTag->FunctionFlags |= 0x400;

	return FindSquadMemberByTag_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Member                         ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )

bool ABioBaseSquad::Died ( class APawn* Member, class AController* Killer )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 32248 ];

	ABioBaseSquad_execDied_Parms Died_Parms;
	Died_Parms.Member = Member;
	Died_Parms.Killer = Killer;

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.NotifyPlaypenChanged
// [0x00020002] 
// Parameters infos:

void ABioBaseSquad::NotifyPlaypenChanged ( )
{
	static UFunction* pFnNotifyPlaypenChanged = NULL;

	if ( ! pFnNotifyPlaypenChanged )
		pFnNotifyPlaypenChanged = (UFunction*) UObject::GObjObjects()->Data[ 32245 ];

	ABioBaseSquad_execNotifyPlaypenChanged_Parms NotifyPlaypenChanged_Parms;

	this->ProcessEvent ( pFnNotifyPlaypenChanged, &NotifyPlaypenChanged_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.NotifyNoEnemiesPerceived
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ABioBaseSquad::eventNotifyNoEnemiesPerceived ( )
{
	static UFunction* pFnNotifyNoEnemiesPerceived = NULL;

	if ( ! pFnNotifyNoEnemiesPerceived )
		pFnNotifyNoEnemiesPerceived = (UFunction*) UObject::GObjObjects()->Data[ 32244 ];

	ABioBaseSquad_eventNotifyNoEnemiesPerceived_Parms NotifyNoEnemiesPerceived_Parms;

	this->ProcessEvent ( pFnNotifyNoEnemiesPerceived, &NotifyNoEnemiesPerceived_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.NotifyEnemyPerceived
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ABioBaseSquad::eventNotifyEnemyPerceived ( )
{
	static UFunction* pFnNotifyEnemyPerceived = NULL;

	if ( ! pFnNotifyEnemyPerceived )
		pFnNotifyEnemyPerceived = (UFunction*) UObject::GObjObjects()->Data[ 32243 ];

	ABioBaseSquad_eventNotifyEnemyPerceived_Parms NotifyEnemyPerceived_Parms;

	this->ProcessEvent ( pFnNotifyEnemyPerceived, &NotifyEnemyPerceived_Parms, NULL );
};

// Function SFXGame.BioBaseSquad.GetPlaypenReturnPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oPawn                          ( CPF_Parm )

class AActor* ABioBaseSquad::GetPlaypenReturnPoint ( class APawn* oPawn )
{
	static UFunction* pFnGetPlaypenReturnPoint = NULL;

	if ( ! pFnGetPlaypenReturnPoint )
		pFnGetPlaypenReturnPoint = (UFunction*) UObject::GObjObjects()->Data[ 32240 ];

	ABioBaseSquad_execGetPlaypenReturnPoint_Parms GetPlaypenReturnPoint_Parms;
	GetPlaypenReturnPoint_Parms.oPawn = oPawn;

	pFnGetPlaypenReturnPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlaypenReturnPoint, &GetPlaypenReturnPoint_Parms, NULL );

	pFnGetPlaypenReturnPoint->FunctionFlags |= 0x400;

	return GetPlaypenReturnPoint_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.GetPlaypenNavOrigin
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oPawn                          ( CPF_OptionalParm | CPF_Parm )

class AActor* ABioBaseSquad::GetPlaypenNavOrigin ( class APawn* oPawn )
{
	static UFunction* pFnGetPlaypenNavOrigin = NULL;

	if ( ! pFnGetPlaypenNavOrigin )
		pFnGetPlaypenNavOrigin = (UFunction*) UObject::GObjObjects()->Data[ 32237 ];

	ABioBaseSquad_execGetPlaypenNavOrigin_Parms GetPlaypenNavOrigin_Parms;
	GetPlaypenNavOrigin_Parms.oPawn = oPawn;

	pFnGetPlaypenNavOrigin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlaypenNavOrigin, &GetPlaypenNavOrigin_Parms, NULL );

	pFnGetPlaypenNavOrigin->FunctionFlags |= 0x400;

	return GetPlaypenNavOrigin_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.UpdatePlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioBaseSquad::UpdatePlaypen ( )
{
	static UFunction* pFnUpdatePlaypen = NULL;

	if ( ! pFnUpdatePlaypen )
		pFnUpdatePlaypen = (UFunction*) UObject::GObjObjects()->Data[ 32236 ];

	ABioBaseSquad_execUpdatePlaypen_Parms UpdatePlaypen_Parms;

	pFnUpdatePlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdatePlaypen, &UpdatePlaypen_Parms, NULL );

	pFnUpdatePlaypen->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseSquad.IsVolumeInPlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPlaypenVolume*       Volume                         ( CPF_Parm )

bool ABioBaseSquad::IsVolumeInPlaypen ( class ABioPlaypenVolume* Volume )
{
	static UFunction* pFnIsVolumeInPlaypen = NULL;

	if ( ! pFnIsVolumeInPlaypen )
		pFnIsVolumeInPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 32233 ];

	ABioBaseSquad_execIsVolumeInPlaypen_Parms IsVolumeInPlaypen_Parms;
	IsVolumeInPlaypen_Parms.Volume = Volume;

	pFnIsVolumeInPlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsVolumeInPlaypen, &IsVolumeInPlaypen_Parms, NULL );

	pFnIsVolumeInPlaypen->FunctionFlags |= 0x400;

	return IsVolumeInPlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.RemoveVolumeFromPlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPlaypenVolume*       Volume                         ( CPF_Parm )

void ABioBaseSquad::RemoveVolumeFromPlaypen ( class ABioPlaypenVolume* Volume )
{
	static UFunction* pFnRemoveVolumeFromPlaypen = NULL;

	if ( ! pFnRemoveVolumeFromPlaypen )
		pFnRemoveVolumeFromPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 32231 ];

	ABioBaseSquad_execRemoveVolumeFromPlaypen_Parms RemoveVolumeFromPlaypen_Parms;
	RemoveVolumeFromPlaypen_Parms.Volume = Volume;

	pFnRemoveVolumeFromPlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveVolumeFromPlaypen, &RemoveVolumeFromPlaypen_Parms, NULL );

	pFnRemoveVolumeFromPlaypen->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseSquad.AddVolumeToPlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPlaypenVolume*       Volume                         ( CPF_Parm )

void ABioBaseSquad::AddVolumeToPlaypen ( class ABioPlaypenVolume* Volume )
{
	static UFunction* pFnAddVolumeToPlaypen = NULL;

	if ( ! pFnAddVolumeToPlaypen )
		pFnAddVolumeToPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 32229 ];

	ABioBaseSquad_execAddVolumeToPlaypen_Parms AddVolumeToPlaypen_Parms;
	AddVolumeToPlaypen_Parms.Volume = Volume;

	pFnAddVolumeToPlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddVolumeToPlaypen, &AddVolumeToPlaypen_Parms, NULL );

	pFnAddVolumeToPlaypen->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseSquad.HasPlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioBaseSquad::HasPlaypen ( )
{
	static UFunction* pFnHasPlaypen = NULL;

	if ( ! pFnHasPlaypen )
		pFnHasPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 32227 ];

	ABioBaseSquad_execHasPlaypen_Parms HasPlaypen_Parms;

	pFnHasPlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasPlaypen, &HasPlaypen_Parms, NULL );

	pFnHasPlaypen->FunctionFlags |= 0x400;

	return HasPlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.IsActorInSubtractivePlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool ABioBaseSquad::IsActorInSubtractivePlaypen ( class AActor* oActor )
{
	static UFunction* pFnIsActorInSubtractivePlaypen = NULL;

	if ( ! pFnIsActorInSubtractivePlaypen )
		pFnIsActorInSubtractivePlaypen = (UFunction*) UObject::GObjObjects()->Data[ 32224 ];

	ABioBaseSquad_execIsActorInSubtractivePlaypen_Parms IsActorInSubtractivePlaypen_Parms;
	IsActorInSubtractivePlaypen_Parms.oActor = oActor;

	pFnIsActorInSubtractivePlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActorInSubtractivePlaypen, &IsActorInSubtractivePlaypen_Parms, NULL );

	pFnIsActorInSubtractivePlaypen->FunctionFlags |= 0x400;

	return IsActorInSubtractivePlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.IsActorInPlaypen
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool ABioBaseSquad::IsActorInPlaypen ( class AActor* oActor )
{
	static UFunction* pFnIsActorInPlaypen = NULL;

	if ( ! pFnIsActorInPlaypen )
		pFnIsActorInPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 32221 ];

	ABioBaseSquad_execIsActorInPlaypen_Parms IsActorInPlaypen_Parms;
	IsActorInPlaypen_Parms.oActor = oActor;

	pFnIsActorInPlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActorInPlaypen, &IsActorInPlaypen_Parms, NULL );

	pFnIsActorInPlaypen->FunctionFlags |= 0x400;

	return IsActorInPlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.IsPositionInSubtractivePlaypen
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vLocation                      ( CPF_Const | CPF_Parm | CPF_OutParm )

bool ABioBaseSquad::IsPositionInSubtractivePlaypen ( struct FVector* vLocation )
{
	static UFunction* pFnIsPositionInSubtractivePlaypen = NULL;

	if ( ! pFnIsPositionInSubtractivePlaypen )
		pFnIsPositionInSubtractivePlaypen = (UFunction*) UObject::GObjObjects()->Data[ 32218 ];

	ABioBaseSquad_execIsPositionInSubtractivePlaypen_Parms IsPositionInSubtractivePlaypen_Parms;

	pFnIsPositionInSubtractivePlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPositionInSubtractivePlaypen, &IsPositionInSubtractivePlaypen_Parms, NULL );

	pFnIsPositionInSubtractivePlaypen->FunctionFlags |= 0x400;

	if ( vLocation )
		memcpy ( vLocation, &IsPositionInSubtractivePlaypen_Parms.vLocation, 0xC );

	return IsPositionInSubtractivePlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.IsPositionInPlaypen
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vLocation                      ( CPF_Const | CPF_Parm | CPF_OutParm )

bool ABioBaseSquad::IsPositionInPlaypen ( struct FVector* vLocation )
{
	static UFunction* pFnIsPositionInPlaypen = NULL;

	if ( ! pFnIsPositionInPlaypen )
		pFnIsPositionInPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 32215 ];

	ABioBaseSquad_execIsPositionInPlaypen_Parms IsPositionInPlaypen_Parms;

	pFnIsPositionInPlaypen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPositionInPlaypen, &IsPositionInPlaypen_Parms, NULL );

	pFnIsPositionInPlaypen->FunctionFlags |= 0x400;

	if ( vLocation )
		memcpy ( vLocation, &IsPositionInPlaypen_Parms.vLocation, 0xC );

	return IsPositionInPlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.PerceivedPawns
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm | CPF_OutParm )

void ABioBaseSquad::PerceivedPawns ( class APawn** oPawn )
{
	static UFunction* pFnPerceivedPawns = NULL;

	if ( ! pFnPerceivedPawns )
		pFnPerceivedPawns = (UFunction*) UObject::GObjObjects()->Data[ 32213 ];

	ABioBaseSquad_execPerceivedPawns_Parms PerceivedPawns_Parms;

	pFnPerceivedPawns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerceivedPawns, &PerceivedPawns_Parms, NULL );

	pFnPerceivedPawns->FunctionFlags |= 0x400;

	if ( oPawn )
		*oPawn = PerceivedPawns_Parms.oPawn;
};

// Function SFXGame.BioBaseSquad.SquadMembers
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ABioAiController*        oController                    ( CPF_Parm | CPF_OutParm )

void ABioBaseSquad::SquadMembers ( class ABioAiController** oController )
{
	static UFunction* pFnSquadMembers = NULL;

	if ( ! pFnSquadMembers )
		pFnSquadMembers = (UFunction*) UObject::GObjObjects()->Data[ 32211 ];

	ABioBaseSquad_execSquadMembers_Parms SquadMembers_Parms;

	pFnSquadMembers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSquadMembers, &SquadMembers_Parms, NULL );

	pFnSquadMembers->FunctionFlags |= 0x400;

	if ( oController )
		*oController = SquadMembers_Parms.oController;
};

// Function SFXGame.BioBaseSquad.CanShoot
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oSource                        ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool ABioBaseSquad::CanShoot ( class APawn* oSource, class AActor* oTarget )
{
	static UFunction* pFnCanShoot = NULL;

	if ( ! pFnCanShoot )
		pFnCanShoot = (UFunction*) UObject::GObjObjects()->Data[ 32207 ];

	ABioBaseSquad_execCanShoot_Parms CanShoot_Parms;
	CanShoot_Parms.oSource = oSource;
	CanShoot_Parms.oTarget = oTarget;

	pFnCanShoot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanShoot, &CanShoot_Parms, NULL );

	pFnCanShoot->FunctionFlags |= 0x400;

	return CanShoot_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.CanShootExposed
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oSource                        ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_Parm )
// int                            bExposed                       ( CPF_Parm | CPF_OutParm )

bool ABioBaseSquad::CanShootExposed ( class APawn* oSource, class AActor* oTarget, int* bExposed )
{
	static UFunction* pFnCanShootExposed = NULL;

	if ( ! pFnCanShootExposed )
		pFnCanShootExposed = (UFunction*) UObject::GObjObjects()->Data[ 32202 ];

	ABioBaseSquad_execCanShootExposed_Parms CanShootExposed_Parms;
	CanShootExposed_Parms.oSource = oSource;
	CanShootExposed_Parms.oTarget = oTarget;

	pFnCanShootExposed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanShootExposed, &CanShootExposed_Parms, NULL );

	pFnCanShootExposed->FunctionFlags |= 0x400;

	if ( bExposed )
		*bExposed = CanShootExposed_Parms.bExposed;

	return CanShootExposed_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.RemoveSquadFromPerception
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioBaseSquad*           pSquad                         ( CPF_Parm )

void ABioBaseSquad::RemoveSquadFromPerception ( class ABioBaseSquad* pSquad )
{
	static UFunction* pFnRemoveSquadFromPerception = NULL;

	if ( ! pFnRemoveSquadFromPerception )
		pFnRemoveSquadFromPerception = (UFunction*) UObject::GObjObjects()->Data[ 32200 ];

	ABioBaseSquad_execRemoveSquadFromPerception_Parms RemoveSquadFromPerception_Parms;
	RemoveSquadFromPerception_Parms.pSquad = pSquad;

	pFnRemoveSquadFromPerception->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveSquadFromPerception, &RemoveSquadFromPerception_Parms, NULL );

	pFnRemoveSquadFromPerception->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseSquad.IsPawnPerceived
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   pPawn                          ( CPF_Parm )

bool ABioBaseSquad::IsPawnPerceived ( class APawn* pPawn )
{
	static UFunction* pFnIsPawnPerceived = NULL;

	if ( ! pFnIsPawnPerceived )
		pFnIsPawnPerceived = (UFunction*) UObject::GObjObjects()->Data[ 32197 ];

	ABioBaseSquad_execIsPawnPerceived_Parms IsPawnPerceived_Parms;
	IsPawnPerceived_Parms.pPawn = pPawn;

	pFnIsPawnPerceived->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPawnPerceived, &IsPawnPerceived_Parms, NULL );

	pFnIsPawnPerceived->FunctionFlags |= 0x400;

	return IsPawnPerceived_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.IsSquadPerceived
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioBaseSquad*           pSquad                         ( CPF_Parm )

bool ABioBaseSquad::IsSquadPerceived ( class ABioBaseSquad* pSquad )
{
	static UFunction* pFnIsSquadPerceived = NULL;

	if ( ! pFnIsSquadPerceived )
		pFnIsSquadPerceived = (UFunction*) UObject::GObjObjects()->Data[ 32194 ];

	ABioBaseSquad_execIsSquadPerceived_Parms IsSquadPerceived_Parms;
	IsSquadPerceived_Parms.pSquad = pSquad;

	pFnIsSquadPerceived->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSquadPerceived, &IsSquadPerceived_Parms, NULL );

	pFnIsSquadPerceived->FunctionFlags |= 0x400;

	return IsSquadPerceived_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.AddSquadToPerception
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ABioBaseSquad*           pSquad                         ( CPF_Parm )
// class APawn*                   pSource                        ( CPF_OptionalParm | CPF_Parm )
// class APawn*                   pTarget                        ( CPF_OptionalParm | CPF_Parm )

void ABioBaseSquad::AddSquadToPerception ( class ABioBaseSquad* pSquad, class APawn* pSource, class APawn* pTarget )
{
	static UFunction* pFnAddSquadToPerception = NULL;

	if ( ! pFnAddSquadToPerception )
		pFnAddSquadToPerception = (UFunction*) UObject::GObjObjects()->Data[ 32190 ];

	ABioBaseSquad_execAddSquadToPerception_Parms AddSquadToPerception_Parms;
	AddSquadToPerception_Parms.pSquad = pSquad;
	AddSquadToPerception_Parms.pSource = pSource;
	AddSquadToPerception_Parms.pTarget = pTarget;

	pFnAddSquadToPerception->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddSquadToPerception, &AddSquadToPerception_Parms, NULL );

	pFnAddSquadToPerception->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseSquad.SetMemberMoveIndicator
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )
// class ABioTacticalMoveToIndicator* oIndicator                     ( CPF_Parm )

void ABioBaseSquad::SetMemberMoveIndicator ( int nIndex, class ABioTacticalMoveToIndicator* oIndicator )
{
	static UFunction* pFnSetMemberMoveIndicator = NULL;

	if ( ! pFnSetMemberMoveIndicator )
		pFnSetMemberMoveIndicator = (UFunction*) UObject::GObjObjects()->Data[ 32187 ];

	ABioBaseSquad_execSetMemberMoveIndicator_Parms SetMemberMoveIndicator_Parms;
	SetMemberMoveIndicator_Parms.nIndex = nIndex;
	SetMemberMoveIndicator_Parms.oIndicator = oIndicator;

	pFnSetMemberMoveIndicator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMemberMoveIndicator, &SetMemberMoveIndicator_Parms, NULL );

	pFnSetMemberMoveIndicator->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseSquad.GetMemberMoveIndicator
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class ABioTacticalMoveToIndicator* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

class ABioTacticalMoveToIndicator* ABioBaseSquad::GetMemberMoveIndicator ( int nIndex )
{
	static UFunction* pFnGetMemberMoveIndicator = NULL;

	if ( ! pFnGetMemberMoveIndicator )
		pFnGetMemberMoveIndicator = (UFunction*) UObject::GObjObjects()->Data[ 32184 ];

	ABioBaseSquad_execGetMemberMoveIndicator_Parms GetMemberMoveIndicator_Parms;
	GetMemberMoveIndicator_Parms.nIndex = nIndex;

	pFnGetMemberMoveIndicator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMemberMoveIndicator, &GetMemberMoveIndicator_Parms, NULL );

	pFnGetMemberMoveIndicator->FunctionFlags |= 0x400;

	return GetMemberMoveIndicator_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.RemoveMemberByIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

bool ABioBaseSquad::RemoveMemberByIndex ( int nIndex )
{
	static UFunction* pFnRemoveMemberByIndex = NULL;

	if ( ! pFnRemoveMemberByIndex )
		pFnRemoveMemberByIndex = (UFunction*) UObject::GObjObjects()->Data[ 32181 ];

	ABioBaseSquad_execRemoveMemberByIndex_Parms RemoveMemberByIndex_Parms;
	RemoveMemberByIndex_Parms.nIndex = nIndex;

	pFnRemoveMemberByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveMemberByIndex, &RemoveMemberByIndex_Parms, NULL );

	pFnRemoveMemberByIndex->FunctionFlags |= 0x400;

	return RemoveMemberByIndex_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.RemoveMember
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   pPawn                          ( CPF_Parm )

bool ABioBaseSquad::RemoveMember ( class APawn* pPawn )
{
	static UFunction* pFnRemoveMember = NULL;

	if ( ! pFnRemoveMember )
		pFnRemoveMember = (UFunction*) UObject::GObjObjects()->Data[ 32178 ];

	ABioBaseSquad_execRemoveMember_Parms RemoveMember_Parms;
	RemoveMember_Parms.pPawn = pPawn;

	pFnRemoveMember->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveMember, &RemoveMember_Parms, NULL );

	pFnRemoveMember->FunctionFlags |= 0x400;

	return RemoveMember_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.ClearSquad
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioBaseSquad::ClearSquad ( )
{
	static UFunction* pFnClearSquad = NULL;

	if ( ! pFnClearSquad )
		pFnClearSquad = (UFunction*) UObject::GObjObjects()->Data[ 32177 ];

	ABioBaseSquad_execClearSquad_Parms ClearSquad_Parms;

	pFnClearSquad->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearSquad, &ClearSquad_Parms, NULL );

	pFnClearSquad->FunctionFlags |= 0x400;
};

// Function SFXGame.BioBaseSquad.GetMemberIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   pPawn                          ( CPF_Parm )

int ABioBaseSquad::GetMemberIndex ( class APawn* pPawn )
{
	static UFunction* pFnGetMemberIndex = NULL;

	if ( ! pFnGetMemberIndex )
		pFnGetMemberIndex = (UFunction*) UObject::GObjObjects()->Data[ 32174 ];

	ABioBaseSquad_execGetMemberIndex_Parms GetMemberIndex_Parms;
	GetMemberIndex_Parms.pPawn = pPawn;

	pFnGetMemberIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMemberIndex, &GetMemberIndex_Parms, NULL );

	pFnGetMemberIndex->FunctionFlags |= 0x400;

	return GetMemberIndex_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.GetMember
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )

class APawn* ABioBaseSquad::GetMember ( int nIndex )
{
	static UFunction* pFnGetMember = NULL;

	if ( ! pFnGetMember )
		pFnGetMember = (UFunction*) UObject::GObjObjects()->Data[ 32171 ];

	ABioBaseSquad_execGetMember_Parms GetMember_Parms;
	GetMember_Parms.nIndex = nIndex;

	pFnGetMember->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMember, &GetMember_Parms, NULL );

	pFnGetMember->FunctionFlags |= 0x400;

	return GetMember_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.GetSquadLeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APawn* ABioBaseSquad::GetSquadLeader ( )
{
	static UFunction* pFnGetSquadLeader = NULL;

	if ( ! pFnGetSquadLeader )
		pFnGetSquadLeader = (UFunction*) UObject::GObjObjects()->Data[ 32169 ];

	ABioBaseSquad_execGetSquadLeader_Parms GetSquadLeader_Parms;

	pFnGetSquadLeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSquadLeader, &GetSquadLeader_Parms, NULL );

	pFnGetSquadLeader->FunctionFlags |= 0x400;

	return GetSquadLeader_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.GetHackedSquadSize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ABioBaseSquad::GetHackedSquadSize ( )
{
	static UFunction* pFnGetHackedSquadSize = NULL;

	if ( ! pFnGetHackedSquadSize )
		pFnGetHackedSquadSize = (UFunction*) UObject::GObjObjects()->Data[ 32167 ];

	ABioBaseSquad_execGetHackedSquadSize_Parms GetHackedSquadSize_Parms;

	pFnGetHackedSquadSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHackedSquadSize, &GetHackedSquadSize_Parms, NULL );

	pFnGetHackedSquadSize->FunctionFlags |= 0x400;

	return GetHackedSquadSize_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.GetSquadSize
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ABioBaseSquad::GetSquadSize ( )
{
	static UFunction* pFnGetSquadSize = NULL;

	if ( ! pFnGetSquadSize )
		pFnGetSquadSize = (UFunction*) UObject::GObjObjects()->Data[ 32165 ];

	ABioBaseSquad_execGetSquadSize_Parms GetSquadSize_Parms;

	pFnGetSquadSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSquadSize, &GetSquadSize_Parms, NULL );

	pFnGetSquadSize->FunctionFlags |= 0x400;

	return GetSquadSize_Parms.ReturnValue;
};

// Function SFXGame.BioBaseSquad.IsInSquad
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   pPawn                          ( CPF_Parm )

bool ABioBaseSquad::IsInSquad ( class APawn* pPawn )
{
	static UFunction* pFnIsInSquad = NULL;

	if ( ! pFnIsInSquad )
		pFnIsInSquad = (UFunction*) UObject::GObjObjects()->Data[ 32162 ];

	ABioBaseSquad_execIsInSquad_Parms IsInSquad_Parms;
	IsInSquad_Parms.pPawn = pPawn;

	pFnIsInSquad->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInSquad, &IsInSquad_Parms, NULL );

	pFnIsInSquad->FunctionFlags |= 0x400;

	return IsInSquad_Parms.ReturnValue;
};

// Function SFXGame.BioFaction.IsFriendly
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Type                           ( CPF_Parm )

bool UBioFaction::IsFriendly ( unsigned char Type )
{
	static UFunction* pFnIsFriendly = NULL;

	if ( ! pFnIsFriendly )
		pFnIsFriendly = (UFunction*) UObject::GObjObjects()->Data[ 36214 ];

	UBioFaction_execIsFriendly_Parms IsFriendly_Parms;
	IsFriendly_Parms.Type = Type;

	pFnIsFriendly->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFriendly, &IsFriendly_Parms, NULL );

	pFnIsFriendly->FunctionFlags |= 0x400;

	return IsFriendly_Parms.ReturnValue;
};

// Function SFXGame.BioFaction.IsHostile
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Type                           ( CPF_Parm )

bool UBioFaction::IsHostile ( unsigned char Type )
{
	static UFunction* pFnIsHostile = NULL;

	if ( ! pFnIsHostile )
		pFnIsHostile = (UFunction*) UObject::GObjObjects()->Data[ 36211 ];

	UBioFaction_execIsHostile_Parms IsHostile_Parms;
	IsHostile_Parms.Type = Type;

	pFnIsHostile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHostile, &IsHostile_Parms, NULL );

	pFnIsHostile->FunctionFlags |= 0x400;

	return IsHostile_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSquad.MemberRemoved
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )

void ABioPlayerSquad::eventMemberRemoved ( class APawn* oPawn )
{
	static UFunction* pFnMemberRemoved = NULL;

	if ( ! pFnMemberRemoved )
		pFnMemberRemoved = (UFunction*) UObject::GObjObjects()->Data[ 42718 ];

	ABioPlayerSquad_eventMemberRemoved_Parms MemberRemoved_Parms;
	MemberRemoved_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnMemberRemoved, &MemberRemoved_Parms, NULL );
};

// Function SFXGame.BioPlayerSquad.GetSquadSizeFromScript
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ABioPlayerSquad::eventGetSquadSizeFromScript ( )
{
	static UFunction* pFnGetSquadSizeFromScript = NULL;

	if ( ! pFnGetSquadSizeFromScript )
		pFnGetSquadSizeFromScript = (UFunction*) UObject::GObjObjects()->Data[ 42713 ];

	ABioPlayerSquad_eventGetSquadSizeFromScript_Parms GetSquadSizeFromScript_Parms;

	this->ProcessEvent ( pFnGetSquadSizeFromScript, &GetSquadSizeFromScript_Parms, NULL );

	return GetSquadSizeFromScript_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSquad.GetSquadSize
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ABioPlayerSquad::GetSquadSize ( )
{
	static UFunction* pFnGetSquadSize = NULL;

	if ( ! pFnGetSquadSize )
		pFnGetSquadSize = (UFunction*) UObject::GObjObjects()->Data[ 42711 ];

	ABioPlayerSquad_execGetSquadSize_Parms GetSquadSize_Parms;

	pFnGetSquadSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSquadSize, &GetSquadSize_Parms, NULL );

	pFnGetSquadSize->FunctionFlags |= 0x400;

	return GetSquadSize_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSquad.AddMember
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Pawn                           ( CPF_Parm )
// unsigned long                  bCheckPlaypens                 ( CPF_OptionalParm | CPF_Parm )

int ABioPlayerSquad::eventAddMember ( class APawn* Pawn, unsigned long bCheckPlaypens )
{
	static UFunction* pFnAddMember = NULL;

	if ( ! pFnAddMember )
		pFnAddMember = (UFunction*) UObject::GObjObjects()->Data[ 42704 ];

	ABioPlayerSquad_eventAddMember_Parms AddMember_Parms;
	AddMember_Parms.Pawn = Pawn;
	AddMember_Parms.bCheckPlaypens = bCheckPlaypens;

	this->ProcessEvent ( pFnAddMember, &AddMember_Parms, NULL );

	return AddMember_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSquad.IsFieldingInitialPlayerPawn
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPlayerSquad::IsFieldingInitialPlayerPawn ( )
{
	static UFunction* pFnIsFieldingInitialPlayerPawn = NULL;

	if ( ! pFnIsFieldingInitialPlayerPawn )
		pFnIsFieldingInitialPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 42702 ];

	ABioPlayerSquad_execIsFieldingInitialPlayerPawn_Parms IsFieldingInitialPlayerPawn_Parms;

	pFnIsFieldingInitialPlayerPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFieldingInitialPlayerPawn, &IsFieldingInitialPlayerPawn_Parms, NULL );

	pFnIsFieldingInitialPlayerPawn->FunctionFlags |= 0x400;

	return IsFieldingInitialPlayerPawn_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSquad.GetPercentHealthOnResurrection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPlayerSquad::GetPercentHealthOnResurrection ( )
{
	static UFunction* pFnGetPercentHealthOnResurrection = NULL;

	if ( ! pFnGetPercentHealthOnResurrection )
		pFnGetPercentHealthOnResurrection = (UFunction*) UObject::GObjObjects()->Data[ 42700 ];

	ABioPlayerSquad_execGetPercentHealthOnResurrection_Parms GetPercentHealthOnResurrection_Parms;

	pFnGetPercentHealthOnResurrection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPercentHealthOnResurrection, &GetPercentHealthOnResurrection_Parms, NULL );

	pFnGetPercentHealthOnResurrection->FunctionFlags |= 0x400;

	return GetPercentHealthOnResurrection_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSquad.GetSquadLeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APawn* ABioPlayerSquad::GetSquadLeader ( )
{
	static UFunction* pFnGetSquadLeader = NULL;

	if ( ! pFnGetSquadLeader )
		pFnGetSquadLeader = (UFunction*) UObject::GObjObjects()->Data[ 42698 ];

	ABioPlayerSquad_execGetSquadLeader_Parms GetSquadLeader_Parms;

	pFnGetSquadLeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSquadLeader, &GetSquadLeader_Parms, NULL );

	pFnGetSquadLeader->FunctionFlags |= 0x400;

	return GetSquadLeader_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSquad.SetSquadLeader
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   pPawn                          ( CPF_Parm )

bool ABioPlayerSquad::SetSquadLeader ( class APawn* pPawn )
{
	static UFunction* pFnSetSquadLeader = NULL;

	if ( ! pFnSetSquadLeader )
		pFnSetSquadLeader = (UFunction*) UObject::GObjObjects()->Data[ 42695 ];

	ABioPlayerSquad_execSetSquadLeader_Parms SetSquadLeader_Parms;
	SetSquadLeader_Parms.pPawn = pPawn;

	pFnSetSquadLeader->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSquadLeader, &SetSquadLeader_Parms, NULL );

	pFnSetSquadLeader->FunctionFlags |= 0x400;

	return SetSquadLeader_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSquad.SquadExitCombatMode
// [0x00020002] 
// Parameters infos:

void ABioPlayerSquad::SquadExitCombatMode ( )
{
	static UFunction* pFnSquadExitCombatMode = NULL;

	if ( ! pFnSquadExitCombatMode )
		pFnSquadExitCombatMode = (UFunction*) UObject::GObjObjects()->Data[ 42691 ];

	ABioPlayerSquad_execSquadExitCombatMode_Parms SquadExitCombatMode_Parms;

	this->ProcessEvent ( pFnSquadExitCombatMode, &SquadExitCombatMode_Parms, NULL );
};

// Function SFXGame.BioPlayerSquad.SquadEnterCombatMode
// [0x00020002] 
// Parameters infos:
// unsigned long                  bEngageEnemy                   ( CPF_OptionalParm | CPF_Parm )

void ABioPlayerSquad::SquadEnterCombatMode ( unsigned long bEngageEnemy )
{
	static UFunction* pFnSquadEnterCombatMode = NULL;

	if ( ! pFnSquadEnterCombatMode )
		pFnSquadEnterCombatMode = (UFunction*) UObject::GObjObjects()->Data[ 42688 ];

	ABioPlayerSquad_execSquadEnterCombatMode_Parms SquadEnterCombatMode_Parms;
	SquadEnterCombatMode_Parms.bEngageEnemy = bEngageEnemy;

	this->ProcessEvent ( pFnSquadEnterCombatMode, &SquadEnterCombatMode_Parms, NULL );
};

// Function SFXGame.BioPlayerSquad.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ABioPlayerSquad::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 42685 ];

	ABioPlayerSquad_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSquad.GetSquadScanAbility
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ABioPlayerSquad::GetSquadScanAbility ( )
{
	static UFunction* pFnGetSquadScanAbility = NULL;

	if ( ! pFnGetSquadScanAbility )
		pFnGetSquadScanAbility = (UFunction*) UObject::GObjObjects()->Data[ 42683 ];

	ABioPlayerSquad_execGetSquadScanAbility_Parms GetSquadScanAbility_Parms;

	pFnGetSquadScanAbility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSquadScanAbility, &GetSquadScanAbility_Parms, NULL );

	pFnGetSquadScanAbility->FunctionFlags |= 0x400;

	return GetSquadScanAbility_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSquad.RemoveDyingMember
// [0x00020002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )

void ABioPlayerSquad::RemoveDyingMember ( class APawn* oPawn )
{
	static UFunction* pFnRemoveDyingMember = NULL;

	if ( ! pFnRemoveDyingMember )
		pFnRemoveDyingMember = (UFunction*) UObject::GObjObjects()->Data[ 42681 ];

	ABioPlayerSquad_execRemoveDyingMember_Parms RemoveDyingMember_Parms;
	RemoveDyingMember_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnRemoveDyingMember, &RemoveDyingMember_Parms, NULL );
};

// Function SFXGame.BioPlayerSquad.Died
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   pPawn                          ( CPF_Parm )
// class AController*             Killer                         ( CPF_Parm )

bool ABioPlayerSquad::Died ( class APawn* pPawn, class AController* Killer )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 42677 ];

	ABioPlayerSquad_execDied_Parms Died_Parms;
	Died_Parms.pPawn = pPawn;
	Died_Parms.Killer = Killer;

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSquad.LookupCredits
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPlayerSquadLevel              ( CPF_Parm )
// struct FName                   nmCREDClass                    ( CPF_Parm )
// int                            nCredits                       ( CPF_Parm | CPF_OutParm )

bool ABioPlayerSquad::eventLookupCredits ( int nPlayerSquadLevel, struct FName nmCREDClass, int* nCredits )
{
	static UFunction* pFnLookupCredits = NULL;

	if ( ! pFnLookupCredits )
		pFnLookupCredits = (UFunction*) UObject::GObjObjects()->Data[ 42671 ];

	ABioPlayerSquad_eventLookupCredits_Parms LookupCredits_Parms;
	LookupCredits_Parms.nPlayerSquadLevel = nPlayerSquadLevel;
	memcpy ( &LookupCredits_Parms.nmCREDClass, &nmCREDClass, 0x8 );

	this->ProcessEvent ( pFnLookupCredits, &LookupCredits_Parms, NULL );

	if ( nCredits )
		*nCredits = LookupCredits_Parms.nCredits;

	return LookupCredits_Parms.ReturnValue;
};

// Function SFXGame.BioPlayerSquad.NotifyNoEnemiesPerceived
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void ABioPlayerSquad::eventNotifyNoEnemiesPerceived ( )
{
	static UFunction* pFnNotifyNoEnemiesPerceived = NULL;

	if ( ! pFnNotifyNoEnemiesPerceived )
		pFnNotifyNoEnemiesPerceived = (UFunction*) UObject::GObjObjects()->Data[ 42667 ];

	ABioPlayerSquad_eventNotifyNoEnemiesPerceived_Parms NotifyNoEnemiesPerceived_Parms;

	this->ProcessEvent ( pFnNotifyNoEnemiesPerceived, &NotifyNoEnemiesPerceived_Parms, NULL );
};

// Function SFXGame.BioPlayerSquad.NotifyEnemyPerceived
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPlayerSquad::eventNotifyEnemyPerceived ( )
{
	static UFunction* pFnNotifyEnemyPerceived = NULL;

	if ( ! pFnNotifyEnemyPerceived )
		pFnNotifyEnemyPerceived = (UFunction*) UObject::GObjObjects()->Data[ 42665 ];

	ABioPlayerSquad_eventNotifyEnemyPerceived_Parms NotifyEnemyPerceived_Parms;

	this->ProcessEvent ( pFnNotifyEnemyPerceived, &NotifyEnemyPerceived_Parms, NULL );
};

// Function SFXGame.BioPlayerSquad.onPlayerEnterCover
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPlayerSquad::eventonPlayerEnterCover ( )
{
	static UFunction* pFnonPlayerEnterCover = NULL;

	if ( ! pFnonPlayerEnterCover )
		pFnonPlayerEnterCover = (UFunction*) UObject::GObjObjects()->Data[ 42663 ];

	ABioPlayerSquad_eventonPlayerEnterCover_Parms onPlayerEnterCover_Parms;

	this->ProcessEvent ( pFnonPlayerEnterCover, &onPlayerEnterCover_Parms, NULL );
};

// Function SFXGame.BioPlayerSquad.OnPlayerSwitchStance
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FromState                      ( CPF_Parm )
// unsigned char                  ToState                        ( CPF_Parm )

bool ABioPlayerSquad::eventOnPlayerSwitchStance ( unsigned char FromState, unsigned char ToState )
{
	static UFunction* pFnOnPlayerSwitchStance = NULL;

	if ( ! pFnOnPlayerSwitchStance )
		pFnOnPlayerSwitchStance = (UFunction*) UObject::GObjObjects()->Data[ 42659 ];

	ABioPlayerSquad_eventOnPlayerSwitchStance_Parms OnPlayerSwitchStance_Parms;
	OnPlayerSwitchStance_Parms.FromState = FromState;
	OnPlayerSwitchStance_Parms.ToState = ToState;

	this->ProcessEvent ( pFnOnPlayerSwitchStance, &OnPlayerSwitchStance_Parms, NULL );

	return OnPlayerSwitchStance_Parms.ReturnValue;
};

// Function SFXGame.BioSquadHoldMarker.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ABioSquadHoldMarker::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 49979 ];

	ABioSquadHoldMarker_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.BioSquadHoldMarker.SetBaseByTag
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioSquadHoldMarker::SetBaseByTag ( )
{
	static UFunction* pFnSetBaseByTag = NULL;

	if ( ! pFnSetBaseByTag )
		pFnSetBaseByTag = (UFunction*) UObject::GObjObjects()->Data[ 49978 ];

	ABioSquadHoldMarker_execSetBaseByTag_Parms SetBaseByTag_Parms;

	pFnSetBaseByTag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBaseByTag, &SetBaseByTag_Parms, NULL );

	pFnSetBaseByTag->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.CanBeBioticCharged
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::CanBeBioticCharged ( )
{
	static UFunction* pFnCanBeBioticCharged = NULL;

	if ( ! pFnCanBeBioticCharged )
		pFnCanBeBioticCharged = (UFunction*) UObject::GObjObjects()->Data[ 40971 ];

	ABioPawn_execCanBeBioticCharged_Parms CanBeBioticCharged_Parms;

	this->ProcessEvent ( pFnCanBeBioticCharged, &CanBeBioticCharged_Parms, NULL );

	return CanBeBioticCharged_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.OnSquadMemberAdded
// [0x00020002] 
// Parameters infos:
// class APawn*                   Pawn                           ( CPF_Parm )

void ABioPawn::OnSquadMemberAdded ( class APawn* Pawn )
{
	static UFunction* pFnOnSquadMemberAdded = NULL;

	if ( ! pFnOnSquadMemberAdded )
		pFnOnSquadMemberAdded = (UFunction*) UObject::GObjObjects()->Data[ 40967 ];

	ABioPawn_execOnSquadMemberAdded_Parms OnSquadMemberAdded_Parms;
	OnSquadMemberAdded_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnOnSquadMemberAdded, &OnSquadMemberAdded_Parms, NULL );
};

// Function SFXGame.BioPawn.OnPowersLoaded
// [0x00020000] 
// Parameters infos:

void ABioPawn::OnPowersLoaded ( )
{
	static UFunction* pFnOnPowersLoaded = NULL;

	if ( ! pFnOnPowersLoaded )
		pFnOnPowersLoaded = (UFunction*) UObject::GObjObjects()->Data[ 40966 ];

	ABioPawn_execOnPowersLoaded_Parms OnPowersLoaded_Parms;

	this->ProcessEvent ( pFnOnPowersLoaded, &OnPowersLoaded_Parms, NULL );
};

// Function SFXGame.BioPawn.ManageRagdolls
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ABioPawn::ManageRagdolls ( )
{
	static UFunction* pFnManageRagdolls = NULL;

	if ( ! pFnManageRagdolls )
		pFnManageRagdolls = (UFunction*) UObject::GObjObjects()->Data[ 40450 ];

	ABioPawn_execManageRagdolls_Parms ManageRagdolls_Parms;

	this->ProcessEvent ( pFnManageRagdolls, &ManageRagdolls_Parms, NULL );
};

// Function SFXGame.BioPawn.StopVocalization
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::StopVocalization ( )
{
	static UFunction* pFnStopVocalization = NULL;

	if ( ! pFnStopVocalization )
		pFnStopVocalization = (UFunction*) UObject::GObjObjects()->Data[ 40959 ];

	ABioPawn_execStopVocalization_Parms StopVocalization_Parms;

	this->ProcessEvent ( pFnStopVocalization, &StopVocalization_Parms, NULL );

	return StopVocalization_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetRTPCHelmetIsEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UWwiseAudioComponent*    WwiseComponent                 ( CPF_Parm | CPF_EditInline )

void ABioPawn::eventSetRTPCHelmetIsEnabled ( class UWwiseAudioComponent* WwiseComponent )
{
	static UFunction* pFnSetRTPCHelmetIsEnabled = NULL;

	if ( ! pFnSetRTPCHelmetIsEnabled )
		pFnSetRTPCHelmetIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 40957 ];

	ABioPawn_eventSetRTPCHelmetIsEnabled_Parms SetRTPCHelmetIsEnabled_Parms;
	SetRTPCHelmetIsEnabled_Parms.WwiseComponent = WwiseComponent;

	this->ProcessEvent ( pFnSetRTPCHelmetIsEnabled, &SetRTPCHelmetIsEnabled_Parms, NULL );
};

// Function SFXGame.BioPawn.SFXDoComponentAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UActorComponent*         pComponent                     ( CPF_Parm | CPF_EditInline )

void ABioPawn::eventSFXDoComponentAction ( class UActorComponent* pComponent )
{
	static UFunction* pFnSFXDoComponentAction = NULL;

	if ( ! pFnSFXDoComponentAction )
		pFnSFXDoComponentAction = (UFunction*) UObject::GObjObjects()->Data[ 40955 ];

	ABioPawn_eventSFXDoComponentAction_Parms SFXDoComponentAction_Parms;
	SFXDoComponentAction_Parms.pComponent = pComponent;

	this->ProcessEvent ( pFnSFXDoComponentAction, &SFXDoComponentAction_Parms, NULL );
};

// Function SFXGame.BioPawn.GetGUIIcon
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UTexture2D*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bGetDeadIcon                   ( CPF_OptionalParm | CPF_Parm )

class UTexture2D* ABioPawn::eventGetGUIIcon ( unsigned long bGetDeadIcon )
{
	static UFunction* pFnGetGUIIcon = NULL;

	if ( ! pFnGetGUIIcon )
		pFnGetGUIIcon = (UFunction*) UObject::GObjObjects()->Data[ 40952 ];

	ABioPawn_eventGetGUIIcon_Parms GetGUIIcon_Parms;
	GetGUIIcon_Parms.bGetDeadIcon = bGetDeadIcon;

	this->ProcessEvent ( pFnGetGUIIcon, &GetGUIIcon_Parms, NULL );

	return GetGUIIcon_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.FindBumpAdjust
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oHitActor                      ( CPF_Parm )
// struct FVector                 vHitNormal                     ( CPF_Const | CPF_Parm | CPF_OutParm )

bool ABioPawn::FindBumpAdjust ( class AActor* oHitActor, struct FVector* vHitNormal )
{
	static UFunction* pFnFindBumpAdjust = NULL;

	if ( ! pFnFindBumpAdjust )
		pFnFindBumpAdjust = (UFunction*) UObject::GObjObjects()->Data[ 40948 ];

	ABioPawn_execFindBumpAdjust_Parms FindBumpAdjust_Parms;
	FindBumpAdjust_Parms.oHitActor = oHitActor;

	pFnFindBumpAdjust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindBumpAdjust, &FindBumpAdjust_Parms, NULL );

	pFnFindBumpAdjust->FunctionFlags |= 0x400;

	if ( vHitNormal )
		memcpy ( vHitNormal, &FindBumpAdjust_Parms.vHitNormal, 0xC );

	return FindBumpAdjust_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetCurrentVOAudio
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UWwiseAudioComponent*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )

class UWwiseAudioComponent* ABioPawn::GetCurrentVOAudio ( )
{
	static UFunction* pFnGetCurrentVOAudio = NULL;

	if ( ! pFnGetCurrentVOAudio )
		pFnGetCurrentVOAudio = (UFunction*) UObject::GObjObjects()->Data[ 40946 ];

	ABioPawn_execGetCurrentVOAudio_Parms GetCurrentVOAudio_Parms;

	pFnGetCurrentVOAudio->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentVOAudio, &GetCurrentVOAudio_Parms, NULL );

	pFnGetCurrentVOAudio->FunctionFlags |= 0x400;

	return GetCurrentVOAudio_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CollectorPossess
// [0x00020000] 
// Parameters infos:

void ABioPawn::CollectorPossess ( )
{
	static UFunction* pFnCollectorPossess = NULL;

	if ( ! pFnCollectorPossess )
		pFnCollectorPossess = (UFunction*) UObject::GObjObjects()->Data[ 40945 ];

	ABioPawn_execCollectorPossess_Parms CollectorPossess_Parms;

	this->ProcessEvent ( pFnCollectorPossess, &CollectorPossess_Parms, NULL );
};

// Function SFXGame.BioPawn.GenerateRegenVocalization
// [0x00020002] 
// Parameters infos:

void ABioPawn::GenerateRegenVocalization ( )
{
	static UFunction* pFnGenerateRegenVocalization = NULL;

	if ( ! pFnGenerateRegenVocalization )
		pFnGenerateRegenVocalization = (UFunction*) UObject::GObjObjects()->Data[ 40944 ];

	ABioPawn_execGenerateRegenVocalization_Parms GenerateRegenVocalization_Parms;

	this->ProcessEvent ( pFnGenerateRegenVocalization, &GenerateRegenVocalization_Parms, NULL );
};

// Function SFXGame.BioPawn.TossWeapon
// [0x00820002] 
// Parameters infos:
// class AWeapon*                 Weap                           ( CPF_Parm )
// struct FVector                 ForceVelocity                  ( CPF_OptionalParm | CPF_Parm )

void ABioPawn::TossWeapon ( class AWeapon* Weap, struct FVector ForceVelocity )
{
	static UFunction* pFnTossWeapon = NULL;

	if ( ! pFnTossWeapon )
		pFnTossWeapon = (UFunction*) UObject::GObjObjects()->Data[ 40935 ];

	ABioPawn_execTossWeapon_Parms TossWeapon_Parms;
	TossWeapon_Parms.Weap = Weap;
	memcpy ( &TossWeapon_Parms.ForceVelocity, &ForceVelocity, 0xC );

	this->ProcessEvent ( pFnTossWeapon, &TossWeapon_Parms, NULL );
};

// Function SFXGame.BioPawn.RigidBodyCollision
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class UPrimitiveComponent*     HitComponent                   ( CPF_Parm | CPF_EditInline )
// class UPrimitiveComponent*     OtherComponent                 ( CPF_Parm | CPF_EditInline )
// int                            ContactIndex                   ( CPF_Parm )
// struct FCollisionImpactData    RigidCollisionData             ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ABioPawn::eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = (UFunction*) UObject::GObjObjects()->Data[ 40927 ];

	ABioPawn_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;
	RigidBodyCollision_Parms.HitComponent = HitComponent;
	RigidBodyCollision_Parms.OtherComponent = OtherComponent;
	RigidBodyCollision_Parms.ContactIndex = ContactIndex;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );

	if ( RigidCollisionData )
		memcpy ( RigidCollisionData, &RigidBodyCollision_Parms.RigidCollisionData, 0x24 );
};

// Function SFXGame.BioPawn.ClearRBCallbacks
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPawn::eventClearRBCallbacks ( )
{
	static UFunction* pFnClearRBCallbacks = NULL;

	if ( ! pFnClearRBCallbacks )
		pFnClearRBCallbacks = (UFunction*) UObject::GObjObjects()->Data[ 40926 ];

	ABioPawn_eventClearRBCallbacks_Parms ClearRBCallbacks_Parms;

	this->ProcessEvent ( pFnClearRBCallbacks, &ClearRBCallbacks_Parms, NULL );
};

// Function SFXGame.BioPawn.RegisterRBCallback
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         RBCallback                     ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bDisablePhysicsDamage          ( CPF_OptionalParm | CPF_Parm )
// int                            nPriority                      ( CPF_OptionalParm | CPF_Parm )

void ABioPawn::RegisterRBCallback ( struct FScriptDelegate RBCallback, unsigned long bDisablePhysicsDamage, int nPriority )
{
	static UFunction* pFnRegisterRBCallback = NULL;

	if ( ! pFnRegisterRBCallback )
		pFnRegisterRBCallback = (UFunction*) UObject::GObjObjects()->Data[ 40921 ];

	ABioPawn_execRegisterRBCallback_Parms RegisterRBCallback_Parms;
	memcpy ( &RegisterRBCallback_Parms.RBCallback, &RBCallback, 0xC );
	RegisterRBCallback_Parms.bDisablePhysicsDamage = bDisablePhysicsDamage;
	RegisterRBCallback_Parms.nPriority = nPriority;

	this->ProcessEvent ( pFnRegisterRBCallback, &RegisterRBCallback_Parms, NULL );
};

// Function SFXGame.BioPawn.CreatePathGoalEvaluator
// [0x00020002] 
// Parameters infos:
// class UPathGoalEvaluator*      ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GoalEvalClass                  ( CPF_Parm )

class UPathGoalEvaluator* ABioPawn::CreatePathGoalEvaluator ( class UClass* GoalEvalClass )
{
	static UFunction* pFnCreatePathGoalEvaluator = NULL;

	if ( ! pFnCreatePathGoalEvaluator )
		pFnCreatePathGoalEvaluator = (UFunction*) UObject::GObjObjects()->Data[ 40917 ];

	ABioPawn_execCreatePathGoalEvaluator_Parms CreatePathGoalEvaluator_Parms;
	CreatePathGoalEvaluator_Parms.GoalEvalClass = GoalEvalClass;

	this->ProcessEvent ( pFnCreatePathGoalEvaluator, &CreatePathGoalEvaluator_Parms, NULL );

	return CreatePathGoalEvaluator_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CreatePathConstraint
// [0x00020002] 
// Parameters infos:
// class UPathConstraint*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ConstraintClass                ( CPF_Parm )

class UPathConstraint* ABioPawn::CreatePathConstraint ( class UClass* ConstraintClass )
{
	static UFunction* pFnCreatePathConstraint = NULL;

	if ( ! pFnCreatePathConstraint )
		pFnCreatePathConstraint = (UFunction*) UObject::GObjObjects()->Data[ 40913 ];

	ABioPawn_execCreatePathConstraint_Parms CreatePathConstraint_Parms;
	CreatePathConstraint_Parms.ConstraintClass = ConstraintClass;

	this->ProcessEvent ( pFnCreatePathConstraint, &CreatePathConstraint_Parms, NULL );

	return CreatePathConstraint_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetTicketDuration
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nID                            ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )

void ABioPawn::SetTicketDuration ( int nID, float fDuration )
{
	static UFunction* pFnSetTicketDuration = NULL;

	if ( ! pFnSetTicketDuration )
		pFnSetTicketDuration = (UFunction*) UObject::GObjObjects()->Data[ 40910 ];

	ABioPawn_execSetTicketDuration_Parms SetTicketDuration_Parms;
	SetTicketDuration_Parms.nID = nID;
	SetTicketDuration_Parms.fDuration = fDuration;

	pFnSetTicketDuration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTicketDuration, &SetTicketDuration_Parms, NULL );

	pFnSetTicketDuration->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.HasValidAttackTicket
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nID                            ( CPF_Parm )

bool ABioPawn::HasValidAttackTicket ( int nID )
{
	static UFunction* pFnHasValidAttackTicket = NULL;

	if ( ! pFnHasValidAttackTicket )
		pFnHasValidAttackTicket = (UFunction*) UObject::GObjObjects()->Data[ 40907 ];

	ABioPawn_execHasValidAttackTicket_Parms HasValidAttackTicket_Parms;
	HasValidAttackTicket_Parms.nID = nID;

	pFnHasValidAttackTicket->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasValidAttackTicket, &HasValidAttackTicket_Parms, NULL );

	pFnHasValidAttackTicket->FunctionFlags |= 0x400;

	return HasValidAttackTicket_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.ReleaseAttackTicket
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nID                            ( CPF_Parm )
// unsigned long                  bKillTicket                    ( CPF_Parm )

void ABioPawn::ReleaseAttackTicket ( int nID, unsigned long bKillTicket )
{
	static UFunction* pFnReleaseAttackTicket = NULL;

	if ( ! pFnReleaseAttackTicket )
		pFnReleaseAttackTicket = (UFunction*) UObject::GObjObjects()->Data[ 40904 ];

	ABioPawn_execReleaseAttackTicket_Parms ReleaseAttackTicket_Parms;
	ReleaseAttackTicket_Parms.nID = nID;
	ReleaseAttackTicket_Parms.bKillTicket = bKillTicket;

	pFnReleaseAttackTicket->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReleaseAttackTicket, &ReleaseAttackTicket_Parms, NULL );

	pFnReleaseAttackTicket->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.AcquireAttackTicket
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nCost                          ( CPF_Parm )

int ABioPawn::AcquireAttackTicket ( int nCost )
{
	static UFunction* pFnAcquireAttackTicket = NULL;

	if ( ! pFnAcquireAttackTicket )
		pFnAcquireAttackTicket = (UFunction*) UObject::GObjObjects()->Data[ 40901 ];

	ABioPawn_execAcquireAttackTicket_Parms AcquireAttackTicket_Parms;
	AcquireAttackTicket_Parms.nCost = nCost;

	pFnAcquireAttackTicket->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAcquireAttackTicket, &AcquireAttackTicket_Parms, NULL );

	pFnAcquireAttackTicket->FunctionFlags |= 0x400;

	return AcquireAttackTicket_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetMaxTargetTickets
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ABioPawn::eventGetMaxTargetTickets ( )
{
	static UFunction* pFnGetMaxTargetTickets = NULL;

	if ( ! pFnGetMaxTargetTickets )
		pFnGetMaxTargetTickets = (UFunction*) UObject::GObjObjects()->Data[ 40898 ];

	ABioPawn_eventGetMaxTargetTickets_Parms GetMaxTargetTickets_Parms;

	this->ProcessEvent ( pFnGetMaxTargetTickets, &GetMaxTargetTickets_Parms, NULL );

	return GetMaxTargetTickets_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetMaxAttackTickets
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ABioPawn::eventGetMaxAttackTickets ( )
{
	static UFunction* pFnGetMaxAttackTickets = NULL;

	if ( ! pFnGetMaxAttackTickets )
		pFnGetMaxAttackTickets = (UFunction*) UObject::GObjObjects()->Data[ 40895 ];

	ABioPawn_eventGetMaxAttackTickets_Parms GetMaxAttackTickets_Parms;

	this->ProcessEvent ( pFnGetMaxAttackTickets, &GetMaxAttackTickets_Parms, NULL );

	return GetMaxAttackTickets_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.PlayFireCharging
// [0x00020000] 
// Parameters infos:

void ABioPawn::PlayFireCharging ( )
{
	static UFunction* pFnPlayFireCharging = NULL;

	if ( ! pFnPlayFireCharging )
		pFnPlayFireCharging = (UFunction*) UObject::GObjObjects()->Data[ 40894 ];

	ABioPawn_execPlayFireCharging_Parms PlayFireCharging_Parms;

	this->ProcessEvent ( pFnPlayFireCharging, &PlayFireCharging_Parms, NULL );
};

// Function SFXGame.BioPawn.ReleaseTargetTicket
// [0x00020002] 
// Parameters infos:
// int                            nCost                          ( CPF_Parm )

void ABioPawn::ReleaseTargetTicket ( int nCost )
{
	static UFunction* pFnReleaseTargetTicket = NULL;

	if ( ! pFnReleaseTargetTicket )
		pFnReleaseTargetTicket = (UFunction*) UObject::GObjObjects()->Data[ 40892 ];

	ABioPawn_execReleaseTargetTicket_Parms ReleaseTargetTicket_Parms;
	ReleaseTargetTicket_Parms.nCost = nCost;

	this->ProcessEvent ( pFnReleaseTargetTicket, &ReleaseTargetTicket_Parms, NULL );
};

// Function SFXGame.BioPawn.AcquireTargetTicket
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nCost                          ( CPF_Parm )

bool ABioPawn::AcquireTargetTicket ( int nCost )
{
	static UFunction* pFnAcquireTargetTicket = NULL;

	if ( ! pFnAcquireTargetTicket )
		pFnAcquireTargetTicket = (UFunction*) UObject::GObjObjects()->Data[ 40889 ];

	ABioPawn_execAcquireTargetTicket_Parms AcquireTargetTicket_Parms;
	AcquireTargetTicket_Parms.nCost = nCost;

	this->ProcessEvent ( pFnAcquireTargetTicket, &AcquireTargetTicket_Parms, NULL );

	return AcquireTargetTicket_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetTimeSinceLastRender
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPawn::GetTimeSinceLastRender ( )
{
	static UFunction* pFnGetTimeSinceLastRender = NULL;

	if ( ! pFnGetTimeSinceLastRender )
		pFnGetTimeSinceLastRender = (UFunction*) UObject::GObjObjects()->Data[ 40887 ];

	ABioPawn_execGetTimeSinceLastRender_Parms GetTimeSinceLastRender_Parms;

	pFnGetTimeSinceLastRender->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimeSinceLastRender, &GetTimeSinceLastRender_Parms, NULL );

	pFnGetTimeSinceLastRender->FunctionFlags |= 0x400;

	return GetTimeSinceLastRender_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CopyPawnAppearance
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// class ABioPawn*                pSrcPawn                       ( CPF_Parm )

void ABioPawn::eventCopyPawnAppearance ( class ABioPawn* pSrcPawn )
{
	static UFunction* pFnCopyPawnAppearance = NULL;

	if ( ! pFnCopyPawnAppearance )
		pFnCopyPawnAppearance = (UFunction*) UObject::GObjObjects()->Data[ 40885 ];

	ABioPawn_eventCopyPawnAppearance_Parms CopyPawnAppearance_Parms;
	CopyPawnAppearance_Parms.pSrcPawn = pSrcPawn;

	this->ProcessEvent ( pFnCopyPawnAppearance, &CopyPawnAppearance_Parms, NULL );
};

// Function SFXGame.BioPawn.RemoveTalentPoints
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPoints                        ( CPF_Parm )

void ABioPawn::RemoveTalentPoints ( int nPoints )
{
	static UFunction* pFnRemoveTalentPoints = NULL;

	if ( ! pFnRemoveTalentPoints )
		pFnRemoveTalentPoints = (UFunction*) UObject::GObjObjects()->Data[ 40883 ];

	ABioPawn_execRemoveTalentPoints_Parms RemoveTalentPoints_Parms;
	RemoveTalentPoints_Parms.nPoints = nPoints;

	pFnRemoveTalentPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveTalentPoints, &RemoveTalentPoints_Parms, NULL );

	pFnRemoveTalentPoints->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.AddTalentPoints
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPoints                        ( CPF_Parm )

void ABioPawn::AddTalentPoints ( int nPoints )
{
	static UFunction* pFnAddTalentPoints = NULL;

	if ( ! pFnAddTalentPoints )
		pFnAddTalentPoints = (UFunction*) UObject::GObjObjects()->Data[ 40881 ];

	ABioPawn_execAddTalentPoints_Parms AddTalentPoints_Parms;
	AddTalentPoints_Parms.nPoints = nPoints;

	pFnAddTalentPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTalentPoints, &AddTalentPoints_Parms, NULL );

	pFnAddTalentPoints->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.EnsurePhysics
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  NewMode                        ( CPF_Parm )

bool ABioPawn::eventEnsurePhysics ( unsigned char NewMode )
{
	static UFunction* pFnEnsurePhysics = NULL;

	if ( ! pFnEnsurePhysics )
		pFnEnsurePhysics = (UFunction*) UObject::GObjObjects()->Data[ 40878 ];

	ABioPawn_eventEnsurePhysics_Parms EnsurePhysics_Parms;
	EnsurePhysics_Parms.NewMode = NewMode;

	this->ProcessEvent ( pFnEnsurePhysics, &EnsurePhysics_Parms, NULL );

	return EnsurePhysics_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.OutputState
// [0x00020002] 
// Parameters infos:

void ABioPawn::OutputState ( )
{
	static UFunction* pFnOutputState = NULL;

	if ( ! pFnOutputState )
		pFnOutputState = (UFunction*) UObject::GObjObjects()->Data[ 40876 ];

	ABioPawn_execOutputState_Parms OutputState_Parms;

	this->ProcessEvent ( pFnOutputState, &OutputState_Parms, NULL );
};

// Function SFXGame.BioPawn.SetRigidBodyMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  NewMode                        ( CPF_Parm )

void ABioPawn::SetRigidBodyMode ( unsigned char NewMode )
{
	static UFunction* pFnSetRigidBodyMode = NULL;

	if ( ! pFnSetRigidBodyMode )
		pFnSetRigidBodyMode = (UFunction*) UObject::GObjObjects()->Data[ 40874 ];

	ABioPawn_execSetRigidBodyMode_Parms SetRigidBodyMode_Parms;
	SetRigidBodyMode_Parms.NewMode = NewMode;

	pFnSetRigidBodyMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRigidBodyMode, &SetRigidBodyMode_Parms, NULL );

	pFnSetRigidBodyMode->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.PlayFOVO
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UWwiseEvent*             Sound                          ( CPF_Parm )

void ABioPawn::PlayFOVO ( class UWwiseEvent* Sound )
{
	static UFunction* pFnPlayFOVO = NULL;

	if ( ! pFnPlayFOVO )
		pFnPlayFOVO = (UFunction*) UObject::GObjObjects()->Data[ 40872 ];

	ABioPawn_execPlayFOVO_Parms PlayFOVO_Parms;
	PlayFOVO_Parms.Sound = Sound;

	pFnPlayFOVO->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayFOVO, &PlayFOVO_Parms, NULL );

	pFnPlayFOVO->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.CreateDeathEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioVisualEffect*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioVFXTemplate*         vfxTemplate                    ( CPF_Parm )
// unsigned long                  bIsCrustEffect                 ( CPF_Parm )
// unsigned long                  bIsTargetDeletedOnDeathEffectCompletion ( CPF_Parm )

class ABioVisualEffect* ABioPawn::CreateDeathEffect ( class UBioVFXTemplate* vfxTemplate, unsigned long bIsCrustEffect, unsigned long bIsTargetDeletedOnDeathEffectCompletion )
{
	static UFunction* pFnCreateDeathEffect = NULL;

	if ( ! pFnCreateDeathEffect )
		pFnCreateDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 40867 ];

	ABioPawn_execCreateDeathEffect_Parms CreateDeathEffect_Parms;
	CreateDeathEffect_Parms.vfxTemplate = vfxTemplate;
	CreateDeathEffect_Parms.bIsCrustEffect = bIsCrustEffect;
	CreateDeathEffect_Parms.bIsTargetDeletedOnDeathEffectCompletion = bIsTargetDeletedOnDeathEffectCompletion;

	pFnCreateDeathEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateDeathEffect, &CreateDeathEffect_Parms, NULL );

	pFnCreateDeathEffect->FunctionFlags |= 0x400;

	return CreateDeathEffect_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.BreakStealth
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ABioPawn::BreakStealth ( )
{
	static UFunction* pFnBreakStealth = NULL;

	if ( ! pFnBreakStealth )
		pFnBreakStealth = (UFunction*) UObject::GObjObjects()->Data[ 40044 ];

	ABioPawn_execBreakStealth_Parms BreakStealth_Parms;

	this->ProcessEvent ( pFnBreakStealth, &BreakStealth_Parms, NULL );
};

// Function SFXGame.BioPawn.IsWithinWeaponRange
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  TargetActor                    ( CPF_Parm )
// unsigned char                  RangeType                      ( CPF_Parm )

bool ABioPawn::IsWithinWeaponRange ( class AActor* TargetActor, unsigned char RangeType )
{
	static UFunction* pFnIsWithinWeaponRange = NULL;

	if ( ! pFnIsWithinWeaponRange )
		pFnIsWithinWeaponRange = (UFunction*) UObject::GObjObjects()->Data[ 40861 ];

	ABioPawn_execIsWithinWeaponRange_Parms IsWithinWeaponRange_Parms;
	IsWithinWeaponRange_Parms.TargetActor = TargetActor;
	IsWithinWeaponRange_Parms.RangeType = RangeType;

	this->ProcessEvent ( pFnIsWithinWeaponRange, &IsWithinWeaponRange_Parms, NULL );

	return IsWithinWeaponRange_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetWeaponRange
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  RangeType                      ( CPF_Parm )

float ABioPawn::eventGetWeaponRange ( unsigned char RangeType )
{
	static UFunction* pFnGetWeaponRange = NULL;

	if ( ! pFnGetWeaponRange )
		pFnGetWeaponRange = (UFunction*) UObject::GObjObjects()->Data[ 40857 ];

	ABioPawn_eventGetWeaponRange_Parms GetWeaponRange_Parms;
	GetWeaponRange_Parms.RangeType = RangeType;

	this->ProcessEvent ( pFnGetWeaponRange, &GetWeaponRange_Parms, NULL );

	return GetWeaponRange_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.ForceGroundConform
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::ForceGroundConform ( )
{
	static UFunction* pFnForceGroundConform = NULL;

	if ( ! pFnForceGroundConform )
		pFnForceGroundConform = (UFunction*) UObject::GObjObjects()->Data[ 40856 ];

	ABioPawn_execForceGroundConform_Parms ForceGroundConform_Parms;

	pFnForceGroundConform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceGroundConform, &ForceGroundConform_Parms, NULL );

	pFnForceGroundConform->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.CalculateDesiredGroundConformHeight
// [0x00440401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vNewLocation                   ( CPF_Const | CPF_Parm | CPF_OutParm )

float ABioPawn::CalculateDesiredGroundConformHeight ( struct FVector* vNewLocation )
{
	static UFunction* pFnCalculateDesiredGroundConformHeight = NULL;

	if ( ! pFnCalculateDesiredGroundConformHeight )
		pFnCalculateDesiredGroundConformHeight = (UFunction*) UObject::GObjObjects()->Data[ 40853 ];

	ABioPawn_execCalculateDesiredGroundConformHeight_Parms CalculateDesiredGroundConformHeight_Parms;

	pFnCalculateDesiredGroundConformHeight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateDesiredGroundConformHeight, &CalculateDesiredGroundConformHeight_Parms, NULL );

	pFnCalculateDesiredGroundConformHeight->FunctionFlags |= 0x400;

	if ( vNewLocation )
		memcpy ( vNewLocation, &CalculateDesiredGroundConformHeight_Parms.vNewLocation, 0xC );

	return CalculateDesiredGroundConformHeight_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetAdjustedMoveDirection
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  MoveTarget                     ( CPF_Parm )
// struct FVector                 Dest                           ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FVector                 Direction                      ( CPF_Parm | CPF_OutParm )

void ABioPawn::GetAdjustedMoveDirection ( class AActor* MoveTarget, struct FVector* Dest, struct FVector* Direction )
{
	static UFunction* pFnGetAdjustedMoveDirection = NULL;

	if ( ! pFnGetAdjustedMoveDirection )
		pFnGetAdjustedMoveDirection = (UFunction*) UObject::GObjObjects()->Data[ 40849 ];

	ABioPawn_execGetAdjustedMoveDirection_Parms GetAdjustedMoveDirection_Parms;
	GetAdjustedMoveDirection_Parms.MoveTarget = MoveTarget;

	pFnGetAdjustedMoveDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAdjustedMoveDirection, &GetAdjustedMoveDirection_Parms, NULL );

	pFnGetAdjustedMoveDirection->FunctionFlags |= 0x400;

	if ( Dest )
		memcpy ( Dest, &GetAdjustedMoveDirection_Parms.Dest, 0xC );

	if ( Direction )
		memcpy ( Direction, &GetAdjustedMoveDirection_Parms.Direction, 0xC );
};

// Function SFXGame.BioPawn.OnDoneBlendingPhysicsReaction
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void ABioPawn::eventOnDoneBlendingPhysicsReaction ( )
{
	static UFunction* pFnOnDoneBlendingPhysicsReaction = NULL;

	if ( ! pFnOnDoneBlendingPhysicsReaction )
		pFnOnDoneBlendingPhysicsReaction = (UFunction*) UObject::GObjObjects()->Data[ 40848 ];

	ABioPawn_eventOnDoneBlendingPhysicsReaction_Parms OnDoneBlendingPhysicsReaction_Parms;

	this->ProcessEvent ( pFnOnDoneBlendingPhysicsReaction, &OnDoneBlendingPhysicsReaction_Parms, NULL );
};

// Function SFXGame.BioPawn.StartPhysicsBodyImpact
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmHitBoneName                  ( CPF_Parm )
// class UClass*                  SFXDamageType                  ( CPF_Parm )

bool ABioPawn::StartPhysicsBodyImpact ( struct FName nmHitBoneName, class UClass* SFXDamageType )
{
	static UFunction* pFnStartPhysicsBodyImpact = NULL;

	if ( ! pFnStartPhysicsBodyImpact )
		pFnStartPhysicsBodyImpact = (UFunction*) UObject::GObjObjects()->Data[ 40842 ];

	ABioPawn_execStartPhysicsBodyImpact_Parms StartPhysicsBodyImpact_Parms;
	memcpy ( &StartPhysicsBodyImpact_Parms.nmHitBoneName, &nmHitBoneName, 0x8 );
	StartPhysicsBodyImpact_Parms.SFXDamageType = SFXDamageType;

	this->ProcessEvent ( pFnStartPhysicsBodyImpact, &StartPhysicsBodyImpact_Parms, NULL );

	return StartPhysicsBodyImpact_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.DoPhysicsBodyImpact
// [0x00820103] ( FUNC_Final )
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void ABioPawn::DoPhysicsBodyImpact ( struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnDoPhysicsBodyImpact = NULL;

	if ( ! pFnDoPhysicsBodyImpact )
		pFnDoPhysicsBodyImpact = (UFunction*) UObject::GObjObjects()->Data[ 40802 ];

	ABioPawn_execDoPhysicsBodyImpact_Parms DoPhysicsBodyImpact_Parms;
	memcpy ( &DoPhysicsBodyImpact_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &DoPhysicsBodyImpact_Parms.Momentum, &Momentum, 0xC );
	DoPhysicsBodyImpact_Parms.DamageType = DamageType;
	memcpy ( &DoPhysicsBodyImpact_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnDoPhysicsBodyImpact, &DoPhysicsBodyImpact_Parms, NULL );
};

// Function SFXGame.BioPawn.TryStagger
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vDirection                     ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// unsigned long                  bTest                          ( CPF_OptionalParm | CPF_Parm )

bool ABioPawn::eventTryStagger ( struct FVector vDirection, class AController* InstigatedBy, unsigned long bTest )
{
	static UFunction* pFnTryStagger = NULL;

	if ( ! pFnTryStagger )
		pFnTryStagger = (UFunction*) UObject::GObjObjects()->Data[ 40826 ];

	ABioPawn_eventTryStagger_Parms TryStagger_Parms;
	memcpy ( &TryStagger_Parms.vDirection, &vDirection, 0xC );
	TryStagger_Parms.InstigatedBy = InstigatedBy;
	TryStagger_Parms.bTest = bTest;

	this->ProcessEvent ( pFnTryStagger, &TryStagger_Parms, NULL );

	return TryStagger_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.PlayAnimatedReaction
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  CustomAction                   ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDeathReaction                 ( CPF_OptionalParm | CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool ABioPawn::PlayAnimatedReaction ( unsigned char CustomAction, class AController* InstigatedBy, unsigned long bPlayImpact, struct FVector HitLocation, struct FVector HitNormal, unsigned long bDeathReaction, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnPlayAnimatedReaction = NULL;

	if ( ! pFnPlayAnimatedReaction )
		pFnPlayAnimatedReaction = (UFunction*) UObject::GObjObjects()->Data[ 40811 ];

	ABioPawn_execPlayAnimatedReaction_Parms PlayAnimatedReaction_Parms;
	PlayAnimatedReaction_Parms.CustomAction = CustomAction;
	PlayAnimatedReaction_Parms.InstigatedBy = InstigatedBy;
	PlayAnimatedReaction_Parms.bPlayImpact = bPlayImpact;
	memcpy ( &PlayAnimatedReaction_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &PlayAnimatedReaction_Parms.HitNormal, &HitNormal, 0xC );
	PlayAnimatedReaction_Parms.bDeathReaction = bDeathReaction;

	this->ProcessEvent ( pFnPlayAnimatedReaction, &PlayAnimatedReaction_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &PlayAnimatedReaction_Parms.HitInfo, 0x1C );

	return PlayAnimatedReaction_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CanPlayAnimatedReaction
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// struct FHitReaction            out_Reaction                   ( CPF_Parm | CPF_OutParm )

bool ABioPawn::CanPlayAnimatedReaction ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, struct FHitReaction* out_Reaction )
{
	static UFunction* pFnCanPlayAnimatedReaction = NULL;

	if ( ! pFnCanPlayAnimatedReaction )
		pFnCanPlayAnimatedReaction = (UFunction*) UObject::GObjObjects()->Data[ 40788 ];

	ABioPawn_execCanPlayAnimatedReaction_Parms CanPlayAnimatedReaction_Parms;
	CanPlayAnimatedReaction_Parms.Damage = Damage;
	CanPlayAnimatedReaction_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &CanPlayAnimatedReaction_Parms.HitLocation, &HitLocation, 0xC );
	CanPlayAnimatedReaction_Parms.DamageType = DamageType;
	memcpy ( &CanPlayAnimatedReaction_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &CanPlayAnimatedReaction_Parms.HitInfo, &HitInfo, 0x1C );

	pFnCanPlayAnimatedReaction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanPlayAnimatedReaction, &CanPlayAnimatedReaction_Parms, NULL );

	pFnCanPlayAnimatedReaction->FunctionFlags |= 0x400;

	if ( out_Reaction )
		memcpy ( out_Reaction, &CanPlayAnimatedReaction_Parms.out_Reaction, 0x18 );

	return CanPlayAnimatedReaction_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.PlayHit
// [0x00820002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void ABioPawn::PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = (UFunction*) UObject::GObjObjects()->Data[ 40241 ];

	ABioPawn_execPlayHit_Parms PlayHit_Parms;
	PlayHit_Parms.Damage = Damage;
	PlayHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &PlayHit_Parms.HitLocation, &HitLocation, 0xC );
	PlayHit_Parms.DamageType = DamageType;
	memcpy ( &PlayHit_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &PlayHit_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function SFXGame.BioPawn.PlayShieldHit
// [0x00820002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void ABioPawn::PlayShieldHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPlayShieldHit = NULL;

	if ( ! pFnPlayShieldHit )
		pFnPlayShieldHit = (UFunction*) UObject::GObjObjects()->Data[ 40779 ];

	ABioPawn_execPlayShieldHit_Parms PlayShieldHit_Parms;
	PlayShieldHit_Parms.Damage = Damage;
	PlayShieldHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &PlayShieldHit_Parms.HitLocation, &HitLocation, 0xC );
	PlayShieldHit_Parms.DamageType = DamageType;
	memcpy ( &PlayShieldHit_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &PlayShieldHit_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnPlayShieldHit, &PlayShieldHit_Parms, NULL );
};

// Function SFXGame.BioPawn.AddRagdollImpulse
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Impulse                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnorePhysicsThreshold        ( CPF_OptionalParm | CPF_Parm )
// struct FName                   HitBone                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bVelChange                     ( CPF_OptionalParm | CPF_Parm )

bool ABioPawn::eventAddRagdollImpulse ( struct FVector Impulse, class AController* InstigatedBy, struct FVector HitLocation, unsigned long bIgnorePhysicsThreshold, struct FName HitBone, unsigned long bVelChange )
{
	static UFunction* pFnAddRagdollImpulse = NULL;

	if ( ! pFnAddRagdollImpulse )
		pFnAddRagdollImpulse = (UFunction*) UObject::GObjObjects()->Data[ 40771 ];

	ABioPawn_eventAddRagdollImpulse_Parms AddRagdollImpulse_Parms;
	memcpy ( &AddRagdollImpulse_Parms.Impulse, &Impulse, 0xC );
	AddRagdollImpulse_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &AddRagdollImpulse_Parms.HitLocation, &HitLocation, 0xC );
	AddRagdollImpulse_Parms.bIgnorePhysicsThreshold = bIgnorePhysicsThreshold;
	memcpy ( &AddRagdollImpulse_Parms.HitBone, &HitBone, 0x8 );
	AddRagdollImpulse_Parms.bVelChange = bVelChange;

	this->ProcessEvent ( pFnAddRagdollImpulse, &AddRagdollImpulse_Parms, NULL );

	return AddRagdollImpulse_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CanHavePhysicsImpulse
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::CanHavePhysicsImpulse ( )
{
	static UFunction* pFnCanHavePhysicsImpulse = NULL;

	if ( ! pFnCanHavePhysicsImpulse )
		pFnCanHavePhysicsImpulse = (UFunction*) UObject::GObjObjects()->Data[ 40769 ];

	ABioPawn_execCanHavePhysicsImpulse_Parms CanHavePhysicsImpulse_Parms;

	this->ProcessEvent ( pFnCanHavePhysicsImpulse, &CanHavePhysicsImpulse_Parms, NULL );

	return CanHavePhysicsImpulse_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsReturningToPlaypen
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::eventIsReturningToPlaypen ( )
{
	static UFunction* pFnIsReturningToPlaypen = NULL;

	if ( ! pFnIsReturningToPlaypen )
		pFnIsReturningToPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 40766 ];

	ABioPawn_eventIsReturningToPlaypen_Parms IsReturningToPlaypen_Parms;

	this->ProcessEvent ( pFnIsReturningToPlaypen, &IsReturningToPlaypen_Parms, NULL );

	return IsReturningToPlaypen_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetCrouchStateInstantly
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bDoCrouch                      ( CPF_Parm )

void ABioPawn::SetCrouchStateInstantly ( unsigned long bDoCrouch )
{
	static UFunction* pFnSetCrouchStateInstantly = NULL;

	if ( ! pFnSetCrouchStateInstantly )
		pFnSetCrouchStateInstantly = (UFunction*) UObject::GObjObjects()->Data[ 40764 ];

	ABioPawn_execSetCrouchStateInstantly_Parms SetCrouchStateInstantly_Parms;
	SetCrouchStateInstantly_Parms.bDoCrouch = bDoCrouch;

	pFnSetCrouchStateInstantly->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCrouchStateInstantly, &SetCrouchStateInstantly_Parms, NULL );

	pFnSetCrouchStateInstantly->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.CanMantleBetween
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        first                          ( CPF_Parm )
// class ANavigationPoint*        Second                         ( CPF_Parm )

bool ABioPawn::CanMantleBetween ( class ANavigationPoint* first, class ANavigationPoint* Second )
{
	static UFunction* pFnCanMantleBetween = NULL;

	if ( ! pFnCanMantleBetween )
		pFnCanMantleBetween = (UFunction*) UObject::GObjObjects()->Data[ 40759 ];

	ABioPawn_execCanMantleBetween_Parms CanMantleBetween_Parms;
	CanMantleBetween_Parms.first = first;
	CanMantleBetween_Parms.Second = Second;

	this->ProcessEvent ( pFnCanMantleBetween, &CanMantleBetween_Parms, NULL );

	return CanMantleBetween_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SpecialMoveTo_ClimbUp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Start                          ( CPF_Parm )
// class ANavigationPoint*        End                            ( CPF_Parm )

bool ABioPawn::SpecialMoveTo_ClimbUp ( class ANavigationPoint* Start, class ANavigationPoint* End )
{
	static UFunction* pFnSpecialMoveTo_ClimbUp = NULL;

	if ( ! pFnSpecialMoveTo_ClimbUp )
		pFnSpecialMoveTo_ClimbUp = (UFunction*) UObject::GObjObjects()->Data[ 40754 ];

	ABioPawn_execSpecialMoveTo_ClimbUp_Parms SpecialMoveTo_ClimbUp_Parms;
	SpecialMoveTo_ClimbUp_Parms.Start = Start;
	SpecialMoveTo_ClimbUp_Parms.End = End;

	this->ProcessEvent ( pFnSpecialMoveTo_ClimbUp, &SpecialMoveTo_ClimbUp_Parms, NULL );

	return SpecialMoveTo_ClimbUp_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SpecialMoveTo_Mantle
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Start                          ( CPF_Parm )
// class ANavigationPoint*        End                            ( CPF_Parm )

bool ABioPawn::SpecialMoveTo_Mantle ( class ANavigationPoint* Start, class ANavigationPoint* End )
{
	static UFunction* pFnSpecialMoveTo_Mantle = NULL;

	if ( ! pFnSpecialMoveTo_Mantle )
		pFnSpecialMoveTo_Mantle = (UFunction*) UObject::GObjObjects()->Data[ 40749 ];

	ABioPawn_execSpecialMoveTo_Mantle_Parms SpecialMoveTo_Mantle_Parms;
	SpecialMoveTo_Mantle_Parms.Start = Start;
	SpecialMoveTo_Mantle_Parms.End = End;

	this->ProcessEvent ( pFnSpecialMoveTo_Mantle, &SpecialMoveTo_Mantle_Parms, NULL );

	return SpecialMoveTo_Mantle_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SpecialMoveTo
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Start                          ( CPF_Parm )
// class ANavigationPoint*        End                            ( CPF_Parm )
// class AActor*                  Next                           ( CPF_Parm )

bool ABioPawn::SpecialMoveTo ( class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next )
{
	static UFunction* pFnSpecialMoveTo = NULL;

	if ( ! pFnSpecialMoveTo )
		pFnSpecialMoveTo = (UFunction*) UObject::GObjObjects()->Data[ 40738 ];

	ABioPawn_execSpecialMoveTo_Parms SpecialMoveTo_Parms;
	SpecialMoveTo_Parms.Start = Start;
	SpecialMoveTo_Parms.End = End;
	SpecialMoveTo_Parms.Next = Next;

	this->ProcessEvent ( pFnSpecialMoveTo, &SpecialMoveTo_Parms, NULL );

	return SpecialMoveTo_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.ControllerCanDoSpecialMove
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::eventControllerCanDoSpecialMove ( )
{
	static UFunction* pFnControllerCanDoSpecialMove = NULL;

	if ( ! pFnControllerCanDoSpecialMove )
		pFnControllerCanDoSpecialMove = (UFunction*) UObject::GObjObjects()->Data[ 40734 ];

	ABioPawn_eventControllerCanDoSpecialMove_Parms ControllerCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnControllerCanDoSpecialMove, &ControllerCanDoSpecialMove_Parms, NULL );

	return ControllerCanDoSpecialMove_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.ControllerContainsClimbUpCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::eventControllerContainsClimbUpCustomAction ( )
{
	static UFunction* pFnControllerContainsClimbUpCustomAction = NULL;

	if ( ! pFnControllerContainsClimbUpCustomAction )
		pFnControllerContainsClimbUpCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 40732 ];

	ABioPawn_eventControllerContainsClimbUpCustomAction_Parms ControllerContainsClimbUpCustomAction_Parms;

	this->ProcessEvent ( pFnControllerContainsClimbUpCustomAction, &ControllerContainsClimbUpCustomAction_Parms, NULL );

	return ControllerContainsClimbUpCustomAction_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.ControllerContainsMantleCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::eventControllerContainsMantleCustomAction ( )
{
	static UFunction* pFnControllerContainsMantleCustomAction = NULL;

	if ( ! pFnControllerContainsMantleCustomAction )
		pFnControllerContainsMantleCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 40730 ];

	ABioPawn_eventControllerContainsMantleCustomAction_Parms ControllerContainsMantleCustomAction_Parms;

	this->ProcessEvent ( pFnControllerContainsMantleCustomAction, &ControllerContainsMantleCustomAction_Parms, NULL );

	return ControllerContainsMantleCustomAction_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.ControllerContainsCustomActionClass
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  CustomActionClass              ( CPF_Parm )

bool ABioPawn::ControllerContainsCustomActionClass ( class UClass* CustomActionClass )
{
	static UFunction* pFnControllerContainsCustomActionClass = NULL;

	if ( ! pFnControllerContainsCustomActionClass )
		pFnControllerContainsCustomActionClass = (UFunction*) UObject::GObjObjects()->Data[ 40723 ];

	ABioPawn_execControllerContainsCustomActionClass_Parms ControllerContainsCustomActionClass_Parms;
	ControllerContainsCustomActionClass_Parms.CustomActionClass = CustomActionClass;

	this->ProcessEvent ( pFnControllerContainsCustomActionClass, &ControllerContainsCustomActionClass_Parms, NULL );

	return ControllerContainsCustomActionClass_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.TerminateCurrentCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPawn::eventTerminateCurrentCustomAction ( )
{
	static UFunction* pFnTerminateCurrentCustomAction = NULL;

	if ( ! pFnTerminateCurrentCustomAction )
		pFnTerminateCurrentCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 40722 ];

	ABioPawn_eventTerminateCurrentCustomAction_Parms TerminateCurrentCustomAction_Parms;

	this->ProcessEvent ( pFnTerminateCurrentCustomAction, &TerminateCurrentCustomAction_Parms, NULL );
};

// Function SFXGame.BioPawn.GetCurrentCustomAction
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioCustomAction*        pAction                        ( CPF_Parm | CPF_OutParm )

bool ABioPawn::GetCurrentCustomAction ( class UBioCustomAction** pAction )
{
	static UFunction* pFnGetCurrentCustomAction = NULL;

	if ( ! pFnGetCurrentCustomAction )
		pFnGetCurrentCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 40719 ];

	ABioPawn_execGetCurrentCustomAction_Parms GetCurrentCustomAction_Parms;

	pFnGetCurrentCustomAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentCustomAction, &GetCurrentCustomAction_Parms, NULL );

	pFnGetCurrentCustomAction->FunctionFlags |= 0x400;

	if ( pAction )
		*pAction = GetCurrentCustomAction_Parms.pAction;

	return GetCurrentCustomAction_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.AnimNotify
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// class UBioAnimNotify_CustomAction* NotifyObject                   ( CPF_Parm )

void ABioPawn::AnimNotify ( class UAnimNodeSequence* SeqNode, class UBioAnimNotify_CustomAction* NotifyObject )
{
	static UFunction* pFnAnimNotify = NULL;

	if ( ! pFnAnimNotify )
		pFnAnimNotify = (UFunction*) UObject::GObjObjects()->Data[ 31098 ];

	ABioPawn_execAnimNotify_Parms AnimNotify_Parms;
	AnimNotify_Parms.SeqNode = SeqNode;
	AnimNotify_Parms.NotifyObject = NotifyObject;

	this->ProcessEvent ( pFnAnimNotify, &AnimNotify_Parms, NULL );
};

// Function SFXGame.BioPawn.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ABioPawn::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 40711 ];

	ABioPawn_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.BioPawn.SetBodyStanceAnimLooping
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm )
// unsigned long                  bNewLooping                    ( CPF_Parm )

void ABioPawn::SetBodyStanceAnimLooping ( struct FBodyStance Stance, unsigned long bNewLooping )
{
	static UFunction* pFnSetBodyStanceAnimLooping = NULL;

	if ( ! pFnSetBodyStanceAnimLooping )
		pFnSetBodyStanceAnimLooping = (UFunction*) UObject::GObjObjects()->Data[ 40707 ];

	ABioPawn_execSetBodyStanceAnimLooping_Parms SetBodyStanceAnimLooping_Parms;
	memcpy ( &SetBodyStanceAnimLooping_Parms.Stance, &Stance, 0xC );
	SetBodyStanceAnimLooping_Parms.bNewLooping = bNewLooping;

	this->ProcessEvent ( pFnSetBodyStanceAnimLooping, &SetBodyStanceAnimLooping_Parms, NULL );
};

// Function SFXGame.BioPawn.SetBodyStanceAnimEndNotification
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm )
// unsigned long                  bNewStatus                     ( CPF_Parm )

void ABioPawn::SetBodyStanceAnimEndNotification ( struct FBodyStance Stance, unsigned long bNewStatus )
{
	static UFunction* pFnSetBodyStanceAnimEndNotification = NULL;

	if ( ! pFnSetBodyStanceAnimEndNotification )
		pFnSetBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 35180 ];

	ABioPawn_execSetBodyStanceAnimEndNotification_Parms SetBodyStanceAnimEndNotification_Parms;
	memcpy ( &SetBodyStanceAnimEndNotification_Parms.Stance, &Stance, 0xC );
	SetBodyStanceAnimEndNotification_Parms.bNewStatus = bNewStatus;

	this->ProcessEvent ( pFnSetBodyStanceAnimEndNotification, &SetBodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.BioPawn.SetBodyStanceRootBoneAxisOption
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm )
// unsigned char                  AxisX                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisY                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  AxisZ                          ( CPF_OptionalParm | CPF_Parm )

void ABioPawn::SetBodyStanceRootBoneAxisOption ( struct FBodyStance Stance, unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ )
{
	static UFunction* pFnSetBodyStanceRootBoneAxisOption = NULL;

	if ( ! pFnSetBodyStanceRootBoneAxisOption )
		pFnSetBodyStanceRootBoneAxisOption = (UFunction*) UObject::GObjObjects()->Data[ 35225 ];

	ABioPawn_execSetBodyStanceRootBoneAxisOption_Parms SetBodyStanceRootBoneAxisOption_Parms;
	memcpy ( &SetBodyStanceRootBoneAxisOption_Parms.Stance, &Stance, 0xC );
	SetBodyStanceRootBoneAxisOption_Parms.AxisX = AxisX;
	SetBodyStanceRootBoneAxisOption_Parms.AxisY = AxisY;
	SetBodyStanceRootBoneAxisOption_Parms.AxisZ = AxisZ;

	this->ProcessEvent ( pFnSetBodyStanceRootBoneAxisOption, &SetBodyStanceRootBoneAxisOption_Parms, NULL );
};

// Function SFXGame.BioPawn.ScaleBodyStancePlayRate
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm )
// float                          RateScale                      ( CPF_Parm )

void ABioPawn::ScaleBodyStancePlayRate ( struct FBodyStance Stance, float RateScale )
{
	static UFunction* pFnScaleBodyStancePlayRate = NULL;

	if ( ! pFnScaleBodyStancePlayRate )
		pFnScaleBodyStancePlayRate = (UFunction*) UObject::GObjObjects()->Data[ 40697 ];

	ABioPawn_execScaleBodyStancePlayRate_Parms ScaleBodyStancePlayRate_Parms;
	memcpy ( &ScaleBodyStancePlayRate_Parms.Stance, &Stance, 0xC );
	ScaleBodyStancePlayRate_Parms.RateScale = RateScale;

	this->ProcessEvent ( pFnScaleBodyStancePlayRate, &ScaleBodyStancePlayRate_Parms, NULL );
};

// Function SFXGame.BioPawn.BS_UnpauseAnim
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm )

void ABioPawn::BS_UnpauseAnim ( struct FBodyStance Stance )
{
	static UFunction* pFnBS_UnpauseAnim = NULL;

	if ( ! pFnBS_UnpauseAnim )
		pFnBS_UnpauseAnim = (UFunction*) UObject::GObjObjects()->Data[ 35184 ];

	ABioPawn_execBS_UnpauseAnim_Parms BS_UnpauseAnim_Parms;
	memcpy ( &BS_UnpauseAnim_Parms.Stance, &Stance, 0xC );

	this->ProcessEvent ( pFnBS_UnpauseAnim, &BS_UnpauseAnim_Parms, NULL );
};

// Function SFXGame.BioPawn.BS_PauseAnim
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm )

void ABioPawn::BS_PauseAnim ( struct FBodyStance Stance )
{
	static UFunction* pFnBS_PauseAnim = NULL;

	if ( ! pFnBS_PauseAnim )
		pFnBS_PauseAnim = (UFunction*) UObject::GObjObjects()->Data[ 35182 ];

	ABioPawn_execBS_PauseAnim_Parms BS_PauseAnim_Parms;
	memcpy ( &BS_PauseAnim_Parms.Stance, &Stance, 0xC );

	this->ProcessEvent ( pFnBS_PauseAnim, &BS_PauseAnim_Parms, NULL );
};

// Function SFXGame.BioPawn.BS_AccelerateBlend
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm )
// float                          BlendAmount                    ( CPF_Parm )

void ABioPawn::BS_AccelerateBlend ( struct FBodyStance Stance, float BlendAmount )
{
	static UFunction* pFnBS_AccelerateBlend = NULL;

	if ( ! pFnBS_AccelerateBlend )
		pFnBS_AccelerateBlend = (UFunction*) UObject::GObjObjects()->Data[ 40690 ];

	ABioPawn_execBS_AccelerateBlend_Parms BS_AccelerateBlend_Parms;
	memcpy ( &BS_AccelerateBlend_Parms.Stance, &Stance, 0xC );
	BS_AccelerateBlend_Parms.BlendAmount = BlendAmount;

	this->ProcessEvent ( pFnBS_AccelerateBlend, &BS_AccelerateBlend_Parms, NULL );
};

// Function SFXGame.BioPawn.BS_SetPlayRate
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm )
// float                          NewRate                        ( CPF_Parm )

void ABioPawn::BS_SetPlayRate ( struct FBodyStance Stance, float NewRate )
{
	static UFunction* pFnBS_SetPlayRate = NULL;

	if ( ! pFnBS_SetPlayRate )
		pFnBS_SetPlayRate = (UFunction*) UObject::GObjObjects()->Data[ 40686 ];

	ABioPawn_execBS_SetPlayRate_Parms BS_SetPlayRate_Parms;
	memcpy ( &BS_SetPlayRate_Parms.Stance, &Stance, 0xC );
	BS_SetPlayRate_Parms.NewRate = NewRate;

	this->ProcessEvent ( pFnBS_SetPlayRate, &BS_SetPlayRate_Parms, NULL );
};

// Function SFXGame.BioPawn.BS_GetPlayRate
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBodyStance             Stance                         ( CPF_Parm )

float ABioPawn::BS_GetPlayRate ( struct FBodyStance Stance )
{
	static UFunction* pFnBS_GetPlayRate = NULL;

	if ( ! pFnBS_GetPlayRate )
		pFnBS_GetPlayRate = (UFunction*) UObject::GObjObjects()->Data[ 40682 ];

	ABioPawn_execBS_GetPlayRate_Parms BS_GetPlayRate_Parms;
	memcpy ( &BS_GetPlayRate_Parms.Stance, &Stance, 0xC );

	this->ProcessEvent ( pFnBS_GetPlayRate, &BS_GetPlayRate_Parms, NULL );

	return BS_GetPlayRate_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.BS_GetTimeLeft
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBodyStance             Stance                         ( CPF_Parm )

float ABioPawn::BS_GetTimeLeft ( struct FBodyStance Stance )
{
	static UFunction* pFnBS_GetTimeLeft = NULL;

	if ( ! pFnBS_GetTimeLeft )
		pFnBS_GetTimeLeft = (UFunction*) UObject::GObjObjects()->Data[ 40678 ];

	ABioPawn_execBS_GetTimeLeft_Parms BS_GetTimeLeft_Parms;
	memcpy ( &BS_GetTimeLeft_Parms.Stance, &Stance, 0xC );

	this->ProcessEvent ( pFnBS_GetTimeLeft, &BS_GetTimeLeft_Parms, NULL );

	return BS_GetTimeLeft_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.BS_SetPosition
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm )
// float                          Position                       ( CPF_Parm )

void ABioPawn::BS_SetPosition ( struct FBodyStance Stance, float Position )
{
	static UFunction* pFnBS_SetPosition = NULL;

	if ( ! pFnBS_SetPosition )
		pFnBS_SetPosition = (UFunction*) UObject::GObjObjects()->Data[ 40674 ];

	ABioPawn_execBS_SetPosition_Parms BS_SetPosition_Parms;
	memcpy ( &BS_SetPosition_Parms.Stance, &Stance, 0xC );
	BS_SetPosition_Parms.Position = Position;

	this->ProcessEvent ( pFnBS_SetPosition, &BS_SetPosition_Parms, NULL );
};

// Function SFXGame.BioPawn.SetBodyStance
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm )

void ABioPawn::SetBodyStance ( struct FBodyStance Stance )
{
	static UFunction* pFnSetBodyStance = NULL;

	if ( ! pFnSetBodyStance )
		pFnSetBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 40672 ];

	ABioPawn_execSetBodyStance_Parms SetBodyStance_Parms;
	memcpy ( &SetBodyStance_Parms.Stance, &Stance, 0xC );

	this->ProcessEvent ( pFnSetBodyStance, &SetBodyStance_Parms, NULL );
};

// Function SFXGame.BioPawn.StopAllBodyStances
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          BlendOutTime                   ( CPF_Parm )

void ABioPawn::StopAllBodyStances ( float BlendOutTime )
{
	static UFunction* pFnStopAllBodyStances = NULL;

	if ( ! pFnStopAllBodyStances )
		pFnStopAllBodyStances = (UFunction*) UObject::GObjObjects()->Data[ 40669 ];

	ABioPawn_execStopAllBodyStances_Parms StopAllBodyStances_Parms;
	StopAllBodyStances_Parms.BlendOutTime = BlendOutTime;

	this->ProcessEvent ( pFnStopAllBodyStances, &StopAllBodyStances_Parms, NULL );
};

// Function SFXGame.BioPawn.StopBodyStance
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )

void ABioPawn::StopBodyStance ( struct FBodyStance Stance, float BlendOutTime )
{
	static UFunction* pFnStopBodyStance = NULL;

	if ( ! pFnStopBodyStance )
		pFnStopBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 35186 ];

	ABioPawn_execStopBodyStance_Parms StopBodyStance_Parms;
	memcpy ( &StopBodyStance_Parms.Stance, &Stance, 0xC );
	StopBodyStance_Parms.BlendOutTime = BlendOutTime;

	this->ProcessEvent ( pFnStopBodyStance, &StopBodyStance_Parms, NULL );
};

// Function SFXGame.BioPawn.IsPlayingBodyStance
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBodyStance             Stance                         ( CPF_Parm )

bool ABioPawn::IsPlayingBodyStance ( struct FBodyStance Stance )
{
	static UFunction* pFnIsPlayingBodyStance = NULL;

	if ( ! pFnIsPlayingBodyStance )
		pFnIsPlayingBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 40664 ];

	ABioPawn_execIsPlayingBodyStance_Parms IsPlayingBodyStance_Parms;
	memcpy ( &IsPlayingBodyStance_Parms.Stance, &Stance, 0xC );

	this->ProcessEvent ( pFnIsPlayingBodyStance, &IsPlayingBodyStance_Parms, NULL );

	return IsPlayingBodyStance_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.PlayBodyStanceByDuration
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FBodyStance             Stance                         ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )

void ABioPawn::PlayBodyStanceByDuration ( struct FBodyStance Stance, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride )
{
	static UFunction* pFnPlayBodyStanceByDuration = NULL;

	if ( ! pFnPlayBodyStanceByDuration )
		pFnPlayBodyStanceByDuration = (UFunction*) UObject::GObjObjects()->Data[ 40657 ];

	ABioPawn_execPlayBodyStanceByDuration_Parms PlayBodyStanceByDuration_Parms;
	memcpy ( &PlayBodyStanceByDuration_Parms.Stance, &Stance, 0xC );
	PlayBodyStanceByDuration_Parms.Duration = Duration;
	PlayBodyStanceByDuration_Parms.BlendInTime = BlendInTime;
	PlayBodyStanceByDuration_Parms.BlendOutTime = BlendOutTime;
	PlayBodyStanceByDuration_Parms.bLooping = bLooping;
	PlayBodyStanceByDuration_Parms.bOverride = bOverride;

	this->ProcessEvent ( pFnPlayBodyStanceByDuration, &PlayBodyStanceByDuration_Parms, NULL );
};

// Function SFXGame.BioPawn.PlayBodyStance
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBodyStance             Stance                         ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bKeepRBASettings               ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

float ABioPawn::PlayBodyStance ( struct FBodyStance Stance, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, unsigned long bKeepRBASettings, float StartTime )
{
	static UFunction* pFnPlayBodyStance = NULL;

	if ( ! pFnPlayBodyStance )
		pFnPlayBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 35179 ];

	ABioPawn_execPlayBodyStance_Parms PlayBodyStance_Parms;
	memcpy ( &PlayBodyStance_Parms.Stance, &Stance, 0xC );
	PlayBodyStance_Parms.Rate = Rate;
	PlayBodyStance_Parms.BlendInTime = BlendInTime;
	PlayBodyStance_Parms.BlendOutTime = BlendOutTime;
	PlayBodyStance_Parms.bLooping = bLooping;
	PlayBodyStance_Parms.bOverride = bOverride;
	PlayBodyStance_Parms.bKeepRBASettings = bKeepRBASettings;
	PlayBodyStance_Parms.StartTime = StartTime;

	this->ProcessEvent ( pFnPlayBodyStance, &PlayBodyStance_Parms, NULL );

	return PlayBodyStance_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.PawnPlayCustomAnim
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UAnimNodeSlot*           Slot                           ( CPF_Parm )
// struct FName                   AnimName                       ( CPF_Parm )
// float                          Rate                           ( CPF_Parm )
// float                          BlendInTime                    ( CPF_OptionalParm | CPF_Parm )
// float                          BlendOutTime                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bLooping                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bOverride                      ( CPF_OptionalParm | CPF_Parm )
// float                          StartTime                      ( CPF_OptionalParm | CPF_Parm )

float ABioPawn::PawnPlayCustomAnim ( class UAnimNodeSlot* Slot, struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, float StartTime )
{
	static UFunction* pFnPawnPlayCustomAnim = NULL;

	if ( ! pFnPawnPlayCustomAnim )
		pFnPawnPlayCustomAnim = (UFunction*) UObject::GObjObjects()->Data[ 40636 ];

	ABioPawn_execPawnPlayCustomAnim_Parms PawnPlayCustomAnim_Parms;
	PawnPlayCustomAnim_Parms.Slot = Slot;
	memcpy ( &PawnPlayCustomAnim_Parms.AnimName, &AnimName, 0x8 );
	PawnPlayCustomAnim_Parms.Rate = Rate;
	PawnPlayCustomAnim_Parms.BlendInTime = BlendInTime;
	PawnPlayCustomAnim_Parms.BlendOutTime = BlendOutTime;
	PawnPlayCustomAnim_Parms.bLooping = bLooping;
	PawnPlayCustomAnim_Parms.bOverride = bOverride;
	PawnPlayCustomAnim_Parms.StartTime = StartTime;

	pFnPawnPlayCustomAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPawnPlayCustomAnim, &PawnPlayCustomAnim_Parms, NULL );

	pFnPawnPlayCustomAnim->FunctionFlags |= 0x400;

	return PawnPlayCustomAnim_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.OnAnimEnd
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void ABioPawn::eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = (UFunction*) UObject::GObjObjects()->Data[ 40631 ];

	ABioPawn_eventOnAnimEnd_Parms OnAnimEnd_Parms;
	OnAnimEnd_Parms.SeqNode = SeqNode;
	OnAnimEnd_Parms.PlayedTime = PlayedTime;
	OnAnimEnd_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function SFXGame.BioPawn.ClearAnimNodes
// [0x00020002] 
// Parameters infos:

void ABioPawn::ClearAnimNodes ( )
{
	static UFunction* pFnClearAnimNodes = NULL;

	if ( ! pFnClearAnimNodes )
		pFnClearAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 40630 ];

	ABioPawn_execClearAnimNodes_Parms ClearAnimNodes_Parms;

	this->ProcessEvent ( pFnClearAnimNodes, &ClearAnimNodes_Parms, NULL );
};

// Function SFXGame.BioPawn.RecacheAnimNodes
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPawn::eventRecacheAnimNodes ( )
{
	static UFunction* pFnRecacheAnimNodes = NULL;

	if ( ! pFnRecacheAnimNodes )
		pFnRecacheAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 40629 ];

	ABioPawn_eventRecacheAnimNodes_Parms RecacheAnimNodes_Parms;

	this->ProcessEvent ( pFnRecacheAnimNodes, &RecacheAnimNodes_Parms, NULL );
};

// Function SFXGame.BioPawn.CacheAnimNodes
// [0x00020002] 
// Parameters infos:

void ABioPawn::CacheAnimNodes ( )
{
	static UFunction* pFnCacheAnimNodes = NULL;

	if ( ! pFnCacheAnimNodes )
		pFnCacheAnimNodes = (UFunction*) UObject::GObjObjects()->Data[ 40627 ];

	ABioPawn_execCacheAnimNodes_Parms CacheAnimNodes_Parms;

	this->ProcessEvent ( pFnCacheAnimNodes, &CacheAnimNodes_Parms, NULL );
};

// Function SFXGame.BioPawn.OnOrbitalGame
// [0x00020000] 
// Parameters infos:
// class UBioSeqAct_OrbitalGame*  Action                         ( CPF_Parm )

void ABioPawn::OnOrbitalGame ( class UBioSeqAct_OrbitalGame* Action )
{
	static UFunction* pFnOnOrbitalGame = NULL;

	if ( ! pFnOnOrbitalGame )
		pFnOnOrbitalGame = (UFunction*) UObject::GObjObjects()->Data[ 40624 ];

	ABioPawn_execOnOrbitalGame_Parms OnOrbitalGame_Parms;
	OnOrbitalGame_Parms.Action = Action;

	this->ProcessEvent ( pFnOnOrbitalGame, &OnOrbitalGame_Parms, NULL );
};

// Function SFXGame.BioPawn.InitializeSpeeds
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::InitializeSpeeds ( )
{
	static UFunction* pFnInitializeSpeeds = NULL;

	if ( ! pFnInitializeSpeeds )
		pFnInitializeSpeeds = (UFunction*) UObject::GObjObjects()->Data[ 40623 ];

	ABioPawn_execInitializeSpeeds_Parms InitializeSpeeds_Parms;

	pFnInitializeSpeeds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeSpeeds, &InitializeSpeeds_Parms, NULL );

	pFnInitializeSpeeds->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.NotifyLimbDetached
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ePartGroup                     ( CPF_Parm )

void ABioPawn::eventNotifyLimbDetached ( unsigned char ePartGroup )
{
	static UFunction* pFnNotifyLimbDetached = NULL;

	if ( ! pFnNotifyLimbDetached )
		pFnNotifyLimbDetached = (UFunction*) UObject::GObjObjects()->Data[ 40618 ];

	ABioPawn_eventNotifyLimbDetached_Parms NotifyLimbDetached_Parms;
	NotifyLimbDetached_Parms.ePartGroup = ePartGroup;

	this->ProcessEvent ( pFnNotifyLimbDetached, &NotifyLimbDetached_Parms, NULL );
};

// Function SFXGame.BioPawn.OnPowerOrdered
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   nmPower                        ( CPF_Parm )
// class AActor*                  oTargetActor                   ( CPF_Parm )

void ABioPawn::eventOnPowerOrdered ( struct FName nmPower, class AActor* oTargetActor )
{
	static UFunction* pFnOnPowerOrdered = NULL;

	if ( ! pFnOnPowerOrdered )
		pFnOnPowerOrdered = (UFunction*) UObject::GObjObjects()->Data[ 40612 ];

	ABioPawn_eventOnPowerOrdered_Parms OnPowerOrdered_Parms;
	memcpy ( &OnPowerOrdered_Parms.nmPower, &nmPower, 0x8 );
	OnPowerOrdered_Parms.oTargetActor = oTargetActor;

	this->ProcessEvent ( pFnOnPowerOrdered, &OnPowerOrdered_Parms, NULL );
};

// Function SFXGame.BioPawn.OnPowerCast
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class USFXPower*               Power                          ( CPF_Parm )

void ABioPawn::eventOnPowerCast ( class USFXPower* Power )
{
	static UFunction* pFnOnPowerCast = NULL;

	if ( ! pFnOnPowerCast )
		pFnOnPowerCast = (UFunction*) UObject::GObjObjects()->Data[ 40607 ];

	ABioPawn_eventOnPowerCast_Parms OnPowerCast_Parms;
	OnPowerCast_Parms.Power = Power;

	this->ProcessEvent ( pFnOnPowerCast, &OnPowerCast_Parms, NULL );
};

// Function SFXGame.BioPawn.OnPowerEffectDurationComplete
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   nmPower                        ( CPF_Parm )

void ABioPawn::eventOnPowerEffectDurationComplete ( struct FName nmPower )
{
	static UFunction* pFnOnPowerEffectDurationComplete = NULL;

	if ( ! pFnOnPowerEffectDurationComplete )
		pFnOnPowerEffectDurationComplete = (UFunction*) UObject::GObjObjects()->Data[ 40601 ];

	ABioPawn_eventOnPowerEffectDurationComplete_Parms OnPowerEffectDurationComplete_Parms;
	memcpy ( &OnPowerEffectDurationComplete_Parms.nmPower, &nmPower, 0x8 );

	this->ProcessEvent ( pFnOnPowerEffectDurationComplete, &OnPowerEffectDurationComplete_Parms, NULL );
};

// Function SFXGame.BioPawn.OnPowerCooldownFinished
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   nmPower                        ( CPF_Parm )

void ABioPawn::eventOnPowerCooldownFinished ( struct FName nmPower )
{
	static UFunction* pFnOnPowerCooldownFinished = NULL;

	if ( ! pFnOnPowerCooldownFinished )
		pFnOnPowerCooldownFinished = (UFunction*) UObject::GObjObjects()->Data[ 40596 ];

	ABioPawn_eventOnPowerCooldownFinished_Parms OnPowerCooldownFinished_Parms;
	memcpy ( &OnPowerCooldownFinished_Parms.nmPower, &nmPower, 0x8 );

	this->ProcessEvent ( pFnOnPowerCooldownFinished, &OnPowerCooldownFinished_Parms, NULL );
};

// Function SFXGame.BioPawn.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* ABioPawn::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 40593 ];

	ABioPawn_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsCombatActionState
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eActionStateVar                ( CPF_Parm )

bool ABioPawn::IsCombatActionState ( unsigned char eActionStateVar )
{
	static UFunction* pFnIsCombatActionState = NULL;

	if ( ! pFnIsCombatActionState )
		pFnIsCombatActionState = (UFunction*) UObject::GObjObjects()->Data[ 40590 ];

	ABioPawn_execIsCombatActionState_Parms IsCombatActionState_Parms;
	IsCombatActionState_Parms.eActionStateVar = eActionStateVar;

	pFnIsCombatActionState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCombatActionState, &IsCombatActionState_Parms, NULL );

	pFnIsCombatActionState->FunctionFlags |= 0x400;

	return IsCombatActionState_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.MakeVulnerable
// [0x00020001] ( FUNC_Final )
// Parameters infos:

void ABioPawn::MakeVulnerable ( )
{
	static UFunction* pFnMakeVulnerable = NULL;

	if ( ! pFnMakeVulnerable )
		pFnMakeVulnerable = (UFunction*) UObject::GObjObjects()->Data[ 40589 ];

	ABioPawn_execMakeVulnerable_Parms MakeVulnerable_Parms;

	this->ProcessEvent ( pFnMakeVulnerable, &MakeVulnerable_Parms, NULL );
};

// Function SFXGame.BioPawn.SpawnDefaultController
// [0x00020002] 
// Parameters infos:

void ABioPawn::SpawnDefaultController ( )
{
	static UFunction* pFnSpawnDefaultController = NULL;

	if ( ! pFnSpawnDefaultController )
		pFnSpawnDefaultController = (UFunction*) UObject::GObjObjects()->Data[ 40585 ];

	ABioPawn_execSpawnDefaultController_Parms SpawnDefaultController_Parms;

	this->ProcessEvent ( pFnSpawnDefaultController, &SpawnDefaultController_Parms, NULL );
};

// Function SFXGame.BioPawn.Resurrect
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          PercentOfHealthRegained        ( CPF_Parm )
// unsigned long                  bIsInstantaneous               ( CPF_Parm )

bool ABioPawn::eventResurrect ( float PercentOfHealthRegained, unsigned long bIsInstantaneous )
{
	static UFunction* pFnResurrect = NULL;

	if ( ! pFnResurrect )
		pFnResurrect = (UFunction*) UObject::GObjObjects()->Data[ 40580 ];

	ABioPawn_eventResurrect_Parms Resurrect_Parms;
	Resurrect_Parms.PercentOfHealthRegained = PercentOfHealthRegained;
	Resurrect_Parms.bIsInstantaneous = bIsInstantaneous;

	this->ProcessEvent ( pFnResurrect, &Resurrect_Parms, NULL );

	return Resurrect_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetRegenRate
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPawn::eventGetRegenRate ( )
{
	static UFunction* pFnGetRegenRate = NULL;

	if ( ! pFnGetRegenRate )
		pFnGetRegenRate = (UFunction*) UObject::GObjObjects()->Data[ 40576 ];

	ABioPawn_eventGetRegenRate_Parms GetRegenRate_Parms;

	this->ProcessEvent ( pFnGetRegenRate, &GetRegenRate_Parms, NULL );

	return GetRegenRate_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetInBleedout
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::eventGetInBleedout ( )
{
	static UFunction* pFnGetInBleedout = NULL;

	if ( ! pFnGetInBleedout )
		pFnGetInBleedout = (UFunction*) UObject::GObjObjects()->Data[ 40573 ];

	ABioPawn_eventGetInBleedout_Parms GetInBleedout_Parms;

	this->ProcessEvent ( pFnGetInBleedout, &GetInBleedout_Parms, NULL );

	return GetInBleedout_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.RecoverFromBleedout
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPawn::eventRecoverFromBleedout ( )
{
	static UFunction* pFnRecoverFromBleedout = NULL;

	if ( ! pFnRecoverFromBleedout )
		pFnRecoverFromBleedout = (UFunction*) UObject::GObjObjects()->Data[ 40572 ];

	ABioPawn_eventRecoverFromBleedout_Parms RecoverFromBleedout_Parms;

	this->ProcessEvent ( pFnRecoverFromBleedout, &RecoverFromBleedout_Parms, NULL );
};

// Function SFXGame.BioPawn.IsArmorFortified
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::eventIsArmorFortified ( )
{
	static UFunction* pFnIsArmorFortified = NULL;

	if ( ! pFnIsArmorFortified )
		pFnIsArmorFortified = (UFunction*) UObject::GObjObjects()->Data[ 40568 ];

	ABioPawn_eventIsArmorFortified_Parms IsArmorFortified_Parms;

	this->ProcessEvent ( pFnIsArmorFortified, &IsArmorFortified_Parms, NULL );

	return IsArmorFortified_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetShieldRechargeTime
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPawn::GetShieldRechargeTime ( )
{
	static UFunction* pFnGetShieldRechargeTime = NULL;

	if ( ! pFnGetShieldRechargeTime )
		pFnGetShieldRechargeTime = (UFunction*) UObject::GObjObjects()->Data[ 33563 ];

	ABioPawn_execGetShieldRechargeTime_Parms GetShieldRechargeTime_Parms;

	this->ProcessEvent ( pFnGetShieldRechargeTime, &GetShieldRechargeTime_Parms, NULL );

	return GetShieldRechargeTime_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetShieldRegenDelay
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPawn::GetShieldRegenDelay ( )
{
	static UFunction* pFnGetShieldRegenDelay = NULL;

	if ( ! pFnGetShieldRegenDelay )
		pFnGetShieldRegenDelay = (UFunction*) UObject::GObjObjects()->Data[ 33562 ];

	ABioPawn_execGetShieldRegenDelay_Parms GetShieldRegenDelay_Parms;

	this->ProcessEvent ( pFnGetShieldRegenDelay, &GetShieldRegenDelay_Parms, NULL );

	return GetShieldRegenDelay_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetShieldPct
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPawn::eventGetShieldPct ( )
{
	static UFunction* pFnGetShieldPct = NULL;

	if ( ! pFnGetShieldPct )
		pFnGetShieldPct = (UFunction*) UObject::GObjObjects()->Data[ 40562 ];

	ABioPawn_eventGetShieldPct_Parms GetShieldPct_Parms;

	this->ProcessEvent ( pFnGetShieldPct, &GetShieldPct_Parms, NULL );

	return GetShieldPct_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetMaxShields
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPawn::eventGetMaxShields ( )
{
	static UFunction* pFnGetMaxShields = NULL;

	if ( ! pFnGetMaxShields )
		pFnGetMaxShields = (UFunction*) UObject::GObjObjects()->Data[ 33508 ];

	ABioPawn_eventGetMaxShields_Parms GetMaxShields_Parms;

	this->ProcessEvent ( pFnGetMaxShields, &GetMaxShields_Parms, NULL );

	return GetMaxShields_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetCurrentShields
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPawn::eventGetCurrentShields ( )
{
	static UFunction* pFnGetCurrentShields = NULL;

	if ( ! pFnGetCurrentShields )
		pFnGetCurrentShields = (UFunction*) UObject::GObjObjects()->Data[ 33509 ];

	ABioPawn_eventGetCurrentShields_Parms GetCurrentShields_Parms;

	this->ProcessEvent ( pFnGetCurrentShields, &GetCurrentShields_Parms, NULL );

	return GetCurrentShields_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetHealthPct
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPawn::eventGetHealthPct ( )
{
	static UFunction* pFnGetHealthPct = NULL;

	if ( ! pFnGetHealthPct )
		pFnGetHealthPct = (UFunction*) UObject::GObjObjects()->Data[ 40553 ];

	ABioPawn_eventGetHealthPct_Parms GetHealthPct_Parms;

	this->ProcessEvent ( pFnGetHealthPct, &GetHealthPct_Parms, NULL );

	return GetHealthPct_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetMaxHealth
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPawn::eventGetMaxHealth ( )
{
	static UFunction* pFnGetMaxHealth = NULL;

	if ( ! pFnGetMaxHealth )
		pFnGetMaxHealth = (UFunction*) UObject::GObjObjects()->Data[ 33486 ];

	ABioPawn_eventGetMaxHealth_Parms GetMaxHealth_Parms;

	this->ProcessEvent ( pFnGetMaxHealth, &GetMaxHealth_Parms, NULL );

	return GetMaxHealth_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetCurrentHealth
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPawn::eventGetCurrentHealth ( )
{
	static UFunction* pFnGetCurrentHealth = NULL;

	if ( ! pFnGetCurrentHealth )
		pFnGetCurrentHealth = (UFunction*) UObject::GObjObjects()->Data[ 33510 ];

	ABioPawn_eventGetCurrentHealth_Parms GetCurrentHealth_Parms;

	this->ProcessEvent ( pFnGetCurrentHealth, &GetCurrentHealth_Parms, NULL );

	return GetCurrentHealth_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetShields
// [0x00020002] 
// Parameters infos:
// class ASFXShield_Base*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXShield_Base* ABioPawn::GetShields ( )
{
	static UFunction* pFnGetShields = NULL;

	if ( ! pFnGetShields )
		pFnGetShields = (UFunction*) UObject::GObjObjects()->Data[ 40546 ];

	ABioPawn_execGetShields_Parms GetShields_Parms;

	this->ProcessEvent ( pFnGetShields, &GetShields_Parms, NULL );

	return GetShields_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsShieldBoosted
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::eventIsShieldBoosted ( )
{
	static UFunction* pFnIsShieldBoosted = NULL;

	if ( ! pFnIsShieldBoosted )
		pFnIsShieldBoosted = (UFunction*) UObject::GObjObjects()->Data[ 40542 ];

	ABioPawn_eventIsShieldBoosted_Parms IsShieldBoosted_Parms;

	this->ProcessEvent ( pFnIsShieldBoosted, &IsShieldBoosted_Parms, NULL );

	return IsShieldBoosted_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.KillAttachedVFX
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::KillAttachedVFX ( )
{
	static UFunction* pFnKillAttachedVFX = NULL;

	if ( ! pFnKillAttachedVFX )
		pFnKillAttachedVFX = (UFunction*) UObject::GObjObjects()->Data[ 40541 ];

	ABioPawn_execKillAttachedVFX_Parms KillAttachedVFX_Parms;

	pFnKillAttachedVFX->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillAttachedVFX, &KillAttachedVFX_Parms, NULL );

	pFnKillAttachedVFX->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.FadeLifeCrust
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::FadeLifeCrust ( )
{
	static UFunction* pFnFadeLifeCrust = NULL;

	if ( ! pFnFadeLifeCrust )
		pFnFadeLifeCrust = (UFunction*) UObject::GObjObjects()->Data[ 40540 ];

	ABioPawn_execFadeLifeCrust_Parms FadeLifeCrust_Parms;

	pFnFadeLifeCrust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFadeLifeCrust, &FadeLifeCrust_Parms, NULL );

	pFnFadeLifeCrust->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.GetXLASTClassContextID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ABioPawn::GetXLASTClassContextID ( )
{
	static UFunction* pFnGetXLASTClassContextID = NULL;

	if ( ! pFnGetXLASTClassContextID )
		pFnGetXLASTClassContextID = (UFunction*) UObject::GObjObjects()->Data[ 40531 ];

	ABioPawn_execGetXLASTClassContextID_Parms GetXLASTClassContextID_Parms;

	this->ProcessEvent ( pFnGetXLASTClassContextID, &GetXLASTClassContextID_Parms, NULL );

	return GetXLASTClassContextID_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetRichPresence
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void ABioPawn::eventSetRichPresence ( )
{
	static UFunction* pFnSetRichPresence = NULL;

	if ( ! pFnSetRichPresence )
		pFnSetRichPresence = (UFunction*) UObject::GObjObjects()->Data[ 40519 ];

	ABioPawn_eventSetRichPresence_Parms SetRichPresence_Parms;

	this->ProcessEvent ( pFnSetRichPresence, &SetRichPresence_Parms, NULL );
};

// Function SFXGame.BioPawn.HasDeathPower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::HasDeathPower ( )
{
	static UFunction* pFnHasDeathPower = NULL;

	if ( ! pFnHasDeathPower )
		pFnHasDeathPower = (UFunction*) UObject::GObjObjects()->Data[ 40481 ];

	ABioPawn_execHasDeathPower_Parms HasDeathPower_Parms;

	this->ProcessEvent ( pFnHasDeathPower, &HasDeathPower_Parms, NULL );

	return HasDeathPower_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CanPlayDeathEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXGameEffect*          GE                             ( CPF_Parm )

bool ABioPawn::CanPlayDeathEffect ( class USFXGameEffect* GE )
{
	static UFunction* pFnCanPlayDeathEffect = NULL;

	if ( ! pFnCanPlayDeathEffect )
		pFnCanPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 40465 ];

	ABioPawn_execCanPlayDeathEffect_Parms CanPlayDeathEffect_Parms;
	CanPlayDeathEffect_Parms.GE = GE;

	this->ProcessEvent ( pFnCanPlayDeathEffect, &CanPlayDeathEffect_Parms, NULL );

	return CanPlayDeathEffect_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.PlayDeathEffect
// [0x00020002] 
// Parameters infos:
// class UClass*                  SFXDamageType                  ( CPF_Parm )

void ABioPawn::PlayDeathEffect ( class UClass* SFXDamageType )
{
	static UFunction* pFnPlayDeathEffect = NULL;

	if ( ! pFnPlayDeathEffect )
		pFnPlayDeathEffect = (UFunction*) UObject::GObjObjects()->Data[ 40451 ];

	ABioPawn_execPlayDeathEffect_Parms PlayDeathEffect_Parms;
	PlayDeathEffect_Parms.SFXDamageType = SFXDamageType;

	this->ProcessEvent ( pFnPlayDeathEffect, &PlayDeathEffect_Parms, NULL );
};

// Function SFXGame.BioPawn.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ABioPawn::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 40446 ];

	ABioPawn_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function SFXGame.BioPawn.PlayDeathVocalization
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Killer                         ( CPF_Parm )

void ABioPawn::PlayDeathVocalization ( class ABioPawn* Killer )
{
	static UFunction* pFnPlayDeathVocalization = NULL;

	if ( ! pFnPlayDeathVocalization )
		pFnPlayDeathVocalization = (UFunction*) UObject::GObjObjects()->Data[ 40442 ];

	ABioPawn_execPlayDeathVocalization_Parms PlayDeathVocalization_Parms;
	PlayDeathVocalization_Parms.Killer = Killer;

	this->ProcessEvent ( pFnPlayDeathVocalization, &PlayDeathVocalization_Parms, NULL );
};

// Function SFXGame.BioPawn.ResetSnapshotNode
// [0x00020002] 
// Parameters infos:

void ABioPawn::ResetSnapshotNode ( )
{
	static UFunction* pFnResetSnapshotNode = NULL;

	if ( ! pFnResetSnapshotNode )
		pFnResetSnapshotNode = (UFunction*) UObject::GObjObjects()->Data[ 40440 ];

	ABioPawn_execResetSnapshotNode_Parms ResetSnapshotNode_Parms;

	this->ProcessEvent ( pFnResetSnapshotNode, &ResetSnapshotNode_Parms, NULL );
};

// Function SFXGame.BioPawn.Died
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             Killer                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

bool ABioPawn::eventDied ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = (UFunction*) UObject::GObjObjects()->Data[ 40429 ];

	ABioPawn_eventDied_Parms Died_Parms;
	Died_Parms.Killer = Killer;
	Died_Parms.DamageType = DamageType;
	memcpy ( &Died_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );

	return Died_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetGameEffect
// [0x00020002] 
// Parameters infos:
// class USFXGameEffect*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GEName                         ( CPF_Parm )

class USFXGameEffect* ABioPawn::GetGameEffect ( struct FName GEName )
{
	static UFunction* pFnGetGameEffect = NULL;

	if ( ! pFnGetGameEffect )
		pFnGetGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 40424 ];

	ABioPawn_execGetGameEffect_Parms GetGameEffect_Parms;
	memcpy ( &GetGameEffect_Parms.GEName, &GEName, 0x8 );

	this->ProcessEvent ( pFnGetGameEffect, &GetGameEffect_Parms, NULL );

	return GetGameEffect_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.HasGameEffect
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   GEName                         ( CPF_Parm )

bool ABioPawn::HasGameEffect ( struct FName GEName )
{
	static UFunction* pFnHasGameEffect = NULL;

	if ( ! pFnHasGameEffect )
		pFnHasGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 40419 ];

	ABioPawn_execHasGameEffect_Parms HasGameEffect_Parms;
	memcpy ( &HasGameEffect_Parms.GEName, &GEName, 0x8 );

	this->ProcessEvent ( pFnHasGameEffect, &HasGameEffect_Parms, NULL );

	return HasGameEffect_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.OnDeathAnimationFinished
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPawn::eventOnDeathAnimationFinished ( )
{
	static UFunction* pFnOnDeathAnimationFinished = NULL;

	if ( ! pFnOnDeathAnimationFinished )
		pFnOnDeathAnimationFinished = (UFunction*) UObject::GObjObjects()->Data[ 40418 ];

	ABioPawn_eventOnDeathAnimationFinished_Parms OnDeathAnimationFinished_Parms;

	this->ProcessEvent ( pFnOnDeathAnimationFinished, &OnDeathAnimationFinished_Parms, NULL );
};

// Function SFXGame.BioPawn.gibbedBy
// [0x00020000] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ABioPawn::gibbedBy ( class AActor* Other )
{
	static UFunction* pFngibbedBy = NULL;

	if ( ! pFngibbedBy )
		pFngibbedBy = (UFunction*) UObject::GObjObjects()->Data[ 40416 ];

	ABioPawn_execgibbedBy_Parms gibbedBy_Parms;
	gibbedBy_Parms.Other = Other;

	this->ProcessEvent ( pFngibbedBy, &gibbedBy_Parms, NULL );
};

// Function SFXGame.BioPawn.ReleasePowersCamera
// [0x00020002] 
// Parameters infos:

void ABioPawn::ReleasePowersCamera ( )
{
	static UFunction* pFnReleasePowersCamera = NULL;

	if ( ! pFnReleasePowersCamera )
		pFnReleasePowersCamera = (UFunction*) UObject::GObjObjects()->Data[ 40414 ];

	ABioPawn_execReleasePowersCamera_Parms ReleasePowersCamera_Parms;

	this->ProcessEvent ( pFnReleasePowersCamera, &ReleasePowersCamera_Parms, NULL );
};

// Function SFXGame.BioPawn.OnTeleport
// [0x00020102] 
// Parameters infos:
// class USeqAct_Teleport*        Action                         ( CPF_Parm )

void ABioPawn::OnTeleport ( class USeqAct_Teleport* Action )
{
	static UFunction* pFnOnTeleport = NULL;

	if ( ! pFnOnTeleport )
		pFnOnTeleport = (UFunction*) UObject::GObjObjects()->Data[ 40404 ];

	ABioPawn_execOnTeleport_Parms OnTeleport_Parms;
	OnTeleport_Parms.Action = Action;

	this->ProcessEvent ( pFnOnTeleport, &OnTeleport_Parms, NULL );
};

// Function SFXGame.BioPawn.GetSpecificFootStepEffect
// [0x00020102] 
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialFootSteps* FootStepMat                    ( CPF_Parm )
// int                            FootDown                       ( CPF_Parm )

class UParticleSystem* ABioPawn::GetSpecificFootStepEffect ( class USFXPhysicalMaterialFootSteps* FootStepMat, int FootDown )
{
	static UFunction* pFnGetSpecificFootStepEffect = NULL;

	if ( ! pFnGetSpecificFootStepEffect )
		pFnGetSpecificFootStepEffect = (UFunction*) UObject::GObjObjects()->Data[ 40398 ];

	ABioPawn_execGetSpecificFootStepEffect_Parms GetSpecificFootStepEffect_Parms;
	GetSpecificFootStepEffect_Parms.FootStepMat = FootStepMat;
	GetSpecificFootStepEffect_Parms.FootDown = FootDown;

	this->ProcessEvent ( pFnGetSpecificFootStepEffect, &GetSpecificFootStepEffect_Parms, NULL );

	return GetSpecificFootStepEffect_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetFootStepEffect
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )
// int                            FootDown                       ( CPF_Parm )

class UParticleSystem* ABioPawn::GetFootStepEffect ( class UPhysicalMaterial* PhysMat, int FootDown )
{
	static UFunction* pFnGetFootStepEffect = NULL;

	if ( ! pFnGetFootStepEffect )
		pFnGetFootStepEffect = (UFunction*) UObject::GObjObjects()->Data[ 40393 ];

	ABioPawn_execGetFootStepEffect_Parms GetFootStepEffect_Parms;
	GetFootStepEffect_Parms.PhysMat = PhysMat;
	GetFootStepEffect_Parms.FootDown = FootDown;

	this->ProcessEvent ( pFnGetFootStepEffect, &GetFootStepEffect_Parms, NULL );

	return GetFootStepEffect_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.PlayStepEffect
// [0x00820002] 
// Parameters infos:
// int                            FootDown                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// float                          Loudness                       ( CPF_Parm )

void ABioPawn::PlayStepEffect ( int FootDown, struct FTraceHitInfo HitInfo, float Loudness )
{
	static UFunction* pFnPlayStepEffect = NULL;

	if ( ! pFnPlayStepEffect )
		pFnPlayStepEffect = (UFunction*) UObject::GObjObjects()->Data[ 40384 ];

	ABioPawn_execPlayStepEffect_Parms PlayStepEffect_Parms;
	PlayStepEffect_Parms.FootDown = FootDown;
	memcpy ( &PlayStepEffect_Parms.HitInfo, &HitInfo, 0x1C );
	PlayStepEffect_Parms.Loudness = Loudness;

	this->ProcessEvent ( pFnPlayStepEffect, &PlayStepEffect_Parms, NULL );
};

// Function SFXGame.BioPawn.GetSpecificFootStepSound
// [0x00020002] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialFootSteps* FootStepSounds                 ( CPF_Parm )
// int                            FootDown                       ( CPF_Parm )

class UWwiseEvent* ABioPawn::GetSpecificFootStepSound ( class USFXPhysicalMaterialFootSteps* FootStepSounds, int FootDown )
{
	static UFunction* pFnGetSpecificFootStepSound = NULL;

	if ( ! pFnGetSpecificFootStepSound )
		pFnGetSpecificFootStepSound = (UFunction*) UObject::GObjObjects()->Data[ 40357 ];

	ABioPawn_execGetSpecificFootStepSound_Parms GetSpecificFootStepSound_Parms;
	GetSpecificFootStepSound_Parms.FootStepSounds = FootStepSounds;
	GetSpecificFootStepSound_Parms.FootDown = FootDown;

	this->ProcessEvent ( pFnGetSpecificFootStepSound, &GetSpecificFootStepSound_Parms, NULL );

	return GetSpecificFootStepSound_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetFootStepSound
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )
// int                            FootDown                       ( CPF_Parm )

class UWwiseEvent* ABioPawn::GetFootStepSound ( class UPhysicalMaterial* PhysMat, int FootDown )
{
	static UFunction* pFnGetFootStepSound = NULL;

	if ( ! pFnGetFootStepSound )
		pFnGetFootStepSound = (UFunction*) UObject::GObjObjects()->Data[ 40351 ];

	ABioPawn_execGetFootStepSound_Parms GetFootStepSound_Parms;
	GetFootStepSound_Parms.PhysMat = PhysMat;
	GetFootStepSound_Parms.FootDown = FootDown;

	this->ProcessEvent ( pFnGetFootStepSound, &GetFootStepSound_Parms, NULL );

	return GetFootStepSound_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.PlayStepSound
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            FootDown                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void ABioPawn::PlayStepSound ( int FootDown, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPlayStepSound = NULL;

	if ( ! pFnPlayStepSound )
		pFnPlayStepSound = (UFunction*) UObject::GObjObjects()->Data[ 40346 ];

	ABioPawn_execPlayStepSound_Parms PlayStepSound_Parms;
	PlayStepSound_Parms.FootDown = FootDown;
	memcpy ( &PlayStepSound_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnPlayStepSound, &PlayStepSound_Parms, NULL );
};

// Function SFXGame.BioPawn.PlayFootStepSound
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// int                            FootDown                       ( CPF_Parm )

void ABioPawn::eventPlayFootStepSound ( int FootDown )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = (UFunction*) UObject::GObjObjects()->Data[ 40334 ];

	ABioPawn_eventPlayFootStepSound_Parms PlayFootStepSound_Parms;
	PlayFootStepSound_Parms.FootDown = FootDown;

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function SFXGame.BioPawn.setHeadFaceFX
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void ABioPawn::eventsetHeadFaceFX ( )
{
	static UFunction* pFnsetHeadFaceFX = NULL;

	if ( ! pFnsetHeadFaceFX )
		pFnsetHeadFaceFX = (UFunction*) UObject::GObjObjects()->Data[ 40333 ];

	ABioPawn_eventsetHeadFaceFX_Parms setHeadFaceFX_Parms;

	pFnsetHeadFaceFX->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnsetHeadFaceFX, &setHeadFaceFX_Parms, NULL );

	pFnsetHeadFaceFX->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.SetScale
// [0x00020002] 
// Parameters infos:
// float                          fScale                         ( CPF_Parm )

void ABioPawn::SetScale ( float fScale )
{
	static UFunction* pFnSetScale = NULL;

	if ( ! pFnSetScale )
		pFnSetScale = (UFunction*) UObject::GObjObjects()->Data[ 40331 ];

	ABioPawn_execSetScale_Parms SetScale_Parms;
	SetScale_Parms.fScale = fScale;

	this->ProcessEvent ( pFnSetScale, &SetScale_Parms, NULL );
};

// Function SFXGame.BioPawn.ReleasePower
// [0x00020002] 
// Parameters infos:

void ABioPawn::ReleasePower ( )
{
	static UFunction* pFnReleasePower = NULL;

	if ( ! pFnReleasePower )
		pFnReleasePower = (UFunction*) UObject::GObjObjects()->Data[ 40330 ];

	ABioPawn_execReleasePower_Parms ReleasePower_Parms;

	this->ProcessEvent ( pFnReleasePower, &ReleasePower_Parms, NULL );
};

// Function SFXGame.BioPawn.GetFaction
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_OptionalParm | CPF_Parm )

unsigned char ABioPawn::GetFaction ( class APawn* Other )
{
	static UFunction* pFnGetFaction = NULL;

	if ( ! pFnGetFaction )
		pFnGetFaction = (UFunction*) UObject::GObjObjects()->Data[ 40327 ];

	ABioPawn_execGetFaction_Parms GetFaction_Parms;
	GetFaction_Parms.Other = Other;

	pFnGetFaction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFaction, &GetFaction_Parms, NULL );

	pFnGetFaction->FunctionFlags |= 0x400;

	return GetFaction_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsFriendly
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ABioPawn::IsFriendly ( class APawn* Other )
{
	static UFunction* pFnIsFriendly = NULL;

	if ( ! pFnIsFriendly )
		pFnIsFriendly = (UFunction*) UObject::GObjObjects()->Data[ 40324 ];

	ABioPawn_execIsFriendly_Parms IsFriendly_Parms;
	IsFriendly_Parms.Other = Other;

	pFnIsFriendly->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFriendly, &IsFriendly_Parms, NULL );

	pFnIsFriendly->FunctionFlags |= 0x400;

	return IsFriendly_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsHostile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   Other                          ( CPF_Parm )

bool ABioPawn::IsHostile ( class APawn* Other )
{
	static UFunction* pFnIsHostile = NULL;

	if ( ! pFnIsHostile )
		pFnIsHostile = (UFunction*) UObject::GObjObjects()->Data[ 40321 ];

	ABioPawn_execIsHostile_Parms IsHostile_Parms;
	IsHostile_Parms.Other = Other;

	pFnIsHostile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHostile, &IsHostile_Parms, NULL );

	pFnIsHostile->FunctionFlags |= 0x400;

	return IsHostile_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.DoReachedWaypointEvent
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPathPoint*           oPoint                         ( CPF_Parm )

bool ABioPawn::DoReachedWaypointEvent ( class ABioPathPoint* oPoint )
{
	static UFunction* pFnDoReachedWaypointEvent = NULL;

	if ( ! pFnDoReachedWaypointEvent )
		pFnDoReachedWaypointEvent = (UFunction*) UObject::GObjObjects()->Data[ 40314 ];

	ABioPawn_execDoReachedWaypointEvent_Parms DoReachedWaypointEvent_Parms;
	DoReachedWaypointEvent_Parms.oPoint = oPoint;

	this->ProcessEvent ( pFnDoReachedWaypointEvent, &DoReachedWaypointEvent_Parms, NULL );

	return DoReachedWaypointEvent_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.FinishAnimControl
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPawn::eventFinishAnimControl ( )
{
	static UFunction* pFnFinishAnimControl = NULL;

	if ( ! pFnFinishAnimControl )
		pFnFinishAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 40312 ];

	ABioPawn_eventFinishAnimControl_Parms FinishAnimControl_Parms;

	this->ProcessEvent ( pFnFinishAnimControl, &FinishAnimControl_Parms, NULL );
};

// Function SFXGame.BioPawn.SetAnimPosition
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   SlotName                       ( CPF_Parm )
// int                            ChannelIndex                   ( CPF_Parm )
// struct FName                   InAnimSeqName                  ( CPF_Parm )
// float                          InPosition                     ( CPF_Parm )
// unsigned long                  bFireNotifies                  ( CPF_Parm )
// unsigned long                  bLooping                       ( CPF_Parm )

void ABioPawn::eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping )
{
	static UFunction* pFnSetAnimPosition = NULL;

	if ( ! pFnSetAnimPosition )
		pFnSetAnimPosition = (UFunction*) UObject::GObjObjects()->Data[ 40304 ];

	ABioPawn_eventSetAnimPosition_Parms SetAnimPosition_Parms;
	memcpy ( &SetAnimPosition_Parms.SlotName, &SlotName, 0x8 );
	SetAnimPosition_Parms.ChannelIndex = ChannelIndex;
	memcpy ( &SetAnimPosition_Parms.InAnimSeqName, &InAnimSeqName, 0x8 );
	SetAnimPosition_Parms.InPosition = InPosition;
	SetAnimPosition_Parms.bFireNotifies = bFireNotifies;
	SetAnimPosition_Parms.bLooping = bLooping;

	this->ProcessEvent ( pFnSetAnimPosition, &SetAnimPosition_Parms, NULL );
};

// Function SFXGame.BioPawn.BeginAnimControl
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// TArray< class UAnimSet* >      InAnimSets                     ( CPF_Parm | CPF_NeedCtorLink )

void ABioPawn::eventBeginAnimControl ( TArray< class UAnimSet* > InAnimSets )
{
	static UFunction* pFnBeginAnimControl = NULL;

	if ( ! pFnBeginAnimControl )
		pFnBeginAnimControl = (UFunction*) UObject::GObjObjects()->Data[ 40299 ];

	ABioPawn_eventBeginAnimControl_Parms BeginAnimControl_Parms;
	memcpy ( &BeginAnimControl_Parms.InAnimSets, &InAnimSets, 0xC );

	this->ProcessEvent ( pFnBeginAnimControl, &BeginAnimControl_Parms, NULL );
};

// Function SFXGame.BioPawn.OnToggle
// [0x00020102] 
// Parameters infos:
// class USeqAct_Toggle*          Action                         ( CPF_Parm )

void ABioPawn::OnToggle ( class USeqAct_Toggle* Action )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = (UFunction*) UObject::GObjObjects()->Data[ 40296 ];

	ABioPawn_execOnToggle_Parms OnToggle_Parms;
	OnToggle_Parms.Action = Action;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function SFXGame.BioPawn.ClearUnregisteredAnimsets
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::ClearUnregisteredAnimsets ( )
{
	static UFunction* pFnClearUnregisteredAnimsets = NULL;

	if ( ! pFnClearUnregisteredAnimsets )
		pFnClearUnregisteredAnimsets = (UFunction*) UObject::GObjObjects()->Data[ 40295 ];

	ABioPawn_execClearUnregisteredAnimsets_Parms ClearUnregisteredAnimsets_Parms;

	pFnClearUnregisteredAnimsets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearUnregisteredAnimsets, &ClearUnregisteredAnimsets_Parms, NULL );

	pFnClearUnregisteredAnimsets->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.ClearRegisteredCustomAnimsets
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmSetGroupName                 ( CPF_Parm )

void ABioPawn::ClearRegisteredCustomAnimsets ( struct FName nmSetGroupName )
{
	static UFunction* pFnClearRegisteredCustomAnimsets = NULL;

	if ( ! pFnClearRegisteredCustomAnimsets )
		pFnClearRegisteredCustomAnimsets = (UFunction*) UObject::GObjObjects()->Data[ 40293 ];

	ABioPawn_execClearRegisteredCustomAnimsets_Parms ClearRegisteredCustomAnimsets_Parms;
	memcpy ( &ClearRegisteredCustomAnimsets_Parms.nmSetGroupName, &nmSetGroupName, 0x8 );

	pFnClearRegisteredCustomAnimsets->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearRegisteredCustomAnimsets, &ClearRegisteredCustomAnimsets_Parms, NULL );

	pFnClearRegisteredCustomAnimsets->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.RegisterCustomAnimset
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmSetGroupName                 ( CPF_Parm )
// class UAnimSet*                oAnim                          ( CPF_Parm )

void ABioPawn::RegisterCustomAnimset ( struct FName nmSetGroupName, class UAnimSet* oAnim )
{
	static UFunction* pFnRegisterCustomAnimset = NULL;

	if ( ! pFnRegisterCustomAnimset )
		pFnRegisterCustomAnimset = (UFunction*) UObject::GObjObjects()->Data[ 40290 ];

	ABioPawn_execRegisterCustomAnimset_Parms RegisterCustomAnimset_Parms;
	memcpy ( &RegisterCustomAnimset_Parms.nmSetGroupName, &nmSetGroupName, 0x8 );
	RegisterCustomAnimset_Parms.oAnim = oAnim;

	pFnRegisterCustomAnimset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterCustomAnimset, &RegisterCustomAnimset_Parms, NULL );

	pFnRegisterCustomAnimset->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.RanInto
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ABioPawn::eventRanInto ( class AActor* Other )
{
	static UFunction* pFnRanInto = NULL;

	if ( ! pFnRanInto )
		pFnRanInto = (UFunction*) UObject::GObjObjects()->Data[ 40288 ];

	ABioPawn_eventRanInto_Parms RanInto_Parms;
	RanInto_Parms.Other = Other;

	this->ProcessEvent ( pFnRanInto, &RanInto_Parms, NULL );
};

// Function SFXGame.BioPawn.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ABioPawn::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 40283 ];

	ABioPawn_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function SFXGame.BioPawn.StartCrouch
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void ABioPawn::eventStartCrouch ( float HeightAdjust )
{
	static UFunction* pFnStartCrouch = NULL;

	if ( ! pFnStartCrouch )
		pFnStartCrouch = (UFunction*) UObject::GObjObjects()->Data[ 40280 ];

	ABioPawn_eventStartCrouch_Parms StartCrouch_Parms;
	StartCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnStartCrouch, &StartCrouch_Parms, NULL );
};

// Function SFXGame.BioPawn.EndCrouch
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          HeightAdjust                   ( CPF_Parm )

void ABioPawn::eventEndCrouch ( float HeightAdjust )
{
	static UFunction* pFnEndCrouch = NULL;

	if ( ! pFnEndCrouch )
		pFnEndCrouch = (UFunction*) UObject::GObjObjects()->Data[ 40277 ];

	ABioPawn_eventEndCrouch_Parms EndCrouch_Parms;
	EndCrouch_Parms.HeightAdjust = HeightAdjust;

	this->ProcessEvent ( pFnEndCrouch, &EndCrouch_Parms, NULL );
};

// Function SFXGame.BioPawn.GetPlayerPawnConversationCloseupCameraHook
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ABioPawn::eventGetPlayerPawnConversationCloseupCameraHook ( )
{
	static UFunction* pFnGetPlayerPawnConversationCloseupCameraHook = NULL;

	if ( ! pFnGetPlayerPawnConversationCloseupCameraHook )
		pFnGetPlayerPawnConversationCloseupCameraHook = (UFunction*) UObject::GObjObjects()->Data[ 40274 ];

	ABioPawn_eventGetPlayerPawnConversationCloseupCameraHook_Parms GetPlayerPawnConversationCloseupCameraHook_Parms;

	this->ProcessEvent ( pFnGetPlayerPawnConversationCloseupCameraHook, &GetPlayerPawnConversationCloseupCameraHook_Parms, NULL );

	return GetPlayerPawnConversationCloseupCameraHook_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetDefaultHookOffset
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ABioPawn::eventGetDefaultHookOffset ( )
{
	static UFunction* pFnGetDefaultHookOffset = NULL;

	if ( ! pFnGetDefaultHookOffset )
		pFnGetDefaultHookOffset = (UFunction*) UObject::GObjObjects()->Data[ 40271 ];

	ABioPawn_eventGetDefaultHookOffset_Parms GetDefaultHookOffset_Parms;

	this->ProcessEvent ( pFnGetDefaultHookOffset, &GetDefaultHookOffset_Parms, NULL );

	return GetDefaultHookOffset_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetCameraHook
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   HookName                       ( CPF_Parm )

struct FVector ABioPawn::GetCameraHook ( struct FName HookName )
{
	static UFunction* pFnGetCameraHook = NULL;

	if ( ! pFnGetCameraHook )
		pFnGetCameraHook = (UFunction*) UObject::GObjObjects()->Data[ 40266 ];

	ABioPawn_execGetCameraHook_Parms GetCameraHook_Parms;
	memcpy ( &GetCameraHook_Parms.HookName, &HookName, 0x8 );

	this->ProcessEvent ( pFnGetCameraHook, &GetCameraHook_Parms, NULL );

	return GetCameraHook_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CalculateOffsetHook
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Hook                           ( CPF_Parm )
// struct FName                   Bone                           ( CPF_Parm )

struct FVector ABioPawn::CalculateOffsetHook ( struct FVector Hook, struct FName Bone )
{
	static UFunction* pFnCalculateOffsetHook = NULL;

	if ( ! pFnCalculateOffsetHook )
		pFnCalculateOffsetHook = (UFunction*) UObject::GObjObjects()->Data[ 32407 ];

	ABioPawn_execCalculateOffsetHook_Parms CalculateOffsetHook_Parms;
	memcpy ( &CalculateOffsetHook_Parms.Hook, &Hook, 0xC );
	memcpy ( &CalculateOffsetHook_Parms.Bone, &Bone, 0x8 );

	this->ProcessEvent ( pFnCalculateOffsetHook, &CalculateOffsetHook_Parms, NULL );

	return CalculateOffsetHook_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.NotifyRagdollRecoverAnimationComplete
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ABioPawn::eventNotifyRagdollRecoverAnimationComplete ( )
{
	static UFunction* pFnNotifyRagdollRecoverAnimationComplete = NULL;

	if ( ! pFnNotifyRagdollRecoverAnimationComplete )
		pFnNotifyRagdollRecoverAnimationComplete = (UFunction*) UObject::GObjObjects()->Data[ 40228 ];

	ABioPawn_eventNotifyRagdollRecoverAnimationComplete_Parms NotifyRagdollRecoverAnimationComplete_Parms;

	this->ProcessEvent ( pFnNotifyRagdollRecoverAnimationComplete, &NotifyRagdollRecoverAnimationComplete_Parms, NULL );
};

// Function SFXGame.BioPawn.ForceEndRagdoll
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ABioPawn::eventForceEndRagdoll ( )
{
	static UFunction* pFnForceEndRagdoll = NULL;

	if ( ! pFnForceEndRagdoll )
		pFnForceEndRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 40227 ];

	ABioPawn_eventForceEndRagdoll_Parms ForceEndRagdoll_Parms;

	this->ProcessEvent ( pFnForceEndRagdoll, &ForceEndRagdoll_Parms, NULL );
};

// Function SFXGame.BioPawn.OnEnterRagdoll
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPawn::eventOnEnterRagdoll ( )
{
	static UFunction* pFnOnEnterRagdoll = NULL;

	if ( ! pFnOnEnterRagdoll )
		pFnOnEnterRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 40226 ];

	ABioPawn_eventOnEnterRagdoll_Parms OnEnterRagdoll_Parms;

	this->ProcessEvent ( pFnOnEnterRagdoll, &OnEnterRagdoll_Parms, NULL );
};

// Function SFXGame.BioPawn.MoveToRagdollRecoverStartPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::MoveToRagdollRecoverStartPosition ( )
{
	static UFunction* pFnMoveToRagdollRecoverStartPosition = NULL;

	if ( ! pFnMoveToRagdollRecoverStartPosition )
		pFnMoveToRagdollRecoverStartPosition = (UFunction*) UObject::GObjObjects()->Data[ 40225 ];

	ABioPawn_execMoveToRagdollRecoverStartPosition_Parms MoveToRagdollRecoverStartPosition_Parms;

	pFnMoveToRagdollRecoverStartPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMoveToRagdollRecoverStartPosition, &MoveToRagdollRecoverStartPosition_Parms, NULL );

	pFnMoveToRagdollRecoverStartPosition->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.PostInitAnimTree
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ABioPawn::PostInitAnimTree ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = (UFunction*) UObject::GObjObjects()->Data[ 40223 ];

	ABioPawn_execPostInitAnimTree_Parms PostInitAnimTree_Parms;
	PostInitAnimTree_Parms.SkelComp = SkelComp;

	pFnPostInitAnimTree->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );

	pFnPostInitAnimTree->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.SetShouldCrouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bCrouch                        ( CPF_Parm )

void ABioPawn::eventSetShouldCrouch ( unsigned long bCrouch )
{
	static UFunction* pFnSetShouldCrouch = NULL;

	if ( ! pFnSetShouldCrouch )
		pFnSetShouldCrouch = (UFunction*) UObject::GObjObjects()->Data[ 40221 ];

	ABioPawn_eventSetShouldCrouch_Parms SetShouldCrouch_Parms;
	SetShouldCrouch_Parms.bCrouch = bCrouch;

	this->ProcessEvent ( pFnSetShouldCrouch, &SetShouldCrouch_Parms, NULL );
};

// Function SFXGame.BioPawn.OnSetPhysics
// [0x00020102] 
// Parameters infos:
// class USeqAct_SetPhysics*      Action                         ( CPF_Parm )

void ABioPawn::OnSetPhysics ( class USeqAct_SetPhysics* Action )
{
	static UFunction* pFnOnSetPhysics = NULL;

	if ( ! pFnOnSetPhysics )
		pFnOnSetPhysics = (UFunction*) UObject::GObjObjects()->Data[ 40219 ];

	ABioPawn_execOnSetPhysics_Parms OnSetPhysics_Parms;
	OnSetPhysics_Parms.Action = Action;

	this->ProcessEvent ( pFnOnSetPhysics, &OnSetPhysics_Parms, NULL );
};

// Function SFXGame.BioPawn.Destroyed
// [0x00020102] 
// Parameters infos:

void ABioPawn::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 40218 ];

	ABioPawn_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function SFXGame.BioPawn.CreateSelection
// [0x00020002] 
// Parameters infos:

void ABioPawn::CreateSelection ( )
{
	static UFunction* pFnCreateSelection = NULL;

	if ( ! pFnCreateSelection )
		pFnCreateSelection = (UFunction*) UObject::GObjObjects()->Data[ 40214 ];

	ABioPawn_execCreateSelection_Parms CreateSelection_Parms;

	this->ProcessEvent ( pFnCreateSelection, &CreateSelection_Parms, NULL );
};

// Function SFXGame.BioPawn.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ABioPawn::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 40211 ];

	ABioPawn_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.BioPawn.ForceHelmetVisibility
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bHelmetVisible                 ( CPF_Parm )

void ABioPawn::eventForceHelmetVisibility ( unsigned long bHelmetVisible )
{
	static UFunction* pFnForceHelmetVisibility = NULL;

	if ( ! pFnForceHelmetVisibility )
		pFnForceHelmetVisibility = (UFunction*) UObject::GObjObjects()->Data[ 40209 ];

	ABioPawn_eventForceHelmetVisibility_Parms ForceHelmetVisibility_Parms;
	ForceHelmetVisibility_Parms.bHelmetVisible = bHelmetVisible;

	this->ProcessEvent ( pFnForceHelmetVisibility, &ForceHelmetVisibility_Parms, NULL );
};

// Function SFXGame.BioPawn.EnsurePawnIsUpright
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::EnsurePawnIsUpright ( )
{
	static UFunction* pFnEnsurePawnIsUpright = NULL;

	if ( ! pFnEnsurePawnIsUpright )
		pFnEnsurePawnIsUpright = (UFunction*) UObject::GObjObjects()->Data[ 40208 ];

	ABioPawn_execEnsurePawnIsUpright_Parms EnsurePawnIsUpright_Parms;

	pFnEnsurePawnIsUpright->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnsurePawnIsUpright, &EnsurePawnIsUpright_Parms, NULL );

	pFnEnsurePawnIsUpright->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.GetClassification
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ABioPawn::GetClassification ( )
{
	static UFunction* pFnGetClassification = NULL;

	if ( ! pFnGetClassification )
		pFnGetClassification = (UFunction*) UObject::GObjObjects()->Data[ 40206 ];

	ABioPawn_execGetClassification_Parms GetClassification_Parms;

	pFnGetClassification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClassification, &GetClassification_Parms, NULL );

	pFnGetClassification->FunctionFlags |= 0x400;

	return GetClassification_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetClassification
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  a_eClassification              ( CPF_Parm )
// unsigned long                  a_bAsDefault                   ( CPF_OptionalParm | CPF_Parm )

void ABioPawn::SetClassification ( unsigned char a_eClassification, unsigned long a_bAsDefault )
{
	static UFunction* pFnSetClassification = NULL;

	if ( ! pFnSetClassification )
		pFnSetClassification = (UFunction*) UObject::GObjObjects()->Data[ 40203 ];

	ABioPawn_execSetClassification_Parms SetClassification_Parms;
	SetClassification_Parms.a_eClassification = a_eClassification;
	SetClassification_Parms.a_bAsDefault = a_bAsDefault;

	pFnSetClassification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetClassification, &SetClassification_Parms, NULL );

	pFnSetClassification->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.DroneStartLanding
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::DroneStartLanding ( )
{
	static UFunction* pFnDroneStartLanding = NULL;

	if ( ! pFnDroneStartLanding )
		pFnDroneStartLanding = (UFunction*) UObject::GObjObjects()->Data[ 40202 ];

	ABioPawn_execDroneStartLanding_Parms DroneStartLanding_Parms;

	pFnDroneStartLanding->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDroneStartLanding, &DroneStartLanding_Parms, NULL );

	pFnDroneStartLanding->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.DroneFinishedTakingOff
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::DroneFinishedTakingOff ( )
{
	static UFunction* pFnDroneFinishedTakingOff = NULL;

	if ( ! pFnDroneFinishedTakingOff )
		pFnDroneFinishedTakingOff = (UFunction*) UObject::GObjObjects()->Data[ 40201 ];

	ABioPawn_execDroneFinishedTakingOff_Parms DroneFinishedTakingOff_Parms;

	pFnDroneFinishedTakingOff->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDroneFinishedTakingOff, &DroneFinishedTakingOff_Parms, NULL );

	pFnDroneFinishedTakingOff->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.IsShowingHelmet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsShowingHelmet ( )
{
	static UFunction* pFnIsShowingHelmet = NULL;

	if ( ! pFnIsShowingHelmet )
		pFnIsShowingHelmet = (UFunction*) UObject::GObjObjects()->Data[ 40199 ];

	ABioPawn_execIsShowingHelmet_Parms IsShowingHelmet_Parms;

	pFnIsShowingHelmet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsShowingHelmet, &IsShowingHelmet_Parms, NULL );

	pFnIsShowingHelmet->FunctionFlags |= 0x400;

	return IsShowingHelmet_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsShowingFacePlate
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsShowingFacePlate ( )
{
	static UFunction* pFnIsShowingFacePlate = NULL;

	if ( ! pFnIsShowingFacePlate )
		pFnIsShowingFacePlate = (UFunction*) UObject::GObjObjects()->Data[ 40197 ];

	ABioPawn_execIsShowingFacePlate_Parms IsShowingFacePlate_Parms;

	pFnIsShowingFacePlate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsShowingFacePlate, &IsShowingFacePlate_Parms, NULL );

	pFnIsShowingFacePlate->FunctionFlags |= 0x400;

	return IsShowingFacePlate_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsShowingVisor
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsShowingVisor ( )
{
	static UFunction* pFnIsShowingVisor = NULL;

	if ( ! pFnIsShowingVisor )
		pFnIsShowingVisor = (UFunction*) UObject::GObjObjects()->Data[ 40195 ];

	ABioPawn_execIsShowingVisor_Parms IsShowingVisor_Parms;

	pFnIsShowingVisor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsShowingVisor, &IsShowingVisor_Parms, NULL );

	pFnIsShowingVisor->FunctionFlags |= 0x400;

	return IsShowingVisor_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.RequestHelmetVisible
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void ABioPawn::RequestHelmetVisible ( unsigned long B )
{
	static UFunction* pFnRequestHelmetVisible = NULL;

	if ( ! pFnRequestHelmetVisible )
		pFnRequestHelmetVisible = (UFunction*) UObject::GObjObjects()->Data[ 40193 ];

	ABioPawn_execRequestHelmetVisible_Parms RequestHelmetVisible_Parms;
	RequestHelmetVisible_Parms.B = B;

	pFnRequestHelmetVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestHelmetVisible, &RequestHelmetVisible_Parms, NULL );

	pFnRequestHelmetVisible->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.RequestFacePlateVisible
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void ABioPawn::RequestFacePlateVisible ( unsigned long B )
{
	static UFunction* pFnRequestFacePlateVisible = NULL;

	if ( ! pFnRequestFacePlateVisible )
		pFnRequestFacePlateVisible = (UFunction*) UObject::GObjObjects()->Data[ 40191 ];

	ABioPawn_execRequestFacePlateVisible_Parms RequestFacePlateVisible_Parms;
	RequestFacePlateVisible_Parms.B = B;

	pFnRequestFacePlateVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestFacePlateVisible, &RequestFacePlateVisible_Parms, NULL );

	pFnRequestFacePlateVisible->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.RequestVisorVisible
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void ABioPawn::RequestVisorVisible ( unsigned long B )
{
	static UFunction* pFnRequestVisorVisible = NULL;

	if ( ! pFnRequestVisorVisible )
		pFnRequestVisorVisible = (UFunction*) UObject::GObjObjects()->Data[ 40189 ];

	ABioPawn_execRequestVisorVisible_Parms RequestVisorVisible_Parms;
	RequestVisorVisible_Parms.B = B;

	pFnRequestVisorVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestVisorVisible, &RequestVisorVisible_Parms, NULL );

	pFnRequestVisorVisible->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.OverrideHeadGearVisibility
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void ABioPawn::OverrideHeadGearVisibility ( unsigned long B )
{
	static UFunction* pFnOverrideHeadGearVisibility = NULL;

	if ( ! pFnOverrideHeadGearVisibility )
		pFnOverrideHeadGearVisibility = (UFunction*) UObject::GObjObjects()->Data[ 40187 ];

	ABioPawn_execOverrideHeadGearVisibility_Parms OverrideHeadGearVisibility_Parms;
	OverrideHeadGearVisibility_Parms.B = B;

	pFnOverrideHeadGearVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOverrideHeadGearVisibility, &OverrideHeadGearVisibility_Parms, NULL );

	pFnOverrideHeadGearVisibility->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.IsHeadGearVisiblePreferenceRelevant
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsHeadGearVisiblePreferenceRelevant ( )
{
	static UFunction* pFnIsHeadGearVisiblePreferenceRelevant = NULL;

	if ( ! pFnIsHeadGearVisiblePreferenceRelevant )
		pFnIsHeadGearVisiblePreferenceRelevant = (UFunction*) UObject::GObjObjects()->Data[ 40185 ];

	ABioPawn_execIsHeadGearVisiblePreferenceRelevant_Parms IsHeadGearVisiblePreferenceRelevant_Parms;

	pFnIsHeadGearVisiblePreferenceRelevant->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHeadGearVisiblePreferenceRelevant, &IsHeadGearVisiblePreferenceRelevant_Parms, NULL );

	pFnIsHeadGearVisiblePreferenceRelevant->FunctionFlags |= 0x400;

	return IsHeadGearVisiblePreferenceRelevant_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetHeadGearVisiblePreference
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::GetHeadGearVisiblePreference ( )
{
	static UFunction* pFnGetHeadGearVisiblePreference = NULL;

	if ( ! pFnGetHeadGearVisiblePreference )
		pFnGetHeadGearVisiblePreference = (UFunction*) UObject::GObjObjects()->Data[ 40183 ];

	ABioPawn_execGetHeadGearVisiblePreference_Parms GetHeadGearVisiblePreference_Parms;

	pFnGetHeadGearVisiblePreference->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHeadGearVisiblePreference, &GetHeadGearVisiblePreference_Parms, NULL );

	pFnGetHeadGearVisiblePreference->FunctionFlags |= 0x400;

	return GetHeadGearVisiblePreference_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetHeadGearVisiblePreference
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void ABioPawn::SetHeadGearVisiblePreference ( unsigned long B )
{
	static UFunction* pFnSetHeadGearVisiblePreference = NULL;

	if ( ! pFnSetHeadGearVisiblePreference )
		pFnSetHeadGearVisiblePreference = (UFunction*) UObject::GObjObjects()->Data[ 40181 ];

	ABioPawn_execSetHeadGearVisiblePreference_Parms SetHeadGearVisiblePreference_Parms;
	SetHeadGearVisiblePreference_Parms.B = B;

	pFnSetHeadGearVisiblePreference->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHeadGearVisiblePreference, &SetHeadGearVisiblePreference_Parms, NULL );

	pFnSetHeadGearVisiblePreference->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.RestoreCachedHeadGearVisibilityOverride
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ABioPawn::RestoreCachedHeadGearVisibilityOverride ( )
{
	static UFunction* pFnRestoreCachedHeadGearVisibilityOverride = NULL;

	if ( ! pFnRestoreCachedHeadGearVisibilityOverride )
		pFnRestoreCachedHeadGearVisibilityOverride = (UFunction*) UObject::GObjObjects()->Data[ 40180 ];

	ABioPawn_execRestoreCachedHeadGearVisibilityOverride_Parms RestoreCachedHeadGearVisibilityOverride_Parms;

	pFnRestoreCachedHeadGearVisibilityOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRestoreCachedHeadGearVisibilityOverride, &RestoreCachedHeadGearVisibilityOverride_Parms, NULL );

	pFnRestoreCachedHeadGearVisibilityOverride->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.CacheHeadGearVisibilityOverride
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ABioPawn::CacheHeadGearVisibilityOverride ( )
{
	static UFunction* pFnCacheHeadGearVisibilityOverride = NULL;

	if ( ! pFnCacheHeadGearVisibilityOverride )
		pFnCacheHeadGearVisibilityOverride = (UFunction*) UObject::GObjObjects()->Data[ 40179 ];

	ABioPawn_execCacheHeadGearVisibilityOverride_Parms CacheHeadGearVisibilityOverride_Parms;

	pFnCacheHeadGearVisibilityOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheHeadGearVisibilityOverride, &CacheHeadGearVisibilityOverride_Parms, NULL );

	pFnCacheHeadGearVisibilityOverride->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.SafeSetLocation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 vDest                          ( CPF_Parm )

void ABioPawn::SafeSetLocation ( struct FVector vDest )
{
	static UFunction* pFnSafeSetLocation = NULL;

	if ( ! pFnSafeSetLocation )
		pFnSafeSetLocation = (UFunction*) UObject::GObjObjects()->Data[ 40177 ];

	ABioPawn_execSafeSetLocation_Parms SafeSetLocation_Parms;
	memcpy ( &SafeSetLocation_Parms.vDest, &vDest, 0xC );

	pFnSafeSetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSafeSetLocation, &SafeSetLocation_Parms, NULL );

	pFnSafeSetLocation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.PlayFaceFX
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 AnimGroup                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 AnimSeq                        ( CPF_Parm | CPF_NeedCtorLink )

bool ABioPawn::PlayFaceFX ( struct FString AnimGroup, struct FString AnimSeq )
{
	static UFunction* pFnPlayFaceFX = NULL;

	if ( ! pFnPlayFaceFX )
		pFnPlayFaceFX = (UFunction*) UObject::GObjObjects()->Data[ 40173 ];

	ABioPawn_execPlayFaceFX_Parms PlayFaceFX_Parms;
	memcpy ( &PlayFaceFX_Parms.AnimGroup, &AnimGroup, 0xC );
	memcpy ( &PlayFaceFX_Parms.AnimSeq, &AnimSeq, 0xC );

	pFnPlayFaceFX->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayFaceFX, &PlayFaceFX_Parms, NULL );

	pFnPlayFaceFX->FunctionFlags |= 0x400;

	return PlayFaceFX_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetDefaultFaceFXAsset
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::SetDefaultFaceFXAsset ( )
{
	static UFunction* pFnSetDefaultFaceFXAsset = NULL;

	if ( ! pFnSetDefaultFaceFXAsset )
		pFnSetDefaultFaceFXAsset = (UFunction*) UObject::GObjObjects()->Data[ 40171 ];

	ABioPawn_execSetDefaultFaceFXAsset_Parms SetDefaultFaceFXAsset_Parms;

	pFnSetDefaultFaceFXAsset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDefaultFaceFXAsset, &SetDefaultFaceFXAsset_Parms, NULL );

	pFnSetDefaultFaceFXAsset->FunctionFlags |= 0x400;

	return SetDefaultFaceFXAsset_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.RequestHidden
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  B                              ( CPF_Const | CPF_Parm )

void ABioPawn::RequestHidden ( unsigned long B )
{
	static UFunction* pFnRequestHidden = NULL;

	if ( ! pFnRequestHidden )
		pFnRequestHidden = (UFunction*) UObject::GObjObjects()->Data[ 40169 ];

	ABioPawn_execRequestHidden_Parms RequestHidden_Parms;
	RequestHidden_Parms.B = B;

	pFnRequestHidden->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestHidden, &RequestHidden_Parms, NULL );

	pFnRequestHidden->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.SetLookAtTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// unsigned char                  a_eTransition                  ( CPF_OptionalParm | CPF_Parm )
// int                            nRank                          ( CPF_OptionalParm | CPF_Parm )

void ABioPawn::SetLookAtTarget ( class AActor* oTarget, unsigned char a_eTransition, int nRank )
{
	static UFunction* pFnSetLookAtTarget = NULL;

	if ( ! pFnSetLookAtTarget )
		pFnSetLookAtTarget = (UFunction*) UObject::GObjObjects()->Data[ 40165 ];

	ABioPawn_execSetLookAtTarget_Parms SetLookAtTarget_Parms;
	SetLookAtTarget_Parms.oTarget = oTarget;
	SetLookAtTarget_Parms.a_eTransition = a_eTransition;
	SetLookAtTarget_Parms.nRank = nRank;

	pFnSetLookAtTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLookAtTarget, &SetLookAtTarget_Parms, NULL );

	pFnSetLookAtTarget->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.SetAmbientLookAtTarget
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// int                            nRank                          ( CPF_OptionalParm | CPF_Parm )

void ABioPawn::SetAmbientLookAtTarget ( class AActor* oTarget, int nRank )
{
	static UFunction* pFnSetAmbientLookAtTarget = NULL;

	if ( ! pFnSetAmbientLookAtTarget )
		pFnSetAmbientLookAtTarget = (UFunction*) UObject::GObjObjects()->Data[ 40162 ];

	ABioPawn_execSetAmbientLookAtTarget_Parms SetAmbientLookAtTarget_Parms;
	SetAmbientLookAtTarget_Parms.oTarget = oTarget;
	SetAmbientLookAtTarget_Parms.nRank = nRank;

	pFnSetAmbientLookAtTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAmbientLookAtTarget, &SetAmbientLookAtTarget_Parms, NULL );

	pFnSetAmbientLookAtTarget->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.ExploreMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDelaySeconds                  ( CPF_OptionalParm | CPF_Parm )

bool ABioPawn::ExploreMode ( float fDelaySeconds )
{
	static UFunction* pFnExploreMode = NULL;

	if ( ! pFnExploreMode )
		pFnExploreMode = (UFunction*) UObject::GObjObjects()->Data[ 40159 ];

	ABioPawn_execExploreMode_Parms ExploreMode_Parms;
	ExploreMode_Parms.fDelaySeconds = fDelaySeconds;

	pFnExploreMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExploreMode, &ExploreMode_Parms, NULL );

	pFnExploreMode->FunctionFlags |= 0x400;

	return ExploreMode_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.ReadyMode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDelaySeconds                  ( CPF_OptionalParm | CPF_Parm )

bool ABioPawn::ReadyMode ( float fDelaySeconds )
{
	static UFunction* pFnReadyMode = NULL;

	if ( ! pFnReadyMode )
		pFnReadyMode = (UFunction*) UObject::GObjObjects()->Data[ 40156 ];

	ABioPawn_execReadyMode_Parms ReadyMode_Parms;
	ReadyMode_Parms.fDelaySeconds = fDelaySeconds;

	pFnReadyMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReadyMode, &ReadyMode_Parms, NULL );

	pFnReadyMode->FunctionFlags |= 0x400;

	return ReadyMode_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetFractionOfEffectsMaterialEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ABioPawn::GetFractionOfEffectsMaterialEnabled ( )
{
	static UFunction* pFnGetFractionOfEffectsMaterialEnabled = NULL;

	if ( ! pFnGetFractionOfEffectsMaterialEnabled )
		pFnGetFractionOfEffectsMaterialEnabled = (UFunction*) UObject::GObjObjects()->Data[ 40154 ];

	ABioPawn_execGetFractionOfEffectsMaterialEnabled_Parms GetFractionOfEffectsMaterialEnabled_Parms;

	pFnGetFractionOfEffectsMaterialEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFractionOfEffectsMaterialEnabled, &GetFractionOfEffectsMaterialEnabled_Parms, NULL );

	pFnGetFractionOfEffectsMaterialEnabled->FunctionFlags |= 0x400;

	return GetFractionOfEffectsMaterialEnabled_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetFractionOfEffectsMaterialEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          FractionEnabled                ( CPF_Parm )

void ABioPawn::SetFractionOfEffectsMaterialEnabled ( float FractionEnabled )
{
	static UFunction* pFnSetFractionOfEffectsMaterialEnabled = NULL;

	if ( ! pFnSetFractionOfEffectsMaterialEnabled )
		pFnSetFractionOfEffectsMaterialEnabled = (UFunction*) UObject::GObjObjects()->Data[ 40152 ];

	ABioPawn_execSetFractionOfEffectsMaterialEnabled_Parms SetFractionOfEffectsMaterialEnabled_Parms;
	SetFractionOfEffectsMaterialEnabled_Parms.FractionEnabled = FractionEnabled;

	pFnSetFractionOfEffectsMaterialEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFractionOfEffectsMaterialEnabled, &SetFractionOfEffectsMaterialEnabled_Parms, NULL );

	pFnSetFractionOfEffectsMaterialEnabled->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.GetEffectsMaterialType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USkeletalMeshComponent*  Component                      ( CPF_OptionalParm | CPF_Parm | CPF_EditInline )

struct FName ABioPawn::GetEffectsMaterialType ( class USkeletalMeshComponent* Component )
{
	static UFunction* pFnGetEffectsMaterialType = NULL;

	if ( ! pFnGetEffectsMaterialType )
		pFnGetEffectsMaterialType = (UFunction*) UObject::GObjObjects()->Data[ 40149 ];

	ABioPawn_execGetEffectsMaterialType_Parms GetEffectsMaterialType_Parms;
	GetEffectsMaterialType_Parms.Component = Component;

	pFnGetEffectsMaterialType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEffectsMaterialType, &GetEffectsMaterialType_Parms, NULL );

	pFnGetEffectsMaterialType->FunctionFlags |= 0x400;

	return GetEffectsMaterialType_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetEffectsMaterialType
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   EffectsMaterialType            ( CPF_Parm )

void ABioPawn::SetEffectsMaterialType ( struct FName EffectsMaterialType )
{
	static UFunction* pFnSetEffectsMaterialType = NULL;

	if ( ! pFnSetEffectsMaterialType )
		pFnSetEffectsMaterialType = (UFunction*) UObject::GObjObjects()->Data[ 40147 ];

	ABioPawn_execSetEffectsMaterialType_Parms SetEffectsMaterialType_Parms;
	memcpy ( &SetEffectsMaterialType_Parms.EffectsMaterialType, &EffectsMaterialType, 0x8 );

	pFnSetEffectsMaterialType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetEffectsMaterialType, &SetEffectsMaterialType_Parms, NULL );

	pFnSetEffectsMaterialType->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.AnimNodeBlendComplete
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   sBlendName                     ( CPF_Parm )
// int                            nChild                         ( CPF_Parm )

void ABioPawn::AnimNodeBlendComplete ( struct FName sBlendName, int nChild )
{
	static UFunction* pFnAnimNodeBlendComplete = NULL;

	if ( ! pFnAnimNodeBlendComplete )
		pFnAnimNodeBlendComplete = (UFunction*) UObject::GObjObjects()->Data[ 40144 ];

	ABioPawn_execAnimNodeBlendComplete_Parms AnimNodeBlendComplete_Parms;
	memcpy ( &AnimNodeBlendComplete_Parms.sBlendName, &sBlendName, 0x8 );
	AnimNodeBlendComplete_Parms.nChild = nChild;

	pFnAnimNodeBlendComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimNodeBlendComplete, &AnimNodeBlendComplete_Parms, NULL );

	pFnAnimNodeBlendComplete->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.AnimNodePlayFinished
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   sBlendName                     ( CPF_Parm )

void ABioPawn::AnimNodePlayFinished ( struct FName sBlendName )
{
	static UFunction* pFnAnimNodePlayFinished = NULL;

	if ( ! pFnAnimNodePlayFinished )
		pFnAnimNodePlayFinished = (UFunction*) UObject::GObjObjects()->Data[ 40142 ];

	ABioPawn_execAnimNodePlayFinished_Parms AnimNodePlayFinished_Parms;
	memcpy ( &AnimNodePlayFinished_Parms.sBlendName, &sBlendName, 0x8 );

	pFnAnimNodePlayFinished->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimNodePlayFinished, &AnimNodePlayFinished_Parms, NULL );

	pFnAnimNodePlayFinished->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.CanPlayAnimNode
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   sBlendName                     ( CPF_Parm )
// int                            nFlags                         ( CPF_Parm )
// float                          fWeight                        ( CPF_Parm | CPF_OutParm )

bool ABioPawn::CanPlayAnimNode ( struct FName sBlendName, int nFlags, float* fWeight )
{
	static UFunction* pFnCanPlayAnimNode = NULL;

	if ( ! pFnCanPlayAnimNode )
		pFnCanPlayAnimNode = (UFunction*) UObject::GObjObjects()->Data[ 40137 ];

	ABioPawn_execCanPlayAnimNode_Parms CanPlayAnimNode_Parms;
	memcpy ( &CanPlayAnimNode_Parms.sBlendName, &sBlendName, 0x8 );
	CanPlayAnimNode_Parms.nFlags = nFlags;

	pFnCanPlayAnimNode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanPlayAnimNode, &CanPlayAnimNode_Parms, NULL );

	pFnCanPlayAnimNode->FunctionFlags |= 0x400;

	if ( fWeight )
		*fWeight = CanPlayAnimNode_Parms.fWeight;

	return CanPlayAnimNode_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetAnimLengthAndPos
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   sAnimName                      ( CPF_Parm )
// float                          fAnimLength                    ( CPF_Parm | CPF_OutParm )
// float                          fAnimPos                       ( CPF_Parm | CPF_OutParm )

bool ABioPawn::GetAnimLengthAndPos ( struct FName sAnimName, float* fAnimLength, float* fAnimPos )
{
	static UFunction* pFnGetAnimLengthAndPos = NULL;

	if ( ! pFnGetAnimLengthAndPos )
		pFnGetAnimLengthAndPos = (UFunction*) UObject::GObjObjects()->Data[ 40132 ];

	ABioPawn_execGetAnimLengthAndPos_Parms GetAnimLengthAndPos_Parms;
	memcpy ( &GetAnimLengthAndPos_Parms.sAnimName, &sAnimName, 0x8 );

	pFnGetAnimLengthAndPos->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimLengthAndPos, &GetAnimLengthAndPos_Parms, NULL );

	pFnGetAnimLengthAndPos->FunctionFlags |= 0x400;

	if ( fAnimLength )
		*fAnimLength = GetAnimLengthAndPos_Parms.fAnimLength;

	if ( fAnimPos )
		*fAnimPos = GetAnimLengthAndPos_Parms.fAnimPos;

	return GetAnimLengthAndPos_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.RequestTurnInPlace
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FRotator                rDesDir                        ( CPF_Parm )

bool ABioPawn::RequestTurnInPlace ( struct FRotator rDesDir )
{
	static UFunction* pFnRequestTurnInPlace = NULL;

	if ( ! pFnRequestTurnInPlace )
		pFnRequestTurnInPlace = (UFunction*) UObject::GObjObjects()->Data[ 40129 ];

	ABioPawn_execRequestTurnInPlace_Parms RequestTurnInPlace_Parms;
	memcpy ( &RequestTurnInPlace_Parms.rDesDir, &rDesDir, 0xC );

	pFnRequestTurnInPlace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestTurnInPlace, &RequestTurnInPlace_Parms, NULL );

	pFnRequestTurnInPlace->FunctionFlags |= 0x400;

	return RequestTurnInPlace_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetRotationRate
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// int                            nPitch                         ( CPF_Parm | CPF_OutParm )
// int                            nYaw                           ( CPF_Parm | CPF_OutParm )
// int                            nRoll                          ( CPF_Parm | CPF_OutParm )

void ABioPawn::GetRotationRate ( int* nPitch, int* nYaw, int* nRoll )
{
	static UFunction* pFnGetRotationRate = NULL;

	if ( ! pFnGetRotationRate )
		pFnGetRotationRate = (UFunction*) UObject::GObjObjects()->Data[ 40125 ];

	ABioPawn_execGetRotationRate_Parms GetRotationRate_Parms;

	pFnGetRotationRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRotationRate, &GetRotationRate_Parms, NULL );

	pFnGetRotationRate->FunctionFlags |= 0x400;

	if ( nPitch )
		*nPitch = GetRotationRate_Parms.nPitch;

	if ( nYaw )
		*nYaw = GetRotationRate_Parms.nYaw;

	if ( nRoll )
		*nRoll = GetRotationRate_Parms.nRoll;
};

// Function SFXGame.BioPawn.SetDesiredRotation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FRotator                rDesiredRotation               ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

void ABioPawn::SetDesiredRotation ( struct FRotator rDesiredRotation, unsigned long bForce )
{
	static UFunction* pFnSetDesiredRotation = NULL;

	if ( ! pFnSetDesiredRotation )
		pFnSetDesiredRotation = (UFunction*) UObject::GObjObjects()->Data[ 40122 ];

	ABioPawn_execSetDesiredRotation_Parms SetDesiredRotation_Parms;
	memcpy ( &SetDesiredRotation_Parms.rDesiredRotation, &rDesiredRotation, 0xC );
	SetDesiredRotation_Parms.bForce = bForce;

	pFnSetDesiredRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDesiredRotation, &SetDesiredRotation_Parms, NULL );

	pFnSetDesiredRotation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.StopMovement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bStopRotation                  ( CPF_OptionalParm | CPF_Parm )

void ABioPawn::StopMovement ( unsigned long bStopRotation )
{
	static UFunction* pFnStopMovement = NULL;

	if ( ! pFnStopMovement )
		pFnStopMovement = (UFunction*) UObject::GObjObjects()->Data[ 36970 ];

	ABioPawn_execStopMovement_Parms StopMovement_Parms;
	StopMovement_Parms.bStopRotation = bStopRotation;

	pFnStopMovement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopMovement, &StopMovement_Parms, NULL );

	pFnStopMovement->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.GetWalkingSpeedMode
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ABioPawn::GetWalkingSpeedMode ( )
{
	static UFunction* pFnGetWalkingSpeedMode = NULL;

	if ( ! pFnGetWalkingSpeedMode )
		pFnGetWalkingSpeedMode = (UFunction*) UObject::GObjObjects()->Data[ 40119 ];

	ABioPawn_execGetWalkingSpeedMode_Parms GetWalkingSpeedMode_Parms;

	pFnGetWalkingSpeedMode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWalkingSpeedMode, &GetWalkingSpeedMode_Parms, NULL );

	pFnGetWalkingSpeedMode->FunctionFlags |= 0x400;

	return GetWalkingSpeedMode_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsWalking
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsWalking ( )
{
	static UFunction* pFnIsWalking = NULL;

	if ( ! pFnIsWalking )
		pFnIsWalking = (UFunction*) UObject::GObjObjects()->Data[ 40117 ];

	ABioPawn_execIsWalking_Parms IsWalking_Parms;

	pFnIsWalking->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsWalking, &IsWalking_Parms, NULL );

	pFnIsWalking->FunctionFlags |= 0x400;

	return IsWalking_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CanRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::CanRagdoll ( )
{
	static UFunction* pFnCanRagdoll = NULL;

	if ( ! pFnCanRagdoll )
		pFnCanRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 40115 ];

	ABioPawn_execCanRagdoll_Parms CanRagdoll_Parms;

	pFnCanRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanRagdoll, &CanRagdoll_Parms, NULL );

	pFnCanRagdoll->FunctionFlags |= 0x400;

	return CanRagdoll_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.TermRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::TermRagdoll ( )
{
	static UFunction* pFnTermRagdoll = NULL;

	if ( ! pFnTermRagdoll )
		pFnTermRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 40113 ];

	ABioPawn_execTermRagdoll_Parms TermRagdoll_Parms;

	pFnTermRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTermRagdoll, &TermRagdoll_Parms, NULL );

	pFnTermRagdoll->FunctionFlags |= 0x400;

	return TermRagdoll_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.InitRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::InitRagdoll ( )
{
	static UFunction* pFnInitRagdoll = NULL;

	if ( ! pFnInitRagdoll )
		pFnInitRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 40111 ];

	ABioPawn_execInitRagdoll_Parms InitRagdoll_Parms;

	pFnInitRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitRagdoll, &InitRagdoll_Parms, NULL );

	pFnInitRagdoll->FunctionFlags |= 0x400;

	return InitRagdoll_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsInvisible
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsInvisible ( )
{
	static UFunction* pFnIsInvisible = NULL;

	if ( ! pFnIsInvisible )
		pFnIsInvisible = (UFunction*) UObject::GObjObjects()->Data[ 40109 ];

	ABioPawn_execIsInvisible_Parms IsInvisible_Parms;

	pFnIsInvisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInvisible, &IsInvisible_Parms, NULL );

	pFnIsInvisible->FunctionFlags |= 0x400;

	return IsInvisible_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.UnapplyMaterialParameters
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioMaterialOverride*    pMaterialParameters            ( CPF_Parm )

void ABioPawn::UnapplyMaterialParameters ( class UBioMaterialOverride* pMaterialParameters )
{
	static UFunction* pFnUnapplyMaterialParameters = NULL;

	if ( ! pFnUnapplyMaterialParameters )
		pFnUnapplyMaterialParameters = (UFunction*) UObject::GObjObjects()->Data[ 40107 ];

	ABioPawn_execUnapplyMaterialParameters_Parms UnapplyMaterialParameters_Parms;
	UnapplyMaterialParameters_Parms.pMaterialParameters = pMaterialParameters;

	pFnUnapplyMaterialParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapplyMaterialParameters, &UnapplyMaterialParameters_Parms, NULL );

	pFnUnapplyMaterialParameters->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.ApplyMaterialParameters
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioMaterialOverride*    pMaterialParameters            ( CPF_Parm )

void ABioPawn::ApplyMaterialParameters ( class UBioMaterialOverride* pMaterialParameters )
{
	static UFunction* pFnApplyMaterialParameters = NULL;

	if ( ! pFnApplyMaterialParameters )
		pFnApplyMaterialParameters = (UFunction*) UObject::GObjObjects()->Data[ 40105 ];

	ABioPawn_execApplyMaterialParameters_Parms ApplyMaterialParameters_Parms;
	ApplyMaterialParameters_Parms.pMaterialParameters = pMaterialParameters;

	pFnApplyMaterialParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyMaterialParameters, &ApplyMaterialParameters_Parms, NULL );

	pFnApplyMaterialParameters->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.SetTextureParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// class UTexture*                Value                          ( CPF_Parm )

void ABioPawn::SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value )
{
	static UFunction* pFnSetTextureParameterValue = NULL;

	if ( ! pFnSetTextureParameterValue )
		pFnSetTextureParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 40102 ];

	ABioPawn_execSetTextureParameterValue_Parms SetTextureParameterValue_Parms;
	memcpy ( &SetTextureParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetTextureParameterValue_Parms.Value = Value;

	pFnSetTextureParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextureParameterValue, &SetTextureParameterValue_Parms, NULL );

	pFnSetTextureParameterValue->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.SetScalarParameterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// float                          Value                          ( CPF_Parm )

void ABioPawn::SetScalarParameterValue ( struct FName ParameterName, float Value )
{
	static UFunction* pFnSetScalarParameterValue = NULL;

	if ( ! pFnSetScalarParameterValue )
		pFnSetScalarParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 40099 ];

	ABioPawn_execSetScalarParameterValue_Parms SetScalarParameterValue_Parms;
	memcpy ( &SetScalarParameterValue_Parms.ParameterName, &ParameterName, 0x8 );
	SetScalarParameterValue_Parms.Value = Value;

	pFnSetScalarParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetScalarParameterValue, &SetScalarParameterValue_Parms, NULL );

	pFnSetScalarParameterValue->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.SetVectorParameterValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ParameterName                  ( CPF_Parm )
// struct FColor                  Value                          ( CPF_Const | CPF_Parm | CPF_OutParm )

void ABioPawn::SetVectorParameterValue ( struct FName ParameterName, struct FColor* Value )
{
	static UFunction* pFnSetVectorParameterValue = NULL;

	if ( ! pFnSetVectorParameterValue )
		pFnSetVectorParameterValue = (UFunction*) UObject::GObjObjects()->Data[ 40096 ];

	ABioPawn_execSetVectorParameterValue_Parms SetVectorParameterValue_Parms;
	memcpy ( &SetVectorParameterValue_Parms.ParameterName, &ParameterName, 0x8 );

	pFnSetVectorParameterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVectorParameterValue, &SetVectorParameterValue_Parms, NULL );

	pFnSetVectorParameterValue->FunctionFlags |= 0x400;

	if ( Value )
		memcpy ( Value, &SetVectorParameterValue_Parms.Value, 0x4 );
};

// Function SFXGame.BioPawn.OnCastAt
// [0x00020002] 
// Parameters infos:
// class APawn*                   oAttacker                      ( CPF_Parm )
// class USFXPower*               Power                          ( CPF_Parm )

void ABioPawn::OnCastAt ( class APawn* oAttacker, class USFXPower* Power )
{
	static UFunction* pFnOnCastAt = NULL;

	if ( ! pFnOnCastAt )
		pFnOnCastAt = (UFunction*) UObject::GObjObjects()->Data[ 40089 ];

	ABioPawn_execOnCastAt_Parms OnCastAt_Parms;
	OnCastAt_Parms.oAttacker = oAttacker;
	OnCastAt_Parms.Power = Power;

	this->ProcessEvent ( pFnOnCastAt, &OnCastAt_Parms, NULL );
};

// Function SFXGame.BioPawn.OnAttacked
// [0x00020002] 
// Parameters infos:
// class APawn*                   oAttacker                      ( CPF_Parm )
// struct FName                   WeaponName                     ( CPF_Parm )

void ABioPawn::OnAttacked ( class APawn* oAttacker, struct FName WeaponName )
{
	static UFunction* pFnOnAttacked = NULL;

	if ( ! pFnOnAttacked )
		pFnOnAttacked = (UFunction*) UObject::GObjObjects()->Data[ 40084 ];

	ABioPawn_execOnAttacked_Parms OnAttacked_Parms;
	OnAttacked_Parms.oAttacker = oAttacker;
	memcpy ( &OnAttacked_Parms.WeaponName, &WeaponName, 0x8 );

	this->ProcessEvent ( pFnOnAttacked, &OnAttacked_Parms, NULL );
};

// Function SFXGame.BioPawn.TakeDamage
// [0x00020002] 
// Parameters infos:
// float                          DamageAmount                   ( CPF_Parm )
// class AController*             EventInstigator                ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ABioPawn::TakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 40073 ];

	ABioPawn_execTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.DamageAmount = DamageAmount;
	TakeDamage_Parms.EventInstigator = EventInstigator;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function SFXGame.BioPawn.NotifyFallingAnimationComplete
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ABioPawn::eventNotifyFallingAnimationComplete ( )
{
	static UFunction* pFnNotifyFallingAnimationComplete = NULL;

	if ( ! pFnNotifyFallingAnimationComplete )
		pFnNotifyFallingAnimationComplete = (UFunction*) UObject::GObjObjects()->Data[ 40058 ];

	ABioPawn_eventNotifyFallingAnimationComplete_Parms NotifyFallingAnimationComplete_Parms;

	this->ProcessEvent ( pFnNotifyFallingAnimationComplete, &NotifyFallingAnimationComplete_Parms, NULL );
};

// Function SFXGame.BioPawn.ShouldPlayFallingAnim
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::eventShouldPlayFallingAnim ( )
{
	static UFunction* pFnShouldPlayFallingAnim = NULL;

	if ( ! pFnShouldPlayFallingAnim )
		pFnShouldPlayFallingAnim = (UFunction*) UObject::GObjObjects()->Data[ 40056 ];

	ABioPawn_eventShouldPlayFallingAnim_Parms ShouldPlayFallingAnim_Parms;

	this->ProcessEvent ( pFnShouldPlayFallingAnim, &ShouldPlayFallingAnim_Parms, NULL );

	return ShouldPlayFallingAnim_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.Landed
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ABioPawn::Landed ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 40052 ];

	ABioPawn_execLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function SFXGame.BioPawn.StartFall
// [0x00020002] 
// Parameters infos:

void ABioPawn::StartFall ( )
{
	static UFunction* pFnStartFall = NULL;

	if ( ! pFnStartFall )
		pFnStartFall = (UFunction*) UObject::GObjObjects()->Data[ 40051 ];

	ABioPawn_execStartFall_Parms StartFall_Parms;

	this->ProcessEvent ( pFnStartFall, &StartFall_Parms, NULL );
};

// Function SFXGame.BioPawn.Falling
// [0x00020002] 
// Parameters infos:

void ABioPawn::Falling ( )
{
	static UFunction* pFnFalling = NULL;

	if ( ! pFnFalling )
		pFnFalling = (UFunction*) UObject::GObjObjects()->Data[ 40050 ];

	ABioPawn_execFalling_Parms Falling_Parms;

	this->ProcessEvent ( pFnFalling, &Falling_Parms, NULL );
};

// Function SFXGame.BioPawn.UpdateRagdollState
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ABioPawn::UpdateRagdollState ( float DeltaTime )
{
	static UFunction* pFnUpdateRagdollState = NULL;

	if ( ! pFnUpdateRagdollState )
		pFnUpdateRagdollState = (UFunction*) UObject::GObjObjects()->Data[ 40047 ];

	ABioPawn_execUpdateRagdollState_Parms UpdateRagdollState_Parms;
	UpdateRagdollState_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateRagdollState, &UpdateRagdollState_Parms, NULL );
};

// Function SFXGame.BioPawn.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ABioPawn::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 40041 ];

	ABioPawn_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.BioPawn.IsWeaponFiring
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::eventIsWeaponFiring ( )
{
	static UFunction* pFnIsWeaponFiring = NULL;

	if ( ! pFnIsWeaponFiring )
		pFnIsWeaponFiring = (UFunction*) UObject::GObjObjects()->Data[ 40039 ];

	ABioPawn_eventIsWeaponFiring_Parms IsWeaponFiring_Parms;

	this->ProcessEvent ( pFnIsWeaponFiring, &IsWeaponFiring_Parms, NULL );

	return IsWeaponFiring_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CanFireWeapon
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::eventCanFireWeapon ( )
{
	static UFunction* pFnCanFireWeapon = NULL;

	if ( ! pFnCanFireWeapon )
		pFnCanFireWeapon = (UFunction*) UObject::GObjObjects()->Data[ 40037 ];

	ABioPawn_eventCanFireWeapon_Parms CanFireWeapon_Parms;

	this->ProcessEvent ( pFnCanFireWeapon, &CanFireWeapon_Parms, NULL );

	return CanFireWeapon_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CanSwitchWeapons
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::CanSwitchWeapons ( )
{
	static UFunction* pFnCanSwitchWeapons = NULL;

	if ( ! pFnCanSwitchWeapons )
		pFnCanSwitchWeapons = (UFunction*) UObject::GObjObjects()->Data[ 40035 ];

	ABioPawn_execCanSwitchWeapons_Parms CanSwitchWeapons_Parms;

	this->ProcessEvent ( pFnCanSwitchWeapons, &CanSwitchWeapons_Parms, NULL );

	return CanSwitchWeapons_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CanReload
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::CanReload ( )
{
	static UFunction* pFnCanReload = NULL;

	if ( ! pFnCanReload )
		pFnCanReload = (UFunction*) UObject::GObjObjects()->Data[ 40033 ];

	ABioPawn_execCanReload_Parms CanReload_Parms;

	this->ProcessEvent ( pFnCanReload, &CanReload_Parms, NULL );

	return CanReload_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsPerformingBlockingAction
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsPerformingBlockingAction ( )
{
	static UFunction* pFnIsPerformingBlockingAction = NULL;

	if ( ! pFnIsPerformingBlockingAction )
		pFnIsPerformingBlockingAction = (UFunction*) UObject::GObjObjects()->Data[ 40031 ];

	ABioPawn_execIsPerformingBlockingAction_Parms IsPerformingBlockingAction_Parms;

	pFnIsPerformingBlockingAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPerformingBlockingAction, &IsPerformingBlockingAction_Parms, NULL );

	pFnIsPerformingBlockingAction->FunctionFlags |= 0x400;

	return IsPerformingBlockingAction_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsPerformingCustomAction
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsPerformingCustomAction ( )
{
	static UFunction* pFnIsPerformingCustomAction = NULL;

	if ( ! pFnIsPerformingCustomAction )
		pFnIsPerformingCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 40029 ];

	ABioPawn_execIsPerformingCustomAction_Parms IsPerformingCustomAction_Parms;

	pFnIsPerformingCustomAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPerformingCustomAction, &IsPerformingCustomAction_Parms, NULL );

	pFnIsPerformingCustomAction->FunctionFlags |= 0x400;

	return IsPerformingCustomAction_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsSwitchingWeapons
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bBlendOut                      ( CPF_OptionalParm | CPF_Parm )

bool ABioPawn::IsSwitchingWeapons ( unsigned long bBlendOut )
{
	static UFunction* pFnIsSwitchingWeapons = NULL;

	if ( ! pFnIsSwitchingWeapons )
		pFnIsSwitchingWeapons = (UFunction*) UObject::GObjObjects()->Data[ 30241 ];

	ABioPawn_execIsSwitchingWeapons_Parms IsSwitchingWeapons_Parms;
	IsSwitchingWeapons_Parms.bBlendOut = bBlendOut;

	pFnIsSwitchingWeapons->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSwitchingWeapons, &IsSwitchingWeapons_Parms, NULL );

	pFnIsSwitchingWeapons->FunctionFlags |= 0x400;

	return IsSwitchingWeapons_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsReloading
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCheckReloadRequest            ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bBlendOut                      ( CPF_OptionalParm | CPF_Parm )

bool ABioPawn::IsReloading ( unsigned long bCheckReloadRequest, unsigned long bBlendOut )
{
	static UFunction* pFnIsReloading = NULL;

	if ( ! pFnIsReloading )
		pFnIsReloading = (UFunction*) UObject::GObjObjects()->Data[ 30236 ];

	ABioPawn_execIsReloading_Parms IsReloading_Parms;
	IsReloading_Parms.bCheckReloadRequest = bCheckReloadRequest;
	IsReloading_Parms.bBlendOut = bBlendOut;

	pFnIsReloading->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsReloading, &IsReloading_Parms, NULL );

	pFnIsReloading->FunctionFlags |= 0x400;

	return IsReloading_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsUsingPower
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsUsingPower ( )
{
	static UFunction* pFnIsUsingPower = NULL;

	if ( ! pFnIsUsingPower )
		pFnIsUsingPower = (UFunction*) UObject::GObjObjects()->Data[ 40022 ];

	ABioPawn_execIsUsingPower_Parms IsUsingPower_Parms;

	pFnIsUsingPower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUsingPower, &IsUsingPower_Parms, NULL );

	pFnIsUsingPower->FunctionFlags |= 0x400;

	return IsUsingPower_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.StartFirstUsePowerDelay
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ABioPawn::StartFirstUsePowerDelay ( )
{
	static UFunction* pFnStartFirstUsePowerDelay = NULL;

	if ( ! pFnStartFirstUsePowerDelay )
		pFnStartFirstUsePowerDelay = (UFunction*) UObject::GObjObjects()->Data[ 39939 ];

	ABioPawn_execStartFirstUsePowerDelay_Parms StartFirstUsePowerDelay_Parms;

	this->ProcessEvent ( pFnStartFirstUsePowerDelay, &StartFirstUsePowerDelay_Parms, NULL );
};

// Function SFXGame.BioPawn.ScaleShields
// [0x00020002] 
// Parameters infos:
// float                          CurrentHealth                  ( CPF_Parm )

void ABioPawn::ScaleShields ( float CurrentHealth )
{
	static UFunction* pFnScaleShields = NULL;

	if ( ! pFnScaleShields )
		pFnScaleShields = (UFunction*) UObject::GObjObjects()->Data[ 40016 ];

	ABioPawn_execScaleShields_Parms ScaleShields_Parms;
	ScaleShields_Parms.CurrentHealth = CurrentHealth;

	this->ProcessEvent ( pFnScaleShields, &ScaleShields_Parms, NULL );
};

// Function SFXGame.BioPawn.ScaleWeapons
// [0x00020002] 
// Parameters infos:
// class USFXLoadoutData*         ChkLoadout                     ( CPF_Parm )
// int                            ScaleLevel                     ( CPF_Parm )

void ABioPawn::ScaleWeapons ( class USFXLoadoutData* ChkLoadout, int ScaleLevel )
{
	static UFunction* pFnScaleWeapons = NULL;

	if ( ! pFnScaleWeapons )
		pFnScaleWeapons = (UFunction*) UObject::GObjObjects()->Data[ 40011 ];

	ABioPawn_execScaleWeapons_Parms ScaleWeapons_Parms;
	ScaleWeapons_Parms.ChkLoadout = ChkLoadout;
	ScaleWeapons_Parms.ScaleLevel = ScaleLevel;

	this->ProcessEvent ( pFnScaleWeapons, &ScaleWeapons_Parms, NULL );
};

// Function SFXGame.BioPawn.CreateWeapons
// [0x00020002] 
// Parameters infos:
// class USFXLoadoutData*         ChkLoadout                     ( CPF_Parm )

void ABioPawn::CreateWeapons ( class USFXLoadoutData* ChkLoadout )
{
	static UFunction* pFnCreateWeapons = NULL;

	if ( ! pFnCreateWeapons )
		pFnCreateWeapons = (UFunction*) UObject::GObjObjects()->Data[ 40008 ];

	ABioPawn_execCreateWeapons_Parms CreateWeapons_Parms;
	CreateWeapons_Parms.ChkLoadout = ChkLoadout;

	this->ProcessEvent ( pFnCreateWeapons, &CreateWeapons_Parms, NULL );
};

// Function SFXGame.BioPawn.CreateWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WeaponClass                    ( CPF_Parm )
// unsigned long                  bEquipWeapon                   ( CPF_OptionalParm | CPF_Parm )

bool ABioPawn::CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon )
{
	static UFunction* pFnCreateWeapon = NULL;

	if ( ! pFnCreateWeapon )
		pFnCreateWeapon = (UFunction*) UObject::GObjObjects()->Data[ 40001 ];

	ABioPawn_execCreateWeapon_Parms CreateWeapon_Parms;
	CreateWeapon_Parms.WeaponClass = WeaponClass;
	CreateWeapon_Parms.bEquipWeapon = bEquipWeapon;

	this->ProcessEvent ( pFnCreateWeapon, &CreateWeapon_Parms, NULL );

	return CreateWeapon_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.ReplaceWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  WeaponCategory                 ( CPF_Parm )
// class UClass*                  NewWeapon                      ( CPF_Parm )
// unsigned long                  bEquipWeapon                   ( CPF_Parm )

bool ABioPawn::ReplaceWeapon ( unsigned char WeaponCategory, class UClass* NewWeapon, unsigned long bEquipWeapon )
{
	static UFunction* pFnReplaceWeapon = NULL;

	if ( ! pFnReplaceWeapon )
		pFnReplaceWeapon = (UFunction*) UObject::GObjObjects()->Data[ 39988 ];

	ABioPawn_execReplaceWeapon_Parms ReplaceWeapon_Parms;
	ReplaceWeapon_Parms.WeaponCategory = WeaponCategory;
	ReplaceWeapon_Parms.NewWeapon = NewWeapon;
	ReplaceWeapon_Parms.bEquipWeapon = bEquipWeapon;

	this->ProcessEvent ( pFnReplaceWeapon, &ReplaceWeapon_Parms, NULL );

	return ReplaceWeapon_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.OnGiveInventory
// [0x00820102] 
// Parameters infos:
// class USeqAct_GiveInventory*   inAction                       ( CPF_Parm )

void ABioPawn::OnGiveInventory ( class USeqAct_GiveInventory* inAction )
{
	static UFunction* pFnOnGiveInventory = NULL;

	if ( ! pFnOnGiveInventory )
		pFnOnGiveInventory = (UFunction*) UObject::GObjObjects()->Data[ 39982 ];

	ABioPawn_execOnGiveInventory_Parms OnGiveInventory_Parms;
	OnGiveInventory_Parms.inAction = inAction;

	this->ProcessEvent ( pFnOnGiveInventory, &OnGiveInventory_Parms, NULL );
};

// Function SFXGame.BioPawn.GetScaledLevel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ABioPawn::GetScaledLevel ( )
{
	static UFunction* pFnGetScaledLevel = NULL;

	if ( ! pFnGetScaledLevel )
		pFnGetScaledLevel = (UFunction*) UObject::GObjObjects()->Data[ 39959 ];

	ABioPawn_execGetScaledLevel_Parms GetScaledLevel_Parms;

	this->ProcessEvent ( pFnGetScaledLevel, &GetScaledLevel_Parms, NULL );

	return GetScaledLevel_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.ScaleEquipment
// [0x00020002] 
// Parameters infos:
// int                            PlayerLevel                    ( CPF_Parm )
// class USFXLoadoutData*         oLoadout                       ( CPF_OptionalParm | CPF_Parm )

void ABioPawn::ScaleEquipment ( int PlayerLevel, class USFXLoadoutData* oLoadout )
{
	static UFunction* pFnScaleEquipment = NULL;

	if ( ! pFnScaleEquipment )
		pFnScaleEquipment = (UFunction*) UObject::GObjObjects()->Data[ 39941 ];

	ABioPawn_execScaleEquipment_Parms ScaleEquipment_Parms;
	ScaleEquipment_Parms.PlayerLevel = PlayerLevel;
	ScaleEquipment_Parms.oLoadout = oLoadout;

	this->ProcessEvent ( pFnScaleEquipment, &ScaleEquipment_Parms, NULL );
};

// Function SFXGame.BioPawn.GenerateInventoryFromLoadout
// [0x00820002] 
// Parameters infos:
// class USFXLoadoutData*         oLoadout                       ( CPF_Parm )

void ABioPawn::GenerateInventoryFromLoadout ( class USFXLoadoutData* oLoadout )
{
	static UFunction* pFnGenerateInventoryFromLoadout = NULL;

	if ( ! pFnGenerateInventoryFromLoadout )
		pFnGenerateInventoryFromLoadout = (UFunction*) UObject::GObjObjects()->Data[ 39924 ];

	ABioPawn_execGenerateInventoryFromLoadout_Parms GenerateInventoryFromLoadout_Parms;
	GenerateInventoryFromLoadout_Parms.oLoadout = oLoadout;

	this->ProcessEvent ( pFnGenerateInventoryFromLoadout, &GenerateInventoryFromLoadout_Parms, NULL );
};

// Function SFXGame.BioPawn.AddDefaultInventory
// [0x00020002] 
// Parameters infos:

void ABioPawn::AddDefaultInventory ( )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = (UFunction*) UObject::GObjObjects()->Data[ 39922 ];

	ABioPawn_execAddDefaultInventory_Parms AddDefaultInventory_Parms;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function SFXGame.BioPawn.GetPawnLoadout
// [0x00020002] 
// Parameters infos:
// class USFXLoadoutData*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXLoadoutData* ABioPawn::GetPawnLoadout ( )
{
	static UFunction* pFnGetPawnLoadout = NULL;

	if ( ! pFnGetPawnLoadout )
		pFnGetPawnLoadout = (UFunction*) UObject::GObjObjects()->Data[ 39918 ];

	ABioPawn_execGetPawnLoadout_Parms GetPawnLoadout_Parms;

	this->ProcessEvent ( pFnGetPawnLoadout, &GetPawnLoadout_Parms, NULL );

	return GetPawnLoadout_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsInBleedOut
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::eventIsInBleedOut ( )
{
	static UFunction* pFnIsInBleedOut = NULL;

	if ( ! pFnIsInBleedOut )
		pFnIsInBleedOut = (UFunction*) UObject::GObjObjects()->Data[ 39916 ];

	ABioPawn_eventIsInBleedOut_Parms IsInBleedOut_Parms;

	this->ProcessEvent ( pFnIsInBleedOut, &IsInBleedOut_Parms, NULL );

	return IsInBleedOut_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetWeaponImmediately
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  cWeapon                        ( CPF_Parm )

bool ABioPawn::eventSetWeaponImmediately ( class UClass* cWeapon )
{
	static UFunction* pFnSetWeaponImmediately = NULL;

	if ( ! pFnSetWeaponImmediately )
		pFnSetWeaponImmediately = (UFunction*) UObject::GObjObjects()->Data[ 39910 ];

	ABioPawn_eventSetWeaponImmediately_Parms SetWeaponImmediately_Parms;
	SetWeaponImmediately_Parms.cWeapon = cWeapon;

	this->ProcessEvent ( pFnSetWeaponImmediately, &SetWeaponImmediately_Parms, NULL );

	return SetWeaponImmediately_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetRightHandSocketName
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName ABioPawn::eventGetRightHandSocketName ( )
{
	static UFunction* pFnGetRightHandSocketName = NULL;

	if ( ! pFnGetRightHandSocketName )
		pFnGetRightHandSocketName = (UFunction*) UObject::GObjObjects()->Data[ 35987 ];

	ABioPawn_eventGetRightHandSocketName_Parms GetRightHandSocketName_Parms;

	this->ProcessEvent ( pFnGetRightHandSocketName, &GetRightHandSocketName_Parms, NULL );

	return GetRightHandSocketName_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetWeaponFromSlot
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  eSlot                          ( CPF_Parm )

void ABioPawn::eventSetWeaponFromSlot ( unsigned char eSlot )
{
	static UFunction* pFnSetWeaponFromSlot = NULL;

	if ( ! pFnSetWeaponFromSlot )
		pFnSetWeaponFromSlot = (UFunction*) UObject::GObjObjects()->Data[ 39907 ];

	ABioPawn_eventSetWeaponFromSlot_Parms SetWeaponFromSlot_Parms;
	SetWeaponFromSlot_Parms.eSlot = eSlot;

	this->ProcessEvent ( pFnSetWeaponFromSlot, &SetWeaponFromSlot_Parms, NULL );
};

// Function SFXGame.BioPawn.GetCurrentWeaponCharacterSlot
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ABioPawn::eventGetCurrentWeaponCharacterSlot ( )
{
	static UFunction* pFnGetCurrentWeaponCharacterSlot = NULL;

	if ( ! pFnGetCurrentWeaponCharacterSlot )
		pFnGetCurrentWeaponCharacterSlot = (UFunction*) UObject::GObjObjects()->Data[ 39905 ];

	ABioPawn_eventGetCurrentWeaponCharacterSlot_Parms GetCurrentWeaponCharacterSlot_Parms;

	this->ProcessEvent ( pFnGetCurrentWeaponCharacterSlot, &GetCurrentWeaponCharacterSlot_Parms, NULL );

	return GetCurrentWeaponCharacterSlot_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CollapseWeapon
// [0x00020002] 
// Parameters infos:

void ABioPawn::CollapseWeapon ( )
{
	static UFunction* pFnCollapseWeapon = NULL;

	if ( ! pFnCollapseWeapon )
		pFnCollapseWeapon = (UFunction*) UObject::GObjObjects()->Data[ 39903 ];

	ABioPawn_execCollapseWeapon_Parms CollapseWeapon_Parms;

	this->ProcessEvent ( pFnCollapseWeapon, &CollapseWeapon_Parms, NULL );
};

// Function SFXGame.BioPawn.ExpandWeapon
// [0x00020002] 
// Parameters infos:

void ABioPawn::ExpandWeapon ( )
{
	static UFunction* pFnExpandWeapon = NULL;

	if ( ! pFnExpandWeapon )
		pFnExpandWeapon = (UFunction*) UObject::GObjObjects()->Data[ 39901 ];

	ABioPawn_execExpandWeapon_Parms ExpandWeapon_Parms;

	this->ProcessEvent ( pFnExpandWeapon, &ExpandWeapon_Parms, NULL );
};

// Function SFXGame.BioPawn.FadeOutPowerRelease
// [0x00020002] 
// Parameters infos:

void ABioPawn::FadeOutPowerRelease ( )
{
	static UFunction* pFnFadeOutPowerRelease = NULL;

	if ( ! pFnFadeOutPowerRelease )
		pFnFadeOutPowerRelease = (UFunction*) UObject::GObjObjects()->Data[ 39899 ];

	ABioPawn_execFadeOutPowerRelease_Parms FadeOutPowerRelease_Parms;

	this->ProcessEvent ( pFnFadeOutPowerRelease, &FadeOutPowerRelease_Parms, NULL );
};

// Function SFXGame.BioPawn.FadeOutHolsterAnim
// [0x00020002] 
// Parameters infos:

void ABioPawn::FadeOutHolsterAnim ( )
{
	static UFunction* pFnFadeOutHolsterAnim = NULL;

	if ( ! pFnFadeOutHolsterAnim )
		pFnFadeOutHolsterAnim = (UFunction*) UObject::GObjObjects()->Data[ 39897 ];

	ABioPawn_execFadeOutHolsterAnim_Parms FadeOutHolsterAnim_Parms;

	this->ProcessEvent ( pFnFadeOutHolsterAnim, &FadeOutHolsterAnim_Parms, NULL );
};

// Function SFXGame.BioPawn.SwapHolsterAnim
// [0x00020002] 
// Parameters infos:

void ABioPawn::SwapHolsterAnim ( )
{
	static UFunction* pFnSwapHolsterAnim = NULL;

	if ( ! pFnSwapHolsterAnim )
		pFnSwapHolsterAnim = (UFunction*) UObject::GObjObjects()->Data[ 39895 ];

	ABioPawn_execSwapHolsterAnim_Parms SwapHolsterAnim_Parms;

	this->ProcessEvent ( pFnSwapHolsterAnim, &SwapHolsterAnim_Parms, NULL );
};

// Function SFXGame.BioPawn.FadeOutReloadAnim
// [0x00020002] 
// Parameters infos:

void ABioPawn::FadeOutReloadAnim ( )
{
	static UFunction* pFnFadeOutReloadAnim = NULL;

	if ( ! pFnFadeOutReloadAnim )
		pFnFadeOutReloadAnim = (UFunction*) UObject::GObjObjects()->Data[ 39893 ];

	ABioPawn_execFadeOutReloadAnim_Parms FadeOutReloadAnim_Parms;

	this->ProcessEvent ( pFnFadeOutReloadAnim, &FadeOutReloadAnim_Parms, NULL );
};

// Function SFXGame.BioPawn.FadeOutDrawAnim
// [0x00020002] 
// Parameters infos:

void ABioPawn::FadeOutDrawAnim ( )
{
	static UFunction* pFnFadeOutDrawAnim = NULL;

	if ( ! pFnFadeOutDrawAnim )
		pFnFadeOutDrawAnim = (UFunction*) UObject::GObjObjects()->Data[ 39891 ];

	ABioPawn_execFadeOutDrawAnim_Parms FadeOutDrawAnim_Parms;

	this->ProcessEvent ( pFnFadeOutDrawAnim, &FadeOutDrawAnim_Parms, NULL );
};

// Function SFXGame.BioPawn.SwapDrawAnim
// [0x00020002] 
// Parameters infos:

void ABioPawn::SwapDrawAnim ( )
{
	static UFunction* pFnSwapDrawAnim = NULL;

	if ( ! pFnSwapDrawAnim )
		pFnSwapDrawAnim = (UFunction*) UObject::GObjObjects()->Data[ 39889 ];

	ABioPawn_execSwapDrawAnim_Parms SwapDrawAnim_Parms;

	this->ProcessEvent ( pFnSwapDrawAnim, &SwapDrawAnim_Parms, NULL );
};

// Function SFXGame.BioPawn.RmvAnimSet
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UAnimSet*                Set                            ( CPF_Parm )

void ABioPawn::RmvAnimSet ( class UAnimSet* Set )
{
	static UFunction* pFnRmvAnimSet = NULL;

	if ( ! pFnRmvAnimSet )
		pFnRmvAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 39884 ];

	ABioPawn_execRmvAnimSet_Parms RmvAnimSet_Parms;
	RmvAnimSet_Parms.Set = Set;

	this->ProcessEvent ( pFnRmvAnimSet, &RmvAnimSet_Parms, NULL );
};

// Function SFXGame.BioPawn.AddAnimSet
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UAnimSet*                Set                            ( CPF_Parm )

void ABioPawn::AddAnimSet ( class UAnimSet* Set )
{
	static UFunction* pFnAddAnimSet = NULL;

	if ( ! pFnAddAnimSet )
		pFnAddAnimSet = (UFunction*) UObject::GObjObjects()->Data[ 39885 ];

	ABioPawn_execAddAnimSet_Parms AddAnimSet_Parms;
	AddAnimSet_Parms.Set = Set;

	this->ProcessEvent ( pFnAddAnimSet, &AddAnimSet_Parms, NULL );
};

// Function SFXGame.BioPawn.AddWeaponAnimSets
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              NewWeapon                      ( CPF_Parm )
// class ASFXWeapon*              OldWeapon                      ( CPF_Parm )
// unsigned long                  bDrawOnly                      ( CPF_OptionalParm | CPF_Parm )

void ABioPawn::AddWeaponAnimSets ( class ASFXWeapon* NewWeapon, class ASFXWeapon* OldWeapon, unsigned long bDrawOnly )
{
	static UFunction* pFnAddWeaponAnimSets = NULL;

	if ( ! pFnAddWeaponAnimSets )
		pFnAddWeaponAnimSets = (UFunction*) UObject::GObjObjects()->Data[ 39877 ];

	ABioPawn_execAddWeaponAnimSets_Parms AddWeaponAnimSets_Parms;
	AddWeaponAnimSets_Parms.NewWeapon = NewWeapon;
	AddWeaponAnimSets_Parms.OldWeapon = OldWeapon;
	AddWeaponAnimSets_Parms.bDrawOnly = bDrawOnly;

	this->ProcessEvent ( pFnAddWeaponAnimSets, &AddWeaponAnimSets_Parms, NULL );
};

// Function SFXGame.BioPawn.GetWeaponStartTraceLocation
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 CurrentWeapon                  ( CPF_OptionalParm | CPF_Parm )

struct FVector ABioPawn::GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = (UFunction*) UObject::GObjObjects()->Data[ 39869 ];

	ABioPawn_execGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;
	GetWeaponStartTraceLocation_Parms.CurrentWeapon = CurrentWeapon;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );

	return GetWeaponStartTraceLocation_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetWeaponIdlePosition
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ABioPawn::eventGetWeaponIdlePosition ( )
{
	static UFunction* pFnGetWeaponIdlePosition = NULL;

	if ( ! pFnGetWeaponIdlePosition )
		pFnGetWeaponIdlePosition = (UFunction*) UObject::GObjObjects()->Data[ 39865 ];

	ABioPawn_eventGetWeaponIdlePosition_Parms GetWeaponIdlePosition_Parms;

	this->ProcessEvent ( pFnGetWeaponIdlePosition, &GetWeaponIdlePosition_Parms, NULL );

	return GetWeaponIdlePosition_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetPulledInMuzzleLocation
// [0x00820103] ( FUNC_Final )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              SW                             ( CPF_Parm )
// struct FVector                 AimDir                         ( CPF_Parm )

struct FVector ABioPawn::GetPulledInMuzzleLocation ( class ASFXWeapon* SW, struct FVector AimDir )
{
	static UFunction* pFnGetPulledInMuzzleLocation = NULL;

	if ( ! pFnGetPulledInMuzzleLocation )
		pFnGetPulledInMuzzleLocation = (UFunction*) UObject::GObjObjects()->Data[ 39854 ];

	ABioPawn_execGetPulledInMuzzleLocation_Parms GetPulledInMuzzleLocation_Parms;
	GetPulledInMuzzleLocation_Parms.SW = SW;
	memcpy ( &GetPulledInMuzzleLocation_Parms.AimDir, &AimDir, 0xC );

	this->ProcessEvent ( pFnGetPulledInMuzzleLocation, &GetPulledInMuzzleLocation_Parms, NULL );

	return GetPulledInMuzzleLocation_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetWeaponHandPosition
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HandLoc                        ( CPF_Parm | CPF_OutParm )
// struct FRotator                HandRot                        ( CPF_Parm | CPF_OutParm )

bool ABioPawn::GetWeaponHandPosition ( struct FVector* HandLoc, struct FRotator* HandRot )
{
	static UFunction* pFnGetWeaponHandPosition = NULL;

	if ( ! pFnGetWeaponHandPosition )
		pFnGetWeaponHandPosition = (UFunction*) UObject::GObjObjects()->Data[ 39850 ];

	ABioPawn_execGetWeaponHandPosition_Parms GetWeaponHandPosition_Parms;

	this->ProcessEvent ( pFnGetWeaponHandPosition, &GetWeaponHandPosition_Parms, NULL );

	if ( HandLoc )
		memcpy ( HandLoc, &GetWeaponHandPosition_Parms.HandLoc, 0xC );

	if ( HandRot )
		memcpy ( HandRot, &GetWeaponHandPosition_Parms.HandRot, 0xC );

	return GetWeaponHandPosition_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetPhysicalFireStartLoc
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 FireOffset                     ( CPF_Parm )

struct FVector ABioPawn::eventGetPhysicalFireStartLoc ( struct FVector FireOffset )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 39842 ];

	ABioPawn_eventGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;
	memcpy ( &GetPhysicalFireStartLoc_Parms.FireOffset, &FireOffset, 0xC );

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsPendingFire
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  InFiringMode                   ( CPF_Parm )

bool ABioPawn::IsPendingFire ( unsigned char InFiringMode )
{
	static UFunction* pFnIsPendingFire = NULL;

	if ( ! pFnIsPendingFire )
		pFnIsPendingFire = (UFunction*) UObject::GObjObjects()->Data[ 39839 ];

	ABioPawn_execIsPendingFire_Parms IsPendingFire_Parms;
	IsPendingFire_Parms.InFiringMode = InFiringMode;

	this->ProcessEvent ( pFnIsPendingFire, &IsPendingFire_Parms, NULL );

	return IsPendingFire_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.GetPawnViewLocation
// [0x00020500] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ABioPawn::GetPawnViewLocation ( )
{
	static UFunction* pFnGetPawnViewLocation = NULL;

	if ( ! pFnGetPawnViewLocation )
		pFnGetPawnViewLocation = (UFunction*) UObject::GObjObjects()->Data[ 39837 ];

	ABioPawn_execGetPawnViewLocation_Parms GetPawnViewLocation_Parms;

	pFnGetPawnViewLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPawnViewLocation, &GetPawnViewLocation_Parms, NULL );

	pFnGetPawnViewLocation->FunctionFlags |= 0x400;

	return GetPawnViewLocation_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.RootMotionModeChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void ABioPawn::eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnRootMotionModeChanged = NULL;

	if ( ! pFnRootMotionModeChanged )
		pFnRootMotionModeChanged = (UFunction*) UObject::GObjObjects()->Data[ 39835 ];

	ABioPawn_eventRootMotionModeChanged_Parms RootMotionModeChanged_Parms;
	RootMotionModeChanged_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnRootMotionModeChanged, &RootMotionModeChanged_Parms, NULL );
};

// Function SFXGame.BioPawn.RootMotionRelease
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNode*               Node                           ( CPF_Parm )

void ABioPawn::RootMotionRelease ( class UAnimNode* Node )
{
	static UFunction* pFnRootMotionRelease = NULL;

	if ( ! pFnRootMotionRelease )
		pFnRootMotionRelease = (UFunction*) UObject::GObjObjects()->Data[ 39833 ];

	ABioPawn_execRootMotionRelease_Parms RootMotionRelease_Parms;
	RootMotionRelease_Parms.Node = Node;

	pFnRootMotionRelease->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRootMotionRelease, &RootMotionRelease_Parms, NULL );

	pFnRootMotionRelease->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.RootMotionOverride
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UAnimNode*               Node                           ( CPF_Parm )
// unsigned char                  RMMode                         ( CPF_Parm )
// unsigned char                  RMRMode                        ( CPF_Parm )

void ABioPawn::RootMotionOverride ( class UAnimNode* Node, unsigned char RMMode, unsigned char RMRMode )
{
	static UFunction* pFnRootMotionOverride = NULL;

	if ( ! pFnRootMotionOverride )
		pFnRootMotionOverride = (UFunction*) UObject::GObjObjects()->Data[ 39829 ];

	ABioPawn_execRootMotionOverride_Parms RootMotionOverride_Parms;
	RootMotionOverride_Parms.Node = Node;
	RootMotionOverride_Parms.RMMode = RMMode;
	RootMotionOverride_Parms.RMRMode = RMRMode;

	pFnRootMotionOverride->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRootMotionOverride, &RootMotionOverride_Parms, NULL );

	pFnRootMotionOverride->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.IsAtRightEdgeSlot
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          InLimit                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bMustLean                      ( CPF_OptionalParm | CPF_Parm )

bool ABioPawn::IsAtRightEdgeSlot ( float InLimit, unsigned long bMustLean )
{
	static UFunction* pFnIsAtRightEdgeSlot = NULL;

	if ( ! pFnIsAtRightEdgeSlot )
		pFnIsAtRightEdgeSlot = (UFunction*) UObject::GObjObjects()->Data[ 39825 ];

	ABioPawn_execIsAtRightEdgeSlot_Parms IsAtRightEdgeSlot_Parms;
	IsAtRightEdgeSlot_Parms.InLimit = InLimit;
	IsAtRightEdgeSlot_Parms.bMustLean = bMustLean;

	pFnIsAtRightEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAtRightEdgeSlot, &IsAtRightEdgeSlot_Parms, NULL );

	pFnIsAtRightEdgeSlot->FunctionFlags |= 0x400;

	return IsAtRightEdgeSlot_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsAtLeftEdgeSlot
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          InLimit                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bMustLean                      ( CPF_OptionalParm | CPF_Parm )

bool ABioPawn::IsAtLeftEdgeSlot ( float InLimit, unsigned long bMustLean )
{
	static UFunction* pFnIsAtLeftEdgeSlot = NULL;

	if ( ! pFnIsAtLeftEdgeSlot )
		pFnIsAtLeftEdgeSlot = (UFunction*) UObject::GObjObjects()->Data[ 39821 ];

	ABioPawn_execIsAtLeftEdgeSlot_Parms IsAtLeftEdgeSlot_Parms;
	IsAtLeftEdgeSlot_Parms.InLimit = InLimit;
	IsAtLeftEdgeSlot_Parms.bMustLean = bMustLean;

	pFnIsAtLeftEdgeSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAtLeftEdgeSlot, &IsAtLeftEdgeSlot_Parms, NULL );

	pFnIsAtLeftEdgeSlot->FunctionFlags |= 0x400;

	return IsAtLeftEdgeSlot_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsOnACoverSlot
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsOnACoverSlot ( )
{
	static UFunction* pFnIsOnACoverSlot = NULL;

	if ( ! pFnIsOnACoverSlot )
		pFnIsOnACoverSlot = (UFunction*) UObject::GObjObjects()->Data[ 39819 ];

	ABioPawn_execIsOnACoverSlot_Parms IsOnACoverSlot_Parms;

	pFnIsOnACoverSlot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsOnACoverSlot, &IsOnACoverSlot_Parms, NULL );

	pFnIsOnACoverSlot->FunctionFlags |= 0x400;

	return IsOnACoverSlot_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.ReachedCoverSlot
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// int                            SlotIdx                        ( CPF_Parm )

void ABioPawn::eventReachedCoverSlot ( int SlotIdx )
{
	static UFunction* pFnReachedCoverSlot = NULL;

	if ( ! pFnReachedCoverSlot )
		pFnReachedCoverSlot = (UFunction*) UObject::GObjObjects()->Data[ 39814 ];

	ABioPawn_eventReachedCoverSlot_Parms ReachedCoverSlot_Parms;
	ReachedCoverSlot_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnReachedCoverSlot, &ReachedCoverSlot_Parms, NULL );
};

// Function SFXGame.BioPawn.GetSlotIdxByPct
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ABioPawn::GetSlotIdxByPct ( )
{
	static UFunction* pFnGetSlotIdxByPct = NULL;

	if ( ! pFnGetSlotIdxByPct )
		pFnGetSlotIdxByPct = (UFunction*) UObject::GObjObjects()->Data[ 39812 ];

	ABioPawn_execGetSlotIdxByPct_Parms GetSlotIdxByPct_Parms;

	this->ProcessEvent ( pFnGetSlotIdxByPct, &GetSlotIdxByPct_Parms, NULL );

	return GetSlotIdxByPct_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetCoverDirection
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  NewCoverDirection              ( CPF_Parm )

void ABioPawn::SetCoverDirection ( unsigned char NewCoverDirection )
{
	static UFunction* pFnSetCoverDirection = NULL;

	if ( ! pFnSetCoverDirection )
		pFnSetCoverDirection = (UFunction*) UObject::GObjObjects()->Data[ 39810 ];

	ABioPawn_execSetCoverDirection_Parms SetCoverDirection_Parms;
	SetCoverDirection_Parms.NewCoverDirection = NewCoverDirection;

	this->ProcessEvent ( pFnSetCoverDirection, &SetCoverDirection_Parms, NULL );
};

// Function SFXGame.BioPawn.IsPoppingUp
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Action                         ( CPF_Parm )

bool ABioPawn::IsPoppingUp ( unsigned char Action )
{
	static UFunction* pFnIsPoppingUp = NULL;

	if ( ! pFnIsPoppingUp )
		pFnIsPoppingUp = (UFunction*) UObject::GObjObjects()->Data[ 39807 ];

	ABioPawn_execIsPoppingUp_Parms IsPoppingUp_Parms;
	IsPoppingUp_Parms.Action = Action;

	this->ProcessEvent ( pFnIsPoppingUp, &IsPoppingUp_Parms, NULL );

	return IsPoppingUp_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsPeeking
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Action                         ( CPF_Parm )

bool ABioPawn::IsPeeking ( unsigned char Action )
{
	static UFunction* pFnIsPeeking = NULL;

	if ( ! pFnIsPeeking )
		pFnIsPeeking = (UFunction*) UObject::GObjObjects()->Data[ 30382 ];

	ABioPawn_execIsPeeking_Parms IsPeeking_Parms;
	IsPeeking_Parms.Action = Action;

	this->ProcessEvent ( pFnIsPeeking, &IsPeeking_Parms, NULL );

	return IsPeeking_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsLeaning
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Action                         ( CPF_Parm )

bool ABioPawn::IsLeaning ( unsigned char Action )
{
	static UFunction* pFnIsLeaning = NULL;

	if ( ! pFnIsLeaning )
		pFnIsLeaning = (UFunction*) UObject::GObjObjects()->Data[ 30378 ];

	ABioPawn_execIsLeaning_Parms IsLeaning_Parms;
	IsLeaning_Parms.Action = Action;

	this->ProcessEvent ( pFnIsLeaning, &IsLeaning_Parms, NULL );

	return IsLeaning_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetCoverAction
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  NewCoverAction                 ( CPF_Parm )

void ABioPawn::eventSetCoverAction ( unsigned char NewCoverAction )
{
	static UFunction* pFnSetCoverAction = NULL;

	if ( ! pFnSetCoverAction )
		pFnSetCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 39781 ];

	ABioPawn_eventSetCoverAction_Parms SetCoverAction_Parms;
	SetCoverAction_Parms.NewCoverAction = NewCoverAction;

	this->ProcessEvent ( pFnSetCoverAction, &SetCoverAction_Parms, NULL );
};

// Function SFXGame.BioPawn.SetCoverType
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// unsigned char                  NewCoverType                   ( CPF_Parm )

void ABioPawn::SetCoverType ( unsigned char NewCoverType )
{
	static UFunction* pFnSetCoverType = NULL;

	if ( ! pFnSetCoverType )
		pFnSetCoverType = (UFunction*) UObject::GObjObjects()->Data[ 39779 ];

	ABioPawn_execSetCoverType_Parms SetCoverType_Parms;
	SetCoverType_Parms.NewCoverType = NewCoverType;

	this->ProcessEvent ( pFnSetCoverType, &SetCoverType_Parms, NULL );
};

// Function SFXGame.BioPawn.LeaveCover
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void ABioPawn::eventLeaveCover ( )
{
	static UFunction* pFnLeaveCover = NULL;

	if ( ! pFnLeaveCover )
		pFnLeaveCover = (UFunction*) UObject::GObjObjects()->Data[ 30270 ];

	ABioPawn_eventLeaveCover_Parms LeaveCover_Parms;

	this->ProcessEvent ( pFnLeaveCover, &LeaveCover_Parms, NULL );
};

// Function SFXGame.BioPawn.GetCoverTypeFor
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCovPosInfo             Cover                          ( CPF_Parm )

unsigned char ABioPawn::GetCoverTypeFor ( struct FCovPosInfo Cover )
{
	static UFunction* pFnGetCoverTypeFor = NULL;

	if ( ! pFnGetCoverTypeFor )
		pFnGetCoverTypeFor = (UFunction*) UObject::GObjObjects()->Data[ 39780 ];

	ABioPawn_execGetCoverTypeFor_Parms GetCoverTypeFor_Parms;
	memcpy ( &GetCoverTypeFor_Parms.Cover, &Cover, 0x34 );

	this->ProcessEvent ( pFnGetCoverTypeFor, &GetCoverTypeFor_Parms, NULL );

	return GetCoverTypeFor_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.FindCoverType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ABioPawn::FindCoverType ( )
{
	static UFunction* pFnFindCoverType = NULL;

	if ( ! pFnFindCoverType )
		pFnFindCoverType = (UFunction*) UObject::GObjObjects()->Data[ 30400 ];

	ABioPawn_execFindCoverType_Parms FindCoverType_Parms;

	this->ProcessEvent ( pFnFindCoverType, &FindCoverType_Parms, NULL );

	return FindCoverType_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetCoverInfo
// [0x00020102] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )
// int                            LeftIdx                        ( CPF_Parm )
// int                            RightIdx                       ( CPF_Parm )
// float                          SlotPct                        ( CPF_Parm )

void ABioPawn::SetCoverInfo ( class ACoverLink* Link, int SlotIdx, int LeftIdx, int RightIdx, float SlotPct )
{
	static UFunction* pFnSetCoverInfo = NULL;

	if ( ! pFnSetCoverInfo )
		pFnSetCoverInfo = (UFunction*) UObject::GObjObjects()->Data[ 39785 ];

	ABioPawn_execSetCoverInfo_Parms SetCoverInfo_Parms;
	SetCoverInfo_Parms.Link = Link;
	SetCoverInfo_Parms.SlotIdx = SlotIdx;
	SetCoverInfo_Parms.LeftIdx = LeftIdx;
	SetCoverInfo_Parms.RightIdx = RightIdx;
	SetCoverInfo_Parms.SlotPct = SlotPct;

	this->ProcessEvent ( pFnSetCoverInfo, &SetCoverInfo_Parms, NULL );
};

// Function SFXGame.BioPawn.SetCovPosInfo
// [0x00020102] 
// Parameters infos:
// struct FCovPosInfo             CovInfo                        ( CPF_Parm )

void ABioPawn::SetCovPosInfo ( struct FCovPosInfo CovInfo )
{
	static UFunction* pFnSetCovPosInfo = NULL;

	if ( ! pFnSetCovPosInfo )
		pFnSetCovPosInfo = (UFunction*) UObject::GObjObjects()->Data[ 39783 ];

	ABioPawn_execSetCovPosInfo_Parms SetCovPosInfo_Parms;
	memcpy ( &SetCovPosInfo_Parms.CovInfo, &CovInfo, 0x34 );

	this->ProcessEvent ( pFnSetCovPosInfo, &SetCovPosInfo_Parms, NULL );
};

// Function SFXGame.BioPawn.PlayerCoverAcquired
// [0x00020002] 
// Parameters infos:
// struct FCovPosInfo             CovInfo                        ( CPF_Parm )

void ABioPawn::PlayerCoverAcquired ( struct FCovPosInfo CovInfo )
{
	static UFunction* pFnPlayerCoverAcquired = NULL;

	if ( ! pFnPlayerCoverAcquired )
		pFnPlayerCoverAcquired = (UFunction*) UObject::GObjObjects()->Data[ 39776 ];

	ABioPawn_execPlayerCoverAcquired_Parms PlayerCoverAcquired_Parms;
	memcpy ( &PlayerCoverAcquired_Parms.CovInfo, &CovInfo, 0x34 );

	this->ProcessEvent ( pFnPlayerCoverAcquired, &PlayerCoverAcquired_Parms, NULL );
};

// Function SFXGame.BioPawn.CanCombat
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::CanCombat ( )
{
	static UFunction* pFnCanCombat = NULL;

	if ( ! pFnCanCombat )
		pFnCanCombat = (UFunction*) UObject::GObjObjects()->Data[ 39774 ];

	ABioPawn_execCanCombat_Parms CanCombat_Parms;

	pFnCanCombat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanCombat, &CanCombat_Parms, NULL );

	pFnCanCombat->FunctionFlags |= 0x400;

	return CanCombat_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CanExplore
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::CanExplore ( )
{
	static UFunction* pFnCanExplore = NULL;

	if ( ! pFnCanExplore )
		pFnCanExplore = (UFunction*) UObject::GObjObjects()->Data[ 39772 ];

	ABioPawn_execCanExplore_Parms CanExplore_Parms;

	pFnCanExplore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanExplore, &CanExplore_Parms, NULL );

	pFnCanExplore->FunctionFlags |= 0x400;

	return CanExplore_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.InCombat
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::InCombat ( )
{
	static UFunction* pFnInCombat = NULL;

	if ( ! pFnInCombat )
		pFnInCombat = (UFunction*) UObject::GObjObjects()->Data[ 39768 ];

	ABioPawn_execInCombat_Parms InCombat_Parms;

	this->ProcessEvent ( pFnInCombat, &InCombat_Parms, NULL );

	return InCombat_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.PerformStepsSmoothing
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )
// struct FVector                 OldLocation                    ( CPF_Const | CPF_Parm | CPF_OutParm )

void ABioPawn::PerformStepsSmoothing ( float DeltaSeconds, struct FVector* OldLocation )
{
	static UFunction* pFnPerformStepsSmoothing = NULL;

	if ( ! pFnPerformStepsSmoothing )
		pFnPerformStepsSmoothing = (UFunction*) UObject::GObjObjects()->Data[ 39765 ];

	ABioPawn_execPerformStepsSmoothing_Parms PerformStepsSmoothing_Parms;
	PerformStepsSmoothing_Parms.DeltaSeconds = DeltaSeconds;

	pFnPerformStepsSmoothing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformStepsSmoothing, &PerformStepsSmoothing_Parms, NULL );

	pFnPerformStepsSmoothing->FunctionFlags |= 0x400;

	if ( OldLocation )
		memcpy ( OldLocation, &PerformStepsSmoothing_Parms.OldLocation, 0xC );
};

// Function SFXGame.BioPawn.UpdateFloorConform
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ABioPawn::UpdateFloorConform ( float DeltaSeconds )
{
	static UFunction* pFnUpdateFloorConform = NULL;

	if ( ! pFnUpdateFloorConform )
		pFnUpdateFloorConform = (UFunction*) UObject::GObjObjects()->Data[ 39763 ];

	ABioPawn_execUpdateFloorConform_Parms UpdateFloorConform_Parms;
	UpdateFloorConform_Parms.DeltaSeconds = DeltaSeconds;

	pFnUpdateFloorConform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateFloorConform, &UpdateFloorConform_Parms, NULL );

	pFnUpdateFloorConform->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.SetMeshTranslationOffset
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 NewOffset                      ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_Parm )

void ABioPawn::SetMeshTranslationOffset ( struct FVector NewOffset, unsigned long bForce )
{
	static UFunction* pFnSetMeshTranslationOffset = NULL;

	if ( ! pFnSetMeshTranslationOffset )
		pFnSetMeshTranslationOffset = (UFunction*) UObject::GObjObjects()->Data[ 39760 ];

	ABioPawn_execSetMeshTranslationOffset_Parms SetMeshTranslationOffset_Parms;
	memcpy ( &SetMeshTranslationOffset_Parms.NewOffset, &NewOffset, 0xC );
	SetMeshTranslationOffset_Parms.bForce = bForce;

	pFnSetMeshTranslationOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMeshTranslationOffset, &SetMeshTranslationOffset_Parms, NULL );

	pFnSetMeshTranslationOffset->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.CanUseAnchor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ANavigationPoint*        Nav                            ( CPF_Parm )

bool ABioPawn::CanUseAnchor ( class ANavigationPoint* Nav )
{
	static UFunction* pFnCanUseAnchor = NULL;

	if ( ! pFnCanUseAnchor )
		pFnCanUseAnchor = (UFunction*) UObject::GObjObjects()->Data[ 39757 ];

	ABioPawn_execCanUseAnchor_Parms CanUseAnchor_Parms;
	CanUseAnchor_Parms.Nav = Nav;

	pFnCanUseAnchor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanUseAnchor, &CanUseAnchor_Parms, NULL );

	pFnCanUseAnchor->FunctionFlags |= 0x400;

	return CanUseAnchor_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.FitCollision
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::FitCollision ( )
{
	static UFunction* pFnFitCollision = NULL;

	if ( ! pFnFitCollision )
		pFnFitCollision = (UFunction*) UObject::GObjObjects()->Data[ 34905 ];

	ABioPawn_execFitCollision_Parms FitCollision_Parms;

	pFnFitCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFitCollision, &FitCollision_Parms, NULL );

	pFnFitCollision->FunctionFlags |= 0x400;

	return FitCollision_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CalculateCoverLocationDelta
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 Delta                          ( CPF_Parm | CPF_OutParm )

void ABioPawn::CalculateCoverLocationDelta ( struct FVector* Delta )
{
	static UFunction* pFnCalculateCoverLocationDelta = NULL;

	if ( ! pFnCalculateCoverLocationDelta )
		pFnCalculateCoverLocationDelta = (UFunction*) UObject::GObjObjects()->Data[ 39754 ];

	ABioPawn_execCalculateCoverLocationDelta_Parms CalculateCoverLocationDelta_Parms;

	pFnCalculateCoverLocationDelta->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateCoverLocationDelta, &CalculateCoverLocationDelta_Parms, NULL );

	pFnCalculateCoverLocationDelta->FunctionFlags |= 0x400;

	if ( Delta )
		memcpy ( Delta, &CalculateCoverLocationDelta_Parms.Delta, 0xC );
};

// Function SFXGame.BioPawn.DoesCoverStateAllowImmediateFire
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::DoesCoverStateAllowImmediateFire ( )
{
	static UFunction* pFnDoesCoverStateAllowImmediateFire = NULL;

	if ( ! pFnDoesCoverStateAllowImmediateFire )
		pFnDoesCoverStateAllowImmediateFire = (UFunction*) UObject::GObjObjects()->Data[ 39752 ];

	ABioPawn_execDoesCoverStateAllowImmediateFire_Parms DoesCoverStateAllowImmediateFire_Parms;

	pFnDoesCoverStateAllowImmediateFire->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoesCoverStateAllowImmediateFire, &DoesCoverStateAllowImmediateFire_Parms, NULL );

	pFnDoesCoverStateAllowImmediateFire->FunctionFlags |= 0x400;

	return DoesCoverStateAllowImmediateFire_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.CanDoCoverAction
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  CovAction                      ( CPF_Parm )
// unsigned long                  bPrecise                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bTestCamera                    ( CPF_OptionalParm | CPF_Parm )

bool ABioPawn::CanDoCoverAction ( unsigned char CovAction, unsigned long bPrecise, unsigned long bTestCamera )
{
	static UFunction* pFnCanDoCoverAction = NULL;

	if ( ! pFnCanDoCoverAction )
		pFnCanDoCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 39747 ];

	ABioPawn_execCanDoCoverAction_Parms CanDoCoverAction_Parms;
	CanDoCoverAction_Parms.CovAction = CovAction;
	CanDoCoverAction_Parms.bPrecise = bPrecise;
	CanDoCoverAction_Parms.bTestCamera = bTestCamera;

	pFnCanDoCoverAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanDoCoverAction, &CanDoCoverAction_Parms, NULL );

	pFnCanDoCoverAction->FunctionFlags |= 0x400;

	return CanDoCoverAction_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsInCoverLeaning
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsInCoverLeaning ( )
{
	static UFunction* pFnIsInCoverLeaning = NULL;

	if ( ! pFnIsInCoverLeaning )
		pFnIsInCoverLeaning = (UFunction*) UObject::GObjObjects()->Data[ 39745 ];

	ABioPawn_execIsInCoverLeaning_Parms IsInCoverLeaning_Parms;

	pFnIsInCoverLeaning->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInCoverLeaning, &IsInCoverLeaning_Parms, NULL );

	pFnIsInCoverLeaning->FunctionFlags |= 0x400;

	return IsInCoverLeaning_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.IsInCover
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsInCover ( )
{
	static UFunction* pFnIsInCover = NULL;

	if ( ! pFnIsInCover )
		pFnIsInCover = (UFunction*) UObject::GObjObjects()->Data[ 30200 ];

	ABioPawn_execIsInCover_Parms IsInCover_Parms;

	pFnIsInCover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInCover, &IsInCover_Parms, NULL );

	pFnIsInCover->FunctionFlags |= 0x400;

	return IsInCover_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.SetAnimatedTransitionPending
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ABioPawn::SetAnimatedTransitionPending ( )
{
	static UFunction* pFnSetAnimatedTransitionPending = NULL;

	if ( ! pFnSetAnimatedTransitionPending )
		pFnSetAnimatedTransitionPending = (UFunction*) UObject::GObjObjects()->Data[ 39743 ];

	ABioPawn_execSetAnimatedTransitionPending_Parms SetAnimatedTransitionPending_Parms;

	pFnSetAnimatedTransitionPending->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnimatedTransitionPending, &SetAnimatedTransitionPending_Parms, NULL );

	pFnSetAnimatedTransitionPending->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.IsAnimatedTransitionPending
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsAnimatedTransitionPending ( )
{
	static UFunction* pFnIsAnimatedTransitionPending = NULL;

	if ( ! pFnIsAnimatedTransitionPending )
		pFnIsAnimatedTransitionPending = (UFunction*) UObject::GObjObjects()->Data[ 39741 ];

	ABioPawn_execIsAnimatedTransitionPending_Parms IsAnimatedTransitionPending_Parms;

	pFnIsAnimatedTransitionPending->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAnimatedTransitionPending, &IsAnimatedTransitionPending_Parms, NULL );

	pFnIsAnimatedTransitionPending->FunctionFlags |= 0x400;

	return IsAnimatedTransitionPending_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.EndAnimatedTransition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ABioPawn::EndAnimatedTransition ( )
{
	static UFunction* pFnEndAnimatedTransition = NULL;

	if ( ! pFnEndAnimatedTransition )
		pFnEndAnimatedTransition = (UFunction*) UObject::GObjObjects()->Data[ 39740 ];

	ABioPawn_execEndAnimatedTransition_Parms EndAnimatedTransition_Parms;

	pFnEndAnimatedTransition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndAnimatedTransition, &EndAnimatedTransition_Parms, NULL );

	pFnEndAnimatedTransition->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.BeginAnimatedTransition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void ABioPawn::BeginAnimatedTransition ( )
{
	static UFunction* pFnBeginAnimatedTransition = NULL;

	if ( ! pFnBeginAnimatedTransition )
		pFnBeginAnimatedTransition = (UFunction*) UObject::GObjObjects()->Data[ 39739 ];

	ABioPawn_execBeginAnimatedTransition_Parms BeginAnimatedTransition_Parms;

	pFnBeginAnimatedTransition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginAnimatedTransition, &BeginAnimatedTransition_Parms, NULL );

	pFnBeginAnimatedTransition->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.IsInAnimatedTransition
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ABioPawn::IsInAnimatedTransition ( )
{
	static UFunction* pFnIsInAnimatedTransition = NULL;

	if ( ! pFnIsInAnimatedTransition )
		pFnIsInAnimatedTransition = (UFunction*) UObject::GObjObjects()->Data[ 39737 ];

	ABioPawn_execIsInAnimatedTransition_Parms IsInAnimatedTransition_Parms;

	pFnIsInAnimatedTransition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsInAnimatedTransition, &IsInAnimatedTransition_Parms, NULL );

	pFnIsInAnimatedTransition->FunctionFlags |= 0x400;

	return IsInAnimatedTransition_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.HACKResetRootMotion
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::HACKResetRootMotion ( )
{
	static UFunction* pFnHACKResetRootMotion = NULL;

	if ( ! pFnHACKResetRootMotion )
		pFnHACKResetRootMotion = (UFunction*) UObject::GObjObjects()->Data[ 39736 ];

	ABioPawn_execHACKResetRootMotion_Parms HACKResetRootMotion_Parms;

	pFnHACKResetRootMotion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHACKResetRootMotion, &HACKResetRootMotion_Parms, NULL );

	pFnHACKResetRootMotion->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.HardResetActionAndAnimationState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::HardResetActionAndAnimationState ( )
{
	static UFunction* pFnHardResetActionAndAnimationState = NULL;

	if ( ! pFnHardResetActionAndAnimationState )
		pFnHardResetActionAndAnimationState = (UFunction*) UObject::GObjObjects()->Data[ 39735 ];

	ABioPawn_execHardResetActionAndAnimationState_Parms HardResetActionAndAnimationState_Parms;

	pFnHardResetActionAndAnimationState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHardResetActionAndAnimationState, &HardResetActionAndAnimationState_Parms, NULL );

	pFnHardResetActionAndAnimationState->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.GetAimNodeLocation
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  AimNode                        ( CPF_Parm )
// unsigned long                  bLogError                      ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 AimLocation                    ( CPF_Parm | CPF_OutParm )

bool ABioPawn::GetAimNodeLocation ( unsigned char AimNode, unsigned long bLogError, struct FVector* AimLocation )
{
	static UFunction* pFnGetAimNodeLocation = NULL;

	if ( ! pFnGetAimNodeLocation )
		pFnGetAimNodeLocation = (UFunction*) UObject::GObjObjects()->Data[ 37954 ];

	ABioPawn_execGetAimNodeLocation_Parms GetAimNodeLocation_Parms;
	GetAimNodeLocation_Parms.AimNode = AimNode;
	GetAimNodeLocation_Parms.bLogError = bLogError;

	pFnGetAimNodeLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAimNodeLocation, &GetAimNodeLocation_Parms, NULL );

	pFnGetAimNodeLocation->FunctionFlags |= 0x400;

	if ( AimLocation )
		memcpy ( AimLocation, &GetAimNodeLocation_Parms.AimLocation, 0xC );

	return GetAimNodeLocation_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.UpdateAppearance
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ABioPawn::eventUpdateAppearance ( )
{
	static UFunction* pFnUpdateAppearance = NULL;

	if ( ! pFnUpdateAppearance )
		pFnUpdateAppearance = (UFunction*) UObject::GObjObjects()->Data[ 39730 ];

	ABioPawn_eventUpdateAppearance_Parms UpdateAppearance_Parms;

	this->ProcessEvent ( pFnUpdateAppearance, &UpdateAppearance_Parms, NULL );
};

// Function SFXGame.BioPawn.ClearMaterialInstances
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::ClearMaterialInstances ( )
{
	static UFunction* pFnClearMaterialInstances = NULL;

	if ( ! pFnClearMaterialInstances )
		pFnClearMaterialInstances = (UFunction*) UObject::GObjObjects()->Data[ 39729 ];

	ABioPawn_execClearMaterialInstances_Parms ClearMaterialInstances_Parms;

	pFnClearMaterialInstances->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearMaterialInstances, &ClearMaterialInstances_Parms, NULL );

	pFnClearMaterialInstances->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.RefreshMaterialInstances
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::RefreshMaterialInstances ( )
{
	static UFunction* pFnRefreshMaterialInstances = NULL;

	if ( ! pFnRefreshMaterialInstances )
		pFnRefreshMaterialInstances = (UFunction*) UObject::GObjObjects()->Data[ 39728 ];

	ABioPawn_execRefreshMaterialInstances_Parms RefreshMaterialInstances_Parms;

	pFnRefreshMaterialInstances->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshMaterialInstances, &RefreshMaterialInstances_Parms, NULL );

	pFnRefreshMaterialInstances->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.MergeMeshes
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXCompositeSkeletalMesh* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USkeletalMesh*           BaseMesh                       ( CPF_Parm )
// TArray< class USkeletalMesh* > AdditionalMeshes               ( CPF_Parm | CPF_NeedCtorLink )
// class USkeletalMeshComponent*  HeadMeshComponent              ( CPF_Parm | CPF_EditInline )

class USFXCompositeSkeletalMesh* ABioPawn::MergeMeshes ( class USkeletalMesh* BaseMesh, TArray< class USkeletalMesh* > AdditionalMeshes, class USkeletalMeshComponent* HeadMeshComponent )
{
	static UFunction* pFnMergeMeshes = NULL;

	if ( ! pFnMergeMeshes )
		pFnMergeMeshes = (UFunction*) UObject::GObjObjects()->Data[ 39722 ];

	ABioPawn_execMergeMeshes_Parms MergeMeshes_Parms;
	MergeMeshes_Parms.BaseMesh = BaseMesh;
	memcpy ( &MergeMeshes_Parms.AdditionalMeshes, &AdditionalMeshes, 0xC );
	MergeMeshes_Parms.HeadMeshComponent = HeadMeshComponent;

	pFnMergeMeshes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMergeMeshes, &MergeMeshes_Parms, NULL );

	pFnMergeMeshes->FunctionFlags |= 0x400;

	return MergeMeshes_Parms.ReturnValue;
};

// Function SFXGame.BioPawn.UnWeldPhysicsAssetInstance
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::UnWeldPhysicsAssetInstance ( )
{
	static UFunction* pFnUnWeldPhysicsAssetInstance = NULL;

	if ( ! pFnUnWeldPhysicsAssetInstance )
		pFnUnWeldPhysicsAssetInstance = (UFunction*) UObject::GObjObjects()->Data[ 39721 ];

	ABioPawn_execUnWeldPhysicsAssetInstance_Parms UnWeldPhysicsAssetInstance_Parms;

	pFnUnWeldPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnWeldPhysicsAssetInstance, &UnWeldPhysicsAssetInstance_Parms, NULL );

	pFnUnWeldPhysicsAssetInstance->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.WeldPhysicsAssetInstance
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::WeldPhysicsAssetInstance ( )
{
	static UFunction* pFnWeldPhysicsAssetInstance = NULL;

	if ( ! pFnWeldPhysicsAssetInstance )
		pFnWeldPhysicsAssetInstance = (UFunction*) UObject::GObjObjects()->Data[ 39720 ];

	ABioPawn_execWeldPhysicsAssetInstance_Parms WeldPhysicsAssetInstance_Parms;

	pFnWeldPhysicsAssetInstance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWeldPhysicsAssetInstance, &WeldPhysicsAssetInstance_Parms, NULL );

	pFnWeldPhysicsAssetInstance->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.ValidateRagdoll
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPawn::ValidateRagdoll ( )
{
	static UFunction* pFnValidateRagdoll = NULL;

	if ( ! pFnValidateRagdoll )
		pFnValidateRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 39719 ];

	ABioPawn_execValidateRagdoll_Parms ValidateRagdoll_Parms;

	pFnValidateRagdoll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnValidateRagdoll, &ValidateRagdoll_Parms, NULL );

	pFnValidateRagdoll->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPawn.RBCollisionCallback
// [0x00120000] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )
// class AActor*                  oImpactActor                   ( CPF_Parm )
// struct FVector                 vImpactDir                     ( CPF_Parm )

void ABioPawn::RBCollisionCallback ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir )
{
	static UFunction* pFnRBCollisionCallback = NULL;

	if ( ! pFnRBCollisionCallback )
		pFnRBCollisionCallback = (UFunction*) UObject::GObjObjects()->Data[ 34966 ];

	ABioPawn_execRBCollisionCallback_Parms RBCollisionCallback_Parms;
	RBCollisionCallback_Parms.oPawn = oPawn;
	RBCollisionCallback_Parms.oImpactActor = oImpactActor;
	memcpy ( &RBCollisionCallback_Parms.vImpactDir, &vImpactDir, 0xC );

	this->ProcessEvent ( pFnRBCollisionCallback, &RBCollisionCallback_Parms, NULL );
};

// Function SFXGame.SFXCompositeSkeletalMesh.MatchesMerge
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USkeletalMesh*           BaseMesh                       ( CPF_Parm )
// TArray< class USkeletalMesh* > AdditionalMeshes               ( CPF_Parm | CPF_NeedCtorLink )
// class USkeletalMeshComponent*  HeadMeshComponent              ( CPF_Parm | CPF_EditInline )

bool USFXCompositeSkeletalMesh::MatchesMerge ( class USkeletalMesh* BaseMesh, TArray< class USkeletalMesh* > AdditionalMeshes, class USkeletalMeshComponent* HeadMeshComponent )
{
	static UFunction* pFnMatchesMerge = NULL;

	if ( ! pFnMatchesMerge )
		pFnMatchesMerge = (UFunction*) UObject::GObjObjects()->Data[ 53872 ];

	USFXCompositeSkeletalMesh_execMatchesMerge_Parms MatchesMerge_Parms;
	MatchesMerge_Parms.BaseMesh = BaseMesh;
	memcpy ( &MatchesMerge_Parms.AdditionalMeshes, &AdditionalMeshes, 0xC );
	MatchesMerge_Parms.HeadMeshComponent = HeadMeshComponent;

	pFnMatchesMerge->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMatchesMerge, &MatchesMerge_Parms, NULL );

	pFnMatchesMerge->FunctionFlags |= 0x400;

	return MatchesMerge_Parms.ReturnValue;
};

// Function SFXGame.BioActive.StartActiveFromScript
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioActive::StartActiveFromScript ( )
{
	static UFunction* pFnStartActiveFromScript = NULL;

	if ( ! pFnStartActiveFromScript )
		pFnStartActiveFromScript = (UFunction*) UObject::GObjObjects()->Data[ 29456 ];

	UBioActive_execStartActiveFromScript_Parms StartActiveFromScript_Parms;

	pFnStartActiveFromScript->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartActiveFromScript, &StartActiveFromScript_Parms, NULL );

	pFnStartActiveFromScript->FunctionFlags |= 0x400;

	return StartActiveFromScript_Parms.ReturnValue;
};

// Function SFXGame.BioActive.EndActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioActive::EndActive ( )
{
	static UFunction* pFnEndActive = NULL;

	if ( ! pFnEndActive )
		pFnEndActive = (UFunction*) UObject::GObjObjects()->Data[ 29454 ];

	UBioActive_execEndActive_Parms EndActive_Parms;

	pFnEndActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndActive, &EndActive_Parms, NULL );

	pFnEndActive->FunctionFlags |= 0x400;

	return EndActive_Parms.ReturnValue;
};

// Function SFXGame.BioActive.ValidSuperMode
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eMode                          ( CPF_Parm )

bool UBioActive::eventValidSuperMode ( unsigned char eMode )
{
	static UFunction* pFnValidSuperMode = NULL;

	if ( ! pFnValidSuperMode )
		pFnValidSuperMode = (UFunction*) UObject::GObjObjects()->Data[ 29451 ];

	UBioActive_eventValidSuperMode_Parms ValidSuperMode_Parms;
	ValidSuperMode_Parms.eMode = eMode;

	this->ProcessEvent ( pFnValidSuperMode, &ValidSuperMode_Parms, NULL );

	return ValidSuperMode_Parms.ReturnValue;
};

// Function SFXGame.BioActive.GetEventTypeName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UBioActive::eventGetEventTypeName ( )
{
	static UFunction* pFnGetEventTypeName = NULL;

	if ( ! pFnGetEventTypeName )
		pFnGetEventTypeName = (UFunction*) UObject::GObjObjects()->Data[ 29448 ];

	UBioActive_eventGetEventTypeName_Parms GetEventTypeName_Parms;

	this->ProcessEvent ( pFnGetEventTypeName, &GetEventTypeName_Parms, NULL );

	return GetEventTypeName_Parms.ReturnValue;
};

// Function SFXGame.BioActive.Initialize
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  oOwner                         ( CPF_Parm )

void UBioActive::Initialize ( class AActor* oOwner )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 29446 ];

	UBioActive_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.oOwner = oOwner;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActive.InitializeInternal
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioActive::InitializeInternal ( )
{
	static UFunction* pFnInitializeInternal = NULL;

	if ( ! pFnInitializeInternal )
		pFnInitializeInternal = (UFunction*) UObject::GObjObjects()->Data[ 29445 ];

	UBioActive_execInitializeInternal_Parms InitializeInternal_Parms;

	pFnInitializeInternal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeInternal, &InitializeInternal_Parms, NULL );

	pFnInitializeInternal->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActivePower.ClearPreviousCoverAction
// [0x00020002] 
// Parameters infos:

void UBioActivePower::ClearPreviousCoverAction ( )
{
	static UFunction* pFnClearPreviousCoverAction = NULL;

	if ( ! pFnClearPreviousCoverAction )
		pFnClearPreviousCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 29552 ];

	UBioActivePower_execClearPreviousCoverAction_Parms ClearPreviousCoverAction_Parms;

	this->ProcessEvent ( pFnClearPreviousCoverAction, &ClearPreviousCoverAction_Parms, NULL );
};

// Function SFXGame.BioActivePower.OnCastAt
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )
// class AActor*                  Caster                         ( CPF_Parm )
// class UBioPower*               Power                          ( CPF_Parm )

void UBioActivePower::eventOnCastAt ( class AActor* Target, class AActor* Caster, class UBioPower* Power )
{
	static UFunction* pFnOnCastAt = NULL;

	if ( ! pFnOnCastAt )
		pFnOnCastAt = (UFunction*) UObject::GObjObjects()->Data[ 29548 ];

	UBioActivePower_eventOnCastAt_Parms OnCastAt_Parms;
	OnCastAt_Parms.Target = Target;
	OnCastAt_Parms.Caster = Caster;
	OnCastAt_Parms.Power = Power;

	this->ProcessEvent ( pFnOnCastAt, &OnCastAt_Parms, NULL );
};

// Function SFXGame.BioActivePower.ReleasedOnActor
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioActivePower::eventReleasedOnActor ( )
{
	static UFunction* pFnReleasedOnActor = NULL;

	if ( ! pFnReleasedOnActor )
		pFnReleasedOnActor = (UFunction*) UObject::GObjObjects()->Data[ 29542 ];

	UBioActivePower_eventReleasedOnActor_Parms ReleasedOnActor_Parms;

	this->ProcessEvent ( pFnReleasedOnActor, &ReleasedOnActor_Parms, NULL );
};

// Function SFXGame.BioActivePower.TriggerPowerVocalization
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioActivePower::eventTriggerPowerVocalization ( )
{
	static UFunction* pFnTriggerPowerVocalization = NULL;

	if ( ! pFnTriggerPowerVocalization )
		pFnTriggerPowerVocalization = (UFunction*) UObject::GObjObjects()->Data[ 29540 ];

	UBioActivePower_eventTriggerPowerVocalization_Parms TriggerPowerVocalization_Parms;

	this->ProcessEvent ( pFnTriggerPowerVocalization, &TriggerPowerVocalization_Parms, NULL );
};

// Function SFXGame.BioActivePower.SpawnProjectile
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* UBioActivePower::eventSpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = (UFunction*) UObject::GObjObjects()->Data[ 29515 ];

	UBioActivePower_eventSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );

	return SpawnProjectile_Parms.ReturnValue;
};

// Function SFXGame.BioActivePower.AimProjectilePower
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioActivePower::eventAimProjectilePower ( )
{
	static UFunction* pFnAimProjectilePower = NULL;

	if ( ! pFnAimProjectilePower )
		pFnAimProjectilePower = (UFunction*) UObject::GObjObjects()->Data[ 29507 ];

	UBioActivePower_eventAimProjectilePower_Parms AimProjectilePower_Parms;

	this->ProcessEvent ( pFnAimProjectilePower, &AimProjectilePower_Parms, NULL );

	return AimProjectilePower_Parms.ReturnValue;
};

// Function SFXGame.BioActivePower.OnAnimReleaseEnd
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioActivePower::OnAnimReleaseEnd ( )
{
	static UFunction* pFnOnAnimReleaseEnd = NULL;

	if ( ! pFnOnAnimReleaseEnd )
		pFnOnAnimReleaseEnd = (UFunction*) UObject::GObjObjects()->Data[ 29506 ];

	UBioActivePower_execOnAnimReleaseEnd_Parms OnAnimReleaseEnd_Parms;

	pFnOnAnimReleaseEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnAnimReleaseEnd, &OnAnimReleaseEnd_Parms, NULL );

	pFnOnAnimReleaseEnd->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActivePower.OnAnimReleaseBegin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioActivePower::OnAnimReleaseBegin ( )
{
	static UFunction* pFnOnAnimReleaseBegin = NULL;

	if ( ! pFnOnAnimReleaseBegin )
		pFnOnAnimReleaseBegin = (UFunction*) UObject::GObjObjects()->Data[ 29505 ];

	UBioActivePower_execOnAnimReleaseBegin_Parms OnAnimReleaseBegin_Parms;

	pFnOnAnimReleaseBegin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnAnimReleaseBegin, &OnAnimReleaseBegin_Parms, NULL );

	pFnOnAnimReleaseBegin->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActivePower.OnAnimCastingEnd
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioActivePower::OnAnimCastingEnd ( )
{
	static UFunction* pFnOnAnimCastingEnd = NULL;

	if ( ! pFnOnAnimCastingEnd )
		pFnOnAnimCastingEnd = (UFunction*) UObject::GObjObjects()->Data[ 29504 ];

	UBioActivePower_execOnAnimCastingEnd_Parms OnAnimCastingEnd_Parms;

	pFnOnAnimCastingEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnAnimCastingEnd, &OnAnimCastingEnd_Parms, NULL );

	pFnOnAnimCastingEnd->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActivePower.OnAnimCastingBegin
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioActivePower::OnAnimCastingBegin ( )
{
	static UFunction* pFnOnAnimCastingBegin = NULL;

	if ( ! pFnOnAnimCastingBegin )
		pFnOnAnimCastingBegin = (UFunction*) UObject::GObjObjects()->Data[ 29503 ];

	UBioActivePower_execOnAnimCastingBegin_Parms OnAnimCastingBegin_Parms;

	pFnOnAnimCastingBegin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnAnimCastingBegin, &OnAnimCastingBegin_Parms, NULL );

	pFnOnAnimCastingBegin->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActivePower.UpdatePowerOrder
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bOrderedByPlayer               ( CPF_Parm )
// unsigned long                  bIgnoreSuppression             ( CPF_OptionalParm | CPF_Parm )

void UBioActivePower::UpdatePowerOrder ( unsigned long bOrderedByPlayer, unsigned long bIgnoreSuppression )
{
	static UFunction* pFnUpdatePowerOrder = NULL;

	if ( ! pFnUpdatePowerOrder )
		pFnUpdatePowerOrder = (UFunction*) UObject::GObjObjects()->Data[ 29500 ];

	UBioActivePower_execUpdatePowerOrder_Parms UpdatePowerOrder_Parms;
	UpdatePowerOrder_Parms.bOrderedByPlayer = bOrderedByPlayer;
	UpdatePowerOrder_Parms.bIgnoreSuppression = bIgnoreSuppression;

	pFnUpdatePowerOrder->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdatePowerOrder, &UpdatePowerOrder_Parms, NULL );

	pFnUpdatePowerOrder->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActivePower.SetTargetLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 vLocation                      ( CPF_Parm )

void UBioActivePower::SetTargetLocation ( struct FVector vLocation )
{
	static UFunction* pFnSetTargetLocation = NULL;

	if ( ! pFnSetTargetLocation )
		pFnSetTargetLocation = (UFunction*) UObject::GObjObjects()->Data[ 29498 ];

	UBioActivePower_execSetTargetLocation_Parms SetTargetLocation_Parms;
	memcpy ( &SetTargetLocation_Parms.vLocation, &vLocation, 0xC );

	pFnSetTargetLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTargetLocation, &SetTargetLocation_Parms, NULL );

	pFnSetTargetLocation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActivePower.SetTargetActor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )

void UBioActivePower::SetTargetActor ( class AActor* oTarget )
{
	static UFunction* pFnSetTargetActor = NULL;

	if ( ! pFnSetTargetActor )
		pFnSetTargetActor = (UFunction*) UObject::GObjObjects()->Data[ 29496 ];

	UBioActivePower_execSetTargetActor_Parms SetTargetActor_Parms;
	SetTargetActor_Parms.oTarget = oTarget;

	pFnSetTargetActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTargetActor, &SetTargetActor_Parms, NULL );

	pFnSetTargetActor->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActivePower.CancelPower
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bOnlyCancelIfCasting           ( CPF_Parm )

bool UBioActivePower::CancelPower ( unsigned long bOnlyCancelIfCasting )
{
	static UFunction* pFnCancelPower = NULL;

	if ( ! pFnCancelPower )
		pFnCancelPower = (UFunction*) UObject::GObjObjects()->Data[ 29493 ];

	UBioActivePower_execCancelPower_Parms CancelPower_Parms;
	CancelPower_Parms.bOnlyCancelIfCasting = bOnlyCancelIfCasting;

	pFnCancelPower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCancelPower, &CancelPower_Parms, NULL );

	pFnCancelPower->FunctionFlags |= 0x400;

	return CancelPower_Parms.ReturnValue;
};

// Function SFXGame.BioActivePower.AnimationReadyForPowerRelease
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioActivePower::AnimationReadyForPowerRelease ( )
{
	static UFunction* pFnAnimationReadyForPowerRelease = NULL;

	if ( ! pFnAnimationReadyForPowerRelease )
		pFnAnimationReadyForPowerRelease = (UFunction*) UObject::GObjObjects()->Data[ 29492 ];

	UBioActivePower_execAnimationReadyForPowerRelease_Parms AnimationReadyForPowerRelease_Parms;

	pFnAnimationReadyForPowerRelease->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnimationReadyForPowerRelease, &AnimationReadyForPowerRelease_Parms, NULL );

	pFnAnimationReadyForPowerRelease->FunctionFlags |= 0x400;
};

// Function SFXGame.BioActiveUseArtPlaceable.DisplayProgress
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioActiveUseArtPlaceable::DisplayProgress ( )
{
	static UFunction* pFnDisplayProgress = NULL;

	if ( ! pFnDisplayProgress )
		pFnDisplayProgress = (UFunction*) UObject::GObjObjects()->Data[ 29591 ];

	UBioActiveUseArtPlaceable_execDisplayProgress_Parms DisplayProgress_Parms;

	pFnDisplayProgress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayProgress, &DisplayProgress_Parms, NULL );

	pFnDisplayProgress->FunctionFlags |= 0x400;

	return DisplayProgress_Parms.ReturnValue;
};

// Function SFXGame.BioActiveUseArtPlaceable.GetProgress
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float UBioActiveUseArtPlaceable::GetProgress ( )
{
	static UFunction* pFnGetProgress = NULL;

	if ( ! pFnGetProgress )
		pFnGetProgress = (UFunction*) UObject::GObjObjects()->Data[ 29589 ];

	UBioActiveUseArtPlaceable_execGetProgress_Parms GetProgress_Parms;

	pFnGetProgress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProgress, &GetProgress_Parms, NULL );

	pFnGetProgress->FunctionFlags |= 0x400;

	return GetProgress_Parms.ReturnValue;
};

// Function SFXGame.BioActiveUseArtPlaceable.ValidSuperMode
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eMode                          ( CPF_Parm )

bool UBioActiveUseArtPlaceable::eventValidSuperMode ( unsigned char eMode )
{
	static UFunction* pFnValidSuperMode = NULL;

	if ( ! pFnValidSuperMode )
		pFnValidSuperMode = (UFunction*) UObject::GObjObjects()->Data[ 29586 ];

	UBioActiveUseArtPlaceable_eventValidSuperMode_Parms ValidSuperMode_Parms;
	ValidSuperMode_Parms.eMode = eMode;

	this->ProcessEvent ( pFnValidSuperMode, &ValidSuperMode_Parms, NULL );

	return ValidSuperMode_Parms.ReturnValue;
};

// Function SFXGame.BioActiveUseArtPlaceable.InitializeInternal
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioActiveUseArtPlaceable::InitializeInternal ( )
{
	static UFunction* pFnInitializeInternal = NULL;

	if ( ! pFnInitializeInternal )
		pFnInitializeInternal = (UFunction*) UObject::GObjObjects()->Data[ 29585 ];

	UBioActiveUseArtPlaceable_execInitializeInternal_Parms InitializeInternal_Parms;

	pFnInitializeInternal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeInternal, &InitializeInternal_Parms, NULL );

	pFnInitializeInternal->FunctionFlags |= 0x400;
};

// Function SFXGame.BioReactive.Initialize
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class AActor*                  oOwner                         ( CPF_Parm )
// class AActor*                  oInstigator                    ( CPF_Parm )

void UBioReactive::Initialize ( class AActor* oOwner, class AActor* oInstigator )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 43686 ];

	UBioReactive_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.oOwner = oOwner;
	Initialize_Parms.oInstigator = oInstigator;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function SFXGame.BioReactive.InitializeInternal
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioReactive::InitializeInternal ( )
{
	static UFunction* pFnInitializeInternal = NULL;

	if ( ! pFnInitializeInternal )
		pFnInitializeInternal = (UFunction*) UObject::GObjObjects()->Data[ 43685 ];

	UBioReactive_execInitializeInternal_Parms InitializeInternal_Parms;

	pFnInitializeInternal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeInternal, &InitializeInternal_Parms, NULL );

	pFnInitializeInternal->FunctionFlags |= 0x400;
};

// Function SFXGame.BioReactiveUseArtPlaceable.InitializeInternal
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioReactiveUseArtPlaceable::InitializeInternal ( )
{
	static UFunction* pFnInitializeInternal = NULL;

	if ( ! pFnInitializeInternal )
		pFnInitializeInternal = (UFunction*) UObject::GObjObjects()->Data[ 43696 ];

	UBioReactiveUseArtPlaceable_execInitializeInternal_Parms InitializeInternal_Parms;

	pFnInitializeInternal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeInternal, &InitializeInternal_Parms, NULL );

	pFnInitializeInternal->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameProperty.HasEffect
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GameEffectClass                ( CPF_Parm )

bool UBioGameProperty::HasEffect ( class UClass* GameEffectClass )
{
	static UFunction* pFnHasEffect = NULL;

	if ( ! pFnHasEffect )
		pFnHasEffect = (UFunction*) UObject::GObjObjects()->Data[ 36862 ];

	UBioGameProperty_execHasEffect_Parms HasEffect_Parms;
	HasEffect_Parms.GameEffectClass = GameEffectClass;

	pFnHasEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasEffect, &HasEffect_Parms, NULL );

	pFnHasEffect->FunctionFlags |= 0x400;

	return HasEffect_Parms.ReturnValue;
};

// Function SFXGame.BioGameProperty.Unapply
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UObject*                 pTargetObject                  ( CPF_Parm )

void UBioGameProperty::Unapply ( class UObject* pTargetObject )
{
	static UFunction* pFnUnapply = NULL;

	if ( ! pFnUnapply )
		pFnUnapply = (UFunction*) UObject::GObjObjects()->Data[ 36860 ];

	UBioGameProperty_execUnapply_Parms Unapply_Parms;
	Unapply_Parms.pTargetObject = pTargetObject;

	pFnUnapply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapply, &Unapply_Parms, NULL );

	pFnUnapply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameProperty.Apply
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UObject*                 pTargetObject                  ( CPF_Parm )

void UBioGameProperty::Apply ( class UObject* pTargetObject )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = (UFunction*) UObject::GObjObjects()->Data[ 36858 ];

	UBioGameProperty_execApply_Parms Apply_Parms;
	Apply_Parms.pTargetObject = pTargetObject;

	pFnApply->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );

	pFnApply->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameProperty.ToLine
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioGameProperty::eventToLine ( )
{
	static UFunction* pFnToLine = NULL;

	if ( ! pFnToLine )
		pFnToLine = (UFunction*) UObject::GObjObjects()->Data[ 36852 ];

	UBioGameProperty_eventToLine_Parms ToLine_Parms;

	this->ProcessEvent ( pFnToLine, &ToLine_Parms, NULL );

	return ToLine_Parms.ReturnValue;
};

// Function SFXGame.BioGameProperty.ToString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 sIndent                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

struct FString UBioGameProperty::eventToString ( struct FString sIndent )
{
	static UFunction* pFnToString = NULL;

	if ( ! pFnToString )
		pFnToString = (UFunction*) UObject::GObjObjects()->Data[ 36848 ];

	UBioGameProperty_eventToString_Parms ToString_Parms;
	memcpy ( &ToString_Parms.sIndent, &sIndent, 0xC );

	this->ProcessEvent ( pFnToString, &ToString_Parms, NULL );

	return ToString_Parms.ReturnValue;
};

// Function SFXGame.BioGameProperty.CreateInstant
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioGameProperty* UBioGameProperty::eventCreateInstant ( )
{
	static UFunction* pFnCreateInstant = NULL;

	if ( ! pFnCreateInstant )
		pFnCreateInstant = (UFunction*) UObject::GObjObjects()->Data[ 36845 ];

	UBioGameProperty_eventCreateInstant_Parms CreateInstant_Parms;

	this->ProcessEvent ( pFnCreateInstant, &CreateInstant_Parms, NULL );

	return CreateInstant_Parms.ReturnValue;
};

// Function SFXGame.BioGameProperty.CreateGameProperty
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGameProperty*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioGamePropertyContainer* oGPContainer                   ( CPF_Parm )
// class UObject*                 oOwner                         ( CPF_Parm )
// unsigned char                  ePropertyType                  ( CPF_Parm )
// float                          fTimedDuration                 ( CPF_Parm )
// unsigned long                  bTicked                        ( CPF_Parm )
// float                          fTickInterval                  ( CPF_Parm )
// int                            nGamePropertyGroup             ( CPF_Parm )
// float                          fPower                         ( CPF_Parm )
// unsigned long                  bFireAndForget                 ( CPF_Parm )

class UBioGameProperty* UBioGameProperty::eventCreateGameProperty ( class UBioGamePropertyContainer* oGPContainer, class UObject* oOwner, unsigned char ePropertyType, float fTimedDuration, unsigned long bTicked, float fTickInterval, int nGamePropertyGroup, float fPower, unsigned long bFireAndForget )
{
	static UFunction* pFnCreateGameProperty = NULL;

	if ( ! pFnCreateGameProperty )
		pFnCreateGameProperty = (UFunction*) UObject::GObjObjects()->Data[ 36833 ];

	UBioGameProperty_eventCreateGameProperty_Parms CreateGameProperty_Parms;
	CreateGameProperty_Parms.oGPContainer = oGPContainer;
	CreateGameProperty_Parms.oOwner = oOwner;
	CreateGameProperty_Parms.ePropertyType = ePropertyType;
	CreateGameProperty_Parms.fTimedDuration = fTimedDuration;
	CreateGameProperty_Parms.bTicked = bTicked;
	CreateGameProperty_Parms.fTickInterval = fTickInterval;
	CreateGameProperty_Parms.nGamePropertyGroup = nGamePropertyGroup;
	CreateGameProperty_Parms.fPower = fPower;
	CreateGameProperty_Parms.bFireAndForget = bFireAndForget;

	this->ProcessEvent ( pFnCreateGameProperty, &CreateGameProperty_Parms, NULL );

	return CreateGameProperty_Parms.ReturnValue;
};

// Function SFXGame.BioGameProperty.RunTests
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )

void UBioGameProperty::RunTests ( class ABioPawn* oPawn )
{
	static UFunction* pFnRunTests = NULL;

	if ( ! pFnRunTests )
		pFnRunTests = (UFunction*) UObject::GObjObjects()->Data[ 36831 ];

	UBioGameProperty_execRunTests_Parms RunTests_Parms;
	RunTests_Parms.oPawn = oPawn;

	pFnRunTests->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRunTests, &RunTests_Parms, NULL );

	pFnRunTests->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameProperty.ScaleToLevel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nPowerLevel                    ( CPF_Parm )

void UBioGameProperty::ScaleToLevel ( int nPowerLevel )
{
	static UFunction* pFnScaleToLevel = NULL;

	if ( ! pFnScaleToLevel )
		pFnScaleToLevel = (UFunction*) UObject::GObjObjects()->Data[ 36829 ];

	UBioGameProperty_execScaleToLevel_Parms ScaleToLevel_Parms;
	ScaleToLevel_Parms.nPowerLevel = nPowerLevel;

	pFnScaleToLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScaleToLevel, &ScaleToLevel_Parms, NULL );

	pFnScaleToLevel->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameProperty.RemoveEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )

void UBioGameProperty::RemoveEffects ( class UObject* oTarget )
{
	static UFunction* pFnRemoveEffects = NULL;

	if ( ! pFnRemoveEffects )
		pFnRemoveEffects = (UFunction*) UObject::GObjObjects()->Data[ 36827 ];

	UBioGameProperty_execRemoveEffects_Parms RemoveEffects_Parms;
	RemoveEffects_Parms.oTarget = oTarget;

	pFnRemoveEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveEffects, &RemoveEffects_Parms, NULL );

	pFnRemoveEffects->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameProperty.ApplyEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 oTarget                        ( CPF_Parm )
// unsigned long                  bIsInstant                     ( CPF_OptionalParm | CPF_Parm )

void UBioGameProperty::ApplyEffects ( class UObject* oTarget, unsigned long bIsInstant )
{
	static UFunction* pFnApplyEffects = NULL;

	if ( ! pFnApplyEffects )
		pFnApplyEffects = (UFunction*) UObject::GObjObjects()->Data[ 36824 ];

	UBioGameProperty_execApplyEffects_Parms ApplyEffects_Parms;
	ApplyEffects_Parms.oTarget = oTarget;
	ApplyEffects_Parms.bIsInstant = bIsInstant;

	pFnApplyEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyEffects, &ApplyEffects_Parms, NULL );

	pFnApplyEffects->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameProperty.TickEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void UBioGameProperty::TickEffects ( float fDeltaTime )
{
	static UFunction* pFnTickEffects = NULL;

	if ( ! pFnTickEffects )
		pFnTickEffects = (UFunction*) UObject::GObjObjects()->Data[ 36822 ];

	UBioGameProperty_execTickEffects_Parms TickEffects_Parms;
	TickEffects_Parms.fDeltaTime = fDeltaTime;

	pFnTickEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickEffects, &TickEffects_Parms, NULL );

	pFnTickEffects->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGameProperty.TestConditionals
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

bool UBioGameProperty::TestConditionals ( class UObject* oTarget )
{
	static UFunction* pFnTestConditionals = NULL;

	if ( ! pFnTestConditionals )
		pFnTestConditionals = (UFunction*) UObject::GObjObjects()->Data[ 36819 ];

	UBioGameProperty_execTestConditionals_Parms TestConditionals_Parms;
	TestConditionals_Parms.oTarget = oTarget;

	pFnTestConditionals->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTestConditionals, &TestConditionals_Parms, NULL );

	pFnTestConditionals->FunctionFlags |= 0x400;

	return TestConditionals_Parms.ReturnValue;
};

// Function SFXGame.BioGameProperty.AddConditionalToProperty
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioGamePropertyConditional* oConditional                   ( CPF_Parm )

void UBioGameProperty::eventAddConditionalToProperty ( class UBioGamePropertyConditional* oConditional )
{
	static UFunction* pFnAddConditionalToProperty = NULL;

	if ( ! pFnAddConditionalToProperty )
		pFnAddConditionalToProperty = (UFunction*) UObject::GObjObjects()->Data[ 36817 ];

	UBioGameProperty_eventAddConditionalToProperty_Parms AddConditionalToProperty_Parms;
	AddConditionalToProperty_Parms.oConditional = oConditional;

	this->ProcessEvent ( pFnAddConditionalToProperty, &AddConditionalToProperty_Parms, NULL );
};

// Function SFXGame.BioGameProperty.AddGameEffectToProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioGameEffect*          oEffect                        ( CPF_Parm )

void UBioGameProperty::AddGameEffectToProperty ( class UBioGameEffect* oEffect )
{
	static UFunction* pFnAddGameEffectToProperty = NULL;

	if ( ! pFnAddGameEffectToProperty )
		pFnAddGameEffectToProperty = (UFunction*) UObject::GObjObjects()->Data[ 36815 ];

	UBioGameProperty_execAddGameEffectToProperty_Parms AddGameEffectToProperty_Parms;
	AddGameEffectToProperty_Parms.oEffect = oEffect;

	pFnAddGameEffectToProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddGameEffectToProperty, &AddGameEffectToProperty_Parms, NULL );

	pFnAddGameEffectToProperty->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyConditional.Uninitialize
// [0x00020000] 
// Parameters infos:

void UBioGamePropertyConditional::Uninitialize ( )
{
	static UFunction* pFnUninitialize = NULL;

	if ( ! pFnUninitialize )
		pFnUninitialize = (UFunction*) UObject::GObjObjects()->Data[ 36870 ];

	UBioGamePropertyConditional_execUninitialize_Parms Uninitialize_Parms;

	this->ProcessEvent ( pFnUninitialize, &Uninitialize_Parms, NULL );
};

// Function SFXGame.BioGamePropertyConditional.Initialize
// [0x00020000] 
// Parameters infos:

void UBioGamePropertyConditional::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 36869 ];

	UBioGamePropertyConditional_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.BioGamePropertyConditionalImporter.LoadGamePropertyConditional
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// class UBioGamePropertyConditional* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBio2DA*                 o2DA                           ( CPF_Parm )
// int                            nConditionalId                 ( CPF_Parm )
// class UBioGameProperty*        oOwner                         ( CPF_Parm )

class UBioGamePropertyConditional* UBioGamePropertyConditionalImporter::LoadGamePropertyConditional ( class UBio2DA* o2DA, int nConditionalId, class UBioGameProperty* oOwner )
{
	static UFunction* pFnLoadGamePropertyConditional = NULL;

	if ( ! pFnLoadGamePropertyConditional )
		pFnLoadGamePropertyConditional = (UFunction*) UObject::GObjObjects()->Data[ 36871 ];

	UBioGamePropertyConditionalImporter_execLoadGamePropertyConditional_Parms LoadGamePropertyConditional_Parms;
	LoadGamePropertyConditional_Parms.o2DA = o2DA;
	LoadGamePropertyConditional_Parms.nConditionalId = nConditionalId;
	LoadGamePropertyConditional_Parms.oOwner = oOwner;

	pFnLoadGamePropertyConditional->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadGamePropertyConditional, &LoadGamePropertyConditional_Parms, NULL );

	pFnLoadGamePropertyConditional->FunctionFlags |= 0x400;

	return LoadGamePropertyConditional_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyConditionalIsActorType.SetActorType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   nmActorType                    ( CPF_Parm )

void UBioGamePropertyConditionalIsActorType::SetActorType ( struct FName nmActorType )
{
	static UFunction* pFnSetActorType = NULL;

	if ( ! pFnSetActorType )
		pFnSetActorType = (UFunction*) UObject::GObjObjects()->Data[ 36877 ];

	UBioGamePropertyConditionalIsActorType_execSetActorType_Parms SetActorType_Parms;
	memcpy ( &SetActorType_Parms.nmActorType, &nmActorType, 0x8 );

	this->ProcessEvent ( pFnSetActorType, &SetActorType_Parms, NULL );
};

// Function SFXGame.BioGamePropertyContainer.ToString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 sIndent                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

struct FString UBioGamePropertyContainer::eventToString ( struct FString sIndent )
{
	static UFunction* pFnToString = NULL;

	if ( ! pFnToString )
		pFnToString = (UFunction*) UObject::GObjObjects()->Data[ 31414 ];

	UBioGamePropertyContainer_eventToString_Parms ToString_Parms;
	memcpy ( &ToString_Parms.sIndent, &sIndent, 0xC );

	this->ProcessEvent ( pFnToString, &ToString_Parms, NULL );

	return ToString_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyContainer.OnGPEvent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  eEvent                         ( CPF_Parm )
// class UObject*                 pTarget                        ( CPF_Parm )

void UBioGamePropertyContainer::OnGPEvent ( unsigned char eEvent, class UObject* pTarget )
{
	static UFunction* pFnOnGPEvent = NULL;

	if ( ! pFnOnGPEvent )
		pFnOnGPEvent = (UFunction*) UObject::GObjObjects()->Data[ 31411 ];

	UBioGamePropertyContainer_execOnGPEvent_Parms OnGPEvent_Parms;
	OnGPEvent_Parms.eEvent = eEvent;
	OnGPEvent_Parms.pTarget = pTarget;

	pFnOnGPEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnGPEvent, &OnGPEvent_Parms, NULL );

	pFnOnGPEvent->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyContainer.ScaleToLevel
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nLevel                         ( CPF_Parm )

void UBioGamePropertyContainer::eventScaleToLevel ( int nLevel )
{
	static UFunction* pFnScaleToLevel = NULL;

	if ( ! pFnScaleToLevel )
		pFnScaleToLevel = (UFunction*) UObject::GObjObjects()->Data[ 31408 ];

	UBioGamePropertyContainer_eventScaleToLevel_Parms ScaleToLevel_Parms;
	ScaleToLevel_Parms.nLevel = nLevel;

	this->ProcessEvent ( pFnScaleToLevel, &ScaleToLevel_Parms, NULL );
};

// Function SFXGame.BioGamePropertyContainer.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void UBioGamePropertyContainer::Tick ( float fDeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 31406 ];

	UBioGamePropertyContainer_execTick_Parms Tick_Parms;
	Tick_Parms.fDeltaTime = fDeltaTime;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyEffectLevelIterator.Initialize
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBio2DA*                 o2DA                           ( CPF_Parm )
// int                            nKeyColumn                     ( CPF_Parm )
// int                            nKey                           ( CPF_Parm )

void UBioGamePropertyEffectLevelIterator::Initialize ( class UBio2DA* o2DA, int nKeyColumn, int nKey )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 36886 ];

	UBioGamePropertyEffectLevelIterator_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.o2DA = o2DA;
	Initialize_Parms.nKeyColumn = nKeyColumn;
	Initialize_Parms.nKey = nKey;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyEventDispatcher.ProcessQueue
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioGamePropertyEventDispatcher::ProcessQueue ( )
{
	static UFunction* pFnProcessQueue = NULL;

	if ( ! pFnProcessQueue )
		pFnProcessQueue = (UFunction*) UObject::GObjObjects()->Data[ 31402 ];

	UBioGamePropertyEventDispatcher_execProcessQueue_Parms ProcessQueue_Parms;

	pFnProcessQueue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessQueue, &ProcessQueue_Parms, NULL );

	pFnProcessQueue->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyEventDispatcher.UnregisterGameProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioGameProperty*        oGameProp                      ( CPF_Parm )

void UBioGamePropertyEventDispatcher::UnregisterGameProperty ( class UBioGameProperty* oGameProp )
{
	static UFunction* pFnUnregisterGameProperty = NULL;

	if ( ! pFnUnregisterGameProperty )
		pFnUnregisterGameProperty = (UFunction*) UObject::GObjObjects()->Data[ 31400 ];

	UBioGamePropertyEventDispatcher_execUnregisterGameProperty_Parms UnregisterGameProperty_Parms;
	UnregisterGameProperty_Parms.oGameProp = oGameProp;

	pFnUnregisterGameProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnregisterGameProperty, &UnregisterGameProperty_Parms, NULL );

	pFnUnregisterGameProperty->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyEventDispatcher.RegisterGameProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioGameProperty*        oGameProp                      ( CPF_Parm )

void UBioGamePropertyEventDispatcher::RegisterGameProperty ( class UBioGameProperty* oGameProp )
{
	static UFunction* pFnRegisterGameProperty = NULL;

	if ( ! pFnRegisterGameProperty )
		pFnRegisterGameProperty = (UFunction*) UObject::GObjObjects()->Data[ 31398 ];

	UBioGamePropertyEventDispatcher_execRegisterGameProperty_Parms RegisterGameProperty_Parms;
	RegisterGameProperty_Parms.oGameProp = oGameProp;

	pFnRegisterGameProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRegisterGameProperty, &RegisterGameProperty_Parms, NULL );

	pFnRegisterGameProperty->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyEventDispatcher.OnEvent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  eEvent                         ( CPF_Parm )
// class UObject*                 pTarget                        ( CPF_Parm )

void UBioGamePropertyEventDispatcher::OnEvent ( unsigned char eEvent, class UObject* pTarget )
{
	static UFunction* pFnOnEvent = NULL;

	if ( ! pFnOnEvent )
		pFnOnEvent = (UFunction*) UObject::GObjObjects()->Data[ 31395 ];

	UBioGamePropertyEventDispatcher_execOnEvent_Parms OnEvent_Parms;
	OnEvent_Parms.eEvent = eEvent;
	OnEvent_Parms.pTarget = pTarget;

	pFnOnEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnEvent, &OnEvent_Parms, NULL );

	pFnOnEvent->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyEventDispatcher.LogDebugInfo
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioGamePropertyEventSet* pEvents                        ( CPF_Parm )
// class UObject*                 pTarget                        ( CPF_Parm )

void UBioGamePropertyEventDispatcher::LogDebugInfo ( class UBioGamePropertyEventSet* pEvents, class UObject* pTarget )
{
	static UFunction* pFnLogDebugInfo = NULL;

	if ( ! pFnLogDebugInfo )
		pFnLogDebugInfo = (UFunction*) UObject::GObjObjects()->Data[ 31392 ];

	UBioGamePropertyEventDispatcher_execLogDebugInfo_Parms LogDebugInfo_Parms;
	LogDebugInfo_Parms.pEvents = pEvents;
	LogDebugInfo_Parms.pTarget = pTarget;

	pFnLogDebugInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogDebugInfo, &LogDebugInfo_Parms, NULL );

	pFnLogDebugInfo->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyEventSet.Create3
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGamePropertyEventSet* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEvent1                        ( CPF_Parm )
// unsigned char                  eEvent2                        ( CPF_Parm )
// unsigned char                  eEvent3                        ( CPF_Parm )
// class UObject*                 oSource                        ( CPF_OptionalParm | CPF_Parm )

class UBioGamePropertyEventSet* UBioGamePropertyEventSet::eventCreate3 ( unsigned char eEvent1, unsigned char eEvent2, unsigned char eEvent3, class UObject* oSource )
{
	static UFunction* pFnCreate3 = NULL;

	if ( ! pFnCreate3 )
		pFnCreate3 = (UFunction*) UObject::GObjObjects()->Data[ 36785 ];

	UBioGamePropertyEventSet_eventCreate3_Parms Create3_Parms;
	Create3_Parms.eEvent1 = eEvent1;
	Create3_Parms.eEvent2 = eEvent2;
	Create3_Parms.eEvent3 = eEvent3;
	Create3_Parms.oSource = oSource;

	this->ProcessEvent ( pFnCreate3, &Create3_Parms, NULL );

	return Create3_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyEventSet.Create2
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGamePropertyEventSet* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEvent1                        ( CPF_Parm )
// unsigned char                  eEvent2                        ( CPF_Parm )
// class UObject*                 oSource                        ( CPF_OptionalParm | CPF_Parm )

class UBioGamePropertyEventSet* UBioGamePropertyEventSet::eventCreate2 ( unsigned char eEvent1, unsigned char eEvent2, class UObject* oSource )
{
	static UFunction* pFnCreate2 = NULL;

	if ( ! pFnCreate2 )
		pFnCreate2 = (UFunction*) UObject::GObjObjects()->Data[ 36779 ];

	UBioGamePropertyEventSet_eventCreate2_Parms Create2_Parms;
	Create2_Parms.eEvent1 = eEvent1;
	Create2_Parms.eEvent2 = eEvent2;
	Create2_Parms.oSource = oSource;

	this->ProcessEvent ( pFnCreate2, &Create2_Parms, NULL );

	return Create2_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyEventSet.Create1
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// class UBioGamePropertyEventSet* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEvent1                        ( CPF_Parm )
// class UObject*                 oSource                        ( CPF_OptionalParm | CPF_Parm )

class UBioGamePropertyEventSet* UBioGamePropertyEventSet::eventCreate1 ( unsigned char eEvent1, class UObject* oSource )
{
	static UFunction* pFnCreate1 = NULL;

	if ( ! pFnCreate1 )
		pFnCreate1 = (UFunction*) UObject::GObjObjects()->Data[ 36774 ];

	UBioGamePropertyEventSet_eventCreate1_Parms Create1_Parms;
	Create1_Parms.eEvent1 = eEvent1;
	Create1_Parms.oSource = oSource;

	this->ProcessEvent ( pFnCreate1, &Create1_Parms, NULL );

	return Create1_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyEventSet.CheckForAnyEvents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioGamePropertyEventSet* oEvents                        ( CPF_Parm )

bool UBioGamePropertyEventSet::CheckForAnyEvents ( class UBioGamePropertyEventSet* oEvents )
{
	static UFunction* pFnCheckForAnyEvents = NULL;

	if ( ! pFnCheckForAnyEvents )
		pFnCheckForAnyEvents = (UFunction*) UObject::GObjObjects()->Data[ 36771 ];

	UBioGamePropertyEventSet_execCheckForAnyEvents_Parms CheckForAnyEvents_Parms;
	CheckForAnyEvents_Parms.oEvents = oEvents;

	pFnCheckForAnyEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckForAnyEvents, &CheckForAnyEvents_Parms, NULL );

	pFnCheckForAnyEvents->FunctionFlags |= 0x400;

	return CheckForAnyEvents_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyEventSet.CheckForAllEvents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioGamePropertyEventSet* oEvents                        ( CPF_Parm )

bool UBioGamePropertyEventSet::CheckForAllEvents ( class UBioGamePropertyEventSet* oEvents )
{
	static UFunction* pFnCheckForAllEvents = NULL;

	if ( ! pFnCheckForAllEvents )
		pFnCheckForAllEvents = (UFunction*) UObject::GObjObjects()->Data[ 36768 ];

	UBioGamePropertyEventSet_execCheckForAllEvents_Parms CheckForAllEvents_Parms;
	CheckForAllEvents_Parms.oEvents = oEvents;

	pFnCheckForAllEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckForAllEvents, &CheckForAllEvents_Parms, NULL );

	pFnCheckForAllEvents->FunctionFlags |= 0x400;

	return CheckForAllEvents_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyEventSet.CheckForEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEvent                         ( CPF_Parm )

bool UBioGamePropertyEventSet::CheckForEvent ( unsigned char eEvent )
{
	static UFunction* pFnCheckForEvent = NULL;

	if ( ! pFnCheckForEvent )
		pFnCheckForEvent = (UFunction*) UObject::GObjObjects()->Data[ 36765 ];

	UBioGamePropertyEventSet_execCheckForEvent_Parms CheckForEvent_Parms;
	CheckForEvent_Parms.eEvent = eEvent;

	pFnCheckForEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckForEvent, &CheckForEvent_Parms, NULL );

	pFnCheckForEvent->FunctionFlags |= 0x400;

	return CheckForEvent_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyEventSet.RemoveEventSet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioGamePropertyEventSet* oEvents                        ( CPF_Parm )

void UBioGamePropertyEventSet::RemoveEventSet ( class UBioGamePropertyEventSet* oEvents )
{
	static UFunction* pFnRemoveEventSet = NULL;

	if ( ! pFnRemoveEventSet )
		pFnRemoveEventSet = (UFunction*) UObject::GObjObjects()->Data[ 36763 ];

	UBioGamePropertyEventSet_execRemoveEventSet_Parms RemoveEventSet_Parms;
	RemoveEventSet_Parms.oEvents = oEvents;

	pFnRemoveEventSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveEventSet, &RemoveEventSet_Parms, NULL );

	pFnRemoveEventSet->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyEventSet.RemoveEvents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< unsigned char >        aEvents                        ( CPF_Parm | CPF_NeedCtorLink )

void UBioGamePropertyEventSet::RemoveEvents ( TArray< unsigned char > aEvents )
{
	static UFunction* pFnRemoveEvents = NULL;

	if ( ! pFnRemoveEvents )
		pFnRemoveEvents = (UFunction*) UObject::GObjObjects()->Data[ 36760 ];

	UBioGamePropertyEventSet_execRemoveEvents_Parms RemoveEvents_Parms;
	memcpy ( &RemoveEvents_Parms.aEvents, &aEvents, 0xC );

	pFnRemoveEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveEvents, &RemoveEvents_Parms, NULL );

	pFnRemoveEvents->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyEventSet.RemoveEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eEvent                         ( CPF_Parm )

void UBioGamePropertyEventSet::RemoveEvent ( unsigned char eEvent )
{
	static UFunction* pFnRemoveEvent = NULL;

	if ( ! pFnRemoveEvent )
		pFnRemoveEvent = (UFunction*) UObject::GObjObjects()->Data[ 36758 ];

	UBioGamePropertyEventSet_execRemoveEvent_Parms RemoveEvent_Parms;
	RemoveEvent_Parms.eEvent = eEvent;

	pFnRemoveEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveEvent, &RemoveEvent_Parms, NULL );

	pFnRemoveEvent->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyEventSet.AddEventSet
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioGamePropertyEventSet* oEvents                        ( CPF_Parm )

void UBioGamePropertyEventSet::AddEventSet ( class UBioGamePropertyEventSet* oEvents )
{
	static UFunction* pFnAddEventSet = NULL;

	if ( ! pFnAddEventSet )
		pFnAddEventSet = (UFunction*) UObject::GObjObjects()->Data[ 36756 ];

	UBioGamePropertyEventSet_execAddEventSet_Parms AddEventSet_Parms;
	AddEventSet_Parms.oEvents = oEvents;

	pFnAddEventSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddEventSet, &AddEventSet_Parms, NULL );

	pFnAddEventSet->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyEventSet.AddEvents
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< unsigned char >        aEvents                        ( CPF_Parm | CPF_NeedCtorLink )

void UBioGamePropertyEventSet::AddEvents ( TArray< unsigned char > aEvents )
{
	static UFunction* pFnAddEvents = NULL;

	if ( ! pFnAddEvents )
		pFnAddEvents = (UFunction*) UObject::GObjObjects()->Data[ 36753 ];

	UBioGamePropertyEventSet_execAddEvents_Parms AddEvents_Parms;
	memcpy ( &AddEvents_Parms.aEvents, &aEvents, 0xC );

	pFnAddEvents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddEvents, &AddEvents_Parms, NULL );

	pFnAddEvents->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyEventSet.AddEvent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eEvent                         ( CPF_Parm )

void UBioGamePropertyEventSet::AddEvent ( unsigned char eEvent )
{
	static UFunction* pFnAddEvent = NULL;

	if ( ! pFnAddEvent )
		pFnAddEvent = (UFunction*) UObject::GObjObjects()->Data[ 36751 ];

	UBioGamePropertyEventSet_execAddEvent_Parms AddEvent_Parms;
	AddEvent_Parms.eEvent = eEvent;

	pFnAddEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddEvent, &AddEvent_Parms, NULL );

	pFnAddEvent->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyEventSet.Clear
// [0x00020002] 
// Parameters infos:

void UBioGamePropertyEventSet::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 36750 ];

	UBioGamePropertyEventSet_execClear_Parms Clear_Parms;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );
};

// Function SFXGame.BioGamePropertyHolderTraits.GetGPContainer
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UBioGamePropertyContainer* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 pObject                        ( CPF_Parm )

class UBioGamePropertyContainer* UBioGamePropertyHolderTraits::eventGetGPContainer ( class UObject* pObject )
{
	static UFunction* pFnGetGPContainer = NULL;

	if ( ! pFnGetGPContainer )
		pFnGetGPContainer = (UFunction*) UObject::GObjObjects()->Data[ 36894 ];

	UBioGamePropertyHolderTraits_eventGetGPContainer_Parms GetGPContainer_Parms;
	GetGPContainer_Parms.pObject = pObject;

	this->ProcessEvent ( pFnGetGPContainer, &GetGPContainer_Parms, NULL );

	return GetGPContainer_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyHolderTraits.GetGPManager
// [0x00022803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UBioGamePropertyManager* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oTarget                        ( CPF_Parm )

class UBioGamePropertyManager* UBioGamePropertyHolderTraits::eventGetGPManager ( class UObject* oTarget )
{
	static UFunction* pFnGetGPManager = NULL;

	if ( ! pFnGetGPManager )
		pFnGetGPManager = (UFunction*) UObject::GObjObjects()->Data[ 36890 ];

	UBioGamePropertyHolderTraits_eventGetGPManager_Parms GetGPManager_Parms;
	GetGPManager_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnGetGPManager, &GetGPManager_Parms, NULL );

	return GetGPManager_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyImporter.LoadGameProperty
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// class UBioGameProperty*        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FBioGPLoadData          oGPData                        ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class UBioGameProperty* UBioGamePropertyImporter::LoadGameProperty ( struct FBioGPLoadData* oGPData )
{
	static UFunction* pFnLoadGameProperty = NULL;

	if ( ! pFnLoadGameProperty )
		pFnLoadGameProperty = (UFunction*) UObject::GObjObjects()->Data[ 36912 ];

	UBioGamePropertyImporter_execLoadGameProperty_Parms LoadGameProperty_Parms;

	pFnLoadGameProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadGameProperty, &LoadGameProperty_Parms, NULL );

	pFnLoadGameProperty->FunctionFlags |= 0x400;

	if ( oGPData )
		memcpy ( oGPData, &LoadGameProperty_Parms.oGPData, 0x24 );

	return LoadGameProperty_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyManager.ToString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 sIndent                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

struct FString UBioGamePropertyManager::eventToString ( struct FString sIndent )
{
	static UFunction* pFnToString = NULL;

	if ( ! pFnToString )
		pFnToString = (UFunction*) UObject::GObjObjects()->Data[ 31385 ];

	UBioGamePropertyManager_eventToString_Parms ToString_Parms;
	memcpy ( &ToString_Parms.sIndent, &sIndent, 0xC );

	this->ProcessEvent ( pFnToString, &ToString_Parms, NULL );

	return ToString_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyManager.IsGameEffectApplied
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GameEffectClass                ( CPF_Parm )

bool UBioGamePropertyManager::IsGameEffectApplied ( class UClass* GameEffectClass )
{
	static UFunction* pFnIsGameEffectApplied = NULL;

	if ( ! pFnIsGameEffectApplied )
		pFnIsGameEffectApplied = (UFunction*) UObject::GObjObjects()->Data[ 31382 ];

	UBioGamePropertyManager_execIsGameEffectApplied_Parms IsGameEffectApplied_Parms;
	IsGameEffectApplied_Parms.GameEffectClass = GameEffectClass;

	pFnIsGameEffectApplied->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsGameEffectApplied, &IsGameEffectApplied_Parms, NULL );

	pFnIsGameEffectApplied->FunctionFlags |= 0x400;

	return IsGameEffectApplied_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyManager.FindGamePropertyByEffectType
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  GameEffectClass                ( CPF_Parm )
// int                            nGamePropertyGroup             ( CPF_Parm )
// TArray< class UBioGameProperty* > aProperties                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioGamePropertyManager::FindGamePropertyByEffectType ( class UClass* GameEffectClass, int nGamePropertyGroup, TArray< class UBioGameProperty* >* aProperties )
{
	static UFunction* pFnFindGamePropertyByEffectType = NULL;

	if ( ! pFnFindGamePropertyByEffectType )
		pFnFindGamePropertyByEffectType = (UFunction*) UObject::GObjObjects()->Data[ 31376 ];

	UBioGamePropertyManager_execFindGamePropertyByEffectType_Parms FindGamePropertyByEffectType_Parms;
	FindGamePropertyByEffectType_Parms.GameEffectClass = GameEffectClass;
	FindGamePropertyByEffectType_Parms.nGamePropertyGroup = nGamePropertyGroup;

	pFnFindGamePropertyByEffectType->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindGamePropertyByEffectType, &FindGamePropertyByEffectType_Parms, NULL );

	pFnFindGamePropertyByEffectType->FunctionFlags |= 0x400;

	if ( aProperties )
		memcpy ( aProperties, &FindGamePropertyByEffectType_Parms.aProperties, 0xC );

	return FindGamePropertyByEffectType_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyManager.FindGamePropertyByGroup
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nGamePropertyGroup             ( CPF_Parm )
// TArray< class UBioGameProperty* > aProperties                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioGamePropertyManager::FindGamePropertyByGroup ( int nGamePropertyGroup, TArray< class UBioGameProperty* >* aProperties )
{
	static UFunction* pFnFindGamePropertyByGroup = NULL;

	if ( ! pFnFindGamePropertyByGroup )
		pFnFindGamePropertyByGroup = (UFunction*) UObject::GObjObjects()->Data[ 31371 ];

	UBioGamePropertyManager_execFindGamePropertyByGroup_Parms FindGamePropertyByGroup_Parms;
	FindGamePropertyByGroup_Parms.nGamePropertyGroup = nGamePropertyGroup;

	pFnFindGamePropertyByGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindGamePropertyByGroup, &FindGamePropertyByGroup_Parms, NULL );

	pFnFindGamePropertyByGroup->FunctionFlags |= 0x400;

	if ( aProperties )
		memcpy ( aProperties, &FindGamePropertyByGroup_Parms.aProperties, 0xC );

	return FindGamePropertyByGroup_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyManager.FindGamePropertyByOwner
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oOwner                         ( CPF_Parm )
// int                            nGamePropertyGroup             ( CPF_Parm )
// TArray< class UBioGameProperty* > aProperties                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioGamePropertyManager::FindGamePropertyByOwner ( class AActor* oOwner, int nGamePropertyGroup, TArray< class UBioGameProperty* >* aProperties )
{
	static UFunction* pFnFindGamePropertyByOwner = NULL;

	if ( ! pFnFindGamePropertyByOwner )
		pFnFindGamePropertyByOwner = (UFunction*) UObject::GObjObjects()->Data[ 31365 ];

	UBioGamePropertyManager_execFindGamePropertyByOwner_Parms FindGamePropertyByOwner_Parms;
	FindGamePropertyByOwner_Parms.oOwner = oOwner;
	FindGamePropertyByOwner_Parms.nGamePropertyGroup = nGamePropertyGroup;

	pFnFindGamePropertyByOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindGamePropertyByOwner, &FindGamePropertyByOwner_Parms, NULL );

	pFnFindGamePropertyByOwner->FunctionFlags |= 0x400;

	if ( aProperties )
		memcpy ( aProperties, &FindGamePropertyByOwner_Parms.aProperties, 0xC );

	return FindGamePropertyByOwner_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyManager.FindGamePropertyByName
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmName                         ( CPF_Parm )
// int                            nGamePropertyGroup             ( CPF_Parm )
// TArray< class UBioGameProperty* > aProperties                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool UBioGamePropertyManager::FindGamePropertyByName ( struct FName nmName, int nGamePropertyGroup, TArray< class UBioGameProperty* >* aProperties )
{
	static UFunction* pFnFindGamePropertyByName = NULL;

	if ( ! pFnFindGamePropertyByName )
		pFnFindGamePropertyByName = (UFunction*) UObject::GObjObjects()->Data[ 31359 ];

	UBioGamePropertyManager_execFindGamePropertyByName_Parms FindGamePropertyByName_Parms;
	memcpy ( &FindGamePropertyByName_Parms.nmName, &nmName, 0x8 );
	FindGamePropertyByName_Parms.nGamePropertyGroup = nGamePropertyGroup;

	pFnFindGamePropertyByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindGamePropertyByName, &FindGamePropertyByName_Parms, NULL );

	pFnFindGamePropertyByName->FunctionFlags |= 0x400;

	if ( aProperties )
		memcpy ( aProperties, &FindGamePropertyByName_Parms.aProperties, 0xC );

	return FindGamePropertyByName_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyManager.GetOwnerObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UObject*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UObject* UBioGamePropertyManager::GetOwnerObject ( )
{
	static UFunction* pFnGetOwnerObject = NULL;

	if ( ! pFnGetOwnerObject )
		pFnGetOwnerObject = (UFunction*) UObject::GObjObjects()->Data[ 31357 ];

	UBioGamePropertyManager_execGetOwnerObject_Parms GetOwnerObject_Parms;

	pFnGetOwnerObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetOwnerObject, &GetOwnerObject_Parms, NULL );

	pFnGetOwnerObject->FunctionFlags |= 0x400;

	return GetOwnerObject_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyManager.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDelta                         ( CPF_Parm )

void UBioGamePropertyManager::Tick ( float fDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 31355 ];

	UBioGamePropertyManager_execTick_Parms Tick_Parms;
	Tick_Parms.fDelta = fDelta;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyManager.TickInternal
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// float                          fDelta                         ( CPF_Parm )

void UBioGamePropertyManager::eventTickInternal ( float fDelta )
{
	static UFunction* pFnTickInternal = NULL;

	if ( ! pFnTickInternal )
		pFnTickInternal = (UFunction*) UObject::GObjObjects()->Data[ 31353 ];

	UBioGamePropertyManager_eventTickInternal_Parms TickInternal_Parms;
	TickInternal_Parms.fDelta = fDelta;

	this->ProcessEvent ( pFnTickInternal, &TickInternal_Parms, NULL );
};

// Function SFXGame.BioGamePropertyManager.OnGPTimeOut
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UBioGameProperty*        pGameProperty                  ( CPF_Parm )
// unsigned char                  eTimingType                    ( CPF_Parm )
// float                          fDeltaTimeRemaining            ( CPF_Parm )

void UBioGamePropertyManager::OnGPTimeOut ( class UBioGameProperty* pGameProperty, unsigned char eTimingType, float fDeltaTimeRemaining )
{
	static UFunction* pFnOnGPTimeOut = NULL;

	if ( ! pFnOnGPTimeOut )
		pFnOnGPTimeOut = (UFunction*) UObject::GObjObjects()->Data[ 31349 ];

	UBioGamePropertyManager_execOnGPTimeOut_Parms OnGPTimeOut_Parms;
	OnGPTimeOut_Parms.pGameProperty = pGameProperty;
	OnGPTimeOut_Parms.eTimingType = eTimingType;
	OnGPTimeOut_Parms.fDeltaTimeRemaining = fDeltaTimeRemaining;

	this->ProcessEvent ( pFnOnGPTimeOut, &OnGPTimeOut_Parms, NULL );
};

// Function SFXGame.BioGamePropertyManager.UnapplyGameProperty
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioGameProperty*        pGP                            ( CPF_Parm )
// class UObject*                 pTarget                        ( CPF_Parm )

void UBioGamePropertyManager::UnapplyGameProperty ( class UBioGameProperty* pGP, class UObject* pTarget )
{
	static UFunction* pFnUnapplyGameProperty = NULL;

	if ( ! pFnUnapplyGameProperty )
		pFnUnapplyGameProperty = (UFunction*) UObject::GObjObjects()->Data[ 31346 ];

	UBioGamePropertyManager_execUnapplyGameProperty_Parms UnapplyGameProperty_Parms;
	UnapplyGameProperty_Parms.pGP = pGP;
	UnapplyGameProperty_Parms.pTarget = pTarget;

	pFnUnapplyGameProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnapplyGameProperty, &UnapplyGameProperty_Parms, NULL );

	pFnUnapplyGameProperty->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyManager.ApplyGameProperty
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioGameProperty*        pGP                            ( CPF_Parm )
// class UObject*                 pTarget                        ( CPF_Parm )

void UBioGamePropertyManager::ApplyGameProperty ( class UBioGameProperty* pGP, class UObject* pTarget )
{
	static UFunction* pFnApplyGameProperty = NULL;

	if ( ! pFnApplyGameProperty )
		pFnApplyGameProperty = (UFunction*) UObject::GObjObjects()->Data[ 31343 ];

	UBioGamePropertyManager_execApplyGameProperty_Parms ApplyGameProperty_Parms;
	ApplyGameProperty_Parms.pGP = pGP;
	ApplyGameProperty_Parms.pTarget = pTarget;

	pFnApplyGameProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyGameProperty, &ApplyGameProperty_Parms, NULL );

	pFnApplyGameProperty->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyManager.EvaluateGameProperty
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioGameProperty*        pGP                            ( CPF_Parm )
// class UObject*                 pTarget                        ( CPF_Parm )

void UBioGamePropertyManager::EvaluateGameProperty ( class UBioGameProperty* pGP, class UObject* pTarget )
{
	static UFunction* pFnEvaluateGameProperty = NULL;

	if ( ! pFnEvaluateGameProperty )
		pFnEvaluateGameProperty = (UFunction*) UObject::GObjObjects()->Data[ 31340 ];

	UBioGamePropertyManager_execEvaluateGameProperty_Parms EvaluateGameProperty_Parms;
	EvaluateGameProperty_Parms.pGP = pGP;
	EvaluateGameProperty_Parms.pTarget = pTarget;

	pFnEvaluateGameProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEvaluateGameProperty, &EvaluateGameProperty_Parms, NULL );

	pFnEvaluateGameProperty->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyTimer.ToString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 sIndent                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

struct FString UBioGamePropertyTimer::eventToString ( struct FString sIndent )
{
	static UFunction* pFnToString = NULL;

	if ( ! pFnToString )
		pFnToString = (UFunction*) UObject::GObjObjects()->Data[ 31324 ];

	UBioGamePropertyTimer_eventToString_Parms ToString_Parms;
	memcpy ( &ToString_Parms.sIndent, &sIndent, 0xC );

	this->ProcessEvent ( pFnToString, &ToString_Parms, NULL );

	return ToString_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyTimer.InvokeDelegate
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FScriptDelegate         pDelegate                      ( CPF_Parm | CPF_NeedCtorLink )
// class UBioGameProperty*        pGP                            ( CPF_Parm )
// unsigned char                  eTimingType                    ( CPF_Parm )
// float                          fDeltaTimeRemaining            ( CPF_Parm )

void UBioGamePropertyTimer::eventInvokeDelegate ( struct FScriptDelegate pDelegate, class UBioGameProperty* pGP, unsigned char eTimingType, float fDeltaTimeRemaining )
{
	static UFunction* pFnInvokeDelegate = NULL;

	if ( ! pFnInvokeDelegate )
		pFnInvokeDelegate = (UFunction*) UObject::GObjObjects()->Data[ 31318 ];

	UBioGamePropertyTimer_eventInvokeDelegate_Parms InvokeDelegate_Parms;
	memcpy ( &InvokeDelegate_Parms.pDelegate, &pDelegate, 0xC );
	InvokeDelegate_Parms.pGP = pGP;
	InvokeDelegate_Parms.eTimingType = eTimingType;
	InvokeDelegate_Parms.fDeltaTimeRemaining = fDeltaTimeRemaining;

	this->ProcessEvent ( pFnInvokeDelegate, &InvokeDelegate_Parms, NULL );
};

// Function SFXGame.BioGamePropertyTimer.RemoveAllNonStatic
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FScriptDelegate         pDelegate                      ( CPF_Parm | CPF_NeedCtorLink )

void UBioGamePropertyTimer::RemoveAllNonStatic ( struct FScriptDelegate pDelegate )
{
	static UFunction* pFnRemoveAllNonStatic = NULL;

	if ( ! pFnRemoveAllNonStatic )
		pFnRemoveAllNonStatic = (UFunction*) UObject::GObjObjects()->Data[ 31316 ];

	UBioGamePropertyTimer_execRemoveAllNonStatic_Parms RemoveAllNonStatic_Parms;
	memcpy ( &RemoveAllNonStatic_Parms.pDelegate, &pDelegate, 0xC );

	pFnRemoveAllNonStatic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAllNonStatic, &RemoveAllNonStatic_Parms, NULL );

	pFnRemoveAllNonStatic->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyTimer.GetTimeForGamePropertyByName
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmGamePropertyName             ( CPF_Parm )
// unsigned char                  eTimingType                    ( CPF_Parm )
// class UBioGameProperty*        oGameProperty                  ( CPF_Parm | CPF_OutParm )

float UBioGamePropertyTimer::GetTimeForGamePropertyByName ( struct FName nmGamePropertyName, unsigned char eTimingType, class UBioGameProperty** oGameProperty )
{
	static UFunction* pFnGetTimeForGamePropertyByName = NULL;

	if ( ! pFnGetTimeForGamePropertyByName )
		pFnGetTimeForGamePropertyByName = (UFunction*) UObject::GObjObjects()->Data[ 31311 ];

	UBioGamePropertyTimer_execGetTimeForGamePropertyByName_Parms GetTimeForGamePropertyByName_Parms;
	memcpy ( &GetTimeForGamePropertyByName_Parms.nmGamePropertyName, &nmGamePropertyName, 0x8 );
	GetTimeForGamePropertyByName_Parms.eTimingType = eTimingType;

	pFnGetTimeForGamePropertyByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimeForGamePropertyByName, &GetTimeForGamePropertyByName_Parms, NULL );

	pFnGetTimeForGamePropertyByName->FunctionFlags |= 0x400;

	if ( oGameProperty )
		*oGameProperty = GetTimeForGamePropertyByName_Parms.oGameProperty;

	return GetTimeForGamePropertyByName_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyTimer.GetTimeForGameProperty
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioGameProperty*        oGameProp                      ( CPF_Parm )
// unsigned char                  eTimingType                    ( CPF_Parm )

float UBioGamePropertyTimer::GetTimeForGameProperty ( class UBioGameProperty* oGameProp, unsigned char eTimingType )
{
	static UFunction* pFnGetTimeForGameProperty = NULL;

	if ( ! pFnGetTimeForGameProperty )
		pFnGetTimeForGameProperty = (UFunction*) UObject::GObjObjects()->Data[ 31307 ];

	UBioGamePropertyTimer_execGetTimeForGameProperty_Parms GetTimeForGameProperty_Parms;
	GetTimeForGameProperty_Parms.oGameProp = oGameProp;
	GetTimeForGameProperty_Parms.eTimingType = eTimingType;

	pFnGetTimeForGameProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimeForGameProperty, &GetTimeForGameProperty_Parms, NULL );

	pFnGetTimeForGameProperty->FunctionFlags |= 0x400;

	return GetTimeForGameProperty_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyTimer.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )
// struct FScriptDelegate         oOnRemoveGameProperty          ( CPF_Parm | CPF_NeedCtorLink )

void UBioGamePropertyTimer::Tick ( float fDeltaTime, struct FScriptDelegate oOnRemoveGameProperty )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 31304 ];

	UBioGamePropertyTimer_execTick_Parms Tick_Parms;
	Tick_Parms.fDeltaTime = fDeltaTime;
	memcpy ( &Tick_Parms.oOnRemoveGameProperty, &oOnRemoveGameProperty, 0xC );

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyTimer.AppendStaticGameProperty
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioGameProperty*        oGP                            ( CPF_Parm )

void UBioGamePropertyTimer::AppendStaticGameProperty ( class UBioGameProperty* oGP )
{
	static UFunction* pFnAppendStaticGameProperty = NULL;

	if ( ! pFnAppendStaticGameProperty )
		pFnAppendStaticGameProperty = (UFunction*) UObject::GObjObjects()->Data[ 31302 ];

	UBioGamePropertyTimer_execAppendStaticGameProperty_Parms AppendStaticGameProperty_Parms;
	AppendStaticGameProperty_Parms.oGP = oGP;

	pFnAppendStaticGameProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAppendStaticGameProperty, &AppendStaticGameProperty_Parms, NULL );

	pFnAppendStaticGameProperty->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyTimer.FindGamePropertyIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioGameProperty*        oGP                            ( CPF_Parm )
// unsigned char                  eTimingType                    ( CPF_Parm )

int UBioGamePropertyTimer::FindGamePropertyIndex ( class UBioGameProperty* oGP, unsigned char eTimingType )
{
	static UFunction* pFnFindGamePropertyIndex = NULL;

	if ( ! pFnFindGamePropertyIndex )
		pFnFindGamePropertyIndex = (UFunction*) UObject::GObjObjects()->Data[ 31298 ];

	UBioGamePropertyTimer_execFindGamePropertyIndex_Parms FindGamePropertyIndex_Parms;
	FindGamePropertyIndex_Parms.oGP = oGP;
	FindGamePropertyIndex_Parms.eTimingType = eTimingType;

	pFnFindGamePropertyIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindGamePropertyIndex, &FindGamePropertyIndex_Parms, NULL );

	pFnFindGamePropertyIndex->FunctionFlags |= 0x400;

	return FindGamePropertyIndex_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyTimer.RemoveGamePropertyAtIndex
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void UBioGamePropertyTimer::RemoveGamePropertyAtIndex ( int nIndex )
{
	static UFunction* pFnRemoveGamePropertyAtIndex = NULL;

	if ( ! pFnRemoveGamePropertyAtIndex )
		pFnRemoveGamePropertyAtIndex = (UFunction*) UObject::GObjObjects()->Data[ 31296 ];

	UBioGamePropertyTimer_execRemoveGamePropertyAtIndex_Parms RemoveGamePropertyAtIndex_Parms;
	RemoveGamePropertyAtIndex_Parms.nIndex = nIndex;

	pFnRemoveGamePropertyAtIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveGamePropertyAtIndex, &RemoveGamePropertyAtIndex_Parms, NULL );

	pFnRemoveGamePropertyAtIndex->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyTimer.RemoveGameProperty
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioGameProperty*        oGP                            ( CPF_Parm )

bool UBioGamePropertyTimer::RemoveGameProperty ( class UBioGameProperty* oGP )
{
	static UFunction* pFnRemoveGameProperty = NULL;

	if ( ! pFnRemoveGameProperty )
		pFnRemoveGameProperty = (UFunction*) UObject::GObjObjects()->Data[ 31293 ];

	UBioGamePropertyTimer_execRemoveGameProperty_Parms RemoveGameProperty_Parms;
	RemoveGameProperty_Parms.oGP = oGP;

	pFnRemoveGameProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveGameProperty, &RemoveGameProperty_Parms, NULL );

	pFnRemoveGameProperty->FunctionFlags |= 0x400;

	return RemoveGameProperty_Parms.ReturnValue;
};

// Function SFXGame.BioGamePropertyTimer.InsertGameProperty
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioGameProperty*        oGP                            ( CPF_Parm )
// float                          fTime                          ( CPF_Parm )
// unsigned char                  eTimingType                    ( CPF_Parm )
// unsigned long                  bFrameTicked                   ( CPF_OptionalParm | CPF_Parm )

void UBioGamePropertyTimer::InsertGameProperty ( class UBioGameProperty* oGP, float fTime, unsigned char eTimingType, unsigned long bFrameTicked )
{
	static UFunction* pFnInsertGameProperty = NULL;

	if ( ! pFnInsertGameProperty )
		pFnInsertGameProperty = (UFunction*) UObject::GObjObjects()->Data[ 31288 ];

	UBioGamePropertyTimer_execInsertGameProperty_Parms InsertGameProperty_Parms;
	InsertGameProperty_Parms.oGP = oGP;
	InsertGameProperty_Parms.fTime = fTime;
	InsertGameProperty_Parms.eTimingType = eTimingType;
	InsertGameProperty_Parms.bFrameTicked = bFrameTicked;

	pFnInsertGameProperty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInsertGameProperty, &InsertGameProperty_Parms, NULL );

	pFnInsertGameProperty->FunctionFlags |= 0x400;
};

// Function SFXGame.BioGamePropertyTimer.OnRemoveGameProperty
// [0x00120000] 
// Parameters infos:
// class UBioGameProperty*        pGP                            ( CPF_Parm )
// unsigned char                  eTimingType                    ( CPF_Parm )
// float                          fDeltaTimeRemaining            ( CPF_Parm )

void UBioGamePropertyTimer::OnRemoveGameProperty ( class UBioGameProperty* pGP, unsigned char eTimingType, float fDeltaTimeRemaining )
{
	static UFunction* pFnOnRemoveGameProperty = NULL;

	if ( ! pFnOnRemoveGameProperty )
		pFnOnRemoveGameProperty = (UFunction*) UObject::GObjObjects()->Data[ 31283 ];

	UBioGamePropertyTimer_execOnRemoveGameProperty_Parms OnRemoveGameProperty_Parms;
	OnRemoveGameProperty_Parms.pGP = pGP;
	OnRemoveGameProperty_Parms.eTimingType = eTimingType;
	OnRemoveGameProperty_Parms.fDeltaTimeRemaining = fDeltaTimeRemaining;

	this->ProcessEvent ( pFnOnRemoveGameProperty, &OnRemoveGameProperty_Parms, NULL );
};

// Function SFXGame.BioInGamePropertyEditor.filterString
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FString                 Input                          ( CPF_Parm | CPF_NeedCtorLink )

struct FString UBioInGamePropertyEditor::filterString ( struct FString Input )
{
	static UFunction* pFnfilterString = NULL;

	if ( ! pFnfilterString )
		pFnfilterString = (UFunction*) UObject::GObjObjects()->Data[ 38233 ];

	UBioInGamePropertyEditor_execfilterString_Parms filterString_Parms;
	memcpy ( &filterString_Parms.Input, &Input, 0xC );

	this->ProcessEvent ( pFnfilterString, &filterString_Parms, NULL );

	return filterString_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.DrawToHUD
// [0x00820002] 
// Parameters infos:
// class ABioHUD*                 oHUD                           ( CPF_Parm )

void UBioInGamePropertyEditor::DrawToHUD ( class ABioHUD* oHUD )
{
	static UFunction* pFnDrawToHUD = NULL;

	if ( ! pFnDrawToHUD )
		pFnDrawToHUD = (UFunction*) UObject::GObjObjects()->Data[ 38219 ];

	UBioInGamePropertyEditor_execDrawToHUD_Parms DrawToHUD_Parms;
	DrawToHUD_Parms.oHUD = oHUD;

	this->ProcessEvent ( pFnDrawToHUD, &DrawToHUD_Parms, NULL );
};

// Function SFXGame.BioInGamePropertyEditor.CreateCommand
// [0x00020002] 
// Parameters infos:
// class UBioPropertyEditorBaseNode* Parent                         ( CPF_Parm )
// struct FString                 CmdName                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Command                        ( CPF_Parm | CPF_NeedCtorLink )

void UBioInGamePropertyEditor::CreateCommand ( class UBioPropertyEditorBaseNode* Parent, struct FString CmdName, struct FString Command )
{
	static UFunction* pFnCreateCommand = NULL;

	if ( ! pFnCreateCommand )
		pFnCreateCommand = (UFunction*) UObject::GObjObjects()->Data[ 38212 ];

	UBioInGamePropertyEditor_execCreateCommand_Parms CreateCommand_Parms;
	CreateCommand_Parms.Parent = Parent;
	memcpy ( &CreateCommand_Parms.CmdName, &CmdName, 0xC );
	memcpy ( &CreateCommand_Parms.Command, &Command, 0xC );

	this->ProcessEvent ( pFnCreateCommand, &CreateCommand_Parms, NULL );
};

// Function SFXGame.BioInGamePropertyEditor.CreateObjectNode
// [0x00020002] 
// Parameters infos:
// class UBioPropertyEditorBaseNode* Parent                         ( CPF_Parm )
// class UObject*                 O                              ( CPF_Parm )
// struct FString                 ObjName                        ( CPF_Parm | CPF_NeedCtorLink )

void UBioInGamePropertyEditor::CreateObjectNode ( class UBioPropertyEditorBaseNode* Parent, class UObject* O, struct FString ObjName )
{
	static UFunction* pFnCreateObjectNode = NULL;

	if ( ! pFnCreateObjectNode )
		pFnCreateObjectNode = (UFunction*) UObject::GObjObjects()->Data[ 38203 ];

	UBioInGamePropertyEditor_execCreateObjectNode_Parms CreateObjectNode_Parms;
	CreateObjectNode_Parms.Parent = Parent;
	CreateObjectNode_Parms.O = O;
	memcpy ( &CreateObjectNode_Parms.ObjName, &ObjName, 0xC );

	this->ProcessEvent ( pFnCreateObjectNode, &CreateObjectNode_Parms, NULL );
};

// Function SFXGame.BioInGamePropertyEditor.CreateGameplayNodes
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UBioPropertyEditorBaseNode* Parent                         ( CPF_Parm )

void UBioInGamePropertyEditor::eventCreateGameplayNodes ( class UBioPropertyEditorBaseNode* Parent )
{
	static UFunction* pFnCreateGameplayNodes = NULL;

	if ( ! pFnCreateGameplayNodes )
		pFnCreateGameplayNodes = (UFunction*) UObject::GObjObjects()->Data[ 38198 ];

	UBioInGamePropertyEditor_eventCreateGameplayNodes_Parms CreateGameplayNodes_Parms;
	CreateGameplayNodes_Parms.Parent = Parent;

	this->ProcessEvent ( pFnCreateGameplayNodes, &CreateGameplayNodes_Parms, NULL );
};

// Function SFXGame.BioInGamePropertyEditor.DrawBones
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioHUD*                 oHUD                           ( CPF_Parm )

void UBioInGamePropertyEditor::DrawBones ( class ABioHUD* oHUD )
{
	static UFunction* pFnDrawBones = NULL;

	if ( ! pFnDrawBones )
		pFnDrawBones = (UFunction*) UObject::GObjObjects()->Data[ 38196 ];

	UBioInGamePropertyEditor_execDrawBones_Parms DrawBones_Parms;
	DrawBones_Parms.oHUD = oHUD;

	pFnDrawBones->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawBones, &DrawBones_Parms, NULL );

	pFnDrawBones->FunctionFlags |= 0x400;
};

// Function SFXGame.BioInGamePropertyEditor.PerformRightShoulderAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::PerformRightShoulderAction ( )
{
	static UFunction* pFnPerformRightShoulderAction = NULL;

	if ( ! pFnPerformRightShoulderAction )
		pFnPerformRightShoulderAction = (UFunction*) UObject::GObjObjects()->Data[ 38194 ];

	UBioInGamePropertyEditor_execPerformRightShoulderAction_Parms PerformRightShoulderAction_Parms;

	pFnPerformRightShoulderAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformRightShoulderAction, &PerformRightShoulderAction_Parms, NULL );

	pFnPerformRightShoulderAction->FunctionFlags |= 0x400;

	return PerformRightShoulderAction_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.PerformLeftShoulderAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::PerformLeftShoulderAction ( )
{
	static UFunction* pFnPerformLeftShoulderAction = NULL;

	if ( ! pFnPerformLeftShoulderAction )
		pFnPerformLeftShoulderAction = (UFunction*) UObject::GObjObjects()->Data[ 38192 ];

	UBioInGamePropertyEditor_execPerformLeftShoulderAction_Parms PerformLeftShoulderAction_Parms;

	pFnPerformLeftShoulderAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformLeftShoulderAction, &PerformLeftShoulderAction_Parms, NULL );

	pFnPerformLeftShoulderAction->FunctionFlags |= 0x400;

	return PerformLeftShoulderAction_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.PerformRightTriggerAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::PerformRightTriggerAction ( )
{
	static UFunction* pFnPerformRightTriggerAction = NULL;

	if ( ! pFnPerformRightTriggerAction )
		pFnPerformRightTriggerAction = (UFunction*) UObject::GObjObjects()->Data[ 38190 ];

	UBioInGamePropertyEditor_execPerformRightTriggerAction_Parms PerformRightTriggerAction_Parms;

	pFnPerformRightTriggerAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformRightTriggerAction, &PerformRightTriggerAction_Parms, NULL );

	pFnPerformRightTriggerAction->FunctionFlags |= 0x400;

	return PerformRightTriggerAction_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.PerformLeftTriggerAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::PerformLeftTriggerAction ( )
{
	static UFunction* pFnPerformLeftTriggerAction = NULL;

	if ( ! pFnPerformLeftTriggerAction )
		pFnPerformLeftTriggerAction = (UFunction*) UObject::GObjObjects()->Data[ 38188 ];

	UBioInGamePropertyEditor_execPerformLeftTriggerAction_Parms PerformLeftTriggerAction_Parms;

	pFnPerformLeftTriggerAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformLeftTriggerAction, &PerformLeftTriggerAction_Parms, NULL );

	pFnPerformLeftTriggerAction->FunctionFlags |= 0x400;

	return PerformLeftTriggerAction_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.ActivateMainMenu
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::ActivateMainMenu ( )
{
	static UFunction* pFnActivateMainMenu = NULL;

	if ( ! pFnActivateMainMenu )
		pFnActivateMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 38186 ];

	UBioInGamePropertyEditor_execActivateMainMenu_Parms ActivateMainMenu_Parms;

	pFnActivateMainMenu->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateMainMenu, &ActivateMainMenu_Parms, NULL );

	pFnActivateMainMenu->FunctionFlags |= 0x400;

	return ActivateMainMenu_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.PerformLeftAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::PerformLeftAction ( )
{
	static UFunction* pFnPerformLeftAction = NULL;

	if ( ! pFnPerformLeftAction )
		pFnPerformLeftAction = (UFunction*) UObject::GObjObjects()->Data[ 38184 ];

	UBioInGamePropertyEditor_execPerformLeftAction_Parms PerformLeftAction_Parms;

	pFnPerformLeftAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformLeftAction, &PerformLeftAction_Parms, NULL );

	pFnPerformLeftAction->FunctionFlags |= 0x400;

	return PerformLeftAction_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.PerformRightAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::PerformRightAction ( )
{
	static UFunction* pFnPerformRightAction = NULL;

	if ( ! pFnPerformRightAction )
		pFnPerformRightAction = (UFunction*) UObject::GObjObjects()->Data[ 38182 ];

	UBioInGamePropertyEditor_execPerformRightAction_Parms PerformRightAction_Parms;

	pFnPerformRightAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformRightAction, &PerformRightAction_Parms, NULL );

	pFnPerformRightAction->FunctionFlags |= 0x400;

	return PerformRightAction_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.PerformDownAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::PerformDownAction ( )
{
	static UFunction* pFnPerformDownAction = NULL;

	if ( ! pFnPerformDownAction )
		pFnPerformDownAction = (UFunction*) UObject::GObjObjects()->Data[ 38180 ];

	UBioInGamePropertyEditor_execPerformDownAction_Parms PerformDownAction_Parms;

	pFnPerformDownAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformDownAction, &PerformDownAction_Parms, NULL );

	pFnPerformDownAction->FunctionFlags |= 0x400;

	return PerformDownAction_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.PerformUpAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::PerformUpAction ( )
{
	static UFunction* pFnPerformUpAction = NULL;

	if ( ! pFnPerformUpAction )
		pFnPerformUpAction = (UFunction*) UObject::GObjObjects()->Data[ 38178 ];

	UBioInGamePropertyEditor_execPerformUpAction_Parms PerformUpAction_Parms;

	pFnPerformUpAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformUpAction, &PerformUpAction_Parms, NULL );

	pFnPerformUpAction->FunctionFlags |= 0x400;

	return PerformUpAction_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.PerformDeactivateAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::PerformDeactivateAction ( )
{
	static UFunction* pFnPerformDeactivateAction = NULL;

	if ( ! pFnPerformDeactivateAction )
		pFnPerformDeactivateAction = (UFunction*) UObject::GObjObjects()->Data[ 38176 ];

	UBioInGamePropertyEditor_execPerformDeactivateAction_Parms PerformDeactivateAction_Parms;

	pFnPerformDeactivateAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformDeactivateAction, &PerformDeactivateAction_Parms, NULL );

	pFnPerformDeactivateAction->FunctionFlags |= 0x400;

	return PerformDeactivateAction_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.PerformActivateAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::PerformActivateAction ( )
{
	static UFunction* pFnPerformActivateAction = NULL;

	if ( ! pFnPerformActivateAction )
		pFnPerformActivateAction = (UFunction*) UObject::GObjObjects()->Data[ 38174 ];

	UBioInGamePropertyEditor_execPerformActivateAction_Parms PerformActivateAction_Parms;

	pFnPerformActivateAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformActivateAction, &PerformActivateAction_Parms, NULL );

	pFnPerformActivateAction->FunctionFlags |= 0x400;

	return PerformActivateAction_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.CreateNodeTestData
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::CreateNodeTestData ( )
{
	static UFunction* pFnCreateNodeTestData = NULL;

	if ( ! pFnCreateNodeTestData )
		pFnCreateNodeTestData = (UFunction*) UObject::GObjObjects()->Data[ 38172 ];

	UBioInGamePropertyEditor_execCreateNodeTestData_Parms CreateNodeTestData_Parms;

	pFnCreateNodeTestData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateNodeTestData, &CreateNodeTestData_Parms, NULL );

	pFnCreateNodeTestData->FunctionFlags |= 0x400;

	return CreateNodeTestData_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.WriteTreeDataToHUD
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioHUD*                 oHUD                           ( CPF_Parm )

bool UBioInGamePropertyEditor::WriteTreeDataToHUD ( class ABioHUD* oHUD )
{
	static UFunction* pFnWriteTreeDataToHUD = NULL;

	if ( ! pFnWriteTreeDataToHUD )
		pFnWriteTreeDataToHUD = (UFunction*) UObject::GObjObjects()->Data[ 38169 ];

	UBioInGamePropertyEditor_execWriteTreeDataToHUD_Parms WriteTreeDataToHUD_Parms;
	WriteTreeDataToHUD_Parms.oHUD = oHUD;

	pFnWriteTreeDataToHUD->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWriteTreeDataToHUD, &WriteTreeDataToHUD_Parms, NULL );

	pFnWriteTreeDataToHUD->FunctionFlags |= 0x400;

	return WriteTreeDataToHUD_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.UpdateSystem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaTime                     ( CPF_Parm )

bool UBioInGamePropertyEditor::UpdateSystem ( float fDeltaTime )
{
	static UFunction* pFnUpdateSystem = NULL;

	if ( ! pFnUpdateSystem )
		pFnUpdateSystem = (UFunction*) UObject::GObjObjects()->Data[ 38166 ];

	UBioInGamePropertyEditor_execUpdateSystem_Parms UpdateSystem_Parms;
	UpdateSystem_Parms.fDeltaTime = fDeltaTime;

	pFnUpdateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSystem, &UpdateSystem_Parms, NULL );

	pFnUpdateSystem->FunctionFlags |= 0x400;

	return UpdateSystem_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.DeactivateSystem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::DeactivateSystem ( )
{
	static UFunction* pFnDeactivateSystem = NULL;

	if ( ! pFnDeactivateSystem )
		pFnDeactivateSystem = (UFunction*) UObject::GObjObjects()->Data[ 38164 ];

	UBioInGamePropertyEditor_execDeactivateSystem_Parms DeactivateSystem_Parms;

	pFnDeactivateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeactivateSystem, &DeactivateSystem_Parms, NULL );

	pFnDeactivateSystem->FunctionFlags |= 0x400;

	return DeactivateSystem_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.ActivateSystem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::ActivateSystem ( )
{
	static UFunction* pFnActivateSystem = NULL;

	if ( ! pFnActivateSystem )
		pFnActivateSystem = (UFunction*) UObject::GObjObjects()->Data[ 38162 ];

	UBioInGamePropertyEditor_execActivateSystem_Parms ActivateSystem_Parms;

	pFnActivateSystem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActivateSystem, &ActivateSystem_Parms, NULL );

	pFnActivateSystem->FunctionFlags |= 0x400;

	return ActivateSystem_Parms.ReturnValue;
};

// Function SFXGame.BioInGamePropertyEditor.Initialize
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioInGamePropertyEditor::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 38160 ];

	UBioInGamePropertyEditor_execInitialize_Parms Initialize_Parms;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;

	return Initialize_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorBaseNode.getTop
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioInGamePropertyEditor* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioInGamePropertyEditor* UBioPropertyEditorBaseNode::getTop ( )
{
	static UFunction* pFngetTop = NULL;

	if ( ! pFngetTop )
		pFngetTop = (UFunction*) UObject::GObjObjects()->Data[ 43600 ];

	UBioPropertyEditorBaseNode_execgetTop_Parms getTop_Parms;

	pFngetTop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFngetTop, &getTop_Parms, NULL );

	pFngetTop->FunctionFlags |= 0x400;

	return getTop_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorBaseNode.getDisplayText
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  selectable                     ( CPF_Parm )

struct FString UBioPropertyEditorBaseNode::getDisplayText ( unsigned long selectable )
{
	static UFunction* pFngetDisplayText = NULL;

	if ( ! pFngetDisplayText )
		pFngetDisplayText = (UFunction*) UObject::GObjObjects()->Data[ 43597 ];

	UBioPropertyEditorBaseNode_execgetDisplayText_Parms getDisplayText_Parms;
	getDisplayText_Parms.selectable = selectable;

	pFngetDisplayText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFngetDisplayText, &getDisplayText_Parms, NULL );

	pFngetDisplayText->FunctionFlags |= 0x400;

	return getDisplayText_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorBaseNode.getColour
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FColor                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FColor UBioPropertyEditorBaseNode::getColour ( )
{
	static UFunction* pFngetColour = NULL;

	if ( ! pFngetColour )
		pFngetColour = (UFunction*) UObject::GObjObjects()->Data[ 43595 ];

	UBioPropertyEditorBaseNode_execgetColour_Parms getColour_Parms;

	pFngetColour->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFngetColour, &getColour_Parms, NULL );

	pFngetColour->FunctionFlags |= 0x400;

	return getColour_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorBaseNode.setColour
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FColor                  Col                            ( CPF_Parm )

void UBioPropertyEditorBaseNode::setColour ( struct FColor Col )
{
	static UFunction* pFnsetColour = NULL;

	if ( ! pFnsetColour )
		pFnsetColour = (UFunction*) UObject::GObjObjects()->Data[ 43593 ];

	UBioPropertyEditorBaseNode_execsetColour_Parms setColour_Parms;
	memcpy ( &setColour_Parms.Col, &Col, 0x4 );

	pFnsetColour->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnsetColour, &setColour_Parms, NULL );

	pFnsetColour->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorBaseNode.RightShoulderAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorBaseNode::RightShoulderAction ( )
{
	static UFunction* pFnRightShoulderAction = NULL;

	if ( ! pFnRightShoulderAction )
		pFnRightShoulderAction = (UFunction*) UObject::GObjObjects()->Data[ 43592 ];

	UBioPropertyEditorBaseNode_execRightShoulderAction_Parms RightShoulderAction_Parms;

	pFnRightShoulderAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRightShoulderAction, &RightShoulderAction_Parms, NULL );

	pFnRightShoulderAction->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorBaseNode.LeftShoulderAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorBaseNode::LeftShoulderAction ( )
{
	static UFunction* pFnLeftShoulderAction = NULL;

	if ( ! pFnLeftShoulderAction )
		pFnLeftShoulderAction = (UFunction*) UObject::GObjObjects()->Data[ 43591 ];

	UBioPropertyEditorBaseNode_execLeftShoulderAction_Parms LeftShoulderAction_Parms;

	pFnLeftShoulderAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLeftShoulderAction, &LeftShoulderAction_Parms, NULL );

	pFnLeftShoulderAction->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorBaseNode.RightTriggerAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorBaseNode::RightTriggerAction ( )
{
	static UFunction* pFnRightTriggerAction = NULL;

	if ( ! pFnRightTriggerAction )
		pFnRightTriggerAction = (UFunction*) UObject::GObjObjects()->Data[ 43590 ];

	UBioPropertyEditorBaseNode_execRightTriggerAction_Parms RightTriggerAction_Parms;

	pFnRightTriggerAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRightTriggerAction, &RightTriggerAction_Parms, NULL );

	pFnRightTriggerAction->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorBaseNode.LeftTriggerAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorBaseNode::LeftTriggerAction ( )
{
	static UFunction* pFnLeftTriggerAction = NULL;

	if ( ! pFnLeftTriggerAction )
		pFnLeftTriggerAction = (UFunction*) UObject::GObjObjects()->Data[ 43589 ];

	UBioPropertyEditorBaseNode_execLeftTriggerAction_Parms LeftTriggerAction_Parms;

	pFnLeftTriggerAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLeftTriggerAction, &LeftTriggerAction_Parms, NULL );

	pFnLeftTriggerAction->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorBaseNode.DecrementCurrentSelection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorBaseNode::DecrementCurrentSelection ( )
{
	static UFunction* pFnDecrementCurrentSelection = NULL;

	if ( ! pFnDecrementCurrentSelection )
		pFnDecrementCurrentSelection = (UFunction*) UObject::GObjObjects()->Data[ 43588 ];

	UBioPropertyEditorBaseNode_execDecrementCurrentSelection_Parms DecrementCurrentSelection_Parms;

	pFnDecrementCurrentSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementCurrentSelection, &DecrementCurrentSelection_Parms, NULL );

	pFnDecrementCurrentSelection->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorBaseNode.IncrementCurrentSelection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorBaseNode::IncrementCurrentSelection ( )
{
	static UFunction* pFnIncrementCurrentSelection = NULL;

	if ( ! pFnIncrementCurrentSelection )
		pFnIncrementCurrentSelection = (UFunction*) UObject::GObjObjects()->Data[ 43587 ];

	UBioPropertyEditorBaseNode_execIncrementCurrentSelection_Parms IncrementCurrentSelection_Parms;

	pFnIncrementCurrentSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementCurrentSelection, &IncrementCurrentSelection_Parms, NULL );

	pFnIncrementCurrentSelection->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorBaseNode.GetSelectablesParent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioPropertyEditorBaseNode* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioPropertyEditorBaseNode* UBioPropertyEditorBaseNode::GetSelectablesParent ( )
{
	static UFunction* pFnGetSelectablesParent = NULL;

	if ( ! pFnGetSelectablesParent )
		pFnGetSelectablesParent = (UFunction*) UObject::GObjObjects()->Data[ 43585 ];

	UBioPropertyEditorBaseNode_execGetSelectablesParent_Parms GetSelectablesParent_Parms;

	pFnGetSelectablesParent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSelectablesParent, &GetSelectablesParent_Parms, NULL );

	pFnGetSelectablesParent->FunctionFlags |= 0x400;

	return GetSelectablesParent_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorBaseNode.GetSelectedChildOnStackTop
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioPropertyEditorBaseNode* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioPropertyEditorBaseNode* UBioPropertyEditorBaseNode::GetSelectedChildOnStackTop ( )
{
	static UFunction* pFnGetSelectedChildOnStackTop = NULL;

	if ( ! pFnGetSelectedChildOnStackTop )
		pFnGetSelectedChildOnStackTop = (UFunction*) UObject::GObjObjects()->Data[ 43583 ];

	UBioPropertyEditorBaseNode_execGetSelectedChildOnStackTop_Parms GetSelectedChildOnStackTop_Parms;

	pFnGetSelectedChildOnStackTop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSelectedChildOnStackTop, &GetSelectedChildOnStackTop_Parms, NULL );

	pFnGetSelectedChildOnStackTop->FunctionFlags |= 0x400;

	return GetSelectedChildOnStackTop_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorBaseNode.GetSelectedChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioPropertyEditorBaseNode* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioPropertyEditorBaseNode* UBioPropertyEditorBaseNode::GetSelectedChild ( )
{
	static UFunction* pFnGetSelectedChild = NULL;

	if ( ! pFnGetSelectedChild )
		pFnGetSelectedChild = (UFunction*) UObject::GObjObjects()->Data[ 43581 ];

	UBioPropertyEditorBaseNode_execGetSelectedChild_Parms GetSelectedChild_Parms;

	pFnGetSelectedChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSelectedChild, &GetSelectedChild_Parms, NULL );

	pFnGetSelectedChild->FunctionFlags |= 0x400;

	return GetSelectedChild_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorBaseNode.SelectionAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPropertyEditorBaseNode::SelectionAction ( )
{
	static UFunction* pFnSelectionAction = NULL;

	if ( ! pFnSelectionAction )
		pFnSelectionAction = (UFunction*) UObject::GObjObjects()->Data[ 43579 ];

	UBioPropertyEditorBaseNode_execSelectionAction_Parms SelectionAction_Parms;

	pFnSelectionAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectionAction, &SelectionAction_Parms, NULL );

	pFnSelectionAction->FunctionFlags |= 0x400;

	return SelectionAction_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorPropertyNode.MakeNodes
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 thisOneOnly                    ( CPF_Parm | CPF_NeedCtorLink )

bool UBioPropertyEditorPropertyNode::MakeNodes ( struct FString thisOneOnly )
{
	static UFunction* pFnMakeNodes = NULL;

	if ( ! pFnMakeNodes )
		pFnMakeNodes = (UFunction*) UObject::GObjObjects()->Data[ 43615 ];

	UBioPropertyEditorPropertyNode_execMakeNodes_Parms MakeNodes_Parms;
	memcpy ( &MakeNodes_Parms.thisOneOnly, &thisOneOnly, 0xC );

	pFnMakeNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeNodes, &MakeNodes_Parms, NULL );

	pFnMakeNodes->FunctionFlags |= 0x400;

	return MakeNodes_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorPropertyNode.SetObject
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioPropertyEditorPropertyNode::SetObject ( class UObject* O )
{
	static UFunction* pFnSetObject = NULL;

	if ( ! pFnSetObject )
		pFnSetObject = (UFunction*) UObject::GObjObjects()->Data[ 43613 ];

	UBioPropertyEditorPropertyNode_execSetObject_Parms SetObject_Parms;
	SetObject_Parms.O = O;

	pFnSetObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetObject, &SetObject_Parms, NULL );

	pFnSetObject->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorPropertyNode.DecrementCurrentSelection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorPropertyNode::DecrementCurrentSelection ( )
{
	static UFunction* pFnDecrementCurrentSelection = NULL;

	if ( ! pFnDecrementCurrentSelection )
		pFnDecrementCurrentSelection = (UFunction*) UObject::GObjObjects()->Data[ 43612 ];

	UBioPropertyEditorPropertyNode_execDecrementCurrentSelection_Parms DecrementCurrentSelection_Parms;

	pFnDecrementCurrentSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementCurrentSelection, &DecrementCurrentSelection_Parms, NULL );

	pFnDecrementCurrentSelection->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorPropertyNode.IncrementCurrentSelection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorPropertyNode::IncrementCurrentSelection ( )
{
	static UFunction* pFnIncrementCurrentSelection = NULL;

	if ( ! pFnIncrementCurrentSelection )
		pFnIncrementCurrentSelection = (UFunction*) UObject::GObjObjects()->Data[ 43611 ];

	UBioPropertyEditorPropertyNode_execIncrementCurrentSelection_Parms IncrementCurrentSelection_Parms;

	pFnIncrementCurrentSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementCurrentSelection, &IncrementCurrentSelection_Parms, NULL );

	pFnIncrementCurrentSelection->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorPropertyNode.RightTriggerAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorPropertyNode::RightTriggerAction ( )
{
	static UFunction* pFnRightTriggerAction = NULL;

	if ( ! pFnRightTriggerAction )
		pFnRightTriggerAction = (UFunction*) UObject::GObjObjects()->Data[ 43610 ];

	UBioPropertyEditorPropertyNode_execRightTriggerAction_Parms RightTriggerAction_Parms;

	pFnRightTriggerAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRightTriggerAction, &RightTriggerAction_Parms, NULL );

	pFnRightTriggerAction->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorPropertyNode.LeftTriggerAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorPropertyNode::LeftTriggerAction ( )
{
	static UFunction* pFnLeftTriggerAction = NULL;

	if ( ! pFnLeftTriggerAction )
		pFnLeftTriggerAction = (UFunction*) UObject::GObjObjects()->Data[ 43609 ];

	UBioPropertyEditorPropertyNode_execLeftTriggerAction_Parms LeftTriggerAction_Parms;

	pFnLeftTriggerAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLeftTriggerAction, &LeftTriggerAction_Parms, NULL );

	pFnLeftTriggerAction->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorPropertyNode.getDisplayText
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  selectable                     ( CPF_Parm )

struct FString UBioPropertyEditorPropertyNode::getDisplayText ( unsigned long selectable )
{
	static UFunction* pFngetDisplayText = NULL;

	if ( ! pFngetDisplayText )
		pFngetDisplayText = (UFunction*) UObject::GObjObjects()->Data[ 43606 ];

	UBioPropertyEditorPropertyNode_execgetDisplayText_Parms getDisplayText_Parms;
	getDisplayText_Parms.selectable = selectable;

	pFngetDisplayText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFngetDisplayText, &getDisplayText_Parms, NULL );

	pFngetDisplayText->FunctionFlags |= 0x400;

	return getDisplayText_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorPropertyNode.SelectionAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPropertyEditorPropertyNode::SelectionAction ( )
{
	static UFunction* pFnSelectionAction = NULL;

	if ( ! pFnSelectionAction )
		pFnSelectionAction = (UFunction*) UObject::GObjObjects()->Data[ 43604 ];

	UBioPropertyEditorPropertyNode_execSelectionAction_Parms SelectionAction_Parms;

	pFnSelectionAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectionAction, &SelectionAction_Parms, NULL );

	pFnSelectionAction->FunctionFlags |= 0x400;

	return SelectionAction_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorArrayNode.SelectionAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPropertyEditorArrayNode::SelectionAction ( )
{
	static UFunction* pFnSelectionAction = NULL;

	if ( ! pFnSelectionAction )
		pFnSelectionAction = (UFunction*) UObject::GObjObjects()->Data[ 43619 ];

	UBioPropertyEditorArrayNode_execSelectionAction_Parms SelectionAction_Parms;

	pFnSelectionAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectionAction, &SelectionAction_Parms, NULL );

	pFnSelectionAction->FunctionFlags |= 0x400;

	return SelectionAction_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorBoneNode.SelectionAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPropertyEditorBoneNode::SelectionAction ( )
{
	static UFunction* pFnSelectionAction = NULL;

	if ( ! pFnSelectionAction )
		pFnSelectionAction = (UFunction*) UObject::GObjObjects()->Data[ 43624 ];

	UBioPropertyEditorBoneNode_execSelectionAction_Parms SelectionAction_Parms;

	pFnSelectionAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectionAction, &SelectionAction_Parms, NULL );

	pFnSelectionAction->FunctionFlags |= 0x400;

	return SelectionAction_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorEditableNode.AcceptNewValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorEditableNode::AcceptNewValue ( )
{
	static UFunction* pFnAcceptNewValue = NULL;

	if ( ! pFnAcceptNewValue )
		pFnAcceptNewValue = (UFunction*) UObject::GObjObjects()->Data[ 43642 ];

	UBioPropertyEditorEditableNode_execAcceptNewValue_Parms AcceptNewValue_Parms;

	pFnAcceptNewValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAcceptNewValue, &AcceptNewValue_Parms, NULL );

	pFnAcceptNewValue->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorEditableNode.DoChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          Delta                          ( CPF_Parm )

void UBioPropertyEditorEditableNode::DoChange ( float Delta )
{
	static UFunction* pFnDoChange = NULL;

	if ( ! pFnDoChange )
		pFnDoChange = (UFunction*) UObject::GObjObjects()->Data[ 43640 ];

	UBioPropertyEditorEditableNode_execDoChange_Parms DoChange_Parms;
	DoChange_Parms.Delta = Delta;

	pFnDoChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoChange, &DoChange_Parms, NULL );

	pFnDoChange->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorEditableNode.RightTriggerAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorEditableNode::RightTriggerAction ( )
{
	static UFunction* pFnRightTriggerAction = NULL;

	if ( ! pFnRightTriggerAction )
		pFnRightTriggerAction = (UFunction*) UObject::GObjObjects()->Data[ 43639 ];

	UBioPropertyEditorEditableNode_execRightTriggerAction_Parms RightTriggerAction_Parms;

	pFnRightTriggerAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRightTriggerAction, &RightTriggerAction_Parms, NULL );

	pFnRightTriggerAction->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorEditableNode.LeftTriggerAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorEditableNode::LeftTriggerAction ( )
{
	static UFunction* pFnLeftTriggerAction = NULL;

	if ( ! pFnLeftTriggerAction )
		pFnLeftTriggerAction = (UFunction*) UObject::GObjObjects()->Data[ 43638 ];

	UBioPropertyEditorEditableNode_execLeftTriggerAction_Parms LeftTriggerAction_Parms;

	pFnLeftTriggerAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLeftTriggerAction, &LeftTriggerAction_Parms, NULL );

	pFnLeftTriggerAction->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorEditableNode.DecrementCurrentSelection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorEditableNode::DecrementCurrentSelection ( )
{
	static UFunction* pFnDecrementCurrentSelection = NULL;

	if ( ! pFnDecrementCurrentSelection )
		pFnDecrementCurrentSelection = (UFunction*) UObject::GObjObjects()->Data[ 43637 ];

	UBioPropertyEditorEditableNode_execDecrementCurrentSelection_Parms DecrementCurrentSelection_Parms;

	pFnDecrementCurrentSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementCurrentSelection, &DecrementCurrentSelection_Parms, NULL );

	pFnDecrementCurrentSelection->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorEditableNode.IncrementCurrentSelection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorEditableNode::IncrementCurrentSelection ( )
{
	static UFunction* pFnIncrementCurrentSelection = NULL;

	if ( ! pFnIncrementCurrentSelection )
		pFnIncrementCurrentSelection = (UFunction*) UObject::GObjObjects()->Data[ 43636 ];

	UBioPropertyEditorEditableNode_execIncrementCurrentSelection_Parms IncrementCurrentSelection_Parms;

	pFnIncrementCurrentSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementCurrentSelection, &IncrementCurrentSelection_Parms, NULL );

	pFnIncrementCurrentSelection->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorEditableNode.SelectionAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPropertyEditorEditableNode::SelectionAction ( )
{
	static UFunction* pFnSelectionAction = NULL;

	if ( ! pFnSelectionAction )
		pFnSelectionAction = (UFunction*) UObject::GObjObjects()->Data[ 43634 ];

	UBioPropertyEditorEditableNode_execSelectionAction_Parms SelectionAction_Parms;

	pFnSelectionAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectionAction, &SelectionAction_Parms, NULL );

	pFnSelectionAction->FunctionFlags |= 0x400;

	return SelectionAction_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorEditNode.getDisplayText
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  selectable                     ( CPF_Parm )

struct FString UBioPropertyEditorEditNode::getDisplayText ( unsigned long selectable )
{
	static UFunction* pFngetDisplayText = NULL;

	if ( ! pFngetDisplayText )
		pFngetDisplayText = (UFunction*) UObject::GObjObjects()->Data[ 43649 ];

	UBioPropertyEditorEditNode_execgetDisplayText_Parms getDisplayText_Parms;
	getDisplayText_Parms.selectable = selectable;

	pFngetDisplayText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFngetDisplayText, &getDisplayText_Parms, NULL );

	pFngetDisplayText->FunctionFlags |= 0x400;

	return getDisplayText_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorEditNode.SelectionAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPropertyEditorEditNode::SelectionAction ( )
{
	static UFunction* pFnSelectionAction = NULL;

	if ( ! pFnSelectionAction )
		pFnSelectionAction = (UFunction*) UObject::GObjObjects()->Data[ 43647 ];

	UBioPropertyEditorEditNode_execSelectionAction_Parms SelectionAction_Parms;

	pFnSelectionAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectionAction, &SelectionAction_Parms, NULL );

	pFnSelectionAction->FunctionFlags |= 0x400;

	return SelectionAction_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorLevelNode.SelectionAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPropertyEditorLevelNode::SelectionAction ( )
{
	static UFunction* pFnSelectionAction = NULL;

	if ( ! pFnSelectionAction )
		pFnSelectionAction = (UFunction*) UObject::GObjObjects()->Data[ 43652 ];

	UBioPropertyEditorLevelNode_execSelectionAction_Parms SelectionAction_Parms;

	pFnSelectionAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectionAction, &SelectionAction_Parms, NULL );

	pFnSelectionAction->FunctionFlags |= 0x400;

	return SelectionAction_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorLoadNode.DecrementCurrentSelection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorLoadNode::DecrementCurrentSelection ( )
{
	static UFunction* pFnDecrementCurrentSelection = NULL;

	if ( ! pFnDecrementCurrentSelection )
		pFnDecrementCurrentSelection = (UFunction*) UObject::GObjObjects()->Data[ 43658 ];

	UBioPropertyEditorLoadNode_execDecrementCurrentSelection_Parms DecrementCurrentSelection_Parms;

	pFnDecrementCurrentSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementCurrentSelection, &DecrementCurrentSelection_Parms, NULL );

	pFnDecrementCurrentSelection->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorLoadNode.IncrementCurrentSelection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorLoadNode::IncrementCurrentSelection ( )
{
	static UFunction* pFnIncrementCurrentSelection = NULL;

	if ( ! pFnIncrementCurrentSelection )
		pFnIncrementCurrentSelection = (UFunction*) UObject::GObjObjects()->Data[ 43657 ];

	UBioPropertyEditorLoadNode_execIncrementCurrentSelection_Parms IncrementCurrentSelection_Parms;

	pFnIncrementCurrentSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementCurrentSelection, &IncrementCurrentSelection_Parms, NULL );

	pFnIncrementCurrentSelection->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorLoadNode.SelectionAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPropertyEditorLoadNode::SelectionAction ( )
{
	static UFunction* pFnSelectionAction = NULL;

	if ( ! pFnSelectionAction )
		pFnSelectionAction = (UFunction*) UObject::GObjObjects()->Data[ 43655 ];

	UBioPropertyEditorLoadNode_execSelectionAction_Parms SelectionAction_Parms;

	pFnSelectionAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectionAction, &SelectionAction_Parms, NULL );

	pFnSelectionAction->FunctionFlags |= 0x400;

	return SelectionAction_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorReadOnlyNode.SelectionAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPropertyEditorReadOnlyNode::SelectionAction ( )
{
	static UFunction* pFnSelectionAction = NULL;

	if ( ! pFnSelectionAction )
		pFnSelectionAction = (UFunction*) UObject::GObjObjects()->Data[ 43660 ];

	UBioPropertyEditorReadOnlyNode_execSelectionAction_Parms SelectionAction_Parms;

	pFnSelectionAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectionAction, &SelectionAction_Parms, NULL );

	pFnSelectionAction->FunctionFlags |= 0x400;

	return SelectionAction_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorSaveNode.DecrementCurrentSelection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorSaveNode::DecrementCurrentSelection ( )
{
	static UFunction* pFnDecrementCurrentSelection = NULL;

	if ( ! pFnDecrementCurrentSelection )
		pFnDecrementCurrentSelection = (UFunction*) UObject::GObjObjects()->Data[ 43666 ];

	UBioPropertyEditorSaveNode_execDecrementCurrentSelection_Parms DecrementCurrentSelection_Parms;

	pFnDecrementCurrentSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDecrementCurrentSelection, &DecrementCurrentSelection_Parms, NULL );

	pFnDecrementCurrentSelection->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorSaveNode.IncrementCurrentSelection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioPropertyEditorSaveNode::IncrementCurrentSelection ( )
{
	static UFunction* pFnIncrementCurrentSelection = NULL;

	if ( ! pFnIncrementCurrentSelection )
		pFnIncrementCurrentSelection = (UFunction*) UObject::GObjObjects()->Data[ 43665 ];

	UBioPropertyEditorSaveNode_execIncrementCurrentSelection_Parms IncrementCurrentSelection_Parms;

	pFnIncrementCurrentSelection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementCurrentSelection, &IncrementCurrentSelection_Parms, NULL );

	pFnIncrementCurrentSelection->FunctionFlags |= 0x400;
};

// Function SFXGame.BioPropertyEditorSaveNode.SelectionAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPropertyEditorSaveNode::SelectionAction ( )
{
	static UFunction* pFnSelectionAction = NULL;

	if ( ! pFnSelectionAction )
		pFnSelectionAction = (UFunction*) UObject::GObjObjects()->Data[ 43663 ];

	UBioPropertyEditorSaveNode_execSelectionAction_Parms SelectionAction_Parms;

	pFnSelectionAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectionAction, &SelectionAction_Parms, NULL );

	pFnSelectionAction->FunctionFlags |= 0x400;

	return SelectionAction_Parms.ReturnValue;
};

// Function SFXGame.BioPropertyEditorVolatileNode.SelectionAction
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioPropertyEditorVolatileNode::SelectionAction ( )
{
	static UFunction* pFnSelectionAction = NULL;

	if ( ! pFnSelectionAction )
		pFnSelectionAction = (UFunction*) UObject::GObjObjects()->Data[ 43667 ];

	UBioPropertyEditorVolatileNode_execSelectionAction_Parms SelectionAction_Parms;

	pFnSelectionAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectionAction, &SelectionAction_Parms, NULL );

	pFnSelectionAction->FunctionFlags |= 0x400;

	return SelectionAction_Parms.ReturnValue;
};

// Function SFXGame.BioGestureAnimSetMgr.LeaveGesturesMode
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  eLeaveRequestPriority          ( CPF_Parm )

void UBioGestureAnimSetMgr::eventLeaveGesturesMode ( unsigned char eLeaveRequestPriority )
{
	static UFunction* pFnLeaveGesturesMode = NULL;

	if ( ! pFnLeaveGesturesMode )
		pFnLeaveGesturesMode = (UFunction*) UObject::GObjObjects()->Data[ 36971 ];

	UBioGestureAnimSetMgr_eventLeaveGesturesMode_Parms LeaveGesturesMode_Parms;
	LeaveGesturesMode_Parms.eLeaveRequestPriority = eLeaveRequestPriority;

	this->ProcessEvent ( pFnLeaveGesturesMode, &LeaveGesturesMode_Parms, NULL );
};

// Function SFXGame.BioGestureAnimSetMgr.EnterGesturesMode
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bAutoLeave                     ( CPF_Parm )
// unsigned char                  eEntranceRequestPriority       ( CPF_Parm )
// unsigned long                  bForceGestureKill              ( CPF_OptionalParm | CPF_Parm )
// float                          fBlendTime                     ( CPF_OptionalParm | CPF_Parm )

void UBioGestureAnimSetMgr::eventEnterGesturesMode ( unsigned long bAutoLeave, unsigned char eEntranceRequestPriority, unsigned long bForceGestureKill, float fBlendTime )
{
	static UFunction* pFnEnterGesturesMode = NULL;

	if ( ! pFnEnterGesturesMode )
		pFnEnterGesturesMode = (UFunction*) UObject::GObjObjects()->Data[ 36965 ];

	UBioGestureAnimSetMgr_eventEnterGesturesMode_Parms EnterGesturesMode_Parms;
	EnterGesturesMode_Parms.bAutoLeave = bAutoLeave;
	EnterGesturesMode_Parms.eEntranceRequestPriority = eEntranceRequestPriority;
	EnterGesturesMode_Parms.bForceGestureKill = bForceGestureKill;
	EnterGesturesMode_Parms.fBlendTime = fBlendTime;

	this->ProcessEvent ( pFnEnterGesturesMode, &EnterGesturesMode_Parms, NULL );
};

// Function SFXGame.SFXGestures.LoadRuntimeData
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void USFXGestures::LoadRuntimeData ( )
{
	static UFunction* pFnLoadRuntimeData = NULL;

	if ( ! pFnLoadRuntimeData )
		pFnLoadRuntimeData = (UFunction*) UObject::GObjObjects()->Data[ 56606 ];

	USFXGestures_execLoadRuntimeData_Parms LoadRuntimeData_Parms;

	pFnLoadRuntimeData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadRuntimeData, &LoadRuntimeData_Parms, NULL );

	pFnLoadRuntimeData->FunctionFlags |= 0x400;
};

// Function SFXGame.BioInterpolator.InterpolateFloatCurve
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// float                          Source                         ( CPF_Parm )
// float                          Target                         ( CPF_Parm )
// float                          normalizedDisplacement         ( CPF_Parm )
// float                          output                         ( CPF_Parm | CPF_OutParm )
// struct FInterpCurveFloat       Curve                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioInterpolator::InterpolateFloatCurve ( float Source, float Target, float normalizedDisplacement, float* output, struct FInterpCurveFloat* Curve )
{
	static UFunction* pFnInterpolateFloatCurve = NULL;

	if ( ! pFnInterpolateFloatCurve )
		pFnInterpolateFloatCurve = (UFunction*) UObject::GObjObjects()->Data[ 38350 ];

	UBioInterpolator_execInterpolateFloatCurve_Parms InterpolateFloatCurve_Parms;
	InterpolateFloatCurve_Parms.Source = Source;
	InterpolateFloatCurve_Parms.Target = Target;
	InterpolateFloatCurve_Parms.normalizedDisplacement = normalizedDisplacement;

	pFnInterpolateFloatCurve->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInterpolateFloatCurve, &InterpolateFloatCurve_Parms, NULL );

	pFnInterpolateFloatCurve->FunctionFlags |= 0x400;

	if ( output )
		*output = InterpolateFloatCurve_Parms.output;

	if ( Curve )
		memcpy ( Curve, &InterpolateFloatCurve_Parms.Curve, 0x10 );
};

// Function SFXGame.BioInterpolator.InterpolateFloat
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  InterpolationMethod            ( CPF_Parm )
// float                          Source                         ( CPF_Parm )
// float                          Target                         ( CPF_Parm )
// float                          normalizedDisplacement         ( CPF_Parm )
// float                          output                         ( CPF_Parm | CPF_OutParm )

void UBioInterpolator::InterpolateFloat ( unsigned char InterpolationMethod, float Source, float Target, float normalizedDisplacement, float* output )
{
	static UFunction* pFnInterpolateFloat = NULL;

	if ( ! pFnInterpolateFloat )
		pFnInterpolateFloat = (UFunction*) UObject::GObjObjects()->Data[ 38344 ];

	UBioInterpolator_execInterpolateFloat_Parms InterpolateFloat_Parms;
	InterpolateFloat_Parms.InterpolationMethod = InterpolationMethod;
	InterpolateFloat_Parms.Source = Source;
	InterpolateFloat_Parms.Target = Target;
	InterpolateFloat_Parms.normalizedDisplacement = normalizedDisplacement;

	pFnInterpolateFloat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInterpolateFloat, &InterpolateFloat_Parms, NULL );

	pFnInterpolateFloat->FunctionFlags |= 0x400;

	if ( output )
		*output = InterpolateFloat_Parms.output;
};

// Function SFXGame.BioInterpolator.InterpolateVector
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  InterpolationMethod            ( CPF_Parm )
// struct FVector                 Source                         ( CPF_Parm )
// struct FVector                 Target                         ( CPF_Parm )
// float                          normalizedDisplacement         ( CPF_Parm )
// struct FVector                 output                         ( CPF_Parm | CPF_OutParm )

void UBioInterpolator::InterpolateVector ( unsigned char InterpolationMethod, struct FVector Source, struct FVector Target, float normalizedDisplacement, struct FVector* output )
{
	static UFunction* pFnInterpolateVector = NULL;

	if ( ! pFnInterpolateVector )
		pFnInterpolateVector = (UFunction*) UObject::GObjObjects()->Data[ 38338 ];

	UBioInterpolator_execInterpolateVector_Parms InterpolateVector_Parms;
	InterpolateVector_Parms.InterpolationMethod = InterpolationMethod;
	memcpy ( &InterpolateVector_Parms.Source, &Source, 0xC );
	memcpy ( &InterpolateVector_Parms.Target, &Target, 0xC );
	InterpolateVector_Parms.normalizedDisplacement = normalizedDisplacement;

	pFnInterpolateVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInterpolateVector, &InterpolateVector_Parms, NULL );

	pFnInterpolateVector->FunctionFlags |= 0x400;

	if ( output )
		memcpy ( output, &InterpolateVector_Parms.output, 0xC );
};

// Function SFXGame.BioInterpolator.InterpolateRotator
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  InterpolationMethod            ( CPF_Parm )
// struct FRotator                Source                         ( CPF_Parm )
// struct FRotator                Target                         ( CPF_Parm )
// float                          normalizedDisplacement         ( CPF_Parm )
// struct FRotator                output                         ( CPF_Parm | CPF_OutParm )

void UBioInterpolator::InterpolateRotator ( unsigned char InterpolationMethod, struct FRotator Source, struct FRotator Target, float normalizedDisplacement, struct FRotator* output )
{
	static UFunction* pFnInterpolateRotator = NULL;

	if ( ! pFnInterpolateRotator )
		pFnInterpolateRotator = (UFunction*) UObject::GObjObjects()->Data[ 38332 ];

	UBioInterpolator_execInterpolateRotator_Parms InterpolateRotator_Parms;
	InterpolateRotator_Parms.InterpolationMethod = InterpolationMethod;
	memcpy ( &InterpolateRotator_Parms.Source, &Source, 0xC );
	memcpy ( &InterpolateRotator_Parms.Target, &Target, 0xC );
	InterpolateRotator_Parms.normalizedDisplacement = normalizedDisplacement;

	pFnInterpolateRotator->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInterpolateRotator, &InterpolateRotator_Parms, NULL );

	pFnInterpolateRotator->FunctionFlags |= 0x400;

	if ( output )
		memcpy ( output, &InterpolateRotator_Parms.output, 0xC );
};

// Function SFXGame.BioMorphFace.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* UBioMorphFace::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 38604 ];

	UBioMorphFace_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFace.ApplyMaterialOverridesToPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void UBioMorphFace::ApplyMaterialOverridesToPawn ( class ABioPawn* Pawn )
{
	static UFunction* pFnApplyMaterialOverridesToPawn = NULL;

	if ( ! pFnApplyMaterialOverridesToPawn )
		pFnApplyMaterialOverridesToPawn = (UFunction*) UObject::GObjObjects()->Data[ 38602 ];

	UBioMorphFace_execApplyMaterialOverridesToPawn_Parms ApplyMaterialOverridesToPawn_Parms;
	ApplyMaterialOverridesToPawn_Parms.Pawn = Pawn;

	pFnApplyMaterialOverridesToPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyMaterialOverridesToPawn, &ApplyMaterialOverridesToPawn_Parms, NULL );

	pFnApplyMaterialOverridesToPawn->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFace.ApplyMaterialOverrides
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USkeletalMeshComponent*  Mesh                           ( CPF_Parm | CPF_EditInline )

void UBioMorphFace::ApplyMaterialOverrides ( class USkeletalMeshComponent* Mesh )
{
	static UFunction* pFnApplyMaterialOverrides = NULL;

	if ( ! pFnApplyMaterialOverrides )
		pFnApplyMaterialOverrides = (UFunction*) UObject::GObjObjects()->Data[ 38600 ];

	UBioMorphFace_execApplyMaterialOverrides_Parms ApplyMaterialOverrides_Parms;
	ApplyMaterialOverrides_Parms.Mesh = Mesh;

	pFnApplyMaterialOverrides->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyMaterialOverrides, &ApplyMaterialOverrides_Parms, NULL );

	pFnApplyMaterialOverrides->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFace.SetPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            buffer                         ( CPF_Parm )
// int                            vert                           ( CPF_Parm )
// struct FVector                 V                              ( CPF_Parm )

void UBioMorphFace::SetPosition ( int buffer, int vert, struct FVector V )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 38596 ];

	UBioMorphFace_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.buffer = buffer;
	SetPosition_Parms.vert = vert;
	memcpy ( &SetPosition_Parms.V, &V, 0xC );

	pFnSetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );

	pFnSetPosition->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFace.GetPosition
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            buffer                         ( CPF_Parm )
// int                            vert                           ( CPF_Parm )

struct FVector UBioMorphFace::GetPosition ( int buffer, int vert )
{
	static UFunction* pFnGetPosition = NULL;

	if ( ! pFnGetPosition )
		pFnGetPosition = (UFunction*) UObject::GObjObjects()->Data[ 38592 ];

	UBioMorphFace_execGetPosition_Parms GetPosition_Parms;
	GetPosition_Parms.buffer = buffer;
	GetPosition_Parms.vert = vert;

	pFnGetPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPosition, &GetPosition_Parms, NULL );

	pFnGetPosition->FunctionFlags |= 0x400;

	return GetPosition_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFace.GetNumVerts
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            buffer                         ( CPF_Parm )

int UBioMorphFace::GetNumVerts ( int buffer )
{
	static UFunction* pFnGetNumVerts = NULL;

	if ( ! pFnGetNumVerts )
		pFnGetNumVerts = (UFunction*) UObject::GObjObjects()->Data[ 38589 ];

	UBioMorphFace_execGetNumVerts_Parms GetNumVerts_Parms;
	GetNumVerts_Parms.buffer = buffer;

	pFnGetNumVerts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumVerts, &GetNumVerts_Parms, NULL );

	pFnGetNumVerts->FunctionFlags |= 0x400;

	return GetNumVerts_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFace.GetNumVertexBuffers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioMorphFace::GetNumVertexBuffers ( )
{
	static UFunction* pFnGetNumVertexBuffers = NULL;

	if ( ! pFnGetNumVertexBuffers )
		pFnGetNumVertexBuffers = (UFunction*) UObject::GObjObjects()->Data[ 38587 ];

	UBioMorphFace_execGetNumVertexBuffers_Parms GetNumVertexBuffers_Parms;

	pFnGetNumVertexBuffers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumVertexBuffers, &GetNumVertexBuffers_Parms, NULL );

	pFnGetNumVertexBuffers->FunctionFlags |= 0x400;

	return GetNumVertexBuffers_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFace.RefreshBuffers
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< int >                  BufferIndices                  ( CPF_Parm | CPF_NeedCtorLink )

void UBioMorphFace::RefreshBuffers ( TArray< int > BufferIndices )
{
	static UFunction* pFnRefreshBuffers = NULL;

	if ( ! pFnRefreshBuffers )
		pFnRefreshBuffers = (UFunction*) UObject::GObjObjects()->Data[ 38584 ];

	UBioMorphFace_execRefreshBuffers_Parms RefreshBuffers_Parms;
	memcpy ( &RefreshBuffers_Parms.BufferIndices, &BufferIndices, 0xC );

	pFnRefreshBuffers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshBuffers, &RefreshBuffers_Parms, NULL );

	pFnRefreshBuffers->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFace.ScriptUpdateMorph
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioMorphFace::ScriptUpdateMorph ( )
{
	static UFunction* pFnScriptUpdateMorph = NULL;

	if ( ! pFnScriptUpdateMorph )
		pFnScriptUpdateMorph = (UFunction*) UObject::GObjObjects()->Data[ 38583 ];

	UBioMorphFace_execScriptUpdateMorph_Parms ScriptUpdateMorph_Parms;

	pFnScriptUpdateMorph->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnScriptUpdateMorph, &ScriptUpdateMorph_Parms, NULL );

	pFnScriptUpdateMorph->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFaceFrontEnd.SelectPreviousBaseHead
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioMorphFaceFrontEnd::SelectPreviousBaseHead ( )
{
	static UFunction* pFnSelectPreviousBaseHead = NULL;

	if ( ! pFnSelectPreviousBaseHead )
		pFnSelectPreviousBaseHead = (UFunction*) UObject::GObjObjects()->Data[ 38802 ];

	UBioMorphFaceFrontEnd_execSelectPreviousBaseHead_Parms SelectPreviousBaseHead_Parms;

	pFnSelectPreviousBaseHead->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectPreviousBaseHead, &SelectPreviousBaseHead_Parms, NULL );

	pFnSelectPreviousBaseHead->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFaceFrontEnd.SelectNextBaseHead
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioMorphFaceFrontEnd::SelectNextBaseHead ( )
{
	static UFunction* pFnSelectNextBaseHead = NULL;

	if ( ! pFnSelectNextBaseHead )
		pFnSelectNextBaseHead = (UFunction*) UObject::GObjObjects()->Data[ 38801 ];

	UBioMorphFaceFrontEnd_execSelectNextBaseHead_Parms SelectNextBaseHead_Parms;

	pFnSelectNextBaseHead->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectNextBaseHead, &SelectNextBaseHead_Parms, NULL );

	pFnSelectNextBaseHead->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFaceFrontEnd.SetPlayerName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sPlayerName                    ( CPF_Parm | CPF_NeedCtorLink )

void UBioMorphFaceFrontEnd::SetPlayerName ( struct FString sPlayerName )
{
	static UFunction* pFnSetPlayerName = NULL;

	if ( ! pFnSetPlayerName )
		pFnSetPlayerName = (UFunction*) UObject::GObjObjects()->Data[ 38799 ];

	UBioMorphFaceFrontEnd_execSetPlayerName_Parms SetPlayerName_Parms;
	memcpy ( &SetPlayerName_Parms.sPlayerName, &sPlayerName, 0xC );

	pFnSetPlayerName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPlayerName, &SetPlayerName_Parms, NULL );

	pFnSetPlayerName->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFaceFrontEnd.CleanUp
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioMorphFaceFrontEnd::CleanUp ( )
{
	static UFunction* pFnCleanUp = NULL;

	if ( ! pFnCleanUp )
		pFnCleanUp = (UFunction*) UObject::GObjObjects()->Data[ 38798 ];

	UBioMorphFaceFrontEnd_execCleanUp_Parms CleanUp_Parms;

	pFnCleanUp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCleanUp, &CleanUp_Parms, NULL );

	pFnCleanUp->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFaceFrontEnd.HandleSliderChange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            categoryIndex                  ( CPF_Parm )
// int                            sliderIndex                    ( CPF_Parm )
// int                            SliderValue                    ( CPF_Parm )
// unsigned long                  bUpdate                        ( CPF_OptionalParm | CPF_Parm )

void UBioMorphFaceFrontEnd::HandleSliderChange ( int categoryIndex, int sliderIndex, int SliderValue, unsigned long bUpdate )
{
	static UFunction* pFnHandleSliderChange = NULL;

	if ( ! pFnHandleSliderChange )
		pFnHandleSliderChange = (UFunction*) UObject::GObjObjects()->Data[ 38793 ];

	UBioMorphFaceFrontEnd_execHandleSliderChange_Parms HandleSliderChange_Parms;
	HandleSliderChange_Parms.categoryIndex = categoryIndex;
	HandleSliderChange_Parms.sliderIndex = sliderIndex;
	HandleSliderChange_Parms.SliderValue = SliderValue;
	HandleSliderChange_Parms.bUpdate = bUpdate;

	pFnHandleSliderChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHandleSliderChange, &HandleSliderChange_Parms, NULL );

	pFnHandleSliderChange->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFaceFrontEnd.GetSliderNotched
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            categoryIndex                  ( CPF_Parm )
// int                            sliderIndex                    ( CPF_Parm )

bool UBioMorphFaceFrontEnd::GetSliderNotched ( int categoryIndex, int sliderIndex )
{
	static UFunction* pFnGetSliderNotched = NULL;

	if ( ! pFnGetSliderNotched )
		pFnGetSliderNotched = (UFunction*) UObject::GObjObjects()->Data[ 38789 ];

	UBioMorphFaceFrontEnd_execGetSliderNotched_Parms GetSliderNotched_Parms;
	GetSliderNotched_Parms.categoryIndex = categoryIndex;
	GetSliderNotched_Parms.sliderIndex = sliderIndex;

	pFnGetSliderNotched->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSliderNotched, &GetSliderNotched_Parms, NULL );

	pFnGetSliderNotched->FunctionFlags |= 0x400;

	return GetSliderNotched_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFaceFrontEnd.GetSliderValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            categoryIndex                  ( CPF_Parm )
// int                            sliderIndex                    ( CPF_Parm )

int UBioMorphFaceFrontEnd::GetSliderValue ( int categoryIndex, int sliderIndex )
{
	static UFunction* pFnGetSliderValue = NULL;

	if ( ! pFnGetSliderValue )
		pFnGetSliderValue = (UFunction*) UObject::GObjObjects()->Data[ 38785 ];

	UBioMorphFaceFrontEnd_execGetSliderValue_Parms GetSliderValue_Parms;
	GetSliderValue_Parms.categoryIndex = categoryIndex;
	GetSliderValue_Parms.sliderIndex = sliderIndex;

	pFnGetSliderValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSliderValue, &GetSliderValue_Parms, NULL );

	pFnGetSliderValue->FunctionFlags |= 0x400;

	return GetSliderValue_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFaceFrontEnd.GetSliderStep
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            categoryIndex                  ( CPF_Parm )
// int                            sliderIndex                    ( CPF_Parm )

int UBioMorphFaceFrontEnd::GetSliderStep ( int categoryIndex, int sliderIndex )
{
	static UFunction* pFnGetSliderStep = NULL;

	if ( ! pFnGetSliderStep )
		pFnGetSliderStep = (UFunction*) UObject::GObjObjects()->Data[ 38781 ];

	UBioMorphFaceFrontEnd_execGetSliderStep_Parms GetSliderStep_Parms;
	GetSliderStep_Parms.categoryIndex = categoryIndex;
	GetSliderStep_Parms.sliderIndex = sliderIndex;

	pFnGetSliderStep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSliderStep, &GetSliderStep_Parms, NULL );

	pFnGetSliderStep->FunctionFlags |= 0x400;

	return GetSliderStep_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFaceFrontEnd.GetSliderMax
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            categoryIndex                  ( CPF_Parm )
// int                            sliderIndex                    ( CPF_Parm )

int UBioMorphFaceFrontEnd::GetSliderMax ( int categoryIndex, int sliderIndex )
{
	static UFunction* pFnGetSliderMax = NULL;

	if ( ! pFnGetSliderMax )
		pFnGetSliderMax = (UFunction*) UObject::GObjObjects()->Data[ 38777 ];

	UBioMorphFaceFrontEnd_execGetSliderMax_Parms GetSliderMax_Parms;
	GetSliderMax_Parms.categoryIndex = categoryIndex;
	GetSliderMax_Parms.sliderIndex = sliderIndex;

	pFnGetSliderMax->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSliderMax, &GetSliderMax_Parms, NULL );

	pFnGetSliderMax->FunctionFlags |= 0x400;

	return GetSliderMax_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFaceFrontEnd.GetSliderMin
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            categoryIndex                  ( CPF_Parm )
// int                            sliderIndex                    ( CPF_Parm )

int UBioMorphFaceFrontEnd::GetSliderMin ( int categoryIndex, int sliderIndex )
{
	static UFunction* pFnGetSliderMin = NULL;

	if ( ! pFnGetSliderMin )
		pFnGetSliderMin = (UFunction*) UObject::GObjObjects()->Data[ 38773 ];

	UBioMorphFaceFrontEnd_execGetSliderMin_Parms GetSliderMin_Parms;
	GetSliderMin_Parms.categoryIndex = categoryIndex;
	GetSliderMin_Parms.sliderIndex = sliderIndex;

	pFnGetSliderMin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSliderMin, &GetSliderMin_Parms, NULL );

	pFnGetSliderMin->FunctionFlags |= 0x400;

	return GetSliderMin_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFaceFrontEnd.GetSliderDesc
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            categoryIndex                  ( CPF_Parm )
// int                            sliderIndex                    ( CPF_Parm )

int UBioMorphFaceFrontEnd::GetSliderDesc ( int categoryIndex, int sliderIndex )
{
	static UFunction* pFnGetSliderDesc = NULL;

	if ( ! pFnGetSliderDesc )
		pFnGetSliderDesc = (UFunction*) UObject::GObjObjects()->Data[ 38769 ];

	UBioMorphFaceFrontEnd_execGetSliderDesc_Parms GetSliderDesc_Parms;
	GetSliderDesc_Parms.categoryIndex = categoryIndex;
	GetSliderDesc_Parms.sliderIndex = sliderIndex;

	pFnGetSliderDesc->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSliderDesc, &GetSliderDesc_Parms, NULL );

	pFnGetSliderDesc->FunctionFlags |= 0x400;

	return GetSliderDesc_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFaceFrontEnd.GetSliderLabel
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            categoryIndex                  ( CPF_Parm )
// int                            sliderIndex                    ( CPF_Parm )

int UBioMorphFaceFrontEnd::GetSliderLabel ( int categoryIndex, int sliderIndex )
{
	static UFunction* pFnGetSliderLabel = NULL;

	if ( ! pFnGetSliderLabel )
		pFnGetSliderLabel = (UFunction*) UObject::GObjObjects()->Data[ 38765 ];

	UBioMorphFaceFrontEnd_execGetSliderLabel_Parms GetSliderLabel_Parms;
	GetSliderLabel_Parms.categoryIndex = categoryIndex;
	GetSliderLabel_Parms.sliderIndex = sliderIndex;

	pFnGetSliderLabel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSliderLabel, &GetSliderLabel_Parms, NULL );

	pFnGetSliderLabel->FunctionFlags |= 0x400;

	return GetSliderLabel_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFaceFrontEnd.GetNumSlidersInCategory
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            categoryIndex                  ( CPF_Parm )

int UBioMorphFaceFrontEnd::GetNumSlidersInCategory ( int categoryIndex )
{
	static UFunction* pFnGetNumSlidersInCategory = NULL;

	if ( ! pFnGetNumSlidersInCategory )
		pFnGetNumSlidersInCategory = (UFunction*) UObject::GObjObjects()->Data[ 38762 ];

	UBioMorphFaceFrontEnd_execGetNumSlidersInCategory_Parms GetNumSlidersInCategory_Parms;
	GetNumSlidersInCategory_Parms.categoryIndex = categoryIndex;

	pFnGetNumSlidersInCategory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumSlidersInCategory, &GetNumSlidersInCategory_Parms, NULL );

	pFnGetNumSlidersInCategory->FunctionFlags |= 0x400;

	return GetNumSlidersInCategory_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFaceFrontEnd.GetCategoryDescription
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            categoryIndex                  ( CPF_Parm )

int UBioMorphFaceFrontEnd::GetCategoryDescription ( int categoryIndex )
{
	static UFunction* pFnGetCategoryDescription = NULL;

	if ( ! pFnGetCategoryDescription )
		pFnGetCategoryDescription = (UFunction*) UObject::GObjObjects()->Data[ 38759 ];

	UBioMorphFaceFrontEnd_execGetCategoryDescription_Parms GetCategoryDescription_Parms;
	GetCategoryDescription_Parms.categoryIndex = categoryIndex;

	pFnGetCategoryDescription->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCategoryDescription, &GetCategoryDescription_Parms, NULL );

	pFnGetCategoryDescription->FunctionFlags |= 0x400;

	return GetCategoryDescription_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFaceFrontEnd.GetCategoryString
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            categoryIndex                  ( CPF_Parm )

int UBioMorphFaceFrontEnd::GetCategoryString ( int categoryIndex )
{
	static UFunction* pFnGetCategoryString = NULL;

	if ( ! pFnGetCategoryString )
		pFnGetCategoryString = (UFunction*) UObject::GObjObjects()->Data[ 38756 ];

	UBioMorphFaceFrontEnd_execGetCategoryString_Parms GetCategoryString_Parms;
	GetCategoryString_Parms.categoryIndex = categoryIndex;

	pFnGetCategoryString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCategoryString, &GetCategoryString_Parms, NULL );

	pFnGetCategoryString->FunctionFlags |= 0x400;

	return GetCategoryString_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFaceFrontEnd.GetNumberOfFeatureCategories
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int UBioMorphFaceFrontEnd::GetNumberOfFeatureCategories ( )
{
	static UFunction* pFnGetNumberOfFeatureCategories = NULL;

	if ( ! pFnGetNumberOfFeatureCategories )
		pFnGetNumberOfFeatureCategories = (UFunction*) UObject::GObjObjects()->Data[ 38754 ];

	UBioMorphFaceFrontEnd_execGetNumberOfFeatureCategories_Parms GetNumberOfFeatureCategories_Parms;

	pFnGetNumberOfFeatureCategories->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumberOfFeatureCategories, &GetNumberOfFeatureCategories_Parms, NULL );

	pFnGetNumberOfFeatureCategories->FunctionFlags |= 0x400;

	return GetNumberOfFeatureCategories_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFaceFrontEnd.CalibrateToPawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                pSrcPawn                       ( CPF_Parm )
// unsigned long                  bUpdate                        ( CPF_OptionalParm | CPF_Parm )

void UBioMorphFaceFrontEnd::CalibrateToPawn ( class ABioPawn* pSrcPawn, unsigned long bUpdate )
{
	static UFunction* pFnCalibrateToPawn = NULL;

	if ( ! pFnCalibrateToPawn )
		pFnCalibrateToPawn = (UFunction*) UObject::GObjObjects()->Data[ 38751 ];

	UBioMorphFaceFrontEnd_execCalibrateToPawn_Parms CalibrateToPawn_Parms;
	CalibrateToPawn_Parms.pSrcPawn = pSrcPawn;
	CalibrateToPawn_Parms.bUpdate = bUpdate;

	pFnCalibrateToPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalibrateToPawn, &CalibrateToPawn_Parms, NULL );

	pFnCalibrateToPawn->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFaceFrontEnd.ResetCategory
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nCategory                      ( CPF_Parm )
// unsigned long                  bUpdate                        ( CPF_OptionalParm | CPF_Parm )

void UBioMorphFaceFrontEnd::ResetCategory ( int nCategory, unsigned long bUpdate )
{
	static UFunction* pFnResetCategory = NULL;

	if ( ! pFnResetCategory )
		pFnResetCategory = (UFunction*) UObject::GObjObjects()->Data[ 38748 ];

	UBioMorphFaceFrontEnd_execResetCategory_Parms ResetCategory_Parms;
	ResetCategory_Parms.nCategory = nCategory;
	ResetCategory_Parms.bUpdate = bUpdate;

	pFnResetCategory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetCategory, &ResetCategory_Parms, NULL );

	pFnResetCategory->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFaceFrontEnd.ResetAll
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioMorphFaceFrontEnd::ResetAll ( )
{
	static UFunction* pFnResetAll = NULL;

	if ( ! pFnResetAll )
		pFnResetAll = (UFunction*) UObject::GObjObjects()->Data[ 38747 ];

	UBioMorphFaceFrontEnd_execResetAll_Parms ResetAll_Parms;

	pFnResetAll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetAll, &ResetAll_Parms, NULL );

	pFnResetAll->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFaceFrontEnd.RandomizeCategory
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nCategory                      ( CPF_Parm )
// unsigned long                  bUpdate                        ( CPF_OptionalParm | CPF_Parm )

void UBioMorphFaceFrontEnd::RandomizeCategory ( int nCategory, unsigned long bUpdate )
{
	static UFunction* pFnRandomizeCategory = NULL;

	if ( ! pFnRandomizeCategory )
		pFnRandomizeCategory = (UFunction*) UObject::GObjObjects()->Data[ 38744 ];

	UBioMorphFaceFrontEnd_execRandomizeCategory_Parms RandomizeCategory_Parms;
	RandomizeCategory_Parms.nCategory = nCategory;
	RandomizeCategory_Parms.bUpdate = bUpdate;

	pFnRandomizeCategory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRandomizeCategory, &RandomizeCategory_Parms, NULL );

	pFnRandomizeCategory->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFaceFrontEnd.RandomizeAll
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioMorphFaceFrontEnd::RandomizeAll ( )
{
	static UFunction* pFnRandomizeAll = NULL;

	if ( ! pFnRandomizeAll )
		pFnRandomizeAll = (UFunction*) UObject::GObjObjects()->Data[ 38743 ];

	UBioMorphFaceFrontEnd_execRandomizeAll_Parms RandomizeAll_Parms;

	pFnRandomizeAll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRandomizeAll, &RandomizeAll_Parms, NULL );

	pFnRandomizeAll->FunctionFlags |= 0x400;
};

// Function SFXGame.BioMorphFaceFrontEnd.Initialize
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXMorphFaceFrontEndDataSource* Data                           ( CPF_Parm )
// class ABioPawn*                pThePlayer                     ( CPF_Parm )
// unsigned long                  bPlayerIsMale                  ( CPF_Parm )
// unsigned long                  bReset                         ( CPF_OptionalParm | CPF_Parm )

void UBioMorphFaceFrontEnd::Initialize ( class USFXMorphFaceFrontEndDataSource* Data, class ABioPawn* pThePlayer, unsigned long bPlayerIsMale, unsigned long bReset )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 38738 ];

	UBioMorphFaceFrontEnd_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.Data = Data;
	Initialize_Parms.pThePlayer = pThePlayer;
	Initialize_Parms.bPlayerIsMale = bPlayerIsMale;
	Initialize_Parms.bReset = bReset;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCameraShakeInterface.ComputeCameraRotationDelta
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator UBioCameraShakeInterface::ComputeCameraRotationDelta ( )
{
	static UFunction* pFnComputeCameraRotationDelta = NULL;

	if ( ! pFnComputeCameraRotationDelta )
		pFnComputeCameraRotationDelta = (UFunction*) UObject::GObjObjects()->Data[ 32791 ];

	UBioCameraShakeInterface_execComputeCameraRotationDelta_Parms ComputeCameraRotationDelta_Parms;

	pFnComputeCameraRotationDelta->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnComputeCameraRotationDelta, &ComputeCameraRotationDelta_Parms, NULL );

	pFnComputeCameraRotationDelta->FunctionFlags |= 0x400;

	return ComputeCameraRotationDelta_Parms.ReturnValue;
};

// Function SFXGame.SFXKActor.ImpulseFragments
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FVector                 Source                         ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FVector                 Extent                         ( CPF_Parm )
// unsigned long                  bVelChange                     ( CPF_OptionalParm | CPF_Parm )

void ASFXKActor::ImpulseFragments ( struct FVector Source, struct FVector Momentum, struct FVector Extent, unsigned long bVelChange )
{
	static UFunction* pFnImpulseFragments = NULL;

	if ( ! pFnImpulseFragments )
		pFnImpulseFragments = (UFunction*) UObject::GObjObjects()->Data[ 41120 ];

	ASFXKActor_execImpulseFragments_Parms ImpulseFragments_Parms;
	memcpy ( &ImpulseFragments_Parms.Source, &Source, 0xC );
	memcpy ( &ImpulseFragments_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &ImpulseFragments_Parms.Extent, &Extent, 0xC );
	ImpulseFragments_Parms.bVelChange = bVelChange;

	pFnImpulseFragments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnImpulseFragments, &ImpulseFragments_Parms, NULL );

	pFnImpulseFragments->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXKActor.TakeDamage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ASFXKActor::eventTakeDamage ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 41112 ];

	ASFXKActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function SFXGame.SFXKActor.TakeRadiusDamage
// [0x00020102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void ASFXKActor::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 41103 ];

	ASFXKActor_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function SFXGame.SFXKActor.ExceededPhysicsThreshold
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  InstigatedBy                   ( CPF_Parm )

void ASFXKActor::eventExceededPhysicsThreshold ( class AActor* InstigatedBy )
{
	static UFunction* pFnExceededPhysicsThreshold = NULL;

	if ( ! pFnExceededPhysicsThreshold )
		pFnExceededPhysicsThreshold = (UFunction*) UObject::GObjObjects()->Data[ 41098 ];

	ASFXKActor_eventExceededPhysicsThreshold_Parms ExceededPhysicsThreshold_Parms;
	ExceededPhysicsThreshold_Parms.InstigatedBy = InstigatedBy;

	this->ProcessEvent ( pFnExceededPhysicsThreshold, &ExceededPhysicsThreshold_Parms, NULL );
};

// Function SFXGame.BioPhysicsActor.TakeDamage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )

void ABioPhysicsActor::eventTakeDamage ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 41140 ];

	ABioPhysicsActor_eventTakeDamage_Parms TakeDamage_Parms;
	TakeDamage_Parms.Damage = Damage;
	TakeDamage_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &TakeDamage_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &TakeDamage_Parms.Momentum, &Momentum, 0xC );
	TakeDamage_Parms.DamageType = DamageType;
	memcpy ( &TakeDamage_Parms.HitInfo, &HitInfo, 0x1C );
	TakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function SFXGame.BioPhysicsActor.TakeRadiusDamage
// [0x00020102] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void ABioPhysicsActor::TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 41131 ];

	ABioPhysicsActor_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;
	TakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	TakeRadiusDamage_Parms.BaseDamage = BaseDamage;
	TakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	TakeRadiusDamage_Parms.DamageType = DamageType;
	TakeRadiusDamage_Parms.Momentum = Momentum;
	memcpy ( &TakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	TakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	TakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function SFXGame.BioPhysicsActor.ChangeMaterialParameters
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void ABioPhysicsActor::ChangeMaterialParameters ( )
{
	static UFunction* pFnChangeMaterialParameters = NULL;

	if ( ! pFnChangeMaterialParameters )
		pFnChangeMaterialParameters = (UFunction*) UObject::GObjObjects()->Data[ 41130 ];

	ABioPhysicsActor_execChangeMaterialParameters_Parms ChangeMaterialParameters_Parms;

	pFnChangeMaterialParameters->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeMaterialParameters, &ChangeMaterialParameters_Parms, NULL );

	pFnChangeMaterialParameters->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_AreaMap.RTNConfirm
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_AreaMap::RTNConfirm ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnRTNConfirm = NULL;

	if ( ! pFnRTNConfirm )
		pFnRTNConfirm = (UFunction*) UObject::GObjObjects()->Data[ 46231 ];

	UBioSFHandler_AreaMap_execRTNConfirm_Parms RTNConfirm_Parms;
	RTNConfirm_Parms.bAPressed = bAPressed;
	RTNConfirm_Parms.nContext = nContext;

	pFnRTNConfirm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRTNConfirm, &RTNConfirm_Parms, NULL );

	pFnRTNConfirm->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_BlackScreen.IsFading
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFHandler_BlackScreen::IsFading ( )
{
	static UFunction* pFnIsFading = NULL;

	if ( ! pFnIsFading )
		pFnIsFading = (UFunction*) UObject::GObjObjects()->Data[ 46245 ];

	UBioSFHandler_BlackScreen_execIsFading_Parms IsFading_Parms;

	pFnIsFading->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFading, &IsFading_Parms, NULL );

	pFnIsFading->FunctionFlags |= 0x400;

	return IsFading_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_BlackScreen.Show
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bWithFade                      ( CPF_Parm )

void UBioSFHandler_BlackScreen::Show ( unsigned long bWithFade )
{
	static UFunction* pFnShow = NULL;

	if ( ! pFnShow )
		pFnShow = (UFunction*) UObject::GObjObjects()->Data[ 46243 ];

	UBioSFHandler_BlackScreen_execShow_Parms Show_Parms;
	Show_Parms.bWithFade = bWithFade;

	pFnShow->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShow, &Show_Parms, NULL );

	pFnShow->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_BlackScreen.Hide
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bWithFade                      ( CPF_Parm )

void UBioSFHandler_BlackScreen::Hide ( unsigned long bWithFade )
{
	static UFunction* pFnHide = NULL;

	if ( ! pFnHide )
		pFnHide = (UFunction*) UObject::GObjObjects()->Data[ 46241 ];

	UBioSFHandler_BlackScreen_execHide_Parms Hide_Parms;
	Hide_Parms.bWithFade = bWithFade;

	pFnHide->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHide, &Hide_Parms, NULL );

	pFnHide->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_BlackScreen.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_BlackScreen::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 46240 ];

	UBioSFHandler_BlackScreen_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_BrowserWheel.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_BrowserWheel::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 46421 ];

	UBioSFHandler_BrowserWheel_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_BrowserWheel.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_BrowserWheel::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 46420 ];

	UBioSFHandler_BrowserWheel_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_BrowserWheel.ExitGame
// [0x00020000] 
// Parameters infos:

void UBioSFHandler_BrowserWheel::ExitGame ( )
{
	static UFunction* pFnExitGame = NULL;

	if ( ! pFnExitGame )
		pFnExitGame = (UFunction*) UObject::GObjObjects()->Data[ 46419 ];

	UBioSFHandler_BrowserWheel_execExitGame_Parms ExitGame_Parms;

	this->ProcessEvent ( pFnExitGame, &ExitGame_Parms, NULL );
};

// Function SFXGame.BioSFHandler_BrowserWheel.MainMenuConfirm
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_BrowserWheel::MainMenuConfirm ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnMainMenuConfirm = NULL;

	if ( ! pFnMainMenuConfirm )
		pFnMainMenuConfirm = (UFunction*) UObject::GObjObjects()->Data[ 46416 ];

	UBioSFHandler_BrowserWheel_execMainMenuConfirm_Parms MainMenuConfirm_Parms;
	MainMenuConfirm_Parms.bAPressed = bAPressed;
	MainMenuConfirm_Parms.nContext = nContext;

	this->ProcessEvent ( pFnMainMenuConfirm, &MainMenuConfirm_Parms, NULL );
};

// Function SFXGame.BioSFHandler_BrowserWheel.SetResourceValues
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_BrowserWheel::SetResourceValues ( )
{
	static UFunction* pFnSetResourceValues = NULL;

	if ( ! pFnSetResourceValues )
		pFnSetResourceValues = (UFunction*) UObject::GObjObjects()->Data[ 46408 ];

	UBioSFHandler_BrowserWheel_execSetResourceValues_Parms SetResourceValues_Parms;

	this->ProcessEvent ( pFnSetResourceValues, &SetResourceValues_Parms, NULL );
};

// Function SFXGame.BioSFHandler_BrowserWheel.InitializeBrowser
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_BrowserWheel::InitializeBrowser ( )
{
	static UFunction* pFnInitializeBrowser = NULL;

	if ( ! pFnInitializeBrowser )
		pFnInitializeBrowser = (UFunction*) UObject::GObjObjects()->Data[ 46377 ];

	UBioSFHandler_BrowserWheel_execInitializeBrowser_Parms InitializeBrowser_Parms;

	this->ProcessEvent ( pFnInitializeBrowser, &InitializeBrowser_Parms, NULL );
};

// Function SFXGame.BioSFHandler_BrowserWheel.DetermineJournalCodexUpdateStatus
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioSFHandler_BrowserWheel::DetermineJournalCodexUpdateStatus ( )
{
	static UFunction* pFnDetermineJournalCodexUpdateStatus = NULL;

	if ( ! pFnDetermineJournalCodexUpdateStatus )
		pFnDetermineJournalCodexUpdateStatus = (UFunction*) UObject::GObjObjects()->Data[ 46395 ];

	UBioSFHandler_BrowserWheel_execDetermineJournalCodexUpdateStatus_Parms DetermineJournalCodexUpdateStatus_Parms;

	pFnDetermineJournalCodexUpdateStatus->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDetermineJournalCodexUpdateStatus, &DetermineJournalCodexUpdateStatus_Parms, NULL );

	pFnDetermineJournalCodexUpdateStatus->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_BrowserWheel.DetermineSquadUpdateStatus
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_BrowserWheel::DetermineSquadUpdateStatus ( )
{
	static UFunction* pFnDetermineSquadUpdateStatus = NULL;

	if ( ! pFnDetermineSquadUpdateStatus )
		pFnDetermineSquadUpdateStatus = (UFunction*) UObject::GObjObjects()->Data[ 46388 ];

	UBioSFHandler_BrowserWheel_execDetermineSquadUpdateStatus_Parms DetermineSquadUpdateStatus_Parms;

	this->ProcessEvent ( pFnDetermineSquadUpdateStatus, &DetermineSquadUpdateStatus_Parms, NULL );
};

// Function SFXGame.BioSFHandler_BrowserWheel.Update
// [0x00820002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFHandler_BrowserWheel::Update ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 46381 ];

	UBioSFHandler_BrowserWheel_execUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSFHandler_BrowserWheel.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_BrowserWheel::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 46378 ];

	UBioSFHandler_BrowserWheel_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_BrowserWheel.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_BrowserWheel::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 46372 ];

	UBioSFHandler_BrowserWheel_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_BrowserWheel.ShowSelectedPanel
// [0x00820803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// int                            nPanel                         ( CPF_Parm )
// class UBioSFManager*           oManager                       ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_BrowserWheel::eventShowSelectedPanel ( int nPanel, class UBioSFManager* oManager )
{
	static UFunction* pFnShowSelectedPanel = NULL;

	if ( ! pFnShowSelectedPanel )
		pFnShowSelectedPanel = (UFunction*) UObject::GObjObjects()->Data[ 46363 ];

	UBioSFHandler_BrowserWheel_eventShowSelectedPanel_Parms ShowSelectedPanel_Parms;
	ShowSelectedPanel_Parms.nPanel = nPanel;
	ShowSelectedPanel_Parms.oManager = oManager;

	this->ProcessEvent ( pFnShowSelectedPanel, &ShowSelectedPanel_Parms, NULL );
};

// Function SFXGame.BioSFHandler_ChoiceGUI.CleanUpDelegateReferences
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_ChoiceGUI::CleanUpDelegateReferences ( )
{
	static UFunction* pFnCleanUpDelegateReferences = NULL;

	if ( ! pFnCleanUpDelegateReferences )
		pFnCleanUpDelegateReferences = (UFunction*) UObject::GObjObjects()->Data[ 46714 ];

	UBioSFHandler_ChoiceGUI_execCleanUpDelegateReferences_Parms CleanUpDelegateReferences_Parms;

	pFnCleanUpDelegateReferences->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCleanUpDelegateReferences, &CleanUpDelegateReferences_Parms, NULL );

	pFnCleanUpDelegateReferences->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_ChoiceGUI.GameSessionEnded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_ChoiceGUI::GameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 46713 ];

	UBioSFHandler_ChoiceGUI_execGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_ChoiceGUI.GetResourceCount
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nResource                      ( CPF_Parm )

int UBioSFHandler_ChoiceGUI::eventGetResourceCount ( int nResource )
{
	static UFunction* pFnGetResourceCount = NULL;

	if ( ! pFnGetResourceCount )
		pFnGetResourceCount = (UFunction*) UObject::GObjObjects()->Data[ 46706 ];

	UBioSFHandler_ChoiceGUI_eventGetResourceCount_Parms GetResourceCount_Parms;
	GetResourceCount_Parms.nResource = nResource;

	this->ProcessEvent ( pFnGetResourceCount, &GetResourceCount_Parms, NULL );

	return GetResourceCount_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_ChoiceGUI.onExIntUpdateOptionValues
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nResource                      ( CPF_Parm )

void UBioSFHandler_ChoiceGUI::eventonExIntUpdateOptionValues ( int nResource )
{
	static UFunction* pFnonExIntUpdateOptionValues = NULL;

	if ( ! pFnonExIntUpdateOptionValues )
		pFnonExIntUpdateOptionValues = (UFunction*) UObject::GObjObjects()->Data[ 46700 ];

	UBioSFHandler_ChoiceGUI_eventonExIntUpdateOptionValues_Parms onExIntUpdateOptionValues_Parms;
	onExIntUpdateOptionValues_Parms.nResource = nResource;

	this->ProcessEvent ( pFnonExIntUpdateOptionValues, &onExIntUpdateOptionValues_Parms, NULL );
};

// Function SFXGame.BioSFHandler_ChoiceGUI.OnPanelRemoved
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler_ChoiceGUI::eventOnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 46699 ];

	UBioSFHandler_ChoiceGUI_eventOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_ChoiceGUI.OnPanelAdded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler_ChoiceGUI::eventOnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 46698 ];

	UBioSFHandler_ChoiceGUI_eventOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_ChoiceGUI.ScrollText
// [0x00820002] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void UBioSFHandler_ChoiceGUI::ScrollText ( float fValue )
{
	static UFunction* pFnScrollText = NULL;

	if ( ! pFnScrollText )
		pFnScrollText = (UFunction*) UObject::GObjObjects()->Data[ 46693 ];

	UBioSFHandler_ChoiceGUI_execScrollText_Parms ScrollText_Parms;
	ScrollText_Parms.fValue = fValue;

	this->ProcessEvent ( pFnScrollText, &ScrollText_Parms, NULL );
};

// Function SFXGame.BioSFHandler_ChoiceGUI.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_ChoiceGUI::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 46690 ];

	UBioSFHandler_ChoiceGUI_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_ChoiceGUI.GetResourceText
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned char                  eResource                      ( CPF_Parm )

struct FString UBioSFHandler_ChoiceGUI::GetResourceText ( unsigned char eResource )
{
	static UFunction* pFnGetResourceText = NULL;

	if ( ! pFnGetResourceText )
		pFnGetResourceText = (UFunction*) UObject::GObjObjects()->Data[ 46687 ];

	UBioSFHandler_ChoiceGUI_execGetResourceText_Parms GetResourceText_Parms;
	GetResourceText_Parms.eResource = eResource;

	pFnGetResourceText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetResourceText, &GetResourceText_Parms, NULL );

	pFnGetResourceText->FunctionFlags |= 0x400;

	return GetResourceText_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_ChoiceGUI.Initialize
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USFXGameChoiceGUIData*   ChoiceData                     ( CPF_Parm )

void UBioSFHandler_ChoiceGUI::Initialize ( class USFXGameChoiceGUIData* ChoiceData )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 46685 ];

	UBioSFHandler_ChoiceGUI_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.ChoiceData = ChoiceData;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_ChoiceGUI.HideChoiceGUI
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_ChoiceGUI::HideChoiceGUI ( unsigned long bRemove )
{
	static UFunction* pFnHideChoiceGUI = NULL;

	if ( ! pFnHideChoiceGUI )
		pFnHideChoiceGUI = (UFunction*) UObject::GObjObjects()->Data[ 45456 ];

	UBioSFHandler_ChoiceGUI_execHideChoiceGUI_Parms HideChoiceGUI_Parms;
	HideChoiceGUI_Parms.bRemove = bRemove;

	pFnHideChoiceGUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideChoiceGUI, &HideChoiceGUI_Parms, NULL );

	pFnHideChoiceGUI->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_ChoiceGUI.ShowChoiceGUI
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_ChoiceGUI::ShowChoiceGUI ( )
{
	static UFunction* pFnShowChoiceGUI = NULL;

	if ( ! pFnShowChoiceGUI )
		pFnShowChoiceGUI = (UFunction*) UObject::GObjObjects()->Data[ 46683 ];

	UBioSFHandler_ChoiceGUI_execShowChoiceGUI_Parms ShowChoiceGUI_Parms;

	pFnShowChoiceGUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowChoiceGUI, &ShowChoiceGUI_Parms, NULL );

	pFnShowChoiceGUI->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_ChoiceGUI.SetUpdateDelegate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FScriptDelegate         pDelegate                      ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_ChoiceGUI::SetUpdateDelegate ( struct FScriptDelegate pDelegate )
{
	static UFunction* pFnSetUpdateDelegate = NULL;

	if ( ! pFnSetUpdateDelegate )
		pFnSetUpdateDelegate = (UFunction*) UObject::GObjObjects()->Data[ 46681 ];

	UBioSFHandler_ChoiceGUI_execSetUpdateDelegate_Parms SetUpdateDelegate_Parms;
	memcpy ( &SetUpdateDelegate_Parms.pDelegate, &pDelegate, 0xC );

	pFnSetUpdateDelegate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUpdateDelegate, &SetUpdateDelegate_Parms, NULL );

	pFnSetUpdateDelegate->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_ChoiceGUI.SetInputDelegate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FScriptDelegate         pDelegate                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            nContext                       ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_ChoiceGUI::SetInputDelegate ( struct FScriptDelegate pDelegate, int nContext )
{
	static UFunction* pFnSetInputDelegate = NULL;

	if ( ! pFnSetInputDelegate )
		pFnSetInputDelegate = (UFunction*) UObject::GObjObjects()->Data[ 46678 ];

	UBioSFHandler_ChoiceGUI_execSetInputDelegate_Parms SetInputDelegate_Parms;
	memcpy ( &SetInputDelegate_Parms.pDelegate, &pDelegate, 0xC );
	SetInputDelegate_Parms.nContext = nContext;

	pFnSetInputDelegate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInputDelegate, &SetInputDelegate_Parms, NULL );

	pFnSetInputDelegate->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_ChoiceGUI.UpdateCallbackEx
// [0x00120000] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )
// class UObject*                 oChoiceGUI                     ( CPF_Parm )

void UBioSFHandler_ChoiceGUI::UpdateCallbackEx ( float fDeltaT, class UObject* oChoiceGUI )
{
	static UFunction* pFnUpdateCallbackEx = NULL;

	if ( ! pFnUpdateCallbackEx )
		pFnUpdateCallbackEx = (UFunction*) UObject::GObjObjects()->Data[ 46653 ];

	UBioSFHandler_ChoiceGUI_execUpdateCallbackEx_Parms UpdateCallbackEx_Parms;
	UpdateCallbackEx_Parms.fDeltaT = fDeltaT;
	UpdateCallbackEx_Parms.oChoiceGUI = oChoiceGUI;

	this->ProcessEvent ( pFnUpdateCallbackEx, &UpdateCallbackEx_Parms, NULL );
};

// Function SFXGame.BioSFHandler_ChoiceGUI.UpdateCallback
// [0x00120000] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )
// class UBioSFHandler_ChoiceGUI* oChoiceGUI                     ( CPF_Parm )

void UBioSFHandler_ChoiceGUI::UpdateCallback ( float fDeltaT, class UBioSFHandler_ChoiceGUI* oChoiceGUI )
{
	static UFunction* pFnUpdateCallback = NULL;

	if ( ! pFnUpdateCallback )
		pFnUpdateCallback = (UFunction*) UObject::GObjObjects()->Data[ 46655 ];

	UBioSFHandler_ChoiceGUI_execUpdateCallback_Parms UpdateCallback_Parms;
	UpdateCallback_Parms.fDeltaT = fDeltaT;
	UpdateCallback_Parms.oChoiceGUI = oChoiceGUI;

	this->ProcessEvent ( pFnUpdateCallback, &UpdateCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_ChoiceGUI.InputCallback
// [0x00120000] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_ChoiceGUI::InputCallback ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnInputCallback = NULL;

	if ( ! pFnInputCallback )
		pFnInputCallback = (UFunction*) UObject::GObjObjects()->Data[ 46657 ];

	UBioSFHandler_ChoiceGUI_execInputCallback_Parms InputCallback_Parms;
	InputCallback_Parms.bAPressed = bAPressed;
	InputCallback_Parms.nContext = nContext;

	this->ProcessEvent ( pFnInputCallback, &InputCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Conversation.Enforce16x9
// [0x00020000] 
// Parameters infos:
// unsigned long                  bVal                           ( CPF_Parm )

void UBioSFHandler_Conversation::Enforce16x9 ( unsigned long bVal )
{
	static UFunction* pFnEnforce16x9 = NULL;

	if ( ! pFnEnforce16x9 )
		pFnEnforce16x9 = (UFunction*) UObject::GObjObjects()->Data[ 46843 ];

	UBioSFHandler_Conversation_execEnforce16x9_Parms Enforce16x9_Parms;
	Enforce16x9_Parms.bVal = bVal;

	this->ProcessEvent ( pFnEnforce16x9, &Enforce16x9_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Conversation.IsVisible
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFHandler_Conversation::eventIsVisible ( )
{
	static UFunction* pFnIsVisible = NULL;

	if ( ! pFnIsVisible )
		pFnIsVisible = (UFunction*) UObject::GObjObjects()->Data[ 46841 ];

	UBioSFHandler_Conversation_eventIsVisible_Parms IsVisible_Parms;

	this->ProcessEvent ( pFnIsVisible, &IsVisible_Parms, NULL );

	return IsVisible_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_Conversation.SetVisible
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned long                  bVal                           ( CPF_Parm )

void UBioSFHandler_Conversation::eventSetVisible ( unsigned long bVal )
{
	static UFunction* pFnSetVisible = NULL;

	if ( ! pFnSetVisible )
		pFnSetVisible = (UFunction*) UObject::GObjObjects()->Data[ 46839 ];

	UBioSFHandler_Conversation_eventSetVisible_Parms SetVisible_Parms;
	SetVisible_Parms.bVal = bVal;

	this->ProcessEvent ( pFnSetVisible, &SetVisible_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Conversation.GetInvestigateReplyCount
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioConversation*        oConversation                  ( CPF_Parm )

int UBioSFHandler_Conversation::GetInvestigateReplyCount ( class UBioConversation* oConversation )
{
	static UFunction* pFnGetInvestigateReplyCount = NULL;

	if ( ! pFnGetInvestigateReplyCount )
		pFnGetInvestigateReplyCount = (UFunction*) UObject::GObjObjects()->Data[ 46815 ];

	UBioSFHandler_Conversation_execGetInvestigateReplyCount_Parms GetInvestigateReplyCount_Parms;
	GetInvestigateReplyCount_Parms.oConversation = oConversation;

	this->ProcessEvent ( pFnGetInvestigateReplyCount, &GetInvestigateReplyCount_Parms, NULL );

	return GetInvestigateReplyCount_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_Conversation.GetReplyLocation
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nReplyCategory                 ( CPF_Parm )

unsigned char UBioSFHandler_Conversation::GetReplyLocation ( int nReplyCategory )
{
	static UFunction* pFnGetReplyLocation = NULL;

	if ( ! pFnGetReplyLocation )
		pFnGetReplyLocation = (UFunction*) UObject::GObjObjects()->Data[ 46817 ];

	UBioSFHandler_Conversation_execGetReplyLocation_Parms GetReplyLocation_Parms;
	GetReplyLocation_Parms.nReplyCategory = nReplyCategory;

	this->ProcessEvent ( pFnGetReplyLocation, &GetReplyLocation_Parms, NULL );

	return GetReplyLocation_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_Conversation.GetInvestigateReplyLocation
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nInvestigateSlot               ( CPF_Parm )

unsigned char UBioSFHandler_Conversation::GetInvestigateReplyLocation ( int nInvestigateSlot )
{
	static UFunction* pFnGetInvestigateReplyLocation = NULL;

	if ( ! pFnGetInvestigateReplyLocation )
		pFnGetInvestigateReplyLocation = (UFunction*) UObject::GObjObjects()->Data[ 46816 ];

	UBioSFHandler_Conversation_execGetInvestigateReplyLocation_Parms GetInvestigateReplyLocation_Parms;
	GetInvestigateReplyLocation_Parms.nInvestigateSlot = nInvestigateSlot;

	this->ProcessEvent ( pFnGetInvestigateReplyLocation, &GetInvestigateReplyLocation_Parms, NULL );

	return GetInvestigateReplyLocation_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_Conversation.SelectConversationEntry
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  nWheelLocation                 ( CPF_Parm )

bool UBioSFHandler_Conversation::SelectConversationEntry ( unsigned char nWheelLocation )
{
	static UFunction* pFnSelectConversationEntry = NULL;

	if ( ! pFnSelectConversationEntry )
		pFnSelectConversationEntry = (UFunction*) UObject::GObjObjects()->Data[ 46774 ];

	UBioSFHandler_Conversation_execSelectConversationEntry_Parms SelectConversationEntry_Parms;
	SelectConversationEntry_Parms.nWheelLocation = nWheelLocation;

	this->ProcessEvent ( pFnSelectConversationEntry, &SelectConversationEntry_Parms, NULL );

	return SelectConversationEntry_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_Conversation.MapGuiStyleToOptionMode
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eGUIStyle                      ( CPF_Parm )

int UBioSFHandler_Conversation::MapGuiStyleToOptionMode ( unsigned char eGUIStyle )
{
	static UFunction* pFnMapGuiStyleToOptionMode = NULL;

	if ( ! pFnMapGuiStyleToOptionMode )
		pFnMapGuiStyleToOptionMode = (UFunction*) UObject::GObjObjects()->Data[ 46818 ];

	UBioSFHandler_Conversation_execMapGuiStyleToOptionMode_Parms MapGuiStyleToOptionMode_Parms;
	MapGuiStyleToOptionMode_Parms.eGUIStyle = eGUIStyle;

	this->ProcessEvent ( pFnMapGuiStyleToOptionMode, &MapGuiStyleToOptionMode_Parms, NULL );

	return MapGuiStyleToOptionMode_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_Conversation.UpdateConversationOptions
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// class UBioConversation*        oConversation                  ( CPF_Parm )

void UBioSFHandler_Conversation::UpdateConversationOptions ( class UBioConversation* oConversation )
{
	static UFunction* pFnUpdateConversationOptions = NULL;

	if ( ! pFnUpdateConversationOptions )
		pFnUpdateConversationOptions = (UFunction*) UObject::GObjObjects()->Data[ 46799 ];

	UBioSFHandler_Conversation_execUpdateConversationOptions_Parms UpdateConversationOptions_Parms;
	UpdateConversationOptions_Parms.oConversation = oConversation;

	this->ProcessEvent ( pFnUpdateConversationOptions, &UpdateConversationOptions_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Conversation.Update
// [0x00820002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFHandler_Conversation::Update ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 46788 ];

	UBioSFHandler_Conversation_execUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Conversation.CalculateArrowPosition
// [0x00C20002] 
// Parameters infos:
// struct FASParams               stParam                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FASParams >     lstParams                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_Conversation::CalculateArrowPosition ( struct FASParams* stParam, TArray< struct FASParams >* lstParams )
{
	static UFunction* pFnCalculateArrowPosition = NULL;

	if ( ! pFnCalculateArrowPosition )
		pFnCalculateArrowPosition = (UFunction*) UObject::GObjObjects()->Data[ 46782 ];

	UBioSFHandler_Conversation_execCalculateArrowPosition_Parms CalculateArrowPosition_Parms;

	this->ProcessEvent ( pFnCalculateArrowPosition, &CalculateArrowPosition_Parms, NULL );

	if ( stParam )
		memcpy ( stParam, &CalculateArrowPosition_Parms.stParam, 0x1C );

	if ( lstParams )
		memcpy ( lstParams, &CalculateArrowPosition_Parms.lstParams, 0xC );
};

// Function SFXGame.BioSFHandler_Conversation.UpdateInterruptVisuals
// [0x00020002] 
// Parameters infos:
// class UBioConversation*        oConversation                  ( CPF_Parm )

void UBioSFHandler_Conversation::UpdateInterruptVisuals ( class UBioConversation* oConversation )
{
	static UFunction* pFnUpdateInterruptVisuals = NULL;

	if ( ! pFnUpdateInterruptVisuals )
		pFnUpdateInterruptVisuals = (UFunction*) UObject::GObjObjects()->Data[ 46778 ];

	UBioSFHandler_Conversation_execUpdateInterruptVisuals_Parms UpdateInterruptVisuals_Parms;
	UpdateInterruptVisuals_Parms.oConversation = oConversation;

	this->ProcessEvent ( pFnUpdateInterruptVisuals, &UpdateInterruptVisuals_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Conversation.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_Conversation::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 46775 ];

	UBioSFHandler_Conversation_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Conversation.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_Conversation::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 46769 ];

	UBioSFHandler_Conversation_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_Conversation.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_Conversation::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 46768 ];

	UBioSFHandler_Conversation_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Conversation.OnPanelAdded
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_Conversation::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 46764 ];

	UBioSFHandler_Conversation_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Conversation.GetNumReplies
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioConversation*        oConversation                  ( CPF_Parm )

int UBioSFHandler_Conversation::GetNumReplies ( class UBioConversation* oConversation )
{
	static UFunction* pFnGetNumReplies = NULL;

	if ( ! pFnGetNumReplies )
		pFnGetNumReplies = (UFunction*) UObject::GObjObjects()->Data[ 46761 ];

	UBioSFHandler_Conversation_execGetNumReplies_Parms GetNumReplies_Parms;
	GetNumReplies_Parms.oConversation = oConversation;

	this->ProcessEvent ( pFnGetNumReplies, &GetNumReplies_Parms, NULL );

	return GetNumReplies_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_Conversation.InterruptRenegade
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_Conversation::InterruptRenegade ( )
{
	static UFunction* pFnInterruptRenegade = NULL;

	if ( ! pFnInterruptRenegade )
		pFnInterruptRenegade = (UFunction*) UObject::GObjObjects()->Data[ 46760 ];

	UBioSFHandler_Conversation_execInterruptRenegade_Parms InterruptRenegade_Parms;

	this->ProcessEvent ( pFnInterruptRenegade, &InterruptRenegade_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Conversation.InterruptParagon
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_Conversation::InterruptParagon ( )
{
	static UFunction* pFnInterruptParagon = NULL;

	if ( ! pFnInterruptParagon )
		pFnInterruptParagon = (UFunction*) UObject::GObjObjects()->Data[ 46759 ];

	UBioSFHandler_Conversation_execInterruptParagon_Parms InterruptParagon_Parms;

	this->ProcessEvent ( pFnInterruptParagon, &InterruptParagon_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Conversation.SkipConversation
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_Conversation::SkipConversation ( )
{
	static UFunction* pFnSkipConversation = NULL;

	if ( ! pFnSkipConversation )
		pFnSkipConversation = (UFunction*) UObject::GObjObjects()->Data[ 46758 ];

	UBioSFHandler_Conversation_execSkipConversation_Parms SkipConversation_Parms;

	this->ProcessEvent ( pFnSkipConversation, &SkipConversation_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Conversation.SelectConversationSegment
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_Conversation::SelectConversationSegment ( )
{
	static UFunction* pFnSelectConversationSegment = NULL;

	if ( ! pFnSelectConversationSegment )
		pFnSelectConversationSegment = (UFunction*) UObject::GObjObjects()->Data[ 46757 ];

	UBioSFHandler_Conversation_execSelectConversationSegment_Parms SelectConversationSegment_Parms;

	this->ProcessEvent ( pFnSelectConversationSegment, &SelectConversationSegment_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Conversation.HighlightDefaultConvSegment
// [0x00020000] 
// Parameters infos:

void UBioSFHandler_Conversation::HighlightDefaultConvSegment ( )
{
	static UFunction* pFnHighlightDefaultConvSegment = NULL;

	if ( ! pFnHighlightDefaultConvSegment )
		pFnHighlightDefaultConvSegment = (UFunction*) UObject::GObjObjects()->Data[ 46756 ];

	UBioSFHandler_Conversation_execHighlightDefaultConvSegment_Parms HighlightDefaultConvSegment_Parms;

	this->ProcessEvent ( pFnHighlightDefaultConvSegment, &HighlightDefaultConvSegment_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.SetFromPRCChoiceGUI
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler_Credits::eventSetFromPRCChoiceGUI ( )
{
	static UFunction* pFnSetFromPRCChoiceGUI = NULL;

	if ( ! pFnSetFromPRCChoiceGUI )
		pFnSetFromPRCChoiceGUI = (UFunction*) UObject::GObjObjects()->Data[ 46914 ];

	UBioSFHandler_Credits_eventSetFromPRCChoiceGUI_Parms SetFromPRCChoiceGUI_Parms;

	this->ProcessEvent ( pFnSetFromPRCChoiceGUI, &SetFromPRCChoiceGUI_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.SetFromAdditionalContent
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler_Credits::eventSetFromAdditionalContent ( )
{
	static UFunction* pFnSetFromAdditionalContent = NULL;

	if ( ! pFnSetFromAdditionalContent )
		pFnSetFromAdditionalContent = (UFunction*) UObject::GObjObjects()->Data[ 46913 ];

	UBioSFHandler_Credits_eventSetFromAdditionalContent_Parms SetFromAdditionalContent_Parms;

	this->ProcessEvent ( pFnSetFromAdditionalContent, &SetFromAdditionalContent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.SetFromMainMenu
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_Credits::SetFromMainMenu ( )
{
	static UFunction* pFnSetFromMainMenu = NULL;

	if ( ! pFnSetFromMainMenu )
		pFnSetFromMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 46912 ];

	UBioSFHandler_Credits_execSetFromMainMenu_Parms SetFromMainMenu_Parms;

	this->ProcessEvent ( pFnSetFromMainMenu, &SetFromMainMenu_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.PopulateScrollingCredits
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_Credits::PopulateScrollingCredits ( )
{
	static UFunction* pFnPopulateScrollingCredits = NULL;

	if ( ! pFnPopulateScrollingCredits )
		pFnPopulateScrollingCredits = (UFunction*) UObject::GObjObjects()->Data[ 46887 ];

	UBioSFHandler_Credits_execPopulateScrollingCredits_Parms PopulateScrollingCredits_Parms;

	this->ProcessEvent ( pFnPopulateScrollingCredits, &PopulateScrollingCredits_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.SendFlashingCredit
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_Credits::SendFlashingCredit ( )
{
	static UFunction* pFnSendFlashingCredit = NULL;

	if ( ! pFnSendFlashingCredit )
		pFnSendFlashingCredit = (UFunction*) UObject::GObjObjects()->Data[ 46886 ];

	UBioSFHandler_Credits_execSendFlashingCredit_Parms SendFlashingCredit_Parms;

	this->ProcessEvent ( pFnSendFlashingCredit, &SendFlashingCredit_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.SetupCreditDetails
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_Credits::SetupCreditDetails ( )
{
	static UFunction* pFnSetupCreditDetails = NULL;

	if ( ! pFnSetupCreditDetails )
		pFnSetupCreditDetails = (UFunction*) UObject::GObjObjects()->Data[ 46888 ];

	UBioSFHandler_Credits_execSetupCreditDetails_Parms SetupCreditDetails_Parms;

	this->ProcessEvent ( pFnSetupCreditDetails, &SetupCreditDetails_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.EndCredits
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_Credits::EndCredits ( )
{
	static UFunction* pFnEndCredits = NULL;

	if ( ! pFnEndCredits )
		pFnEndCredits = (UFunction*) UObject::GObjObjects()->Data[ 46900 ];

	UBioSFHandler_Credits_execEndCredits_Parms EndCredits_Parms;

	this->ProcessEvent ( pFnEndCredits, &EndCredits_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.ConfirmButtonPressed
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_Credits::ConfirmButtonPressed ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnConfirmButtonPressed = NULL;

	if ( ! pFnConfirmButtonPressed )
		pFnConfirmButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 46897 ];

	UBioSFHandler_Credits_execConfirmButtonPressed_Parms ConfirmButtonPressed_Parms;
	ConfirmButtonPressed_Parms.bAPressed = bAPressed;
	ConfirmButtonPressed_Parms.nContext = nContext;

	this->ProcessEvent ( pFnConfirmButtonPressed, &ConfirmButtonPressed_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.OnCancel
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_Credits::OnCancel ( )
{
	static UFunction* pFnOnCancel = NULL;

	if ( ! pFnOnCancel )
		pFnOnCancel = (UFunction*) UObject::GObjObjects()->Data[ 46894 ];

	UBioSFHandler_Credits_execOnCancel_Parms OnCancel_Parms;

	this->ProcessEvent ( pFnOnCancel, &OnCancel_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.Pause
// [0x00020000] 
// Parameters infos:
// unsigned long                  B                              ( CPF_Parm )

void UBioSFHandler_Credits::Pause ( unsigned long B )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = (UFunction*) UObject::GObjObjects()->Data[ 46892 ];

	UBioSFHandler_Credits_execPause_Parms Pause_Parms;
	Pause_Parms.B = B;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_Credits::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 46889 ];

	UBioSFHandler_Credits_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_Credits::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 46882 ];

	UBioSFHandler_Credits_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_Credits.SetDataFromIniFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 a_sSection                     ( CPF_Parm | CPF_NeedCtorLink )

bool UBioSFHandler_Credits::SetDataFromIniFile ( struct FString a_sSection )
{
	static UFunction* pFnSetDataFromIniFile = NULL;

	if ( ! pFnSetDataFromIniFile )
		pFnSetDataFromIniFile = (UFunction*) UObject::GObjObjects()->Data[ 46879 ];

	UBioSFHandler_Credits_execSetDataFromIniFile_Parms SetDataFromIniFile_Parms;
	memcpy ( &SetDataFromIniFile_Parms.a_sSection, &a_sSection, 0xC );

	pFnSetDataFromIniFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDataFromIniFile, &SetDataFromIniFile_Parms, NULL );

	pFnSetDataFromIniFile->FunctionFlags |= 0x400;

	return SetDataFromIniFile_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_Credits.SetOnCloseCallback
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         fn_OnCloseDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_Credits::SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate )
{
	static UFunction* pFnSetOnCloseCallback = NULL;

	if ( ! pFnSetOnCloseCallback )
		pFnSetOnCloseCallback = (UFunction*) UObject::GObjObjects()->Data[ 46877 ];

	UBioSFHandler_Credits_execSetOnCloseCallback_Parms SetOnCloseCallback_Parms;
	memcpy ( &SetOnCloseCallback_Parms.fn_OnCloseDelegate, &fn_OnCloseDelegate, 0xC );

	this->ProcessEvent ( pFnSetOnCloseCallback, &SetOnCloseCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.OnCloseCallback
// [0x00120000] 
// Parameters infos:

void UBioSFHandler_Credits::OnCloseCallback ( )
{
	static UFunction* pFnOnCloseCallback = NULL;

	if ( ! pFnOnCloseCallback )
		pFnOnCloseCallback = (UFunction*) UObject::GObjObjects()->Data[ 46860 ];

	UBioSFHandler_Credits_execOnCloseCallback_Parms OnCloseCallback_Parms;

	this->ProcessEvent ( pFnOnCloseCallback, &OnCloseCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_Credits::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 46872 ];

	UBioSFHandler_Credits_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Credits.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_Credits::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 46871 ];

	UBioSFHandler_Credits_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_DataCodex.OnSwapTabs
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_DataCodex::OnSwapTabs ( )
{
	static UFunction* pFnOnSwapTabs = NULL;

	if ( ! pFnOnSwapTabs )
		pFnOnSwapTabs = (UFunction*) UObject::GObjObjects()->Data[ 46953 ];

	UBioSFHandler_DataCodex_execOnSwapTabs_Parms OnSwapTabs_Parms;

	pFnOnSwapTabs->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSwapTabs, &OnSwapTabs_Parms, NULL );

	pFnOnSwapTabs->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DataCodex.OnEnteredSubItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nSection                       ( CPF_Parm )
// int                            nPage                          ( CPF_Parm )

void UBioSFHandler_DataCodex::OnEnteredSubItem ( int nSection, int nPage )
{
	static UFunction* pFnOnEnteredSubItem = NULL;

	if ( ! pFnOnEnteredSubItem )
		pFnOnEnteredSubItem = (UFunction*) UObject::GObjObjects()->Data[ 46950 ];

	UBioSFHandler_DataCodex_execOnEnteredSubItem_Parms OnEnteredSubItem_Parms;
	OnEnteredSubItem_Parms.nSection = nSection;
	OnEnteredSubItem_Parms.nPage = nPage;

	pFnOnEnteredSubItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnEnteredSubItem, &OnEnteredSubItem_Parms, NULL );

	pFnOnEnteredSubItem->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DataCodex.OnExpandItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nSection                       ( CPF_Parm )

void UBioSFHandler_DataCodex::OnExpandItem ( int nSection )
{
	static UFunction* pFnOnExpandItem = NULL;

	if ( ! pFnOnExpandItem )
		pFnOnExpandItem = (UFunction*) UObject::GObjObjects()->Data[ 46948 ];

	UBioSFHandler_DataCodex_execOnExpandItem_Parms OnExpandItem_Parms;
	OnExpandItem_Parms.nSection = nSection;

	pFnOnExpandItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnExpandItem, &OnExpandItem_Parms, NULL );

	pFnOnExpandItem->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DataCodex.OnExitedItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_DataCodex::OnExitedItem ( )
{
	static UFunction* pFnOnExitedItem = NULL;

	if ( ! pFnOnExitedItem )
		pFnOnExitedItem = (UFunction*) UObject::GObjObjects()->Data[ 46947 ];

	UBioSFHandler_DataCodex_execOnExitedItem_Parms OnExitedItem_Parms;

	pFnOnExitedItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnExitedItem, &OnExitedItem_Parms, NULL );

	pFnOnExitedItem->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DataCodex.OnEnteredItem
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nSection                       ( CPF_Parm )

void UBioSFHandler_DataCodex::OnEnteredItem ( int nSection )
{
	static UFunction* pFnOnEnteredItem = NULL;

	if ( ! pFnOnEnteredItem )
		pFnOnEnteredItem = (UFunction*) UObject::GObjObjects()->Data[ 46945 ];

	UBioSFHandler_DataCodex_execOnEnteredItem_Parms OnEnteredItem_Parms;
	OnEnteredItem_Parms.nSection = nSection;

	pFnOnEnteredItem->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnEnteredItem, &OnEnteredItem_Parms, NULL );

	pFnOnEnteredItem->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DataCodex.OnSortItems
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_DataCodex::OnSortItems ( )
{
	static UFunction* pFnOnSortItems = NULL;

	if ( ! pFnOnSortItems )
		pFnOnSortItems = (UFunction*) UObject::GObjObjects()->Data[ 46944 ];

	UBioSFHandler_DataCodex_execOnSortItems_Parms OnSortItems_Parms;

	pFnOnSortItems->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSortItems, &OnSortItems_Parms, NULL );

	pFnOnSortItems->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DataCodex.OnSetAllItemsViewed
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_DataCodex::OnSetAllItemsViewed ( )
{
	static UFunction* pFnOnSetAllItemsViewed = NULL;

	if ( ! pFnOnSetAllItemsViewed )
		pFnOnSetAllItemsViewed = (UFunction*) UObject::GObjObjects()->Data[ 46943 ];

	UBioSFHandler_DataCodex_execOnSetAllItemsViewed_Parms OnSetAllItemsViewed_Parms;

	pFnOnSetAllItemsViewed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnSetAllItemsViewed, &OnSetAllItemsViewed_Parms, NULL );

	pFnOnSetAllItemsViewed->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DataCodex.OnInitialize
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_DataCodex::OnInitialize ( )
{
	static UFunction* pFnOnInitialize = NULL;

	if ( ! pFnOnInitialize )
		pFnOnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 46942 ];

	UBioSFHandler_DataCodex_execOnInitialize_Parms OnInitialize_Parms;

	pFnOnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnInitialize, &OnInitialize_Parms, NULL );

	pFnOnInitialize->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DataCodex.MarkAllSectionsViewed
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_DataCodex::MarkAllSectionsViewed ( )
{
	static UFunction* pFnMarkAllSectionsViewed = NULL;

	if ( ! pFnMarkAllSectionsViewed )
		pFnMarkAllSectionsViewed = (UFunction*) UObject::GObjObjects()->Data[ 46941 ];

	UBioSFHandler_DataCodex_execMarkAllSectionsViewed_Parms MarkAllSectionsViewed_Parms;

	pFnMarkAllSectionsViewed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMarkAllSectionsViewed, &MarkAllSectionsViewed_Parms, NULL );

	pFnMarkAllSectionsViewed->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DesignerUI.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_DesignerUI::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 47035 ];

	UBioSFHandler_DesignerUI_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_DesignerUI.ExIntInitialize
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_DesignerUI::ExIntInitialize ( )
{
	static UFunction* pFnExIntInitialize = NULL;

	if ( ! pFnExIntInitialize )
		pFnExIntInitialize = (UFunction*) UObject::GObjObjects()->Data[ 47034 ];

	UBioSFHandler_DesignerUI_execExIntInitialize_Parms ExIntInitialize_Parms;

	pFnExIntInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExIntInitialize, &ExIntInitialize_Parms, NULL );

	pFnExIntInitialize->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DesignerUI.GetTimerValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bModalTimer                    ( CPF_Parm )

float UBioSFHandler_DesignerUI::GetTimerValue ( unsigned long bModalTimer )
{
	static UFunction* pFnGetTimerValue = NULL;

	if ( ! pFnGetTimerValue )
		pFnGetTimerValue = (UFunction*) UObject::GObjObjects()->Data[ 47031 ];

	UBioSFHandler_DesignerUI_execGetTimerValue_Parms GetTimerValue_Parms;
	GetTimerValue_Parms.bModalTimer = bModalTimer;

	pFnGetTimerValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTimerValue, &GetTimerValue_Parms, NULL );

	pFnGetTimerValue->FunctionFlags |= 0x400;

	return GetTimerValue_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_DesignerUI.SetTimerDetails
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bModalTimer                    ( CPF_Parm )
// float                          fStartTime                     ( CPF_Parm )
// float                          fEndTime                       ( CPF_Parm )
// float                          fInterval                      ( CPF_Parm )

void UBioSFHandler_DesignerUI::SetTimerDetails ( unsigned long bModalTimer, float fStartTime, float fEndTime, float fInterval )
{
	static UFunction* pFnSetTimerDetails = NULL;

	if ( ! pFnSetTimerDetails )
		pFnSetTimerDetails = (UFunction*) UObject::GObjObjects()->Data[ 47026 ];

	UBioSFHandler_DesignerUI_execSetTimerDetails_Parms SetTimerDetails_Parms;
	SetTimerDetails_Parms.bModalTimer = bModalTimer;
	SetTimerDetails_Parms.fStartTime = fStartTime;
	SetTimerDetails_Parms.fEndTime = fEndTime;
	SetTimerDetails_Parms.fInterval = fInterval;

	pFnSetTimerDetails->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTimerDetails, &SetTimerDetails_Parms, NULL );

	pFnSetTimerDetails->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DesignerUI.IsQuasarLayout
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFHandler_DesignerUI::IsQuasarLayout ( )
{
	static UFunction* pFnIsQuasarLayout = NULL;

	if ( ! pFnIsQuasarLayout )
		pFnIsQuasarLayout = (UFunction*) UObject::GObjObjects()->Data[ 47024 ];

	UBioSFHandler_DesignerUI_execIsQuasarLayout_Parms IsQuasarLayout_Parms;

	pFnIsQuasarLayout->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsQuasarLayout, &IsQuasarLayout_Parms, NULL );

	pFnIsQuasarLayout->FunctionFlags |= 0x400;

	return IsQuasarLayout_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_DesignerUI.SetQuasarLayout
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )

void UBioSFHandler_DesignerUI::SetQuasarLayout ( unsigned long bShow )
{
	static UFunction* pFnSetQuasarLayout = NULL;

	if ( ! pFnSetQuasarLayout )
		pFnSetQuasarLayout = (UFunction*) UObject::GObjObjects()->Data[ 47022 ];

	UBioSFHandler_DesignerUI_execSetQuasarLayout_Parms SetQuasarLayout_Parms;
	SetQuasarLayout_Parms.bShow = bShow;

	pFnSetQuasarLayout->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetQuasarLayout, &SetQuasarLayout_Parms, NULL );

	pFnSetQuasarLayout->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DesignerUI.SetBarFillDirection
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bModalBar                      ( CPF_Parm )
// unsigned long                  bLeftToRight                   ( CPF_Parm )

void UBioSFHandler_DesignerUI::SetBarFillDirection ( unsigned long bModalBar, unsigned long bLeftToRight )
{
	static UFunction* pFnSetBarFillDirection = NULL;

	if ( ! pFnSetBarFillDirection )
		pFnSetBarFillDirection = (UFunction*) UObject::GObjObjects()->Data[ 47019 ];

	UBioSFHandler_DesignerUI_execSetBarFillDirection_Parms SetBarFillDirection_Parms;
	SetBarFillDirection_Parms.bModalBar = bModalBar;
	SetBarFillDirection_Parms.bLeftToRight = bLeftToRight;

	pFnSetBarFillDirection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBarFillDirection, &SetBarFillDirection_Parms, NULL );

	pFnSetBarFillDirection->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DesignerUI.SetBarFillPercent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bModalBar                      ( CPF_Parm )
// int                            nPercent                       ( CPF_Parm )

void UBioSFHandler_DesignerUI::SetBarFillPercent ( unsigned long bModalBar, int nPercent )
{
	static UFunction* pFnSetBarFillPercent = NULL;

	if ( ! pFnSetBarFillPercent )
		pFnSetBarFillPercent = (UFunction*) UObject::GObjObjects()->Data[ 47016 ];

	UBioSFHandler_DesignerUI_execSetBarFillPercent_Parms SetBarFillPercent_Parms;
	SetBarFillPercent_Parms.bModalBar = bModalBar;
	SetBarFillPercent_Parms.nPercent = nPercent;

	pFnSetBarFillPercent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBarFillPercent, &SetBarFillPercent_Parms, NULL );

	pFnSetBarFillPercent->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DesignerUI.SetBarMarkerPoints
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bModalBar                      ( CPF_Parm )
// int                            nMarker1                       ( CPF_Parm )
// int                            nMarker2                       ( CPF_Parm )

void UBioSFHandler_DesignerUI::SetBarMarkerPoints ( unsigned long bModalBar, int nMarker1, int nMarker2 )
{
	static UFunction* pFnSetBarMarkerPoints = NULL;

	if ( ! pFnSetBarMarkerPoints )
		pFnSetBarMarkerPoints = (UFunction*) UObject::GObjObjects()->Data[ 47012 ];

	UBioSFHandler_DesignerUI_execSetBarMarkerPoints_Parms SetBarMarkerPoints_Parms;
	SetBarMarkerPoints_Parms.bModalBar = bModalBar;
	SetBarMarkerPoints_Parms.nMarker1 = nMarker1;
	SetBarMarkerPoints_Parms.nMarker2 = nMarker2;

	pFnSetBarMarkerPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBarMarkerPoints, &SetBarMarkerPoints_Parms, NULL );

	pFnSetBarMarkerPoints->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DesignerUI.SetCounterValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bModalCounter                  ( CPF_Parm )
// int                            nValue                         ( CPF_Parm )

void UBioSFHandler_DesignerUI::SetCounterValue ( unsigned long bModalCounter, int nValue )
{
	static UFunction* pFnSetCounterValue = NULL;

	if ( ! pFnSetCounterValue )
		pFnSetCounterValue = (UFunction*) UObject::GObjObjects()->Data[ 47009 ];

	UBioSFHandler_DesignerUI_execSetCounterValue_Parms SetCounterValue_Parms;
	SetCounterValue_Parms.bModalCounter = bModalCounter;
	SetCounterValue_Parms.nValue = nValue;

	pFnSetCounterValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCounterValue, &SetCounterValue_Parms, NULL );

	pFnSetCounterValue->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DesignerUI.SetElementText
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  nElement                       ( CPF_Parm )
// struct FString                 sText                          ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_DesignerUI::SetElementText ( unsigned char nElement, struct FString* sText )
{
	static UFunction* pFnSetElementText = NULL;

	if ( ! pFnSetElementText )
		pFnSetElementText = (UFunction*) UObject::GObjObjects()->Data[ 47006 ];

	UBioSFHandler_DesignerUI_execSetElementText_Parms SetElementText_Parms;
	SetElementText_Parms.nElement = nElement;

	pFnSetElementText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetElementText, &SetElementText_Parms, NULL );

	pFnSetElementText->FunctionFlags |= 0x400;

	if ( sText )
		memcpy ( sText, &SetElementText_Parms.sText, 0xC );
};

// Function SFXGame.BioSFHandler_DesignerUI.SetTextStringRef
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  nElement                       ( CPF_Parm )

void UBioSFHandler_DesignerUI::SetTextStringRef ( unsigned char nElement )
{
	static UFunction* pFnSetTextStringRef = NULL;

	if ( ! pFnSetTextStringRef )
		pFnSetTextStringRef = (UFunction*) UObject::GObjObjects()->Data[ 47003 ];

	UBioSFHandler_DesignerUI_execSetTextStringRef_Parms SetTextStringRef_Parms;
	SetTextStringRef_Parms.nElement = nElement;

	pFnSetTextStringRef->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTextStringRef, &SetTextStringRef_Parms, NULL );

	pFnSetTextStringRef->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DesignerUI.ClearElementPulse
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  nElement                       ( CPF_Parm )

void UBioSFHandler_DesignerUI::ClearElementPulse ( unsigned char nElement )
{
	static UFunction* pFnClearElementPulse = NULL;

	if ( ! pFnClearElementPulse )
		pFnClearElementPulse = (UFunction*) UObject::GObjObjects()->Data[ 47001 ];

	UBioSFHandler_DesignerUI_execClearElementPulse_Parms ClearElementPulse_Parms;
	ClearElementPulse_Parms.nElement = nElement;

	pFnClearElementPulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearElementPulse, &ClearElementPulse_Parms, NULL );

	pFnClearElementPulse->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DesignerUI.SetupElementPulse
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  nElement                       ( CPF_Parm )
// float                          fMinAlpha                      ( CPF_Parm )
// float                          fCycleTime                     ( CPF_Parm )

int UBioSFHandler_DesignerUI::SetupElementPulse ( unsigned char nElement, float fMinAlpha, float fCycleTime )
{
	static UFunction* pFnSetupElementPulse = NULL;

	if ( ! pFnSetupElementPulse )
		pFnSetupElementPulse = (UFunction*) UObject::GObjObjects()->Data[ 46996 ];

	UBioSFHandler_DesignerUI_execSetupElementPulse_Parms SetupElementPulse_Parms;
	SetupElementPulse_Parms.nElement = nElement;
	SetupElementPulse_Parms.fMinAlpha = fMinAlpha;
	SetupElementPulse_Parms.fCycleTime = fCycleTime;

	pFnSetupElementPulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetupElementPulse, &SetupElementPulse_Parms, NULL );

	pFnSetupElementPulse->FunctionFlags |= 0x400;

	return SetupElementPulse_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_DesignerUI.SetElementAlpha
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  nElement                       ( CPF_Parm )
// float                          fAlpha                         ( CPF_Parm )

void UBioSFHandler_DesignerUI::SetElementAlpha ( unsigned char nElement, float fAlpha )
{
	static UFunction* pFnSetElementAlpha = NULL;

	if ( ! pFnSetElementAlpha )
		pFnSetElementAlpha = (UFunction*) UObject::GObjObjects()->Data[ 46993 ];

	UBioSFHandler_DesignerUI_execSetElementAlpha_Parms SetElementAlpha_Parms;
	SetElementAlpha_Parms.nElement = nElement;
	SetElementAlpha_Parms.fAlpha = fAlpha;

	pFnSetElementAlpha->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetElementAlpha, &SetElementAlpha_Parms, NULL );

	pFnSetElementAlpha->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DesignerUI.SetElementColor
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  nElement                       ( CPF_Parm )
// struct FColor                  stColor                        ( CPF_Const | CPF_Parm | CPF_OutParm )

void UBioSFHandler_DesignerUI::SetElementColor ( unsigned char nElement, struct FColor* stColor )
{
	static UFunction* pFnSetElementColor = NULL;

	if ( ! pFnSetElementColor )
		pFnSetElementColor = (UFunction*) UObject::GObjObjects()->Data[ 46990 ];

	UBioSFHandler_DesignerUI_execSetElementColor_Parms SetElementColor_Parms;
	SetElementColor_Parms.nElement = nElement;

	pFnSetElementColor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetElementColor, &SetElementColor_Parms, NULL );

	pFnSetElementColor->FunctionFlags |= 0x400;

	if ( stColor )
		memcpy ( stColor, &SetElementColor_Parms.stColor, 0x4 );
};

// Function SFXGame.BioSFHandler_DesignerUI.SetElementVisible
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  nElement                       ( CPF_Parm )
// unsigned long                  bVisible                       ( CPF_Parm )
// float                          fFadeTime                      ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_DesignerUI::SetElementVisible ( unsigned char nElement, unsigned long bVisible, float fFadeTime )
{
	static UFunction* pFnSetElementVisible = NULL;

	if ( ! pFnSetElementVisible )
		pFnSetElementVisible = (UFunction*) UObject::GObjObjects()->Data[ 46986 ];

	UBioSFHandler_DesignerUI_execSetElementVisible_Parms SetElementVisible_Parms;
	SetElementVisible_Parms.nElement = nElement;
	SetElementVisible_Parms.bVisible = bVisible;
	SetElementVisible_Parms.fFadeTime = fFadeTime;

	pFnSetElementVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetElementVisible, &SetElementVisible_Parms, NULL );

	pFnSetElementVisible->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_DesignerUI.IsActive
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bModal                         ( CPF_Parm )

bool UBioSFHandler_DesignerUI::IsActive ( unsigned long bModal )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = (UFunction*) UObject::GObjObjects()->Data[ 46983 ];

	UBioSFHandler_DesignerUI_execIsActive_Parms IsActive_Parms;
	IsActive_Parms.bModal = bModal;

	pFnIsActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );

	pFnIsActive->FunctionFlags |= 0x400;

	return IsActive_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_DesignerUI.ClearAll
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bModal                         ( CPF_Parm )

void UBioSFHandler_DesignerUI::ClearAll ( unsigned long bModal )
{
	static UFunction* pFnClearAll = NULL;

	if ( ! pFnClearAll )
		pFnClearAll = (UFunction*) UObject::GObjObjects()->Data[ 46981 ];

	UBioSFHandler_DesignerUI_execClearAll_Parms ClearAll_Parms;
	ClearAll_Parms.bModal = bModal;

	pFnClearAll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAll, &ClearAll_Parms, NULL );

	pFnClearAll->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_GalaxyMap.BuyProbes
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler_GalaxyMap::eventBuyProbes ( )
{
	static UFunction* pFnBuyProbes = NULL;

	if ( ! pFnBuyProbes )
		pFnBuyProbes = (UFunction*) UObject::GObjObjects()->Data[ 47079 ];

	UBioSFHandler_GalaxyMap_eventBuyProbes_Parms BuyProbes_Parms;

	this->ProcessEvent ( pFnBuyProbes, &BuyProbes_Parms, NULL );
};

// Function SFXGame.BioSFHandler_GalaxyMap.BuyFuel
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler_GalaxyMap::eventBuyFuel ( )
{
	static UFunction* pFnBuyFuel = NULL;

	if ( ! pFnBuyFuel )
		pFnBuyFuel = (UFunction*) UObject::GObjObjects()->Data[ 47078 ];

	UBioSFHandler_GalaxyMap_eventBuyFuel_Parms BuyFuel_Parms;

	this->ProcessEvent ( pFnBuyFuel, &BuyFuel_Parms, NULL );
};

// Function SFXGame.BioSFHandler_GalaxyMap.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  nEvent                         ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_GalaxyMap::HandleInputEvent ( unsigned char nEvent, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 47071 ];

	UBioSFHandler_GalaxyMap_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.nEvent = nEvent;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_GalaxyMap.CloseGalaxyMap
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_GalaxyMap::CloseGalaxyMap ( )
{
	static UFunction* pFnCloseGalaxyMap = NULL;

	if ( ! pFnCloseGalaxyMap )
		pFnCloseGalaxyMap = (UFunction*) UObject::GObjObjects()->Data[ 47070 ];

	UBioSFHandler_GalaxyMap_execCloseGalaxyMap_Parms CloseGalaxyMap_Parms;

	pFnCloseGalaxyMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCloseGalaxyMap, &CloseGalaxyMap_Parms, NULL );

	pFnCloseGalaxyMap->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_GalaxyMap.UpdateInventoryDisplay
// [0x00820002] 
// Parameters infos:
// int                            nResourceIndex                 ( CPF_Parm )
// int                            nAmount                        ( CPF_Parm )

void UBioSFHandler_GalaxyMap::UpdateInventoryDisplay ( int nResourceIndex, int nAmount )
{
	static UFunction* pFnUpdateInventoryDisplay = NULL;

	if ( ! pFnUpdateInventoryDisplay )
		pFnUpdateInventoryDisplay = (UFunction*) UObject::GObjObjects()->Data[ 47064 ];

	UBioSFHandler_GalaxyMap_execUpdateInventoryDisplay_Parms UpdateInventoryDisplay_Parms;
	UpdateInventoryDisplay_Parms.nResourceIndex = nResourceIndex;
	UpdateInventoryDisplay_Parms.nAmount = nAmount;

	this->ProcessEvent ( pFnUpdateInventoryDisplay, &UpdateInventoryDisplay_Parms, NULL );
};

// Function SFXGame.BioSFHandler_GalaxyMap.UpdateScanResources
// [0x00820002] 
// Parameters infos:
// TArray< float >                Resources                      ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_GalaxyMap::UpdateScanResources ( TArray< float > Resources )
{
	static UFunction* pFnUpdateScanResources = NULL;

	if ( ! pFnUpdateScanResources )
		pFnUpdateScanResources = (UFunction*) UObject::GObjObjects()->Data[ 47057 ];

	UBioSFHandler_GalaxyMap_execUpdateScanResources_Parms UpdateScanResources_Parms;
	memcpy ( &UpdateScanResources_Parms.Resources, &Resources, 0xC );

	this->ProcessEvent ( pFnUpdateScanResources, &UpdateScanResources_Parms, NULL );
};

// Function SFXGame.BioSFHandler_GalaxyMap.TravelConfirm
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_GalaxyMap::TravelConfirm ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnTravelConfirm = NULL;

	if ( ! pFnTravelConfirm )
		pFnTravelConfirm = (UFunction*) UObject::GObjObjects()->Data[ 47054 ];

	UBioSFHandler_GalaxyMap_execTravelConfirm_Parms TravelConfirm_Parms;
	TravelConfirm_Parms.bAPressed = bAPressed;
	TravelConfirm_Parms.nContext = nContext;

	pFnTravelConfirm->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTravelConfirm, &TravelConfirm_Parms, NULL );

	pFnTravelConfirm->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_GameOver.GotoMainMenu
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_GameOver::GotoMainMenu ( )
{
	static UFunction* pFnGotoMainMenu = NULL;

	if ( ! pFnGotoMainMenu )
		pFnGotoMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 47110 ];

	UBioSFHandler_GameOver_execGotoMainMenu_Parms GotoMainMenu_Parms;

	pFnGotoMainMenu->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGotoMainMenu, &GotoMainMenu_Parms, NULL );

	pFnGotoMainMenu->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_GameOver.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_GameOver::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 47109 ];

	UBioSFHandler_GameOver_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_GameOver.HandleEvent
// [0x00C20002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_GameOver::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 47091 ];

	UBioSFHandler_GameOver_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_GameOver.Callback_GotoMainMenu
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void UBioSFHandler_GameOver::Callback_GotoMainMenu ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_GotoMainMenu = NULL;

	if ( ! pFnCallback_GotoMainMenu )
		pFnCallback_GotoMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 47088 ];

	UBioSFHandler_GameOver_execCallback_GotoMainMenu_Parms Callback_GotoMainMenu_Parms;
	Callback_GotoMainMenu_Parms.bAPressed = bAPressed;
	Callback_GotoMainMenu_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_GotoMainMenu, &Callback_GotoMainMenu_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Journal.MarkAllQuestsViewed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_Journal::MarkAllQuestsViewed ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnMarkAllQuestsViewed = NULL;

	if ( ! pFnMarkAllQuestsViewed )
		pFnMarkAllQuestsViewed = (UFunction*) UObject::GObjObjects()->Data[ 47144 ];

	UBioSFHandler_Journal_execMarkAllQuestsViewed_Parms MarkAllQuestsViewed_Parms;
	MarkAllQuestsViewed_Parms.bAPressed = bAPressed;
	MarkAllQuestsViewed_Parms.nContext = nContext;

	pFnMarkAllQuestsViewed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMarkAllQuestsViewed, &MarkAllQuestsViewed_Parms, NULL );

	pFnMarkAllQuestsViewed->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Journal.Update
// [0x00820002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFHandler_Journal::Update ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 47139 ];

	UBioSFHandler_Journal_execUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Journal.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_Journal::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 47136 ];

	UBioSFHandler_Journal_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Keyboard.DisplayKeyboard
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  nOptions                       ( CPF_Parm )
// int                            nMaxLength                     ( CPF_Parm )
// struct FString                 sDefault                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_Keyboard::DisplayKeyboard ( unsigned char nOptions, int nMaxLength, struct FString sDefault )
{
	static UFunction* pFnDisplayKeyboard = NULL;

	if ( ! pFnDisplayKeyboard )
		pFnDisplayKeyboard = (UFunction*) UObject::GObjObjects()->Data[ 47153 ];

	UBioSFHandler_Keyboard_execDisplayKeyboard_Parms DisplayKeyboard_Parms;
	DisplayKeyboard_Parms.nOptions = nOptions;
	DisplayKeyboard_Parms.nMaxLength = nMaxLength;
	memcpy ( &DisplayKeyboard_Parms.sDefault, &sDefault, 0xC );

	pFnDisplayKeyboard->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayKeyboard, &DisplayKeyboard_Parms, NULL );

	pFnDisplayKeyboard->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_LoadScreen.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_LoadScreen::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 47176 ];

	UBioSFHandler_LoadScreen_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_LoadScreen.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_LoadScreen::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 47175 ];

	UBioSFHandler_LoadScreen_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_LoadScreen.HandleEvent
// [0x00420000] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_LoadScreen::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 47171 ];

	UBioSFHandler_LoadScreen_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_MainMenu.GetLocalizedNewsItemCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nCurrent                       ( CPF_Parm )
// int                            nTotal                         ( CPF_Parm )

struct FString UBioSFHandler_MainMenu::GetLocalizedNewsItemCount ( int nCurrent, int nTotal )
{
	static UFunction* pFnGetLocalizedNewsItemCount = NULL;

	if ( ! pFnGetLocalizedNewsItemCount )
		pFnGetLocalizedNewsItemCount = (UFunction*) UObject::GObjObjects()->Data[ 47685 ];

	UBioSFHandler_MainMenu_execGetLocalizedNewsItemCount_Parms GetLocalizedNewsItemCount_Parms;
	GetLocalizedNewsItemCount_Parms.nCurrent = nCurrent;
	GetLocalizedNewsItemCount_Parms.nTotal = nTotal;

	pFnGetLocalizedNewsItemCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLocalizedNewsItemCount, &GetLocalizedNewsItemCount_Parms, NULL );

	pFnGetLocalizedNewsItemCount->FunctionFlags |= 0x400;

	return GetLocalizedNewsItemCount_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_MainMenu.OnInputFocusRecieved
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler_MainMenu::eventOnInputFocusRecieved ( )
{
	static UFunction* pFnOnInputFocusRecieved = NULL;

	if ( ! pFnOnInputFocusRecieved )
		pFnOnInputFocusRecieved = (UFunction*) UObject::GObjObjects()->Data[ 47684 ];

	UBioSFHandler_MainMenu_eventOnInputFocusRecieved_Parms OnInputFocusRecieved_Parms;

	this->ProcessEvent ( pFnOnInputFocusRecieved, &OnInputFocusRecieved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.RefreshCerberusState
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_MainMenu::RefreshCerberusState ( )
{
	static UFunction* pFnRefreshCerberusState = NULL;

	if ( ! pFnRefreshCerberusState )
		pFnRefreshCerberusState = (UFunction*) UObject::GObjObjects()->Data[ 47678 ];

	UBioSFHandler_MainMenu_execRefreshCerberusState_Parms RefreshCerberusState_Parms;

	this->ProcessEvent ( pFnRefreshCerberusState, &RefreshCerberusState_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.PRCStoreGUIInputPressed
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_MainMenu::PRCStoreGUIInputPressed ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnPRCStoreGUIInputPressed = NULL;

	if ( ! pFnPRCStoreGUIInputPressed )
		pFnPRCStoreGUIInputPressed = (UFunction*) UObject::GObjObjects()->Data[ 47671 ];

	UBioSFHandler_MainMenu_execPRCStoreGUIInputPressed_Parms PRCStoreGUIInputPressed_Parms;
	PRCStoreGUIInputPressed_Parms.bAPressed = bAPressed;
	PRCStoreGUIInputPressed_Parms.nContext = nContext;

	this->ProcessEvent ( pFnPRCStoreGUIInputPressed, &PRCStoreGUIInputPressed_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.AddPRCChoices
// [0x00820002] 
// Parameters infos:
// class USFXGameChoiceGUIData_PRCShop* oData                          ( CPF_Parm )
// TArray< struct FSFXOfferDescriptor > aOffers                        ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_MainMenu::AddPRCChoices ( class USFXGameChoiceGUIData_PRCShop* oData, TArray< struct FSFXOfferDescriptor > aOffers )
{
	static UFunction* pFnAddPRCChoices = NULL;

	if ( ! pFnAddPRCChoices )
		pFnAddPRCChoices = (UFunction*) UObject::GObjObjects()->Data[ 47646 ];

	UBioSFHandler_MainMenu_execAddPRCChoices_Parms AddPRCChoices_Parms;
	AddPRCChoices_Parms.oData = oData;
	memcpy ( &AddPRCChoices_Parms.aOffers, &aOffers, 0xC );

	this->ProcessEvent ( pFnAddPRCChoices, &AddPRCChoices_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.OpenMarketplaceGui
// [0x00020002] 
// Parameters infos:
// TArray< struct FSFXOfferDescriptor > aOffers                        ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_MainMenu::OpenMarketplaceGui ( TArray< struct FSFXOfferDescriptor > aOffers )
{
	static UFunction* pFnOpenMarketplaceGui = NULL;

	if ( ! pFnOpenMarketplaceGui )
		pFnOpenMarketplaceGui = (UFunction*) UObject::GObjObjects()->Data[ 47642 ];

	UBioSFHandler_MainMenu_execOpenMarketplaceGui_Parms OpenMarketplaceGui_Parms;
	memcpy ( &OpenMarketplaceGui_Parms.aOffers, &aOffers, 0xC );

	this->ProcessEvent ( pFnOpenMarketplaceGui, &OpenMarketplaceGui_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.Buy
// [0x00020002] 
// Parameters infos:
// unsigned char                  nSource                        ( CPF_Parm )

void UBioSFHandler_MainMenu::Buy ( unsigned char nSource )
{
	static UFunction* pFnBuy = NULL;

	if ( ! pFnBuy )
		pFnBuy = (UFunction*) UObject::GObjObjects()->Data[ 47636 ];

	UBioSFHandler_MainMenu_execBuy_Parms Buy_Parms;
	Buy_Parms.nSource = nSource;

	this->ProcessEvent ( pFnBuy, &Buy_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.OnExecuteOpenMarketPlace
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_MainMenu::OnExecuteOpenMarketPlace ( )
{
	static UFunction* pFnOnExecuteOpenMarketPlace = NULL;

	if ( ! pFnOnExecuteOpenMarketPlace )
		pFnOnExecuteOpenMarketPlace = (UFunction*) UObject::GObjObjects()->Data[ 47635 ];

	UBioSFHandler_MainMenu_execOnExecuteOpenMarketPlace_Parms OnExecuteOpenMarketPlace_Parms;

	this->ProcessEvent ( pFnOnExecuteOpenMarketPlace, &OnExecuteOpenMarketPlace_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.OnExecuteCerberusDLCAvailable
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_MainMenu::OnExecuteCerberusDLCAvailable ( )
{
	static UFunction* pFnOnExecuteCerberusDLCAvailable = NULL;

	if ( ! pFnOnExecuteCerberusDLCAvailable )
		pFnOnExecuteCerberusDLCAvailable = (UFunction*) UObject::GObjObjects()->Data[ 47634 ];

	UBioSFHandler_MainMenu_execOnExecuteCerberusDLCAvailable_Parms OnExecuteCerberusDLCAvailable_Parms;

	this->ProcessEvent ( pFnOnExecuteCerberusDLCAvailable, &OnExecuteCerberusDLCAvailable_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.HasCerberusDLC
// [0x00820002] 
// Parameters infos:
// unsigned long                  bVal                           ( CPF_Parm )

void UBioSFHandler_MainMenu::HasCerberusDLC ( unsigned long bVal )
{
	static UFunction* pFnHasCerberusDLC = NULL;

	if ( ! pFnHasCerberusDLC )
		pFnHasCerberusDLC = (UFunction*) UObject::GObjObjects()->Data[ 47629 ];

	UBioSFHandler_MainMenu_execHasCerberusDLC_Parms HasCerberusDLC_Parms;
	HasCerberusDLC_Parms.bVal = bVal;

	this->ProcessEvent ( pFnHasCerberusDLC, &HasCerberusDLC_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.CerberusScreenStateChange
// [0x00820002] 
// Parameters infos:
// unsigned char                  eNewState                      ( CPF_Parm )

void UBioSFHandler_MainMenu::CerberusScreenStateChange ( unsigned char eNewState )
{
	static UFunction* pFnCerberusScreenStateChange = NULL;

	if ( ! pFnCerberusScreenStateChange )
		pFnCerberusScreenStateChange = (UFunction*) UObject::GObjObjects()->Data[ 47624 ];

	UBioSFHandler_MainMenu_execCerberusScreenStateChange_Parms CerberusScreenStateChange_Parms;
	CerberusScreenStateChange_Parms.eNewState = eNewState;

	this->ProcessEvent ( pFnCerberusScreenStateChange, &CerberusScreenStateChange_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.SetCerberusConnectState
// [0x00820002] 
// Parameters infos:
// unsigned long                  bHasAction                     ( CPF_Parm )
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAltView                       ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bVisible                       ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_MainMenu::SetCerberusConnectState ( unsigned long bHasAction, struct FString sMessage, unsigned long bAltView, unsigned long bVisible )
{
	static UFunction* pFnSetCerberusConnectState = NULL;

	if ( ! pFnSetCerberusConnectState )
		pFnSetCerberusConnectState = (UFunction*) UObject::GObjObjects()->Data[ 47581 ];

	UBioSFHandler_MainMenu_execSetCerberusConnectState_Parms SetCerberusConnectState_Parms;
	SetCerberusConnectState_Parms.bHasAction = bHasAction;
	memcpy ( &SetCerberusConnectState_Parms.sMessage, &sMessage, 0xC );
	SetCerberusConnectState_Parms.bAltView = bAltView;
	SetCerberusConnectState_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnSetCerberusConnectState, &SetCerberusConnectState_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.CerberusConnect
// [0x00020002] 
// Parameters infos:
// unsigned char                  connectMode                    ( CPF_Parm )

void UBioSFHandler_MainMenu::CerberusConnect ( unsigned char connectMode )
{
	static UFunction* pFnCerberusConnect = NULL;

	if ( ! pFnCerberusConnect )
		pFnCerberusConnect = (UFunction*) UObject::GObjObjects()->Data[ 47571 ];

	UBioSFHandler_MainMenu_execCerberusConnect_Parms CerberusConnect_Parms;
	CerberusConnect_Parms.connectMode = connectMode;

	this->ProcessEvent ( pFnCerberusConnect, &CerberusConnect_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.SetOnlineState
// [0x00020002] 
// Parameters infos:
// unsigned char                  eState                         ( CPF_Parm )

void UBioSFHandler_MainMenu::SetOnlineState ( unsigned char eState )
{
	static UFunction* pFnSetOnlineState = NULL;

	if ( ! pFnSetOnlineState )
		pFnSetOnlineState = (UFunction*) UObject::GObjObjects()->Data[ 47565 ];

	UBioSFHandler_MainMenu_execSetOnlineState_Parms SetOnlineState_Parms;
	SetOnlineState_Parms.eState = eState;

	this->ProcessEvent ( pFnSetOnlineState, &SetOnlineState_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.SetMarqueeRepeatText
// [0x00820002] 
// Parameters infos:
// struct FString                 MessageData                    ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_MainMenu::SetMarqueeRepeatText ( struct FString MessageData )
{
	static UFunction* pFnSetMarqueeRepeatText = NULL;

	if ( ! pFnSetMarqueeRepeatText )
		pFnSetMarqueeRepeatText = (UFunction*) UObject::GObjObjects()->Data[ 47560 ];

	UBioSFHandler_MainMenu_execSetMarqueeRepeatText_Parms SetMarqueeRepeatText_Parms;
	memcpy ( &SetMarqueeRepeatText_Parms.MessageData, &MessageData, 0xC );

	this->ProcessEvent ( pFnSetMarqueeRepeatText, &SetMarqueeRepeatText_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.OnDisplayNotification
// [0x00020002] 
// Parameters infos:
// unsigned char                  Type                           ( CPF_Parm )
// struct FString                 MessageData                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Image                          ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_MainMenu::OnDisplayNotification ( unsigned char Type, struct FString MessageData, struct FString Title, struct FString Image )
{
	static UFunction* pFnOnDisplayNotification = NULL;

	if ( ! pFnOnDisplayNotification )
		pFnOnDisplayNotification = (UFunction*) UObject::GObjObjects()->Data[ 47555 ];

	UBioSFHandler_MainMenu_execOnDisplayNotification_Parms OnDisplayNotification_Parms;
	OnDisplayNotification_Parms.Type = Type;
	memcpy ( &OnDisplayNotification_Parms.MessageData, &MessageData, 0xC );
	memcpy ( &OnDisplayNotification_Parms.Title, &Title, 0xC );
	memcpy ( &OnDisplayNotification_Parms.Image, &Image, 0xC );

	this->ProcessEvent ( pFnOnDisplayNotification, &OnDisplayNotification_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.CloseEANetworking
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_MainMenu::CloseEANetworking ( )
{
	static UFunction* pFnCloseEANetworking = NULL;

	if ( ! pFnCloseEANetworking )
		pFnCloseEANetworking = (UFunction*) UObject::GObjObjects()->Data[ 47553 ];

	UBioSFHandler_MainMenu_execCloseEANetworking_Parms CloseEANetworking_Parms;

	this->ProcessEvent ( pFnCloseEANetworking, &CloseEANetworking_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.ClearNotifications
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_MainMenu::ClearNotifications ( )
{
	static UFunction* pFnClearNotifications = NULL;

	if ( ! pFnClearNotifications )
		pFnClearNotifications = (UFunction*) UObject::GObjObjects()->Data[ 47552 ];

	UBioSFHandler_MainMenu_execClearNotifications_Parms ClearNotifications_Parms;

	this->ProcessEvent ( pFnClearNotifications, &ClearNotifications_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.AddCerberusItem
// [0x00820002] 
// Parameters infos:
// struct FString                 i_sTitle                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 i_sInfo                        ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 i_sImage                       ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_MainMenu::AddCerberusItem ( struct FString i_sTitle, struct FString i_sInfo, struct FString i_sImage )
{
	static UFunction* pFnAddCerberusItem = NULL;

	if ( ! pFnAddCerberusItem )
		pFnAddCerberusItem = (UFunction*) UObject::GObjObjects()->Data[ 47545 ];

	UBioSFHandler_MainMenu_execAddCerberusItem_Parms AddCerberusItem_Parms;
	memcpy ( &AddCerberusItem_Parms.i_sTitle, &i_sTitle, 0xC );
	memcpy ( &AddCerberusItem_Parms.i_sInfo, &i_sInfo, 0xC );
	memcpy ( &AddCerberusItem_Parms.i_sImage, &i_sImage, 0xC );

	this->ProcessEvent ( pFnAddCerberusItem, &AddCerberusItem_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.PrevCerberusItem
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_MainMenu::PrevCerberusItem ( )
{
	static UFunction* pFnPrevCerberusItem = NULL;

	if ( ! pFnPrevCerberusItem )
		pFnPrevCerberusItem = (UFunction*) UObject::GObjObjects()->Data[ 47544 ];

	UBioSFHandler_MainMenu_execPrevCerberusItem_Parms PrevCerberusItem_Parms;

	this->ProcessEvent ( pFnPrevCerberusItem, &PrevCerberusItem_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.NextCerberusItem
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_MainMenu::NextCerberusItem ( )
{
	static UFunction* pFnNextCerberusItem = NULL;

	if ( ! pFnNextCerberusItem )
		pFnNextCerberusItem = (UFunction*) UObject::GObjObjects()->Data[ 47543 ];

	UBioSFHandler_MainMenu_execNextCerberusItem_Parms NextCerberusItem_Parms;

	this->ProcessEvent ( pFnNextCerberusItem, &NextCerberusItem_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.InitCerberus
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_MainMenu::InitCerberus ( )
{
	static UFunction* pFnInitCerberus = NULL;

	if ( ! pFnInitCerberus )
		pFnInitCerberus = (UFunction*) UObject::GObjObjects()->Data[ 47539 ];

	UBioSFHandler_MainMenu_execInitCerberus_Parms InitCerberus_Parms;

	this->ProcessEvent ( pFnInitCerberus, &InitCerberus_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.SetupMainMenu
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_MainMenu::SetupMainMenu ( )
{
	static UFunction* pFnSetupMainMenu = NULL;

	if ( ! pFnSetupMainMenu )
		pFnSetupMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 47532 ];

	UBioSFHandler_MainMenu_execSetupMainMenu_Parms SetupMainMenu_Parms;

	this->ProcessEvent ( pFnSetupMainMenu, &SetupMainMenu_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.NotifyLinkStatusChange
// [0x00020000] 
// Parameters infos:
// unsigned long                  bIsConnected                   ( CPF_Parm )

void UBioSFHandler_MainMenu::NotifyLinkStatusChange ( unsigned long bIsConnected )
{
	static UFunction* pFnNotifyLinkStatusChange = NULL;

	if ( ! pFnNotifyLinkStatusChange )
		pFnNotifyLinkStatusChange = (UFunction*) UObject::GObjObjects()->Data[ 47530 ];

	UBioSFHandler_MainMenu_execNotifyLinkStatusChange_Parms NotifyLinkStatusChange_Parms;
	NotifyLinkStatusChange_Parms.bIsConnected = bIsConnected;

	this->ProcessEvent ( pFnNotifyLinkStatusChange, &NotifyLinkStatusChange_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_MainMenu::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 47527 ];

	UBioSFHandler_MainMenu_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_MainMenu::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 47524 ];

	UBioSFHandler_MainMenu_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.SetEnabledAndVisible
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVal                           ( CPF_Parm )

void UBioSFHandler_MainMenu::SetEnabledAndVisible ( unsigned long bVal )
{
	static UFunction* pFnSetEnabledAndVisible = NULL;

	if ( ! pFnSetEnabledAndVisible )
		pFnSetEnabledAndVisible = (UFunction*) UObject::GObjObjects()->Data[ 47522 ];

	UBioSFHandler_MainMenu_execSetEnabledAndVisible_Parms SetEnabledAndVisible_Parms;
	SetEnabledAndVisible_Parms.bVal = bVal;

	this->ProcessEvent ( pFnSetEnabledAndVisible, &SetEnabledAndVisible_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.MoveToLoadGui
// [0x00020002] 
// Parameters infos:
// unsigned char                  LoadMode                       ( CPF_Parm )

void UBioSFHandler_MainMenu::MoveToLoadGui ( unsigned char LoadMode )
{
	static UFunction* pFnMoveToLoadGui = NULL;

	if ( ! pFnMoveToLoadGui )
		pFnMoveToLoadGui = (UFunction*) UObject::GObjObjects()->Data[ 47518 ];

	UBioSFHandler_MainMenu_execMoveToLoadGui_Parms MoveToLoadGui_Parms;
	MoveToLoadGui_Parms.LoadMode = LoadMode;

	this->ProcessEvent ( pFnMoveToLoadGui, &MoveToLoadGui_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.CheckLogin
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFHandler_MainMenu::CheckLogin ( )
{
	static UFunction* pFnCheckLogin = NULL;

	if ( ! pFnCheckLogin )
		pFnCheckLogin = (UFunction*) UObject::GObjObjects()->Data[ 47267 ];

	UBioSFHandler_MainMenu_execCheckLogin_Parms CheckLogin_Parms;

	this->ProcessEvent ( pFnCheckLogin, &CheckLogin_Parms, NULL );

	return CheckLogin_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_MainMenu.IsReadyForLegacyImport
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFHandler_MainMenu::IsReadyForLegacyImport ( )
{
	static UFunction* pFnIsReadyForLegacyImport = NULL;

	if ( ! pFnIsReadyForLegacyImport )
		pFnIsReadyForLegacyImport = (UFunction*) UObject::GObjObjects()->Data[ 47261 ];

	UBioSFHandler_MainMenu_execIsReadyForLegacyImport_Parms IsReadyForLegacyImport_Parms;

	this->ProcessEvent ( pFnIsReadyForLegacyImport, &IsReadyForLegacyImport_Parms, NULL );

	return IsReadyForLegacyImport_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_MainMenu.Callback_ImportME1Prompt
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void UBioSFHandler_MainMenu::Callback_ImportME1Prompt ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ImportME1Prompt = NULL;

	if ( ! pFnCallback_ImportME1Prompt )
		pFnCallback_ImportME1Prompt = (UFunction*) UObject::GObjObjects()->Data[ 47256 ];

	UBioSFHandler_MainMenu_execCallback_ImportME1Prompt_Parms Callback_ImportME1Prompt_Parms;
	Callback_ImportME1Prompt_Parms.bAPressed = bAPressed;
	Callback_ImportME1Prompt_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ImportME1Prompt, &Callback_ImportME1Prompt_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.Callback_NoLoginStart
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void UBioSFHandler_MainMenu::Callback_NoLoginStart ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_NoLoginStart = NULL;

	if ( ! pFnCallback_NoLoginStart )
		pFnCallback_NoLoginStart = (UFunction*) UObject::GObjObjects()->Data[ 47249 ];

	UBioSFHandler_MainMenu_execCallback_NoLoginStart_Parms Callback_NoLoginStart_Parms;
	Callback_NoLoginStart_Parms.bAPressed = bAPressed;
	Callback_NoLoginStart_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_NoLoginStart, &Callback_NoLoginStart_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.ExitConfirm
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_MainMenu::ExitConfirm ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnExitConfirm = NULL;

	if ( ! pFnExitConfirm )
		pFnExitConfirm = (UFunction*) UObject::GObjObjects()->Data[ 47246 ];

	UBioSFHandler_MainMenu_execExitConfirm_Parms ExitConfirm_Parms;
	ExitConfirm_Parms.bAPressed = bAPressed;
	ExitConfirm_Parms.nContext = nContext;

	this->ProcessEvent ( pFnExitConfirm, &ExitConfirm_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MainMenu.HandleEvent
// [0x00C20002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_MainMenu::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 47231 ];

	UBioSFHandler_MainMenu_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_MessageBox.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_MessageBox::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 47734 ];

	UBioSFHandler_MessageBox_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MessageBox.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_MessageBox::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 47733 ];

	UBioSFHandler_MessageBox_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MessageBox.DisplayHintMessage
// [0x00020002] 
// Parameters infos:
// int                            nIcon                          ( CPF_Parm )
// unsigned char                  ePosition                      ( CPF_Parm )

void UBioSFHandler_MessageBox::DisplayHintMessage ( int nIcon, unsigned char ePosition )
{
	static UFunction* pFnDisplayHintMessage = NULL;

	if ( ! pFnDisplayHintMessage )
		pFnDisplayHintMessage = (UFunction*) UObject::GObjObjects()->Data[ 47727 ];

	UBioSFHandler_MessageBox_execDisplayHintMessage_Parms DisplayHintMessage_Parms;
	DisplayHintMessage_Parms.nIcon = nIcon;
	DisplayHintMessage_Parms.ePosition = ePosition;

	this->ProcessEvent ( pFnDisplayHintMessage, &DisplayHintMessage_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MessageBox.HideMessageBox
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bSkipFade                      ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_MessageBox::HideMessageBox ( unsigned long bRemove, unsigned long bSkipFade )
{
	static UFunction* pFnHideMessageBox = NULL;

	if ( ! pFnHideMessageBox )
		pFnHideMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 45544 ];

	UBioSFHandler_MessageBox_execHideMessageBox_Parms HideMessageBox_Parms;
	HideMessageBox_Parms.bRemove = bRemove;
	HideMessageBox_Parms.bSkipFade = bSkipFade;

	pFnHideMessageBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideMessageBox, &HideMessageBox_Parms, NULL );

	pFnHideMessageBox->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_MessageBox.DisplayQuickMessageBoxEx
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FBioMessageBoxOptionalParams stParams                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void UBioSFHandler_MessageBox::DisplayQuickMessageBoxEx ( struct FString sMessage, struct FBioMessageBoxOptionalParams* stParams )
{
	static UFunction* pFnDisplayQuickMessageBoxEx = NULL;

	if ( ! pFnDisplayQuickMessageBoxEx )
		pFnDisplayQuickMessageBoxEx = (UFunction*) UObject::GObjObjects()->Data[ 47722 ];

	UBioSFHandler_MessageBox_execDisplayQuickMessageBoxEx_Parms DisplayQuickMessageBoxEx_Parms;
	memcpy ( &DisplayQuickMessageBoxEx_Parms.sMessage, &sMessage, 0xC );

	pFnDisplayQuickMessageBoxEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayQuickMessageBoxEx, &DisplayQuickMessageBoxEx_Parms, NULL );

	pFnDisplayQuickMessageBoxEx->FunctionFlags |= 0x400;

	if ( stParams )
		memcpy ( stParams, &DisplayQuickMessageBoxEx_Parms.stParams, 0x1C );
};

// Function SFXGame.BioSFHandler_MessageBox.DisplayQuickMessageBox
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FBioMessageBoxOptionalParams stParams                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void UBioSFHandler_MessageBox::DisplayQuickMessageBox ( struct FBioMessageBoxOptionalParams* stParams )
{
	static UFunction* pFnDisplayQuickMessageBox = NULL;

	if ( ! pFnDisplayQuickMessageBox )
		pFnDisplayQuickMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 47719 ];

	UBioSFHandler_MessageBox_execDisplayQuickMessageBox_Parms DisplayQuickMessageBox_Parms;

	pFnDisplayQuickMessageBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayQuickMessageBox, &DisplayQuickMessageBox_Parms, NULL );

	pFnDisplayQuickMessageBox->FunctionFlags |= 0x400;

	if ( stParams )
		memcpy ( stParams, &DisplayQuickMessageBox_Parms.stParams, 0x1C );
};

// Function SFXGame.BioSFHandler_MessageBox.DisplayMessageBoxEx
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FBioMessageBoxOptionalParams stParams                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void UBioSFHandler_MessageBox::DisplayMessageBoxEx ( struct FString sMessage, struct FBioMessageBoxOptionalParams* stParams )
{
	static UFunction* pFnDisplayMessageBoxEx = NULL;

	if ( ! pFnDisplayMessageBoxEx )
		pFnDisplayMessageBoxEx = (UFunction*) UObject::GObjObjects()->Data[ 47716 ];

	UBioSFHandler_MessageBox_execDisplayMessageBoxEx_Parms DisplayMessageBoxEx_Parms;
	memcpy ( &DisplayMessageBoxEx_Parms.sMessage, &sMessage, 0xC );

	pFnDisplayMessageBoxEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayMessageBoxEx, &DisplayMessageBoxEx_Parms, NULL );

	pFnDisplayMessageBoxEx->FunctionFlags |= 0x400;

	if ( stParams )
		memcpy ( stParams, &DisplayMessageBoxEx_Parms.stParams, 0x1C );
};

// Function SFXGame.BioSFHandler_MessageBox.DisplayMessageBox
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FBioMessageBoxOptionalParams stParams                       ( CPF_Const | CPF_Parm | CPF_OutParm )

void UBioSFHandler_MessageBox::DisplayMessageBox ( struct FBioMessageBoxOptionalParams* stParams )
{
	static UFunction* pFnDisplayMessageBox = NULL;

	if ( ! pFnDisplayMessageBox )
		pFnDisplayMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 42359 ];

	UBioSFHandler_MessageBox_execDisplayMessageBox_Parms DisplayMessageBox_Parms;

	pFnDisplayMessageBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayMessageBox, &DisplayMessageBox_Parms, NULL );

	pFnDisplayMessageBox->FunctionFlags |= 0x400;

	if ( stParams )
		memcpy ( stParams, &DisplayMessageBox_Parms.stParams, 0x1C );
};

// Function SFXGame.BioSFHandler_MessageBox.SetUpdateDelegate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FScriptDelegate         pDelegate                      ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_MessageBox::SetUpdateDelegate ( struct FScriptDelegate pDelegate )
{
	static UFunction* pFnSetUpdateDelegate = NULL;

	if ( ! pFnSetUpdateDelegate )
		pFnSetUpdateDelegate = (UFunction*) UObject::GObjObjects()->Data[ 45534 ];

	UBioSFHandler_MessageBox_execSetUpdateDelegate_Parms SetUpdateDelegate_Parms;
	memcpy ( &SetUpdateDelegate_Parms.pDelegate, &pDelegate, 0xC );

	pFnSetUpdateDelegate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetUpdateDelegate, &SetUpdateDelegate_Parms, NULL );

	pFnSetUpdateDelegate->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_MessageBox.SetInputDelegate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FScriptDelegate         pDelegate                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            nContext                       ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_MessageBox::SetInputDelegate ( struct FScriptDelegate pDelegate, int nContext )
{
	static UFunction* pFnSetInputDelegate = NULL;

	if ( ! pFnSetInputDelegate )
		pFnSetInputDelegate = (UFunction*) UObject::GObjObjects()->Data[ 45533 ];

	UBioSFHandler_MessageBox_execSetInputDelegate_Parms SetInputDelegate_Parms;
	memcpy ( &SetInputDelegate_Parms.pDelegate, &pDelegate, 0xC );
	SetInputDelegate_Parms.nContext = nContext;

	pFnSetInputDelegate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetInputDelegate, &SetInputDelegate_Parms, NULL );

	pFnSetInputDelegate->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_MessageBox.UpdateCallbackEx
// [0x00120000] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )
// class UObject*                 oMsgBox                        ( CPF_Parm )

void UBioSFHandler_MessageBox::UpdateCallbackEx ( float fDeltaT, class UObject* oMsgBox )
{
	static UFunction* pFnUpdateCallbackEx = NULL;

	if ( ! pFnUpdateCallbackEx )
		pFnUpdateCallbackEx = (UFunction*) UObject::GObjObjects()->Data[ 47690 ];

	UBioSFHandler_MessageBox_execUpdateCallbackEx_Parms UpdateCallbackEx_Parms;
	UpdateCallbackEx_Parms.fDeltaT = fDeltaT;
	UpdateCallbackEx_Parms.oMsgBox = oMsgBox;

	this->ProcessEvent ( pFnUpdateCallbackEx, &UpdateCallbackEx_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MessageBox.UpdateCallback
// [0x00120000] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )
// class UBioSFHandler_MessageBox* oMsgBox                        ( CPF_Parm )

void UBioSFHandler_MessageBox::UpdateCallback ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox )
{
	static UFunction* pFnUpdateCallback = NULL;

	if ( ! pFnUpdateCallback )
		pFnUpdateCallback = (UFunction*) UObject::GObjObjects()->Data[ 47692 ];

	UBioSFHandler_MessageBox_execUpdateCallback_Parms UpdateCallback_Parms;
	UpdateCallback_Parms.fDeltaT = fDeltaT;
	UpdateCallback_Parms.oMsgBox = oMsgBox;

	this->ProcessEvent ( pFnUpdateCallback, &UpdateCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_MessageBox.InputCallback
// [0x00120000] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_MessageBox::InputCallback ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnInputCallback = NULL;

	if ( ! pFnInputCallback )
		pFnInputCallback = (UFunction*) UObject::GObjObjects()->Data[ 47694 ];

	UBioSFHandler_MessageBox_execInputCallback_Parms InputCallback_Parms;
	InputCallback_Parms.bAPressed = bAPressed;
	InputCallback_Parms.nContext = nContext;

	this->ProcessEvent ( pFnInputCallback, &InputCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.UpdateLookAtTarget
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_NewCharacter::UpdateLookAtTarget ( )
{
	static UFunction* pFnUpdateLookAtTarget = NULL;

	if ( ! pFnUpdateLookAtTarget )
		pFnUpdateLookAtTarget = (UFunction*) UObject::GObjObjects()->Data[ 48082 ];

	UBioSFHandler_NewCharacter_execUpdateLookAtTarget_Parms UpdateLookAtTarget_Parms;

	this->ProcessEvent ( pFnUpdateLookAtTarget, &UpdateLookAtTarget_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.Callback_NoDevice
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void UBioSFHandler_NewCharacter::Callback_NoDevice ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_NoDevice = NULL;

	if ( ! pFnCallback_NoDevice )
		pFnCallback_NoDevice = (UFunction*) UObject::GObjObjects()->Data[ 48077 ];

	UBioSFHandler_NewCharacter_execCallback_NoDevice_Parms Callback_NoDevice_Parms;
	Callback_NoDevice_Parms.bAPressed = bAPressed;
	Callback_NoDevice_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_NoDevice, &Callback_NoDevice_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.OnDeviceSelectionComplete
// [0x00820002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void UBioSFHandler_NewCharacter::OnDeviceSelectionComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnOnDeviceSelectionComplete = NULL;

	if ( ! pFnOnDeviceSelectionComplete )
		pFnOnDeviceSelectionComplete = (UFunction*) UObject::GObjObjects()->Data[ 48065 ];

	UBioSFHandler_NewCharacter_execOnDeviceSelectionComplete_Parms OnDeviceSelectionComplete_Parms;
	OnDeviceSelectionComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnOnDeviceSelectionComplete, &OnDeviceSelectionComplete_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.ChooseStorageDevice
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_NewCharacter::ChooseStorageDevice ( )
{
	static UFunction* pFnChooseStorageDevice = NULL;

	if ( ! pFnChooseStorageDevice )
		pFnChooseStorageDevice = (UFunction*) UObject::GObjObjects()->Data[ 48060 ];

	UBioSFHandler_NewCharacter_execChooseStorageDevice_Parms ChooseStorageDevice_Parms;

	this->ProcessEvent ( pFnChooseStorageDevice, &ChooseStorageDevice_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.ProcessExternalStates
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// class ABioWorldInfo*           BWI                            ( CPF_Parm )

void UBioSFHandler_NewCharacter::eventProcessExternalStates ( class ABioWorldInfo* BWI )
{
	static UFunction* pFnProcessExternalStates = NULL;

	if ( ! pFnProcessExternalStates )
		pFnProcessExternalStates = (UFunction*) UObject::GObjObjects()->Data[ 48054 ];

	UBioSFHandler_NewCharacter_eventProcessExternalStates_Parms ProcessExternalStates_Parms;
	ProcessExternalStates_Parms.BWI = BWI;

	this->ProcessEvent ( pFnProcessExternalStates, &ProcessExternalStates_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.TriggerClassOverlay
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UBioSFHandler_NewCharacter::eventTriggerClassOverlay ( )
{
	static UFunction* pFnTriggerClassOverlay = NULL;

	if ( ! pFnTriggerClassOverlay )
		pFnTriggerClassOverlay = (UFunction*) UObject::GObjObjects()->Data[ 48053 ];

	UBioSFHandler_NewCharacter_eventTriggerClassOverlay_Parms TriggerClassOverlay_Parms;

	this->ProcessEvent ( pFnTriggerClassOverlay, &TriggerClassOverlay_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.SelectPreviousPregeneratedHead
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_NewCharacter::SelectPreviousPregeneratedHead ( )
{
	static UFunction* pFnSelectPreviousPregeneratedHead = NULL;

	if ( ! pFnSelectPreviousPregeneratedHead )
		pFnSelectPreviousPregeneratedHead = (UFunction*) UObject::GObjObjects()->Data[ 48051 ];

	UBioSFHandler_NewCharacter_execSelectPreviousPregeneratedHead_Parms SelectPreviousPregeneratedHead_Parms;

	this->ProcessEvent ( pFnSelectPreviousPregeneratedHead, &SelectPreviousPregeneratedHead_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.SelectNextPregeneratedHead
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_NewCharacter::SelectNextPregeneratedHead ( )
{
	static UFunction* pFnSelectNextPregeneratedHead = NULL;

	if ( ! pFnSelectNextPregeneratedHead )
		pFnSelectNextPregeneratedHead = (UFunction*) UObject::GObjObjects()->Data[ 47884 ];

	UBioSFHandler_NewCharacter_execSelectNextPregeneratedHead_Parms SelectNextPregeneratedHead_Parms;

	this->ProcessEvent ( pFnSelectNextPregeneratedHead, &SelectNextPregeneratedHead_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.ConfirmButtonPressed
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_NewCharacter::ConfirmButtonPressed ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnConfirmButtonPressed = NULL;

	if ( ! pFnConfirmButtonPressed )
		pFnConfirmButtonPressed = (UFunction*) UObject::GObjObjects()->Data[ 48044 ];

	UBioSFHandler_NewCharacter_execConfirmButtonPressed_Parms ConfirmButtonPressed_Parms;
	ConfirmButtonPressed_Parms.bAPressed = bAPressed;
	ConfirmButtonPressed_Parms.nContext = nContext;

	this->ProcessEvent ( pFnConfirmButtonPressed, &ConfirmButtonPressed_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.ConfirmComplete
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_NewCharacter::ConfirmComplete ( )
{
	static UFunction* pFnConfirmComplete = NULL;

	if ( ! pFnConfirmComplete )
		pFnConfirmComplete = (UFunction*) UObject::GObjObjects()->Data[ 47889 ];

	UBioSFHandler_NewCharacter_execConfirmComplete_Parms ConfirmComplete_Parms;

	this->ProcessEvent ( pFnConfirmComplete, &ConfirmComplete_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.ClearModels
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_NewCharacter::ClearModels ( )
{
	static UFunction* pFnClearModels = NULL;

	if ( ! pFnClearModels )
		pFnClearModels = (UFunction*) UObject::GObjObjects()->Data[ 48040 ];

	UBioSFHandler_NewCharacter_execClearModels_Parms ClearModels_Parms;

	this->ProcessEvent ( pFnClearModels, &ClearModels_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_NewCharacter::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 48039 ];

	UBioSFHandler_NewCharacter_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.OnPanelAdded
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_NewCharacter::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48035 ];

	UBioSFHandler_NewCharacter_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.PopulateCustomFaceList
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_NewCharacter::PopulateCustomFaceList ( )
{
	static UFunction* pFnPopulateCustomFaceList = NULL;

	if ( ! pFnPopulateCustomFaceList )
		pFnPopulateCustomFaceList = (UFunction*) UObject::GObjObjects()->Data[ 47894 ];

	UBioSFHandler_NewCharacter_execPopulateCustomFaceList_Parms PopulateCustomFaceList_Parms;

	this->ProcessEvent ( pFnPopulateCustomFaceList, &PopulateCustomFaceList_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.HandleSliderChange
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nCategory                      ( CPF_Parm )
// int                            nSlider                        ( CPF_Parm )
// int                            nValue                         ( CPF_Parm )

void UBioSFHandler_NewCharacter::HandleSliderChange ( int nCategory, int nSlider, int nValue )
{
	static UFunction* pFnHandleSliderChange = NULL;

	if ( ! pFnHandleSliderChange )
		pFnHandleSliderChange = (UFunction*) UObject::GObjObjects()->Data[ 47882 ];

	UBioSFHandler_NewCharacter_execHandleSliderChange_Parms HandleSliderChange_Parms;
	HandleSliderChange_Parms.nCategory = nCategory;
	HandleSliderChange_Parms.nSlider = nSlider;
	HandleSliderChange_Parms.nValue = nValue;

	this->ProcessEvent ( pFnHandleSliderChange, &HandleSliderChange_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.DoCategoryReset
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            nCategory                      ( CPF_Parm )

void UBioSFHandler_NewCharacter::DoCategoryReset ( int nCategory )
{
	static UFunction* pFnDoCategoryReset = NULL;

	if ( ! pFnDoCategoryReset )
		pFnDoCategoryReset = (UFunction*) UObject::GObjObjects()->Data[ 47885 ];

	UBioSFHandler_NewCharacter_execDoCategoryReset_Parms DoCategoryReset_Parms;
	DoCategoryReset_Parms.nCategory = nCategory;

	this->ProcessEvent ( pFnDoCategoryReset, &DoCategoryReset_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.SetSliderPositions
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_NewCharacter::SetSliderPositions ( )
{
	static UFunction* pFnSetSliderPositions = NULL;

	if ( ! pFnSetSliderPositions )
		pFnSetSliderPositions = (UFunction*) UObject::GObjObjects()->Data[ 47895 ];

	UBioSFHandler_NewCharacter_execSetSliderPositions_Parms SetSliderPositions_Parms;

	this->ProcessEvent ( pFnSetSliderPositions, &SetSliderPositions_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.SetCustomModel
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_NewCharacter::SetCustomModel ( )
{
	static UFunction* pFnSetCustomModel = NULL;

	if ( ! pFnSetCustomModel )
		pFnSetCustomModel = (UFunction*) UObject::GObjObjects()->Data[ 47893 ];

	UBioSFHandler_NewCharacter_execSetCustomModel_Parms SetCustomModel_Parms;

	this->ProcessEvent ( pFnSetCustomModel, &SetCustomModel_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.Update3DModel
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  nTemplate                      ( CPF_Parm )

void UBioSFHandler_NewCharacter::Update3DModel ( unsigned char nTemplate )
{
	static UFunction* pFnUpdate3DModel = NULL;

	if ( ! pFnUpdate3DModel )
		pFnUpdate3DModel = (UFunction*) UObject::GObjObjects()->Data[ 48008 ];

	UBioSFHandler_NewCharacter_execUpdate3DModel_Parms Update3DModel_Parms;
	Update3DModel_Parms.nTemplate = nTemplate;

	this->ProcessEvent ( pFnUpdate3DModel, &Update3DModel_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.Update3DModelState
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  nTemplate                      ( CPF_Parm )

void UBioSFHandler_NewCharacter::Update3DModelState ( unsigned char nTemplate )
{
	static UFunction* pFnUpdate3DModelState = NULL;

	if ( ! pFnUpdate3DModelState )
		pFnUpdate3DModelState = (UFunction*) UObject::GObjObjects()->Data[ 47883 ];

	UBioSFHandler_NewCharacter_execUpdate3DModelState_Parms Update3DModelState_Parms;
	Update3DModelState_Parms.nTemplate = nTemplate;

	this->ProcessEvent ( pFnUpdate3DModelState, &Update3DModelState_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.StartNewGameEx
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UBioSFHandler_NewCharacter::eventStartNewGameEx ( )
{
	static UFunction* pFnStartNewGameEx = NULL;

	if ( ! pFnStartNewGameEx )
		pFnStartNewGameEx = (UFunction*) UObject::GObjObjects()->Data[ 48005 ];

	UBioSFHandler_NewCharacter_eventStartNewGameEx_Parms StartNewGameEx_Parms;

	this->ProcessEvent ( pFnStartNewGameEx, &StartNewGameEx_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.StartNewGame
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_NewCharacter::StartNewGame ( )
{
	static UFunction* pFnStartNewGame = NULL;

	if ( ! pFnStartNewGame )
		pFnStartNewGame = (UFunction*) UObject::GObjObjects()->Data[ 47887 ];

	UBioSFHandler_NewCharacter_execStartNewGame_Parms StartNewGame_Parms;

	this->ProcessEvent ( pFnStartNewGame, &StartNewGame_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.RefitBonusTalent
// [0x00020002] 
// Parameters infos:
// struct FString                 BonusTalent                    ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_NewCharacter::RefitBonusTalent ( struct FString BonusTalent )
{
	static UFunction* pFnRefitBonusTalent = NULL;

	if ( ! pFnRefitBonusTalent )
		pFnRefitBonusTalent = (UFunction*) UObject::GObjObjects()->Data[ 47986 ];

	UBioSFHandler_NewCharacter_execRefitBonusTalent_Parms RefitBonusTalent_Parms;
	memcpy ( &RefitBonusTalent_Parms.BonusTalent, &BonusTalent, 0xC );

	this->ProcessEvent ( pFnRefitBonusTalent, &RefitBonusTalent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.GetAllUnlockedBonusTalentInfo
// [0x00C20003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FBonusTalentData > aUnlockedBonusTalentInfo       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_NewCharacter::GetAllUnlockedBonusTalentInfo ( TArray< struct FBonusTalentData >* aUnlockedBonusTalentInfo )
{
	static UFunction* pFnGetAllUnlockedBonusTalentInfo = NULL;

	if ( ! pFnGetAllUnlockedBonusTalentInfo )
		pFnGetAllUnlockedBonusTalentInfo = (UFunction*) UObject::GObjObjects()->Data[ 47980 ];

	UBioSFHandler_NewCharacter_execGetAllUnlockedBonusTalentInfo_Parms GetAllUnlockedBonusTalentInfo_Parms;

	this->ProcessEvent ( pFnGetAllUnlockedBonusTalentInfo, &GetAllUnlockedBonusTalentInfo_Parms, NULL );

	if ( aUnlockedBonusTalentInfo )
		memcpy ( aUnlockedBonusTalentInfo, &GetAllUnlockedBonusTalentInfo_Parms.aUnlockedBonusTalentInfo, 0xC );
};

// Function SFXGame.BioSFHandler_NewCharacter.UpdateBonusTalentList
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_NewCharacter::UpdateBonusTalentList ( )
{
	static UFunction* pFnUpdateBonusTalentList = NULL;

	if ( ! pFnUpdateBonusTalentList )
		pFnUpdateBonusTalentList = (UFunction*) UObject::GObjObjects()->Data[ 47890 ];

	UBioSFHandler_NewCharacter_execUpdateBonusTalentList_Parms UpdateBonusTalentList_Parms;

	this->ProcessEvent ( pFnUpdateBonusTalentList, &UpdateBonusTalentList_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.SetPlayerCharacter
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FString >       PlayerSettings                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_NewCharacter::SetPlayerCharacter ( TArray< struct FString >* PlayerSettings )
{
	static UFunction* pFnSetPlayerCharacter = NULL;

	if ( ! pFnSetPlayerCharacter )
		pFnSetPlayerCharacter = (UFunction*) UObject::GObjObjects()->Data[ 47888 ];

	UBioSFHandler_NewCharacter_execSetPlayerCharacter_Parms SetPlayerCharacter_Parms;

	this->ProcessEvent ( pFnSetPlayerCharacter, &SetPlayerCharacter_Parms, NULL );

	if ( PlayerSettings )
		memcpy ( PlayerSettings, &SetPlayerCharacter_Parms.PlayerSettings, 0xC );
};

// Function SFXGame.BioSFHandler_NewCharacter.SetupIconicCharacter
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FString >       lstSettings                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_NewCharacter::SetupIconicCharacter ( TArray< struct FString >* lstSettings )
{
	static UFunction* pFnSetupIconicCharacter = NULL;

	if ( ! pFnSetupIconicCharacter )
		pFnSetupIconicCharacter = (UFunction*) UObject::GObjObjects()->Data[ 47886 ];

	UBioSFHandler_NewCharacter_execSetupIconicCharacter_Parms SetupIconicCharacter_Parms;

	this->ProcessEvent ( pFnSetupIconicCharacter, &SetupIconicCharacter_Parms, NULL );

	if ( lstSettings )
		memcpy ( lstSettings, &SetupIconicCharacter_Parms.lstSettings, 0xC );
};

// Function SFXGame.BioSFHandler_NewCharacter.UpdateCustomClassChoice
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  PlayerClass                    ( CPF_Parm )
// int                            Row                            ( CPF_Parm )

void UBioSFHandler_NewCharacter::UpdateCustomClassChoice ( class UClass* PlayerClass, int Row )
{
	static UFunction* pFnUpdateCustomClassChoice = NULL;

	if ( ! pFnUpdateCustomClassChoice )
		pFnUpdateCustomClassChoice = (UFunction*) UObject::GObjObjects()->Data[ 47958 ];

	UBioSFHandler_NewCharacter_execUpdateCustomClassChoice_Parms UpdateCustomClassChoice_Parms;
	UpdateCustomClassChoice_Parms.PlayerClass = PlayerClass;
	UpdateCustomClassChoice_Parms.Row = Row;

	this->ProcessEvent ( pFnUpdateCustomClassChoice, &UpdateCustomClassChoice_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.UpdateCustomClassList
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_NewCharacter::UpdateCustomClassList ( )
{
	static UFunction* pFnUpdateCustomClassList = NULL;

	if ( ! pFnUpdateCustomClassList )
		pFnUpdateCustomClassList = (UFunction*) UObject::GObjObjects()->Data[ 47953 ];

	UBioSFHandler_NewCharacter_execUpdateCustomClassList_Parms UpdateCustomClassList_Parms;

	this->ProcessEvent ( pFnUpdateCustomClassList, &UpdateCustomClassList_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.UpdatePreviousCharacterList
// [0x00020001] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_NewCharacter::UpdatePreviousCharacterList ( )
{
	static UFunction* pFnUpdatePreviousCharacterList = NULL;

	if ( ! pFnUpdatePreviousCharacterList )
		pFnUpdatePreviousCharacterList = (UFunction*) UObject::GObjObjects()->Data[ 47952 ];

	UBioSFHandler_NewCharacter_execUpdatePreviousCharacterList_Parms UpdatePreviousCharacterList_Parms;

	this->ProcessEvent ( pFnUpdatePreviousCharacterList, &UpdatePreviousCharacterList_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.SetupSummary
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_NewCharacter::SetupSummary ( )
{
	static UFunction* pFnSetupSummary = NULL;

	if ( ! pFnSetupSummary )
		pFnSetupSummary = (UFunction*) UObject::GObjObjects()->Data[ 47892 ];

	UBioSFHandler_NewCharacter_execSetupSummary_Parms SetupSummary_Parms;

	this->ProcessEvent ( pFnSetupSummary, &SetupSummary_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.SetCustomName
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FString                 sMaleName                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sFemaleName                    ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_NewCharacter::SetCustomName ( struct FString sMaleName, struct FString sFemaleName )
{
	static UFunction* pFnSetCustomName = NULL;

	if ( ! pFnSetCustomName )
		pFnSetCustomName = (UFunction*) UObject::GObjObjects()->Data[ 47891 ];

	UBioSFHandler_NewCharacter_execSetCustomName_Parms SetCustomName_Parms;
	memcpy ( &SetCustomName_Parms.sMaleName, &sMaleName, 0xC );
	memcpy ( &SetCustomName_Parms.sFemaleName, &sFemaleName, 0xC );

	this->ProcessEvent ( pFnSetCustomName, &SetCustomName_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.UpdateCode
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_NewCharacter::UpdateCode ( )
{
	static UFunction* pFnUpdateCode = NULL;

	if ( ! pFnUpdateCode )
		pFnUpdateCode = (UFunction*) UObject::GObjObjects()->Data[ 47933 ];

	UBioSFHandler_NewCharacter_execUpdateCode_Parms UpdateCode_Parms;

	this->ProcessEvent ( pFnUpdateCode, &UpdateCode_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.ApplyNewCode
// [0x00020002] 
// Parameters infos:
// struct FString                 sInputCode                     ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_NewCharacter::ApplyNewCode ( struct FString sInputCode )
{
	static UFunction* pFnApplyNewCode = NULL;

	if ( ! pFnApplyNewCode )
		pFnApplyNewCode = (UFunction*) UObject::GObjObjects()->Data[ 47924 ];

	UBioSFHandler_NewCharacter_execApplyNewCode_Parms ApplyNewCode_Parms;
	memcpy ( &ApplyNewCode_Parms.sInputCode, &sInputCode, 0xC );

	this->ProcessEvent ( pFnApplyNewCode, &ApplyNewCode_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.Update
// [0x00020002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFHandler_NewCharacter::Update ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 47919 ];

	UBioSFHandler_NewCharacter_execUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.ResetLookAt
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_NewCharacter::ResetLookAt ( )
{
	static UFunction* pFnResetLookAt = NULL;

	if ( ! pFnResetLookAt )
		pFnResetLookAt = (UFunction*) UObject::GObjObjects()->Data[ 47918 ];

	UBioSFHandler_NewCharacter_execResetLookAt_Parms ResetLookAt_Parms;

	this->ProcessEvent ( pFnResetLookAt, &ResetLookAt_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.HandleLookAtLeftRight
// [0x00020002] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void UBioSFHandler_NewCharacter::HandleLookAtLeftRight ( float fValue )
{
	static UFunction* pFnHandleLookAtLeftRight = NULL;

	if ( ! pFnHandleLookAtLeftRight )
		pFnHandleLookAtLeftRight = (UFunction*) UObject::GObjObjects()->Data[ 47915 ];

	UBioSFHandler_NewCharacter_execHandleLookAtLeftRight_Parms HandleLookAtLeftRight_Parms;
	HandleLookAtLeftRight_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleLookAtLeftRight, &HandleLookAtLeftRight_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.HandleLookAtUpDown
// [0x00020002] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void UBioSFHandler_NewCharacter::HandleLookAtUpDown ( float fValue )
{
	static UFunction* pFnHandleLookAtUpDown = NULL;

	if ( ! pFnHandleLookAtUpDown )
		pFnHandleLookAtUpDown = (UFunction*) UObject::GObjObjects()->Data[ 47912 ];

	UBioSFHandler_NewCharacter_execHandleLookAtUpDown_Parms HandleLookAtUpDown_Parms;
	HandleLookAtUpDown_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleLookAtUpDown, &HandleLookAtUpDown_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.HandleRotate
// [0x00020002] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void UBioSFHandler_NewCharacter::HandleRotate ( float fValue )
{
	static UFunction* pFnHandleRotate = NULL;

	if ( ! pFnHandleRotate )
		pFnHandleRotate = (UFunction*) UObject::GObjObjects()->Data[ 47910 ];

	UBioSFHandler_NewCharacter_execHandleRotate_Parms HandleRotate_Parms;
	HandleRotate_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleRotate, &HandleRotate_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.ScrollText
// [0x00820002] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void UBioSFHandler_NewCharacter::ScrollText ( float fValue )
{
	static UFunction* pFnScrollText = NULL;

	if ( ! pFnScrollText )
		pFnScrollText = (UFunction*) UObject::GObjObjects()->Data[ 47905 ];

	UBioSFHandler_NewCharacter_execScrollText_Parms ScrollText_Parms;
	ScrollText_Parms.fValue = fValue;

	this->ProcessEvent ( pFnScrollText, &ScrollText_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_NewCharacter::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 47902 ];

	UBioSFHandler_NewCharacter_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.SetUIPawnCasual
// [0x00020002] 
// Parameters infos:
// unsigned long                  bCasual                        ( CPF_Parm )

void UBioSFHandler_NewCharacter::SetUIPawnCasual ( unsigned long bCasual )
{
	static UFunction* pFnSetUIPawnCasual = NULL;

	if ( ! pFnSetUIPawnCasual )
		pFnSetUIPawnCasual = (UFunction*) UObject::GObjObjects()->Data[ 47896 ];

	UBioSFHandler_NewCharacter_execSetUIPawnCasual_Parms SetUIPawnCasual_Parms;
	SetUIPawnCasual_Parms.bCasual = bCasual;

	this->ProcessEvent ( pFnSetUIPawnCasual, &SetUIPawnCasual_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_NewCharacter::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 47875 ];

	UBioSFHandler_NewCharacter_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_NewCharacter.SetBackgroundMaterial
// [0x00020002] 
// Parameters infos:
// class UMaterialInterface*      Material                       ( CPF_Parm )

void UBioSFHandler_NewCharacter::SetBackgroundMaterial ( class UMaterialInterface* Material )
{
	static UFunction* pFnSetBackgroundMaterial = NULL;

	if ( ! pFnSetBackgroundMaterial )
		pFnSetBackgroundMaterial = (UFunction*) UObject::GObjObjects()->Data[ 47872 ];

	UBioSFHandler_NewCharacter_execSetBackgroundMaterial_Parms SetBackgroundMaterial_Parms;
	SetBackgroundMaterial_Parms.Material = Material;

	this->ProcessEvent ( pFnSetBackgroundMaterial, &SetBackgroundMaterial_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.SetSchematicResources
// [0x00020002] 
// Parameters infos:
// class UBioVFXTemplate*         in_SchematicEffectTemplate     ( CPF_Parm )
// class UAnimSet*                in_SchematicAnimSet            ( CPF_Parm )

void UBioSFHandler_NewCharacter::SetSchematicResources ( class UBioVFXTemplate* in_SchematicEffectTemplate, class UAnimSet* in_SchematicAnimSet )
{
	static UFunction* pFnSetSchematicResources = NULL;

	if ( ! pFnSetSchematicResources )
		pFnSetSchematicResources = (UFunction*) UObject::GObjObjects()->Data[ 47868 ];

	UBioSFHandler_NewCharacter_execSetSchematicResources_Parms SetSchematicResources_Parms;
	SetSchematicResources_Parms.in_SchematicEffectTemplate = in_SchematicEffectTemplate;
	SetSchematicResources_Parms.in_SchematicAnimSet = in_SchematicAnimSet;

	this->ProcessEvent ( pFnSetSchematicResources, &SetSchematicResources_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.SetClassVFXTemplates
// [0x00020002] 
// Parameters infos:
// class UBioVFXTemplate*         FullBioticEffectTemplate       ( CPF_Parm )
// class UBioVFXTemplate*         HalfBioticEffectTemplate       ( CPF_Parm )
// class UBioVFXTemplate*         TechToolEffectTemplate         ( CPF_Parm )

void UBioSFHandler_NewCharacter::SetClassVFXTemplates ( class UBioVFXTemplate* FullBioticEffectTemplate, class UBioVFXTemplate* HalfBioticEffectTemplate, class UBioVFXTemplate* TechToolEffectTemplate )
{
	static UFunction* pFnSetClassVFXTemplates = NULL;

	if ( ! pFnSetClassVFXTemplates )
		pFnSetClassVFXTemplates = (UFunction*) UObject::GObjObjects()->Data[ 47860 ];

	UBioSFHandler_NewCharacter_execSetClassVFXTemplates_Parms SetClassVFXTemplates_Parms;
	SetClassVFXTemplates_Parms.FullBioticEffectTemplate = FullBioticEffectTemplate;
	SetClassVFXTemplates_Parms.HalfBioticEffectTemplate = HalfBioticEffectTemplate;
	SetClassVFXTemplates_Parms.TechToolEffectTemplate = TechToolEffectTemplate;

	this->ProcessEvent ( pFnSetClassVFXTemplates, &SetClassVFXTemplates_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.AddKismetNamedObject
// [0x00020002] 
// Parameters infos:
// struct FName                   KismetVariableName             ( CPF_Parm )
// class UObject*                 ObjectValue                    ( CPF_Parm )

void UBioSFHandler_NewCharacter::AddKismetNamedObject ( struct FName KismetVariableName, class UObject* ObjectValue )
{
	static UFunction* pFnAddKismetNamedObject = NULL;

	if ( ! pFnAddKismetNamedObject )
		pFnAddKismetNamedObject = (UFunction*) UObject::GObjObjects()->Data[ 47856 ];

	UBioSFHandler_NewCharacter_execAddKismetNamedObject_Parms AddKismetNamedObject_Parms;
	memcpy ( &AddKismetNamedObject_Parms.KismetVariableName, &KismetVariableName, 0x8 );
	AddKismetNamedObject_Parms.ObjectValue = ObjectValue;

	this->ProcessEvent ( pFnAddKismetNamedObject, &AddKismetNamedObject_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.SetMaleSelected
// [0x00020002] 
// Parameters infos:
// unsigned long                  bSelected                      ( CPF_Parm )

void UBioSFHandler_NewCharacter::SetMaleSelected ( unsigned long bSelected )
{
	static UFunction* pFnSetMaleSelected = NULL;

	if ( ! pFnSetMaleSelected )
		pFnSetMaleSelected = (UFunction*) UObject::GObjObjects()->Data[ 47853 ];

	UBioSFHandler_NewCharacter_execSetMaleSelected_Parms SetMaleSelected_Parms;
	SetMaleSelected_Parms.bSelected = bSelected;

	this->ProcessEvent ( pFnSetMaleSelected, &SetMaleSelected_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.GetCharacterClassByName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmClass                        ( CPF_Parm )

class UClass* UBioSFHandler_NewCharacter::eventGetCharacterClassByName ( struct FName nmClass )
{
	static UFunction* pFnGetCharacterClassByName = NULL;

	if ( ! pFnGetCharacterClassByName )
		pFnGetCharacterClassByName = (UFunction*) UObject::GObjObjects()->Data[ 47847 ];

	UBioSFHandler_NewCharacter_eventGetCharacterClassByName_Parms GetCharacterClassByName_Parms;
	memcpy ( &GetCharacterClassByName_Parms.nmClass, &nmClass, 0x8 );

	this->ProcessEvent ( pFnGetCharacterClassByName, &GetCharacterClassByName_Parms, NULL );

	return GetCharacterClassByName_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_NewCharacter.ClearEffects
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_NewCharacter::ClearEffects ( )
{
	static UFunction* pFnClearEffects = NULL;

	if ( ! pFnClearEffects )
		pFnClearEffects = (UFunction*) UObject::GObjObjects()->Data[ 47846 ];

	UBioSFHandler_NewCharacter_execClearEffects_Parms ClearEffects_Parms;

	pFnClearEffects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearEffects, &ClearEffects_Parms, NULL );

	pFnClearEffects->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_NewCharacter.Update3DModelByClass
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   nmClass                        ( CPF_Parm )
// class ABioPawn*                pTemplate                      ( CPF_Parm )
// unsigned char                  nTemplate                      ( CPF_Parm )
// unsigned long                  bUpdate                        ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bAttachVFXandUpdatePose        ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_NewCharacter::Update3DModelByClass ( struct FName nmClass, class ABioPawn* pTemplate, unsigned char nTemplate, unsigned long bUpdate, unsigned long bForce, unsigned long bAttachVFXandUpdatePose )
{
	static UFunction* pFnUpdate3DModelByClass = NULL;

	if ( ! pFnUpdate3DModelByClass )
		pFnUpdate3DModelByClass = (UFunction*) UObject::GObjObjects()->Data[ 47839 ];

	UBioSFHandler_NewCharacter_execUpdate3DModelByClass_Parms Update3DModelByClass_Parms;
	memcpy ( &Update3DModelByClass_Parms.nmClass, &nmClass, 0x8 );
	Update3DModelByClass_Parms.pTemplate = pTemplate;
	Update3DModelByClass_Parms.nTemplate = nTemplate;
	Update3DModelByClass_Parms.bUpdate = bUpdate;
	Update3DModelByClass_Parms.bForce = bForce;
	Update3DModelByClass_Parms.bAttachVFXandUpdatePose = bAttachVFXandUpdatePose;

	pFnUpdate3DModelByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdate3DModelByClass, &Update3DModelByClass_Parms, NULL );

	pFnUpdate3DModelByClass->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_NewCharacter.Setup3DModel
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_NewCharacter::Setup3DModel ( )
{
	static UFunction* pFnSetup3DModel = NULL;

	if ( ! pFnSetup3DModel )
		pFnSetup3DModel = (UFunction*) UObject::GObjObjects()->Data[ 47838 ];

	UBioSFHandler_NewCharacter_execSetup3DModel_Parms Setup3DModel_Parms;

	pFnSetup3DModel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetup3DModel, &Setup3DModel_Parms, NULL );

	pFnSetup3DModel->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_NewCharacter.SetOnCloseCallback
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         fn_OnCloseDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_NewCharacter::SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate )
{
	static UFunction* pFnSetOnCloseCallback = NULL;

	if ( ! pFnSetOnCloseCallback )
		pFnSetOnCloseCallback = (UFunction*) UObject::GObjObjects()->Data[ 47836 ];

	UBioSFHandler_NewCharacter_execSetOnCloseCallback_Parms SetOnCloseCallback_Parms;
	memcpy ( &SetOnCloseCallback_Parms.fn_OnCloseDelegate, &fn_OnCloseDelegate, 0xC );

	this->ProcessEvent ( pFnSetOnCloseCallback, &SetOnCloseCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_NewCharacter.OnCloseCallback
// [0x00120000] 
// Parameters infos:

void UBioSFHandler_NewCharacter::OnCloseCallback ( )
{
	static UFunction* pFnOnCloseCallback = NULL;

	if ( ! pFnOnCloseCallback )
		pFnOnCloseCallback = (UFunction*) UObject::GObjObjects()->Data[ 47775 ];

	UBioSFHandler_NewCharacter_execOnCloseCallback_Parms OnCloseCallback_Parms;

	this->ProcessEvent ( pFnOnCloseCallback, &OnCloseCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_Options::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48368 ];

	UBioSFHandler_Options_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.CloseGui
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_Options::CloseGui ( )
{
	static UFunction* pFnCloseGui = NULL;

	if ( ! pFnCloseGui )
		pFnCloseGui = (UFunction*) UObject::GObjObjects()->Data[ 48321 ];

	UBioSFHandler_Options_execCloseGui_Parms CloseGui_Parms;

	this->ProcessEvent ( pFnCloseGui, &CloseGui_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.UpdateAudioVolumeSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXProfileSettings*     ReadFrom                       ( CPF_Parm )

void UBioSFHandler_Options::UpdateAudioVolumeSettings ( class USFXProfileSettings* ReadFrom )
{
	static UFunction* pFnUpdateAudioVolumeSettings = NULL;

	if ( ! pFnUpdateAudioVolumeSettings )
		pFnUpdateAudioVolumeSettings = (UFunction*) UObject::GObjObjects()->Data[ 48364 ];

	UBioSFHandler_Options_execUpdateAudioVolumeSettings_Parms UpdateAudioVolumeSettings_Parms;
	UpdateAudioVolumeSettings_Parms.ReadFrom = ReadFrom;

	pFnUpdateAudioVolumeSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateAudioVolumeSettings, &UpdateAudioVolumeSettings_Parms, NULL );

	pFnUpdateAudioVolumeSettings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Options.UpdateDisplayGamma
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXProfileSettings*     ReadFrom                       ( CPF_Parm )

void UBioSFHandler_Options::UpdateDisplayGamma ( class USFXProfileSettings* ReadFrom )
{
	static UFunction* pFnUpdateDisplayGamma = NULL;

	if ( ! pFnUpdateDisplayGamma )
		pFnUpdateDisplayGamma = (UFunction*) UObject::GObjObjects()->Data[ 48362 ];

	UBioSFHandler_Options_execUpdateDisplayGamma_Parms UpdateDisplayGamma_Parms;
	UpdateDisplayGamma_Parms.ReadFrom = ReadFrom;

	pFnUpdateDisplayGamma->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDisplayGamma, &UpdateDisplayGamma_Parms, NULL );

	pFnUpdateDisplayGamma->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Options.GetProfileSettingsForOptions
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< unsigned char >        lstProfSettings                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< int >                  lstTypes                       ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_Options::GetProfileSettingsForOptions ( TArray< unsigned char >* lstProfSettings, TArray< int >* lstTypes )
{
	static UFunction* pFnGetProfileSettingsForOptions = NULL;

	if ( ! pFnGetProfileSettingsForOptions )
		pFnGetProfileSettingsForOptions = (UFunction*) UObject::GObjObjects()->Data[ 48357 ];

	UBioSFHandler_Options_execGetProfileSettingsForOptions_Parms GetProfileSettingsForOptions_Parms;

	pFnGetProfileSettingsForOptions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingsForOptions, &GetProfileSettingsForOptions_Parms, NULL );

	pFnGetProfileSettingsForOptions->FunctionFlags |= 0x400;

	if ( lstProfSettings )
		memcpy ( lstProfSettings, &GetProfileSettingsForOptions_Parms.lstProfSettings, 0xC );

	if ( lstTypes )
		memcpy ( lstTypes, &GetProfileSettingsForOptions_Parms.lstTypes, 0xC );
};

// Function SFXGame.BioSFHandler_Options.GetProfileSettingForOption
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Type                           ( CPF_Parm )

unsigned char UBioSFHandler_Options::GetProfileSettingForOption ( int Type )
{
	static UFunction* pFnGetProfileSettingForOption = NULL;

	if ( ! pFnGetProfileSettingForOption )
		pFnGetProfileSettingForOption = (UFunction*) UObject::GObjObjects()->Data[ 48354 ];

	UBioSFHandler_Options_execGetProfileSettingForOption_Parms GetProfileSettingForOption_Parms;
	GetProfileSettingForOption_Parms.Type = Type;

	pFnGetProfileSettingForOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProfileSettingForOption, &GetProfileSettingForOption_Parms, NULL );

	pFnGetProfileSettingForOption->FunctionFlags |= 0x400;

	return GetProfileSettingForOption_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_Options.SetOption
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Type                           ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UBioSFHandler_Options::SetOption ( int Type, int Value )
{
	static UFunction* pFnSetOption = NULL;

	if ( ! pFnSetOption )
		pFnSetOption = (UFunction*) UObject::GObjObjects()->Data[ 48351 ];

	UBioSFHandler_Options_execSetOption_Parms SetOption_Parms;
	SetOption_Parms.Type = Type;
	SetOption_Parms.Value = Value;

	pFnSetOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOption, &SetOption_Parms, NULL );

	pFnSetOption->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Options.SetOptionsOnGUI
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXProfileSettings*     Settings                       ( CPF_Parm )

void UBioSFHandler_Options::SetOptionsOnGUI ( class USFXProfileSettings* Settings )
{
	static UFunction* pFnSetOptionsOnGUI = NULL;

	if ( ! pFnSetOptionsOnGUI )
		pFnSetOptionsOnGUI = (UFunction*) UObject::GObjObjects()->Data[ 48349 ];

	UBioSFHandler_Options_execSetOptionsOnGUI_Parms SetOptionsOnGUI_Parms;
	SetOptionsOnGUI_Parms.Settings = Settings;

	pFnSetOptionsOnGUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOptionsOnGUI, &SetOptionsOnGUI_Parms, NULL );

	pFnSetOptionsOnGUI->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Options.CopyProfileSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXProfileSettings*     Source                         ( CPF_Parm )
// class USFXProfileSettings*     Dest                           ( CPF_Parm )

void UBioSFHandler_Options::CopyProfileSettings ( class USFXProfileSettings* Source, class USFXProfileSettings* Dest )
{
	static UFunction* pFnCopyProfileSettings = NULL;

	if ( ! pFnCopyProfileSettings )
		pFnCopyProfileSettings = (UFunction*) UObject::GObjObjects()->Data[ 48346 ];

	UBioSFHandler_Options_execCopyProfileSettings_Parms CopyProfileSettings_Parms;
	CopyProfileSettings_Parms.Source = Source;
	CopyProfileSettings_Parms.Dest = Dest;

	pFnCopyProfileSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCopyProfileSettings, &CopyProfileSettings_Parms, NULL );

	pFnCopyProfileSettings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_Options.Callback_ExitFromMenu
// [0x00020000] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void UBioSFHandler_Options::Callback_ExitFromMenu ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ExitFromMenu = NULL;

	if ( ! pFnCallback_ExitFromMenu )
		pFnCallback_ExitFromMenu = (UFunction*) UObject::GObjObjects()->Data[ 48343 ];

	UBioSFHandler_Options_execCallback_ExitFromMenu_Parms Callback_ExitFromMenu_Parms;
	Callback_ExitFromMenu_Parms.bAPressed = bAPressed;
	Callback_ExitFromMenu_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ExitFromMenu, &Callback_ExitFromMenu_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.Callback_ResetToDefaults
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void UBioSFHandler_Options::Callback_ResetToDefaults ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ResetToDefaults = NULL;

	if ( ! pFnCallback_ResetToDefaults )
		pFnCallback_ResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 48337 ];

	UBioSFHandler_Options_execCallback_ResetToDefaults_Parms Callback_ResetToDefaults_Parms;
	Callback_ResetToDefaults_Parms.bAPressed = bAPressed;
	Callback_ResetToDefaults_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ResetToDefaults, &Callback_ResetToDefaults_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.onExIntResetToDefaults
// [0x00020002] 
// Parameters infos:
// struct FString                 sPackedIDs                     ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_Options::onExIntResetToDefaults ( struct FString sPackedIDs )
{
	static UFunction* pFnonExIntResetToDefaults = NULL;

	if ( ! pFnonExIntResetToDefaults )
		pFnonExIntResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 48334 ];

	UBioSFHandler_Options_execonExIntResetToDefaults_Parms onExIntResetToDefaults_Parms;
	memcpy ( &onExIntResetToDefaults_Parms.sPackedIDs, &sPackedIDs, 0xC );

	this->ProcessEvent ( pFnonExIntResetToDefaults, &onExIntResetToDefaults_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.Helper_ExtractPackedOptIDs
// [0x00420002] 
// Parameters infos:
// struct FString                 sPackedIDs                     ( CPF_Parm | CPF_NeedCtorLink )
// TArray< int >                  lstOptIDs                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_Options::Helper_ExtractPackedOptIDs ( struct FString sPackedIDs, TArray< int >* lstOptIDs )
{
	static UFunction* pFnHelper_ExtractPackedOptIDs = NULL;

	if ( ! pFnHelper_ExtractPackedOptIDs )
		pFnHelper_ExtractPackedOptIDs = (UFunction*) UObject::GObjObjects()->Data[ 48327 ];

	UBioSFHandler_Options_execHelper_ExtractPackedOptIDs_Parms Helper_ExtractPackedOptIDs_Parms;
	memcpy ( &Helper_ExtractPackedOptIDs_Parms.sPackedIDs, &sPackedIDs, 0xC );

	this->ProcessEvent ( pFnHelper_ExtractPackedOptIDs, &Helper_ExtractPackedOptIDs_Parms, NULL );

	if ( lstOptIDs )
		memcpy ( lstOptIDs, &Helper_ExtractPackedOptIDs_Parms.lstOptIDs, 0xC );
};

// Function SFXGame.BioSFHandler_Options.Helper_CreateResetConfirmPopup
// [0x00820002] 
// Parameters infos:
// class UMassEffectGuiManager*   GuiMan                         ( CPF_Parm )
// struct FScriptDelegate         pInputDelegate                 ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_Options::Helper_CreateResetConfirmPopup ( class UMassEffectGuiManager* GuiMan, struct FScriptDelegate pInputDelegate )
{
	static UFunction* pFnHelper_CreateResetConfirmPopup = NULL;

	if ( ! pFnHelper_CreateResetConfirmPopup )
		pFnHelper_CreateResetConfirmPopup = (UFunction*) UObject::GObjObjects()->Data[ 48322 ];

	UBioSFHandler_Options_execHelper_CreateResetConfirmPopup_Parms Helper_CreateResetConfirmPopup_Parms;
	Helper_CreateResetConfirmPopup_Parms.GuiMan = GuiMan;
	memcpy ( &Helper_CreateResetConfirmPopup_Parms.pInputDelegate, &pInputDelegate, 0xC );

	this->ProcessEvent ( pFnHelper_CreateResetConfirmPopup, &Helper_CreateResetConfirmPopup_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  Command                        ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_Options::HandleEvent ( unsigned char Command, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 48315 ];

	UBioSFHandler_Options_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.Command = Command;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_Options.SetOnCloseCallback
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         fn_OnCloseDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_Options::SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate )
{
	static UFunction* pFnSetOnCloseCallback = NULL;

	if ( ! pFnSetOnCloseCallback )
		pFnSetOnCloseCallback = (UFunction*) UObject::GObjObjects()->Data[ 48313 ];

	UBioSFHandler_Options_execSetOnCloseCallback_Parms SetOnCloseCallback_Parms;
	memcpy ( &SetOnCloseCallback_Parms.fn_OnCloseDelegate, &fn_OnCloseDelegate, 0xC );

	this->ProcessEvent ( pFnSetOnCloseCallback, &SetOnCloseCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Options.OnCloseCallback
// [0x00120000] 
// Parameters infos:

void UBioSFHandler_Options::OnCloseCallback ( )
{
	static UFunction* pFnOnCloseCallback = NULL;

	if ( ! pFnOnCloseCallback )
		pFnOnCloseCallback = (UFunction*) UObject::GObjObjects()->Data[ 48300 ];

	UBioSFHandler_Options_execOnCloseCallback_Parms OnCloseCallback_Parms;

	this->ProcessEvent ( pFnOnCloseCallback, &OnCloseCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCGalaxyMap.BuyProbes
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler_PCGalaxyMap::eventBuyProbes ( )
{
	static UFunction* pFnBuyProbes = NULL;

	if ( ! pFnBuyProbes )
		pFnBuyProbes = (UFunction*) UObject::GObjObjects()->Data[ 48571 ];

	UBioSFHandler_PCGalaxyMap_eventBuyProbes_Parms BuyProbes_Parms;

	this->ProcessEvent ( pFnBuyProbes, &BuyProbes_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCGalaxyMap.EndRefuelNoise
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCGalaxyMap::EndRefuelNoise ( )
{
	static UFunction* pFnEndRefuelNoise = NULL;

	if ( ! pFnEndRefuelNoise )
		pFnEndRefuelNoise = (UFunction*) UObject::GObjObjects()->Data[ 48566 ];

	UBioSFHandler_PCGalaxyMap_execEndRefuelNoise_Parms EndRefuelNoise_Parms;

	this->ProcessEvent ( pFnEndRefuelNoise, &EndRefuelNoise_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCGalaxyMap.RepeatBuyFuel
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCGalaxyMap::RepeatBuyFuel ( )
{
	static UFunction* pFnRepeatBuyFuel = NULL;

	if ( ! pFnRepeatBuyFuel )
		pFnRepeatBuyFuel = (UFunction*) UObject::GObjObjects()->Data[ 48561 ];

	UBioSFHandler_PCGalaxyMap_execRepeatBuyFuel_Parms RepeatBuyFuel_Parms;

	this->ProcessEvent ( pFnRepeatBuyFuel, &RepeatBuyFuel_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCGalaxyMap.BuyFuel
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler_PCGalaxyMap::eventBuyFuel ( )
{
	static UFunction* pFnBuyFuel = NULL;

	if ( ! pFnBuyFuel )
		pFnBuyFuel = (UFunction*) UObject::GObjObjects()->Data[ 48555 ];

	UBioSFHandler_PCGalaxyMap_eventBuyFuel_Parms BuyFuel_Parms;

	this->ProcessEvent ( pFnBuyFuel, &BuyFuel_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCGalaxyMap.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  nEvent                         ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_PCGalaxyMap::HandleInputEvent ( unsigned char nEvent, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 48547 ];

	UBioSFHandler_PCGalaxyMap_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.nEvent = nEvent;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCMainMenu.OnYButton
// [0x00020000] 
// Parameters infos:

void UBioSFHandler_PCMainMenu::OnYButton ( )
{
	static UFunction* pFnOnYButton = NULL;

	if ( ! pFnOnYButton )
		pFnOnYButton = (UFunction*) UObject::GObjObjects()->Data[ 48585 ];

	UBioSFHandler_PCMainMenu_execOnYButton_Parms OnYButton_Parms;

	this->ProcessEvent ( pFnOnYButton, &OnYButton_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCNewCharacter.UpdateLookAtTarget
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCNewCharacter::UpdateLookAtTarget ( )
{
	static UFunction* pFnUpdateLookAtTarget = NULL;

	if ( ! pFnUpdateLookAtTarget )
		pFnUpdateLookAtTarget = (UFunction*) UObject::GObjObjects()->Data[ 48619 ];

	UBioSFHandler_PCNewCharacter_execUpdateLookAtTarget_Parms UpdateLookAtTarget_Parms;

	this->ProcessEvent ( pFnUpdateLookAtTarget, &UpdateLookAtTarget_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCNewCharacter.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFHandler_PCNewCharacter::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 48617 ];

	UBioSFHandler_PCNewCharacter_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCNewCharacter.HandleLookAtLeftRight
// [0x00020000] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void UBioSFHandler_PCNewCharacter::HandleLookAtLeftRight ( float fValue )
{
	static UFunction* pFnHandleLookAtLeftRight = NULL;

	if ( ! pFnHandleLookAtLeftRight )
		pFnHandleLookAtLeftRight = (UFunction*) UObject::GObjObjects()->Data[ 48615 ];

	UBioSFHandler_PCNewCharacter_execHandleLookAtLeftRight_Parms HandleLookAtLeftRight_Parms;
	HandleLookAtLeftRight_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleLookAtLeftRight, &HandleLookAtLeftRight_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCNewCharacter.HandleLookAtUpDown
// [0x00020000] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void UBioSFHandler_PCNewCharacter::HandleLookAtUpDown ( float fValue )
{
	static UFunction* pFnHandleLookAtUpDown = NULL;

	if ( ! pFnHandleLookAtUpDown )
		pFnHandleLookAtUpDown = (UFunction*) UObject::GObjObjects()->Data[ 48613 ];

	UBioSFHandler_PCNewCharacter_execHandleLookAtUpDown_Parms HandleLookAtUpDown_Parms;
	HandleLookAtUpDown_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleLookAtUpDown, &HandleLookAtUpDown_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCNewCharacter.HandleLookAtLeftRightMouse
// [0x00020002] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void UBioSFHandler_PCNewCharacter::HandleLookAtLeftRightMouse ( float fValue )
{
	static UFunction* pFnHandleLookAtLeftRightMouse = NULL;

	if ( ! pFnHandleLookAtLeftRightMouse )
		pFnHandleLookAtLeftRightMouse = (UFunction*) UObject::GObjObjects()->Data[ 48611 ];

	UBioSFHandler_PCNewCharacter_execHandleLookAtLeftRightMouse_Parms HandleLookAtLeftRightMouse_Parms;
	HandleLookAtLeftRightMouse_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleLookAtLeftRightMouse, &HandleLookAtLeftRightMouse_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCNewCharacter.HandleLookAtUpDownMouse
// [0x00020002] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void UBioSFHandler_PCNewCharacter::HandleLookAtUpDownMouse ( float fValue )
{
	static UFunction* pFnHandleLookAtUpDownMouse = NULL;

	if ( ! pFnHandleLookAtUpDownMouse )
		pFnHandleLookAtUpDownMouse = (UFunction*) UObject::GObjObjects()->Data[ 48609 ];

	UBioSFHandler_PCNewCharacter_execHandleLookAtUpDownMouse_Parms HandleLookAtUpDownMouse_Parms;
	HandleLookAtUpDownMouse_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleLookAtUpDownMouse, &HandleLookAtUpDownMouse_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCNewCharacter.HandleInputEvent
// [0x00820002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_PCNewCharacter::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 48603 ];

	UBioSFHandler_PCNewCharacter_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCNewCharacter.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_PCNewCharacter::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 48598 ];

	UBioSFHandler_PCNewCharacter_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_PCNewCharacter.ClipboardPaste
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString UBioSFHandler_PCNewCharacter::ClipboardPaste ( )
{
	static UFunction* pFnClipboardPaste = NULL;

	if ( ! pFnClipboardPaste )
		pFnClipboardPaste = (UFunction*) UObject::GObjObjects()->Data[ 48596 ];

	UBioSFHandler_PCNewCharacter_execClipboardPaste_Parms ClipboardPaste_Parms;

	pFnClipboardPaste->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClipboardPaste, &ClipboardPaste_Parms, NULL );

	pFnClipboardPaste->FunctionFlags |= 0x400;

	return ClipboardPaste_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_PCNewCharacter.ClipboardCopy
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sString                        ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_PCNewCharacter::ClipboardCopy ( struct FString sString )
{
	static UFunction* pFnClipboardCopy = NULL;

	if ( ! pFnClipboardCopy )
		pFnClipboardCopy = (UFunction*) UObject::GObjObjects()->Data[ 48594 ];

	UBioSFHandler_PCNewCharacter_execClipboardCopy_Parms ClipboardCopy_Parms;
	memcpy ( &ClipboardCopy_Parms.sString, &sString, 0xC );

	pFnClipboardCopy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClipboardCopy, &ClipboardCopy_Parms, NULL );

	pFnClipboardCopy->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.SetOption
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            Type                           ( CPF_Parm )
// int                            Value                          ( CPF_Parm )

void UBioSFHandler_PCOptions::SetOption ( int Type, int Value )
{
	static UFunction* pFnSetOption = NULL;

	if ( ! pFnSetOption )
		pFnSetOption = (UFunction*) UObject::GObjObjects()->Data[ 48702 ];

	UBioSFHandler_PCOptions_execSetOption_Parms SetOption_Parms;
	SetOption_Parms.Type = Type;
	SetOption_Parms.Value = Value;

	pFnSetOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOption, &SetOption_Parms, NULL );

	pFnSetOption->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.SetOptionsOnGUI
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXProfileSettings*     Settings                       ( CPF_Parm )

void UBioSFHandler_PCOptions::SetOptionsOnGUI ( class USFXProfileSettings* Settings )
{
	static UFunction* pFnSetOptionsOnGUI = NULL;

	if ( ! pFnSetOptionsOnGUI )
		pFnSetOptionsOnGUI = (UFunction*) UObject::GObjObjects()->Data[ 48700 ];

	UBioSFHandler_PCOptions_execSetOptionsOnGUI_Parms SetOptionsOnGUI_Parms;
	SetOptionsOnGUI_Parms.Settings = Settings;

	pFnSetOptionsOnGUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetOptionsOnGUI, &SetOptionsOnGUI_Parms, NULL );

	pFnSetOptionsOnGUI->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.ApplySettings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioSFHandler_PCOptions::ApplySettings ( )
{
	static UFunction* pFnApplySettings = NULL;

	if ( ! pFnApplySettings )
		pFnApplySettings = (UFunction*) UObject::GObjObjects()->Data[ 48668 ];

	UBioSFHandler_PCOptions_execApplySettings_Parms ApplySettings_Parms;

	pFnApplySettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplySettings, &ApplySettings_Parms, NULL );

	pFnApplySettings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.ResetPCToDefaults
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// TArray< int >                  lstOptsToReset                 ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_PCOptions::ResetPCToDefaults ( TArray< int >* lstOptsToReset )
{
	static UFunction* pFnResetPCToDefaults = NULL;

	if ( ! pFnResetPCToDefaults )
		pFnResetPCToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 48684 ];

	UBioSFHandler_PCOptions_execResetPCToDefaults_Parms ResetPCToDefaults_Parms;

	pFnResetPCToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetPCToDefaults, &ResetPCToDefaults_Parms, NULL );

	pFnResetPCToDefaults->FunctionFlags |= 0x400;

	if ( lstOptsToReset )
		memcpy ( lstOptsToReset, &ResetPCToDefaults_Parms.lstOptsToReset, 0xC );
};

// Function SFXGame.BioSFHandler_PCOptions.InitSystemSettingsCache
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioSFHandler_PCOptions::InitSystemSettingsCache ( )
{
	static UFunction* pFnInitSystemSettingsCache = NULL;

	if ( ! pFnInitSystemSettingsCache )
		pFnInitSystemSettingsCache = (UFunction*) UObject::GObjObjects()->Data[ 48670 ];

	UBioSFHandler_PCOptions_execInitSystemSettingsCache_Parms InitSystemSettingsCache_Parms;

	pFnInitSystemSettingsCache->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSystemSettingsCache, &InitSystemSettingsCache_Parms, NULL );

	pFnInitSystemSettingsCache->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.InitPCBindings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  Defaults                       ( CPF_Parm )

void UBioSFHandler_PCOptions::InitPCBindings ( unsigned long Defaults )
{
	static UFunction* pFnInitPCBindings = NULL;

	if ( ! pFnInitPCBindings )
		pFnInitPCBindings = (UFunction*) UObject::GObjObjects()->Data[ 48671 ];

	UBioSFHandler_PCOptions_execInitPCBindings_Parms InitPCBindings_Parms;
	InitPCBindings_Parms.Defaults = Defaults;

	pFnInitPCBindings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitPCBindings, &InitPCBindings_Parms, NULL );

	pFnInitPCBindings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.ApplyPCBindings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioSFHandler_PCOptions::ApplyPCBindings ( )
{
	static UFunction* pFnApplyPCBindings = NULL;

	if ( ! pFnApplyPCBindings )
		pFnApplyPCBindings = (UFunction*) UObject::GObjObjects()->Data[ 48669 ];

	UBioSFHandler_PCOptions_execApplyPCBindings_Parms ApplyPCBindings_Parms;

	pFnApplyPCBindings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyPCBindings, &ApplyPCBindings_Parms, NULL );

	pFnApplyPCBindings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.RefreshGUIBindings
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioSFHandler_PCOptions::RefreshGUIBindings ( )
{
	static UFunction* pFnRefreshGUIBindings = NULL;

	if ( ! pFnRefreshGUIBindings )
		pFnRefreshGUIBindings = (UFunction*) UObject::GObjObjects()->Data[ 48680 ];

	UBioSFHandler_PCOptions_execRefreshGUIBindings_Parms RefreshGUIBindings_Parms;

	pFnRefreshGUIBindings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshGUIBindings, &RefreshGUIBindings_Parms, NULL );

	pFnRefreshGUIBindings->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.ProcessInput
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            ControllerId                   ( CPF_Parm )
// struct FName                   Key                            ( CPF_Parm )
// unsigned char                  EventType                      ( CPF_Parm )
// float                          AmountDepressed                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGamepad                       ( CPF_OptionalParm | CPF_Parm )

bool UBioSFHandler_PCOptions::ProcessInput ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad )
{
	static UFunction* pFnProcessInput = NULL;

	if ( ! pFnProcessInput )
		pFnProcessInput = (UFunction*) UObject::GObjObjects()->Data[ 48690 ];

	UBioSFHandler_PCOptions_execProcessInput_Parms ProcessInput_Parms;
	ProcessInput_Parms.ControllerId = ControllerId;
	memcpy ( &ProcessInput_Parms.Key, &Key, 0x8 );
	ProcessInput_Parms.EventType = EventType;
	ProcessInput_Parms.AmountDepressed = AmountDepressed;
	ProcessInput_Parms.bGamepad = bGamepad;

	pFnProcessInput->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessInput, &ProcessInput_Parms, NULL );

	pFnProcessInput->FunctionFlags |= 0x400;

	return ProcessInput_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_PCOptions.CaptureNewBinding
// [0x00020002] 
// Parameters infos:
// int                            BindIndex                      ( CPF_Parm )
// int                            BindNumber                     ( CPF_Parm )

void UBioSFHandler_PCOptions::CaptureNewBinding ( int BindIndex, int BindNumber )
{
	static UFunction* pFnCaptureNewBinding = NULL;

	if ( ! pFnCaptureNewBinding )
		pFnCaptureNewBinding = (UFunction*) UObject::GObjObjects()->Data[ 48686 ];

	UBioSFHandler_PCOptions_execCaptureNewBinding_Parms CaptureNewBinding_Parms;
	CaptureNewBinding_Parms.BindIndex = BindIndex;
	CaptureNewBinding_Parms.BindNumber = BindNumber;

	this->ProcessEvent ( pFnCaptureNewBinding, &CaptureNewBinding_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.BuildControlBindingList
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSFHandler_PCOptions::BuildControlBindingList ( )
{
	static UFunction* pFnBuildControlBindingList = NULL;

	if ( ! pFnBuildControlBindingList )
		pFnBuildControlBindingList = (UFunction*) UObject::GObjObjects()->Data[ 48685 ];

	UBioSFHandler_PCOptions_execBuildControlBindingList_Parms BuildControlBindingList_Parms;

	pFnBuildControlBindingList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildControlBindingList, &BuildControlBindingList_Parms, NULL );

	pFnBuildControlBindingList->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSFHandler_PCOptions.Callback_ResetPCToDefaults
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void UBioSFHandler_PCOptions::Callback_ResetPCToDefaults ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ResetPCToDefaults = NULL;

	if ( ! pFnCallback_ResetPCToDefaults )
		pFnCallback_ResetPCToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 48681 ];

	UBioSFHandler_PCOptions_execCallback_ResetPCToDefaults_Parms Callback_ResetPCToDefaults_Parms;
	Callback_ResetPCToDefaults_Parms.bAPressed = bAPressed;
	Callback_ResetPCToDefaults_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ResetPCToDefaults, &Callback_ResetPCToDefaults_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.Helper_DoPCBindingReset
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCOptions::Helper_DoPCBindingReset ( )
{
	static UFunction* pFnHelper_DoPCBindingReset = NULL;

	if ( ! pFnHelper_DoPCBindingReset )
		pFnHelper_DoPCBindingReset = (UFunction*) UObject::GObjObjects()->Data[ 48678 ];

	UBioSFHandler_PCOptions_execHelper_DoPCBindingReset_Parms Helper_DoPCBindingReset_Parms;

	this->ProcessEvent ( pFnHelper_DoPCBindingReset, &Helper_DoPCBindingReset_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.Callback_ResetPCBindings
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void UBioSFHandler_PCOptions::Callback_ResetPCBindings ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ResetPCBindings = NULL;

	if ( ! pFnCallback_ResetPCBindings )
		pFnCallback_ResetPCBindings = (UFunction*) UObject::GObjObjects()->Data[ 48675 ];

	UBioSFHandler_PCOptions_execCallback_ResetPCBindings_Parms Callback_ResetPCBindings_Parms;
	Callback_ResetPCBindings_Parms.bAPressed = bAPressed;
	Callback_ResetPCBindings_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ResetPCBindings, &Callback_ResetPCBindings_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.onExIntResetToDefaults
// [0x00020002] 
// Parameters infos:
// struct FString                 sPackedIDs                     ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_PCOptions::onExIntResetToDefaults ( struct FString sPackedIDs )
{
	static UFunction* pFnonExIntResetToDefaults = NULL;

	if ( ! pFnonExIntResetToDefaults )
		pFnonExIntResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 48672 ];

	UBioSFHandler_PCOptions_execonExIntResetToDefaults_Parms onExIntResetToDefaults_Parms;
	memcpy ( &onExIntResetToDefaults_Parms.sPackedIDs, &sPackedIDs, 0xC );

	this->ProcessEvent ( pFnonExIntResetToDefaults, &onExIntResetToDefaults_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCOptions.HandleEvent
// [0x00C20002] 
// Parameters infos:
// unsigned char                  Command                        ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_PCOptions::HandleEvent ( unsigned char Command, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 48660 ];

	UBioSFHandler_PCOptions_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.Command = Command;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_PCOptions.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCOptions::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48659 ];

	UBioSFHandler_PCOptions_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCPauseMenu.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFHandler_PCPauseMenu::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 48731 ];

	UBioSFHandler_PCPauseMenu_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCPauseMenu.MainMenuConfirm
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_PCPauseMenu::MainMenuConfirm ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnMainMenuConfirm = NULL;

	if ( ! pFnMainMenuConfirm )
		pFnMainMenuConfirm = (UFunction*) UObject::GObjObjects()->Data[ 48728 ];

	UBioSFHandler_PCPauseMenu_execMainMenuConfirm_Parms MainMenuConfirm_Parms;
	MainMenuConfirm_Parms.bAPressed = bAPressed;
	MainMenuConfirm_Parms.nContext = nContext;

	this->ProcessEvent ( pFnMainMenuConfirm, &MainMenuConfirm_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCPauseMenu.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_PCPauseMenu::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 48725 ];

	UBioSFHandler_PCPauseMenu_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCPauseMenu.ExitConfirm
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_PCPauseMenu::ExitConfirm ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnExitConfirm = NULL;

	if ( ! pFnExitConfirm )
		pFnExitConfirm = (UFunction*) UObject::GObjObjects()->Data[ 48722 ];

	UBioSFHandler_PCPauseMenu_execExitConfirm_Parms ExitConfirm_Parms;
	ExitConfirm_Parms.bAPressed = bAPressed;
	ExitConfirm_Parms.nContext = nContext;

	this->ProcessEvent ( pFnExitConfirm, &ExitConfirm_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCPauseMenu.ExitGame
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_PCPauseMenu::ExitGame ( )
{
	static UFunction* pFnExitGame = NULL;

	if ( ! pFnExitGame )
		pFnExitGame = (UFunction*) UObject::GObjObjects()->Data[ 48718 ];

	UBioSFHandler_PCPauseMenu_execExitGame_Parms ExitGame_Parms;

	this->ProcessEvent ( pFnExitGame, &ExitGame_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCPauseMenu.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_PCPauseMenu::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 48714 ];

	UBioSFHandler_PCPauseMenu_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_PCPauseMenu.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCPauseMenu::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 48713 ];

	UBioSFHandler_PCPauseMenu_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCPauseMenu.OnPanelAdded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler_PCPauseMenu::eventOnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48712 ];

	UBioSFHandler_PCPauseMenu_eventOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Splash.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_Splash::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48846 ];

	UBioSFHandler_Splash_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Splash.StartTimeout
// [0x00820002] 
// Parameters infos:
// unsigned long                  bShowLegal                     ( CPF_Parm )

void UBioSFHandler_Splash::StartTimeout ( unsigned long bShowLegal )
{
	static UFunction* pFnStartTimeout = NULL;

	if ( ! pFnStartTimeout )
		pFnStartTimeout = (UFunction*) UObject::GObjObjects()->Data[ 48841 ];

	UBioSFHandler_Splash_execStartTimeout_Parms StartTimeout_Parms;
	StartTimeout_Parms.bShowLegal = bShowLegal;

	this->ProcessEvent ( pFnStartTimeout, &StartTimeout_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Splash.Update
// [0x00020002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFHandler_Splash::Update ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 48839 ];

	UBioSFHandler_Splash_execUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Splash.Initialize
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_Splash::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 48834 ];

	UBioSFHandler_Splash_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Splash.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_Splash::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 48830 ];

	UBioSFHandler_Splash_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_Splash.AdvanceScreen
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler_Splash::eventAdvanceScreen ( )
{
	static UFunction* pFnAdvanceScreen = NULL;

	if ( ! pFnAdvanceScreen )
		pFnAdvanceScreen = (UFunction*) UObject::GObjObjects()->Data[ 48825 ];

	UBioSFHandler_Splash_eventAdvanceScreen_Parms AdvanceScreen_Parms;

	this->ProcessEvent ( pFnAdvanceScreen, &AdvanceScreen_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Splash.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_Splash::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 48822 ];

	UBioSFHandler_Splash_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Splash.Callback_NoLoginStart
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void UBioSFHandler_Splash::Callback_NoLoginStart ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_NoLoginStart = NULL;

	if ( ! pFnCallback_NoLoginStart )
		pFnCallback_NoLoginStart = (UFunction*) UObject::GObjObjects()->Data[ 48819 ];

	UBioSFHandler_Splash_execCallback_NoLoginStart_Parms Callback_NoLoginStart_Parms;
	Callback_NoLoginStart_Parms.bAPressed = bAPressed;
	Callback_NoLoginStart_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_NoLoginStart, &Callback_NoLoginStart_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Splash.DisplayNoProfileConfirmation
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_Splash::DisplayNoProfileConfirmation ( )
{
	static UFunction* pFnDisplayNoProfileConfirmation = NULL;

	if ( ! pFnDisplayNoProfileConfirmation )
		pFnDisplayNoProfileConfirmation = (UFunction*) UObject::GObjObjects()->Data[ 48816 ];

	UBioSFHandler_Splash_execDisplayNoProfileConfirmation_Parms DisplayNoProfileConfirmation_Parms;

	this->ProcessEvent ( pFnDisplayNoProfileConfirmation, &DisplayNoProfileConfirmation_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Splash.Callback_LoginComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bIsOpening                     ( CPF_Parm )

void UBioSFHandler_Splash::Callback_LoginComplete ( unsigned long bIsOpening )
{
	static UFunction* pFnCallback_LoginComplete = NULL;

	if ( ! pFnCallback_LoginComplete )
		pFnCallback_LoginComplete = (UFunction*) UObject::GObjObjects()->Data[ 48809 ];

	UBioSFHandler_Splash_execCallback_LoginComplete_Parms Callback_LoginComplete_Parms;
	Callback_LoginComplete_Parms.bIsOpening = bIsOpening;

	this->ProcessEvent ( pFnCallback_LoginComplete, &Callback_LoginComplete_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Splash.CheckLogin
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_Splash::CheckLogin ( )
{
	static UFunction* pFnCheckLogin = NULL;

	if ( ! pFnCheckLogin )
		pFnCheckLogin = (UFunction*) UObject::GObjObjects()->Data[ 48802 ];

	UBioSFHandler_Splash_execCheckLogin_Parms CheckLogin_Parms;

	this->ProcessEvent ( pFnCheckLogin, &CheckLogin_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCSplash.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFHandler_PCSplash::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 48854 ];

	UBioSFHandler_PCSplash_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCSplash.AdvanceScreen
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler_PCSplash::eventAdvanceScreen ( )
{
	static UFunction* pFnAdvanceScreen = NULL;

	if ( ! pFnAdvanceScreen )
		pFnAdvanceScreen = (UFunction*) UObject::GObjObjects()->Data[ 48853 ];

	UBioSFHandler_PCSplash_eventAdvanceScreen_Parms AdvanceScreen_Parms;

	this->ProcessEvent ( pFnAdvanceScreen, &AdvanceScreen_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCSplash.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_PCSplash::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 48849 ];

	UBioSFHandler_PCSplash_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_PCSplash.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCSplash::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 48848 ];

	UBioSFHandler_PCSplash_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Tutorial.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_Tutorial::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 48902 ];

	UBioSFHandler_Tutorial_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_Tutorial.CompletionCallback
// [0x00120000] 
// Parameters infos:

void UBioSFHandler_Tutorial::CompletionCallback ( )
{
	static UFunction* pFnCompletionCallback = NULL;

	if ( ! pFnCompletionCallback )
		pFnCompletionCallback = (UFunction*) UObject::GObjObjects()->Data[ 48899 ];

	UBioSFHandler_Tutorial_execCompletionCallback_Parms CompletionCallback_Parms;

	this->ProcessEvent ( pFnCompletionCallback, &CompletionCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_XBoxMessageBox.DisplayMessageBox
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  nIcon                          ( CPF_OptionalParm | CPF_Parm )
// int                            nDefaultButton                 ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_XBoxMessageBox::DisplayMessageBox ( unsigned char nIcon, int nDefaultButton )
{
	static UFunction* pFnDisplayMessageBox = NULL;

	if ( ! pFnDisplayMessageBox )
		pFnDisplayMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 48910 ];

	UBioSFHandler_XBoxMessageBox_execDisplayMessageBox_Parms DisplayMessageBox_Parms;
	DisplayMessageBox_Parms.nIcon = nIcon;
	DisplayMessageBox_Parms.nDefaultButton = nDefaultButton;

	pFnDisplayMessageBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayMessageBox, &DisplayMessageBox_Parms, NULL );

	pFnDisplayMessageBox->FunctionFlags |= 0x400;

	//if ( srButtons )
};

// Function SFXGame.BioSkillGame_Base_Handler.Cancel
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSkillGame_Base_Handler::Cancel ( )
{
	static UFunction* pFnCancel = NULL;

	if ( ! pFnCancel )
		pFnCancel = (UFunction*) UObject::GObjObjects()->Data[ 49031 ];

	UBioSkillGame_Base_Handler_execCancel_Parms Cancel_Parms;

	pFnCancel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCancel, &Cancel_Parms, NULL );

	pFnCancel->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Base_Handler.ExIntGameOver
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bGameWon                       ( CPF_Parm )
// int                            nRemainingResource             ( CPF_Parm )

void UBioSkillGame_Base_Handler::ExIntGameOver ( unsigned long bGameWon, int nRemainingResource )
{
	static UFunction* pFnExIntGameOver = NULL;

	if ( ! pFnExIntGameOver )
		pFnExIntGameOver = (UFunction*) UObject::GObjObjects()->Data[ 49028 ];

	UBioSkillGame_Base_Handler_execExIntGameOver_Parms ExIntGameOver_Parms;
	ExIntGameOver_Parms.bGameWon = bGameWon;
	ExIntGameOver_Parms.nRemainingResource = nRemainingResource;

	pFnExIntGameOver->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExIntGameOver, &ExIntGameOver_Parms, NULL );

	pFnExIntGameOver->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Base_Handler.ExIntStartGame
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSkillGame_Base_Handler::ExIntStartGame ( )
{
	static UFunction* pFnExIntStartGame = NULL;

	if ( ! pFnExIntStartGame )
		pFnExIntStartGame = (UFunction*) UObject::GObjObjects()->Data[ 49027 ];

	UBioSkillGame_Base_Handler_execExIntStartGame_Parms ExIntStartGame_Parms;

	pFnExIntStartGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExIntStartGame, &ExIntStartGame_Parms, NULL );

	pFnExIntStartGame->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Base_Handler.ExIntInitGame
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSkillGame_Base_Handler::ExIntInitGame ( )
{
	static UFunction* pFnExIntInitGame = NULL;

	if ( ! pFnExIntInitGame )
		pFnExIntInitGame = (UFunction*) UObject::GObjObjects()->Data[ 49026 ];

	UBioSkillGame_Base_Handler_execExIntInitGame_Parms ExIntInitGame_Parms;

	pFnExIntInitGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExIntInitGame, &ExIntInitGame_Parms, NULL );

	pFnExIntInitGame->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Base_Handler.ExIntCancelGame
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSkillGame_Base_Handler::ExIntCancelGame ( )
{
	static UFunction* pFnExIntCancelGame = NULL;

	if ( ! pFnExIntCancelGame )
		pFnExIntCancelGame = (UFunction*) UObject::GObjObjects()->Data[ 49025 ];

	UBioSkillGame_Base_Handler_execExIntCancelGame_Parms ExIntCancelGame_Parms;

	pFnExIntCancelGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExIntCancelGame, &ExIntCancelGame_Parms, NULL );

	pFnExIntCancelGame->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Base_Handler.ExIntStartLoopingSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSkillGame_Base_Handler::ExIntStartLoopingSound ( )
{
	static UFunction* pFnExIntStartLoopingSound = NULL;

	if ( ! pFnExIntStartLoopingSound )
		pFnExIntStartLoopingSound = (UFunction*) UObject::GObjObjects()->Data[ 49024 ];

	UBioSkillGame_Base_Handler_execExIntStartLoopingSound_Parms ExIntStartLoopingSound_Parms;

	pFnExIntStartLoopingSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExIntStartLoopingSound, &ExIntStartLoopingSound_Parms, NULL );

	pFnExIntStartLoopingSound->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Base_Handler.ExIntStopLoopingSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSkillGame_Base_Handler::ExIntStopLoopingSound ( )
{
	static UFunction* pFnExIntStopLoopingSound = NULL;

	if ( ! pFnExIntStopLoopingSound )
		pFnExIntStopLoopingSound = (UFunction*) UObject::GObjObjects()->Data[ 49023 ];

	UBioSkillGame_Base_Handler_execExIntStopLoopingSound_Parms ExIntStopLoopingSound_Parms;

	pFnExIntStopLoopingSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExIntStopLoopingSound, &ExIntStopLoopingSound_Parms, NULL );

	pFnExIntStopLoopingSound->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Base_Handler.ExIntInterruptGame
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSkillGame_Base_Handler::ExIntInterruptGame ( )
{
	static UFunction* pFnExIntInterruptGame = NULL;

	if ( ! pFnExIntInterruptGame )
		pFnExIntInterruptGame = (UFunction*) UObject::GObjObjects()->Data[ 49022 ];

	UBioSkillGame_Base_Handler_execExIntInterruptGame_Parms ExIntInterruptGame_Parms;

	pFnExIntInterruptGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExIntInterruptGame, &ExIntInterruptGame_Parms, NULL );

	pFnExIntInterruptGame->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Base_Handler.OnCancelCallback
// [0x00120000] 
// Parameters infos:
// int                            n_TimeTaken                    ( CPF_Parm )

void UBioSkillGame_Base_Handler::OnCancelCallback ( int n_TimeTaken )
{
	static UFunction* pFnOnCancelCallback = NULL;

	if ( ! pFnOnCancelCallback )
		pFnOnCancelCallback = (UFunction*) UObject::GObjObjects()->Data[ 49003 ];

	UBioSkillGame_Base_Handler_execOnCancelCallback_Parms OnCancelCallback_Parms;
	OnCancelCallback_Parms.n_TimeTaken = n_TimeTaken;

	this->ProcessEvent ( pFnOnCancelCallback, &OnCancelCallback_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Base_Handler.OnFailureCallback
// [0x00120000] 
// Parameters infos:
// int                            n_TimeTaken                    ( CPF_Parm )

void UBioSkillGame_Base_Handler::OnFailureCallback ( int n_TimeTaken )
{
	static UFunction* pFnOnFailureCallback = NULL;

	if ( ! pFnOnFailureCallback )
		pFnOnFailureCallback = (UFunction*) UObject::GObjObjects()->Data[ 49005 ];

	UBioSkillGame_Base_Handler_execOnFailureCallback_Parms OnFailureCallback_Parms;
	OnFailureCallback_Parms.n_TimeTaken = n_TimeTaken;

	this->ProcessEvent ( pFnOnFailureCallback, &OnFailureCallback_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Base_Handler.OnSuccessCallback
// [0x00120000] 
// Parameters infos:
// int                            n_TimeTaken                    ( CPF_Parm )

void UBioSkillGame_Base_Handler::OnSuccessCallback ( int n_TimeTaken )
{
	static UFunction* pFnOnSuccessCallback = NULL;

	if ( ! pFnOnSuccessCallback )
		pFnOnSuccessCallback = (UFunction*) UObject::GObjObjects()->Data[ 49007 ];

	UBioSkillGame_Base_Handler_execOnSuccessCallback_Parms OnSuccessCallback_Parms;
	OnSuccessCallback_Parms.n_TimeTaken = n_TimeTaken;

	this->ProcessEvent ( pFnOnSuccessCallback, &OnSuccessCallback_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Bypass_Handler.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSkillGame_Bypass_Handler::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 49047 ];

	UBioSkillGame_Bypass_Handler_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Bypass_Handler.Update
// [0x00820002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSkillGame_Bypass_Handler::Update ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 49040 ];

	UBioSkillGame_Bypass_Handler_execUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Bypass_Handler.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSkillGame_Bypass_Handler::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 49037 ];

	UBioSkillGame_Bypass_Handler_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Decryption_Handler.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSkillGame_Decryption_Handler::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 49075 ];

	UBioSkillGame_Decryption_Handler_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Decryption_Handler.Update
// [0x00820002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSkillGame_Decryption_Handler::Update ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 49070 ];

	UBioSkillGame_Decryption_Handler_execUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Decryption_Handler.onSelectPressed
// [0x00020002] 
// Parameters infos:

void UBioSkillGame_Decryption_Handler::onSelectPressed ( )
{
	static UFunction* pFnonSelectPressed = NULL;

	if ( ! pFnonSelectPressed )
		pFnonSelectPressed = (UFunction*) UObject::GObjObjects()->Data[ 49069 ];

	UBioSkillGame_Decryption_Handler_execonSelectPressed_Parms onSelectPressed_Parms;

	this->ProcessEvent ( pFnonSelectPressed, &onSelectPressed_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Decryption_Handler.onRightPressed
// [0x00820002] 
// Parameters infos:

void UBioSkillGame_Decryption_Handler::onRightPressed ( )
{
	static UFunction* pFnonRightPressed = NULL;

	if ( ! pFnonRightPressed )
		pFnonRightPressed = (UFunction*) UObject::GObjObjects()->Data[ 49065 ];

	UBioSkillGame_Decryption_Handler_execonRightPressed_Parms onRightPressed_Parms;

	this->ProcessEvent ( pFnonRightPressed, &onRightPressed_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Decryption_Handler.onLeftPressed
// [0x00820002] 
// Parameters infos:

void UBioSkillGame_Decryption_Handler::onLeftPressed ( )
{
	static UFunction* pFnonLeftPressed = NULL;

	if ( ! pFnonLeftPressed )
		pFnonLeftPressed = (UFunction*) UObject::GObjObjects()->Data[ 49061 ];

	UBioSkillGame_Decryption_Handler_execonLeftPressed_Parms onLeftPressed_Parms;

	this->ProcessEvent ( pFnonLeftPressed, &onLeftPressed_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Decryption_Handler.onUpPressed
// [0x00820002] 
// Parameters infos:

void UBioSkillGame_Decryption_Handler::onUpPressed ( )
{
	static UFunction* pFnonUpPressed = NULL;

	if ( ! pFnonUpPressed )
		pFnonUpPressed = (UFunction*) UObject::GObjObjects()->Data[ 49057 ];

	UBioSkillGame_Decryption_Handler_execonUpPressed_Parms onUpPressed_Parms;

	this->ProcessEvent ( pFnonUpPressed, &onUpPressed_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Decryption_Handler.onDownPressed
// [0x00820002] 
// Parameters infos:

void UBioSkillGame_Decryption_Handler::onDownPressed ( )
{
	static UFunction* pFnonDownPressed = NULL;

	if ( ! pFnonDownPressed )
		pFnonDownPressed = (UFunction*) UObject::GObjObjects()->Data[ 49053 ];

	UBioSkillGame_Decryption_Handler_execonDownPressed_Parms onDownPressed_Parms;

	this->ProcessEvent ( pFnonDownPressed, &onDownPressed_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Handler.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSkillGame_Handler::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 49160 ];

	UBioSkillGame_Handler_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Handler.SetupGame
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            i_initialSalvage               ( CPF_Parm )

void UBioSkillGame_Handler::SetupGame ( int i_initialSalvage )
{
	static UFunction* pFnSetupGame = NULL;

	if ( ! pFnSetupGame )
		pFnSetupGame = (UFunction*) UObject::GObjObjects()->Data[ 49158 ];

	UBioSkillGame_Handler_execSetupGame_Parms SetupGame_Parms;
	SetupGame_Parms.i_initialSalvage = i_initialSalvage;

	pFnSetupGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetupGame, &SetupGame_Parms, NULL );

	pFnSetupGame->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Handler.UpdateSalvage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            i_salvage                      ( CPF_Parm )

void UBioSkillGame_Handler::UpdateSalvage ( int i_salvage )
{
	static UFunction* pFnUpdateSalvage = NULL;

	if ( ! pFnUpdateSalvage )
		pFnUpdateSalvage = (UFunction*) UObject::GObjObjects()->Data[ 49156 ];

	UBioSkillGame_Handler_execUpdateSalvage_Parms UpdateSalvage_Parms;
	UpdateSalvage_Parms.i_salvage = i_salvage;

	pFnUpdateSalvage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSalvage, &UpdateSalvage_Parms, NULL );

	pFnUpdateSalvage->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Handler.SetButtonVisible
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            i_ButtonType                   ( CPF_Parm )

void UBioSkillGame_Handler::SetButtonVisible ( int i_ButtonType )
{
	static UFunction* pFnSetButtonVisible = NULL;

	if ( ! pFnSetButtonVisible )
		pFnSetButtonVisible = (UFunction*) UObject::GObjObjects()->Data[ 49154 ];

	UBioSkillGame_Handler_execSetButtonVisible_Parms SetButtonVisible_Parms;
	SetButtonVisible_Parms.i_ButtonType = i_ButtonType;

	pFnSetButtonVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetButtonVisible, &SetButtonVisible_Parms, NULL );

	pFnSetButtonVisible->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Handler.ClearAllButtons
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSkillGame_Handler::ClearAllButtons ( )
{
	static UFunction* pFnClearAllButtons = NULL;

	if ( ! pFnClearAllButtons )
		pFnClearAllButtons = (UFunction*) UObject::GObjObjects()->Data[ 49153 ];

	UBioSkillGame_Handler_execClearAllButtons_Parms ClearAllButtons_Parms;

	pFnClearAllButtons->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAllButtons, &ClearAllButtons_Parms, NULL );

	pFnClearAllButtons->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Handler.HandleSkillGameDisplayButton
// [0x00020002] 
// Parameters infos:
// class UObject*                 Params                         ( CPF_Parm )

void UBioSkillGame_Handler::HandleSkillGameDisplayButton ( class UObject* Params )
{
	static UFunction* pFnHandleSkillGameDisplayButton = NULL;

	if ( ! pFnHandleSkillGameDisplayButton )
		pFnHandleSkillGameDisplayButton = (UFunction*) UObject::GObjObjects()->Data[ 49149 ];

	UBioSkillGame_Handler_execHandleSkillGameDisplayButton_Parms HandleSkillGameDisplayButton_Parms;
	HandleSkillGameDisplayButton_Parms.Params = Params;

	this->ProcessEvent ( pFnHandleSkillGameDisplayButton, &HandleSkillGameDisplayButton_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Handler.SkillGameTriggerNextButton
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fButtonDelayTime               ( CPF_Parm )

void UBioSkillGame_Handler::eventSkillGameTriggerNextButton ( float fButtonDelayTime )
{
	static UFunction* pFnSkillGameTriggerNextButton = NULL;

	if ( ! pFnSkillGameTriggerNextButton )
		pFnSkillGameTriggerNextButton = (UFunction*) UObject::GObjObjects()->Data[ 49145 ];

	UBioSkillGame_Handler_eventSkillGameTriggerNextButton_Parms SkillGameTriggerNextButton_Parms;
	SkillGameTriggerNextButton_Parms.fButtonDelayTime = fButtonDelayTime;

	this->ProcessEvent ( pFnSkillGameTriggerNextButton, &SkillGameTriggerNextButton_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Handler.HandleSkillGameButtonTimeout
// [0x00020002] 
// Parameters infos:
// class UObject*                 Params                         ( CPF_Parm )

void UBioSkillGame_Handler::HandleSkillGameButtonTimeout ( class UObject* Params )
{
	static UFunction* pFnHandleSkillGameButtonTimeout = NULL;

	if ( ! pFnHandleSkillGameButtonTimeout )
		pFnHandleSkillGameButtonTimeout = (UFunction*) UObject::GObjObjects()->Data[ 49143 ];

	UBioSkillGame_Handler_execHandleSkillGameButtonTimeout_Parms HandleSkillGameButtonTimeout_Parms;
	HandleSkillGameButtonTimeout_Parms.Params = Params;

	this->ProcessEvent ( pFnHandleSkillGameButtonTimeout, &HandleSkillGameButtonTimeout_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Handler.HandleSkillGameButtonPress
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nButtonPressed                 ( CPF_Parm )

void UBioSkillGame_Handler::eventHandleSkillGameButtonPress ( int nButtonPressed )
{
	static UFunction* pFnHandleSkillGameButtonPress = NULL;

	if ( ! pFnHandleSkillGameButtonPress )
		pFnHandleSkillGameButtonPress = (UFunction*) UObject::GObjObjects()->Data[ 49141 ];

	UBioSkillGame_Handler_eventHandleSkillGameButtonPress_Parms HandleSkillGameButtonPress_Parms;
	HandleSkillGameButtonPress_Parms.nButtonPressed = nButtonPressed;

	this->ProcessEvent ( pFnHandleSkillGameButtonPress, &HandleSkillGameButtonPress_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Handler.EndSkillGame
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bCompleted                     ( CPF_Parm )
// unsigned long                  bNoSalvage                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bGameCanceled                  ( CPF_OptionalParm | CPF_Parm )

void UBioSkillGame_Handler::eventEndSkillGame ( unsigned long bCompleted, unsigned long bNoSalvage, unsigned long bGameCanceled )
{
	static UFunction* pFnEndSkillGame = NULL;

	if ( ! pFnEndSkillGame )
		pFnEndSkillGame = (UFunction*) UObject::GObjObjects()->Data[ 49132 ];

	UBioSkillGame_Handler_eventEndSkillGame_Parms EndSkillGame_Parms;
	EndSkillGame_Parms.bCompleted = bCompleted;
	EndSkillGame_Parms.bNoSalvage = bNoSalvage;
	EndSkillGame_Parms.bGameCanceled = bGameCanceled;

	this->ProcessEvent ( pFnEndSkillGame, &EndSkillGame_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Handler.EndSkillGameEx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bCompleted                     ( CPF_Parm )

void UBioSkillGame_Handler::EndSkillGameEx ( unsigned long bCompleted )
{
	static UFunction* pFnEndSkillGameEx = NULL;

	if ( ! pFnEndSkillGameEx )
		pFnEndSkillGameEx = (UFunction*) UObject::GObjObjects()->Data[ 49130 ];

	UBioSkillGame_Handler_execEndSkillGameEx_Parms EndSkillGameEx_Parms;
	EndSkillGameEx_Parms.bCompleted = bCompleted;

	pFnEndSkillGameEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndSkillGameEx, &EndSkillGameEx_Parms, NULL );

	pFnEndSkillGameEx->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Handler.StartSkillGameEx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                oUsingPawn                     ( CPF_Parm )
// class UObject*                 oPlaceable                     ( CPF_Parm )
// unsigned char                  nSkillGameType                 ( CPF_Parm )
// int                            nTotalButtonsToDisplay         ( CPF_Parm )
// float                          fButtonTimeout                 ( CPF_Parm )
// float                          fButtonDelayTime               ( CPF_Parm )

void UBioSkillGame_Handler::StartSkillGameEx ( class ABioPawn* oUsingPawn, class UObject* oPlaceable, unsigned char nSkillGameType, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime )
{
	static UFunction* pFnStartSkillGameEx = NULL;

	if ( ! pFnStartSkillGameEx )
		pFnStartSkillGameEx = (UFunction*) UObject::GObjObjects()->Data[ 49123 ];

	UBioSkillGame_Handler_execStartSkillGameEx_Parms StartSkillGameEx_Parms;
	StartSkillGameEx_Parms.oUsingPawn = oUsingPawn;
	StartSkillGameEx_Parms.oPlaceable = oPlaceable;
	StartSkillGameEx_Parms.nSkillGameType = nSkillGameType;
	StartSkillGameEx_Parms.nTotalButtonsToDisplay = nTotalButtonsToDisplay;
	StartSkillGameEx_Parms.fButtonTimeout = fButtonTimeout;
	StartSkillGameEx_Parms.fButtonDelayTime = fButtonDelayTime;

	pFnStartSkillGameEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartSkillGameEx, &StartSkillGameEx_Parms, NULL );

	pFnStartSkillGameEx->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame_Handler.InitializeStringReferences
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSkillGame_Handler::eventInitializeStringReferences ( )
{
	static UFunction* pFnInitializeStringReferences = NULL;

	if ( ! pFnInitializeStringReferences )
		pFnInitializeStringReferences = (UFunction*) UObject::GObjObjects()->Data[ 49116 ];

	UBioSkillGame_Handler_eventInitializeStringReferences_Parms InitializeStringReferences_Parms;

	this->ProcessEvent ( pFnInitializeStringReferences, &InitializeStringReferences_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Handler.InitializeSkillGameData
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ABioPawn*                oUsingPawn                     ( CPF_Parm )
// class UObject*                 oDependent                     ( CPF_Parm )
// unsigned char                  nSkillGameType                 ( CPF_Parm )
// int                            nTotalButtonsToDisplay         ( CPF_Parm )
// float                          fButtonTimeout                 ( CPF_Parm )
// float                          fButtonDelayTime               ( CPF_Parm )

void UBioSkillGame_Handler::eventInitializeSkillGameData ( class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime )
{
	static UFunction* pFnInitializeSkillGameData = NULL;

	if ( ! pFnInitializeSkillGameData )
		pFnInitializeSkillGameData = (UFunction*) UObject::GObjObjects()->Data[ 49109 ];

	UBioSkillGame_Handler_eventInitializeSkillGameData_Parms InitializeSkillGameData_Parms;
	InitializeSkillGameData_Parms.oUsingPawn = oUsingPawn;
	InitializeSkillGameData_Parms.oDependent = oDependent;
	InitializeSkillGameData_Parms.nSkillGameType = nSkillGameType;
	InitializeSkillGameData_Parms.nTotalButtonsToDisplay = nTotalButtonsToDisplay;
	InitializeSkillGameData_Parms.fButtonTimeout = fButtonTimeout;
	InitializeSkillGameData_Parms.fButtonDelayTime = fButtonDelayTime;

	this->ProcessEvent ( pFnInitializeSkillGameData, &InitializeSkillGameData_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Handler.OnCancelCallback
// [0x00120000] 
// Parameters infos:
// int                            n_SalvageUsed                  ( CPF_Parm )

void UBioSkillGame_Handler::OnCancelCallback ( int n_SalvageUsed )
{
	static UFunction* pFnOnCancelCallback = NULL;

	if ( ! pFnOnCancelCallback )
		pFnOnCancelCallback = (UFunction*) UObject::GObjObjects()->Data[ 49080 ];

	UBioSkillGame_Handler_execOnCancelCallback_Parms OnCancelCallback_Parms;
	OnCancelCallback_Parms.n_SalvageUsed = n_SalvageUsed;

	this->ProcessEvent ( pFnOnCancelCallback, &OnCancelCallback_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Handler.OnFailureCallback
// [0x00120000] 
// Parameters infos:
// int                            n_SalvageUsed                  ( CPF_Parm )

void UBioSkillGame_Handler::OnFailureCallback ( int n_SalvageUsed )
{
	static UFunction* pFnOnFailureCallback = NULL;

	if ( ! pFnOnFailureCallback )
		pFnOnFailureCallback = (UFunction*) UObject::GObjObjects()->Data[ 49082 ];

	UBioSkillGame_Handler_execOnFailureCallback_Parms OnFailureCallback_Parms;
	OnFailureCallback_Parms.n_SalvageUsed = n_SalvageUsed;

	this->ProcessEvent ( pFnOnFailureCallback, &OnFailureCallback_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Handler.OnSuccessCallback
// [0x00120000] 
// Parameters infos:
// int                            n_SalvageUsed                  ( CPF_Parm )

void UBioSkillGame_Handler::OnSuccessCallback ( int n_SalvageUsed )
{
	static UFunction* pFnOnSuccessCallback = NULL;

	if ( ! pFnOnSuccessCallback )
		pFnOnSuccessCallback = (UFunction*) UObject::GObjObjects()->Data[ 49084 ];

	UBioSkillGame_Handler_execOnSuccessCallback_Parms OnSuccessCallback_Parms;
	OnSuccessCallback_Parms.n_SalvageUsed = n_SalvageUsed;

	this->ProcessEvent ( pFnOnSuccessCallback, &OnSuccessCallback_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.UpdateMouseVisibilityState
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMassEffectGuiManager::UpdateMouseVisibilityState ( )
{
	static UFunction* pFnUpdateMouseVisibilityState = NULL;

	if ( ! pFnUpdateMouseVisibilityState )
		pFnUpdateMouseVisibilityState = (UFunction*) UObject::GObjObjects()->Data[ 51853 ];

	UMassEffectGuiManager_execUpdateMouseVisibilityState_Parms UpdateMouseVisibilityState_Parms;

	pFnUpdateMouseVisibilityState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMouseVisibilityState, &UpdateMouseVisibilityState_Parms, NULL );

	pFnUpdateMouseVisibilityState->FunctionFlags |= 0x400;
};

// Function SFXGame.MassEffectGuiManager.SetMouseVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 pObject                        ( CPF_Parm )
// unsigned long                  bShow                          ( CPF_Parm )

bool UMassEffectGuiManager::SetMouseVisibility ( class UObject* pObject, unsigned long bShow )
{
	static UFunction* pFnSetMouseVisibility = NULL;

	if ( ! pFnSetMouseVisibility )
		pFnSetMouseVisibility = (UFunction*) UObject::GObjObjects()->Data[ 51849 ];

	UMassEffectGuiManager_execSetMouseVisibility_Parms SetMouseVisibility_Parms;
	SetMouseVisibility_Parms.pObject = pObject;
	SetMouseVisibility_Parms.bShow = bShow;

	pFnSetMouseVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMouseVisibility, &SetMouseVisibility_Parms, NULL );

	pFnSetMouseVisibility->FunctionFlags |= 0x400;

	return SetMouseVisibility_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.DestroyPCRStore
// [0x00020002] 
// Parameters infos:

void UMassEffectGuiManager::DestroyPCRStore ( )
{
	static UFunction* pFnDestroyPCRStore = NULL;

	if ( ! pFnDestroyPCRStore )
		pFnDestroyPCRStore = (UFunction*) UObject::GObjObjects()->Data[ 51848 ];

	UMassEffectGuiManager_execDestroyPCRStore_Parms DestroyPCRStore_Parms;

	this->ProcessEvent ( pFnDestroyPCRStore, &DestroyPCRStore_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.CreatePCRStore
// [0x00020002] 
// Parameters infos:
// class USFXSFHandler_PRCShop*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXSFHandler_PRCShop* UMassEffectGuiManager::CreatePCRStore ( )
{
	static UFunction* pFnCreatePCRStore = NULL;

	if ( ! pFnCreatePCRStore )
		pFnCreatePCRStore = (UFunction*) UObject::GObjObjects()->Data[ 51844 ];

	UMassEffectGuiManager_execCreatePCRStore_Parms CreatePCRStore_Parms;

	this->ProcessEvent ( pFnCreatePCRStore, &CreatePCRStore_Parms, NULL );

	return CreatePCRStore_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.HideAreaMap
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UMassEffectGuiManager::HideAreaMap ( )
{
	static UFunction* pFnHideAreaMap = NULL;

	if ( ! pFnHideAreaMap )
		pFnHideAreaMap = (UFunction*) UObject::GObjObjects()->Data[ 51840 ];

	UMassEffectGuiManager_execHideAreaMap_Parms HideAreaMap_Parms;

	this->ProcessEvent ( pFnHideAreaMap, &HideAreaMap_Parms, NULL );

	return HideAreaMap_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.ShowAreaMap
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UMassEffectGuiManager::ShowAreaMap ( )
{
	static UFunction* pFnShowAreaMap = NULL;

	if ( ! pFnShowAreaMap )
		pFnShowAreaMap = (UFunction*) UObject::GObjObjects()->Data[ 51835 ];

	UMassEffectGuiManager_execShowAreaMap_Parms ShowAreaMap_Parms;

	this->ProcessEvent ( pFnShowAreaMap, &ShowAreaMap_Parms, NULL );

	return ShowAreaMap_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.GetAreaMapData
// [0x00020002] 
// Parameters infos:
// class USFXAreaMapData*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXAreaMapData* UMassEffectGuiManager::GetAreaMapData ( )
{
	static UFunction* pFnGetAreaMapData = NULL;

	if ( ! pFnGetAreaMapData )
		pFnGetAreaMapData = (UFunction*) UObject::GObjObjects()->Data[ 51833 ];

	UMassEffectGuiManager_execGetAreaMapData_Parms GetAreaMapData_Parms;

	this->ProcessEvent ( pFnGetAreaMapData, &GetAreaMapData_Parms, NULL );

	return GetAreaMapData_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.SetAreaMapData
// [0x00020002] 
// Parameters infos:
// class USFXAreaMapData*         oMapData                       ( CPF_Parm )

void UMassEffectGuiManager::SetAreaMapData ( class USFXAreaMapData* oMapData )
{
	static UFunction* pFnSetAreaMapData = NULL;

	if ( ! pFnSetAreaMapData )
		pFnSetAreaMapData = (UFunction*) UObject::GObjObjects()->Data[ 51831 ];

	UMassEffectGuiManager_execSetAreaMapData_Parms SetAreaMapData_Parms;
	SetAreaMapData_Parms.oMapData = oMapData;

	this->ProcessEvent ( pFnSetAreaMapData, &SetAreaMapData_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.GetBioPlayerController
// [0x00020002] 
// Parameters infos:
// class ABioPlayerController*    ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ABioPlayerController* UMassEffectGuiManager::GetBioPlayerController ( )
{
	static UFunction* pFnGetBioPlayerController = NULL;

	if ( ! pFnGetBioPlayerController )
		pFnGetBioPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 51829 ];

	UMassEffectGuiManager_execGetBioPlayerController_Parms GetBioPlayerController_Parms;

	this->ProcessEvent ( pFnGetBioPlayerController, &GetBioPlayerController_Parms, NULL );

	return GetBioPlayerController_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.GetPlayerController
// [0x00020002] 
// Parameters infos:
// class APlayerController*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class APlayerController* UMassEffectGuiManager::GetPlayerController ( )
{
	static UFunction* pFnGetPlayerController = NULL;

	if ( ! pFnGetPlayerController )
		pFnGetPlayerController = (UFunction*) UObject::GObjObjects()->Data[ 51827 ];

	UMassEffectGuiManager_execGetPlayerController_Parms GetPlayerController_Parms;

	this->ProcessEvent ( pFnGetPlayerController, &GetPlayerController_Parms, NULL );

	return GetPlayerController_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.GUICMD
// [0x00420002] 
// Parameters infos:
// struct FName                   nmPanelTag                     ( CPF_Parm )
// struct FString                 sCmd                           ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sArg1                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sArg2                          ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sResultMessage                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UMassEffectGuiManager::GUICMD ( struct FName nmPanelTag, struct FString sCmd, struct FString sArg1, struct FString sArg2, struct FString* sResultMessage )
{
	static UFunction* pFnGUICMD = NULL;

	if ( ! pFnGUICMD )
		pFnGUICMD = (UFunction*) UObject::GObjObjects()->Data[ 51817 ];

	UMassEffectGuiManager_execGUICMD_Parms GUICMD_Parms;
	memcpy ( &GUICMD_Parms.nmPanelTag, &nmPanelTag, 0x8 );
	memcpy ( &GUICMD_Parms.sCmd, &sCmd, 0xC );
	memcpy ( &GUICMD_Parms.sArg1, &sArg1, 0xC );
	memcpy ( &GUICMD_Parms.sArg2, &sArg2, 0xC );

	this->ProcessEvent ( pFnGUICMD, &GUICMD_Parms, NULL );

	if ( sResultMessage )
		memcpy ( sResultMessage, &GUICMD_Parms.sResultMessage, 0xC );
};

// Function SFXGame.MassEffectGuiManager.GUICMDStringToCategories
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// struct FString                 sArg1                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sArg2                          ( CPF_Parm | CPF_NeedCtorLink )
// TArray< unsigned char >        categories                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UMassEffectGuiManager::GUICMDStringToCategories ( struct FString sArg1, struct FString sArg2, TArray< unsigned char >* categories )
{
	static UFunction* pFnGUICMDStringToCategories = NULL;

	if ( ! pFnGUICMDStringToCategories )
		pFnGUICMDStringToCategories = (UFunction*) UObject::GObjObjects()->Data[ 51812 ];

	UMassEffectGuiManager_execGUICMDStringToCategories_Parms GUICMDStringToCategories_Parms;
	memcpy ( &GUICMDStringToCategories_Parms.sArg1, &sArg1, 0xC );
	memcpy ( &GUICMDStringToCategories_Parms.sArg2, &sArg2, 0xC );

	this->ProcessEvent ( pFnGUICMDStringToCategories, &GUICMDStringToCategories_Parms, NULL );

	if ( categories )
		memcpy ( categories, &GUICMDStringToCategories_Parms.categories, 0xC );
};

// Function SFXGame.MassEffectGuiManager.ForceSquadCommandFeedback
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  Command                        ( CPF_Parm )
// int                            MemberIdx                      ( CPF_Parm )
// unsigned long                  bCommandSuccess                ( CPF_Parm )

void UMassEffectGuiManager::ForceSquadCommandFeedback ( unsigned char Command, int MemberIdx, unsigned long bCommandSuccess )
{
	static UFunction* pFnForceSquadCommandFeedback = NULL;

	if ( ! pFnForceSquadCommandFeedback )
		pFnForceSquadCommandFeedback = (UFunction*) UObject::GObjObjects()->Data[ 51808 ];

	UMassEffectGuiManager_execForceSquadCommandFeedback_Parms ForceSquadCommandFeedback_Parms;
	ForceSquadCommandFeedback_Parms.Command = Command;
	ForceSquadCommandFeedback_Parms.MemberIdx = MemberIdx;
	ForceSquadCommandFeedback_Parms.bCommandSuccess = bCommandSuccess;

	pFnForceSquadCommandFeedback->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceSquadCommandFeedback, &ForceSquadCommandFeedback_Parms, NULL );

	pFnForceSquadCommandFeedback->FunctionFlags |= 0x400;
};

// Function SFXGame.MassEffectGuiManager.GetAreaMapHandler
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USFXSFHandler_AreaMap*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXSFHandler_AreaMap* UMassEffectGuiManager::GetAreaMapHandler ( )
{
	static UFunction* pFnGetAreaMapHandler = NULL;

	if ( ! pFnGetAreaMapHandler )
		pFnGetAreaMapHandler = (UFunction*) UObject::GObjObjects()->Data[ 51805 ];

	UMassEffectGuiManager_execGetAreaMapHandler_Parms GetAreaMapHandler_Parms;

	this->ProcessEvent ( pFnGetAreaMapHandler, &GetAreaMapHandler_Parms, NULL );

	return GetAreaMapHandler_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.GetDecryptionHandler
// [0x00020002] 
// Parameters infos:
// class UBioSkillGame_Decryption_Handler* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSkillGame_Decryption_Handler* UMassEffectGuiManager::GetDecryptionHandler ( )
{
	static UFunction* pFnGetDecryptionHandler = NULL;

	if ( ! pFnGetDecryptionHandler )
		pFnGetDecryptionHandler = (UFunction*) UObject::GObjObjects()->Data[ 51800 ];

	UMassEffectGuiManager_execGetDecryptionHandler_Parms GetDecryptionHandler_Parms;

	this->ProcessEvent ( pFnGetDecryptionHandler, &GetDecryptionHandler_Parms, NULL );

	return GetDecryptionHandler_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.GetMainMenuHandler
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UBioSFHandler_MainMenu*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSFHandler_MainMenu* UMassEffectGuiManager::GetMainMenuHandler ( )
{
	static UFunction* pFnGetMainMenuHandler = NULL;

	if ( ! pFnGetMainMenuHandler )
		pFnGetMainMenuHandler = (UFunction*) UObject::GObjObjects()->Data[ 34088 ];

	UMassEffectGuiManager_execGetMainMenuHandler_Parms GetMainMenuHandler_Parms;

	this->ProcessEvent ( pFnGetMainMenuHandler, &GetMainMenuHandler_Parms, NULL );

	return GetMainMenuHandler_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.HidePersonalizationGUI
// [0x00020002] 
// Parameters infos:

void UMassEffectGuiManager::HidePersonalizationGUI ( )
{
	static UFunction* pFnHidePersonalizationGUI = NULL;

	if ( ! pFnHidePersonalizationGUI )
		pFnHidePersonalizationGUI = (UFunction*) UObject::GObjObjects()->Data[ 51795 ];

	UMassEffectGuiManager_execHidePersonalizationGUI_Parms HidePersonalizationGUI_Parms;

	this->ProcessEvent ( pFnHidePersonalizationGUI, &HidePersonalizationGUI_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowPersonalizationGUI
// [0x00020002] 
// Parameters infos:

void UMassEffectGuiManager::ShowPersonalizationGUI ( )
{
	static UFunction* pFnShowPersonalizationGUI = NULL;

	if ( ! pFnShowPersonalizationGUI )
		pFnShowPersonalizationGUI = (UFunction*) UObject::GObjObjects()->Data[ 51793 ];

	UMassEffectGuiManager_execShowPersonalizationGUI_Parms ShowPersonalizationGUI_Parms;

	this->ProcessEvent ( pFnShowPersonalizationGUI, &ShowPersonalizationGUI_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.SetDistanceOnSniperOverlay
// [0x00020002] 
// Parameters infos:
// int                            nDistance                      ( CPF_Parm )

void UMassEffectGuiManager::SetDistanceOnSniperOverlay ( int nDistance )
{
	static UFunction* pFnSetDistanceOnSniperOverlay = NULL;

	if ( ! pFnSetDistanceOnSniperOverlay )
		pFnSetDistanceOnSniperOverlay = (UFunction*) UObject::GObjObjects()->Data[ 51788 ];

	UMassEffectGuiManager_execSetDistanceOnSniperOverlay_Parms SetDistanceOnSniperOverlay_Parms;
	SetDistanceOnSniperOverlay_Parms.nDistance = nDistance;

	this->ProcessEvent ( pFnSetDistanceOnSniperOverlay, &SetDistanceOnSniperOverlay_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.HideSniperOverlay
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UMassEffectGuiManager::HideSniperOverlay ( )
{
	static UFunction* pFnHideSniperOverlay = NULL;

	if ( ! pFnHideSniperOverlay )
		pFnHideSniperOverlay = (UFunction*) UObject::GObjObjects()->Data[ 44726 ];

	UMassEffectGuiManager_execHideSniperOverlay_Parms HideSniperOverlay_Parms;

	this->ProcessEvent ( pFnHideSniperOverlay, &HideSniperOverlay_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowSniperOverlay
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UMassEffectGuiManager::ShowSniperOverlay ( )
{
	static UFunction* pFnShowSniperOverlay = NULL;

	if ( ! pFnShowSniperOverlay )
		pFnShowSniperOverlay = (UFunction*) UObject::GObjObjects()->Data[ 45561 ];

	UMassEffectGuiManager_execShowSniperOverlay_Parms ShowSniperOverlay_Parms;

	this->ProcessEvent ( pFnShowSniperOverlay, &ShowSniperOverlay_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.GetConversationHandler
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UBioSFHandler_Conversation* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSFHandler_Conversation* UMassEffectGuiManager::GetConversationHandler ( )
{
	static UFunction* pFnGetConversationHandler = NULL;

	if ( ! pFnGetConversationHandler )
		pFnGetConversationHandler = (UFunction*) UObject::GObjObjects()->Data[ 51786 ];

	UMassEffectGuiManager_execGetConversationHandler_Parms GetConversationHandler_Parms;

	this->ProcessEvent ( pFnGetConversationHandler, &GetConversationHandler_Parms, NULL );

	return GetConversationHandler_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.GameSessionEnded
// [0x00020002] 
// Parameters infos:

void UMassEffectGuiManager::GameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 51785 ];

	UMassEffectGuiManager_execGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.CleanUp
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMassEffectGuiManager::CleanUp ( )
{
	static UFunction* pFnCleanUp = NULL;

	if ( ! pFnCleanUp )
		pFnCleanUp = (UFunction*) UObject::GObjObjects()->Data[ 51784 ];

	UMassEffectGuiManager_execCleanUp_Parms CleanUp_Parms;

	pFnCleanUp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCleanUp, &CleanUp_Parms, NULL );

	pFnCleanUp->FunctionFlags |= 0x400;
};

// Function SFXGame.MassEffectGuiManager.StopSound
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmSound                        ( CPF_Parm )

bool UMassEffectGuiManager::StopSound ( struct FName nmSound )
{
	static UFunction* pFnStopSound = NULL;

	if ( ! pFnStopSound )
		pFnStopSound = (UFunction*) UObject::GObjObjects()->Data[ 51781 ];

	UMassEffectGuiManager_execStopSound_Parms StopSound_Parms;
	memcpy ( &StopSound_Parms.nmSound, &nmSound, 0x8 );

	pFnStopSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopSound, &StopSound_Parms, NULL );

	pFnStopSound->FunctionFlags |= 0x400;

	return StopSound_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.PlaySound
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmSound                        ( CPF_Parm )

bool UMassEffectGuiManager::PlaySound ( struct FName nmSound )
{
	static UFunction* pFnPlaySound = NULL;

	if ( ! pFnPlaySound )
		pFnPlaySound = (UFunction*) UObject::GObjObjects()->Data[ 51778 ];

	UMassEffectGuiManager_execPlaySound_Parms PlaySound_Parms;
	memcpy ( &PlaySound_Parms.nmSound, &nmSound, 0x8 );

	pFnPlaySound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlaySound, &PlaySound_Parms, NULL );

	pFnPlaySound->FunctionFlags |= 0x400;

	return PlaySound_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.CreateChoiceGUI
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioSFHandler_ChoiceGUI* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmTag                          ( CPF_OptionalParm | CPF_Parm )

class UBioSFHandler_ChoiceGUI* UMassEffectGuiManager::CreateChoiceGUI ( struct FName nmTag )
{
	static UFunction* pFnCreateChoiceGUI = NULL;

	if ( ! pFnCreateChoiceGUI )
		pFnCreateChoiceGUI = (UFunction*) UObject::GObjObjects()->Data[ 51775 ];

	UMassEffectGuiManager_execCreateChoiceGUI_Parms CreateChoiceGUI_Parms;
	memcpy ( &CreateChoiceGUI_Parms.nmTag, &nmTag, 0x8 );

	pFnCreateChoiceGUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateChoiceGUI, &CreateChoiceGUI_Parms, NULL );

	pFnCreateChoiceGUI->FunctionFlags |= 0x400;

	return CreateChoiceGUI_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.CreateMessageBox
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioSFHandler_MessageBox* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSFHandler_MessageBox* UMassEffectGuiManager::CreateMessageBox ( )
{
	static UFunction* pFnCreateMessageBox = NULL;

	if ( ! pFnCreateMessageBox )
		pFnCreateMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 51773 ];

	UMassEffectGuiManager_execCreateMessageBox_Parms CreateMessageBox_Parms;

	pFnCreateMessageBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateMessageBox, &CreateMessageBox_Parms, NULL );

	pFnCreateMessageBox->FunctionFlags |= 0x400;

	return CreateMessageBox_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.CreateHintBox
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioSFHandler_MessageBox* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSFHandler_MessageBox* UMassEffectGuiManager::CreateHintBox ( )
{
	static UFunction* pFnCreateHintBox = NULL;

	if ( ! pFnCreateHintBox )
		pFnCreateHintBox = (UFunction*) UObject::GObjObjects()->Data[ 51771 ];

	UMassEffectGuiManager_execCreateHintBox_Parms CreateHintBox_Parms;

	pFnCreateHintBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateHintBox, &CreateHintBox_Parms, NULL );

	pFnCreateHintBox->FunctionFlags |= 0x400;

	return CreateHintBox_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.UpdateHint
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )
// class UBioSFHandler_MessageBox* oMsgBox                        ( CPF_Parm )

void UMassEffectGuiManager::UpdateHint ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox )
{
	static UFunction* pFnUpdateHint = NULL;

	if ( ! pFnUpdateHint )
		pFnUpdateHint = (UFunction*) UObject::GObjObjects()->Data[ 51768 ];

	UMassEffectGuiManager_execUpdateHint_Parms UpdateHint_Parms;
	UpdateHint_Parms.fDeltaT = fDeltaT;
	UpdateHint_Parms.oMsgBox = oMsgBox;

	this->ProcessEvent ( pFnUpdateHint, &UpdateHint_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.DestroyNetworkGUI
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   HandlerId                      ( CPF_Parm )

void UMassEffectGuiManager::eventDestroyNetworkGUI ( struct FName HandlerId )
{
	static UFunction* pFnDestroyNetworkGUI = NULL;

	if ( ! pFnDestroyNetworkGUI )
		pFnDestroyNetworkGUI = (UFunction*) UObject::GObjObjects()->Data[ 51766 ];

	UMassEffectGuiManager_eventDestroyNetworkGUI_Parms DestroyNetworkGUI_Parms;
	memcpy ( &DestroyNetworkGUI_Parms.HandlerId, &HandlerId, 0x8 );

	this->ProcessEvent ( pFnDestroyNetworkGUI, &DestroyNetworkGUI_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.CreateNetworkGUI
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class USFXSFHandler_EANetworking* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   HandlerId                      ( CPF_Parm )

class USFXSFHandler_EANetworking* UMassEffectGuiManager::eventCreateNetworkGUI ( struct FName HandlerId )
{
	static UFunction* pFnCreateNetworkGUI = NULL;

	if ( ! pFnCreateNetworkGUI )
		pFnCreateNetworkGUI = (UFunction*) UObject::GObjObjects()->Data[ 51761 ];

	UMassEffectGuiManager_eventCreateNetworkGUI_Parms CreateNetworkGUI_Parms;
	memcpy ( &CreateNetworkGUI_Parms.HandlerId, &HandlerId, 0x8 );

	this->ProcessEvent ( pFnCreateNetworkGUI, &CreateNetworkGUI_Parms, NULL );

	return CreateNetworkGUI_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.RestoreHint
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventRestoreHint ( )
{
	static UFunction* pFnRestoreHint = NULL;

	if ( ! pFnRestoreHint )
		pFnRestoreHint = (UFunction*) UObject::GObjObjects()->Data[ 51760 ];

	UMassEffectGuiManager_eventRestoreHint_Parms RestoreHint_Parms;

	this->ProcessEvent ( pFnRestoreHint, &RestoreHint_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.HideHint
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventHideHint ( )
{
	static UFunction* pFnHideHint = NULL;

	if ( ! pFnHideHint )
		pFnHideHint = (UFunction*) UObject::GObjObjects()->Data[ 51759 ];

	UMassEffectGuiManager_eventHideHint_Parms HideHint_Parms;

	this->ProcessEvent ( pFnHideHint, &HideHint_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.CancelHint
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventCancelHint ( )
{
	static UFunction* pFnCancelHint = NULL;

	if ( ! pFnCancelHint )
		pFnCancelHint = (UFunction*) UObject::GObjObjects()->Data[ 51757 ];

	UMassEffectGuiManager_eventCancelHint_Parms CancelHint_Parms;

	this->ProcessEvent ( pFnCancelHint, &CancelHint_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowHint
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDisplayTime                   ( CPF_Parm )
// int                            nIcon                          ( CPF_OptionalParm | CPF_Parm )
// unsigned char                  ePosition                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCached                        ( CPF_OptionalParm | CPF_Parm )

void UMassEffectGuiManager::eventShowHint ( float fDisplayTime, int nIcon, unsigned char ePosition, unsigned long bCached )
{
	static UFunction* pFnShowHint = NULL;

	if ( ! pFnShowHint )
		pFnShowHint = (UFunction*) UObject::GObjObjects()->Data[ 51751 ];

	UMassEffectGuiManager_eventShowHint_Parms ShowHint_Parms;
	ShowHint_Parms.fDisplayTime = fDisplayTime;
	ShowHint_Parms.nIcon = nIcon;
	ShowHint_Parms.ePosition = ePosition;
	ShowHint_Parms.bCached = bCached;

	this->ProcessEvent ( pFnShowHint, &ShowHint_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowPlatformSpecificHint
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDisplayTime                   ( CPF_Parm )
// unsigned char                  ePosition                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCached                        ( CPF_OptionalParm | CPF_Parm )

void UMassEffectGuiManager::eventShowPlatformSpecificHint ( float fDisplayTime, unsigned char ePosition, unsigned long bCached )
{
	static UFunction* pFnShowPlatformSpecificHint = NULL;

	if ( ! pFnShowPlatformSpecificHint )
		pFnShowPlatformSpecificHint = (UFunction*) UObject::GObjObjects()->Data[ 51741 ];

	UMassEffectGuiManager_eventShowPlatformSpecificHint_Parms ShowPlatformSpecificHint_Parms;
	ShowPlatformSpecificHint_Parms.fDisplayTime = fDisplayTime;
	ShowPlatformSpecificHint_Parms.ePosition = ePosition;
	ShowPlatformSpecificHint_Parms.bCached = bCached;

	this->ProcessEvent ( pFnShowPlatformSpecificHint, &ShowPlatformSpecificHint_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.GetBrowserHandler
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioSFHandler_BrowserWheel* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSFHandler_BrowserWheel* UMassEffectGuiManager::GetBrowserHandler ( )
{
	static UFunction* pFnGetBrowserHandler = NULL;

	if ( ! pFnGetBrowserHandler )
		pFnGetBrowserHandler = (UFunction*) UObject::GObjObjects()->Data[ 51739 ];

	UMassEffectGuiManager_execGetBrowserHandler_Parms GetBrowserHandler_Parms;

	pFnGetBrowserHandler->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBrowserHandler, &GetBrowserHandler_Parms, NULL );

	pFnGetBrowserHandler->FunctionFlags |= 0x400;

	return GetBrowserHandler_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.GetDUIHandler
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioSFHandler_DesignerUI* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSFHandler_DesignerUI* UMassEffectGuiManager::GetDUIHandler ( )
{
	static UFunction* pFnGetDUIHandler = NULL;

	if ( ! pFnGetDUIHandler )
		pFnGetDUIHandler = (UFunction*) UObject::GObjObjects()->Data[ 44413 ];

	UMassEffectGuiManager_execGetDUIHandler_Parms GetDUIHandler_Parms;

	pFnGetDUIHandler->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDUIHandler, &GetDUIHandler_Parms, NULL );

	pFnGetDUIHandler->FunctionFlags |= 0x400;

	return GetDUIHandler_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.GetCachedHudHandler
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USFXSFHandler_HUD*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXSFHandler_HUD* UMassEffectGuiManager::GetCachedHudHandler ( )
{
	static UFunction* pFnGetCachedHudHandler = NULL;

	if ( ! pFnGetCachedHudHandler )
		pFnGetCachedHudHandler = (UFunction*) UObject::GObjObjects()->Data[ 51736 ];

	UMassEffectGuiManager_execGetCachedHudHandler_Parms GetCachedHudHandler_Parms;

	pFnGetCachedHudHandler->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCachedHudHandler, &GetCachedHudHandler_Parms, NULL );

	pFnGetCachedHudHandler->FunctionFlags |= 0x400;

	return GetCachedHudHandler_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.SetWheelState
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned char                  nPage                          ( CPF_Parm )
// unsigned char                  nState                         ( CPF_Parm )

void UMassEffectGuiManager::SetWheelState ( unsigned char nPage, unsigned char nState )
{
	static UFunction* pFnSetWheelState = NULL;

	if ( ! pFnSetWheelState )
		pFnSetWheelState = (UFunction*) UObject::GObjObjects()->Data[ 51733 ];

	UMassEffectGuiManager_execSetWheelState_Parms SetWheelState_Parms;
	SetWheelState_Parms.nPage = nPage;
	SetWheelState_Parms.nState = nState;

	pFnSetWheelState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWheelState, &SetWheelState_Parms, NULL );

	pFnSetWheelState->FunctionFlags |= 0x400;
};

// Function SFXGame.MassEffectGuiManager.HideClimbMantleWidget
// [0x00020801] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventHideClimbMantleWidget ( )
{
	static UFunction* pFnHideClimbMantleWidget = NULL;

	if ( ! pFnHideClimbMantleWidget )
		pFnHideClimbMantleWidget = (UFunction*) UObject::GObjObjects()->Data[ 51732 ];

	UMassEffectGuiManager_eventHideClimbMantleWidget_Parms HideClimbMantleWidget_Parms;

	this->ProcessEvent ( pFnHideClimbMantleWidget, &HideClimbMantleWidget_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowClimbMantleWidget
// [0x00020801] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned long                  bMantle                        ( CPF_Parm )

void UMassEffectGuiManager::eventShowClimbMantleWidget ( unsigned long bMantle )
{
	static UFunction* pFnShowClimbMantleWidget = NULL;

	if ( ! pFnShowClimbMantleWidget )
		pFnShowClimbMantleWidget = (UFunction*) UObject::GObjObjects()->Data[ 51730 ];

	UMassEffectGuiManager_eventShowClimbMantleWidget_Parms ShowClimbMantleWidget_Parms;
	ShowClimbMantleWidget_Parms.bMantle = bMantle;

	this->ProcessEvent ( pFnShowClimbMantleWidget, &ShowClimbMantleWidget_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.HideCoverWidget
// [0x00020801] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventHideCoverWidget ( )
{
	static UFunction* pFnHideCoverWidget = NULL;

	if ( ! pFnHideCoverWidget )
		pFnHideCoverWidget = (UFunction*) UObject::GObjObjects()->Data[ 41995 ];

	UMassEffectGuiManager_eventHideCoverWidget_Parms HideCoverWidget_Parms;

	this->ProcessEvent ( pFnHideCoverWidget, &HideCoverWidget_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowCoverWidget
// [0x00020801] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventShowCoverWidget ( )
{
	static UFunction* pFnShowCoverWidget = NULL;

	if ( ! pFnShowCoverWidget )
		pFnShowCoverWidget = (UFunction*) UObject::GObjObjects()->Data[ 51729 ];

	UMassEffectGuiManager_eventShowCoverWidget_Parms ShowCoverWidget_Parms;

	this->ProcessEvent ( pFnShowCoverWidget, &ShowCoverWidget_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.OnPlayerDeath
// [0x00020002] 
// Parameters infos:

void UMassEffectGuiManager::OnPlayerDeath ( )
{
	static UFunction* pFnOnPlayerDeath = NULL;

	if ( ! pFnOnPlayerDeath )
		pFnOnPlayerDeath = (UFunction*) UObject::GObjObjects()->Data[ 51727 ];

	UMassEffectGuiManager_execOnPlayerDeath_Parms OnPlayerDeath_Parms;

	this->ProcessEvent ( pFnOnPlayerDeath, &OnPlayerDeath_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.HideSkillGameBypass
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventHideSkillGameBypass ( )
{
	static UFunction* pFnHideSkillGameBypass = NULL;

	if ( ! pFnHideSkillGameBypass )
		pFnHideSkillGameBypass = (UFunction*) UObject::GObjObjects()->Data[ 51724 ];

	UMassEffectGuiManager_eventHideSkillGameBypass_Parms HideSkillGameBypass_Parms;

	this->ProcessEvent ( pFnHideSkillGameBypass, &HideSkillGameBypass_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowSkillGameBypass
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UBioSkillGame_Bypass_Handler* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSkillGame_Bypass_Handler* UMassEffectGuiManager::eventShowSkillGameBypass ( )
{
	static UFunction* pFnShowSkillGameBypass = NULL;

	if ( ! pFnShowSkillGameBypass )
		pFnShowSkillGameBypass = (UFunction*) UObject::GObjObjects()->Data[ 51720 ];

	UMassEffectGuiManager_eventShowSkillGameBypass_Parms ShowSkillGameBypass_Parms;

	this->ProcessEvent ( pFnShowSkillGameBypass, &ShowSkillGameBypass_Parms, NULL );

	return ShowSkillGameBypass_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.HideSkillGameDecryption
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventHideSkillGameDecryption ( )
{
	static UFunction* pFnHideSkillGameDecryption = NULL;

	if ( ! pFnHideSkillGameDecryption )
		pFnHideSkillGameDecryption = (UFunction*) UObject::GObjObjects()->Data[ 51717 ];

	UMassEffectGuiManager_eventHideSkillGameDecryption_Parms HideSkillGameDecryption_Parms;

	this->ProcessEvent ( pFnHideSkillGameDecryption, &HideSkillGameDecryption_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowSkillGameDecryption
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UBioSkillGame_Decryption_Handler* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSkillGame_Decryption_Handler* UMassEffectGuiManager::eventShowSkillGameDecryption ( )
{
	static UFunction* pFnShowSkillGameDecryption = NULL;

	if ( ! pFnShowSkillGameDecryption )
		pFnShowSkillGameDecryption = (UFunction*) UObject::GObjObjects()->Data[ 51713 ];

	UMassEffectGuiManager_eventShowSkillGameDecryption_Parms ShowSkillGameDecryption_Parms;

	this->ProcessEvent ( pFnShowSkillGameDecryption, &ShowSkillGameDecryption_Parms, NULL );

	return ShowSkillGameDecryption_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.InterruptActiveSkillGame
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventInterruptActiveSkillGame ( )
{
	static UFunction* pFnInterruptActiveSkillGame = NULL;

	if ( ! pFnInterruptActiveSkillGame )
		pFnInterruptActiveSkillGame = (UFunction*) UObject::GObjObjects()->Data[ 51707 ];

	UMassEffectGuiManager_eventInterruptActiveSkillGame_Parms InterruptActiveSkillGame_Parms;

	this->ProcessEvent ( pFnInterruptActiveSkillGame, &InterruptActiveSkillGame_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.HideSkillGame
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventHideSkillGame ( )
{
	static UFunction* pFnHideSkillGame = NULL;

	if ( ! pFnHideSkillGame )
		pFnHideSkillGame = (UFunction*) UObject::GObjObjects()->Data[ 51703 ];

	UMassEffectGuiManager_eventHideSkillGame_Parms HideSkillGame_Parms;

	this->ProcessEvent ( pFnHideSkillGame, &HideSkillGame_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowSkillGame
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UBioSkillGame_Handler*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSkillGame_Handler* UMassEffectGuiManager::eventShowSkillGame ( )
{
	static UFunction* pFnShowSkillGame = NULL;

	if ( ! pFnShowSkillGame )
		pFnShowSkillGame = (UFunction*) UObject::GObjObjects()->Data[ 51699 ];

	UMassEffectGuiManager_eventShowSkillGame_Parms ShowSkillGame_Parms;

	this->ProcessEvent ( pFnShowSkillGame, &ShowSkillGame_Parms, NULL );

	return ShowSkillGame_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.BlackScreenFadeFinished
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UMassEffectGuiManager::BlackScreenFadeFinished ( )
{
	static UFunction* pFnBlackScreenFadeFinished = NULL;

	if ( ! pFnBlackScreenFadeFinished )
		pFnBlackScreenFadeFinished = (UFunction*) UObject::GObjObjects()->Data[ 44244 ];

	UMassEffectGuiManager_execBlackScreenFadeFinished_Parms BlackScreenFadeFinished_Parms;

	this->ProcessEvent ( pFnBlackScreenFadeFinished, &BlackScreenFadeFinished_Parms, NULL );

	return BlackScreenFadeFinished_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.HideBlackScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWithFade                      ( CPF_Parm )

void UMassEffectGuiManager::HideBlackScreen ( unsigned long bWithFade )
{
	static UFunction* pFnHideBlackScreen = NULL;

	if ( ! pFnHideBlackScreen )
		pFnHideBlackScreen = (UFunction*) UObject::GObjObjects()->Data[ 44237 ];

	UMassEffectGuiManager_execHideBlackScreen_Parms HideBlackScreen_Parms;
	HideBlackScreen_Parms.bWithFade = bWithFade;

	this->ProcessEvent ( pFnHideBlackScreen, &HideBlackScreen_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowBlackScreen
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bWithFade                      ( CPF_Parm )

void UMassEffectGuiManager::ShowBlackScreen ( unsigned long bWithFade )
{
	static UFunction* pFnShowBlackScreen = NULL;

	if ( ! pFnShowBlackScreen )
		pFnShowBlackScreen = (UFunction*) UObject::GObjObjects()->Data[ 44236 ];

	UMassEffectGuiManager_execShowBlackScreen_Parms ShowBlackScreen_Parms;
	ShowBlackScreen_Parms.bWithFade = bWithFade;

	this->ProcessEvent ( pFnShowBlackScreen, &ShowBlackScreen_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.HideGameOverGui
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UMassEffectGuiManager::HideGameOverGui ( )
{
	static UFunction* pFnHideGameOverGui = NULL;

	if ( ! pFnHideGameOverGui )
		pFnHideGameOverGui = (UFunction*) UObject::GObjObjects()->Data[ 47107 ];

	UMassEffectGuiManager_execHideGameOverGui_Parms HideGameOverGui_Parms;

	this->ProcessEvent ( pFnHideGameOverGui, &HideGameOverGui_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowGameOverGui
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UMassEffectGuiManager::ShowGameOverGui ( )
{
	static UFunction* pFnShowGameOverGui = NULL;

	if ( ! pFnShowGameOverGui )
		pFnShowGameOverGui = (UFunction*) UObject::GObjObjects()->Data[ 33269 ];

	UMassEffectGuiManager_execShowGameOverGui_Parms ShowGameOverGui_Parms;

	this->ProcessEvent ( pFnShowGameOverGui, &ShowGameOverGui_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.HidePartySelect
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UMassEffectGuiManager::HidePartySelect ( )
{
	static UFunction* pFnHidePartySelect = NULL;

	if ( ! pFnHidePartySelect )
		pFnHidePartySelect = (UFunction*) UObject::GObjObjects()->Data[ 48497 ];

	UMassEffectGuiManager_execHidePartySelect_Parms HidePartySelect_Parms;

	this->ProcessEvent ( pFnHidePartySelect, &HidePartySelect_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.LaunchCharacterCreation
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UBioSFHandler_NewCharacter* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// TArray< class UAnimSet* >      a_AnimSets                     ( CPF_Parm | CPF_NeedCtorLink )
// TArray< class UClass* >        a_CharacterClasses             ( CPF_Parm | CPF_NeedCtorLink )
// class USFXMorphFaceFrontEndDataSource* a_MaleDataSource               ( CPF_Parm )
// class USFXMorphFaceFrontEndDataSource* a_FemaleDataSource             ( CPF_Parm )

class UBioSFHandler_NewCharacter* UMassEffectGuiManager::eventLaunchCharacterCreation ( TArray< class UAnimSet* > a_AnimSets, TArray< class UClass* > a_CharacterClasses, class USFXMorphFaceFrontEndDataSource* a_MaleDataSource, class USFXMorphFaceFrontEndDataSource* a_FemaleDataSource )
{
	static UFunction* pFnLaunchCharacterCreation = NULL;

	if ( ! pFnLaunchCharacterCreation )
		pFnLaunchCharacterCreation = (UFunction*) UObject::GObjObjects()->Data[ 51679 ];

	UMassEffectGuiManager_eventLaunchCharacterCreation_Parms LaunchCharacterCreation_Parms;
	memcpy ( &LaunchCharacterCreation_Parms.a_AnimSets, &a_AnimSets, 0xC );
	memcpy ( &LaunchCharacterCreation_Parms.a_CharacterClasses, &a_CharacterClasses, 0xC );
	LaunchCharacterCreation_Parms.a_MaleDataSource = a_MaleDataSource;
	LaunchCharacterCreation_Parms.a_FemaleDataSource = a_FemaleDataSource;

	this->ProcessEvent ( pFnLaunchCharacterCreation, &LaunchCharacterCreation_Parms, NULL );

	return LaunchCharacterCreation_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.PlayCharacterCreation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class UBioSFHandler_NewCharacter* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSFHandler_NewCharacter* UMassEffectGuiManager::PlayCharacterCreation ( )
{
	static UFunction* pFnPlayCharacterCreation = NULL;

	if ( ! pFnPlayCharacterCreation )
		pFnPlayCharacterCreation = (UFunction*) UObject::GObjObjects()->Data[ 51677 ];

	UMassEffectGuiManager_execPlayCharacterCreation_Parms PlayCharacterCreation_Parms;

	pFnPlayCharacterCreation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayCharacterCreation, &PlayCharacterCreation_Parms, NULL );

	pFnPlayCharacterCreation->FunctionFlags |= 0x400;

	return PlayCharacterCreation_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.PlayCredits
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UBioSFHandler_Credits*   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSFHandler_Credits* UMassEffectGuiManager::PlayCredits ( )
{
	static UFunction* pFnPlayCredits = NULL;

	if ( ! pFnPlayCredits )
		pFnPlayCredits = (UFunction*) UObject::GObjObjects()->Data[ 45472 ];

	UMassEffectGuiManager_execPlayCredits_Parms PlayCredits_Parms;

	this->ProcessEvent ( pFnPlayCredits, &PlayCredits_Parms, NULL );

	return PlayCredits_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.ShowPartySelect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UBioSFHandler_PartySelection* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmForcedHenchman               ( CPF_OptionalParm | CPF_Parm )

class UBioSFHandler_PartySelection* UMassEffectGuiManager::ShowPartySelect ( struct FName nmForcedHenchman )
{
	static UFunction* pFnShowPartySelect = NULL;

	if ( ! pFnShowPartySelect )
		pFnShowPartySelect = (UFunction*) UObject::GObjObjects()->Data[ 51667 ];

	UMassEffectGuiManager_execShowPartySelect_Parms ShowPartySelect_Parms;
	memcpy ( &ShowPartySelect_Parms.nmForcedHenchman, &nmForcedHenchman, 0x8 );

	this->ProcessEvent ( pFnShowPartySelect, &ShowPartySelect_Parms, NULL );

	return ShowPartySelect_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.HideSpecializationGui
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventHideSpecializationGui ( )
{
	static UFunction* pFnHideSpecializationGui = NULL;

	if ( ! pFnHideSpecializationGui )
		pFnHideSpecializationGui = (UFunction*) UObject::GObjObjects()->Data[ 48785 ];

	UMassEffectGuiManager_eventHideSpecializationGui_Parms HideSpecializationGui_Parms;

	this->ProcessEvent ( pFnHideSpecializationGui, &HideSpecializationGui_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowSpecializationGUI
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )
// struct FName                   nmPowerName                    ( CPF_Parm )

bool UMassEffectGuiManager::ShowSpecializationGUI ( class ABioPawn* oPawn, struct FName nmPowerName )
{
	static UFunction* pFnShowSpecializationGUI = NULL;

	if ( ! pFnShowSpecializationGUI )
		pFnShowSpecializationGUI = (UFunction*) UObject::GObjObjects()->Data[ 51661 ];

	UMassEffectGuiManager_execShowSpecializationGUI_Parms ShowSpecializationGUI_Parms;
	ShowSpecializationGUI_Parms.oPawn = oPawn;
	memcpy ( &ShowSpecializationGUI_Parms.nmPowerName, &nmPowerName, 0x8 );

	this->ProcessEvent ( pFnShowSpecializationGUI, &ShowSpecializationGUI_Parms, NULL );

	return ShowSpecializationGUI_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.HideGuiByTag
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// struct FName                   sTag                           ( CPF_Parm )

void UMassEffectGuiManager::eventHideGuiByTag ( struct FName sTag )
{
	static UFunction* pFnHideGuiByTag = NULL;

	if ( ! pFnHideGuiByTag )
		pFnHideGuiByTag = (UFunction*) UObject::GObjObjects()->Data[ 51658 ];

	UMassEffectGuiManager_eventHideGuiByTag_Parms HideGuiByTag_Parms;
	memcpy ( &HideGuiByTag_Parms.sTag, &sTag, 0x8 );

	this->ProcessEvent ( pFnHideGuiByTag, &HideGuiByTag_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.HideAchievementGui
// [0x00020002] 
// Parameters infos:

void UMassEffectGuiManager::HideAchievementGui ( )
{
	static UFunction* pFnHideAchievementGui = NULL;

	if ( ! pFnHideAchievementGui )
		pFnHideAchievementGui = (UFunction*) UObject::GObjObjects()->Data[ 51656 ];

	UMassEffectGuiManager_execHideAchievementGui_Parms HideAchievementGui_Parms;

	this->ProcessEvent ( pFnHideAchievementGui, &HideAchievementGui_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowAchievementGui
// [0x00020002] 
// Parameters infos:

void UMassEffectGuiManager::ShowAchievementGui ( )
{
	static UFunction* pFnShowAchievementGui = NULL;

	if ( ! pFnShowAchievementGui )
		pFnShowAchievementGui = (UFunction*) UObject::GObjObjects()->Data[ 51653 ];

	UMassEffectGuiManager_execShowAchievementGui_Parms ShowAchievementGui_Parms;

	this->ProcessEvent ( pFnShowAchievementGui, &ShowAchievementGui_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.HideBrowserWheel
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UBioSFPanel*             oCurrentPanel                  ( CPF_OptionalParm | CPF_Parm )

void UMassEffectGuiManager::eventHideBrowserWheel ( class UBioSFPanel* oCurrentPanel )
{
	static UFunction* pFnHideBrowserWheel = NULL;

	if ( ! pFnHideBrowserWheel )
		pFnHideBrowserWheel = (UFunction*) UObject::GObjObjects()->Data[ 46376 ];

	UMassEffectGuiManager_eventHideBrowserWheel_Parms HideBrowserWheel_Parms;
	HideBrowserWheel_Parms.oCurrentPanel = oCurrentPanel;

	this->ProcessEvent ( pFnHideBrowserWheel, &HideBrowserWheel_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ReturnToBrowserWheel
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UBioSFPanel*             oCurrentPanel                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bExitImmediately               ( CPF_OptionalParm | CPF_Parm )

void UMassEffectGuiManager::eventReturnToBrowserWheel ( class UBioSFPanel* oCurrentPanel, unsigned long bExitImmediately )
{
	static UFunction* pFnReturnToBrowserWheel = NULL;

	if ( ! pFnReturnToBrowserWheel )
		pFnReturnToBrowserWheel = (UFunction*) UObject::GObjObjects()->Data[ 48367 ];

	UMassEffectGuiManager_eventReturnToBrowserWheel_Parms ReturnToBrowserWheel_Parms;
	ReturnToBrowserWheel_Parms.oCurrentPanel = oCurrentPanel;
	ReturnToBrowserWheel_Parms.bExitImmediately = bExitImmediately;

	this->ProcessEvent ( pFnReturnToBrowserWheel, &ReturnToBrowserWheel_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowBrowserWheel
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventShowBrowserWheel ( )
{
	static UFunction* pFnShowBrowserWheel = NULL;

	if ( ! pFnShowBrowserWheel )
		pFnShowBrowserWheel = (UFunction*) UObject::GObjObjects()->Data[ 51645 ];

	UMassEffectGuiManager_eventShowBrowserWheel_Parms ShowBrowserWheel_Parms;

	this->ProcessEvent ( pFnShowBrowserWheel, &ShowBrowserWheel_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.CancelLeaderActive
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UMassEffectGuiManager::CancelLeaderActive ( )
{
	static UFunction* pFnCancelLeaderActive = NULL;

	if ( ! pFnCancelLeaderActive )
		pFnCancelLeaderActive = (UFunction*) UObject::GObjObjects()->Data[ 51644 ];

	UMassEffectGuiManager_execCancelLeaderActive_Parms CancelLeaderActive_Parms;

	pFnCancelLeaderActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCancelLeaderActive, &CancelLeaderActive_Parms, NULL );

	pFnCancelLeaderActive->FunctionFlags |= 0x400;
};

// Function SFXGame.MassEffectGuiManager.OnAllowCameraRotation
// [0x00020002] 
// Parameters infos:
// unsigned long                  i_bValue                       ( CPF_Parm )

void UMassEffectGuiManager::OnAllowCameraRotation ( unsigned long i_bValue )
{
	static UFunction* pFnOnAllowCameraRotation = NULL;

	if ( ! pFnOnAllowCameraRotation )
		pFnOnAllowCameraRotation = (UFunction*) UObject::GObjObjects()->Data[ 51642 ];

	UMassEffectGuiManager_execOnAllowCameraRotation_Parms OnAllowCameraRotation_Parms;
	OnAllowCameraRotation_Parms.i_bValue = i_bValue;

	this->ProcessEvent ( pFnOnAllowCameraRotation, &OnAllowCameraRotation_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ReleaseHudCache
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UMassEffectGuiManager::ReleaseHudCache ( )
{
	static UFunction* pFnReleaseHudCache = NULL;

	if ( ! pFnReleaseHudCache )
		pFnReleaseHudCache = (UFunction*) UObject::GObjObjects()->Data[ 33164 ];

	UMassEffectGuiManager_execReleaseHudCache_Parms ReleaseHudCache_Parms;

	this->ProcessEvent ( pFnReleaseHudCache, &ReleaseHudCache_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.RecreateHudPanel
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventRecreateHudPanel ( )
{
	static UFunction* pFnRecreateHudPanel = NULL;

	if ( ! pFnRecreateHudPanel )
		pFnRecreateHudPanel = (UFunction*) UObject::GObjObjects()->Data[ 51638 ];

	UMassEffectGuiManager_eventRecreateHudPanel_Parms RecreateHudPanel_Parms;

	this->ProcessEvent ( pFnRecreateHudPanel, &RecreateHudPanel_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.HideConversationGui
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UMassEffectGuiManager::eventHideConversationGui ( )
{
	static UFunction* pFnHideConversationGui = NULL;

	if ( ! pFnHideConversationGui )
		pFnHideConversationGui = (UFunction*) UObject::GObjObjects()->Data[ 51637 ];

	UMassEffectGuiManager_eventHideConversationGui_Parms HideConversationGui_Parms;

	this->ProcessEvent ( pFnHideConversationGui, &HideConversationGui_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.ShowConversationGui
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned long                  bIsSubtitle                    ( CPF_OptionalParm | CPF_Parm )

void UMassEffectGuiManager::eventShowConversationGui ( unsigned long bIsSubtitle )
{
	static UFunction* pFnShowConversationGui = NULL;

	if ( ! pFnShowConversationGui )
		pFnShowConversationGui = (UFunction*) UObject::GObjObjects()->Data[ 51620 ];

	UMassEffectGuiManager_eventShowConversationGui_Parms ShowConversationGui_Parms;
	ShowConversationGui_Parms.bIsSubtitle = bIsSubtitle;

	this->ProcessEvent ( pFnShowConversationGui, &ShowConversationGui_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.HackReloadMainMenu
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UMassEffectGuiManager::HackReloadMainMenu ( )
{
	static UFunction* pFnHackReloadMainMenu = NULL;

	if ( ! pFnHackReloadMainMenu )
		pFnHackReloadMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 51635 ];

	UMassEffectGuiManager_execHackReloadMainMenu_Parms HackReloadMainMenu_Parms;

	pFnHackReloadMainMenu->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHackReloadMainMenu, &HackReloadMainMenu_Parms, NULL );

	pFnHackReloadMainMenu->FunctionFlags |= 0x400;
};

// Function SFXGame.MassEffectGuiManager.ShowMainMenu
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UBioSFHandler_MainMenu*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eEntry                         ( CPF_OptionalParm | CPF_Parm )

class UBioSFHandler_MainMenu* UMassEffectGuiManager::eventShowMainMenu ( unsigned char eEntry )
{
	static UFunction* pFnShowMainMenu = NULL;

	if ( ! pFnShowMainMenu )
		pFnShowMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 45515 ];

	UMassEffectGuiManager_eventShowMainMenu_Parms ShowMainMenu_Parms;
	ShowMainMenu_Parms.eEntry = eEntry;

	this->ProcessEvent ( pFnShowMainMenu, &ShowMainMenu_Parms, NULL );

	return ShowMainMenu_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.IsInSplashScreen
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UMassEffectGuiManager::eventIsInSplashScreen ( )
{
	static UFunction* pFnIsInSplashScreen = NULL;

	if ( ! pFnIsInSplashScreen )
		pFnIsInSplashScreen = (UFunction*) UObject::GObjObjects()->Data[ 42442 ];

	UMassEffectGuiManager_eventIsInSplashScreen_Parms IsInSplashScreen_Parms;

	this->ProcessEvent ( pFnIsInSplashScreen, &IsInSplashScreen_Parms, NULL );

	return IsInSplashScreen_Parms.ReturnValue;
};

// Function SFXGame.MassEffectGuiManager.ClearAllNonModalPanels
// [0x00020002] 
// Parameters infos:

void UMassEffectGuiManager::ClearAllNonModalPanels ( )
{
	static UFunction* pFnClearAllNonModalPanels = NULL;

	if ( ! pFnClearAllNonModalPanels )
		pFnClearAllNonModalPanels = (UFunction*) UObject::GObjObjects()->Data[ 51622 ];

	UMassEffectGuiManager_execClearAllNonModalPanels_Parms ClearAllNonModalPanels_Parms;

	this->ProcessEvent ( pFnClearAllNonModalPanels, &ClearAllNonModalPanels_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.SetupBackground
// [0x00020002] 
// Parameters infos:

void UMassEffectGuiManager::SetupBackground ( )
{
	static UFunction* pFnSetupBackground = NULL;

	if ( ! pFnSetupBackground )
		pFnSetupBackground = (UFunction*) UObject::GObjObjects()->Data[ 51621 ];

	UMassEffectGuiManager_execSetupBackground_Parms SetupBackground_Parms;

	this->ProcessEvent ( pFnSetupBackground, &SetupBackground_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.Update
// [0x00020002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UMassEffectGuiManager::Update ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 51618 ];

	UMassEffectGuiManager_execUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.MassEffectGuiManager.QueuedMessageBoxCallback
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UMassEffectGuiManager::QueuedMessageBoxCallback ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnQueuedMessageBoxCallback = NULL;

	if ( ! pFnQueuedMessageBoxCallback )
		pFnQueuedMessageBoxCallback = (UFunction*) UObject::GObjObjects()->Data[ 51615 ];

	UMassEffectGuiManager_execQueuedMessageBoxCallback_Parms QueuedMessageBoxCallback_Parms;
	QueuedMessageBoxCallback_Parms.bAPressed = bAPressed;
	QueuedMessageBoxCallback_Parms.nContext = nContext;

	pFnQueuedMessageBoxCallback->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueuedMessageBoxCallback, &QueuedMessageBoxCallback_Parms, NULL );

	pFnQueuedMessageBoxCallback->FunctionFlags |= 0x400;
};

// Function SFXGame.MassEffectGuiManager.HideQueuedMessageBoxes
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UMassEffectGuiManager::HideQueuedMessageBoxes ( )
{
	static UFunction* pFnHideQueuedMessageBoxes = NULL;

	if ( ! pFnHideQueuedMessageBoxes )
		pFnHideQueuedMessageBoxes = (UFunction*) UObject::GObjObjects()->Data[ 51614 ];

	UMassEffectGuiManager_execHideQueuedMessageBoxes_Parms HideQueuedMessageBoxes_Parms;

	pFnHideQueuedMessageBoxes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideQueuedMessageBoxes, &HideQueuedMessageBoxes_Parms, NULL );

	pFnHideQueuedMessageBoxes->FunctionFlags |= 0x400;
};

// Function SFXGame.MassEffectGuiManager.DisplayQueuedMessageBoxes
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UMassEffectGuiManager::DisplayQueuedMessageBoxes ( )
{
	static UFunction* pFnDisplayQueuedMessageBoxes = NULL;

	if ( ! pFnDisplayQueuedMessageBoxes )
		pFnDisplayQueuedMessageBoxes = (UFunction*) UObject::GObjObjects()->Data[ 51613 ];

	UMassEffectGuiManager_execDisplayQueuedMessageBoxes_Parms DisplayQueuedMessageBoxes_Parms;

	pFnDisplayQueuedMessageBoxes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisplayQueuedMessageBoxes, &DisplayQueuedMessageBoxes_Parms, NULL );

	pFnDisplayQueuedMessageBoxes->FunctionFlags |= 0x400;
};

// Function SFXGame.MassEffectGuiManager.RemoveNamedMessageBox
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   nmName                         ( CPF_Parm )

void UMassEffectGuiManager::RemoveNamedMessageBox ( struct FName nmName )
{
	static UFunction* pFnRemoveNamedMessageBox = NULL;

	if ( ! pFnRemoveNamedMessageBox )
		pFnRemoveNamedMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 42448 ];

	UMassEffectGuiManager_execRemoveNamedMessageBox_Parms RemoveNamedMessageBox_Parms;
	memcpy ( &RemoveNamedMessageBox_Parms.nmName, &nmName, 0x8 );

	pFnRemoveNamedMessageBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveNamedMessageBox, &RemoveNamedMessageBox_Parms, NULL );

	pFnRemoveNamedMessageBox->FunctionFlags |= 0x400;
};

// Function SFXGame.MassEffectGuiManager.QueueNamedMessageBox
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FName                   nmName                         ( CPF_Parm )
// int                            nPriority                      ( CPF_Parm )
// struct FScriptDelegate         pCallback                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            nContext                       ( CPF_OptionalParm | CPF_Parm )
// struct FBioMessageBoxOptionalParams stParams                       ( CPF_Parm | CPF_OutParm )

void UMassEffectGuiManager::QueueNamedMessageBox ( struct FName nmName, int nPriority, struct FScriptDelegate pCallback, int nContext, struct FBioMessageBoxOptionalParams* stParams )
{
	static UFunction* pFnQueueNamedMessageBox = NULL;

	if ( ! pFnQueueNamedMessageBox )
		pFnQueueNamedMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 42447 ];

	UMassEffectGuiManager_execQueueNamedMessageBox_Parms QueueNamedMessageBox_Parms;
	memcpy ( &QueueNamedMessageBox_Parms.nmName, &nmName, 0x8 );
	QueueNamedMessageBox_Parms.nPriority = nPriority;
	memcpy ( &QueueNamedMessageBox_Parms.pCallback, &pCallback, 0xC );
	QueueNamedMessageBox_Parms.nContext = nContext;

	pFnQueueNamedMessageBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnQueueNamedMessageBox, &QueueNamedMessageBox_Parms, NULL );

	pFnQueueNamedMessageBox->FunctionFlags |= 0x400;

	if ( stParams )
		memcpy ( stParams, &QueueNamedMessageBox_Parms.stParams, 0x1C );
};

// Function SFXGame.SFXGameChoiceGUIData.RemoveTokenMapping
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nTokenID                       ( CPF_Parm )
// struct FSFXChoiceEntry         Data                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGameChoiceGUIData::RemoveTokenMapping ( int nTokenID, struct FSFXChoiceEntry* Data )
{
	static UFunction* pFnRemoveTokenMapping = NULL;

	if ( ! pFnRemoveTokenMapping )
		pFnRemoveTokenMapping = (UFunction*) UObject::GObjObjects()->Data[ 46130 ];

	USFXGameChoiceGUIData_execRemoveTokenMapping_Parms RemoveTokenMapping_Parms;
	RemoveTokenMapping_Parms.nTokenID = nTokenID;

	pFnRemoveTokenMapping->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveTokenMapping, &RemoveTokenMapping_Parms, NULL );

	pFnRemoveTokenMapping->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &RemoveTokenMapping_Parms.Data, 0x78 );
};

// Function SFXGame.SFXGameChoiceGUIData.SetTokenMapping
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nTokenID                       ( CPF_Parm )
// struct FString                 sValue                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FSFXChoiceEntry         Data                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXGameChoiceGUIData::SetTokenMapping ( int nTokenID, struct FString sValue, struct FSFXChoiceEntry* Data )
{
	static UFunction* pFnSetTokenMapping = NULL;

	if ( ! pFnSetTokenMapping )
		pFnSetTokenMapping = (UFunction*) UObject::GObjObjects()->Data[ 46126 ];

	USFXGameChoiceGUIData_execSetTokenMapping_Parms SetTokenMapping_Parms;
	SetTokenMapping_Parms.nTokenID = nTokenID;
	memcpy ( &SetTokenMapping_Parms.sValue, &sValue, 0xC );

	pFnSetTokenMapping->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTokenMapping, &SetTokenMapping_Parms, NULL );

	pFnSetTokenMapping->FunctionFlags |= 0x400;

	if ( Data )
		memcpy ( Data, &SetTokenMapping_Parms.Data, 0x78 );
};

// Function SFXGame.SFXGameChoiceGUIData.ClearChoiceList
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXGameChoiceGUIData::ClearChoiceList ( )
{
	static UFunction* pFnClearChoiceList = NULL;

	if ( ! pFnClearChoiceList )
		pFnClearChoiceList = (UFunction*) UObject::GObjObjects()->Data[ 46125 ];

	USFXGameChoiceGUIData_execClearChoiceList_Parms ClearChoiceList_Parms;

	pFnClearChoiceList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearChoiceList, &ClearChoiceList_Parms, NULL );

	pFnClearChoiceList->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGameChoiceGUIData.AddChoice
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSFXChoiceEntry         Params                         ( CPF_Parm | CPF_NeedCtorLink )

bool USFXGameChoiceGUIData::AddChoice ( struct FSFXChoiceEntry Params )
{
	static UFunction* pFnAddChoice = NULL;

	if ( ! pFnAddChoice )
		pFnAddChoice = (UFunction*) UObject::GObjObjects()->Data[ 46122 ];

	USFXGameChoiceGUIData_execAddChoice_Parms AddChoice_Parms;
	memcpy ( &AddChoice_Parms.Params, &Params, 0x78 );

	pFnAddChoice->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddChoice, &AddChoice_Parms, NULL );

	pFnAddChoice->FunctionFlags |= 0x400;

	return AddChoice_Parms.ReturnValue;
};

// Function SFXGame.SFXGameChoiceGUIData.SetupOptionalPane
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bShowOptionalPane              ( CPF_Parm )
// int                            nOptionalPaneValue             ( CPF_OptionalParm | CPF_Parm )

void USFXGameChoiceGUIData::SetupOptionalPane ( unsigned long bShowOptionalPane, int nOptionalPaneValue )
{
	static UFunction* pFnSetupOptionalPane = NULL;

	if ( ! pFnSetupOptionalPane )
		pFnSetupOptionalPane = (UFunction*) UObject::GObjObjects()->Data[ 46116 ];

	USFXGameChoiceGUIData_execSetupOptionalPane_Parms SetupOptionalPane_Parms;
	SetupOptionalPane_Parms.bShowOptionalPane = bShowOptionalPane;
	SetupOptionalPane_Parms.nOptionalPaneValue = nOptionalPaneValue;

	pFnSetupOptionalPane->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetupOptionalPane, &SetupOptionalPane_Parms, NULL );

	pFnSetupOptionalPane->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGameChoiceGUIData.SetDisplayText
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXGameChoiceGUIData::SetDisplayText ( )
{
	static UFunction* pFnSetDisplayText = NULL;

	if ( ! pFnSetDisplayText )
		pFnSetDisplayText = (UFunction*) UObject::GObjObjects()->Data[ 46111 ];

	USFXGameChoiceGUIData_execSetDisplayText_Parms SetDisplayText_Parms;

	pFnSetDisplayText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDisplayText, &SetDisplayText_Parms, NULL );

	pFnSetDisplayText->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXGameChoiceGUIData_PRCShop.AddChoiceNoStrRef
// [0x00020002] 
// Parameters infos:
// struct FSFXChoiceEntryNoStrRef oChoice                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXGameChoiceGUIData_PRCShop::AddChoiceNoStrRef ( struct FSFXChoiceEntryNoStrRef oChoice )
{
	static UFunction* pFnAddChoiceNoStrRef = NULL;

	if ( ! pFnAddChoiceNoStrRef )
		pFnAddChoiceNoStrRef = (UFunction*) UObject::GObjObjects()->Data[ 54934 ];

	USFXGameChoiceGUIData_PRCShop_execAddChoiceNoStrRef_Parms AddChoiceNoStrRef_Parms;
	memcpy ( &AddChoiceNoStrRef_Parms.oChoice, &oChoice, 0x64 );

	this->ProcessEvent ( pFnAddChoiceNoStrRef, &AddChoiceNoStrRef_Parms, NULL );
};

// Function SFXGame.SFXSF_ReticleBase.UpdateReticleDisplay
// [0x00080800] ( FUNC_Event )
// Parameters infos:

void USFXSF_ReticleBase::eventUpdateReticleDisplay ( )
{
	static UFunction* pFnUpdateReticleDisplay = NULL;

	if ( ! pFnUpdateReticleDisplay )
		pFnUpdateReticleDisplay = (UFunction*) UObject::GObjObjects()->Data[ 60713 ];

	USFXSF_ReticleBase_eventUpdateReticleDisplay_Parms UpdateReticleDisplay_Parms;

	this->ProcessEvent ( pFnUpdateReticleDisplay, &UpdateReticleDisplay_Parms, NULL );
};

// Function SFXGame.SFXSF_ReticleBase.IsUpdateRequired
// [0x00080802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool USFXSF_ReticleBase::eventIsUpdateRequired ( float fDeltaT )
{
	static UFunction* pFnIsUpdateRequired = NULL;

	if ( ! pFnIsUpdateRequired )
		pFnIsUpdateRequired = (UFunction*) UObject::GObjObjects()->Data[ 60710 ];

	USFXSF_ReticleBase_eventIsUpdateRequired_Parms IsUpdateRequired_Parms;
	IsUpdateRequired_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnIsUpdateRequired, &IsUpdateRequired_Parms, NULL );

	return IsUpdateRequired_Parms.ReturnValue;
};

// Function SFXGame.SFXSF_ReticleBase.PlayVisibleTransition
// [0x00080800] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void USFXSF_ReticleBase::eventPlayVisibleTransition ( unsigned long bVisible )
{
	static UFunction* pFnPlayVisibleTransition = NULL;

	if ( ! pFnPlayVisibleTransition )
		pFnPlayVisibleTransition = (UFunction*) UObject::GObjObjects()->Data[ 60708 ];

	USFXSF_ReticleBase_eventPlayVisibleTransition_Parms PlayVisibleTransition_Parms;
	PlayVisibleTransition_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnPlayVisibleTransition, &PlayVisibleTransition_Parms, NULL );
};

// Function SFXGame.SFXSF_ReticleBase.ClearReticle
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// unsigned long                  bTransition                    ( CPF_OptionalParm | CPF_Parm )

void USFXSF_ReticleBase::eventClearReticle ( unsigned long bTransition )
{
	static UFunction* pFnClearReticle = NULL;

	if ( ! pFnClearReticle )
		pFnClearReticle = (UFunction*) UObject::GObjObjects()->Data[ 60706 ];

	USFXSF_ReticleBase_eventClearReticle_Parms ClearReticle_Parms;
	ClearReticle_Parms.bTransition = bTransition;

	pFnClearReticle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearReticle, &ClearReticle_Parms, NULL );

	pFnClearReticle->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSF_ReticleBase.SetVisible
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )
// unsigned long                  bTransition                    ( CPF_OptionalParm | CPF_Parm )

void USFXSF_ReticleBase::eventSetVisible ( unsigned long bVisible, unsigned long bTransition )
{
	static UFunction* pFnSetVisible = NULL;

	if ( ! pFnSetVisible )
		pFnSetVisible = (UFunction*) UObject::GObjObjects()->Data[ 60703 ];

	USFXSF_ReticleBase_eventSetVisible_Parms SetVisible_Parms;
	SetVisible_Parms.bVisible = bVisible;
	SetVisible_Parms.bTransition = bTransition;

	pFnSetVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVisible, &SetVisible_Parms, NULL );

	pFnSetVisible->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSF_ReticleCombatTarget.ClearReticle
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:
// unsigned long                  bTransition                    ( CPF_OptionalParm | CPF_Parm )

void USFXSF_ReticleCombatTarget::eventClearReticle ( unsigned long bTransition )
{
	static UFunction* pFnClearReticle = NULL;

	if ( ! pFnClearReticle )
		pFnClearReticle = (UFunction*) UObject::GObjObjects()->Data[ 60723 ];

	USFXSF_ReticleCombatTarget_eventClearReticle_Parms ClearReticle_Parms;
	ClearReticle_Parms.bTransition = bTransition;

	pFnClearReticle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearReticle, &ClearReticle_Parms, NULL );

	pFnClearReticle->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_AreaMap.RemoveDOFEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_AreaMap::RemoveDOFEffect ( )
{
	static UFunction* pFnRemoveDOFEffect = NULL;

	if ( ! pFnRemoveDOFEffect )
		pFnRemoveDOFEffect = (UFunction*) UObject::GObjObjects()->Data[ 60752 ];

	USFXSFHandler_AreaMap_execRemoveDOFEffect_Parms RemoveDOFEffect_Parms;

	pFnRemoveDOFEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveDOFEffect, &RemoveDOFEffect_Parms, NULL );

	pFnRemoveDOFEffect->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_AreaMap.AddDOFEffect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UDOFAndBloomEffect*      i_DOFEffect                    ( CPF_Parm )

void USFXSFHandler_AreaMap::AddDOFEffect ( class UDOFAndBloomEffect* i_DOFEffect )
{
	static UFunction* pFnAddDOFEffect = NULL;

	if ( ! pFnAddDOFEffect )
		pFnAddDOFEffect = (UFunction*) UObject::GObjObjects()->Data[ 60750 ];

	USFXSFHandler_AreaMap_execAddDOFEffect_Parms AddDOFEffect_Parms;
	AddDOFEffect_Parms.i_DOFEffect = i_DOFEffect;

	pFnAddDOFEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddDOFEffect, &AddDOFEffect_Parms, NULL );

	pFnAddDOFEffect->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_AreaMap.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_AreaMap::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 60747 ];

	USFXSFHandler_AreaMap_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_AreaMap.Close
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void USFXSFHandler_AreaMap::Close ( )
{
	static UFunction* pFnClose = NULL;

	if ( ! pFnClose )
		pFnClose = (UFunction*) UObject::GObjObjects()->Data[ 60746 ];

	USFXSFHandler_AreaMap_execClose_Parms Close_Parms;

	this->ProcessEvent ( pFnClose, &Close_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_AreaMap.BeginClose
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_AreaMap::BeginClose ( )
{
	static UFunction* pFnBeginClose = NULL;

	if ( ! pFnBeginClose )
		pFnBeginClose = (UFunction*) UObject::GObjObjects()->Data[ 60745 ];

	USFXSFHandler_AreaMap_execBeginClose_Parms BeginClose_Parms;

	this->ProcessEvent ( pFnBeginClose, &BeginClose_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_AreaMap.ProcessPlayer
// [0x00020002] 
// Parameters infos:
// class USFXAreaMapData*         oMapData                       ( CPF_Parm )

void USFXSFHandler_AreaMap::ProcessPlayer ( class USFXAreaMapData* oMapData )
{
	static UFunction* pFnProcessPlayer = NULL;

	if ( ! pFnProcessPlayer )
		pFnProcessPlayer = (UFunction*) UObject::GObjObjects()->Data[ 60737 ];

	USFXSFHandler_AreaMap_execProcessPlayer_Parms ProcessPlayer_Parms;
	ProcessPlayer_Parms.oMapData = oMapData;

	this->ProcessEvent ( pFnProcessPlayer, &ProcessPlayer_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_AreaMap.SetMap
// [0x00020002] 
// Parameters infos:
// class USFXAreaMapData*         oMapData                       ( CPF_Parm )

void USFXSFHandler_AreaMap::SetMap ( class USFXAreaMapData* oMapData )
{
	static UFunction* pFnSetMap = NULL;

	if ( ! pFnSetMap )
		pFnSetMap = (UFunction*) UObject::GObjObjects()->Data[ 60733 ];

	USFXSFHandler_AreaMap_execSetMap_Parms SetMap_Parms;
	SetMap_Parms.oMapData = oMapData;

	this->ProcessEvent ( pFnSetMap, &SetMap_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_AreaMap.Initialize
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bFromBrowserWheel              ( CPF_Parm )

bool USFXSFHandler_AreaMap::Initialize ( unsigned long bFromBrowserWheel )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 60729 ];

	USFXSFHandler_AreaMap_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.bFromBrowserWheel = bFromBrowserWheel;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	return Initialize_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_AreaMap.PauseMenuAdditionalProcessing
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_AreaMap::PauseMenuAdditionalProcessing ( )
{
	static UFunction* pFnPauseMenuAdditionalProcessing = NULL;

	if ( ! pFnPauseMenuAdditionalProcessing )
		pFnPauseMenuAdditionalProcessing = (UFunction*) UObject::GObjObjects()->Data[ 60728 ];

	USFXSFHandler_AreaMap_execPauseMenuAdditionalProcessing_Parms PauseMenuAdditionalProcessing_Parms;

	this->ProcessEvent ( pFnPauseMenuAdditionalProcessing, &PauseMenuAdditionalProcessing_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_AreaMap.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_AreaMap::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 60727 ];

	USFXSFHandler_AreaMap_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.Update
// [0x00820002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void USFXSFHandler_EANetworking::Update ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 60824 ];

	USFXSFHandler_EANetworking_execUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.EnterCode
// [0x00020002] 
// Parameters infos:
// struct FString                 sDefault                       ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_EANetworking::EnterCode ( struct FString sDefault )
{
	static UFunction* pFnEnterCode = NULL;

	if ( ! pFnEnterCode )
		pFnEnterCode = (UFunction*) UObject::GObjObjects()->Data[ 60822 ];

	USFXSFHandler_EANetworking_execEnterCode_Parms EnterCode_Parms;
	memcpy ( &EnterCode_Parms.sDefault, &sDefault, 0xC );

	this->ProcessEvent ( pFnEnterCode, &EnterCode_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.EnterPassword
// [0x00020002] 
// Parameters infos:
// struct FString                 sDefault                       ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_EANetworking::EnterPassword ( struct FString sDefault )
{
	static UFunction* pFnEnterPassword = NULL;

	if ( ! pFnEnterPassword )
		pFnEnterPassword = (UFunction*) UObject::GObjObjects()->Data[ 60820 ];

	USFXSFHandler_EANetworking_execEnterPassword_Parms EnterPassword_Parms;
	memcpy ( &EnterPassword_Parms.sDefault, &sDefault, 0xC );

	this->ProcessEvent ( pFnEnterPassword, &EnterPassword_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.EnterEmail
// [0x00020002] 
// Parameters infos:
// struct FString                 sDefault                       ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_EANetworking::EnterEmail ( struct FString sDefault )
{
	static UFunction* pFnEnterEmail = NULL;

	if ( ! pFnEnterEmail )
		pFnEnterEmail = (UFunction*) UObject::GObjObjects()->Data[ 60818 ];

	USFXSFHandler_EANetworking_execEnterEmail_Parms EnterEmail_Parms;
	memcpy ( &EnterEmail_Parms.sDefault, &sDefault, 0xC );

	this->ProcessEvent ( pFnEnterEmail, &EnterEmail_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.OnPanelRemoved
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_EANetworking::eventOnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 60817 ];

	USFXSFHandler_EANetworking_eventOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.OnPanelAdded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_EANetworking::eventOnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 60816 ];

	USFXSFHandler_EANetworking_eventOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.HandleInputEvent
// [0x00820002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_EANetworking::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 60810 ];

	USFXSFHandler_EANetworking_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.onExternalInitialize
// [0x00820002] 
// Parameters infos:

void USFXSFHandler_EANetworking::onExternalInitialize ( )
{
	static UFunction* pFnonExternalInitialize = NULL;

	if ( ! pFnonExternalInitialize )
		pFnonExternalInitialize = (UFunction*) UObject::GObjObjects()->Data[ 60806 ];

	USFXSFHandler_EANetworking_execonExternalInitialize_Parms onExternalInitialize_Parms;

	this->ProcessEvent ( pFnonExternalInitialize, &onExternalInitialize_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.ClearDelegates
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_EANetworking::ClearDelegates ( )
{
	static UFunction* pFnClearDelegates = NULL;

	if ( ! pFnClearDelegates )
		pFnClearDelegates = (UFunction*) UObject::GObjObjects()->Data[ 60805 ];

	USFXSFHandler_EANetworking_execClearDelegates_Parms ClearDelegates_Parms;

	this->ProcessEvent ( pFnClearDelegates, &ClearDelegates_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.SubmitCreateNucleusAccountEx
// [0x00020002] 
// Parameters infos:
// struct FString                 sEmail                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sPassword                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bEAProducts                    ( CPF_Parm )
// unsigned long                  bThirdParty                    ( CPF_Parm )
// unsigned long                  bBioWareProducts               ( CPF_Parm )
// struct FString                 i_sCountryCode                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            BirthDay                       ( CPF_Parm )
// int                            BirthMonth                     ( CPF_Parm )
// int                            BirthYear                      ( CPF_Parm )
// struct FString                 i_sLanguageCode                ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bSubmit                        ( CPF_Parm )

void USFXSFHandler_EANetworking::SubmitCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, unsigned long bSubmit )
{
	static UFunction* pFnSubmitCreateNucleusAccountEx = NULL;

	if ( ! pFnSubmitCreateNucleusAccountEx )
		pFnSubmitCreateNucleusAccountEx = (UFunction*) UObject::GObjObjects()->Data[ 60793 ];

	USFXSFHandler_EANetworking_execSubmitCreateNucleusAccountEx_Parms SubmitCreateNucleusAccountEx_Parms;
	memcpy ( &SubmitCreateNucleusAccountEx_Parms.sEmail, &sEmail, 0xC );
	memcpy ( &SubmitCreateNucleusAccountEx_Parms.sPassword, &sPassword, 0xC );
	SubmitCreateNucleusAccountEx_Parms.bEAProducts = bEAProducts;
	SubmitCreateNucleusAccountEx_Parms.bThirdParty = bThirdParty;
	SubmitCreateNucleusAccountEx_Parms.bBioWareProducts = bBioWareProducts;
	memcpy ( &SubmitCreateNucleusAccountEx_Parms.i_sCountryCode, &i_sCountryCode, 0xC );
	SubmitCreateNucleusAccountEx_Parms.BirthDay = BirthDay;
	SubmitCreateNucleusAccountEx_Parms.BirthMonth = BirthMonth;
	SubmitCreateNucleusAccountEx_Parms.BirthYear = BirthYear;
	memcpy ( &SubmitCreateNucleusAccountEx_Parms.i_sLanguageCode, &i_sLanguageCode, 0xC );
	SubmitCreateNucleusAccountEx_Parms.bSubmit = bSubmit;

	this->ProcessEvent ( pFnSubmitCreateNucleusAccountEx, &SubmitCreateNucleusAccountEx_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.SubmitCerberusWelcomeMessage
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_EANetworking::SubmitCerberusWelcomeMessage ( )
{
	static UFunction* pFnSubmitCerberusWelcomeMessage = NULL;

	if ( ! pFnSubmitCerberusWelcomeMessage )
		pFnSubmitCerberusWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 60792 ];

	USFXSFHandler_EANetworking_execSubmitCerberusWelcomeMessage_Parms SubmitCerberusWelcomeMessage_Parms;

	this->ProcessEvent ( pFnSubmitCerberusWelcomeMessage, &SubmitCerberusWelcomeMessage_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.SubmitParentEmail
// [0x00020002] 
// Parameters infos:
// unsigned long                  bContinue                      ( CPF_Parm )
// struct FString                 ParentEmail                    ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_EANetworking::SubmitParentEmail ( unsigned long bContinue, struct FString ParentEmail )
{
	static UFunction* pFnSubmitParentEmail = NULL;

	if ( ! pFnSubmitParentEmail )
		pFnSubmitParentEmail = (UFunction*) UObject::GObjObjects()->Data[ 60789 ];

	USFXSFHandler_EANetworking_execSubmitParentEmail_Parms SubmitParentEmail_Parms;
	SubmitParentEmail_Parms.bContinue = bContinue;
	memcpy ( &SubmitParentEmail_Parms.ParentEmail, &ParentEmail, 0xC );

	this->ProcessEvent ( pFnSubmitParentEmail, &SubmitParentEmail_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.SubmitAccountDemographics
// [0x00020002] 
// Parameters infos:
// unsigned long                  bContinue                      ( CPF_Parm )
// struct FString                 i_sCountryCode                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            BirthDay                       ( CPF_Parm )
// int                            BirthMonth                     ( CPF_Parm )
// int                            BirthYear                      ( CPF_Parm )
// struct FString                 i_sLanguageCode                ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_EANetworking::SubmitAccountDemographics ( unsigned long bContinue, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode )
{
	static UFunction* pFnSubmitAccountDemographics = NULL;

	if ( ! pFnSubmitAccountDemographics )
		pFnSubmitAccountDemographics = (UFunction*) UObject::GObjObjects()->Data[ 60782 ];

	USFXSFHandler_EANetworking_execSubmitAccountDemographics_Parms SubmitAccountDemographics_Parms;
	SubmitAccountDemographics_Parms.bContinue = bContinue;
	memcpy ( &SubmitAccountDemographics_Parms.i_sCountryCode, &i_sCountryCode, 0xC );
	SubmitAccountDemographics_Parms.BirthDay = BirthDay;
	SubmitAccountDemographics_Parms.BirthMonth = BirthMonth;
	SubmitAccountDemographics_Parms.BirthYear = BirthYear;
	memcpy ( &SubmitAccountDemographics_Parms.i_sLanguageCode, &i_sLanguageCode, 0xC );

	this->ProcessEvent ( pFnSubmitAccountDemographics, &SubmitAccountDemographics_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.SubmitRedeemCode
// [0x00020002] 
// Parameters infos:
// unsigned long                  bContinue                      ( CPF_Parm )
// struct FString                 i_sCode                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_EANetworking::SubmitRedeemCode ( unsigned long bContinue, struct FString i_sCode )
{
	static UFunction* pFnSubmitRedeemCode = NULL;

	if ( ! pFnSubmitRedeemCode )
		pFnSubmitRedeemCode = (UFunction*) UObject::GObjObjects()->Data[ 60779 ];

	USFXSFHandler_EANetworking_execSubmitRedeemCode_Parms SubmitRedeemCode_Parms;
	SubmitRedeemCode_Parms.bContinue = bContinue;
	memcpy ( &SubmitRedeemCode_Parms.i_sCode, &i_sCode, 0xC );

	this->ProcessEvent ( pFnSubmitRedeemCode, &SubmitRedeemCode_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.SubmitCerberusIntro
// [0x00020002] 
// Parameters infos:
// unsigned char                  eReturnCode                    ( CPF_Parm )

void USFXSFHandler_EANetworking::SubmitCerberusIntro ( unsigned char eReturnCode )
{
	static UFunction* pFnSubmitCerberusIntro = NULL;

	if ( ! pFnSubmitCerberusIntro )
		pFnSubmitCerberusIntro = (UFunction*) UObject::GObjObjects()->Data[ 60777 ];

	USFXSFHandler_EANetworking_execSubmitCerberusIntro_Parms SubmitCerberusIntro_Parms;
	SubmitCerberusIntro_Parms.eReturnCode = eReturnCode;

	this->ProcessEvent ( pFnSubmitCerberusIntro, &SubmitCerberusIntro_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.SubmitNucleusWelcomeMessage
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_EANetworking::SubmitNucleusWelcomeMessage ( )
{
	static UFunction* pFnSubmitNucleusWelcomeMessage = NULL;

	if ( ! pFnSubmitNucleusWelcomeMessage )
		pFnSubmitNucleusWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 60776 ];

	USFXSFHandler_EANetworking_execSubmitNucleusWelcomeMessage_Parms SubmitNucleusWelcomeMessage_Parms;

	this->ProcessEvent ( pFnSubmitNucleusWelcomeMessage, &SubmitNucleusWelcomeMessage_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.SubmitTermsOfService
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAccept                        ( CPF_Parm )

void USFXSFHandler_EANetworking::SubmitTermsOfService ( unsigned long bAccept )
{
	static UFunction* pFnSubmitTermsOfService = NULL;

	if ( ! pFnSubmitTermsOfService )
		pFnSubmitTermsOfService = (UFunction*) UObject::GObjObjects()->Data[ 60774 ];

	USFXSFHandler_EANetworking_execSubmitTermsOfService_Parms SubmitTermsOfService_Parms;
	SubmitTermsOfService_Parms.bAccept = bAccept;

	this->ProcessEvent ( pFnSubmitTermsOfService, &SubmitTermsOfService_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.SubmitCreateNucleusAccount
// [0x00020002] 
// Parameters infos:
// struct FString                 sEmail                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sPassword                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bEAProducts                    ( CPF_Parm )
// unsigned long                  bThirdParty                    ( CPF_Parm )
// unsigned long                  bRegisterProduct               ( CPF_Parm )
// unsigned long                  bBioWareProducts               ( CPF_Parm )
// unsigned long                  bSubmit                        ( CPF_Parm )

void USFXSFHandler_EANetworking::SubmitCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bSubmit )
{
	static UFunction* pFnSubmitCreateNucleusAccount = NULL;

	if ( ! pFnSubmitCreateNucleusAccount )
		pFnSubmitCreateNucleusAccount = (UFunction*) UObject::GObjObjects()->Data[ 60766 ];

	USFXSFHandler_EANetworking_execSubmitCreateNucleusAccount_Parms SubmitCreateNucleusAccount_Parms;
	memcpy ( &SubmitCreateNucleusAccount_Parms.sEmail, &sEmail, 0xC );
	memcpy ( &SubmitCreateNucleusAccount_Parms.sPassword, &sPassword, 0xC );
	SubmitCreateNucleusAccount_Parms.bEAProducts = bEAProducts;
	SubmitCreateNucleusAccount_Parms.bThirdParty = bThirdParty;
	SubmitCreateNucleusAccount_Parms.bRegisterProduct = bRegisterProduct;
	SubmitCreateNucleusAccount_Parms.bBioWareProducts = bBioWareProducts;
	SubmitCreateNucleusAccount_Parms.bSubmit = bSubmit;

	this->ProcessEvent ( pFnSubmitCreateNucleusAccount, &SubmitCreateNucleusAccount_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.SubmitEmailPasswordMismatch
// [0x00020002] 
// Parameters infos:
// struct FString                 Email                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  eReturnCode                    ( CPF_Parm )

void USFXSFHandler_EANetworking::SubmitEmailPasswordMismatch ( struct FString Email, struct FString Password, unsigned char eReturnCode )
{
	static UFunction* pFnSubmitEmailPasswordMismatch = NULL;

	if ( ! pFnSubmitEmailPasswordMismatch )
		pFnSubmitEmailPasswordMismatch = (UFunction*) UObject::GObjObjects()->Data[ 60762 ];

	USFXSFHandler_EANetworking_execSubmitEmailPasswordMismatch_Parms SubmitEmailPasswordMismatch_Parms;
	memcpy ( &SubmitEmailPasswordMismatch_Parms.Email, &Email, 0xC );
	memcpy ( &SubmitEmailPasswordMismatch_Parms.Password, &Password, 0xC );
	SubmitEmailPasswordMismatch_Parms.eReturnCode = eReturnCode;

	this->ProcessEvent ( pFnSubmitEmailPasswordMismatch, &SubmitEmailPasswordMismatch_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.SubmitMessageBox
// [0x00020002] 
// Parameters infos:
// unsigned char                  eReturnEnum                    ( CPF_Parm )

void USFXSFHandler_EANetworking::SubmitMessageBox ( unsigned char eReturnEnum )
{
	static UFunction* pFnSubmitMessageBox = NULL;

	if ( ! pFnSubmitMessageBox )
		pFnSubmitMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 60760 ];

	USFXSFHandler_EANetworking_execSubmitMessageBox_Parms SubmitMessageBox_Parms;
	SubmitMessageBox_Parms.eReturnEnum = eReturnEnum;

	this->ProcessEvent ( pFnSubmitMessageBox, &SubmitMessageBox_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.SubmitNucleusLogin
// [0x00020002] 
// Parameters infos:
// struct FString                 Email                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  eReturnCode                    ( CPF_Parm )

void USFXSFHandler_EANetworking::SubmitNucleusLogin ( struct FString Email, struct FString Password, unsigned char eReturnCode )
{
	static UFunction* pFnSubmitNucleusLogin = NULL;

	if ( ! pFnSubmitNucleusLogin )
		pFnSubmitNucleusLogin = (UFunction*) UObject::GObjObjects()->Data[ 60756 ];

	USFXSFHandler_EANetworking_execSubmitNucleusLogin_Parms SubmitNucleusLogin_Parms;
	memcpy ( &SubmitNucleusLogin_Parms.Email, &Email, 0xC );
	memcpy ( &SubmitNucleusLogin_Parms.Password, &Password, 0xC );
	SubmitNucleusLogin_Parms.eReturnCode = eReturnCode;

	this->ProcessEvent ( pFnSubmitNucleusLogin, &SubmitNucleusLogin_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.SubmitIntroPage
// [0x00020002] 
// Parameters infos:
// unsigned long                  bContinue                      ( CPF_Parm )

void USFXSFHandler_EANetworking::SubmitIntroPage ( unsigned long bContinue )
{
	static UFunction* pFnSubmitIntroPage = NULL;

	if ( ! pFnSubmitIntroPage )
		pFnSubmitIntroPage = (UFunction*) UObject::GObjObjects()->Data[ 60754 ];

	USFXSFHandler_EANetworking_execSubmitIntroPage_Parms SubmitIntroPage_Parms;
	SubmitIntroPage_Parms.bContinue = bContinue;

	this->ProcessEvent ( pFnSubmitIntroPage, &SubmitIntroPage_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.GuiCallback_SubmitParentEmail
// [0x00120000] 
// Parameters infos:
// unsigned long                  bContinue                      ( CPF_Parm )
// struct FString                 ParentEmail                    ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_EANetworking::GuiCallback_SubmitParentEmail ( unsigned long bContinue, struct FString ParentEmail )
{
	static UFunction* pFnGuiCallback_SubmitParentEmail = NULL;

	if ( ! pFnGuiCallback_SubmitParentEmail )
		pFnGuiCallback_SubmitParentEmail = (UFunction*) UObject::GObjObjects()->Data[ 58147 ];

	USFXSFHandler_EANetworking_execGuiCallback_SubmitParentEmail_Parms GuiCallback_SubmitParentEmail_Parms;
	GuiCallback_SubmitParentEmail_Parms.bContinue = bContinue;
	memcpy ( &GuiCallback_SubmitParentEmail_Parms.ParentEmail, &ParentEmail, 0xC );

	this->ProcessEvent ( pFnGuiCallback_SubmitParentEmail, &GuiCallback_SubmitParentEmail_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.GuiCallback_SubmitAccountDemographics
// [0x00120000] 
// Parameters infos:
// unsigned long                  bContinue                      ( CPF_Parm )
// struct FString                 i_sCountryCode                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            BirthDay                       ( CPF_Parm )
// int                            BirthMonth                     ( CPF_Parm )
// int                            BirthYear                      ( CPF_Parm )
// struct FString                 i_sLanguageCode                ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_EANetworking::GuiCallback_SubmitAccountDemographics ( unsigned long bContinue, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode )
{
	static UFunction* pFnGuiCallback_SubmitAccountDemographics = NULL;

	if ( ! pFnGuiCallback_SubmitAccountDemographics )
		pFnGuiCallback_SubmitAccountDemographics = (UFunction*) UObject::GObjObjects()->Data[ 58140 ];

	USFXSFHandler_EANetworking_execGuiCallback_SubmitAccountDemographics_Parms GuiCallback_SubmitAccountDemographics_Parms;
	GuiCallback_SubmitAccountDemographics_Parms.bContinue = bContinue;
	memcpy ( &GuiCallback_SubmitAccountDemographics_Parms.i_sCountryCode, &i_sCountryCode, 0xC );
	GuiCallback_SubmitAccountDemographics_Parms.BirthDay = BirthDay;
	GuiCallback_SubmitAccountDemographics_Parms.BirthMonth = BirthMonth;
	GuiCallback_SubmitAccountDemographics_Parms.BirthYear = BirthYear;
	memcpy ( &GuiCallback_SubmitAccountDemographics_Parms.i_sLanguageCode, &i_sLanguageCode, 0xC );

	this->ProcessEvent ( pFnGuiCallback_SubmitAccountDemographics, &GuiCallback_SubmitAccountDemographics_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.GuiCallback_SubmitEmailPasswordMismatch
// [0x00120000] 
// Parameters infos:
// struct FString                 Email                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  eReturnCode                    ( CPF_Parm )

void USFXSFHandler_EANetworking::GuiCallback_SubmitEmailPasswordMismatch ( struct FString Email, struct FString Password, unsigned char eReturnCode )
{
	static UFunction* pFnGuiCallback_SubmitEmailPasswordMismatch = NULL;

	if ( ! pFnGuiCallback_SubmitEmailPasswordMismatch )
		pFnGuiCallback_SubmitEmailPasswordMismatch = (UFunction*) UObject::GObjObjects()->Data[ 58136 ];

	USFXSFHandler_EANetworking_execGuiCallback_SubmitEmailPasswordMismatch_Parms GuiCallback_SubmitEmailPasswordMismatch_Parms;
	memcpy ( &GuiCallback_SubmitEmailPasswordMismatch_Parms.Email, &Email, 0xC );
	memcpy ( &GuiCallback_SubmitEmailPasswordMismatch_Parms.Password, &Password, 0xC );
	GuiCallback_SubmitEmailPasswordMismatch_Parms.eReturnCode = eReturnCode;

	this->ProcessEvent ( pFnGuiCallback_SubmitEmailPasswordMismatch, &GuiCallback_SubmitEmailPasswordMismatch_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.GuiCallback_SubmitCreateNucleusAccountEx
// [0x00120000] 
// Parameters infos:
// struct FString                 sEmail                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sPassword                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bEAProducts                    ( CPF_Parm )
// unsigned long                  bThirdParty                    ( CPF_Parm )
// unsigned long                  bBioWareProducts               ( CPF_Parm )
// struct FString                 i_sCountryCode                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            BirthDay                       ( CPF_Parm )
// int                            BirthMonth                     ( CPF_Parm )
// int                            BirthYear                      ( CPF_Parm )
// struct FString                 i_sLanguageCode                ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bSubmit                        ( CPF_Parm )

void USFXSFHandler_EANetworking::GuiCallback_SubmitCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, unsigned long bSubmit )
{
	static UFunction* pFnGuiCallback_SubmitCreateNucleusAccountEx = NULL;

	if ( ! pFnGuiCallback_SubmitCreateNucleusAccountEx )
		pFnGuiCallback_SubmitCreateNucleusAccountEx = (UFunction*) UObject::GObjObjects()->Data[ 58124 ];

	USFXSFHandler_EANetworking_execGuiCallback_SubmitCreateNucleusAccountEx_Parms GuiCallback_SubmitCreateNucleusAccountEx_Parms;
	memcpy ( &GuiCallback_SubmitCreateNucleusAccountEx_Parms.sEmail, &sEmail, 0xC );
	memcpy ( &GuiCallback_SubmitCreateNucleusAccountEx_Parms.sPassword, &sPassword, 0xC );
	GuiCallback_SubmitCreateNucleusAccountEx_Parms.bEAProducts = bEAProducts;
	GuiCallback_SubmitCreateNucleusAccountEx_Parms.bThirdParty = bThirdParty;
	GuiCallback_SubmitCreateNucleusAccountEx_Parms.bBioWareProducts = bBioWareProducts;
	memcpy ( &GuiCallback_SubmitCreateNucleusAccountEx_Parms.i_sCountryCode, &i_sCountryCode, 0xC );
	GuiCallback_SubmitCreateNucleusAccountEx_Parms.BirthDay = BirthDay;
	GuiCallback_SubmitCreateNucleusAccountEx_Parms.BirthMonth = BirthMonth;
	GuiCallback_SubmitCreateNucleusAccountEx_Parms.BirthYear = BirthYear;
	memcpy ( &GuiCallback_SubmitCreateNucleusAccountEx_Parms.i_sLanguageCode, &i_sLanguageCode, 0xC );
	GuiCallback_SubmitCreateNucleusAccountEx_Parms.bSubmit = bSubmit;

	this->ProcessEvent ( pFnGuiCallback_SubmitCreateNucleusAccountEx, &GuiCallback_SubmitCreateNucleusAccountEx_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.GuiCallback_SubmitCerberusWelcomeMessage
// [0x00120000] 
// Parameters infos:

void USFXSFHandler_EANetworking::GuiCallback_SubmitCerberusWelcomeMessage ( )
{
	static UFunction* pFnGuiCallback_SubmitCerberusWelcomeMessage = NULL;

	if ( ! pFnGuiCallback_SubmitCerberusWelcomeMessage )
		pFnGuiCallback_SubmitCerberusWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 58123 ];

	USFXSFHandler_EANetworking_execGuiCallback_SubmitCerberusWelcomeMessage_Parms GuiCallback_SubmitCerberusWelcomeMessage_Parms;

	this->ProcessEvent ( pFnGuiCallback_SubmitCerberusWelcomeMessage, &GuiCallback_SubmitCerberusWelcomeMessage_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.GuiCallback_SubmitRedeemCode
// [0x00120000] 
// Parameters infos:
// unsigned long                  bContinue                      ( CPF_Parm )
// struct FString                 i_sCode                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_EANetworking::GuiCallback_SubmitRedeemCode ( unsigned long bContinue, struct FString i_sCode )
{
	static UFunction* pFnGuiCallback_SubmitRedeemCode = NULL;

	if ( ! pFnGuiCallback_SubmitRedeemCode )
		pFnGuiCallback_SubmitRedeemCode = (UFunction*) UObject::GObjObjects()->Data[ 58120 ];

	USFXSFHandler_EANetworking_execGuiCallback_SubmitRedeemCode_Parms GuiCallback_SubmitRedeemCode_Parms;
	GuiCallback_SubmitRedeemCode_Parms.bContinue = bContinue;
	memcpy ( &GuiCallback_SubmitRedeemCode_Parms.i_sCode, &i_sCode, 0xC );

	this->ProcessEvent ( pFnGuiCallback_SubmitRedeemCode, &GuiCallback_SubmitRedeemCode_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.GuiCallback_SubmitCerberusIntro
// [0x00120000] 
// Parameters infos:
// unsigned char                  eReturnCode                    ( CPF_Parm )

void USFXSFHandler_EANetworking::GuiCallback_SubmitCerberusIntro ( unsigned char eReturnCode )
{
	static UFunction* pFnGuiCallback_SubmitCerberusIntro = NULL;

	if ( ! pFnGuiCallback_SubmitCerberusIntro )
		pFnGuiCallback_SubmitCerberusIntro = (UFunction*) UObject::GObjObjects()->Data[ 58118 ];

	USFXSFHandler_EANetworking_execGuiCallback_SubmitCerberusIntro_Parms GuiCallback_SubmitCerberusIntro_Parms;
	GuiCallback_SubmitCerberusIntro_Parms.eReturnCode = eReturnCode;

	this->ProcessEvent ( pFnGuiCallback_SubmitCerberusIntro, &GuiCallback_SubmitCerberusIntro_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.GuiCallback_SubmitNucleusWelcomeMessage
// [0x00120000] 
// Parameters infos:

void USFXSFHandler_EANetworking::GuiCallback_SubmitNucleusWelcomeMessage ( )
{
	static UFunction* pFnGuiCallback_SubmitNucleusWelcomeMessage = NULL;

	if ( ! pFnGuiCallback_SubmitNucleusWelcomeMessage )
		pFnGuiCallback_SubmitNucleusWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 58117 ];

	USFXSFHandler_EANetworking_execGuiCallback_SubmitNucleusWelcomeMessage_Parms GuiCallback_SubmitNucleusWelcomeMessage_Parms;

	this->ProcessEvent ( pFnGuiCallback_SubmitNucleusWelcomeMessage, &GuiCallback_SubmitNucleusWelcomeMessage_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.GuiCallback_SubmitTermsOfService
// [0x00120000] 
// Parameters infos:
// unsigned long                  bAccept                        ( CPF_Parm )

void USFXSFHandler_EANetworking::GuiCallback_SubmitTermsOfService ( unsigned long bAccept )
{
	static UFunction* pFnGuiCallback_SubmitTermsOfService = NULL;

	if ( ! pFnGuiCallback_SubmitTermsOfService )
		pFnGuiCallback_SubmitTermsOfService = (UFunction*) UObject::GObjObjects()->Data[ 58115 ];

	USFXSFHandler_EANetworking_execGuiCallback_SubmitTermsOfService_Parms GuiCallback_SubmitTermsOfService_Parms;
	GuiCallback_SubmitTermsOfService_Parms.bAccept = bAccept;

	this->ProcessEvent ( pFnGuiCallback_SubmitTermsOfService, &GuiCallback_SubmitTermsOfService_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.GuiCallback_SubmitCreateNucleusAccount
// [0x00120000] 
// Parameters infos:
// struct FString                 sEmail                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sPassword                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bEAProducts                    ( CPF_Parm )
// unsigned long                  bThirdParty                    ( CPF_Parm )
// unsigned long                  bRegisterProduct               ( CPF_Parm )
// unsigned long                  bBioWareProducts               ( CPF_Parm )
// unsigned long                  bSubmit                        ( CPF_Parm )

void USFXSFHandler_EANetworking::GuiCallback_SubmitCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bSubmit )
{
	static UFunction* pFnGuiCallback_SubmitCreateNucleusAccount = NULL;

	if ( ! pFnGuiCallback_SubmitCreateNucleusAccount )
		pFnGuiCallback_SubmitCreateNucleusAccount = (UFunction*) UObject::GObjObjects()->Data[ 58107 ];

	USFXSFHandler_EANetworking_execGuiCallback_SubmitCreateNucleusAccount_Parms GuiCallback_SubmitCreateNucleusAccount_Parms;
	memcpy ( &GuiCallback_SubmitCreateNucleusAccount_Parms.sEmail, &sEmail, 0xC );
	memcpy ( &GuiCallback_SubmitCreateNucleusAccount_Parms.sPassword, &sPassword, 0xC );
	GuiCallback_SubmitCreateNucleusAccount_Parms.bEAProducts = bEAProducts;
	GuiCallback_SubmitCreateNucleusAccount_Parms.bThirdParty = bThirdParty;
	GuiCallback_SubmitCreateNucleusAccount_Parms.bRegisterProduct = bRegisterProduct;
	GuiCallback_SubmitCreateNucleusAccount_Parms.bBioWareProducts = bBioWareProducts;
	GuiCallback_SubmitCreateNucleusAccount_Parms.bSubmit = bSubmit;

	this->ProcessEvent ( pFnGuiCallback_SubmitCreateNucleusAccount, &GuiCallback_SubmitCreateNucleusAccount_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.GuiCallback_SubmitMessageBox
// [0x00120000] 
// Parameters infos:
// unsigned char                  eReturnEnum                    ( CPF_Parm )

void USFXSFHandler_EANetworking::GuiCallback_SubmitMessageBox ( unsigned char eReturnEnum )
{
	static UFunction* pFnGuiCallback_SubmitMessageBox = NULL;

	if ( ! pFnGuiCallback_SubmitMessageBox )
		pFnGuiCallback_SubmitMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 58105 ];

	USFXSFHandler_EANetworking_execGuiCallback_SubmitMessageBox_Parms GuiCallback_SubmitMessageBox_Parms;
	GuiCallback_SubmitMessageBox_Parms.eReturnEnum = eReturnEnum;

	this->ProcessEvent ( pFnGuiCallback_SubmitMessageBox, &GuiCallback_SubmitMessageBox_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.GuiCallback_SubmitNucleusLogin
// [0x00120000] 
// Parameters infos:
// struct FString                 Email                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  eReturnCode                    ( CPF_Parm )

void USFXSFHandler_EANetworking::GuiCallback_SubmitNucleusLogin ( struct FString Email, struct FString Password, unsigned char eReturnCode )
{
	static UFunction* pFnGuiCallback_SubmitNucleusLogin = NULL;

	if ( ! pFnGuiCallback_SubmitNucleusLogin )
		pFnGuiCallback_SubmitNucleusLogin = (UFunction*) UObject::GObjObjects()->Data[ 58101 ];

	USFXSFHandler_EANetworking_execGuiCallback_SubmitNucleusLogin_Parms GuiCallback_SubmitNucleusLogin_Parms;
	memcpy ( &GuiCallback_SubmitNucleusLogin_Parms.Email, &Email, 0xC );
	memcpy ( &GuiCallback_SubmitNucleusLogin_Parms.Password, &Password, 0xC );
	GuiCallback_SubmitNucleusLogin_Parms.eReturnCode = eReturnCode;

	this->ProcessEvent ( pFnGuiCallback_SubmitNucleusLogin, &GuiCallback_SubmitNucleusLogin_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.GuiCallback_SubmitIntroPage
// [0x00120000] 
// Parameters infos:
// unsigned long                  bContinue                      ( CPF_Parm )

void USFXSFHandler_EANetworking::GuiCallback_SubmitIntroPage ( unsigned long bContinue )
{
	static UFunction* pFnGuiCallback_SubmitIntroPage = NULL;

	if ( ! pFnGuiCallback_SubmitIntroPage )
		pFnGuiCallback_SubmitIntroPage = (UFunction*) UObject::GObjObjects()->Data[ 58099 ];

	USFXSFHandler_EANetworking_execGuiCallback_SubmitIntroPage_Parms GuiCallback_SubmitIntroPage_Parms;
	GuiCallback_SubmitIntroPage_Parms.bContinue = bContinue;

	this->ProcessEvent ( pFnGuiCallback_SubmitIntroPage, &GuiCallback_SubmitIntroPage_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_EANetworking.ShowParentEmail
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_EANetworking::ShowParentEmail ( )
{
	static UFunction* pFnShowParentEmail = NULL;

	if ( ! pFnShowParentEmail )
		pFnShowParentEmail = (UFunction*) UObject::GObjObjects()->Data[ 58098 ];

	USFXSFHandler_EANetworking_execShowParentEmail_Parms ShowParentEmail_Parms;

	pFnShowParentEmail->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowParentEmail, &ShowParentEmail_Parms, NULL );

	pFnShowParentEmail->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_EANetworking.ShowAccountDemographics
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FString >       m_CountryCodeList              ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FString >       m_CountryDisplayList           ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_EANetworking::ShowAccountDemographics ( TArray< struct FString > m_CountryCodeList, TArray< struct FString > m_CountryDisplayList )
{
	static UFunction* pFnShowAccountDemographics = NULL;

	if ( ! pFnShowAccountDemographics )
		pFnShowAccountDemographics = (UFunction*) UObject::GObjObjects()->Data[ 58093 ];

	USFXSFHandler_EANetworking_execShowAccountDemographics_Parms ShowAccountDemographics_Parms;
	memcpy ( &ShowAccountDemographics_Parms.m_CountryCodeList, &m_CountryCodeList, 0xC );
	memcpy ( &ShowAccountDemographics_Parms.m_CountryDisplayList, &m_CountryDisplayList, 0xC );

	pFnShowAccountDemographics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowAccountDemographics, &ShowAccountDemographics_Parms, NULL );

	pFnShowAccountDemographics->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_EANetworking.ShowEmailPasswordMismatch
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Email                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_EANetworking::ShowEmailPasswordMismatch ( struct FString Email, struct FString Password )
{
	static UFunction* pFnShowEmailPasswordMismatch = NULL;

	if ( ! pFnShowEmailPasswordMismatch )
		pFnShowEmailPasswordMismatch = (UFunction*) UObject::GObjObjects()->Data[ 58090 ];

	USFXSFHandler_EANetworking_execShowEmailPasswordMismatch_Parms ShowEmailPasswordMismatch_Parms;
	memcpy ( &ShowEmailPasswordMismatch_Parms.Email, &Email, 0xC );
	memcpy ( &ShowEmailPasswordMismatch_Parms.Password, &Password, 0xC );

	pFnShowEmailPasswordMismatch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowEmailPasswordMismatch, &ShowEmailPasswordMismatch_Parms, NULL );

	pFnShowEmailPasswordMismatch->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_EANetworking.ShowCreateNucleusAccountEx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sEmail                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sPassword                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bEAProducts                    ( CPF_Parm )
// unsigned long                  bThirdParty                    ( CPF_Parm )
// unsigned long                  bBioWareProducts               ( CPF_Parm )
// struct FString                 i_sCountryCode                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            BirthDay                       ( CPF_Parm )
// int                            BirthMonth                     ( CPF_Parm )
// int                            BirthYear                      ( CPF_Parm )
// struct FString                 i_sLanguageCode                ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FString >       m_CountryCodeList              ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FString >       m_CountryDisplayList           ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_EANetworking::ShowCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, TArray< struct FString > m_CountryCodeList, TArray< struct FString > m_CountryDisplayList )
{
	static UFunction* pFnShowCreateNucleusAccountEx = NULL;

	if ( ! pFnShowCreateNucleusAccountEx )
		pFnShowCreateNucleusAccountEx = (UFunction*) UObject::GObjObjects()->Data[ 58075 ];

	USFXSFHandler_EANetworking_execShowCreateNucleusAccountEx_Parms ShowCreateNucleusAccountEx_Parms;
	memcpy ( &ShowCreateNucleusAccountEx_Parms.sEmail, &sEmail, 0xC );
	memcpy ( &ShowCreateNucleusAccountEx_Parms.sPassword, &sPassword, 0xC );
	ShowCreateNucleusAccountEx_Parms.bEAProducts = bEAProducts;
	ShowCreateNucleusAccountEx_Parms.bThirdParty = bThirdParty;
	ShowCreateNucleusAccountEx_Parms.bBioWareProducts = bBioWareProducts;
	memcpy ( &ShowCreateNucleusAccountEx_Parms.i_sCountryCode, &i_sCountryCode, 0xC );
	ShowCreateNucleusAccountEx_Parms.BirthDay = BirthDay;
	ShowCreateNucleusAccountEx_Parms.BirthMonth = BirthMonth;
	ShowCreateNucleusAccountEx_Parms.BirthYear = BirthYear;
	memcpy ( &ShowCreateNucleusAccountEx_Parms.i_sLanguageCode, &i_sLanguageCode, 0xC );
	memcpy ( &ShowCreateNucleusAccountEx_Parms.m_CountryCodeList, &m_CountryCodeList, 0xC );
	memcpy ( &ShowCreateNucleusAccountEx_Parms.m_CountryDisplayList, &m_CountryDisplayList, 0xC );

	pFnShowCreateNucleusAccountEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowCreateNucleusAccountEx, &ShowCreateNucleusAccountEx_Parms, NULL );

	pFnShowCreateNucleusAccountEx->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_EANetworking.ShowCerberusWelcomeMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_EANetworking::ShowCerberusWelcomeMessage ( )
{
	static UFunction* pFnShowCerberusWelcomeMessage = NULL;

	if ( ! pFnShowCerberusWelcomeMessage )
		pFnShowCerberusWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 58074 ];

	USFXSFHandler_EANetworking_execShowCerberusWelcomeMessage_Parms ShowCerberusWelcomeMessage_Parms;

	pFnShowCerberusWelcomeMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowCerberusWelcomeMessage, &ShowCerberusWelcomeMessage_Parms, NULL );

	pFnShowCerberusWelcomeMessage->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_EANetworking.ShowRedeemCode
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_EANetworking::ShowRedeemCode ( )
{
	static UFunction* pFnShowRedeemCode = NULL;

	if ( ! pFnShowRedeemCode )
		pFnShowRedeemCode = (UFunction*) UObject::GObjObjects()->Data[ 58073 ];

	USFXSFHandler_EANetworking_execShowRedeemCode_Parms ShowRedeemCode_Parms;

	pFnShowRedeemCode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowRedeemCode, &ShowRedeemCode_Parms, NULL );

	pFnShowRedeemCode->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_EANetworking.ShowCerberusIntro
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_EANetworking::ShowCerberusIntro ( )
{
	static UFunction* pFnShowCerberusIntro = NULL;

	if ( ! pFnShowCerberusIntro )
		pFnShowCerberusIntro = (UFunction*) UObject::GObjObjects()->Data[ 58072 ];

	USFXSFHandler_EANetworking_execShowCerberusIntro_Parms ShowCerberusIntro_Parms;

	pFnShowCerberusIntro->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowCerberusIntro, &ShowCerberusIntro_Parms, NULL );

	pFnShowCerberusIntro->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_EANetworking.ShowNucleusWelcomeMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_EANetworking::ShowNucleusWelcomeMessage ( )
{
	static UFunction* pFnShowNucleusWelcomeMessage = NULL;

	if ( ! pFnShowNucleusWelcomeMessage )
		pFnShowNucleusWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 58071 ];

	USFXSFHandler_EANetworking_execShowNucleusWelcomeMessage_Parms ShowNucleusWelcomeMessage_Parms;

	pFnShowNucleusWelcomeMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowNucleusWelcomeMessage, &ShowNucleusWelcomeMessage_Parms, NULL );

	pFnShowNucleusWelcomeMessage->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_EANetworking.ShowTermsOfService
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 i_sTermsOfService              ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bTOSChanged                    ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_EANetworking::ShowTermsOfService ( struct FString i_sTermsOfService, unsigned long bTOSChanged )
{
	static UFunction* pFnShowTermsOfService = NULL;

	if ( ! pFnShowTermsOfService )
		pFnShowTermsOfService = (UFunction*) UObject::GObjObjects()->Data[ 58068 ];

	USFXSFHandler_EANetworking_execShowTermsOfService_Parms ShowTermsOfService_Parms;
	memcpy ( &ShowTermsOfService_Parms.i_sTermsOfService, &i_sTermsOfService, 0xC );
	ShowTermsOfService_Parms.bTOSChanged = bTOSChanged;

	pFnShowTermsOfService->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowTermsOfService, &ShowTermsOfService_Parms, NULL );

	pFnShowTermsOfService->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_EANetworking.ShowCreateNucleusAccount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sEmail                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sPassword                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bEAProducts                    ( CPF_Parm )
// unsigned long                  bThirdParty                    ( CPF_Parm )
// unsigned long                  bRegisterProduct               ( CPF_Parm )
// unsigned long                  bBioWareProducts               ( CPF_Parm )
// unsigned long                  bUnderage                      ( CPF_Parm )

void USFXSFHandler_EANetworking::ShowCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bUnderage )
{
	static UFunction* pFnShowCreateNucleusAccount = NULL;

	if ( ! pFnShowCreateNucleusAccount )
		pFnShowCreateNucleusAccount = (UFunction*) UObject::GObjObjects()->Data[ 58060 ];

	USFXSFHandler_EANetworking_execShowCreateNucleusAccount_Parms ShowCreateNucleusAccount_Parms;
	memcpy ( &ShowCreateNucleusAccount_Parms.sEmail, &sEmail, 0xC );
	memcpy ( &ShowCreateNucleusAccount_Parms.sPassword, &sPassword, 0xC );
	ShowCreateNucleusAccount_Parms.bEAProducts = bEAProducts;
	ShowCreateNucleusAccount_Parms.bThirdParty = bThirdParty;
	ShowCreateNucleusAccount_Parms.bRegisterProduct = bRegisterProduct;
	ShowCreateNucleusAccount_Parms.bBioWareProducts = bBioWareProducts;
	ShowCreateNucleusAccount_Parms.bUnderage = bUnderage;

	pFnShowCreateNucleusAccount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowCreateNucleusAccount, &ShowCreateNucleusAccount_Parms, NULL );

	pFnShowCreateNucleusAccount->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_EANetworking.ShowMessageBox
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sTitle                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sButton1Text                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sButton2Text                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sButton3Text                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_EANetworking::ShowMessageBox ( struct FString sTitle, struct FString sMessage, struct FString sButton1Text, struct FString sButton2Text, struct FString sButton3Text )
{
	static UFunction* pFnShowMessageBox = NULL;

	if ( ! pFnShowMessageBox )
		pFnShowMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 58054 ];

	USFXSFHandler_EANetworking_execShowMessageBox_Parms ShowMessageBox_Parms;
	memcpy ( &ShowMessageBox_Parms.sTitle, &sTitle, 0xC );
	memcpy ( &ShowMessageBox_Parms.sMessage, &sMessage, 0xC );
	memcpy ( &ShowMessageBox_Parms.sButton1Text, &sButton1Text, 0xC );
	memcpy ( &ShowMessageBox_Parms.sButton2Text, &sButton2Text, 0xC );
	memcpy ( &ShowMessageBox_Parms.sButton3Text, &sButton3Text, 0xC );

	pFnShowMessageBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowMessageBox, &ShowMessageBox_Parms, NULL );

	pFnShowMessageBox->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_EANetworking.ShowNucleusLogin
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Email                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            eScreenState                   ( CPF_Parm )

void USFXSFHandler_EANetworking::ShowNucleusLogin ( struct FString Email, struct FString Password, int eScreenState )
{
	static UFunction* pFnShowNucleusLogin = NULL;

	if ( ! pFnShowNucleusLogin )
		pFnShowNucleusLogin = (UFunction*) UObject::GObjObjects()->Data[ 58050 ];

	USFXSFHandler_EANetworking_execShowNucleusLogin_Parms ShowNucleusLogin_Parms;
	memcpy ( &ShowNucleusLogin_Parms.Email, &Email, 0xC );
	memcpy ( &ShowNucleusLogin_Parms.Password, &Password, 0xC );
	ShowNucleusLogin_Parms.eScreenState = eScreenState;

	pFnShowNucleusLogin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowNucleusLogin, &ShowNucleusLogin_Parms, NULL );

	pFnShowNucleusLogin->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_EANetworking.ShowIntroPage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_EANetworking::ShowIntroPage ( )
{
	static UFunction* pFnShowIntroPage = NULL;

	if ( ! pFnShowIntroPage )
		pFnShowIntroPage = (UFunction*) UObject::GObjObjects()->Data[ 58049 ];

	USFXSFHandler_EANetworking_execShowIntroPage_Parms ShowIntroPage_Parms;

	pFnShowIntroPage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowIntroPage, &ShowIntroPage_Parms, NULL );

	pFnShowIntroPage->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_HUD.PulseMessage
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_HUD::PulseMessage ( )
{
	static UFunction* pFnPulseMessage = NULL;

	if ( ! pFnPulseMessage )
		pFnPulseMessage = (UFunction*) UObject::GObjObjects()->Data[ 61084 ];

	USFXSFHandler_HUD_execPulseMessage_Parms PulseMessage_Parms;

	this->ProcessEvent ( pFnPulseMessage, &PulseMessage_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.PulseTextMessage
// [0x00020002] 
// Parameters infos:
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_HUD::PulseTextMessage ( struct FString sMessage )
{
	static UFunction* pFnPulseTextMessage = NULL;

	if ( ! pFnPulseTextMessage )
		pFnPulseTextMessage = (UFunction*) UObject::GObjObjects()->Data[ 61082 ];

	USFXSFHandler_HUD_execPulseTextMessage_Parms PulseTextMessage_Parms;
	memcpy ( &PulseTextMessage_Parms.sMessage, &sMessage, 0xC );

	this->ProcessEvent ( pFnPulseTextMessage, &PulseTextMessage_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.PulseFullAmmoMessage
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_HUD::PulseFullAmmoMessage ( )
{
	static UFunction* pFnPulseFullAmmoMessage = NULL;

	if ( ! pFnPulseFullAmmoMessage )
		pFnPulseFullAmmoMessage = (UFunction*) UObject::GObjObjects()->Data[ 61081 ];

	USFXSFHandler_HUD_execPulseFullAmmoMessage_Parms PulseFullAmmoMessage_Parms;

	this->ProcessEvent ( pFnPulseFullAmmoMessage, &PulseFullAmmoMessage_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.OnNotificationComplete
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_HUD::OnNotificationComplete ( )
{
	static UFunction* pFnOnNotificationComplete = NULL;

	if ( ! pFnOnNotificationComplete )
		pFnOnNotificationComplete = (UFunction*) UObject::GObjObjects()->Data[ 61080 ];

	USFXSFHandler_HUD_execOnNotificationComplete_Parms OnNotificationComplete_Parms;

	this->ProcessEvent ( pFnOnNotificationComplete, &OnNotificationComplete_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.ShouldDisplayWeaponIcon
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXSFHandler_HUD::eventShouldDisplayWeaponIcon ( )
{
	static UFunction* pFnShouldDisplayWeaponIcon = NULL;

	if ( ! pFnShouldDisplayWeaponIcon )
		pFnShouldDisplayWeaponIcon = (UFunction*) UObject::GObjObjects()->Data[ 61076 ];

	USFXSFHandler_HUD_eventShouldDisplayWeaponIcon_Parms ShouldDisplayWeaponIcon_Parms;

	this->ProcessEvent ( pFnShouldDisplayWeaponIcon, &ShouldDisplayWeaponIcon_Parms, NULL );

	return ShouldDisplayWeaponIcon_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_HUD.UpdateWeaponDisplay
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )
// class AWeapon*                 pWeap                          ( CPF_Parm )

void USFXSFHandler_HUD::eventUpdateWeaponDisplay ( unsigned long bVisible, class AWeapon* pWeap )
{
	static UFunction* pFnUpdateWeaponDisplay = NULL;

	if ( ! pFnUpdateWeaponDisplay )
		pFnUpdateWeaponDisplay = (UFunction*) UObject::GObjObjects()->Data[ 61064 ];

	USFXSFHandler_HUD_eventUpdateWeaponDisplay_Parms UpdateWeaponDisplay_Parms;
	UpdateWeaponDisplay_Parms.bVisible = bVisible;
	UpdateWeaponDisplay_Parms.pWeap = pWeap;

	this->ProcessEvent ( pFnUpdateWeaponDisplay, &UpdateWeaponDisplay_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.UpdateResistanceDisplay
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FSFXHUDResistances      oResistValues                  ( CPF_Parm )

void USFXSFHandler_HUD::eventUpdateResistanceDisplay ( struct FSFXHUDResistances oResistValues )
{
	static UFunction* pFnUpdateResistanceDisplay = NULL;

	if ( ! pFnUpdateResistanceDisplay )
		pFnUpdateResistanceDisplay = (UFunction*) UObject::GObjObjects()->Data[ 61061 ];

	USFXSFHandler_HUD_eventUpdateResistanceDisplay_Parms UpdateResistanceDisplay_Parms;
	memcpy ( &UpdateResistanceDisplay_Parms.oResistValues, &oResistValues, 0x14 );

	this->ProcessEvent ( pFnUpdateResistanceDisplay, &UpdateResistanceDisplay_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.UpdateTargetStatusDisplay
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// struct FSFXHUDTargetInfo       oTargetInfo                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSFHandler_HUD::eventUpdateTargetStatusDisplay ( struct FSFXHUDTargetInfo* oTargetInfo )
{
	static UFunction* pFnUpdateTargetStatusDisplay = NULL;

	if ( ! pFnUpdateTargetStatusDisplay )
		pFnUpdateTargetStatusDisplay = (UFunction*) UObject::GObjObjects()->Data[ 61058 ];

	USFXSFHandler_HUD_eventUpdateTargetStatusDisplay_Parms UpdateTargetStatusDisplay_Parms;

	this->ProcessEvent ( pFnUpdateTargetStatusDisplay, &UpdateTargetStatusDisplay_Parms, NULL );

	if ( oTargetInfo )
		memcpy ( oTargetInfo, &UpdateTargetStatusDisplay_Parms.oTargetInfo, 0x34 );
};

// Function SFXGame.SFXSFHandler_HUD.UpdateResistanceBarDisplay
// [0x00020002] 
// Parameters infos:
// float                          fResistPercent                 ( CPF_Parm )
// struct FString                 sBarClipPath                   ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_HUD::UpdateResistanceBarDisplay ( float fResistPercent, struct FString sBarClipPath )
{
	static UFunction* pFnUpdateResistanceBarDisplay = NULL;

	if ( ! pFnUpdateResistanceBarDisplay )
		pFnUpdateResistanceBarDisplay = (UFunction*) UObject::GObjObjects()->Data[ 61054 ];

	USFXSFHandler_HUD_execUpdateResistanceBarDisplay_Parms UpdateResistanceBarDisplay_Parms;
	UpdateResistanceBarDisplay_Parms.fResistPercent = fResistPercent;
	memcpy ( &UpdateResistanceBarDisplay_Parms.sBarClipPath, &sBarClipPath, 0xC );

	this->ProcessEvent ( pFnUpdateResistanceBarDisplay, &UpdateResistanceBarDisplay_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.UpdateTargetStatusVisibility
// [0x00420002] 
// Parameters infos:
// struct FSFXHUDTargetInfo       oTargetInfo                    ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSFHandler_HUD::UpdateTargetStatusVisibility ( struct FSFXHUDTargetInfo* oTargetInfo )
{
	static UFunction* pFnUpdateTargetStatusVisibility = NULL;

	if ( ! pFnUpdateTargetStatusVisibility )
		pFnUpdateTargetStatusVisibility = (UFunction*) UObject::GObjObjects()->Data[ 61050 ];

	USFXSFHandler_HUD_execUpdateTargetStatusVisibility_Parms UpdateTargetStatusVisibility_Parms;

	this->ProcessEvent ( pFnUpdateTargetStatusVisibility, &UpdateTargetStatusVisibility_Parms, NULL );

	if ( oTargetInfo )
		memcpy ( oTargetInfo, &UpdateTargetStatusVisibility_Parms.oTargetInfo, 0x34 );
};

// Function SFXGame.SFXSFHandler_HUD.SetTargetStatus
// [0x00020002] 
// Parameters infos:
// struct FString                 sStatus                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bInteractive                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInRange                       ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_HUD::SetTargetStatus ( struct FString sStatus, unsigned long bInteractive, unsigned long bInRange )
{
	static UFunction* pFnSetTargetStatus = NULL;

	if ( ! pFnSetTargetStatus )
		pFnSetTargetStatus = (UFunction*) UObject::GObjObjects()->Data[ 61044 ];

	USFXSFHandler_HUD_execSetTargetStatus_Parms SetTargetStatus_Parms;
	memcpy ( &SetTargetStatus_Parms.sStatus, &sStatus, 0xC );
	SetTargetStatus_Parms.bInteractive = bInteractive;
	SetTargetStatus_Parms.bInRange = bInRange;

	this->ProcessEvent ( pFnSetTargetStatus, &SetTargetStatus_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.SetTargetName
// [0x00020002] 
// Parameters infos:
// struct FString                 sTargetName                    ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bHostile                       ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_HUD::SetTargetName ( struct FString sTargetName, unsigned long bHostile )
{
	static UFunction* pFnSetTargetName = NULL;

	if ( ! pFnSetTargetName )
		pFnSetTargetName = (UFunction*) UObject::GObjObjects()->Data[ 61039 ];

	USFXSFHandler_HUD_execSetTargetName_Parms SetTargetName_Parms;
	memcpy ( &SetTargetName_Parms.sTargetName, &sTargetName, 0xC );
	SetTargetName_Parms.bHostile = bHostile;

	this->ProcessEvent ( pFnSetTargetName, &SetTargetName_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.SetOverheat
// [0x00020002] 
// Parameters infos:
// float                          fOverheatPct                   ( CPF_Parm )
// unsigned long                  bForce                         ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_HUD::SetOverheat ( float fOverheatPct, unsigned long bForce )
{
	static UFunction* pFnSetOverheat = NULL;

	if ( ! pFnSetOverheat )
		pFnSetOverheat = (UFunction*) UObject::GObjObjects()->Data[ 61036 ];

	USFXSFHandler_HUD_execSetOverheat_Parms SetOverheat_Parms;
	SetOverheat_Parms.fOverheatPct = fOverheatPct;
	SetOverheat_Parms.bForce = bForce;

	this->ProcessEvent ( pFnSetOverheat, &SetOverheat_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.SetCenterStatus
// [0x00020002] 
// Parameters infos:
// struct FString                 sText                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_HUD::SetCenterStatus ( struct FString sText )
{
	static UFunction* pFnSetCenterStatus = NULL;

	if ( ! pFnSetCenterStatus )
		pFnSetCenterStatus = (UFunction*) UObject::GObjObjects()->Data[ 61034 ];

	USFXSFHandler_HUD_execSetCenterStatus_Parms SetCenterStatus_Parms;
	memcpy ( &SetCenterStatus_Parms.sText, &sText, 0xC );

	this->ProcessEvent ( pFnSetCenterStatus, &SetCenterStatus_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.GetStatusText
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class ABioPawn*                pTarget                        ( CPF_Parm )
// int                            nStatusFlags                   ( CPF_Parm )

struct FString USFXSFHandler_HUD::eventGetStatusText ( class ABioPawn* pTarget, int nStatusFlags )
{
	static UFunction* pFnGetStatusText = NULL;

	if ( ! pFnGetStatusText )
		pFnGetStatusText = (UFunction*) UObject::GObjObjects()->Data[ 61028 ];

	USFXSFHandler_HUD_eventGetStatusText_Parms GetStatusText_Parms;
	GetStatusText_Parms.pTarget = pTarget;
	GetStatusText_Parms.nStatusFlags = nStatusFlags;

	this->ProcessEvent ( pFnGetStatusText, &GetStatusText_Parms, NULL );

	return GetStatusText_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_HUD.GetTargetStatusFlags
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  pTarget                        ( CPF_Parm )

int USFXSFHandler_HUD::eventGetTargetStatusFlags ( class AActor* pTarget )
{
	static UFunction* pFnGetTargetStatusFlags = NULL;

	if ( ! pFnGetTargetStatusFlags )
		pFnGetTargetStatusFlags = (UFunction*) UObject::GObjObjects()->Data[ 61018 ];

	USFXSFHandler_HUD_eventGetTargetStatusFlags_Parms GetTargetStatusFlags_Parms;
	GetTargetStatusFlags_Parms.pTarget = pTarget;

	this->ProcessEvent ( pFnGetTargetStatusFlags, &GetTargetStatusFlags_Parms, NULL );

	return GetTargetStatusFlags_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_HUD.GetTargetHealthAndShields
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  pTarget                        ( CPF_Parm )
// float                          fHealthPct                     ( CPF_Parm | CPF_OutParm )
// float                          fShieldsPct                    ( CPF_Parm | CPF_OutParm )

void USFXSFHandler_HUD::eventGetTargetHealthAndShields ( class AActor* pTarget, float* fHealthPct, float* fShieldsPct )
{
	static UFunction* pFnGetTargetHealthAndShields = NULL;

	if ( ! pFnGetTargetHealthAndShields )
		pFnGetTargetHealthAndShields = (UFunction*) UObject::GObjObjects()->Data[ 61009 ];

	USFXSFHandler_HUD_eventGetTargetHealthAndShields_Parms GetTargetHealthAndShields_Parms;
	GetTargetHealthAndShields_Parms.pTarget = pTarget;

	this->ProcessEvent ( pFnGetTargetHealthAndShields, &GetTargetHealthAndShields_Parms, NULL );

	if ( fHealthPct )
		*fHealthPct = GetTargetHealthAndShields_Parms.fHealthPct;

	if ( fShieldsPct )
		*fShieldsPct = GetTargetHealthAndShields_Parms.fShieldsPct;
};

// Function SFXGame.SFXSFHandler_HUD.GetResistances
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  pTarget                        ( CPF_Parm )
// struct FSFXHUDResistances      oResistances                   ( CPF_Parm | CPF_OutParm )

void USFXSFHandler_HUD::eventGetResistances ( class AActor* pTarget, struct FSFXHUDResistances* oResistances )
{
	static UFunction* pFnGetResistances = NULL;

	if ( ! pFnGetResistances )
		pFnGetResistances = (UFunction*) UObject::GObjObjects()->Data[ 60994 ];

	USFXSFHandler_HUD_eventGetResistances_Parms GetResistances_Parms;
	GetResistances_Parms.pTarget = pTarget;

	this->ProcessEvent ( pFnGetResistances, &GetResistances_Parms, NULL );

	if ( oResistances )
		memcpy ( oResistances, &GetResistances_Parms.oResistances, 0x14 );
};

// Function SFXGame.SFXSFHandler_HUD.UpdateCachedPositionData
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_HUD::eventUpdateCachedPositionData ( )
{
	static UFunction* pFnUpdateCachedPositionData = NULL;

	if ( ! pFnUpdateCachedPositionData )
		pFnUpdateCachedPositionData = (UFunction*) UObject::GObjObjects()->Data[ 60993 ];

	USFXSFHandler_HUD_eventUpdateCachedPositionData_Parms UpdateCachedPositionData_Parms;

	this->ProcessEvent ( pFnUpdateCachedPositionData, &UpdateCachedPositionData_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.InitDisplay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_HUD::eventInitDisplay ( )
{
	static UFunction* pFnInitDisplay = NULL;

	if ( ! pFnInitDisplay )
		pFnInitDisplay = (UFunction*) UObject::GObjObjects()->Data[ 60992 ];

	USFXSFHandler_HUD_eventInitDisplay_Parms InitDisplay_Parms;

	this->ProcessEvent ( pFnInitDisplay, &InitDisplay_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.OnAspectRatioChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_HUD::eventOnAspectRatioChanged ( )
{
	static UFunction* pFnOnAspectRatioChanged = NULL;

	if ( ! pFnOnAspectRatioChanged )
		pFnOnAspectRatioChanged = (UFunction*) UObject::GObjObjects()->Data[ 60991 ];

	USFXSFHandler_HUD_eventOnAspectRatioChanged_Parms OnAspectRatioChanged_Parms;

	this->ProcessEvent ( pFnOnAspectRatioChanged, &OnAspectRatioChanged_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.GameSessionEnded
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_HUD::GameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 60990 ];

	USFXSFHandler_HUD_execGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.CleanupReferences
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_HUD::CleanupReferences ( )
{
	static UFunction* pFnCleanupReferences = NULL;

	if ( ! pFnCleanupReferences )
		pFnCleanupReferences = (UFunction*) UObject::GObjObjects()->Data[ 60989 ];

	USFXSFHandler_HUD_execCleanupReferences_Parms CleanupReferences_Parms;

	this->ProcessEvent ( pFnCleanupReferences, &CleanupReferences_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.OnPanelRemoved
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_HUD::eventOnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 60988 ];

	USFXSFHandler_HUD_eventOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_HUD.OnNotificationOpenAnimComplete
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_HUD::OnNotificationOpenAnimComplete ( )
{
	static UFunction* pFnOnNotificationOpenAnimComplete = NULL;

	if ( ! pFnOnNotificationOpenAnimComplete )
		pFnOnNotificationOpenAnimComplete = (UFunction*) UObject::GObjObjects()->Data[ 60987 ];

	USFXSFHandler_HUD_execOnNotificationOpenAnimComplete_Parms OnNotificationOpenAnimComplete_Parms;

	pFnOnNotificationOpenAnimComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnNotificationOpenAnimComplete, &OnNotificationOpenAnimComplete_Parms, NULL );

	pFnOnNotificationOpenAnimComplete->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_HUD.ClearNotification
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_HUD::ClearNotification ( )
{
	static UFunction* pFnClearNotification = NULL;

	if ( ! pFnClearNotification )
		pFnClearNotification = (UFunction*) UObject::GObjObjects()->Data[ 60986 ];

	USFXSFHandler_HUD_execClearNotification_Parms ClearNotification_Parms;

	pFnClearNotification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearNotification, &ClearNotification_Parms, NULL );

	pFnClearNotification->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_HUD.ShowNotification
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          nDisplayTime                   ( CPF_Parm )
// int                            nNumRemainingNotifications     ( CPF_Parm )
// int                            nPriority                      ( CPF_Parm )
// struct FString                 sTitle                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sSubtitle                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sBody                          ( CPF_Parm | CPF_NeedCtorLink )
// class UTexture*                oImage                         ( CPF_Parm )
// struct FName                   nmAdditonalSound               ( CPF_Parm )
// int                            nFlourishID                    ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_HUD::ShowNotification ( float nDisplayTime, int nNumRemainingNotifications, int nPriority, struct FString sTitle, struct FString sSubtitle, struct FString sBody, class UTexture* oImage, struct FName nmAdditonalSound, int nFlourishID )
{
	static UFunction* pFnShowNotification = NULL;

	if ( ! pFnShowNotification )
		pFnShowNotification = (UFunction*) UObject::GObjObjects()->Data[ 60976 ];

	USFXSFHandler_HUD_execShowNotification_Parms ShowNotification_Parms;
	ShowNotification_Parms.nDisplayTime = nDisplayTime;
	ShowNotification_Parms.nNumRemainingNotifications = nNumRemainingNotifications;
	ShowNotification_Parms.nPriority = nPriority;
	memcpy ( &ShowNotification_Parms.sTitle, &sTitle, 0xC );
	memcpy ( &ShowNotification_Parms.sSubtitle, &sSubtitle, 0xC );
	memcpy ( &ShowNotification_Parms.sBody, &sBody, 0xC );
	ShowNotification_Parms.oImage = oImage;
	memcpy ( &ShowNotification_Parms.nmAdditonalSound, &nmAdditonalSound, 0x8 );
	ShowNotification_Parms.nFlourishID = nFlourishID;

	pFnShowNotification->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowNotification, &ShowNotification_Parms, NULL );

	pFnShowNotification->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_HUD.OnNotificationCompleted
// [0x00120000] 
// Parameters infos:

void USFXSFHandler_HUD::OnNotificationCompleted ( )
{
	static UFunction* pFnOnNotificationCompleted = NULL;

	if ( ! pFnOnNotificationCompleted )
		pFnOnNotificationCompleted = (UFunction*) UObject::GObjObjects()->Data[ 60892 ];

	USFXSFHandler_HUD_execOnNotificationCompleted_Parms OnNotificationCompleted_Parms;

	this->ProcessEvent ( pFnOnNotificationCompleted, &OnNotificationCompleted_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Save.GetNewSaveIdx
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXSFHandler_Save::GetNewSaveIdx ( )
{
	static UFunction* pFnGetNewSaveIdx = NULL;

	if ( ! pFnGetNewSaveIdx )
		pFnGetNewSaveIdx = (UFunction*) UObject::GObjObjects()->Data[ 61135 ];

	USFXSFHandler_Save_execGetNewSaveIdx_Parms GetNewSaveIdx_Parms;

	this->ProcessEvent ( pFnGetNewSaveIdx, &GetNewSaveIdx_Parms, NULL );

	return GetNewSaveIdx_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_Save.GetPlayerData
// [0x00420803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 FirstName                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// int                            Level                          ( CPF_Parm | CPF_OutParm )

bool USFXSFHandler_Save::eventGetPlayerData ( struct FString* FirstName, int* Level )
{
	static UFunction* pFnGetPlayerData = NULL;

	if ( ! pFnGetPlayerData )
		pFnGetPlayerData = (UFunction*) UObject::GObjObjects()->Data[ 61156 ];

	USFXSFHandler_Save_eventGetPlayerData_Parms GetPlayerData_Parms;

	this->ProcessEvent ( pFnGetPlayerData, &GetPlayerData_Parms, NULL );

	if ( FirstName )
		memcpy ( FirstName, &GetPlayerData_Parms.FirstName, 0xC );

	//if ( LastName )

	//if ( ClassName )

	if ( Level )
		*Level = GetPlayerData_Parms.Level;

	return GetPlayerData_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_Save.HandleEvent
// [0x00C20002] 
// Parameters infos:
// unsigned char                  Command                        ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSFHandler_Save::HandleEvent ( unsigned char Command, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 61145 ];

	USFXSFHandler_Save_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.Command = Command;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.SFXSFHandler_Save.Callback_DeviceSelectionComplete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bWasSuccessful                 ( CPF_Parm )

void USFXSFHandler_Save::Callback_DeviceSelectionComplete ( unsigned long bWasSuccessful )
{
	static UFunction* pFnCallback_DeviceSelectionComplete = NULL;

	if ( ! pFnCallback_DeviceSelectionComplete )
		pFnCallback_DeviceSelectionComplete = (UFunction*) UObject::GObjObjects()->Data[ 61141 ];

	USFXSFHandler_Save_execCallback_DeviceSelectionComplete_Parms Callback_DeviceSelectionComplete_Parms;
	Callback_DeviceSelectionComplete_Parms.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent ( pFnCallback_DeviceSelectionComplete, &Callback_DeviceSelectionComplete_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Save.ResetGui
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Save::ResetGui ( )
{
	static UFunction* pFnResetGui = NULL;

	if ( ! pFnResetGui )
		pFnResetGui = (UFunction*) UObject::GObjObjects()->Data[ 61140 ];

	USFXSFHandler_Save_execResetGui_Parms ResetGui_Parms;

	this->ProcessEvent ( pFnResetGui, &ResetGui_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Save.Callback_ConfirmDelete
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void USFXSFHandler_Save::Callback_ConfirmDelete ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ConfirmDelete = NULL;

	if ( ! pFnCallback_ConfirmDelete )
		pFnCallback_ConfirmDelete = (UFunction*) UObject::GObjObjects()->Data[ 61136 ];

	USFXSFHandler_Save_execCallback_ConfirmDelete_Parms Callback_ConfirmDelete_Parms;
	Callback_ConfirmDelete_Parms.bAPressed = bAPressed;
	Callback_ConfirmDelete_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ConfirmDelete, &Callback_ConfirmDelete_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Save.Callback_ConfirmOverwrite
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void USFXSFHandler_Save::Callback_ConfirmOverwrite ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ConfirmOverwrite = NULL;

	if ( ! pFnCallback_ConfirmOverwrite )
		pFnCallback_ConfirmOverwrite = (UFunction*) UObject::GObjObjects()->Data[ 61130 ];

	USFXSFHandler_Save_execCallback_ConfirmOverwrite_Parms Callback_ConfirmOverwrite_Parms;
	Callback_ConfirmOverwrite_Parms.bAPressed = bAPressed;
	Callback_ConfirmOverwrite_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ConfirmOverwrite, &Callback_ConfirmOverwrite_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Save.InitializeSaveList
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_Save::InitializeSaveList ( )
{
	static UFunction* pFnInitializeSaveList = NULL;

	if ( ! pFnInitializeSaveList )
		pFnInitializeSaveList = (UFunction*) UObject::GObjObjects()->Data[ 61129 ];

	USFXSFHandler_Save_execInitializeSaveList_Parms InitializeSaveList_Parms;

	pFnInitializeSaveList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeSaveList, &InitializeSaveList_Parms, NULL );

	pFnInitializeSaveList->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_Load.GameSessionEnded
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Load::GameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 61208 ];

	USFXSFHandler_Load_execGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Load.OnStorageDeviceChanged
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Load::OnStorageDeviceChanged ( )
{
	static UFunction* pFnOnStorageDeviceChanged = NULL;

	if ( ! pFnOnStorageDeviceChanged )
		pFnOnStorageDeviceChanged = (UFunction*) UObject::GObjObjects()->Data[ 61206 ];

	USFXSFHandler_Load_execOnStorageDeviceChanged_Parms OnStorageDeviceChanged_Parms;

	this->ProcessEvent ( pFnOnStorageDeviceChanged, &OnStorageDeviceChanged_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Load.OnPanelRemoved
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_Load::eventOnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 61203 ];

	USFXSFHandler_Load_eventOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Load.OnPanelAdded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_Load::eventOnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 61200 ];

	USFXSFHandler_Load_eventOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Load.HandleEvent
// [0x00C20002] 
// Parameters infos:
// unsigned char                  Command                        ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSFHandler_Load::HandleEvent ( unsigned char Command, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 61188 ];

	USFXSFHandler_Load_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.Command = Command;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.SFXSFHandler_Load.CheckForCorruptSaves
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_Load::eventCheckForCorruptSaves ( )
{
	static UFunction* pFnCheckForCorruptSaves = NULL;

	if ( ! pFnCheckForCorruptSaves )
		pFnCheckForCorruptSaves = (UFunction*) UObject::GObjObjects()->Data[ 61185 ];

	USFXSFHandler_Load_eventCheckForCorruptSaves_Parms CheckForCorruptSaves_Parms;

	this->ProcessEvent ( pFnCheckForCorruptSaves, &CheckForCorruptSaves_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Load.Callback_ConfirmDeleteCorruptSaves
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void USFXSFHandler_Load::Callback_ConfirmDeleteCorruptSaves ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ConfirmDeleteCorruptSaves = NULL;

	if ( ! pFnCallback_ConfirmDeleteCorruptSaves )
		pFnCallback_ConfirmDeleteCorruptSaves = (UFunction*) UObject::GObjObjects()->Data[ 61182 ];

	USFXSFHandler_Load_execCallback_ConfirmDeleteCorruptSaves_Parms Callback_ConfirmDeleteCorruptSaves_Parms;
	Callback_ConfirmDeleteCorruptSaves_Parms.bAPressed = bAPressed;
	Callback_ConfirmDeleteCorruptSaves_Parms.Context = Context;

	pFnCallback_ConfirmDeleteCorruptSaves->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCallback_ConfirmDeleteCorruptSaves, &Callback_ConfirmDeleteCorruptSaves_Parms, NULL );

	pFnCallback_ConfirmDeleteCorruptSaves->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_Load.ResetGui
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Load::ResetGui ( )
{
	static UFunction* pFnResetGui = NULL;

	if ( ! pFnResetGui )
		pFnResetGui = (UFunction*) UObject::GObjObjects()->Data[ 61181 ];

	USFXSFHandler_Load_execResetGui_Parms ResetGui_Parms;

	this->ProcessEvent ( pFnResetGui, &ResetGui_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Load.Callback_ConfirmDeleteCareer
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void USFXSFHandler_Load::Callback_ConfirmDeleteCareer ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ConfirmDeleteCareer = NULL;

	if ( ! pFnCallback_ConfirmDeleteCareer )
		pFnCallback_ConfirmDeleteCareer = (UFunction*) UObject::GObjObjects()->Data[ 61177 ];

	USFXSFHandler_Load_execCallback_ConfirmDeleteCareer_Parms Callback_ConfirmDeleteCareer_Parms;
	Callback_ConfirmDeleteCareer_Parms.bAPressed = bAPressed;
	Callback_ConfirmDeleteCareer_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ConfirmDeleteCareer, &Callback_ConfirmDeleteCareer_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Load.Callback_ConfirmLoadGame
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void USFXSFHandler_Load::Callback_ConfirmLoadGame ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ConfirmLoadGame = NULL;

	if ( ! pFnCallback_ConfirmLoadGame )
		pFnCallback_ConfirmLoadGame = (UFunction*) UObject::GObjObjects()->Data[ 61172 ];

	USFXSFHandler_Load_execCallback_ConfirmLoadGame_Parms Callback_ConfirmLoadGame_Parms;
	Callback_ConfirmLoadGame_Parms.bAPressed = bAPressed;
	Callback_ConfirmLoadGame_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ConfirmLoadGame, &Callback_ConfirmLoadGame_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Load.DeleteCareer
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            CareerIdx                      ( CPF_Parm )

void USFXSFHandler_Load::DeleteCareer ( int CareerIdx )
{
	static UFunction* pFnDeleteCareer = NULL;

	if ( ! pFnDeleteCareer )
		pFnDeleteCareer = (UFunction*) UObject::GObjObjects()->Data[ 61170 ];

	USFXSFHandler_Load_execDeleteCareer_Parms DeleteCareer_Parms;
	DeleteCareer_Parms.CareerIdx = CareerIdx;

	pFnDeleteCareer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeleteCareer, &DeleteCareer_Parms, NULL );

	pFnDeleteCareer->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_Load.InitializeCareers
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_Load::InitializeCareers ( )
{
	static UFunction* pFnInitializeCareers = NULL;

	if ( ! pFnInitializeCareers )
		pFnInitializeCareers = (UFunction*) UObject::GObjObjects()->Data[ 61169 ];

	USFXSFHandler_Load_execInitializeCareers_Parms InitializeCareers_Parms;

	pFnInitializeCareers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeCareers, &InitializeCareers_Parms, NULL );

	pFnInitializeCareers->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_Load.InitializeLoadList
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            CareerIdx                      ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_Load::InitializeLoadList ( int CareerIdx )
{
	static UFunction* pFnInitializeLoadList = NULL;

	if ( ! pFnInitializeLoadList )
		pFnInitializeLoadList = (UFunction*) UObject::GObjObjects()->Data[ 61167 ];

	USFXSFHandler_Load_execInitializeLoadList_Parms InitializeLoadList_Parms;
	InitializeLoadList_Parms.CareerIdx = CareerIdx;

	pFnInitializeLoadList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeLoadList, &InitializeLoadList_Parms, NULL );

	pFnInitializeLoadList->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetHenchmanMappedPower
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                pPawn                          ( CPF_Parm )
// struct FName                   nmPower                        ( CPF_Parm )

bool USFXSFHandler_PowerWheel::eventSetHenchmanMappedPower ( class ABioPawn* pPawn, struct FName nmPower )
{
	static UFunction* pFnSetHenchmanMappedPower = NULL;

	if ( ! pFnSetHenchmanMappedPower )
		pFnSetHenchmanMappedPower = (UFunction*) UObject::GObjObjects()->Data[ 61731 ];

	USFXSFHandler_PowerWheel_eventSetHenchmanMappedPower_Parms SetHenchmanMappedPower_Parms;
	SetHenchmanMappedPower_Parms.pPawn = pPawn;
	memcpy ( &SetHenchmanMappedPower_Parms.nmPower, &nmPower, 0x8 );

	this->ProcessEvent ( pFnSetHenchmanMappedPower, &SetHenchmanMappedPower_Parms, NULL );

	return SetHenchmanMappedPower_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PowerWheel.GetHenchmanMappedPower
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                pPawn                          ( CPF_Parm )

struct FName USFXSFHandler_PowerWheel::eventGetHenchmanMappedPower ( class ABioPawn* pPawn )
{
	static UFunction* pFnGetHenchmanMappedPower = NULL;

	if ( ! pFnGetHenchmanMappedPower )
		pFnGetHenchmanMappedPower = (UFunction*) UObject::GObjObjects()->Data[ 61728 ];

	USFXSFHandler_PowerWheel_eventGetHenchmanMappedPower_Parms GetHenchmanMappedPower_Parms;
	GetHenchmanMappedPower_Parms.pPawn = pPawn;

	this->ProcessEvent ( pFnGetHenchmanMappedPower, &GetHenchmanMappedPower_Parms, NULL );

	return GetHenchmanMappedPower_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetMappingIcon
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eNewIcon                       ( CPF_Parm )
// unsigned long                  bClear                         ( CPF_OptionalParm | CPF_Parm )
// struct FSFXPowerWheelButtonIcon oIcon                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSFHandler_PowerWheel::SetMappingIcon ( unsigned char eNewIcon, unsigned long bClear, struct FSFXPowerWheelButtonIcon* oIcon )
{
	static UFunction* pFnSetMappingIcon = NULL;

	if ( ! pFnSetMappingIcon )
		pFnSetMappingIcon = (UFunction*) UObject::GObjObjects()->Data[ 61724 ];

	USFXSFHandler_PowerWheel_execSetMappingIcon_Parms SetMappingIcon_Parms;
	SetMappingIcon_Parms.eNewIcon = eNewIcon;
	SetMappingIcon_Parms.bClear = bClear;

	pFnSetMappingIcon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMappingIcon, &SetMappingIcon_Parms, NULL );

	pFnSetMappingIcon->FunctionFlags |= 0x400;

	if ( oIcon )
		memcpy ( oIcon, &SetMappingIcon_Parms.oIcon, 0x10 );
};

// Function SFXGame.SFXSFHandler_PowerWheel.ExInt_WheelTransitionOutDone
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_PowerWheel::ExInt_WheelTransitionOutDone ( )
{
	static UFunction* pFnExInt_WheelTransitionOutDone = NULL;

	if ( ! pFnExInt_WheelTransitionOutDone )
		pFnExInt_WheelTransitionOutDone = (UFunction*) UObject::GObjObjects()->Data[ 61723 ];

	USFXSFHandler_PowerWheel_execExInt_WheelTransitionOutDone_Parms ExInt_WheelTransitionOutDone_Parms;

	this->ProcessEvent ( pFnExInt_WheelTransitionOutDone, &ExInt_WheelTransitionOutDone_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.GetMapBoundaryValues
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               vTopLeft                       ( CPF_Parm | CPF_OutParm )
// struct FVector2D               vBottomRight                   ( CPF_Parm | CPF_OutParm )
// float                          fBoundaryRotation              ( CPF_Parm | CPF_OutParm )

bool USFXSFHandler_PowerWheel::GetMapBoundaryValues ( struct FVector2D* vTopLeft, struct FVector2D* vBottomRight, float* fBoundaryRotation )
{
	static UFunction* pFnGetMapBoundaryValues = NULL;

	if ( ! pFnGetMapBoundaryValues )
		pFnGetMapBoundaryValues = (UFunction*) UObject::GObjObjects()->Data[ 61718 ];

	USFXSFHandler_PowerWheel_execGetMapBoundaryValues_Parms GetMapBoundaryValues_Parms;

	pFnGetMapBoundaryValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapBoundaryValues, &GetMapBoundaryValues_Parms, NULL );

	pFnGetMapBoundaryValues->FunctionFlags |= 0x400;

	if ( vTopLeft )
		memcpy ( vTopLeft, &GetMapBoundaryValues_Parms.vTopLeft, 0x8 );

	if ( vBottomRight )
		memcpy ( vBottomRight, &GetMapBoundaryValues_Parms.vBottomRight, 0x8 );

	if ( fBoundaryRotation )
		*fBoundaryRotation = GetMapBoundaryValues_Parms.fBoundaryRotation;

	return GetMapBoundaryValues_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PowerWheel.GetRadarDirectionValues
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          fArrowDirection                ( CPF_Parm | CPF_OutParm )
// float                          fNorthDirection                ( CPF_Parm | CPF_OutParm )
// float                          fPathingArrowDirection         ( CPF_Parm | CPF_OutParm )

void USFXSFHandler_PowerWheel::GetRadarDirectionValues ( float* fArrowDirection, float* fNorthDirection, float* fPathingArrowDirection )
{
	static UFunction* pFnGetRadarDirectionValues = NULL;

	if ( ! pFnGetRadarDirectionValues )
		pFnGetRadarDirectionValues = (UFunction*) UObject::GObjObjects()->Data[ 61714 ];

	USFXSFHandler_PowerWheel_execGetRadarDirectionValues_Parms GetRadarDirectionValues_Parms;

	pFnGetRadarDirectionValues->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRadarDirectionValues, &GetRadarDirectionValues_Parms, NULL );

	pFnGetRadarDirectionValues->FunctionFlags |= 0x400;

	if ( fArrowDirection )
		*fArrowDirection = GetRadarDirectionValues_Parms.fArrowDirection;

	if ( fNorthDirection )
		*fNorthDirection = GetRadarDirectionValues_Parms.fNorthDirection;

	if ( fPathingArrowDirection )
		*fPathingArrowDirection = GetRadarDirectionValues_Parms.fPathingArrowDirection;
};

// Function SFXGame.SFXSFHandler_PowerWheel.CollectRadarElementData
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FSFXRadarElementData > aRadarData                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSFHandler_PowerWheel::CollectRadarElementData ( TArray< struct FSFXRadarElementData >* aRadarData )
{
	static UFunction* pFnCollectRadarElementData = NULL;

	if ( ! pFnCollectRadarElementData )
		pFnCollectRadarElementData = (UFunction*) UObject::GObjObjects()->Data[ 61711 ];

	USFXSFHandler_PowerWheel_execCollectRadarElementData_Parms CollectRadarElementData_Parms;

	pFnCollectRadarElementData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCollectRadarElementData, &CollectRadarElementData_Parms, NULL );

	pFnCollectRadarElementData->FunctionFlags |= 0x400;

	if ( aRadarData )
		memcpy ( aRadarData, &CollectRadarElementData_Parms.aRadarData, 0xC );
};

// Function SFXGame.SFXSFHandler_PowerWheel.PulseRadar
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fPulseTime                     ( CPF_Parm )

void USFXSFHandler_PowerWheel::PulseRadar ( float fPulseTime )
{
	static UFunction* pFnPulseRadar = NULL;

	if ( ! pFnPulseRadar )
		pFnPulseRadar = (UFunction*) UObject::GObjObjects()->Data[ 61709 ];

	USFXSFHandler_PowerWheel_execPulseRadar_Parms PulseRadar_Parms;
	PulseRadar_Parms.fPulseTime = fPulseTime;

	pFnPulseRadar->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPulseRadar, &PulseRadar_Parms, NULL );

	pFnPulseRadar->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PowerWheel.UpdateRadarMapBoundaries
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_PowerWheel::eventUpdateRadarMapBoundaries ( )
{
	static UFunction* pFnUpdateRadarMapBoundaries = NULL;

	if ( ! pFnUpdateRadarMapBoundaries )
		pFnUpdateRadarMapBoundaries = (UFunction*) UObject::GObjObjects()->Data[ 61702 ];

	USFXSFHandler_PowerWheel_eventUpdateRadarMapBoundaries_Parms UpdateRadarMapBoundaries_Parms;

	this->ProcessEvent ( pFnUpdateRadarMapBoundaries, &UpdateRadarMapBoundaries_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.UpdateRadarArrows
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_PowerWheel::eventUpdateRadarArrows ( )
{
	static UFunction* pFnUpdateRadarArrows = NULL;

	if ( ! pFnUpdateRadarArrows )
		pFnUpdateRadarArrows = (UFunction*) UObject::GObjObjects()->Data[ 61698 ];

	USFXSFHandler_PowerWheel_eventUpdateRadarArrows_Parms UpdateRadarArrows_Parms;

	this->ProcessEvent ( pFnUpdateRadarArrows, &UpdateRadarArrows_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.UpdateRadarElementPositions
// [0x00C20802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FSFXRadarElementData > aRadarData                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSFHandler_PowerWheel::eventUpdateRadarElementPositions ( TArray< struct FSFXRadarElementData >* aRadarData )
{
	static UFunction* pFnUpdateRadarElementPositions = NULL;

	if ( ! pFnUpdateRadarElementPositions )
		pFnUpdateRadarElementPositions = (UFunction*) UObject::GObjObjects()->Data[ 61692 ];

	USFXSFHandler_PowerWheel_eventUpdateRadarElementPositions_Parms UpdateRadarElementPositions_Parms;

	this->ProcessEvent ( pFnUpdateRadarElementPositions, &UpdateRadarElementPositions_Parms, NULL );

	if ( aRadarData )
		memcpy ( aRadarData, &UpdateRadarElementPositions_Parms.aRadarData, 0xC );
};

// Function SFXGame.SFXSFHandler_PowerWheel.UpdateRadarDisplay
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bObjectiveMode                 ( CPF_Parm )

void USFXSFHandler_PowerWheel::eventUpdateRadarDisplay ( unsigned long bObjectiveMode )
{
	static UFunction* pFnUpdateRadarDisplay = NULL;

	if ( ! pFnUpdateRadarDisplay )
		pFnUpdateRadarDisplay = (UFunction*) UObject::GObjObjects()->Data[ 61682 ];

	USFXSFHandler_PowerWheel_eventUpdateRadarDisplay_Parms UpdateRadarDisplay_Parms;
	UpdateRadarDisplay_Parms.bObjectiveMode = bObjectiveMode;

	this->ProcessEvent ( pFnUpdateRadarDisplay, &UpdateRadarDisplay_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.RadarVisibilityChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )
// unsigned long                  bObjectiveMode                 ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_PowerWheel::eventRadarVisibilityChanged ( unsigned long bVisible, unsigned long bObjectiveMode )
{
	static UFunction* pFnRadarVisibilityChanged = NULL;

	if ( ! pFnRadarVisibilityChanged )
		pFnRadarVisibilityChanged = (UFunction*) UObject::GObjObjects()->Data[ 61679 ];

	USFXSFHandler_PowerWheel_eventRadarVisibilityChanged_Parms RadarVisibilityChanged_Parms;
	RadarVisibilityChanged_Parms.bVisible = bVisible;
	RadarVisibilityChanged_Parms.bObjectiveMode = bObjectiveMode;

	this->ProcessEvent ( pFnRadarVisibilityChanged, &RadarVisibilityChanged_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.SelectCurrentWheelItem
// [0x00020002] 
// Parameters infos:
// unsigned char                  eMode                          ( CPF_Parm )

void USFXSFHandler_PowerWheel::SelectCurrentWheelItem ( unsigned char eMode )
{
	static UFunction* pFnSelectCurrentWheelItem = NULL;

	if ( ! pFnSelectCurrentWheelItem )
		pFnSelectCurrentWheelItem = (UFunction*) UObject::GObjObjects()->Data[ 61677 ];

	USFXSFHandler_PowerWheel_execSelectCurrentWheelItem_Parms SelectCurrentWheelItem_Parms;
	SelectCurrentWheelItem_Parms.eMode = eMode;

	this->ProcessEvent ( pFnSelectCurrentWheelItem, &SelectCurrentWheelItem_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_PowerWheel::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 61674 ];

	USFXSFHandler_PowerWheel_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.SelectCurrentWeapon
// [0x00820002] 
// Parameters infos:

void USFXSFHandler_PowerWheel::SelectCurrentWeapon ( )
{
	static UFunction* pFnSelectCurrentWeapon = NULL;

	if ( ! pFnSelectCurrentWeapon )
		pFnSelectCurrentWeapon = (UFunction*) UObject::GObjObjects()->Data[ 61666 ];

	USFXSFHandler_PowerWheel_execSelectCurrentWeapon_Parms SelectCurrentWeapon_Parms;

	this->ProcessEvent ( pFnSelectCurrentWeapon, &SelectCurrentWeapon_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.SortWeapons
// [0x00420000] 
// Parameters infos:
// class ABioPawn*                pPawn                          ( CPF_Parm )
// TArray< class ASFXWeapon* >    aWeapons                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSFHandler_PowerWheel::SortWeapons ( class ABioPawn* pPawn, TArray< class ASFXWeapon* >* aWeapons )
{
	static UFunction* pFnSortWeapons = NULL;

	if ( ! pFnSortWeapons )
		pFnSortWeapons = (UFunction*) UObject::GObjObjects()->Data[ 61662 ];

	USFXSFHandler_PowerWheel_execSortWeapons_Parms SortWeapons_Parms;
	SortWeapons_Parms.pPawn = pPawn;

	this->ProcessEvent ( pFnSortWeapons, &SortWeapons_Parms, NULL );

	if ( aWeapons )
		memcpy ( aWeapons, &SortWeapons_Parms.aWeapons, 0xC );
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetWeaponIcon
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              pWeap                          ( CPF_Parm )
// int                            nSlotIndex                     ( CPF_Parm )
// class ABioPawn*                pPawn                          ( CPF_Parm )

void USFXSFHandler_PowerWheel::SetWeaponIcon ( class ASFXWeapon* pWeap, int nSlotIndex, class ABioPawn* pPawn )
{
	static UFunction* pFnSetWeaponIcon = NULL;

	if ( ! pFnSetWeaponIcon )
		pFnSetWeaponIcon = (UFunction*) UObject::GObjObjects()->Data[ 61658 ];

	USFXSFHandler_PowerWheel_execSetWeaponIcon_Parms SetWeaponIcon_Parms;
	SetWeaponIcon_Parms.pWeap = pWeap;
	SetWeaponIcon_Parms.nSlotIndex = nSlotIndex;
	SetWeaponIcon_Parms.pPawn = pPawn;

	this->ProcessEvent ( pFnSetWeaponIcon, &SetWeaponIcon_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetupWeaponDisplayForPawn
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ABioPawn*                pPawn                          ( CPF_Parm )
// unsigned char                  ePawn                          ( CPF_Parm )

void USFXSFHandler_PowerWheel::eventSetupWeaponDisplayForPawn ( class ABioPawn* pPawn, unsigned char ePawn )
{
	static UFunction* pFnSetupWeaponDisplayForPawn = NULL;

	if ( ! pFnSetupWeaponDisplayForPawn )
		pFnSetupWeaponDisplayForPawn = (UFunction*) UObject::GObjObjects()->Data[ 61642 ];

	USFXSFHandler_PowerWheel_eventSetupWeaponDisplayForPawn_Parms SetupWeaponDisplayForPawn_Parms;
	SetupWeaponDisplayForPawn_Parms.pPawn = pPawn;
	SetupWeaponDisplayForPawn_Parms.ePawn = ePawn;

	this->ProcessEvent ( pFnSetupWeaponDisplayForPawn, &SetupWeaponDisplayForPawn_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.LeaveWeaponIcon
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nIconIndex                     ( CPF_Parm )

void USFXSFHandler_PowerWheel::eventLeaveWeaponIcon ( int nIconIndex )
{
	static UFunction* pFnLeaveWeaponIcon = NULL;

	if ( ! pFnLeaveWeaponIcon )
		pFnLeaveWeaponIcon = (UFunction*) UObject::GObjObjects()->Data[ 61640 ];

	USFXSFHandler_PowerWheel_eventLeaveWeaponIcon_Parms LeaveWeaponIcon_Parms;
	LeaveWeaponIcon_Parms.nIconIndex = nIconIndex;

	this->ProcessEvent ( pFnLeaveWeaponIcon, &LeaveWeaponIcon_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.HoverWeaponIcon
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nIconIndex                     ( CPF_Parm )
// unsigned long                  bForceUpdate                   ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_PowerWheel::eventHoverWeaponIcon ( int nIconIndex, unsigned long bForceUpdate )
{
	static UFunction* pFnHoverWeaponIcon = NULL;

	if ( ! pFnHoverWeaponIcon )
		pFnHoverWeaponIcon = (UFunction*) UObject::GObjObjects()->Data[ 61635 ];

	USFXSFHandler_PowerWheel_eventHoverWeaponIcon_Parms HoverWeaponIcon_Parms;
	HoverWeaponIcon_Parms.nIconIndex = nIconIndex;
	HoverWeaponIcon_Parms.bForceUpdate = bForceUpdate;

	this->ProcessEvent ( pFnHoverWeaponIcon, &HoverWeaponIcon_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.UpdateWeaponIconDisplay
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FSFXPowerWheelIconWeapon oIcon                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sAltPath                       ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_PowerWheel::eventUpdateWeaponIconDisplay ( struct FSFXPowerWheelIconWeapon oIcon, struct FString sAltPath )
{
	static UFunction* pFnUpdateWeaponIconDisplay = NULL;

	if ( ! pFnUpdateWeaponIconDisplay )
		pFnUpdateWeaponIconDisplay = (UFunction*) UObject::GObjObjects()->Data[ 61630 ];

	USFXSFHandler_PowerWheel_eventUpdateWeaponIconDisplay_Parms UpdateWeaponIconDisplay_Parms;
	memcpy ( &UpdateWeaponIconDisplay_Parms.oIcon, &oIcon, 0x58 );
	memcpy ( &UpdateWeaponIconDisplay_Parms.sAltPath, &sAltPath, 0xC );

	this->ProcessEvent ( pFnUpdateWeaponIconDisplay, &UpdateWeaponIconDisplay_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.SelectWeapon
// [0x00020002] 
// Parameters infos:
// int                            nWeaponIndex                   ( CPF_Parm )

void USFXSFHandler_PowerWheel::SelectWeapon ( int nWeaponIndex )
{
	static UFunction* pFnSelectWeapon = NULL;

	if ( ! pFnSelectWeapon )
		pFnSelectWeapon = (UFunction*) UObject::GObjObjects()->Data[ 61628 ];

	USFXSFHandler_PowerWheel_execSelectWeapon_Parms SelectWeapon_Parms;
	SelectWeapon_Parms.nWeaponIndex = nWeaponIndex;

	this->ProcessEvent ( pFnSelectWeapon, &SelectWeapon_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetWeaponState
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// int                            nWeapIndex                     ( CPF_Parm )
// unsigned char                  eNewWeapState                  ( CPF_Parm )

void USFXSFHandler_PowerWheel::eventSetWeaponState ( int nWeapIndex, unsigned char eNewWeapState )
{
	static UFunction* pFnSetWeaponState = NULL;

	if ( ! pFnSetWeaponState )
		pFnSetWeaponState = (UFunction*) UObject::GObjObjects()->Data[ 61622 ];

	USFXSFHandler_PowerWheel_eventSetWeaponState_Parms SetWeaponState_Parms;
	SetWeaponState_Parms.nWeapIndex = nWeapIndex;
	SetWeaponState_Parms.eNewWeapState = eNewWeapState;

	this->ProcessEvent ( pFnSetWeaponState, &SetWeaponState_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetWeaponTypeDisplay
// [0x00022002] 
// Parameters infos:
// class UBioSFPanel*             pPanel                         ( CPF_Parm )
// struct FString                 sIconPath                      ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sIconResource                  ( CPF_Parm | CPF_NeedCtorLink )
// int                            nNewType                       ( CPF_Parm )

void USFXSFHandler_PowerWheel::SetWeaponTypeDisplay ( class UBioSFPanel* pPanel, struct FString sIconPath, struct FString sIconResource, int nNewType )
{
	static UFunction* pFnSetWeaponTypeDisplay = NULL;

	if ( ! pFnSetWeaponTypeDisplay )
		pFnSetWeaponTypeDisplay = (UFunction*) UObject::GObjObjects()->Data[ 61615 ];

	USFXSFHandler_PowerWheel_execSetWeaponTypeDisplay_Parms SetWeaponTypeDisplay_Parms;
	SetWeaponTypeDisplay_Parms.pPanel = pPanel;
	memcpy ( &SetWeaponTypeDisplay_Parms.sIconPath, &sIconPath, 0xC );
	memcpy ( &SetWeaponTypeDisplay_Parms.sIconResource, &sIconResource, 0xC );
	SetWeaponTypeDisplay_Parms.nNewType = nNewType;

	this->ProcessEvent ( pFnSetWeaponTypeDisplay, &SetWeaponTypeDisplay_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetWeaponType
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// int                            nWeapIndex                     ( CPF_Parm )
// struct FString                 sWeaponIconResource            ( CPF_Parm | CPF_NeedCtorLink )
// int                            nNewWeapIcon                   ( CPF_Parm )

void USFXSFHandler_PowerWheel::eventSetWeaponType ( int nWeapIndex, struct FString sWeaponIconResource, int nNewWeapIcon )
{
	static UFunction* pFnSetWeaponType = NULL;

	if ( ! pFnSetWeaponType )
		pFnSetWeaponType = (UFunction*) UObject::GObjObjects()->Data[ 61610 ];

	USFXSFHandler_PowerWheel_eventSetWeaponType_Parms SetWeaponType_Parms;
	SetWeaponType_Parms.nWeapIndex = nWeapIndex;
	memcpy ( &SetWeaponType_Parms.sWeaponIconResource, &sWeaponIconResource, 0xC );
	SetWeaponType_Parms.nNewWeapIcon = nNewWeapIcon;

	this->ProcessEvent ( pFnSetWeaponType, &SetWeaponType_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.MapCurrentPower
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eIcon                          ( CPF_Parm )

void USFXSFHandler_PowerWheel::MapCurrentPower ( unsigned char eIcon )
{
	static UFunction* pFnMapCurrentPower = NULL;

	if ( ! pFnMapCurrentPower )
		pFnMapCurrentPower = (UFunction*) UObject::GObjObjects()->Data[ 61608 ];

	USFXSFHandler_PowerWheel_execMapCurrentPower_Parms MapCurrentPower_Parms;
	MapCurrentPower_Parms.eIcon = eIcon;

	pFnMapCurrentPower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMapCurrentPower, &MapCurrentPower_Parms, NULL );

	pFnMapCurrentPower->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PowerWheel.SelectCurrentPower
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_PowerWheel::SelectCurrentPower ( )
{
	static UFunction* pFnSelectCurrentPower = NULL;

	if ( ! pFnSelectCurrentPower )
		pFnSelectCurrentPower = (UFunction*) UObject::GObjObjects()->Data[ 61607 ];

	USFXSFHandler_PowerWheel_execSelectCurrentPower_Parms SelectCurrentPower_Parms;

	pFnSelectCurrentPower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectCurrentPower, &SelectCurrentPower_Parms, NULL );

	pFnSelectCurrentPower->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PowerWheel.GetCurrentHenchmanOrder
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                pPawn                          ( CPF_Parm )

struct FName USFXSFHandler_PowerWheel::eventGetCurrentHenchmanOrder ( class ABioPawn* pPawn )
{
	static UFunction* pFnGetCurrentHenchmanOrder = NULL;

	if ( ! pFnGetCurrentHenchmanOrder )
		pFnGetCurrentHenchmanOrder = (UFunction*) UObject::GObjObjects()->Data[ 61602 ];

	USFXSFHandler_PowerWheel_eventGetCurrentHenchmanOrder_Parms GetCurrentHenchmanOrder_Parms;
	GetCurrentHenchmanOrder_Parms.pPawn = pPawn;

	this->ProcessEvent ( pFnGetCurrentHenchmanOrder, &GetCurrentHenchmanOrder_Parms, NULL );

	return GetCurrentHenchmanOrder_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PowerWheel.LeavePowerIcon
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// int                            nIconIndex                     ( CPF_Parm )
// unsigned long                  bSkipTransition                ( CPF_Parm )

void USFXSFHandler_PowerWheel::eventLeavePowerIcon ( int nIconIndex, unsigned long bSkipTransition )
{
	static UFunction* pFnLeavePowerIcon = NULL;

	if ( ! pFnLeavePowerIcon )
		pFnLeavePowerIcon = (UFunction*) UObject::GObjObjects()->Data[ 61598 ];

	USFXSFHandler_PowerWheel_eventLeavePowerIcon_Parms LeavePowerIcon_Parms;
	LeavePowerIcon_Parms.nIconIndex = nIconIndex;
	LeavePowerIcon_Parms.bSkipTransition = bSkipTransition;

	this->ProcessEvent ( pFnLeavePowerIcon, &LeavePowerIcon_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetInformationText
// [0x00020002] 
// Parameters infos:
// struct FString                 sName                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sDesc                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_PowerWheel::SetInformationText ( struct FString sName, struct FString sDesc )
{
	static UFunction* pFnSetInformationText = NULL;

	if ( ! pFnSetInformationText )
		pFnSetInformationText = (UFunction*) UObject::GObjObjects()->Data[ 61595 ];

	USFXSFHandler_PowerWheel_execSetInformationText_Parms SetInformationText_Parms;
	memcpy ( &SetInformationText_Parms.sName, &sName, 0xC );
	memcpy ( &SetInformationText_Parms.sDesc, &sDesc, 0xC );

	this->ProcessEvent ( pFnSetInformationText, &SetInformationText_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.UpdatePowerInformationText
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FSFXPowerWheelIconPower oIcon                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_PowerWheel::eventUpdatePowerInformationText ( struct FSFXPowerWheelIconPower oIcon )
{
	static UFunction* pFnUpdatePowerInformationText = NULL;

	if ( ! pFnUpdatePowerInformationText )
		pFnUpdatePowerInformationText = (UFunction*) UObject::GObjObjects()->Data[ 61590 ];

	USFXSFHandler_PowerWheel_eventUpdatePowerInformationText_Parms UpdatePowerInformationText_Parms;
	memcpy ( &UpdatePowerInformationText_Parms.oIcon, &oIcon, 0x80 );

	this->ProcessEvent ( pFnUpdatePowerInformationText, &UpdatePowerInformationText_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.UpdateTextDisplayForIcon
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// int                            nIconIndex                     ( CPF_Parm )

void USFXSFHandler_PowerWheel::eventUpdateTextDisplayForIcon ( int nIconIndex )
{
	static UFunction* pFnUpdateTextDisplayForIcon = NULL;

	if ( ! pFnUpdateTextDisplayForIcon )
		pFnUpdateTextDisplayForIcon = (UFunction*) UObject::GObjObjects()->Data[ 61580 ];

	USFXSFHandler_PowerWheel_eventUpdateTextDisplayForIcon_Parms UpdateTextDisplayForIcon_Parms;
	UpdateTextDisplayForIcon_Parms.nIconIndex = nIconIndex;

	this->ProcessEvent ( pFnUpdateTextDisplayForIcon, &UpdateTextDisplayForIcon_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.HoverPowerIcon
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// int                            nIconIndex                     ( CPF_Parm )
// unsigned long                  bSkipTransition                ( CPF_Parm )

void USFXSFHandler_PowerWheel::eventHoverPowerIcon ( int nIconIndex, unsigned long bSkipTransition )
{
	static UFunction* pFnHoverPowerIcon = NULL;

	if ( ! pFnHoverPowerIcon )
		pFnHoverPowerIcon = (UFunction*) UObject::GObjObjects()->Data[ 61575 ];

	USFXSFHandler_PowerWheel_eventHoverPowerIcon_Parms HoverPowerIcon_Parms;
	HoverPowerIcon_Parms.nIconIndex = nIconIndex;
	HoverPowerIcon_Parms.bSkipTransition = bSkipTransition;

	this->ProcessEvent ( pFnHoverPowerIcon, &HoverPowerIcon_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.EvaluatePowerForTarget
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FSFXPowerWheelIconPower oIcon                          ( CPF_Parm | CPF_NeedCtorLink )
// class AActor*                  pTarget                        ( CPF_Parm )
// struct FString                 sText                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXSFHandler_PowerWheel::EvaluatePowerForTarget ( struct FSFXPowerWheelIconPower oIcon, class AActor* pTarget, struct FString* sText )
{
	static UFunction* pFnEvaluatePowerForTarget = NULL;

	if ( ! pFnEvaluatePowerForTarget )
		pFnEvaluatePowerForTarget = (UFunction*) UObject::GObjObjects()->Data[ 61570 ];

	USFXSFHandler_PowerWheel_execEvaluatePowerForTarget_Parms EvaluatePowerForTarget_Parms;
	memcpy ( &EvaluatePowerForTarget_Parms.oIcon, &oIcon, 0x80 );
	EvaluatePowerForTarget_Parms.pTarget = pTarget;

	pFnEvaluatePowerForTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEvaluatePowerForTarget, &EvaluatePowerForTarget_Parms, NULL );

	pFnEvaluatePowerForTarget->FunctionFlags |= 0x400;

	if ( sText )
		memcpy ( sText, &EvaluatePowerForTarget_Parms.sText, 0xC );

	return EvaluatePowerForTarget_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetPowerIconSelected
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIconIndex                     ( CPF_Parm )
// unsigned long                  bSelected                      ( CPF_Parm )

void USFXSFHandler_PowerWheel::SetPowerIconSelected ( int nIconIndex, unsigned long bSelected )
{
	static UFunction* pFnSetPowerIconSelected = NULL;

	if ( ! pFnSetPowerIconSelected )
		pFnSetPowerIconSelected = (UFunction*) UObject::GObjObjects()->Data[ 61567 ];

	USFXSFHandler_PowerWheel_execSetPowerIconSelected_Parms SetPowerIconSelected_Parms;
	SetPowerIconSelected_Parms.nIconIndex = nIconIndex;
	SetPowerIconSelected_Parms.bSelected = bSelected;

	pFnSetPowerIconSelected->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPowerIconSelected, &SetPowerIconSelected_Parms, NULL );

	pFnSetPowerIconSelected->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetPowerIconState
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIconIndex                     ( CPF_Parm )
// unsigned char                  eNewState                      ( CPF_Parm )

void USFXSFHandler_PowerWheel::SetPowerIconState ( int nIconIndex, unsigned char eNewState )
{
	static UFunction* pFnSetPowerIconState = NULL;

	if ( ! pFnSetPowerIconState )
		pFnSetPowerIconState = (UFunction*) UObject::GObjObjects()->Data[ 61564 ];

	USFXSFHandler_PowerWheel_execSetPowerIconState_Parms SetPowerIconState_Parms;
	SetPowerIconState_Parms.nIconIndex = nIconIndex;
	SetPowerIconState_Parms.eNewState = eNewState;

	pFnSetPowerIconState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPowerIconState, &SetPowerIconState_Parms, NULL );

	pFnSetPowerIconState->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetMapText
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 sText1                         ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  eIcon1                         ( CPF_Parm )
// struct FString                 sText2                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  eIcon2                         ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_PowerWheel::eventSetMapText ( struct FString sText1, unsigned char eIcon1, struct FString sText2, unsigned char eIcon2 )
{
	static UFunction* pFnSetMapText = NULL;

	if ( ! pFnSetMapText )
		pFnSetMapText = (UFunction*) UObject::GObjObjects()->Data[ 61559 ];

	USFXSFHandler_PowerWheel_eventSetMapText_Parms SetMapText_Parms;
	memcpy ( &SetMapText_Parms.sText1, &sText1, 0xC );
	SetMapText_Parms.eIcon1 = eIcon1;
	memcpy ( &SetMapText_Parms.sText2, &sText2, 0xC );
	SetMapText_Parms.eIcon2 = eIcon2;

	this->ProcessEvent ( pFnSetMapText, &SetMapText_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetUseText
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 sText                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_PowerWheel::eventSetUseText ( struct FString sText )
{
	static UFunction* pFnSetUseText = NULL;

	if ( ! pFnSetUseText )
		pFnSetUseText = (UFunction*) UObject::GObjObjects()->Data[ 61557 ];

	USFXSFHandler_PowerWheel_eventSetUseText_Parms SetUseText_Parms;
	memcpy ( &SetUseText_Parms.sText, &sText, 0xC );

	this->ProcessEvent ( pFnSetUseText, &SetUseText_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetStatusAndPowerText
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                pPawn                          ( CPF_Parm )
// unsigned char                  ePawnID                        ( CPF_Parm )

void USFXSFHandler_PowerWheel::SetStatusAndPowerText ( class ABioPawn* pPawn, unsigned char ePawnID )
{
	static UFunction* pFnSetStatusAndPowerText = NULL;

	if ( ! pFnSetStatusAndPowerText )
		pFnSetStatusAndPowerText = (UFunction*) UObject::GObjObjects()->Data[ 61549 ];

	USFXSFHandler_PowerWheel_execSetStatusAndPowerText_Parms SetStatusAndPowerText_Parms;
	SetStatusAndPowerText_Parms.pPawn = pPawn;
	SetStatusAndPowerText_Parms.ePawnID = ePawnID;

	this->ProcessEvent ( pFnSetStatusAndPowerText, &SetStatusAndPowerText_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.WheelVisibilityChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void USFXSFHandler_PowerWheel::eventWheelVisibilityChanged ( unsigned long bVisible )
{
	static UFunction* pFnWheelVisibilityChanged = NULL;

	if ( ! pFnWheelVisibilityChanged )
		pFnWheelVisibilityChanged = (UFunction*) UObject::GObjObjects()->Data[ 61544 ];

	USFXSFHandler_PowerWheel_eventWheelVisibilityChanged_Parms WheelVisibilityChanged_Parms;
	WheelVisibilityChanged_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnWheelVisibilityChanged, &WheelVisibilityChanged_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.HideWeaponIcon
// [0x00022002] 
// Parameters infos:
// class UBioSFPanel*             pPanel                         ( CPF_Parm )
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_PowerWheel::HideWeaponIcon ( class UBioSFPanel* pPanel, struct FString sPath )
{
	static UFunction* pFnHideWeaponIcon = NULL;

	if ( ! pFnHideWeaponIcon )
		pFnHideWeaponIcon = (UFunction*) UObject::GObjObjects()->Data[ 61541 ];

	USFXSFHandler_PowerWheel_execHideWeaponIcon_Parms HideWeaponIcon_Parms;
	HideWeaponIcon_Parms.pPanel = pPanel;
	memcpy ( &HideWeaponIcon_Parms.sPath, &sPath, 0xC );

	this->ProcessEvent ( pFnHideWeaponIcon, &HideWeaponIcon_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.HidePowerIconByIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIconIndex                     ( CPF_Parm )

void USFXSFHandler_PowerWheel::HidePowerIconByIndex ( int nIconIndex )
{
	static UFunction* pFnHidePowerIconByIndex = NULL;

	if ( ! pFnHidePowerIconByIndex )
		pFnHidePowerIconByIndex = (UFunction*) UObject::GObjObjects()->Data[ 61539 ];

	USFXSFHandler_PowerWheel_execHidePowerIconByIndex_Parms HidePowerIconByIndex_Parms;
	HidePowerIconByIndex_Parms.nIconIndex = nIconIndex;

	pFnHidePowerIconByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHidePowerIconByIndex, &HidePowerIconByIndex_Parms, NULL );

	pFnHidePowerIconByIndex->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PowerWheel.IsPawnBlocked
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                pPawn                          ( CPF_Parm )

bool USFXSFHandler_PowerWheel::IsPawnBlocked ( class ABioPawn* pPawn )
{
	static UFunction* pFnIsPawnBlocked = NULL;

	if ( ! pFnIsPawnBlocked )
		pFnIsPawnBlocked = (UFunction*) UObject::GObjObjects()->Data[ 61536 ];

	USFXSFHandler_PowerWheel_execIsPawnBlocked_Parms IsPawnBlocked_Parms;
	IsPawnBlocked_Parms.pPawn = pPawn;

	this->ProcessEvent ( pFnIsPawnBlocked, &IsPawnBlocked_Parms, NULL );

	return IsPawnBlocked_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PowerWheel.InitDisplay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_PowerWheel::eventInitDisplay ( )
{
	static UFunction* pFnInitDisplay = NULL;

	if ( ! pFnInitDisplay )
		pFnInitDisplay = (UFunction*) UObject::GObjObjects()->Data[ 61533 ];

	USFXSFHandler_PowerWheel_eventInitDisplay_Parms InitDisplay_Parms;

	this->ProcessEvent ( pFnInitDisplay, &InitDisplay_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.doHotKey
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void USFXSFHandler_PowerWheel::eventdoHotKey ( int nIndex )
{
	static UFunction* pFndoHotKey = NULL;

	if ( ! pFndoHotKey )
		pFndoHotKey = (UFunction*) UObject::GObjObjects()->Data[ 61531 ];

	USFXSFHandler_PowerWheel_eventdoHotKey_Parms doHotKey_Parms;
	doHotKey_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFndoHotKey, &doHotKey_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.CanIssueQueuedOrder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   pPawn                          ( CPF_Parm )

bool USFXSFHandler_PowerWheel::eventCanIssueQueuedOrder ( class APawn* pPawn )
{
	static UFunction* pFnCanIssueQueuedOrder = NULL;

	if ( ! pFnCanIssueQueuedOrder )
		pFnCanIssueQueuedOrder = (UFunction*) UObject::GObjObjects()->Data[ 61526 ];

	USFXSFHandler_PowerWheel_eventCanIssueQueuedOrder_Parms CanIssueQueuedOrder_Parms;
	CanIssueQueuedOrder_Parms.pPawn = pPawn;

	this->ProcessEvent ( pFnCanIssueQueuedOrder, &CanIssueQueuedOrder_Parms, NULL );

	return CanIssueQueuedOrder_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PowerWheel.CanIssueImmediateOrder
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   pPawn                          ( CPF_Parm )

bool USFXSFHandler_PowerWheel::eventCanIssueImmediateOrder ( class APawn* pPawn )
{
	static UFunction* pFnCanIssueImmediateOrder = NULL;

	if ( ! pFnCanIssueImmediateOrder )
		pFnCanIssueImmediateOrder = (UFunction*) UObject::GObjObjects()->Data[ 61521 ];

	USFXSFHandler_PowerWheel_eventCanIssueImmediateOrder_Parms CanIssueImmediateOrder_Parms;
	CanIssueImmediateOrder_Parms.pPawn = pPawn;

	this->ProcessEvent ( pFnCanIssueImmediateOrder, &CanIssueImmediateOrder_Parms, NULL );

	return CanIssueImmediateOrder_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PowerWheel.GetPawnFromName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPawn                         ( CPF_Parm )
// unsigned long                  bUseUniqueTag                  ( CPF_OptionalParm | CPF_Parm )

class ABioPawn* USFXSFHandler_PowerWheel::GetPawnFromName ( struct FName nmPawn, unsigned long bUseUniqueTag )
{
	static UFunction* pFnGetPawnFromName = NULL;

	if ( ! pFnGetPawnFromName )
		pFnGetPawnFromName = (UFunction*) UObject::GObjObjects()->Data[ 61517 ];

	USFXSFHandler_PowerWheel_execGetPawnFromName_Parms GetPawnFromName_Parms;
	memcpy ( &GetPawnFromName_Parms.nmPawn, &nmPawn, 0x8 );
	GetPawnFromName_Parms.bUseUniqueTag = bUseUniqueTag;

	pFnGetPawnFromName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPawnFromName, &GetPawnFromName_Parms, NULL );

	pFnGetPawnFromName->FunctionFlags |= 0x400;

	return GetPawnFromName_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PowerWheel.RemoveHenchman
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                pPawn                          ( CPF_Parm )

void USFXSFHandler_PowerWheel::RemoveHenchman ( class ABioPawn* pPawn )
{
	static UFunction* pFnRemoveHenchman = NULL;

	if ( ! pFnRemoveHenchman )
		pFnRemoveHenchman = (UFunction*) UObject::GObjObjects()->Data[ 61515 ];

	USFXSFHandler_PowerWheel_execRemoveHenchman_Parms RemoveHenchman_Parms;
	RemoveHenchman_Parms.pPawn = pPawn;

	pFnRemoveHenchman->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveHenchman, &RemoveHenchman_Parms, NULL );

	pFnRemoveHenchman->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PowerWheel.OnAllowCameraRotation
// [0x00020000] 
// Parameters infos:
// unsigned long                  i_bValue                       ( CPF_Parm )

void USFXSFHandler_PowerWheel::OnAllowCameraRotation ( unsigned long i_bValue )
{
	static UFunction* pFnOnAllowCameraRotation = NULL;

	if ( ! pFnOnAllowCameraRotation )
		pFnOnAllowCameraRotation = (UFunction*) UObject::GObjObjects()->Data[ 61513 ];

	USFXSFHandler_PowerWheel_execOnAllowCameraRotation_Parms OnAllowCameraRotation_Parms;
	OnAllowCameraRotation_Parms.i_bValue = i_bValue;

	this->ProcessEvent ( pFnOnAllowCameraRotation, &OnAllowCameraRotation_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.GameSessionEnded
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_PowerWheel::GameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 61512 ];

	USFXSFHandler_PowerWheel_execGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.OnPanelRemoved
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_PowerWheel::eventOnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 61511 ];

	USFXSFHandler_PowerWheel_eventOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.CleanupReferences
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_PowerWheel::CleanupReferences ( )
{
	static UFunction* pFnCleanupReferences = NULL;

	if ( ! pFnCleanupReferences )
		pFnCleanupReferences = (UFunction*) UObject::GObjObjects()->Data[ 61509 ];

	USFXSFHandler_PowerWheel_execCleanupReferences_Parms CleanupReferences_Parms;

	this->ProcessEvent ( pFnCleanupReferences, &CleanupReferences_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetupPlayerPowers
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_PowerWheel::SetupPlayerPowers ( )
{
	static UFunction* pFnSetupPlayerPowers = NULL;

	if ( ! pFnSetupPlayerPowers )
		pFnSetupPlayerPowers = (UFunction*) UObject::GObjObjects()->Data[ 61508 ];

	USFXSFHandler_PowerWheel_execSetupPlayerPowers_Parms SetupPlayerPowers_Parms;

	pFnSetupPlayerPowers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetupPlayerPowers, &SetupPlayerPowers_Parms, NULL );

	pFnSetupPlayerPowers->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PowerWheel.SetWheelVisible
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void USFXSFHandler_PowerWheel::SetWheelVisible ( unsigned long bVisible )
{
	static UFunction* pFnSetWheelVisible = NULL;

	if ( ! pFnSetWheelVisible )
		pFnSetWheelVisible = (UFunction*) UObject::GObjObjects()->Data[ 61506 ];

	USFXSFHandler_PowerWheel_execSetWheelVisible_Parms SetWheelVisible_Parms;
	SetWheelVisible_Parms.bVisible = bVisible;

	pFnSetWheelVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWheelVisible, &SetWheelVisible_Parms, NULL );

	pFnSetWheelVisible->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.ExInt_CollapsePlayerWeapons
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_PCPowerWheel::ExInt_CollapsePlayerWeapons ( )
{
	static UFunction* pFnExInt_CollapsePlayerWeapons = NULL;

	if ( ! pFnExInt_CollapsePlayerWeapons )
		pFnExInt_CollapsePlayerWeapons = (UFunction*) UObject::GObjObjects()->Data[ 61857 ];

	USFXSFHandler_PCPowerWheel_execExInt_CollapsePlayerWeapons_Parms ExInt_CollapsePlayerWeapons_Parms;

	this->ProcessEvent ( pFnExInt_CollapsePlayerWeapons, &ExInt_CollapsePlayerWeapons_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.SetQuickSlotIconSelected
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIconIndex                     ( CPF_Parm )
// unsigned long                  bSelected                      ( CPF_Parm )

void USFXSFHandler_PCPowerWheel::SetQuickSlotIconSelected ( int nIconIndex, unsigned long bSelected )
{
	static UFunction* pFnSetQuickSlotIconSelected = NULL;

	if ( ! pFnSetQuickSlotIconSelected )
		pFnSetQuickSlotIconSelected = (UFunction*) UObject::GObjObjects()->Data[ 61854 ];

	USFXSFHandler_PCPowerWheel_execSetQuickSlotIconSelected_Parms SetQuickSlotIconSelected_Parms;
	SetQuickSlotIconSelected_Parms.nIconIndex = nIconIndex;
	SetQuickSlotIconSelected_Parms.bSelected = bSelected;

	pFnSetQuickSlotIconSelected->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetQuickSlotIconSelected, &SetQuickSlotIconSelected_Parms, NULL );

	pFnSetQuickSlotIconSelected->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.doHotKey
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void USFXSFHandler_PCPowerWheel::doHotKey ( int nIndex )
{
	static UFunction* pFndoHotKey = NULL;

	if ( ! pFndoHotKey )
		pFndoHotKey = (UFunction*) UObject::GObjObjects()->Data[ 61852 ];

	USFXSFHandler_PCPowerWheel_execdoHotKey_Parms doHotKey_Parms;
	doHotKey_Parms.nIndex = nIndex;

	pFndoHotKey->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFndoHotKey, &doHotKey_Parms, NULL );

	pFndoHotKey->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.LeaveQuickSlot
// [0x00020002] 
// Parameters infos:
// int                            nSlotID                        ( CPF_Parm )

void USFXSFHandler_PCPowerWheel::LeaveQuickSlot ( int nSlotID )
{
	static UFunction* pFnLeaveQuickSlot = NULL;

	if ( ! pFnLeaveQuickSlot )
		pFnLeaveQuickSlot = (UFunction*) UObject::GObjObjects()->Data[ 61850 ];

	USFXSFHandler_PCPowerWheel_execLeaveQuickSlot_Parms LeaveQuickSlot_Parms;
	LeaveQuickSlot_Parms.nSlotID = nSlotID;

	this->ProcessEvent ( pFnLeaveQuickSlot, &LeaveQuickSlot_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.HoverQuickSlot
// [0x00020002] 
// Parameters infos:
// int                            nSlotID                        ( CPF_Parm )

void USFXSFHandler_PCPowerWheel::HoverQuickSlot ( int nSlotID )
{
	static UFunction* pFnHoverQuickSlot = NULL;

	if ( ! pFnHoverQuickSlot )
		pFnHoverQuickSlot = (UFunction*) UObject::GObjObjects()->Data[ 61848 ];

	USFXSFHandler_PCPowerWheel_execHoverQuickSlot_Parms HoverQuickSlot_Parms;
	HoverQuickSlot_Parms.nSlotID = nSlotID;

	this->ProcessEvent ( pFnHoverQuickSlot, &HoverQuickSlot_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.UpdateQuickSlotDisplay
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nIcon                          ( CPF_Parm )

void USFXSFHandler_PCPowerWheel::UpdateQuickSlotDisplay ( int nIcon )
{
	static UFunction* pFnUpdateQuickSlotDisplay = NULL;

	if ( ! pFnUpdateQuickSlotDisplay )
		pFnUpdateQuickSlotDisplay = (UFunction*) UObject::GObjObjects()->Data[ 61846 ];

	USFXSFHandler_PCPowerWheel_execUpdateQuickSlotDisplay_Parms UpdateQuickSlotDisplay_Parms;
	UpdateQuickSlotDisplay_Parms.nIcon = nIcon;

	pFnUpdateQuickSlotDisplay->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateQuickSlotDisplay, &UpdateQuickSlotDisplay_Parms, NULL );

	pFnUpdateQuickSlotDisplay->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.HandleQuickSlotMouseDown
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sIconID                        ( CPF_Parm | CPF_NeedCtorLink )

bool USFXSFHandler_PCPowerWheel::HandleQuickSlotMouseDown ( struct FString sIconID )
{
	static UFunction* pFnHandleQuickSlotMouseDown = NULL;

	if ( ! pFnHandleQuickSlotMouseDown )
		pFnHandleQuickSlotMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 61842 ];

	USFXSFHandler_PCPowerWheel_execHandleQuickSlotMouseDown_Parms HandleQuickSlotMouseDown_Parms;
	memcpy ( &HandleQuickSlotMouseDown_Parms.sIconID, &sIconID, 0xC );

	this->ProcessEvent ( pFnHandleQuickSlotMouseDown, &HandleQuickSlotMouseDown_Parms, NULL );

	return HandleQuickSlotMouseDown_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.ExInt_IconMouseDown
// [0x00020002] 
// Parameters infos:
// struct FString                 sIconID                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_PCPowerWheel::ExInt_IconMouseDown ( struct FString sIconID )
{
	static UFunction* pFnExInt_IconMouseDown = NULL;

	if ( ! pFnExInt_IconMouseDown )
		pFnExInt_IconMouseDown = (UFunction*) UObject::GObjObjects()->Data[ 61838 ];

	USFXSFHandler_PCPowerWheel_execExInt_IconMouseDown_Parms ExInt_IconMouseDown_Parms;
	memcpy ( &ExInt_IconMouseDown_Parms.sIconID, &sIconID, 0xC );

	this->ProcessEvent ( pFnExInt_IconMouseDown, &ExInt_IconMouseDown_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.HandleQuickSlotMouseUp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sIconID                        ( CPF_Parm | CPF_NeedCtorLink )

bool USFXSFHandler_PCPowerWheel::HandleQuickSlotMouseUp ( struct FString sIconID )
{
	static UFunction* pFnHandleQuickSlotMouseUp = NULL;

	if ( ! pFnHandleQuickSlotMouseUp )
		pFnHandleQuickSlotMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 61834 ];

	USFXSFHandler_PCPowerWheel_execHandleQuickSlotMouseUp_Parms HandleQuickSlotMouseUp_Parms;
	memcpy ( &HandleQuickSlotMouseUp_Parms.sIconID, &sIconID, 0xC );

	this->ProcessEvent ( pFnHandleQuickSlotMouseUp, &HandleQuickSlotMouseUp_Parms, NULL );

	return HandleQuickSlotMouseUp_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.ExInt_IconMouseUp
// [0x00020002] 
// Parameters infos:
// struct FString                 sIconID                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_PCPowerWheel::ExInt_IconMouseUp ( struct FString sIconID )
{
	static UFunction* pFnExInt_IconMouseUp = NULL;

	if ( ! pFnExInt_IconMouseUp )
		pFnExInt_IconMouseUp = (UFunction*) UObject::GObjObjects()->Data[ 61830 ];

	USFXSFHandler_PCPowerWheel_execExInt_IconMouseUp_Parms ExInt_IconMouseUp_Parms;
	memcpy ( &ExInt_IconMouseUp_Parms.sIconID, &sIconID, 0xC );

	this->ProcessEvent ( pFnExInt_IconMouseUp, &ExInt_IconMouseUp_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.HandleQuickSlotRollOut
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sIconID                        ( CPF_Parm | CPF_NeedCtorLink )

bool USFXSFHandler_PCPowerWheel::HandleQuickSlotRollOut ( struct FString sIconID )
{
	static UFunction* pFnHandleQuickSlotRollOut = NULL;

	if ( ! pFnHandleQuickSlotRollOut )
		pFnHandleQuickSlotRollOut = (UFunction*) UObject::GObjObjects()->Data[ 61826 ];

	USFXSFHandler_PCPowerWheel_execHandleQuickSlotRollOut_Parms HandleQuickSlotRollOut_Parms;
	memcpy ( &HandleQuickSlotRollOut_Parms.sIconID, &sIconID, 0xC );

	this->ProcessEvent ( pFnHandleQuickSlotRollOut, &HandleQuickSlotRollOut_Parms, NULL );

	return HandleQuickSlotRollOut_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.ExInt_IconRollOut
// [0x00020002] 
// Parameters infos:
// struct FString                 sIconID                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_PCPowerWheel::ExInt_IconRollOut ( struct FString sIconID )
{
	static UFunction* pFnExInt_IconRollOut = NULL;

	if ( ! pFnExInt_IconRollOut )
		pFnExInt_IconRollOut = (UFunction*) UObject::GObjObjects()->Data[ 61821 ];

	USFXSFHandler_PCPowerWheel_execExInt_IconRollOut_Parms ExInt_IconRollOut_Parms;
	memcpy ( &ExInt_IconRollOut_Parms.sIconID, &sIconID, 0xC );

	this->ProcessEvent ( pFnExInt_IconRollOut, &ExInt_IconRollOut_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.HandleQuickSlotRollOver
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sIconID                        ( CPF_Parm | CPF_NeedCtorLink )

bool USFXSFHandler_PCPowerWheel::HandleQuickSlotRollOver ( struct FString sIconID )
{
	static UFunction* pFnHandleQuickSlotRollOver = NULL;

	if ( ! pFnHandleQuickSlotRollOver )
		pFnHandleQuickSlotRollOver = (UFunction*) UObject::GObjObjects()->Data[ 61817 ];

	USFXSFHandler_PCPowerWheel_execHandleQuickSlotRollOver_Parms HandleQuickSlotRollOver_Parms;
	memcpy ( &HandleQuickSlotRollOver_Parms.sIconID, &sIconID, 0xC );

	this->ProcessEvent ( pFnHandleQuickSlotRollOver, &HandleQuickSlotRollOver_Parms, NULL );

	return HandleQuickSlotRollOver_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.ExInt_IconRollOver
// [0x00020002] 
// Parameters infos:
// struct FString                 sIconID                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_PCPowerWheel::ExInt_IconRollOver ( struct FString sIconID )
{
	static UFunction* pFnExInt_IconRollOver = NULL;

	if ( ! pFnExInt_IconRollOver )
		pFnExInt_IconRollOver = (UFunction*) UObject::GObjObjects()->Data[ 61811 ];

	USFXSFHandler_PCPowerWheel_execExInt_IconRollOver_Parms ExInt_IconRollOver_Parms;
	memcpy ( &ExInt_IconRollOver_Parms.sIconID, &sIconID, 0xC );

	this->ProcessEvent ( pFnExInt_IconRollOver, &ExInt_IconRollOver_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.FindIconIndexFromPath
// [0x00420002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sIconID                        ( CPF_Parm | CPF_NeedCtorLink )
// int                            nFoundIcon                     ( CPF_Parm | CPF_OutParm )

unsigned char USFXSFHandler_PCPowerWheel::FindIconIndexFromPath ( struct FString sIconID, int* nFoundIcon )
{
	static UFunction* pFnFindIconIndexFromPath = NULL;

	if ( ! pFnFindIconIndexFromPath )
		pFnFindIconIndexFromPath = (UFunction*) UObject::GObjObjects()->Data[ 61806 ];

	USFXSFHandler_PCPowerWheel_execFindIconIndexFromPath_Parms FindIconIndexFromPath_Parms;
	memcpy ( &FindIconIndexFromPath_Parms.sIconID, &sIconID, 0xC );

	this->ProcessEvent ( pFnFindIconIndexFromPath, &FindIconIndexFromPath_Parms, NULL );

	if ( nFoundIcon )
		*nFoundIcon = FindIconIndexFromPath_Parms.nFoundIcon;

	return FindIconIndexFromPath_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.SetupQuickSlotPowers
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_PCPowerWheel::SetupQuickSlotPowers ( )
{
	static UFunction* pFnSetupQuickSlotPowers = NULL;

	if ( ! pFnSetupQuickSlotPowers )
		pFnSetupQuickSlotPowers = (UFunction*) UObject::GObjObjects()->Data[ 61805 ];

	USFXSFHandler_PCPowerWheel_execSetupQuickSlotPowers_Parms SetupQuickSlotPowers_Parms;

	pFnSetupQuickSlotPowers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetupQuickSlotPowers, &SetupQuickSlotPowers_Parms, NULL );

	pFnSetupQuickSlotPowers->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.SetupQuickSlotKeys
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_PCPowerWheel::SetupQuickSlotKeys ( )
{
	static UFunction* pFnSetupQuickSlotKeys = NULL;

	if ( ! pFnSetupQuickSlotKeys )
		pFnSetupQuickSlotKeys = (UFunction*) UObject::GObjObjects()->Data[ 61804 ];

	USFXSFHandler_PCPowerWheel_execSetupQuickSlotKeys_Parms SetupQuickSlotKeys_Parms;

	pFnSetupQuickSlotKeys->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetupQuickSlotKeys, &SetupQuickSlotKeys_Parms, NULL );

	pFnSetupQuickSlotKeys->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.SetQuickSlotState
// [0x00020002] 
// Parameters infos:
// unsigned long                  bExpand                        ( CPF_Parm )
// unsigned long                  bSkipTransition                ( CPF_Parm )

void USFXSFHandler_PCPowerWheel::SetQuickSlotState ( unsigned long bExpand, unsigned long bSkipTransition )
{
	static UFunction* pFnSetQuickSlotState = NULL;

	if ( ! pFnSetQuickSlotState )
		pFnSetQuickSlotState = (UFunction*) UObject::GObjObjects()->Data[ 61800 ];

	USFXSFHandler_PCPowerWheel_execSetQuickSlotState_Parms SetQuickSlotState_Parms;
	SetQuickSlotState_Parms.bExpand = bExpand;
	SetQuickSlotState_Parms.bSkipTransition = bSkipTransition;

	this->ProcessEvent ( pFnSetQuickSlotState, &SetQuickSlotState_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.SwapHenchmanWeapon
// [0x00820002] 
// Parameters infos:
// class ABioPawn*                pHench                         ( CPF_Parm )

void USFXSFHandler_PCPowerWheel::SwapHenchmanWeapon ( class ABioPawn* pHench )
{
	static UFunction* pFnSwapHenchmanWeapon = NULL;

	if ( ! pFnSwapHenchmanWeapon )
		pFnSwapHenchmanWeapon = (UFunction*) UObject::GObjObjects()->Data[ 61793 ];

	USFXSFHandler_PCPowerWheel_execSwapHenchmanWeapon_Parms SwapHenchmanWeapon_Parms;
	SwapHenchmanWeapon_Parms.pHench = pHench;

	this->ProcessEvent ( pFnSwapHenchmanWeapon, &SwapHenchmanWeapon_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.ExpandPlayerWeapons
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_PCPowerWheel::ExpandPlayerWeapons ( )
{
	static UFunction* pFnExpandPlayerWeapons = NULL;

	if ( ! pFnExpandPlayerWeapons )
		pFnExpandPlayerWeapons = (UFunction*) UObject::GObjObjects()->Data[ 61792 ];

	USFXSFHandler_PCPowerWheel_execExpandPlayerWeapons_Parms ExpandPlayerWeapons_Parms;

	this->ProcessEvent ( pFnExpandPlayerWeapons, &ExpandPlayerWeapons_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.ClosePlayerWeapons
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_PCPowerWheel::ClosePlayerWeapons ( )
{
	static UFunction* pFnClosePlayerWeapons = NULL;

	if ( ! pFnClosePlayerWeapons )
		pFnClosePlayerWeapons = (UFunction*) UObject::GObjObjects()->Data[ 61791 ];

	USFXSFHandler_PCPowerWheel_execClosePlayerWeapons_Parms ClosePlayerWeapons_Parms;

	this->ProcessEvent ( pFnClosePlayerWeapons, &ClosePlayerWeapons_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.SelectWeapon
// [0x00020002] 
// Parameters infos:
// int                            nWeaponIndex                   ( CPF_Parm )

void USFXSFHandler_PCPowerWheel::SelectWeapon ( int nWeaponIndex )
{
	static UFunction* pFnSelectWeapon = NULL;

	if ( ! pFnSelectWeapon )
		pFnSelectWeapon = (UFunction*) UObject::GObjObjects()->Data[ 61789 ];

	USFXSFHandler_PCPowerWheel_execSelectWeapon_Parms SelectWeapon_Parms;
	SelectWeapon_Parms.nWeaponIndex = nWeaponIndex;

	this->ProcessEvent ( pFnSelectWeapon, &SelectWeapon_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.SetWeaponState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            nWeapIndex                     ( CPF_Parm )
// unsigned char                  eNewWeapState                  ( CPF_Parm )

void USFXSFHandler_PCPowerWheel::eventSetWeaponState ( int nWeapIndex, unsigned char eNewWeapState )
{
	static UFunction* pFnSetWeaponState = NULL;

	if ( ! pFnSetWeaponState )
		pFnSetWeaponState = (UFunction*) UObject::GObjObjects()->Data[ 61786 ];

	USFXSFHandler_PCPowerWheel_eventSetWeaponState_Parms SetWeaponState_Parms;
	SetWeaponState_Parms.nWeapIndex = nWeapIndex;
	SetWeaponState_Parms.eNewWeapState = eNewWeapState;

	this->ProcessEvent ( pFnSetWeaponState, &SetWeaponState_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.SortWeapons
// [0x00420002] 
// Parameters infos:
// class ABioPawn*                pPawn                          ( CPF_Parm )
// TArray< class ASFXWeapon* >    aWeapons                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSFHandler_PCPowerWheel::SortWeapons ( class ABioPawn* pPawn, TArray< class ASFXWeapon* >* aWeapons )
{
	static UFunction* pFnSortWeapons = NULL;

	if ( ! pFnSortWeapons )
		pFnSortWeapons = (UFunction*) UObject::GObjObjects()->Data[ 61780 ];

	USFXSFHandler_PCPowerWheel_execSortWeapons_Parms SortWeapons_Parms;
	SortWeapons_Parms.pPawn = pPawn;

	this->ProcessEvent ( pFnSortWeapons, &SortWeapons_Parms, NULL );

	if ( aWeapons )
		memcpy ( aWeapons, &SortWeapons_Parms.aWeapons, 0xC );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.SetMapText
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 sText1                         ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  eIcon1                         ( CPF_Parm )
// struct FString                 sText2                         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  eIcon2                         ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_PCPowerWheel::eventSetMapText ( struct FString sText1, unsigned char eIcon1, struct FString sText2, unsigned char eIcon2 )
{
	static UFunction* pFnSetMapText = NULL;

	if ( ! pFnSetMapText )
		pFnSetMapText = (UFunction*) UObject::GObjObjects()->Data[ 61775 ];

	USFXSFHandler_PCPowerWheel_eventSetMapText_Parms SetMapText_Parms;
	memcpy ( &SetMapText_Parms.sText1, &sText1, 0xC );
	SetMapText_Parms.eIcon1 = eIcon1;
	memcpy ( &SetMapText_Parms.sText2, &sText2, 0xC );
	SetMapText_Parms.eIcon2 = eIcon2;

	this->ProcessEvent ( pFnSetMapText, &SetMapText_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.SetUseText
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// struct FString                 sText                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_PCPowerWheel::eventSetUseText ( struct FString sText )
{
	static UFunction* pFnSetUseText = NULL;

	if ( ! pFnSetUseText )
		pFnSetUseText = (UFunction*) UObject::GObjObjects()->Data[ 61773 ];

	USFXSFHandler_PCPowerWheel_eventSetUseText_Parms SetUseText_Parms;
	memcpy ( &SetUseText_Parms.sText, &sText, 0xC );

	this->ProcessEvent ( pFnSetUseText, &SetUseText_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.WheelVisibilityChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bVisible                       ( CPF_Parm )

void USFXSFHandler_PCPowerWheel::eventWheelVisibilityChanged ( unsigned long bVisible )
{
	static UFunction* pFnWheelVisibilityChanged = NULL;

	if ( ! pFnWheelVisibilityChanged )
		pFnWheelVisibilityChanged = (UFunction*) UObject::GObjObjects()->Data[ 61770 ];

	USFXSFHandler_PCPowerWheel_eventWheelVisibilityChanged_Parms WheelVisibilityChanged_Parms;
	WheelVisibilityChanged_Parms.bVisible = bVisible;

	this->ProcessEvent ( pFnWheelVisibilityChanged, &WheelVisibilityChanged_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.InitDisplay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_PCPowerWheel::eventInitDisplay ( )
{
	static UFunction* pFnInitDisplay = NULL;

	if ( ! pFnInitDisplay )
		pFnInitDisplay = (UFunction*) UObject::GObjObjects()->Data[ 61769 ];

	USFXSFHandler_PCPowerWheel_eventInitDisplay_Parms InitDisplay_Parms;

	this->ProcessEvent ( pFnInitDisplay, &InitDisplay_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.OnAllowCameraRotation
// [0x00020002] 
// Parameters infos:
// unsigned long                  i_bValue                       ( CPF_Parm )

void USFXSFHandler_PCPowerWheel::OnAllowCameraRotation ( unsigned long i_bValue )
{
	static UFunction* pFnOnAllowCameraRotation = NULL;

	if ( ! pFnOnAllowCameraRotation )
		pFnOnAllowCameraRotation = (UFunction*) UObject::GObjObjects()->Data[ 61767 ];

	USFXSFHandler_PCPowerWheel_execOnAllowCameraRotation_Parms OnAllowCameraRotation_Parms;
	OnAllowCameraRotation_Parms.i_bValue = i_bValue;

	this->ProcessEvent ( pFnOnAllowCameraRotation, &OnAllowCameraRotation_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.CleanupReferences
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_PCPowerWheel::CleanupReferences ( )
{
	static UFunction* pFnCleanupReferences = NULL;

	if ( ! pFnCleanupReferences )
		pFnCleanupReferences = (UFunction*) UObject::GObjObjects()->Data[ 61765 ];

	USFXSFHandler_PCPowerWheel_execCleanupReferences_Parms CleanupReferences_Parms;

	this->ProcessEvent ( pFnCleanupReferences, &CleanupReferences_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.RemoveHenchman
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class ABioPawn*                pPawn                          ( CPF_Parm )

void USFXSFHandler_PCPowerWheel::RemoveHenchman ( class ABioPawn* pPawn )
{
	static UFunction* pFnRemoveHenchman = NULL;

	if ( ! pFnRemoveHenchman )
		pFnRemoveHenchman = (UFunction*) UObject::GObjObjects()->Data[ 61763 ];

	USFXSFHandler_PCPowerWheel_execRemoveHenchman_Parms RemoveHenchman_Parms;
	RemoveHenchman_Parms.pPawn = pPawn;

	pFnRemoveHenchman->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveHenchman, &RemoveHenchman_Parms, NULL );

	pFnRemoveHenchman->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_PCPowerWheel.NewSetQuickSlotPower
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// int                            nSlot                          ( CPF_Parm )
// int                            nDraggingIconID                ( CPF_Parm )
// unsigned long                  bDraggingPower                 ( CPF_Parm )
// unsigned long                  bSilently                      ( CPF_Parm )

void USFXSFHandler_PCPowerWheel::NewSetQuickSlotPower ( int nSlot, int nDraggingIconID, unsigned long bDraggingPower, unsigned long bSilently )
{
	static UFunction* pFnNewSetQuickSlotPower = NULL;

	if ( ! pFnNewSetQuickSlotPower )
		pFnNewSetQuickSlotPower = (UFunction*) UObject::GObjObjects()->Data[ 61758 ];

	USFXSFHandler_PCPowerWheel_execNewSetQuickSlotPower_Parms NewSetQuickSlotPower_Parms;
	NewSetQuickSlotPower_Parms.nSlot = nSlot;
	NewSetQuickSlotPower_Parms.nDraggingIconID = nDraggingIconID;
	NewSetQuickSlotPower_Parms.bDraggingPower = bDraggingPower;
	NewSetQuickSlotPower_Parms.bSilently = bSilently;

	pFnNewSetQuickSlotPower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNewSetQuickSlotPower, &NewSetQuickSlotPower_Parms, NULL );

	pFnNewSetQuickSlotPower->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_Personalization.onExIntDetailItemChange
// [0x00820002] 
// Parameters infos:
// int                            nOptIndex                      ( CPF_Parm )
// int                            nOptionIndex                   ( CPF_Parm )

void USFXSFHandler_Personalization::onExIntDetailItemChange ( int nOptIndex, int nOptionIndex )
{
	static UFunction* pFnonExIntDetailItemChange = NULL;

	if ( ! pFnonExIntDetailItemChange )
		pFnonExIntDetailItemChange = (UFunction*) UObject::GObjObjects()->Data[ 61323 ];

	USFXSFHandler_Personalization_execonExIntDetailItemChange_Parms onExIntDetailItemChange_Parms;
	onExIntDetailItemChange_Parms.nOptIndex = nOptIndex;
	onExIntDetailItemChange_Parms.nOptionIndex = nOptionIndex;

	this->ProcessEvent ( pFnonExIntDetailItemChange, &onExIntDetailItemChange_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Personalization.GetIdxByAppearanceID
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Id                             ( CPF_Parm )
// TArray< struct FCustomizableElement > AppearanceData                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int USFXSFHandler_Personalization::GetIdxByAppearanceID ( int Id, TArray< struct FCustomizableElement >* AppearanceData )
{
	static UFunction* pFnGetIdxByAppearanceID = NULL;

	if ( ! pFnGetIdxByAppearanceID )
		pFnGetIdxByAppearanceID = (UFunction*) UObject::GObjObjects()->Data[ 61294 ];

	USFXSFHandler_Personalization_execGetIdxByAppearanceID_Parms GetIdxByAppearanceID_Parms;
	GetIdxByAppearanceID_Parms.Id = Id;

	this->ProcessEvent ( pFnGetIdxByAppearanceID, &GetIdxByAppearanceID_Parms, NULL );

	if ( AppearanceData )
		memcpy ( AppearanceData, &GetIdxByAppearanceID_Parms.AppearanceData, 0xC );

	return GetIdxByAppearanceID_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_Personalization.GetAppearanceIDByIdx
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Index                          ( CPF_Parm )
// TArray< struct FCustomizableElement > AppearanceData                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

int USFXSFHandler_Personalization::GetAppearanceIDByIdx ( int Index, TArray< struct FCustomizableElement >* AppearanceData )
{
	static UFunction* pFnGetAppearanceIDByIdx = NULL;

	if ( ! pFnGetAppearanceIDByIdx )
		pFnGetAppearanceIDByIdx = (UFunction*) UObject::GObjObjects()->Data[ 61310 ];

	USFXSFHandler_Personalization_execGetAppearanceIDByIdx_Parms GetAppearanceIDByIdx_Parms;
	GetAppearanceIDByIdx_Parms.Index = Index;

	this->ProcessEvent ( pFnGetAppearanceIDByIdx, &GetAppearanceIDByIdx_Parms, NULL );

	if ( AppearanceData )
		memcpy ( AppearanceData, &GetAppearanceIDByIdx_Parms.AppearanceData, 0xC );

	return GetAppearanceIDByIdx_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_Personalization.onExIntSelectCategory
// [0x00820002] 
// Parameters infos:
// int                            nCategory                      ( CPF_Parm )

void USFXSFHandler_Personalization::onExIntSelectCategory ( int nCategory )
{
	static UFunction* pFnonExIntSelectCategory = NULL;

	if ( ! pFnonExIntSelectCategory )
		pFnonExIntSelectCategory = (UFunction*) UObject::GObjObjects()->Data[ 61302 ];

	USFXSFHandler_Personalization_execonExIntSelectCategory_Parms onExIntSelectCategory_Parms;
	onExIntSelectCategory_Parms.nCategory = nCategory;

	this->ProcessEvent ( pFnonExIntSelectCategory, &onExIntSelectCategory_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Personalization.onExIntExit
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Personalization::onExIntExit ( )
{
	static UFunction* pFnonExIntExit = NULL;

	if ( ! pFnonExIntExit )
		pFnonExIntExit = (UFunction*) UObject::GObjObjects()->Data[ 61301 ];

	USFXSFHandler_Personalization_execonExIntExit_Parms onExIntExit_Parms;

	this->ProcessEvent ( pFnonExIntExit, &onExIntExit_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Personalization.onExIntDoInitialize
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Personalization::onExIntDoInitialize ( )
{
	static UFunction* pFnonExIntDoInitialize = NULL;

	if ( ! pFnonExIntDoInitialize )
		pFnonExIntDoInitialize = (UFunction*) UObject::GObjObjects()->Data[ 61300 ];

	USFXSFHandler_Personalization_execonExIntDoInitialize_Parms onExIntDoInitialize_Parms;

	this->ProcessEvent ( pFnonExIntDoInitialize, &onExIntDoInitialize_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Personalization.CancelChanges
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Personalization::CancelChanges ( )
{
	static UFunction* pFnCancelChanges = NULL;

	if ( ! pFnCancelChanges )
		pFnCancelChanges = (UFunction*) UObject::GObjObjects()->Data[ 61298 ];

	USFXSFHandler_Personalization_execCancelChanges_Parms CancelChanges_Parms;

	this->ProcessEvent ( pFnCancelChanges, &CancelChanges_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Personalization.ApplyChanges
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Personalization::ApplyChanges ( )
{
	static UFunction* pFnApplyChanges = NULL;

	if ( ! pFnApplyChanges )
		pFnApplyChanges = (UFunction*) UObject::GObjObjects()->Data[ 61295 ];

	USFXSFHandler_Personalization_execApplyChanges_Parms ApplyChanges_Parms;

	this->ProcessEvent ( pFnApplyChanges, &ApplyChanges_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Personalization.AddDetailEntry
// [0x00420002] 
// Parameters infos:
// int                            nEntryIndex                    ( CPF_Parm )
// int                            nTitleText                     ( CPF_Parm )
// int                            nIndex                         ( CPF_Parm )
// TArray< struct FCustomizableElement > Elements                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSFHandler_Personalization::AddDetailEntry ( int nEntryIndex, int nTitleText, int nIndex, TArray< struct FCustomizableElement >* Elements )
{
	static UFunction* pFnAddDetailEntry = NULL;

	if ( ! pFnAddDetailEntry )
		pFnAddDetailEntry = (UFunction*) UObject::GObjObjects()->Data[ 61283 ];

	USFXSFHandler_Personalization_execAddDetailEntry_Parms AddDetailEntry_Parms;
	AddDetailEntry_Parms.nEntryIndex = nEntryIndex;
	AddDetailEntry_Parms.nTitleText = nTitleText;
	AddDetailEntry_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnAddDetailEntry, &AddDetailEntry_Parms, NULL );

	if ( Elements )
		memcpy ( Elements, &AddDetailEntry_Parms.Elements, 0xC );
};

// Function SFXGame.SFXSFHandler_Personalization.IsAvailable
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCustomizableElement    Element                        ( CPF_Parm | CPF_NeedCtorLink )

bool USFXSFHandler_Personalization::IsAvailable ( struct FCustomizableElement Element )
{
	static UFunction* pFnIsAvailable = NULL;

	if ( ! pFnIsAvailable )
		pFnIsAvailable = (UFunction*) UObject::GObjObjects()->Data[ 61280 ];

	USFXSFHandler_Personalization_execIsAvailable_Parms IsAvailable_Parms;
	memcpy ( &IsAvailable_Parms.Element, &Element, 0x188 );

	this->ProcessEvent ( pFnIsAvailable, &IsAvailable_Parms, NULL );

	return IsAvailable_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_Personalization.GetCleanString
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nStringRef                     ( CPF_Parm )

struct FString USFXSFHandler_Personalization::GetCleanString ( int nStringRef )
{
	static UFunction* pFnGetCleanString = NULL;

	if ( ! pFnGetCleanString )
		pFnGetCleanString = (UFunction*) UObject::GObjObjects()->Data[ 61277 ];

	USFXSFHandler_Personalization_execGetCleanString_Parms GetCleanString_Parms;
	GetCleanString_Parms.nStringRef = nStringRef;

	this->ProcessEvent ( pFnGetCleanString, &GetCleanString_Parms, NULL );

	return GetCleanString_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_Personalization.GetUIWorldPlayerPawn
// [0x00020002] 
// Parameters infos:
// class ASFXPawn_Player*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXPawn_Player* USFXSFHandler_Personalization::GetUIWorldPlayerPawn ( )
{
	static UFunction* pFnGetUIWorldPlayerPawn = NULL;

	if ( ! pFnGetUIWorldPlayerPawn )
		pFnGetUIWorldPlayerPawn = (UFunction*) UObject::GObjObjects()->Data[ 61275 ];

	USFXSFHandler_Personalization_execGetUIWorldPlayerPawn_Parms GetUIWorldPlayerPawn_Parms;

	this->ProcessEvent ( pFnGetUIWorldPlayerPawn, &GetUIWorldPlayerPawn_Parms, NULL );

	return GetUIWorldPlayerPawn_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_Personalization.Update
// [0x00820802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void USFXSFHandler_Personalization::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 61272 ];

	USFXSFHandler_Personalization_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Personalization.HandleInputEvent
// [0x00820002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_Personalization::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 61266 ];

	USFXSFHandler_Personalization_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Personalization.InitializeUIWorld
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Personalization::InitializeUIWorld ( )
{
	static UFunction* pFnInitializeUIWorld = NULL;

	if ( ! pFnInitializeUIWorld )
		pFnInitializeUIWorld = (UFunction*) UObject::GObjObjects()->Data[ 61264 ];

	USFXSFHandler_Personalization_execInitializeUIWorld_Parms InitializeUIWorld_Parms;

	this->ProcessEvent ( pFnInitializeUIWorld, &InitializeUIWorld_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Personalization.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Personalization::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 61263 ];

	USFXSFHandler_Personalization_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Personalization.OnPanelAdded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_Personalization::eventOnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 61262 ];

	USFXSFHandler_Personalization_eventOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Personalization.ClearDelegates
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Personalization::ClearDelegates ( )
{
	static UFunction* pFnClearDelegates = NULL;

	if ( ! pFnClearDelegates )
		pFnClearDelegates = (UFunction*) UObject::GObjObjects()->Data[ 61261 ];

	USFXSFHandler_Personalization_execClearDelegates_Parms ClearDelegates_Parms;

	this->ProcessEvent ( pFnClearDelegates, &ClearDelegates_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Personalization.SetExternalCallback_OnComplete
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         pDelegate                      ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_Personalization::SetExternalCallback_OnComplete ( struct FScriptDelegate pDelegate )
{
	static UFunction* pFnSetExternalCallback_OnComplete = NULL;

	if ( ! pFnSetExternalCallback_OnComplete )
		pFnSetExternalCallback_OnComplete = (UFunction*) UObject::GObjObjects()->Data[ 61259 ];

	USFXSFHandler_Personalization_execSetExternalCallback_OnComplete_Parms SetExternalCallback_OnComplete_Parms;
	memcpy ( &SetExternalCallback_OnComplete_Parms.pDelegate, &pDelegate, 0xC );

	this->ProcessEvent ( pFnSetExternalCallback_OnComplete, &SetExternalCallback_OnComplete_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Personalization.ExternalCallback_OnComplete
// [0x00120000] 
// Parameters infos:

void USFXSFHandler_Personalization::ExternalCallback_OnComplete ( )
{
	static UFunction* pFnExternalCallback_OnComplete = NULL;

	if ( ! pFnExternalCallback_OnComplete )
		pFnExternalCallback_OnComplete = (UFunction*) UObject::GObjObjects()->Data[ 61229 ];

	USFXSFHandler_Personalization_execExternalCallback_OnComplete_Parms ExternalCallback_OnComplete_Parms;

	this->ProcessEvent ( pFnExternalCallback_OnComplete, &ExternalCallback_OnComplete_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PRCShop.ShowChoiceGUI
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXSFHandler_PRCShop::ShowChoiceGUI ( )
{
	static UFunction* pFnShowChoiceGUI = NULL;

	if ( ! pFnShowChoiceGUI )
		pFnShowChoiceGUI = (UFunction*) UObject::GObjObjects()->Data[ 61868 ];

	USFXSFHandler_PRCShop_execShowChoiceGUI_Parms ShowChoiceGUI_Parms;

	pFnShowChoiceGUI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowChoiceGUI, &ShowChoiceGUI_Parms, NULL );

	pFnShowChoiceGUI->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXSFHandler_Reticle.ExInt_ReticleVisible
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Reticle::ExInt_ReticleVisible ( )
{
	static UFunction* pFnExInt_ReticleVisible = NULL;

	if ( ! pFnExInt_ReticleVisible )
		pFnExInt_ReticleVisible = (UFunction*) UObject::GObjObjects()->Data[ 61929 ];

	USFXSFHandler_Reticle_execExInt_ReticleVisible_Parms ExInt_ReticleVisible_Parms;

	this->ProcessEvent ( pFnExInt_ReticleVisible, &ExInt_ReticleVisible_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Reticle.ExInt_OutTransitionComplete
// [0x00020002] 
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_Reticle::ExInt_OutTransitionComplete ( struct FString sPath )
{
	static UFunction* pFnExInt_OutTransitionComplete = NULL;

	if ( ! pFnExInt_OutTransitionComplete )
		pFnExInt_OutTransitionComplete = (UFunction*) UObject::GObjObjects()->Data[ 61926 ];

	USFXSFHandler_Reticle_execExInt_OutTransitionComplete_Parms ExInt_OutTransitionComplete_Parms;
	memcpy ( &ExInt_OutTransitionComplete_Parms.sPath, &sPath, 0xC );

	this->ProcessEvent ( pFnExInt_OutTransitionComplete, &ExInt_OutTransitionComplete_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Reticle.ExInt_InTransitionComplete
// [0x00020000] 
// Parameters infos:
// struct FString                 sPath                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXSFHandler_Reticle::ExInt_InTransitionComplete ( struct FString sPath )
{
	static UFunction* pFnExInt_InTransitionComplete = NULL;

	if ( ! pFnExInt_InTransitionComplete )
		pFnExInt_InTransitionComplete = (UFunction*) UObject::GObjObjects()->Data[ 61924 ];

	USFXSFHandler_Reticle_execExInt_InTransitionComplete_Parms ExInt_InTransitionComplete_Parms;
	memcpy ( &ExInt_InTransitionComplete_Parms.sPath, &sPath, 0xC );

	this->ProcessEvent ( pFnExInt_InTransitionComplete, &ExInt_InTransitionComplete_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Reticle.GetWeaponAmmo
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bClipOnly                      ( CPF_OptionalParm | CPF_Parm )

int USFXSFHandler_Reticle::eventGetWeaponAmmo ( unsigned long bClipOnly )
{
	static UFunction* pFnGetWeaponAmmo = NULL;

	if ( ! pFnGetWeaponAmmo )
		pFnGetWeaponAmmo = (UFunction*) UObject::GObjObjects()->Data[ 61920 ];

	USFXSFHandler_Reticle_eventGetWeaponAmmo_Parms GetWeaponAmmo_Parms;
	GetWeaponAmmo_Parms.bClipOnly = bClipOnly;

	this->ProcessEvent ( pFnGetWeaponAmmo, &GetWeaponAmmo_Parms, NULL );

	return GetWeaponAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_Reticle.GetWeaponAmmoString
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// unsigned long                  bClipOnly                      ( CPF_OptionalParm | CPF_Parm )

struct FString USFXSFHandler_Reticle::eventGetWeaponAmmoString ( unsigned long bClipOnly )
{
	static UFunction* pFnGetWeaponAmmoString = NULL;

	if ( ! pFnGetWeaponAmmoString )
		pFnGetWeaponAmmoString = (UFunction*) UObject::GObjObjects()->Data[ 61915 ];

	USFXSFHandler_Reticle_eventGetWeaponAmmoString_Parms GetWeaponAmmoString_Parms;
	GetWeaponAmmoString_Parms.bClipOnly = bClipOnly;

	this->ProcessEvent ( pFnGetWeaponAmmoString, &GetWeaponAmmoString_Parms, NULL );

	return GetWeaponAmmoString_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_Reticle.GetDesiredCrosshairFromWeapon
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USFXSFHandler_Reticle::eventGetDesiredCrosshairFromWeapon ( )
{
	static UFunction* pFnGetDesiredCrosshairFromWeapon = NULL;

	if ( ! pFnGetDesiredCrosshairFromWeapon )
		pFnGetDesiredCrosshairFromWeapon = (UFunction*) UObject::GObjObjects()->Data[ 61912 ];

	USFXSFHandler_Reticle_eventGetDesiredCrosshairFromWeapon_Parms GetDesiredCrosshairFromWeapon_Parms;

	this->ProcessEvent ( pFnGetDesiredCrosshairFromWeapon, &GetDesiredCrosshairFromWeapon_Parms, NULL );

	return GetDesiredCrosshairFromWeapon_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_Reticle.GetCrosshairRadius
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXSFHandler_Reticle::eventGetCrosshairRadius ( )
{
	static UFunction* pFnGetCrosshairRadius = NULL;

	if ( ! pFnGetCrosshairRadius )
		pFnGetCrosshairRadius = (UFunction*) UObject::GObjObjects()->Data[ 61909 ];

	USFXSFHandler_Reticle_eventGetCrosshairRadius_Parms GetCrosshairRadius_Parms;

	this->ProcessEvent ( pFnGetCrosshairRadius, &GetCrosshairRadius_Parms, NULL );

	return GetCrosshairRadius_Parms.ReturnValue;
};

// Function SFXGame.SFXSFHandler_Reticle.Reset
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Reticle::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 61908 ];

	USFXSFHandler_Reticle_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Reticle.GameSessionEnded
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Reticle::GameSessionEnded ( )
{
	static UFunction* pFnGameSessionEnded = NULL;

	if ( ! pFnGameSessionEnded )
		pFnGameSessionEnded = (UFunction*) UObject::GObjObjects()->Data[ 61907 ];

	USFXSFHandler_Reticle_execGameSessionEnded_Parms GameSessionEnded_Parms;

	this->ProcessEvent ( pFnGameSessionEnded, &GameSessionEnded_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Reticle.CleanupReferences
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_Reticle::CleanupReferences ( )
{
	static UFunction* pFnCleanupReferences = NULL;

	if ( ! pFnCleanupReferences )
		pFnCleanupReferences = (UFunction*) UObject::GObjObjects()->Data[ 61906 ];

	USFXSFHandler_Reticle_execCleanupReferences_Parms CleanupReferences_Parms;

	this->ProcessEvent ( pFnCleanupReferences, &CleanupReferences_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_Reticle.OnPanelRemoved
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_Reticle::eventOnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 61905 ];

	USFXSFHandler_Reticle_eventOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_SavingDisplay.OnPanelAdded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_SavingDisplay::eventOnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 61935 ];

	USFXSFHandler_SavingDisplay_eventOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_SavingDisplay.PC_ShowSaveMessage
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_SavingDisplay::eventPC_ShowSaveMessage ( )
{
	static UFunction* pFnPC_ShowSaveMessage = NULL;

	if ( ! pFnPC_ShowSaveMessage )
		pFnPC_ShowSaveMessage = (UFunction*) UObject::GObjObjects()->Data[ 61934 ];

	USFXSFHandler_SavingDisplay_eventPC_ShowSaveMessage_Parms PC_ShowSaveMessage_Parms;

	this->ProcessEvent ( pFnPC_ShowSaveMessage, &PC_ShowSaveMessage_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_SavingDisplay.HideSavingMessage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDoTransition                  ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_SavingDisplay::eventHideSavingMessage ( unsigned long bDoTransition )
{
	static UFunction* pFnHideSavingMessage = NULL;

	if ( ! pFnHideSavingMessage )
		pFnHideSavingMessage = (UFunction*) UObject::GObjObjects()->Data[ 61932 ];

	USFXSFHandler_SavingDisplay_eventHideSavingMessage_Parms HideSavingMessage_Parms;
	HideSavingMessage_Parms.bDoTransition = bDoTransition;

	this->ProcessEvent ( pFnHideSavingMessage, &HideSavingMessage_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_SavingDisplay.ShowSavingMessage
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bDoTransition                  ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_SavingDisplay::eventShowSavingMessage ( unsigned long bDoTransition )
{
	static UFunction* pFnShowSavingMessage = NULL;

	if ( ! pFnShowSavingMessage )
		pFnShowSavingMessage = (UFunction*) UObject::GObjObjects()->Data[ 61930 ];

	USFXSFHandler_SavingDisplay_eventShowSavingMessage_Parms ShowSavingMessage_Parms;
	ShowSavingMessage_Parms.bDoTransition = bDoTransition;

	this->ProcessEvent ( pFnShowSavingMessage, &ShowSavingMessage_Parms, NULL );
};

// Function SFXGame.BioLevelUpSystem.AutoLevelUpPowers
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )

void UBioLevelUpSystem::eventAutoLevelUpPowers ( class ABioPawn* Pawn )
{
	static UFunction* pFnAutoLevelUpPowers = NULL;

	if ( ! pFnAutoLevelUpPowers )
		pFnAutoLevelUpPowers = (UFunction*) UObject::GObjObjects()->Data[ 38424 ];

	UBioLevelUpSystem_eventAutoLevelUpPowers_Parms AutoLevelUpPowers_Parms;
	AutoLevelUpPowers_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnAutoLevelUpPowers, &AutoLevelUpPowers_Parms, NULL );
};

// Function SFXGame.BioLevelUpSystem.AttemptLevelUp
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPlayerSquad*         Squad                          ( CPF_Parm )

bool UBioLevelUpSystem::AttemptLevelUp ( class ABioPlayerSquad* Squad )
{
	static UFunction* pFnAttemptLevelUp = NULL;

	if ( ! pFnAttemptLevelUp )
		pFnAttemptLevelUp = (UFunction*) UObject::GObjObjects()->Data[ 38413 ];

	UBioLevelUpSystem_execAttemptLevelUp_Parms AttemptLevelUp_Parms;
	AttemptLevelUp_Parms.Squad = Squad;

	this->ProcessEvent ( pFnAttemptLevelUp, &AttemptLevelUp_Parms, NULL );

	return AttemptLevelUp_Parms.ReturnValue;
};

// Function SFXGame.BioLevelUpSystem.ExperienceNeededForLevel
// [0x00422400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Level                          ( CPF_Parm )
// int                            experience                     ( CPF_Parm | CPF_OutParm )

bool UBioLevelUpSystem::ExperienceNeededForLevel ( int Level, int* experience )
{
	static UFunction* pFnExperienceNeededForLevel = NULL;

	if ( ! pFnExperienceNeededForLevel )
		pFnExperienceNeededForLevel = (UFunction*) UObject::GObjObjects()->Data[ 38409 ];

	UBioLevelUpSystem_execExperienceNeededForLevel_Parms ExperienceNeededForLevel_Parms;
	ExperienceNeededForLevel_Parms.Level = Level;

	pFnExperienceNeededForLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExperienceNeededForLevel, &ExperienceNeededForLevel_Parms, NULL );

	pFnExperienceNeededForLevel->FunctionFlags |= 0x400;

	if ( experience )
		*experience = ExperienceNeededForLevel_Parms.experience;

	return ExperienceNeededForLevel_Parms.ReturnValue;
};

// Function SFXGame.BioLevelUpSystem.PointsForHenchLevelUp
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            oldLevel                       ( CPF_Parm )
// int                            newLevel                       ( CPF_Parm )

int UBioLevelUpSystem::PointsForHenchLevelUp ( int oldLevel, int newLevel )
{
	static UFunction* pFnPointsForHenchLevelUp = NULL;

	if ( ! pFnPointsForHenchLevelUp )
		pFnPointsForHenchLevelUp = (UFunction*) UObject::GObjObjects()->Data[ 38405 ];

	UBioLevelUpSystem_execPointsForHenchLevelUp_Parms PointsForHenchLevelUp_Parms;
	PointsForHenchLevelUp_Parms.oldLevel = oldLevel;
	PointsForHenchLevelUp_Parms.newLevel = newLevel;

	pFnPointsForHenchLevelUp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPointsForHenchLevelUp, &PointsForHenchLevelUp_Parms, NULL );

	pFnPointsForHenchLevelUp->FunctionFlags |= 0x400;

	return PointsForHenchLevelUp_Parms.ReturnValue;
};

// Function SFXGame.BioLevelUpSystem.LevelUpPawn
// [0x00022400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Pawn                           ( CPF_Parm )
// int                            newLevel                       ( CPF_Parm )

bool UBioLevelUpSystem::LevelUpPawn ( class ABioPawn* Pawn, int newLevel )
{
	static UFunction* pFnLevelUpPawn = NULL;

	if ( ! pFnLevelUpPawn )
		pFnLevelUpPawn = (UFunction*) UObject::GObjObjects()->Data[ 38401 ];

	UBioLevelUpSystem_execLevelUpPawn_Parms LevelUpPawn_Parms;
	LevelUpPawn_Parms.Pawn = Pawn;
	LevelUpPawn_Parms.newLevel = newLevel;

	pFnLevelUpPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLevelUpPawn, &LevelUpPawn_Parms, NULL );

	pFnLevelUpPawn->FunctionFlags |= 0x400;

	return LevelUpPawn_Parms.ReturnValue;
};

// Function SFXGame.BioActorBehaviorSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioActorBehaviorSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 29842 ];

	UBioActorBehaviorSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioActorBehaviorSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioActorBehaviorSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 29839 ];

	UBioActorBehaviorSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.BioArtPlaceableSaveObject.LoadPositionAndOrientation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  O                              ( CPF_Parm )

bool UBioArtPlaceableSaveObject::LoadPositionAndOrientation ( class AActor* O )
{
	static UFunction* pFnLoadPositionAndOrientation = NULL;

	if ( ! pFnLoadPositionAndOrientation )
		pFnLoadPositionAndOrientation = (UFunction*) UObject::GObjObjects()->Data[ 31794 ];

	UBioArtPlaceableSaveObject_execLoadPositionAndOrientation_Parms LoadPositionAndOrientation_Parms;
	LoadPositionAndOrientation_Parms.O = O;

	pFnLoadPositionAndOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadPositionAndOrientation, &LoadPositionAndOrientation_Parms, NULL );

	pFnLoadPositionAndOrientation->FunctionFlags |= 0x400;

	return LoadPositionAndOrientation_Parms.ReturnValue;
};

// Function SFXGame.BioArtPlaceableSaveObject.SavePositionAndOrientation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  O                              ( CPF_Parm )

bool UBioArtPlaceableSaveObject::SavePositionAndOrientation ( class AActor* O )
{
	static UFunction* pFnSavePositionAndOrientation = NULL;

	if ( ! pFnSavePositionAndOrientation )
		pFnSavePositionAndOrientation = (UFunction*) UObject::GObjObjects()->Data[ 31791 ];

	UBioArtPlaceableSaveObject_execSavePositionAndOrientation_Parms SavePositionAndOrientation_Parms;
	SavePositionAndOrientation_Parms.O = O;

	pFnSavePositionAndOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSavePositionAndOrientation, &SavePositionAndOrientation_Parms, NULL );

	pFnSavePositionAndOrientation->FunctionFlags |= 0x400;

	return SavePositionAndOrientation_Parms.ReturnValue;
};

// Function SFXGame.BioEpicPawnBehaviorSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioEpicPawnBehaviorSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 35653 ];

	UBioEpicPawnBehaviorSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioEpicPawnBehaviorSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioEpicPawnBehaviorSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 35650 ];

	UBioEpicPawnBehaviorSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.BioLevelSaveObject.SaveDestroyedObjects
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioLevelSaveObject::SaveDestroyedObjects ( class UObject* O )
{
	static UFunction* pFnSaveDestroyedObjects = NULL;

	if ( ! pFnSaveDestroyedObjects )
		pFnSaveDestroyedObjects = (UFunction*) UObject::GObjObjects()->Data[ 38394 ];

	UBioLevelSaveObject_execSaveDestroyedObjects_Parms SaveDestroyedObjects_Parms;
	SaveDestroyedObjects_Parms.O = O;

	pFnSaveDestroyedObjects->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveDestroyedObjects, &SaveDestroyedObjects_Parms, NULL );

	pFnSaveDestroyedObjects->FunctionFlags |= 0x400;
};

// Function SFXGame.BioLevelSaveObject.DestroyObject
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioLevelSaveObject::DestroyObject ( class UObject* O )
{
	static UFunction* pFnDestroyObject = NULL;

	if ( ! pFnDestroyObject )
		pFnDestroyObject = (UFunction*) UObject::GObjObjects()->Data[ 38392 ];

	UBioLevelSaveObject_execDestroyObject_Parms DestroyObject_Parms;
	DestroyObject_Parms.O = O;

	pFnDestroyObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroyObject, &DestroyObject_Parms, NULL );

	pFnDestroyObject->FunctionFlags |= 0x400;
};

// Function SFXGame.BioLevelSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioLevelSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 38388 ];

	UBioLevelSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioLevelSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioLevelSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 38386 ];

	UBioLevelSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.BioPawnBehaviorSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioPawnBehaviorSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 41016 ];

	UBioPawnBehaviorSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioPawnBehaviorSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioPawnBehaviorSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 41010 ];

	UBioPawnBehaviorSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.BioSaveGame.LoadPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Player                         ( CPF_Parm )

bool UBioSaveGame::LoadPlayer ( class ABioPawn* Player )
{
	static UFunction* pFnLoadPlayer = NULL;

	if ( ! pFnLoadPlayer )
		pFnLoadPlayer = (UFunction*) UObject::GObjObjects()->Data[ 43942 ];

	UBioSaveGame_execLoadPlayer_Parms LoadPlayer_Parms;
	LoadPlayer_Parms.Player = Player;

	this->ProcessEvent ( pFnLoadPlayer, &LoadPlayer_Parms, NULL );

	return LoadPlayer_Parms.ReturnValue;
};

// Function SFXGame.BioSaveGame.SavePlayerParty
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ABioPlayerController*    PlayerController               ( CPF_Parm )
// class UPackage*                savePackage                    ( CPF_OptionalParm | CPF_Parm )

void UBioSaveGame::eventSavePlayerParty ( class ABioPlayerController* PlayerController, class UPackage* savePackage )
{
	static UFunction* pFnSavePlayerParty = NULL;

	if ( ! pFnSavePlayerParty )
		pFnSavePlayerParty = (UFunction*) UObject::GObjObjects()->Data[ 43938 ];

	UBioSaveGame_eventSavePlayerParty_Parms SavePlayerParty_Parms;
	SavePlayerParty_Parms.PlayerController = PlayerController;
	SavePlayerParty_Parms.savePackage = savePackage;

	this->ProcessEvent ( pFnSavePlayerParty, &SavePlayerParty_Parms, NULL );
};

// Function SFXGame.BioSaveGame.LoadObjectPosition
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UBioBaseSaveObject*      Save                           ( CPF_Parm )
// class AActor*                  Obj                            ( CPF_Parm )

void UBioSaveGame::LoadObjectPosition ( class UBioBaseSaveObject* Save, class AActor* Obj )
{
	static UFunction* pFnLoadObjectPosition = NULL;

	if ( ! pFnLoadObjectPosition )
		pFnLoadObjectPosition = (UFunction*) UObject::GObjObjects()->Data[ 43933 ];

	UBioSaveGame_execLoadObjectPosition_Parms LoadObjectPosition_Parms;
	LoadObjectPosition_Parms.Save = Save;
	LoadObjectPosition_Parms.Obj = Obj;

	this->ProcessEvent ( pFnLoadObjectPosition, &LoadObjectPosition_Parms, NULL );
};

// Function SFXGame.BioSaveGame.GetPlayerSaveObject
// [0x00020002] 
// Parameters infos:
// class UBioPawnBehaviorSaveObject* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioPawnBehaviorSaveObject* UBioSaveGame::GetPlayerSaveObject ( )
{
	static UFunction* pFnGetPlayerSaveObject = NULL;

	if ( ! pFnGetPlayerSaveObject )
		pFnGetPlayerSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 43931 ];

	UBioSaveGame_execGetPlayerSaveObject_Parms GetPlayerSaveObject_Parms;

	this->ProcessEvent ( pFnGetPlayerSaveObject, &GetPlayerSaveObject_Parms, NULL );

	return GetPlayerSaveObject_Parms.ReturnValue;
};

// Function SFXGame.BioSaveGame.ResetToDefaults
// [0x00020002] 
// Parameters infos:

void UBioSaveGame::ResetToDefaults ( )
{
	static UFunction* pFnResetToDefaults = NULL;

	if ( ! pFnResetToDefaults )
		pFnResetToDefaults = (UFunction*) UObject::GObjObjects()->Data[ 43930 ];

	UBioSaveGame_execResetToDefaults_Parms ResetToDefaults_Parms;

	this->ProcessEvent ( pFnResetToDefaults, &ResetToDefaults_Parms, NULL );
};

// Function SFXGame.BioSaveGame.GetPlayerPackage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UPackage*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UPackage* UBioSaveGame::GetPlayerPackage ( )
{
	static UFunction* pFnGetPlayerPackage = NULL;

	if ( ! pFnGetPlayerPackage )
		pFnGetPlayerPackage = (UFunction*) UObject::GObjObjects()->Data[ 43928 ];

	UBioSaveGame_execGetPlayerPackage_Parms GetPlayerPackage_Parms;

	pFnGetPlayerPackage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayerPackage, &GetPlayerPackage_Parms, NULL );

	pFnGetPlayerPackage->FunctionFlags |= 0x400;

	return GetPlayerPackage_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioVehicleSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 50805 ];

	UBioVehicleSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioVehicleSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioVehicleSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 50803 ];

	UBioVehicleSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.BioVehicleSaveObject.LoadPositionAndOrientation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  O                              ( CPF_Parm )

bool UBioVehicleSaveObject::LoadPositionAndOrientation ( class AActor* O )
{
	static UFunction* pFnLoadPositionAndOrientation = NULL;

	if ( ! pFnLoadPositionAndOrientation )
		pFnLoadPositionAndOrientation = (UFunction*) UObject::GObjObjects()->Data[ 50800 ];

	UBioVehicleSaveObject_execLoadPositionAndOrientation_Parms LoadPositionAndOrientation_Parms;
	LoadPositionAndOrientation_Parms.O = O;

	pFnLoadPositionAndOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadPositionAndOrientation, &LoadPositionAndOrientation_Parms, NULL );

	pFnLoadPositionAndOrientation->FunctionFlags |= 0x400;

	return LoadPositionAndOrientation_Parms.ReturnValue;
};

// Function SFXGame.BioVehicleSaveObject.SavePositionAndOrientation
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  O                              ( CPF_Parm )

bool UBioVehicleSaveObject::SavePositionAndOrientation ( class AActor* O )
{
	static UFunction* pFnSavePositionAndOrientation = NULL;

	if ( ! pFnSavePositionAndOrientation )
		pFnSavePositionAndOrientation = (UFunction*) UObject::GObjObjects()->Data[ 50797 ];

	UBioVehicleSaveObject_execSavePositionAndOrientation_Parms SavePositionAndOrientation_Parms;
	SavePositionAndOrientation_Parms.O = O;

	pFnSavePositionAndOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSavePositionAndOrientation, &SavePositionAndOrientation_Parms, NULL );

	pFnSavePositionAndOrientation->FunctionFlags |= 0x400;

	return SavePositionAndOrientation_Parms.ReturnValue;
};

// Function SFXGame.BioWorldInfoSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioWorldInfoSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 51369 ];

	UBioWorldInfoSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioWorldInfoSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioWorldInfoSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 51367 ];

	UBioWorldInfoSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.BioWorldSaveObject.GetLevelSaveObject
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// class UBioLevelSaveObject*     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bRemove                        ( CPF_OptionalParm | CPF_Parm )
// struct FString                 LevelName                      ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class UBioLevelSaveObject* UBioWorldSaveObject::eventGetLevelSaveObject ( unsigned long bRemove, struct FString* LevelName )
{
	static UFunction* pFnGetLevelSaveObject = NULL;

	if ( ! pFnGetLevelSaveObject )
		pFnGetLevelSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 51413 ];

	UBioWorldSaveObject_eventGetLevelSaveObject_Parms GetLevelSaveObject_Parms;
	GetLevelSaveObject_Parms.bRemove = bRemove;

	this->ProcessEvent ( pFnGetLevelSaveObject, &GetLevelSaveObject_Parms, NULL );

	if ( LevelName )
		memcpy ( LevelName, &GetLevelSaveObject_Parms.LevelName, 0xC );

	return GetLevelSaveObject_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.GetRenegadeBarPercentFull
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXLegacyData::GetRenegadeBarPercentFull ( )
{
	static UFunction* pFnGetRenegadeBarPercentFull = NULL;

	if ( ! pFnGetRenegadeBarPercentFull )
		pFnGetRenegadeBarPercentFull = (UFunction*) UObject::GObjObjects()->Data[ 43888 ];

	USFXLegacyData_execGetRenegadeBarPercentFull_Parms GetRenegadeBarPercentFull_Parms;

	this->ProcessEvent ( pFnGetRenegadeBarPercentFull, &GetRenegadeBarPercentFull_Parms, NULL );

	return GetRenegadeBarPercentFull_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.GetParagonBarPercentFull
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXLegacyData::GetParagonBarPercentFull ( )
{
	static UFunction* pFnGetParagonBarPercentFull = NULL;

	if ( ! pFnGetParagonBarPercentFull )
		pFnGetParagonBarPercentFull = (UFunction*) UObject::GObjObjects()->Data[ 43886 ];

	USFXLegacyData_execGetParagonBarPercentFull_Parms GetParagonBarPercentFull_Parms;

	this->ProcessEvent ( pFnGetParagonBarPercentFull, &GetParagonBarPercentFull_Parms, NULL );

	return GetParagonBarPercentFull_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.ApplyME1PlotStates
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void USFXLegacyData::eventApplyME1PlotStates ( )
{
	static UFunction* pFnApplyME1PlotStates = NULL;

	if ( ! pFnApplyME1PlotStates )
		pFnApplyME1PlotStates = (UFunction*) UObject::GObjObjects()->Data[ 43882 ];

	USFXLegacyData_eventApplyME1PlotStates_Parms ApplyME1PlotStates_Parms;

	this->ProcessEvent ( pFnApplyME1PlotStates, &ApplyME1PlotStates_Parms, NULL );
};

// Function SFXGame.SFXLegacyData.GetImportedPlayerSpecialization
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXLegacyData::GetImportedPlayerSpecialization ( )
{
	static UFunction* pFnGetImportedPlayerSpecialization = NULL;

	if ( ! pFnGetImportedPlayerSpecialization )
		pFnGetImportedPlayerSpecialization = (UFunction*) UObject::GObjObjects()->Data[ 43880 ];

	USFXLegacyData_execGetImportedPlayerSpecialization_Parms GetImportedPlayerSpecialization_Parms;

	this->ProcessEvent ( pFnGetImportedPlayerSpecialization, &GetImportedPlayerSpecialization_Parms, NULL );

	return GetImportedPlayerSpecialization_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.GetImportedPlayerNotoriety
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USFXLegacyData::GetImportedPlayerNotoriety ( )
{
	static UFunction* pFnGetImportedPlayerNotoriety = NULL;

	if ( ! pFnGetImportedPlayerNotoriety )
		pFnGetImportedPlayerNotoriety = (UFunction*) UObject::GObjObjects()->Data[ 43836 ];

	USFXLegacyData_execGetImportedPlayerNotoriety_Parms GetImportedPlayerNotoriety_Parms;

	this->ProcessEvent ( pFnGetImportedPlayerNotoriety, &GetImportedPlayerNotoriety_Parms, NULL );

	return GetImportedPlayerNotoriety_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.GetImportedPlayerOrigin
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USFXLegacyData::GetImportedPlayerOrigin ( )
{
	static UFunction* pFnGetImportedPlayerOrigin = NULL;

	if ( ! pFnGetImportedPlayerOrigin )
		pFnGetImportedPlayerOrigin = (UFunction*) UObject::GObjObjects()->Data[ 43835 ];

	USFXLegacyData_execGetImportedPlayerOrigin_Parms GetImportedPlayerOrigin_Parms;

	this->ProcessEvent ( pFnGetImportedPlayerOrigin, &GetImportedPlayerOrigin_Parms, NULL );

	return GetImportedPlayerOrigin_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.GetImportedPlayerClass
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USFXLegacyData::GetImportedPlayerClass ( )
{
	static UFunction* pFnGetImportedPlayerClass = NULL;

	if ( ! pFnGetImportedPlayerClass )
		pFnGetImportedPlayerClass = (UFunction*) UObject::GObjObjects()->Data[ 43831 ];

	USFXLegacyData_execGetImportedPlayerClass_Parms GetImportedPlayerClass_Parms;

	this->ProcessEvent ( pFnGetImportedPlayerClass, &GetImportedPlayerClass_Parms, NULL );

	return GetImportedPlayerClass_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.GetImportedPlayerGender
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char USFXLegacyData::GetImportedPlayerGender ( )
{
	static UFunction* pFnGetImportedPlayerGender = NULL;

	if ( ! pFnGetImportedPlayerGender )
		pFnGetImportedPlayerGender = (UFunction*) UObject::GObjObjects()->Data[ 43833 ];

	USFXLegacyData_execGetImportedPlayerGender_Parms GetImportedPlayerGender_Parms;

	this->ProcessEvent ( pFnGetImportedPlayerGender, &GetImportedPlayerGender_Parms, NULL );

	return GetImportedPlayerGender_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.GetImportedPlayerLevel
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXLegacyData::GetImportedPlayerLevel ( )
{
	static UFunction* pFnGetImportedPlayerLevel = NULL;

	if ( ! pFnGetImportedPlayerLevel )
		pFnGetImportedPlayerLevel = (UFunction*) UObject::GObjObjects()->Data[ 43874 ];

	USFXLegacyData_execGetImportedPlayerLevel_Parms GetImportedPlayerLevel_Parms;

	this->ProcessEvent ( pFnGetImportedPlayerLevel, &GetImportedPlayerLevel_Parms, NULL );

	return GetImportedPlayerLevel_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.GetImportedPlayerName
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString USFXLegacyData::GetImportedPlayerName ( )
{
	static UFunction* pFnGetImportedPlayerName = NULL;

	if ( ! pFnGetImportedPlayerName )
		pFnGetImportedPlayerName = (UFunction*) UObject::GObjObjects()->Data[ 43834 ];

	USFXLegacyData_execGetImportedPlayerName_Parms GetImportedPlayerName_Parms;

	this->ProcessEvent ( pFnGetImportedPlayerName, &GetImportedPlayerName_Parms, NULL );

	return GetImportedPlayerName_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.ImportedPowerExists
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPowerID                       ( CPF_Parm )

bool USFXLegacyData::ImportedPowerExists ( int nPowerID )
{
	static UFunction* pFnImportedPowerExists = NULL;

	if ( ! pFnImportedPowerExists )
		pFnImportedPowerExists = (UFunction*) UObject::GObjObjects()->Data[ 43869 ];

	USFXLegacyData_execImportedPowerExists_Parms ImportedPowerExists_Parms;
	ImportedPowerExists_Parms.nPowerID = nPowerID;

	this->ProcessEvent ( pFnImportedPowerExists, &ImportedPowerExists_Parms, NULL );

	return ImportedPowerExists_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.GetImportedPowerRanks
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPowerID                       ( CPF_Parm )
// int                            nRanks                         ( CPF_Parm | CPF_OutParm )

bool USFXLegacyData::GetImportedPowerRanks ( int nPowerID, int* nRanks )
{
	static UFunction* pFnGetImportedPowerRanks = NULL;

	if ( ! pFnGetImportedPowerRanks )
		pFnGetImportedPowerRanks = (UFunction*) UObject::GObjObjects()->Data[ 43864 ];

	USFXLegacyData_execGetImportedPowerRanks_Parms GetImportedPowerRanks_Parms;
	GetImportedPowerRanks_Parms.nPowerID = nPowerID;

	this->ProcessEvent ( pFnGetImportedPowerRanks, &GetImportedPowerRanks_Parms, NULL );

	if ( nRanks )
		*nRanks = GetImportedPowerRanks_Parms.nRanks;

	return GetImportedPowerRanks_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.GetImportedPlotFloat
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )
// struct FString                 sNameOfRequiredContent         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// float                          fRet                           ( CPF_Parm | CPF_OutParm )

bool USFXLegacyData::GetImportedPlotFloat ( int nIndex, struct FString sNameOfRequiredContent, float* fRet )
{
	static UFunction* pFnGetImportedPlotFloat = NULL;

	if ( ! pFnGetImportedPlotFloat )
		pFnGetImportedPlotFloat = (UFunction*) UObject::GObjObjects()->Data[ 43859 ];

	USFXLegacyData_execGetImportedPlotFloat_Parms GetImportedPlotFloat_Parms;
	GetImportedPlotFloat_Parms.nIndex = nIndex;
	memcpy ( &GetImportedPlotFloat_Parms.sNameOfRequiredContent, &sNameOfRequiredContent, 0xC );

	this->ProcessEvent ( pFnGetImportedPlotFloat, &GetImportedPlotFloat_Parms, NULL );

	if ( fRet )
		*fRet = GetImportedPlotFloat_Parms.fRet;

	return GetImportedPlotFloat_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.GetImportedPlotInt
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )
// struct FString                 sNameOfRequiredContent         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            nRet                           ( CPF_Parm | CPF_OutParm )

bool USFXLegacyData::GetImportedPlotInt ( int nIndex, struct FString sNameOfRequiredContent, int* nRet )
{
	static UFunction* pFnGetImportedPlotInt = NULL;

	if ( ! pFnGetImportedPlotInt )
		pFnGetImportedPlotInt = (UFunction*) UObject::GObjObjects()->Data[ 43854 ];

	USFXLegacyData_execGetImportedPlotInt_Parms GetImportedPlotInt_Parms;
	GetImportedPlotInt_Parms.nIndex = nIndex;
	memcpy ( &GetImportedPlotInt_Parms.sNameOfRequiredContent, &sNameOfRequiredContent, 0xC );

	this->ProcessEvent ( pFnGetImportedPlotInt, &GetImportedPlotInt_Parms, NULL );

	if ( nRet )
		*nRet = GetImportedPlotInt_Parms.nRet;

	return GetImportedPlotInt_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.GetImportedPlotBool
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nIndex                         ( CPF_Parm )
// struct FString                 sNameOfRequiredContent         ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// int                            nRet                           ( CPF_Parm | CPF_OutParm )

bool USFXLegacyData::GetImportedPlotBool ( int nIndex, struct FString sNameOfRequiredContent, int* nRet )
{
	static UFunction* pFnGetImportedPlotBool = NULL;

	if ( ! pFnGetImportedPlotBool )
		pFnGetImportedPlotBool = (UFunction*) UObject::GObjObjects()->Data[ 43849 ];

	USFXLegacyData_execGetImportedPlotBool_Parms GetImportedPlotBool_Parms;
	GetImportedPlotBool_Parms.nIndex = nIndex;
	memcpy ( &GetImportedPlotBool_Parms.sNameOfRequiredContent, &sNameOfRequiredContent, 0xC );

	this->ProcessEvent ( pFnGetImportedPlotBool, &GetImportedPlotBool_Parms, NULL );

	if ( nRet )
		*nRet = GetImportedPlotBool_Parms.nRet;

	return GetImportedPlotBool_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.VerifyPRCRequirement
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 sNameOfRequiredContent         ( CPF_Parm | CPF_NeedCtorLink )

bool USFXLegacyData::eventVerifyPRCRequirement ( struct FString sNameOfRequiredContent )
{
	static UFunction* pFnVerifyPRCRequirement = NULL;

	if ( ! pFnVerifyPRCRequirement )
		pFnVerifyPRCRequirement = (UFunction*) UObject::GObjObjects()->Data[ 43845 ];

	USFXLegacyData_eventVerifyPRCRequirement_Parms VerifyPRCRequirement_Parms;
	memcpy ( &VerifyPRCRequirement_Parms.sNameOfRequiredContent, &sNameOfRequiredContent, 0xC );

	this->ProcessEvent ( pFnVerifyPRCRequirement, &VerifyPRCRequirement_Parms, NULL );

	return VerifyPRCRequirement_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.RetrievePRCScopeFromSaveObject
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// class UBioSaveGame*            oBSGImportObj                  ( CPF_Parm )

void USFXLegacyData::eventRetrievePRCScopeFromSaveObject ( class UBioSaveGame* oBSGImportObj )
{
	static UFunction* pFnRetrievePRCScopeFromSaveObject = NULL;

	if ( ! pFnRetrievePRCScopeFromSaveObject )
		pFnRetrievePRCScopeFromSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 43842 ];

	USFXLegacyData_eventRetrievePRCScopeFromSaveObject_Parms RetrievePRCScopeFromSaveObject_Parms;
	RetrievePRCScopeFromSaveObject_Parms.oBSGImportObj = oBSGImportObj;

	this->ProcessEvent ( pFnRetrievePRCScopeFromSaveObject, &RetrievePRCScopeFromSaveObject_Parms, NULL );
};

// Function SFXGame.SFXLegacyData.ApplyImportedMorphFaceFromSaveObject
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oMorphImportObj                ( CPF_Parm )

bool USFXLegacyData::eventApplyImportedMorphFaceFromSaveObject ( class UObject* oMorphImportObj )
{
	static UFunction* pFnApplyImportedMorphFaceFromSaveObject = NULL;

	if ( ! pFnApplyImportedMorphFaceFromSaveObject )
		pFnApplyImportedMorphFaceFromSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 43837 ];

	USFXLegacyData_eventApplyImportedMorphFaceFromSaveObject_Parms ApplyImportedMorphFaceFromSaveObject_Parms;
	ApplyImportedMorphFaceFromSaveObject_Parms.oMorphImportObj = oMorphImportObj;

	this->ProcessEvent ( pFnApplyImportedMorphFaceFromSaveObject, &ApplyImportedMorphFaceFromSaveObject_Parms, NULL );

	return ApplyImportedMorphFaceFromSaveObject_Parms.ReturnValue;
};

// Function SFXGame.SFXLegacyData.InitializeSpawnableImportedPlayer
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void USFXLegacyData::eventInitializeSpawnableImportedPlayer ( )
{
	static UFunction* pFnInitializeSpawnableImportedPlayer = NULL;

	if ( ! pFnInitializeSpawnableImportedPlayer )
		pFnInitializeSpawnableImportedPlayer = (UFunction*) UObject::GObjObjects()->Data[ 43825 ];

	USFXLegacyData_eventInitializeSpawnableImportedPlayer_Parms InitializeSpawnableImportedPlayer_Parms;

	this->ProcessEvent ( pFnInitializeSpawnableImportedPlayer, &InitializeSpawnableImportedPlayer_Parms, NULL );
};

// Function SFXGame.SFXLegacyData.ClearCurrentData
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void USFXLegacyData::eventClearCurrentData ( )
{
	static UFunction* pFnClearCurrentData = NULL;

	if ( ! pFnClearCurrentData )
		pFnClearCurrentData = (UFunction*) UObject::GObjObjects()->Data[ 43824 ];

	USFXLegacyData_eventClearCurrentData_Parms ClearCurrentData_Parms;

	this->ProcessEvent ( pFnClearCurrentData, &ClearCurrentData_Parms, NULL );
};

// Function SFXGame.BioSkillGame.InitializeObject
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UBioSkillGame::InitializeObject ( )
{
	static UFunction* pFnInitializeObject = NULL;

	if ( ! pFnInitializeObject )
		pFnInitializeObject = (UFunction*) UObject::GObjObjects()->Data[ 49001 ];

	UBioSkillGame_execInitializeObject_Parms InitializeObject_Parms;

	pFnInitializeObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeObject, &InitializeObject_Parms, NULL );

	pFnInitializeObject->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame.InitializeSkillGameStringReferences
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSkillGame::eventInitializeSkillGameStringReferences ( )
{
	static UFunction* pFnInitializeSkillGameStringReferences = NULL;

	if ( ! pFnInitializeSkillGameStringReferences )
		pFnInitializeSkillGameStringReferences = (UFunction*) UObject::GObjObjects()->Data[ 48994 ];

	UBioSkillGame_eventInitializeSkillGameStringReferences_Parms InitializeSkillGameStringReferences_Parms;

	this->ProcessEvent ( pFnInitializeSkillGameStringReferences, &InitializeSkillGameStringReferences_Parms, NULL );
};

// Function SFXGame.BioSkillGame.CallbackSkillGame
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UBioSkillGame::CallbackSkillGame ( )
{
	static UFunction* pFnCallbackSkillGame = NULL;

	if ( ! pFnCallbackSkillGame )
		pFnCallbackSkillGame = (UFunction*) UObject::GObjObjects()->Data[ 48993 ];

	UBioSkillGame_execCallbackSkillGame_Parms CallbackSkillGame_Parms;

	pFnCallbackSkillGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCallbackSkillGame, &CallbackSkillGame_Parms, NULL );

	pFnCallbackSkillGame->FunctionFlags |= 0x400;
};

// Function SFXGame.BioSkillGame.InitializeSkillGameCustom
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oUsingPawn                     ( CPF_Parm )
// class UObject*                 oDependent                     ( CPF_Parm )
// unsigned char                  nSkillGameType                 ( CPF_Parm )
// int                            nTotalButtonsToDisplay         ( CPF_Parm )
// float                          fButtonTimeout                 ( CPF_Parm )
// float                          fButtonDelayTime               ( CPF_Parm )
// struct FName                   nmFunctionSuccessCallback      ( CPF_Parm )
// struct FName                   nmFunctionFailureCallback      ( CPF_Parm )
// struct FName                   nmFunctionCancelCallback       ( CPF_Parm )
// unsigned long                  i_bDoNotUseSalvage             ( CPF_Parm )

bool UBioSkillGame::InitializeSkillGameCustom ( class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, struct FName nmFunctionSuccessCallback, struct FName nmFunctionFailureCallback, struct FName nmFunctionCancelCallback, unsigned long i_bDoNotUseSalvage )
{
	static UFunction* pFnInitializeSkillGameCustom = NULL;

	if ( ! pFnInitializeSkillGameCustom )
		pFnInitializeSkillGameCustom = (UFunction*) UObject::GObjObjects()->Data[ 48981 ];

	UBioSkillGame_execInitializeSkillGameCustom_Parms InitializeSkillGameCustom_Parms;
	InitializeSkillGameCustom_Parms.oUsingPawn = oUsingPawn;
	InitializeSkillGameCustom_Parms.oDependent = oDependent;
	InitializeSkillGameCustom_Parms.nSkillGameType = nSkillGameType;
	InitializeSkillGameCustom_Parms.nTotalButtonsToDisplay = nTotalButtonsToDisplay;
	InitializeSkillGameCustom_Parms.fButtonTimeout = fButtonTimeout;
	InitializeSkillGameCustom_Parms.fButtonDelayTime = fButtonDelayTime;
	memcpy ( &InitializeSkillGameCustom_Parms.nmFunctionSuccessCallback, &nmFunctionSuccessCallback, 0x8 );
	memcpy ( &InitializeSkillGameCustom_Parms.nmFunctionFailureCallback, &nmFunctionFailureCallback, 0x8 );
	memcpy ( &InitializeSkillGameCustom_Parms.nmFunctionCancelCallback, &nmFunctionCancelCallback, 0x8 );
	InitializeSkillGameCustom_Parms.i_bDoNotUseSalvage = i_bDoNotUseSalvage;

	pFnInitializeSkillGameCustom->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeSkillGameCustom, &InitializeSkillGameCustom_Parms, NULL );

	pFnInitializeSkillGameCustom->FunctionFlags |= 0x400;

	return InitializeSkillGameCustom_Parms.ReturnValue;
};

// Function SFXGame.BioSkillGame.InitializeSkillGame
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oUsingPawn                     ( CPF_Parm )
// class UObject*                 oDependent                     ( CPF_Parm )
// unsigned char                  nSkillGameType                 ( CPF_Parm )
// int                            nTotalButtonsToDisplay         ( CPF_Parm )
// float                          fButtonTimeout                 ( CPF_Parm )
// float                          fButtonDelayTime               ( CPF_Parm )

bool UBioSkillGame::InitializeSkillGame ( class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime )
{
	static UFunction* pFnInitializeSkillGame = NULL;

	if ( ! pFnInitializeSkillGame )
		pFnInitializeSkillGame = (UFunction*) UObject::GObjObjects()->Data[ 48973 ];

	UBioSkillGame_execInitializeSkillGame_Parms InitializeSkillGame_Parms;
	InitializeSkillGame_Parms.oUsingPawn = oUsingPawn;
	InitializeSkillGame_Parms.oDependent = oDependent;
	InitializeSkillGame_Parms.nSkillGameType = nSkillGameType;
	InitializeSkillGame_Parms.nTotalButtonsToDisplay = nTotalButtonsToDisplay;
	InitializeSkillGame_Parms.fButtonTimeout = fButtonTimeout;
	InitializeSkillGame_Parms.fButtonDelayTime = fButtonDelayTime;

	pFnInitializeSkillGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeSkillGame, &InitializeSkillGame_Parms, NULL );

	pFnInitializeSkillGame->FunctionFlags |= 0x400;

	return InitializeSkillGame_Parms.ReturnValue;
};

// Function SFXGame.BioSkillGame.GetBestSkillMember
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// class APawn*                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eSkillGameType                 ( CPF_Parm )
// class ABioBaseSquad*           oInputSquad                    ( CPF_Parm )
// int                            nBestSkillLevel                ( CPF_Parm | CPF_OutParm )

class APawn* UBioSkillGame::GetBestSkillMember ( unsigned char eSkillGameType, class ABioBaseSquad* oInputSquad, int* nBestSkillLevel )
{
	static UFunction* pFnGetBestSkillMember = NULL;

	if ( ! pFnGetBestSkillMember )
		pFnGetBestSkillMember = (UFunction*) UObject::GObjObjects()->Data[ 48968 ];

	UBioSkillGame_execGetBestSkillMember_Parms GetBestSkillMember_Parms;
	GetBestSkillMember_Parms.eSkillGameType = eSkillGameType;
	GetBestSkillMember_Parms.oInputSquad = oInputSquad;

	pFnGetBestSkillMember->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBestSkillMember, &GetBestSkillMember_Parms, NULL );

	pFnGetBestSkillMember->FunctionFlags |= 0x400;

	if ( nBestSkillLevel )
		*nBestSkillLevel = GetBestSkillMember_Parms.nBestSkillLevel;

	return GetBestSkillMember_Parms.ReturnValue;
};

// Function SFXGame.BioCustomAction.TickCustomAction
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void UBioCustomAction::eventTickCustomAction ( float fDeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 34917 ];

	UBioCustomAction_eventTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction.PlayForceFeedback
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UForceFeedbackWaveform*  FF                             ( CPF_Parm )

void UBioCustomAction::PlayForceFeedback ( class UForceFeedbackWaveform* FF )
{
	static UFunction* pFnPlayForceFeedback = NULL;

	if ( ! pFnPlayForceFeedback )
		pFnPlayForceFeedback = (UFunction*) UObject::GObjObjects()->Data[ 34914 ];

	UBioCustomAction_execPlayForceFeedback_Parms PlayForceFeedback_Parms;
	PlayForceFeedback_Parms.FF = FF;

	this->ProcessEvent ( pFnPlayForceFeedback, &PlayForceFeedback_Parms, NULL );
};

// Function SFXGame.BioCustomAction.PlayScreenShake
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FScreenShakeStruct      Shake                          ( CPF_Parm )

void UBioCustomAction::PlayScreenShake ( struct FScreenShakeStruct Shake )
{
	static UFunction* pFnPlayScreenShake = NULL;

	if ( ! pFnPlayScreenShake )
		pFnPlayScreenShake = (UFunction*) UObject::GObjObjects()->Data[ 34911 ];

	UBioCustomAction_execPlayScreenShake_Parms PlayScreenShake_Parms;
	memcpy ( &PlayScreenShake_Parms.Shake, &Shake, 0x70 );

	this->ProcessEvent ( pFnPlayScreenShake, &PlayScreenShake_Parms, NULL );
};

// Function SFXGame.BioCustomAction.RootMotionExtracted
// [0x00420000] 
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )
// struct FBoneAtom               ExtractedRootMotionDelta       ( CPF_Parm | CPF_OutParm )

void UBioCustomAction::RootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta )
{
	static UFunction* pFnRootMotionExtracted = NULL;

	if ( ! pFnRootMotionExtracted )
		pFnRootMotionExtracted = (UFunction*) UObject::GObjObjects()->Data[ 34908 ];

	UBioCustomAction_execRootMotionExtracted_Parms RootMotionExtracted_Parms;
	RootMotionExtracted_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnRootMotionExtracted, &RootMotionExtracted_Parms, NULL );

	if ( ExtractedRootMotionDelta )
		memcpy ( ExtractedRootMotionDelta, &RootMotionExtracted_Parms.ExtractedRootMotionDelta, 0x20 );
};

// Function SFXGame.BioCustomAction.RootMotionModeChanged
// [0x00020000] 
// Parameters infos:
// class USkeletalMeshComponent*  SkelComp                       ( CPF_Parm | CPF_EditInline )

void UBioCustomAction::RootMotionModeChanged ( class USkeletalMeshComponent* SkelComp )
{
	static UFunction* pFnRootMotionModeChanged = NULL;

	if ( ! pFnRootMotionModeChanged )
		pFnRootMotionModeChanged = (UFunction*) UObject::GObjObjects()->Data[ 34906 ];

	UBioCustomAction_execRootMotionModeChanged_Parms RootMotionModeChanged_Parms;
	RootMotionModeChanged_Parms.SkelComp = SkelComp;

	this->ProcessEvent ( pFnRootMotionModeChanged, &RootMotionModeChanged_Parms, NULL );
};

// Function SFXGame.BioCustomAction.TogglePawnCollision
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bToggleOn                      ( CPF_Parm )

void UBioCustomAction::TogglePawnCollision ( unsigned long bToggleOn )
{
	static UFunction* pFnTogglePawnCollision = NULL;

	if ( ! pFnTogglePawnCollision )
		pFnTogglePawnCollision = (UFunction*) UObject::GObjObjects()->Data[ 34874 ];

	UBioCustomAction_execTogglePawnCollision_Parms TogglePawnCollision_Parms;
	TogglePawnCollision_Parms.bToggleOn = bToggleOn;

	this->ProcessEvent ( pFnTogglePawnCollision, &TogglePawnCollision_Parms, NULL );
};

// Function SFXGame.BioCustomAction.ReachedPrecisePosition
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioCustomAction::eventReachedPrecisePosition ( )
{
	static UFunction* pFnReachedPrecisePosition = NULL;

	if ( ! pFnReachedPrecisePosition )
		pFnReachedPrecisePosition = (UFunction*) UObject::GObjObjects()->Data[ 34903 ];

	UBioCustomAction_eventReachedPrecisePosition_Parms ReachedPrecisePosition_Parms;

	this->ProcessEvent ( pFnReachedPrecisePosition, &ReachedPrecisePosition_Parms, NULL );
};

// Function SFXGame.BioCustomAction.SetFacePreciseRotation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FRotator                RotationToFace                 ( CPF_Parm )
// float                          InterpolationTime              ( CPF_Parm )

void UBioCustomAction::SetFacePreciseRotation ( struct FRotator RotationToFace, float InterpolationTime )
{
	static UFunction* pFnSetFacePreciseRotation = NULL;

	if ( ! pFnSetFacePreciseRotation )
		pFnSetFacePreciseRotation = (UFunction*) UObject::GObjObjects()->Data[ 34900 ];

	UBioCustomAction_execSetFacePreciseRotation_Parms SetFacePreciseRotation_Parms;
	memcpy ( &SetFacePreciseRotation_Parms.RotationToFace, &RotationToFace, 0xC );
	SetFacePreciseRotation_Parms.InterpolationTime = InterpolationTime;

	pFnSetFacePreciseRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFacePreciseRotation, &SetFacePreciseRotation_Parms, NULL );

	pFnSetFacePreciseRotation->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCustomAction.SetReachPreciseDestination
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// struct FVector                 DestinationToReach             ( CPF_Parm )

void UBioCustomAction::SetReachPreciseDestination ( struct FVector DestinationToReach )
{
	static UFunction* pFnSetReachPreciseDestination = NULL;

	if ( ! pFnSetReachPreciseDestination )
		pFnSetReachPreciseDestination = (UFunction*) UObject::GObjObjects()->Data[ 34898 ];

	UBioCustomAction_execSetReachPreciseDestination_Parms SetReachPreciseDestination_Parms;
	memcpy ( &SetReachPreciseDestination_Parms.DestinationToReach, &DestinationToReach, 0xC );

	pFnSetReachPreciseDestination->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetReachPreciseDestination, &SetReachPreciseDestination_Parms, NULL );

	pFnSetReachPreciseDestination->FunctionFlags |= 0x400;
};

// Function SFXGame.BioCustomAction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UBioCustomAction::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 34892 ];

	UBioCustomAction_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.BioCustomAction.AnimNotify
// [0x00020000] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// class UBioAnimNotify_CustomAction* NotifyObject                   ( CPF_Parm )

void UBioCustomAction::AnimNotify ( class UAnimNodeSequence* SeqNode, class UBioAnimNotify_CustomAction* NotifyObject )
{
	static UFunction* pFnAnimNotify = NULL;

	if ( ! pFnAnimNotify )
		pFnAnimNotify = (UFunction*) UObject::GObjObjects()->Data[ 34889 ];

	UBioCustomAction_execAnimNotify_Parms AnimNotify_Parms;
	AnimNotify_Parms.SeqNode = SeqNode;
	AnimNotify_Parms.NotifyObject = NotifyObject;

	this->ProcessEvent ( pFnAnimNotify, &AnimNotify_Parms, NULL );
};

// Function SFXGame.BioCustomAction.NotifyHitWall
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )

bool UBioCustomAction::NotifyHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = (UFunction*) UObject::GObjObjects()->Data[ 34885 ];

	UBioCustomAction_execNotifyHitWall_Parms NotifyHitWall_Parms;
	memcpy ( &NotifyHitWall_Parms.HitNormal, &HitNormal, 0xC );
	NotifyHitWall_Parms.Wall = Wall;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );

	return NotifyHitWall_Parms.ReturnValue;
};

// Function SFXGame.BioCustomAction.NotifyBump
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool UBioCustomAction::NotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 34881 ];

	UBioCustomAction_execNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function SFXGame.BioCustomAction.PawnLeftCover
// [0x00020000] 
// Parameters infos:

void UBioCustomAction::PawnLeftCover ( )
{
	static UFunction* pFnPawnLeftCover = NULL;

	if ( ! pFnPawnLeftCover )
		pFnPawnLeftCover = (UFunction*) UObject::GObjObjects()->Data[ 34880 ];

	UBioCustomAction_execPawnLeftCover_Parms PawnLeftCover_Parms;

	this->ProcessEvent ( pFnPawnLeftCover, &PawnLeftCover_Parms, NULL );
};

// Function SFXGame.BioCustomAction.ContinueCustomAction
// [0x00020000] 
// Parameters infos:

void UBioCustomAction::ContinueCustomAction ( )
{
	static UFunction* pFnContinueCustomAction = NULL;

	if ( ! pFnContinueCustomAction )
		pFnContinueCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 34879 ];

	UBioCustomAction_execContinueCustomAction_Parms ContinueCustomAction_Parms;

	this->ProcessEvent ( pFnContinueCustomAction, &ContinueCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction.PauseCustomAction
// [0x00020000] 
// Parameters infos:

void UBioCustomAction::PauseCustomAction ( )
{
	static UFunction* pFnPauseCustomAction = NULL;

	if ( ! pFnPauseCustomAction )
		pFnPauseCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 34878 ];

	UBioCustomAction_execPauseCustomAction_Parms PauseCustomAction_Parms;

	this->ProcessEvent ( pFnPauseCustomAction, &PauseCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 34876 ];

	UBioCustomAction_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 34868 ];

	UBioCustomAction_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction.InternalCanDoCustomAction
// [0x00080002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioCustomAction::InternalCanDoCustomAction ( )
{
	static UFunction* pFnInternalCanDoCustomAction = NULL;

	if ( ! pFnInternalCanDoCustomAction )
		pFnInternalCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 34866 ];

	UBioCustomAction_execInternalCanDoCustomAction_Parms InternalCanDoCustomAction_Parms;

	this->ProcessEvent ( pFnInternalCanDoCustomAction, &InternalCanDoCustomAction_Parms, NULL );

	return InternalCanDoCustomAction_Parms.ReturnValue;
};

// Function SFXGame.BioCustomAction.CanDoCustomAction
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioCustomAction::CanDoCustomAction ( )
{
	static UFunction* pFnCanDoCustomAction = NULL;

	if ( ! pFnCanDoCustomAction )
		pFnCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 34864 ];

	UBioCustomAction_execCanDoCustomAction_Parms CanDoCustomAction_Parms;

	this->ProcessEvent ( pFnCanDoCustomAction, &CanDoCustomAction_Parms, NULL );

	return CanDoCustomAction_Parms.ReturnValue;
};

// Function SFXGame.BioCustomAction_KroganCharge.BodyStanceAnimEndNotification
// [0x00820002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UBioCustomAction_KroganCharge::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 35287 ];

	UBioCustomAction_KroganCharge_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.BioCustomAction_KroganCharge.StopCustomAction
// [0x00820002] 
// Parameters infos:

void UBioCustomAction_KroganCharge::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35284 ];

	UBioCustomAction_KroganCharge_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_KroganCharge.StartCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_KroganCharge::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35283 ];

	UBioCustomAction_KroganCharge_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_KroganCharge.PlayHitAnim
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oHitTarget                     ( CPF_Parm )

bool UBioCustomAction_KroganCharge::PlayHitAnim ( class AActor* oHitTarget )
{
	static UFunction* pFnPlayHitAnim = NULL;

	if ( ! pFnPlayHitAnim )
		pFnPlayHitAnim = (UFunction*) UObject::GObjObjects()->Data[ 35280 ];

	UBioCustomAction_KroganCharge_execPlayHitAnim_Parms PlayHitAnim_Parms;
	PlayHitAnim_Parms.oHitTarget = oHitTarget;

	this->ProcessEvent ( pFnPlayHitAnim, &PlayHitAnim_Parms, NULL );

	return PlayHitAnim_Parms.ReturnValue;
};

// Function SFXGame.BioCustomAction_KroganCharge.GetBodyStance
// [0x00020002] 
// Parameters infos:
// struct FBodyStance             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eAction                        ( CPF_Parm )

struct FBodyStance UBioCustomAction_KroganCharge::GetBodyStance ( unsigned char eAction )
{
	static UFunction* pFnGetBodyStance = NULL;

	if ( ! pFnGetBodyStance )
		pFnGetBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 35277 ];

	UBioCustomAction_KroganCharge_execGetBodyStance_Parms GetBodyStance_Parms;
	GetBodyStance_Parms.eAction = eAction;

	this->ProcessEvent ( pFnGetBodyStance, &GetBodyStance_Parms, NULL );

	return GetBodyStance_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.RecalculateCooldownBonus
// [0x00020002] 
// Parameters infos:

void USFXPower::RecalculateCooldownBonus ( )
{
	static UFunction* pFnRecalculateCooldownBonus = NULL;

	if ( ! pFnRecalculateCooldownBonus )
		pFnRecalculateCooldownBonus = (UFunction*) UObject::GObjObjects()->Data[ 59273 ];

	USFXPower_execRecalculateCooldownBonus_Parms RecalculateCooldownBonus_Parms;

	this->ProcessEvent ( pFnRecalculateCooldownBonus, &RecalculateCooldownBonus_Parms, NULL );
};

// Function SFXGame.SFXPower.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void USFXPower::Tick ( float fDeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 59271 ];

	USFXPower_execTick_Parms Tick_Parms;
	Tick_Parms.fDeltaTime = fDeltaTime;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXPower.GetDifficultyDurationMultiplier
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXPower::GetDifficultyDurationMultiplier ( )
{
	static UFunction* pFnGetDifficultyDurationMultiplier = NULL;

	if ( ! pFnGetDifficultyDurationMultiplier )
		pFnGetDifficultyDurationMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 59269 ];

	USFXPower_execGetDifficultyDurationMultiplier_Parms GetDifficultyDurationMultiplier_Parms;

	this->ProcessEvent ( pFnGetDifficultyDurationMultiplier, &GetDifficultyDurationMultiplier_Parms, NULL );

	return GetDifficultyDurationMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.RecalculateDurationBonus
// [0x00020002] 
// Parameters infos:

void USFXPower::RecalculateDurationBonus ( )
{
	static UFunction* pFnRecalculateDurationBonus = NULL;

	if ( ! pFnRecalculateDurationBonus )
		pFnRecalculateDurationBonus = (UFunction*) UObject::GObjObjects()->Data[ 59267 ];

	USFXPower_execRecalculateDurationBonus_Parms RecalculateDurationBonus_Parms;

	this->ProcessEvent ( pFnRecalculateDurationBonus, &RecalculateDurationBonus_Parms, NULL );
};

// Function SFXGame.SFXPower.GetDurationResearchBonus
// [0x00420002] 
// Parameters infos:
// float                          fStaticDamageBonus             ( CPF_Parm | CPF_OutParm )

void USFXPower::GetDurationResearchBonus ( float* fStaticDamageBonus )
{
	static UFunction* pFnGetDurationResearchBonus = NULL;

	if ( ! pFnGetDurationResearchBonus )
		pFnGetDurationResearchBonus = (UFunction*) UObject::GObjObjects()->Data[ 59265 ];

	USFXPower_execGetDurationResearchBonus_Parms GetDurationResearchBonus_Parms;

	this->ProcessEvent ( pFnGetDurationResearchBonus, &GetDurationResearchBonus_Parms, NULL );

	if ( fStaticDamageBonus )
		*fStaticDamageBonus = GetDurationResearchBonus_Parms.fStaticDamageBonus;
};

// Function SFXGame.SFXPower.GetDuration
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXPower::GetDuration ( )
{
	static UFunction* pFnGetDuration = NULL;

	if ( ! pFnGetDuration )
		pFnGetDuration = (UFunction*) UObject::GObjObjects()->Data[ 59261 ];

	USFXPower_execGetDuration_Parms GetDuration_Parms;

	this->ProcessEvent ( pFnGetDuration, &GetDuration_Parms, NULL );

	return GetDuration_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.GetForce
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXPower::GetForce ( )
{
	static UFunction* pFnGetForce = NULL;

	if ( ! pFnGetForce )
		pFnGetForce = (UFunction*) UObject::GObjObjects()->Data[ 59259 ];

	USFXPower_execGetForce_Parms GetForce_Parms;

	this->ProcessEvent ( pFnGetForce, &GetForce_Parms, NULL );

	return GetForce_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.RecalculateDamageBonus
// [0x00020002] 
// Parameters infos:

void USFXPower::RecalculateDamageBonus ( )
{
	static UFunction* pFnRecalculateDamageBonus = NULL;

	if ( ! pFnRecalculateDamageBonus )
		pFnRecalculateDamageBonus = (UFunction*) UObject::GObjObjects()->Data[ 59257 ];

	USFXPower_execRecalculateDamageBonus_Parms RecalculateDamageBonus_Parms;

	this->ProcessEvent ( pFnRecalculateDamageBonus, &RecalculateDamageBonus_Parms, NULL );
};

// Function SFXGame.SFXPower.GetDamageResearchBonus
// [0x00420002] 
// Parameters infos:
// float                          fStaticDamageBonus             ( CPF_Parm | CPF_OutParm )

void USFXPower::GetDamageResearchBonus ( float* fStaticDamageBonus )
{
	static UFunction* pFnGetDamageResearchBonus = NULL;

	if ( ! pFnGetDamageResearchBonus )
		pFnGetDamageResearchBonus = (UFunction*) UObject::GObjObjects()->Data[ 59255 ];

	USFXPower_execGetDamageResearchBonus_Parms GetDamageResearchBonus_Parms;

	this->ProcessEvent ( pFnGetDamageResearchBonus, &GetDamageResearchBonus_Parms, NULL );

	if ( fStaticDamageBonus )
		*fStaticDamageBonus = GetDamageResearchBonus_Parms.fStaticDamageBonus;
};

// Function SFXGame.SFXPower.GetDamage
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXPower::GetDamage ( )
{
	static UFunction* pFnGetDamage = NULL;

	if ( ! pFnGetDamage )
		pFnGetDamage = (UFunction*) UObject::GObjObjects()->Data[ 59251 ];

	USFXPower_execGetDamage_Parms GetDamage_Parms;

	this->ProcessEvent ( pFnGetDamage, &GetDamage_Parms, NULL );

	return GetDamage_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.ProcessToken
// [0x00440401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// int                            nRankIndex                     ( CPF_Parm )
// struct FString                 sToken                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPower::ProcessToken ( int nRankIndex, struct FString* sToken )
{
	static UFunction* pFnProcessToken = NULL;

	if ( ! pFnProcessToken )
		pFnProcessToken = (UFunction*) UObject::GObjObjects()->Data[ 59248 ];

	USFXPower_execProcessToken_Parms ProcessToken_Parms;
	ProcessToken_Parms.nRankIndex = nRankIndex;

	pFnProcessToken->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnProcessToken, &ProcessToken_Parms, NULL );

	pFnProcessToken->FunctionFlags |= 0x400;

	if ( sToken )
		memcpy ( sToken, &ProcessToken_Parms.sToken, 0xC );
};

// Function SFXGame.SFXPower.ParseString
// [0x00440401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRankIndex                     ( CPF_Parm )
// struct FString                 sParsedString                  ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPower::ParseString ( int nRankIndex, struct FString* sParsedString )
{
	static UFunction* pFnParseString = NULL;

	if ( ! pFnParseString )
		pFnParseString = (UFunction*) UObject::GObjObjects()->Data[ 59244 ];

	USFXPower_execParseString_Parms ParseString_Parms;
	ParseString_Parms.nRankIndex = nRankIndex;

	pFnParseString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnParseString, &ParseString_Parms, NULL );

	pFnParseString->FunctionFlags |= 0x400;

	if ( sParsedString )
		memcpy ( sParsedString, &ParseString_Parms.sParsedString, 0xC );

	return ParseString_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.GetParsedString
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRankIndex                     ( CPF_Parm )
// struct FString                 sOutput                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPower::GetParsedString ( int nRankIndex, struct FString* sOutput )
{
	static UFunction* pFnGetParsedString = NULL;

	if ( ! pFnGetParsedString )
		pFnGetParsedString = (UFunction*) UObject::GObjObjects()->Data[ 59239 ];

	USFXPower_execGetParsedString_Parms GetParsedString_Parms;
	GetParsedString_Parms.nRankIndex = nRankIndex;

	pFnGetParsedString->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetParsedString, &GetParsedString_Parms, NULL );

	pFnGetParsedString->FunctionFlags |= 0x400;

	if ( sOutput )
		memcpy ( sOutput, &GetParsedString_Parms.sOutput, 0xC );

	return GetParsedString_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.GetUnlockBlurb
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRankIndex                     ( CPF_Parm )
// struct FString                 sUnlockBlurb                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPower::GetUnlockBlurb ( int nRankIndex, struct FString* sUnlockBlurb )
{
	static UFunction* pFnGetUnlockBlurb = NULL;

	if ( ! pFnGetUnlockBlurb )
		pFnGetUnlockBlurb = (UFunction*) UObject::GObjObjects()->Data[ 59235 ];

	USFXPower_execGetUnlockBlurb_Parms GetUnlockBlurb_Parms;
	GetUnlockBlurb_Parms.nRankIndex = nRankIndex;

	pFnGetUnlockBlurb->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnlockBlurb, &GetUnlockBlurb_Parms, NULL );

	pFnGetUnlockBlurb->FunctionFlags |= 0x400;

	if ( sUnlockBlurb )
		memcpy ( sUnlockBlurb, &GetUnlockBlurb_Parms.sUnlockBlurb, 0xC );

	return GetUnlockBlurb_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.GetDescription
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRankIndex                     ( CPF_Parm )
// struct FString                 sDescription                   ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool USFXPower::GetDescription ( int nRankIndex, struct FString* sDescription )
{
	static UFunction* pFnGetDescription = NULL;

	if ( ! pFnGetDescription )
		pFnGetDescription = (UFunction*) UObject::GObjObjects()->Data[ 59231 ];

	USFXPower_execGetDescription_Parms GetDescription_Parms;
	GetDescription_Parms.nRankIndex = nRankIndex;

	pFnGetDescription->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDescription, &GetDescription_Parms, NULL );

	pFnGetDescription->FunctionFlags |= 0x400;

	if ( sDescription )
		memcpy ( sDescription, &GetDescription_Parms.sDescription, 0xC );

	return GetDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.IsSuppressed
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXPower::IsSuppressed ( )
{
	static UFunction* pFnIsSuppressed = NULL;

	if ( ! pFnIsSuppressed )
		pFnIsSuppressed = (UFunction*) UObject::GObjObjects()->Data[ 59229 ];

	USFXPower_execIsSuppressed_Parms IsSuppressed_Parms;

	pFnIsSuppressed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSuppressed, &IsSuppressed_Parms, NULL );

	pFnIsSuppressed->FunctionFlags |= 0x400;

	return IsSuppressed_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.IsEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXPower::IsEnabled ( )
{
	static UFunction* pFnIsEnabled = NULL;

	if ( ! pFnIsEnabled )
		pFnIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 59227 ];

	USFXPower_execIsEnabled_Parms IsEnabled_Parms;

	pFnIsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEnabled, &IsEnabled_Parms, NULL );

	pFnIsEnabled->FunctionFlags |= 0x400;

	return IsEnabled_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.GetTotalCooldownTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXPower::GetTotalCooldownTime ( )
{
	static UFunction* pFnGetTotalCooldownTime = NULL;

	if ( ! pFnGetTotalCooldownTime )
		pFnGetTotalCooldownTime = (UFunction*) UObject::GObjObjects()->Data[ 59225 ];

	USFXPower_execGetTotalCooldownTime_Parms GetTotalCooldownTime_Parms;

	pFnGetTotalCooldownTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTotalCooldownTime, &GetTotalCooldownTime_Parms, NULL );

	pFnGetTotalCooldownTime->FunctionFlags |= 0x400;

	return GetTotalCooldownTime_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.GetCooldownRemaining
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXPower::GetCooldownRemaining ( )
{
	static UFunction* pFnGetCooldownRemaining = NULL;

	if ( ! pFnGetCooldownRemaining )
		pFnGetCooldownRemaining = (UFunction*) UObject::GObjObjects()->Data[ 59223 ];

	USFXPower_execGetCooldownRemaining_Parms GetCooldownRemaining_Parms;

	pFnGetCooldownRemaining->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCooldownRemaining, &GetCooldownRemaining_Parms, NULL );

	pFnGetCooldownRemaining->FunctionFlags |= 0x400;

	return GetCooldownRemaining_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.GetPowerScript
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class UBioPowerScript*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioPowerScript* USFXPower::GetPowerScript ( )
{
	static UFunction* pFnGetPowerScript = NULL;

	if ( ! pFnGetPowerScript )
		pFnGetPowerScript = (UFunction*) UObject::GObjObjects()->Data[ 59221 ];

	USFXPower_execGetPowerScript_Parms GetPowerScript_Parms;

	pFnGetPowerScript->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPowerScript, &GetPowerScript_Parms, NULL );

	pFnGetPowerScript->FunctionFlags |= 0x400;

	return GetPowerScript_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.IsTargetInRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Target                         ( CPF_Parm )

bool USFXPower::IsTargetInRange ( class AActor* Target )
{
	static UFunction* pFnIsTargetInRange = NULL;

	if ( ! pFnIsTargetInRange )
		pFnIsTargetInRange = (UFunction*) UObject::GObjObjects()->Data[ 59218 ];

	USFXPower_execIsTargetInRange_Parms IsTargetInRange_Parms;
	IsTargetInRange_Parms.Target = Target;

	pFnIsTargetInRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTargetInRange, &IsTargetInRange_Parms, NULL );

	pFnIsTargetInRange->FunctionFlags |= 0x400;

	return IsTargetInRange_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.GetUnlockDetails
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sUnlockDetails                 ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPower::GetUnlockDetails ( struct FString* sUnlockDetails )
{
	static UFunction* pFnGetUnlockDetails = NULL;

	if ( ! pFnGetUnlockDetails )
		pFnGetUnlockDetails = (UFunction*) UObject::GObjObjects()->Data[ 59216 ];

	USFXPower_execGetUnlockDetails_Parms GetUnlockDetails_Parms;

	pFnGetUnlockDetails->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnlockDetails, &GetUnlockDetails_Parms, NULL );

	pFnGetUnlockDetails->FunctionFlags |= 0x400;

	if ( sUnlockDetails )
		memcpy ( sUnlockDetails, &GetUnlockDetails_Parms.sUnlockDetails, 0xC );
};

// Function SFXGame.SFXPower.GetStringFromStringRef
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bParse                         ( CPF_OptionalParm | CPF_Parm )
// int                            nParseIndex                    ( CPF_OptionalParm | CPF_Parm )
// struct FString                 TheString                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPower::GetStringFromStringRef ( unsigned long bParse, int nParseIndex, struct FString* TheString )
{
	static UFunction* pFnGetStringFromStringRef = NULL;

	if ( ! pFnGetStringFromStringRef )
		pFnGetStringFromStringRef = (UFunction*) UObject::GObjObjects()->Data[ 59211 ];

	USFXPower_execGetStringFromStringRef_Parms GetStringFromStringRef_Parms;
	GetStringFromStringRef_Parms.bParse = bParse;
	GetStringFromStringRef_Parms.nParseIndex = nParseIndex;

	pFnGetStringFromStringRef->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetStringFromStringRef, &GetStringFromStringRef_Parms, NULL );

	pFnGetStringFromStringRef->FunctionFlags |= 0x400;

	if ( TheString )
		memcpy ( TheString, &GetStringFromStringRef_Parms.TheString, 0xC );
};

// Function SFXGame.SFXPower.GetArrayValue
// [0x00420400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nRankToUse                     ( CPF_OptionalParm | CPF_Parm )
// TArray< float >                ArrayValues                    ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

float USFXPower::GetArrayValue ( int nRankToUse, TArray< float >* ArrayValues )
{
	static UFunction* pFnGetArrayValue = NULL;

	if ( ! pFnGetArrayValue )
		pFnGetArrayValue = (UFunction*) UObject::GObjObjects()->Data[ 59206 ];

	USFXPower_execGetArrayValue_Parms GetArrayValue_Parms;
	GetArrayValue_Parms.nRankToUse = nRankToUse;

	pFnGetArrayValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetArrayValue, &GetArrayValue_Parms, NULL );

	pFnGetArrayValue->FunctionFlags |= 0x400;

	if ( ArrayValues )
		memcpy ( ArrayValues, &GetArrayValue_Parms.ArrayValues, 0xC );

	return GetArrayValue_Parms.ReturnValue;
};

// Function SFXGame.SFXPower.GetScaledValue
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               ValueToScale                   ( CPF_Parm )
// int                            nRankToUse                     ( CPF_OptionalParm | CPF_Parm )

float USFXPower::GetScaledValue ( struct FVector2D ValueToScale, int nRankToUse )
{
	static UFunction* pFnGetScaledValue = NULL;

	if ( ! pFnGetScaledValue )
		pFnGetScaledValue = (UFunction*) UObject::GObjObjects()->Data[ 59202 ];

	USFXPower_execGetScaledValue_Parms GetScaledValue_Parms;
	memcpy ( &GetScaledValue_Parms.ValueToScale, &ValueToScale, 0x8 );
	GetScaledValue_Parms.nRankToUse = nRankToUse;

	pFnGetScaledValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetScaledValue, &GetScaledValue_Parms, NULL );

	pFnGetScaledValue->FunctionFlags |= 0x400;

	return GetScaledValue_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerManager.GetRefundAmount2
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  Power                          ( CPF_Parm )
// int                            Rank                           ( CPF_Parm )

int USFXPowerManager::GetRefundAmount2 ( class UClass* Power, int Rank )
{
	static UFunction* pFnGetRefundAmount2 = NULL;

	if ( ! pFnGetRefundAmount2 )
		pFnGetRefundAmount2 = (UFunction*) UObject::GObjObjects()->Data[ 39085 ];

	USFXPowerManager_execGetRefundAmount2_Parms GetRefundAmount2_Parms;
	GetRefundAmount2_Parms.Power = Power;
	GetRefundAmount2_Parms.Rank = Rank;

	this->ProcessEvent ( pFnGetRefundAmount2, &GetRefundAmount2_Parms, NULL );

	return GetRefundAmount2_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerManager.GetRefundAmount
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPower*               Power                          ( CPF_Parm )

int USFXPowerManager::GetRefundAmount ( class USFXPower* Power )
{
	static UFunction* pFnGetRefundAmount = NULL;

	if ( ! pFnGetRefundAmount )
		pFnGetRefundAmount = (UFunction*) UObject::GObjObjects()->Data[ 39082 ];

	USFXPowerManager_execGetRefundAmount_Parms GetRefundAmount_Parms;
	GetRefundAmount_Parms.Power = Power;

	this->ProcessEvent ( pFnGetRefundAmount, &GetRefundAmount_Parms, NULL );

	return GetRefundAmount_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerManager.RefundAllTalentPoints
// [0x00020002] 
// Parameters infos:

void USFXPowerManager::RefundAllTalentPoints ( )
{
	static UFunction* pFnRefundAllTalentPoints = NULL;

	if ( ! pFnRefundAllTalentPoints )
		pFnRefundAllTalentPoints = (UFunction*) UObject::GObjObjects()->Data[ 39075 ];

	USFXPowerManager_execRefundAllTalentPoints_Parms RefundAllTalentPoints_Parms;

	this->ProcessEvent ( pFnRefundAllTalentPoints, &RefundAllTalentPoints_Parms, NULL );
};

// Function SFXGame.SFXPowerManager.ProcessWheelDisplayOrder
// [0x00020002] 
// Parameters infos:

void USFXPowerManager::ProcessWheelDisplayOrder ( )
{
	static UFunction* pFnProcessWheelDisplayOrder = NULL;

	if ( ! pFnProcessWheelDisplayOrder )
		pFnProcessWheelDisplayOrder = (UFunction*) UObject::GObjObjects()->Data[ 39068 ];

	USFXPowerManager_execProcessWheelDisplayOrder_Parms ProcessWheelDisplayOrder_Parms;

	this->ProcessEvent ( pFnProcessWheelDisplayOrder, &ProcessWheelDisplayOrder_Parms, NULL );
};

// Function SFXGame.SFXPowerManager.GetPowerWheelPowers
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// TArray< class USFXPower* >     PowerList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerManager::eventGetPowerWheelPowers ( TArray< class USFXPower* >* PowerList )
{
	static UFunction* pFnGetPowerWheelPowers = NULL;

	if ( ! pFnGetPowerWheelPowers )
		pFnGetPowerWheelPowers = (UFunction*) UObject::GObjObjects()->Data[ 39060 ];

	USFXPowerManager_eventGetPowerWheelPowers_Parms GetPowerWheelPowers_Parms;

	this->ProcessEvent ( pFnGetPowerWheelPowers, &GetPowerWheelPowers_Parms, NULL );

	if ( PowerList )
		memcpy ( PowerList, &GetPowerWheelPowers_Parms.PowerList, 0xC );
};

// Function SFXGame.SFXPowerManager.StartFirstTimeDelay
// [0x00020002] 
// Parameters infos:

void USFXPowerManager::StartFirstTimeDelay ( )
{
	static UFunction* pFnStartFirstTimeDelay = NULL;

	if ( ! pFnStartFirstTimeDelay )
		pFnStartFirstTimeDelay = (UFunction*) UObject::GObjObjects()->Data[ 39055 ];

	USFXPowerManager_execStartFirstTimeDelay_Parms StartFirstTimeDelay_Parms;

	this->ProcessEvent ( pFnStartFirstTimeDelay, &StartFirstTimeDelay_Parms, NULL );
};

// Function SFXGame.SFXPowerManager.OnSharedCooldownFinished
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXPowerManager::eventOnSharedCooldownFinished ( )
{
	static UFunction* pFnOnSharedCooldownFinished = NULL;

	if ( ! pFnOnSharedCooldownFinished )
		pFnOnSharedCooldownFinished = (UFunction*) UObject::GObjObjects()->Data[ 39053 ];

	USFXPowerManager_eventOnSharedCooldownFinished_Parms OnSharedCooldownFinished_Parms;

	this->ProcessEvent ( pFnOnSharedCooldownFinished, &OnSharedCooldownFinished_Parms, NULL );
};

// Function SFXGame.SFXPowerManager.IsEvolvedPower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmClassName                    ( CPF_Parm )
// class UClass*                  PowerClass                     ( CPF_Parm | CPF_OutParm )

bool USFXPowerManager::IsEvolvedPower ( struct FName nmClassName, class UClass** PowerClass )
{
	static UFunction* pFnIsEvolvedPower = NULL;

	if ( ! pFnIsEvolvedPower )
		pFnIsEvolvedPower = (UFunction*) UObject::GObjObjects()->Data[ 39044 ];

	USFXPowerManager_execIsEvolvedPower_Parms IsEvolvedPower_Parms;
	memcpy ( &IsEvolvedPower_Parms.nmClassName, &nmClassName, 0x8 );

	this->ProcessEvent ( pFnIsEvolvedPower, &IsEvolvedPower_Parms, NULL );

	if ( PowerClass )
		*PowerClass = IsEvolvedPower_Parms.PowerClass;

	return IsEvolvedPower_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerManager.LoadPowers
// [0x00420002] 
// Parameters infos:
// TArray< struct FPowerSaveInfo > PowerList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerManager::LoadPowers ( TArray< struct FPowerSaveInfo >* PowerList )
{
	static UFunction* pFnLoadPowers = NULL;

	if ( ! pFnLoadPowers )
		pFnLoadPowers = (UFunction*) UObject::GObjObjects()->Data[ 39035 ];

	USFXPowerManager_execLoadPowers_Parms LoadPowers_Parms;

	this->ProcessEvent ( pFnLoadPowers, &LoadPowers_Parms, NULL );

	if ( PowerList )
		memcpy ( PowerList, &LoadPowers_Parms.PowerList, 0xC );
};

// Function SFXGame.SFXPowerManager.SavePowers
// [0x00420002] 
// Parameters infos:
// TArray< struct FPowerSaveInfo > PowerList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerManager::SavePowers ( TArray< struct FPowerSaveInfo >* PowerList )
{
	static UFunction* pFnSavePowers = NULL;

	if ( ! pFnSavePowers )
		pFnSavePowers = (UFunction*) UObject::GObjObjects()->Data[ 39030 ];

	USFXPowerManager_execSavePowers_Parms SavePowers_Parms;

	this->ProcessEvent ( pFnSavePowers, &SavePowers_Parms, NULL );

	if ( PowerList )
		memcpy ( PowerList, &SavePowers_Parms.PowerList, 0xC );
};

// Function SFXGame.SFXPowerManager.Tick
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void USFXPowerManager::Tick ( float fDeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 39028 ];

	USFXPowerManager_execTick_Parms Tick_Parms;
	Tick_Parms.fDeltaTime = fDeltaTime;

	pFnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );

	pFnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXPowerManager.SetSharedCooldownTotal
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fCooldown                      ( CPF_Parm )

void USFXPowerManager::SetSharedCooldownTotal ( float fCooldown )
{
	static UFunction* pFnSetSharedCooldownTotal = NULL;

	if ( ! pFnSetSharedCooldownTotal )
		pFnSetSharedCooldownTotal = (UFunction*) UObject::GObjObjects()->Data[ 39026 ];

	USFXPowerManager_execSetSharedCooldownTotal_Parms SetSharedCooldownTotal_Parms;
	SetSharedCooldownTotal_Parms.fCooldown = fCooldown;

	pFnSetSharedCooldownTotal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSharedCooldownTotal, &SetSharedCooldownTotal_Parms, NULL );

	pFnSetSharedCooldownTotal->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXPowerManager.GetSharedCooldownTotal
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXPowerManager::GetSharedCooldownTotal ( )
{
	static UFunction* pFnGetSharedCooldownTotal = NULL;

	if ( ! pFnGetSharedCooldownTotal )
		pFnGetSharedCooldownTotal = (UFunction*) UObject::GObjObjects()->Data[ 39024 ];

	USFXPowerManager_execGetSharedCooldownTotal_Parms GetSharedCooldownTotal_Parms;

	pFnGetSharedCooldownTotal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSharedCooldownTotal, &GetSharedCooldownTotal_Parms, NULL );

	pFnGetSharedCooldownTotal->FunctionFlags |= 0x400;

	return GetSharedCooldownTotal_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerManager.SetSharedCooldownRemaining
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          fCooldown                      ( CPF_Parm )

void USFXPowerManager::SetSharedCooldownRemaining ( float fCooldown )
{
	static UFunction* pFnSetSharedCooldownRemaining = NULL;

	if ( ! pFnSetSharedCooldownRemaining )
		pFnSetSharedCooldownRemaining = (UFunction*) UObject::GObjObjects()->Data[ 39022 ];

	USFXPowerManager_execSetSharedCooldownRemaining_Parms SetSharedCooldownRemaining_Parms;
	SetSharedCooldownRemaining_Parms.fCooldown = fCooldown;

	pFnSetSharedCooldownRemaining->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSharedCooldownRemaining, &SetSharedCooldownRemaining_Parms, NULL );

	pFnSetSharedCooldownRemaining->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXPowerManager.GetSharedCooldownRemaining
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXPowerManager::GetSharedCooldownRemaining ( )
{
	static UFunction* pFnGetSharedCooldownRemaining = NULL;

	if ( ! pFnGetSharedCooldownRemaining )
		pFnGetSharedCooldownRemaining = (UFunction*) UObject::GObjObjects()->Data[ 39020 ];

	USFXPowerManager_execGetSharedCooldownRemaining_Parms GetSharedCooldownRemaining_Parms;

	pFnGetSharedCooldownRemaining->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSharedCooldownRemaining, &GetSharedCooldownRemaining_Parms, NULL );

	pFnGetSharedCooldownRemaining->FunctionFlags |= 0x400;

	return GetSharedCooldownRemaining_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerManager.HasPowerBeenEvolved
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPower*               Power                          ( CPF_Parm )
// class USFXPower*               EvolvedPower                   ( CPF_Parm | CPF_OutParm )

bool USFXPowerManager::HasPowerBeenEvolved ( class USFXPower* Power, class USFXPower** EvolvedPower )
{
	static UFunction* pFnHasPowerBeenEvolved = NULL;

	if ( ! pFnHasPowerBeenEvolved )
		pFnHasPowerBeenEvolved = (UFunction*) UObject::GObjObjects()->Data[ 39015 ];

	USFXPowerManager_execHasPowerBeenEvolved_Parms HasPowerBeenEvolved_Parms;
	HasPowerBeenEvolved_Parms.Power = Power;

	this->ProcessEvent ( pFnHasPowerBeenEvolved, &HasPowerBeenEvolved_Parms, NULL );

	if ( EvolvedPower )
		*EvolvedPower = HasPowerBeenEvolved_Parms.EvolvedPower;

	return HasPowerBeenEvolved_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerManager.GetCharacterRecordPowers
// [0x00420002] 
// Parameters infos:
// TArray< class USFXPower* >     PowerList                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPowerManager::GetCharacterRecordPowers ( TArray< class USFXPower* >* PowerList )
{
	static UFunction* pFnGetCharacterRecordPowers = NULL;

	if ( ! pFnGetCharacterRecordPowers )
		pFnGetCharacterRecordPowers = (UFunction*) UObject::GObjObjects()->Data[ 39007 ];

	USFXPowerManager_execGetCharacterRecordPowers_Parms GetCharacterRecordPowers_Parms;

	this->ProcessEvent ( pFnGetCharacterRecordPowers, &GetCharacterRecordPowers_Parms, NULL );

	if ( PowerList )
		memcpy ( PowerList, &GetCharacterRecordPowers_Parms.PowerList, 0xC );
};

// Function SFXGame.SFXPowerManager.GetPowerByClass
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXPower*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  PowerClass                     ( CPF_Parm )

class USFXPower* USFXPowerManager::GetPowerByClass ( class UClass* PowerClass )
{
	static UFunction* pFnGetPowerByClass = NULL;

	if ( ! pFnGetPowerByClass )
		pFnGetPowerByClass = (UFunction*) UObject::GObjObjects()->Data[ 39004 ];

	USFXPowerManager_execGetPowerByClass_Parms GetPowerByClass_Parms;
	GetPowerByClass_Parms.PowerClass = PowerClass;

	pFnGetPowerByClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPowerByClass, &GetPowerByClass_Parms, NULL );

	pFnGetPowerByClass->FunctionFlags |= 0x400;

	return GetPowerByClass_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerManager.GetPower
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXPower*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPowerName                    ( CPF_Parm )

class USFXPower* USFXPowerManager::GetPower ( struct FName nmPowerName )
{
	static UFunction* pFnGetPower = NULL;

	if ( ! pFnGetPower )
		pFnGetPower = (UFunction*) UObject::GObjObjects()->Data[ 39001 ];

	USFXPowerManager_execGetPower_Parms GetPower_Parms;
	memcpy ( &GetPower_Parms.nmPowerName, &nmPowerName, 0x8 );

	pFnGetPower->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPower, &GetPower_Parms, NULL );

	pFnGetPower->FunctionFlags |= 0x400;

	return GetPower_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerManager.RemovePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  PowerClass                     ( CPF_Parm )

bool USFXPowerManager::RemovePower ( class UClass* PowerClass )
{
	static UFunction* pFnRemovePower = NULL;

	if ( ! pFnRemovePower )
		pFnRemovePower = (UFunction*) UObject::GObjObjects()->Data[ 38997 ];

	USFXPowerManager_execRemovePower_Parms RemovePower_Parms;
	RemovePower_Parms.PowerClass = PowerClass;

	this->ProcessEvent ( pFnRemovePower, &RemovePower_Parms, NULL );

	return RemovePower_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerManager.AddPowerByClassName
// [0x00020002] 
// Parameters infos:
// class USFXPower*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 PowerClassName                 ( CPF_Parm | CPF_NeedCtorLink )

class USFXPower* USFXPowerManager::AddPowerByClassName ( struct FString PowerClassName )
{
	static UFunction* pFnAddPowerByClassName = NULL;

	if ( ! pFnAddPowerByClassName )
		pFnAddPowerByClassName = (UFunction*) UObject::GObjObjects()->Data[ 38993 ];

	USFXPowerManager_execAddPowerByClassName_Parms AddPowerByClassName_Parms;
	memcpy ( &AddPowerByClassName_Parms.PowerClassName, &PowerClassName, 0xC );

	this->ProcessEvent ( pFnAddPowerByClassName, &AddPowerByClassName_Parms, NULL );

	return AddPowerByClassName_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerManager.AddPower
// [0x00020002] 
// Parameters infos:
// class USFXPower*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  PowerClass                     ( CPF_Parm )

class USFXPower* USFXPowerManager::AddPower ( class UClass* PowerClass )
{
	static UFunction* pFnAddPower = NULL;

	if ( ! pFnAddPower )
		pFnAddPower = (UFunction*) UObject::GObjObjects()->Data[ 38985 ];

	USFXPowerManager_execAddPower_Parms AddPower_Parms;
	AddPower_Parms.PowerClass = PowerClass;

	this->ProcessEvent ( pFnAddPower, &AddPower_Parms, NULL );

	return AddPower_Parms.ReturnValue;
};

// Function SFXGame.SFXOnlineComponentUI.ClearDelegates
// [0x00020002] 
// Parameters infos:

void USFXOnlineComponentUI::ClearDelegates ( )
{
	static UFunction* pFnClearDelegates = NULL;

	if ( ! pFnClearDelegates )
		pFnClearDelegates = (UFunction*) UObject::GObjObjects()->Data[ 58188 ];

	USFXOnlineComponentUI_execClearDelegates_Parms ClearDelegates_Parms;

	this->ProcessEvent ( pFnClearDelegates, &ClearDelegates_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.ShowStore
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FSFXOfferDescriptor > aOffers                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXOnlineComponentUI::eventShowStore ( TArray< struct FSFXOfferDescriptor > aOffers )
{
	static UFunction* pFnShowStore = NULL;

	if ( ! pFnShowStore )
		pFnShowStore = (UFunction*) UObject::GObjObjects()->Data[ 58185 ];

	USFXOnlineComponentUI_eventShowStore_Parms ShowStore_Parms;
	memcpy ( &ShowStore_Parms.aOffers, &aOffers, 0xC );

	this->ProcessEvent ( pFnShowStore, &ShowStore_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.HasCerberusDLC
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned long                  bVal                           ( CPF_Parm )

void USFXOnlineComponentUI::eventHasCerberusDLC ( unsigned long bVal )
{
	static UFunction* pFnHasCerberusDLC = NULL;

	if ( ! pFnHasCerberusDLC )
		pFnHasCerberusDLC = (UFunction*) UObject::GObjObjects()->Data[ 58183 ];

	USFXOnlineComponentUI_eventHasCerberusDLC_Parms HasCerberusDLC_Parms;
	HasCerberusDLC_Parms.bVal = bVal;

	this->ProcessEvent ( pFnHasCerberusDLC, &HasCerberusDLC_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.ClearNotifications
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXOnlineComponentUI::eventClearNotifications ( )
{
	static UFunction* pFnClearNotifications = NULL;

	if ( ! pFnClearNotifications )
		pFnClearNotifications = (UFunction*) UObject::GObjObjects()->Data[ 58182 ];

	USFXOnlineComponentUI_eventClearNotifications_Parms ClearNotifications_Parms;

	this->ProcessEvent ( pFnClearNotifications, &ClearNotifications_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.OnDisplayNotification
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  Type                           ( CPF_Parm )
// struct FString                 MessageData                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Image                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXOnlineComponentUI::eventOnDisplayNotification ( unsigned char Type, struct FString MessageData, struct FString Title, struct FString Image )
{
	static UFunction* pFnOnDisplayNotification = NULL;

	if ( ! pFnOnDisplayNotification )
		pFnOnDisplayNotification = (UFunction*) UObject::GObjObjects()->Data[ 58177 ];

	USFXOnlineComponentUI_eventOnDisplayNotification_Parms OnDisplayNotification_Parms;
	OnDisplayNotification_Parms.Type = Type;
	memcpy ( &OnDisplayNotification_Parms.MessageData, &MessageData, 0xC );
	memcpy ( &OnDisplayNotification_Parms.Title, &Title, 0xC );
	memcpy ( &OnDisplayNotification_Parms.Image, &Image, 0xC );

	this->ProcessEvent ( pFnOnDisplayNotification, &OnDisplayNotification_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.SetState
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// unsigned char                  eState                         ( CPF_Parm )

void USFXOnlineComponentUI::eventSetState ( unsigned char eState )
{
	static UFunction* pFnSetState = NULL;

	if ( ! pFnSetState )
		pFnSetState = (UFunction*) UObject::GObjObjects()->Data[ 58175 ];

	USFXOnlineComponentUI_eventSetState_Parms SetState_Parms;
	SetState_Parms.eState = eState;

	this->ProcessEvent ( pFnSetState, &SetState_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.CloseEANetworking
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXOnlineComponentUI::eventCloseEANetworking ( )
{
	static UFunction* pFnCloseEANetworking = NULL;

	if ( ! pFnCloseEANetworking )
		pFnCloseEANetworking = (UFunction*) UObject::GObjObjects()->Data[ 58174 ];

	USFXOnlineComponentUI_eventCloseEANetworking_Parms CloseEANetworking_Parms;

	this->ProcessEvent ( pFnCloseEANetworking, &CloseEANetworking_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.MessageBoxCallback
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void USFXOnlineComponentUI::MessageBoxCallback ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnMessageBoxCallback = NULL;

	if ( ! pFnMessageBoxCallback )
		pFnMessageBoxCallback = (UFunction*) UObject::GObjObjects()->Data[ 58171 ];

	USFXOnlineComponentUI_execMessageBoxCallback_Parms MessageBoxCallback_Parms;
	MessageBoxCallback_Parms.bAPressed = bAPressed;
	MessageBoxCallback_Parms.Context = Context;

	this->ProcessEvent ( pFnMessageBoxCallback, &MessageBoxCallback_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.SubmitParentEmail
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bContinue                      ( CPF_Parm )
// struct FString                 ParentEmail                    ( CPF_Parm | CPF_NeedCtorLink )

void USFXOnlineComponentUI::SubmitParentEmail ( unsigned long bContinue, struct FString ParentEmail )
{
	static UFunction* pFnSubmitParentEmail = NULL;

	if ( ! pFnSubmitParentEmail )
		pFnSubmitParentEmail = (UFunction*) UObject::GObjObjects()->Data[ 58168 ];

	USFXOnlineComponentUI_execSubmitParentEmail_Parms SubmitParentEmail_Parms;
	SubmitParentEmail_Parms.bContinue = bContinue;
	memcpy ( &SubmitParentEmail_Parms.ParentEmail, &ParentEmail, 0xC );

	pFnSubmitParentEmail->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitParentEmail, &SubmitParentEmail_Parms, NULL );

	pFnSubmitParentEmail->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.SubmitAccountDemographics
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bContinue                      ( CPF_Parm )
// struct FString                 i_sCountryCode                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            BirthDay                       ( CPF_Parm )
// int                            BirthMonth                     ( CPF_Parm )
// int                            BirthYear                      ( CPF_Parm )
// struct FString                 i_sLanguageCode                ( CPF_Parm | CPF_NeedCtorLink )

void USFXOnlineComponentUI::SubmitAccountDemographics ( unsigned long bContinue, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode )
{
	static UFunction* pFnSubmitAccountDemographics = NULL;

	if ( ! pFnSubmitAccountDemographics )
		pFnSubmitAccountDemographics = (UFunction*) UObject::GObjObjects()->Data[ 58161 ];

	USFXOnlineComponentUI_execSubmitAccountDemographics_Parms SubmitAccountDemographics_Parms;
	SubmitAccountDemographics_Parms.bContinue = bContinue;
	memcpy ( &SubmitAccountDemographics_Parms.i_sCountryCode, &i_sCountryCode, 0xC );
	SubmitAccountDemographics_Parms.BirthDay = BirthDay;
	SubmitAccountDemographics_Parms.BirthMonth = BirthMonth;
	SubmitAccountDemographics_Parms.BirthYear = BirthYear;
	memcpy ( &SubmitAccountDemographics_Parms.i_sLanguageCode, &i_sLanguageCode, 0xC );

	pFnSubmitAccountDemographics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitAccountDemographics, &SubmitAccountDemographics_Parms, NULL );

	pFnSubmitAccountDemographics->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.SubmitEmailPasswordMismatch
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Email                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  eReturnCode                    ( CPF_Parm )

void USFXOnlineComponentUI::SubmitEmailPasswordMismatch ( struct FString Email, struct FString Password, unsigned char eReturnCode )
{
	static UFunction* pFnSubmitEmailPasswordMismatch = NULL;

	if ( ! pFnSubmitEmailPasswordMismatch )
		pFnSubmitEmailPasswordMismatch = (UFunction*) UObject::GObjObjects()->Data[ 58157 ];

	USFXOnlineComponentUI_execSubmitEmailPasswordMismatch_Parms SubmitEmailPasswordMismatch_Parms;
	memcpy ( &SubmitEmailPasswordMismatch_Parms.Email, &Email, 0xC );
	memcpy ( &SubmitEmailPasswordMismatch_Parms.Password, &Password, 0xC );
	SubmitEmailPasswordMismatch_Parms.eReturnCode = eReturnCode;

	pFnSubmitEmailPasswordMismatch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitEmailPasswordMismatch, &SubmitEmailPasswordMismatch_Parms, NULL );

	pFnSubmitEmailPasswordMismatch->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.SubmitStore
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< int >                  aiChosen                       ( CPF_Parm | CPF_NeedCtorLink )

void USFXOnlineComponentUI::SubmitStore ( TArray< int > aiChosen )
{
	static UFunction* pFnSubmitStore = NULL;

	if ( ! pFnSubmitStore )
		pFnSubmitStore = (UFunction*) UObject::GObjObjects()->Data[ 58045 ];

	USFXOnlineComponentUI_execSubmitStore_Parms SubmitStore_Parms;
	memcpy ( &SubmitStore_Parms.aiChosen, &aiChosen, 0xC );

	pFnSubmitStore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitStore, &SubmitStore_Parms, NULL );

	pFnSubmitStore->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.SubmitCreateNucleusAccountEx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sEmail                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sPassword                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bEAProducts                    ( CPF_Parm )
// unsigned long                  bThirdParty                    ( CPF_Parm )
// unsigned long                  bBioWareProducts               ( CPF_Parm )
// struct FString                 i_sCountryCode                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            BirthDay                       ( CPF_Parm )
// int                            BirthMonth                     ( CPF_Parm )
// int                            BirthYear                      ( CPF_Parm )
// struct FString                 i_sLanguageCode                ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bSubmit                        ( CPF_Parm )

void USFXOnlineComponentUI::SubmitCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, unsigned long bSubmit )
{
	static UFunction* pFnSubmitCreateNucleusAccountEx = NULL;

	if ( ! pFnSubmitCreateNucleusAccountEx )
		pFnSubmitCreateNucleusAccountEx = (UFunction*) UObject::GObjObjects()->Data[ 58033 ];

	USFXOnlineComponentUI_execSubmitCreateNucleusAccountEx_Parms SubmitCreateNucleusAccountEx_Parms;
	memcpy ( &SubmitCreateNucleusAccountEx_Parms.sEmail, &sEmail, 0xC );
	memcpy ( &SubmitCreateNucleusAccountEx_Parms.sPassword, &sPassword, 0xC );
	SubmitCreateNucleusAccountEx_Parms.bEAProducts = bEAProducts;
	SubmitCreateNucleusAccountEx_Parms.bThirdParty = bThirdParty;
	SubmitCreateNucleusAccountEx_Parms.bBioWareProducts = bBioWareProducts;
	memcpy ( &SubmitCreateNucleusAccountEx_Parms.i_sCountryCode, &i_sCountryCode, 0xC );
	SubmitCreateNucleusAccountEx_Parms.BirthDay = BirthDay;
	SubmitCreateNucleusAccountEx_Parms.BirthMonth = BirthMonth;
	SubmitCreateNucleusAccountEx_Parms.BirthYear = BirthYear;
	memcpy ( &SubmitCreateNucleusAccountEx_Parms.i_sLanguageCode, &i_sLanguageCode, 0xC );
	SubmitCreateNucleusAccountEx_Parms.bSubmit = bSubmit;

	pFnSubmitCreateNucleusAccountEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitCreateNucleusAccountEx, &SubmitCreateNucleusAccountEx_Parms, NULL );

	pFnSubmitCreateNucleusAccountEx->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.SubmitCerberusWelcomeMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXOnlineComponentUI::SubmitCerberusWelcomeMessage ( )
{
	static UFunction* pFnSubmitCerberusWelcomeMessage = NULL;

	if ( ! pFnSubmitCerberusWelcomeMessage )
		pFnSubmitCerberusWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 58032 ];

	USFXOnlineComponentUI_execSubmitCerberusWelcomeMessage_Parms SubmitCerberusWelcomeMessage_Parms;

	pFnSubmitCerberusWelcomeMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitCerberusWelcomeMessage, &SubmitCerberusWelcomeMessage_Parms, NULL );

	pFnSubmitCerberusWelcomeMessage->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.SubmitRedeemCode
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bContinue                      ( CPF_Parm )
// struct FString                 i_sCode                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXOnlineComponentUI::SubmitRedeemCode ( unsigned long bContinue, struct FString i_sCode )
{
	static UFunction* pFnSubmitRedeemCode = NULL;

	if ( ! pFnSubmitRedeemCode )
		pFnSubmitRedeemCode = (UFunction*) UObject::GObjObjects()->Data[ 58029 ];

	USFXOnlineComponentUI_execSubmitRedeemCode_Parms SubmitRedeemCode_Parms;
	SubmitRedeemCode_Parms.bContinue = bContinue;
	memcpy ( &SubmitRedeemCode_Parms.i_sCode, &i_sCode, 0xC );

	pFnSubmitRedeemCode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitRedeemCode, &SubmitRedeemCode_Parms, NULL );

	pFnSubmitRedeemCode->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.SubmitCerberusIntro
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eReturnCode                    ( CPF_Parm )

void USFXOnlineComponentUI::SubmitCerberusIntro ( unsigned char eReturnCode )
{
	static UFunction* pFnSubmitCerberusIntro = NULL;

	if ( ! pFnSubmitCerberusIntro )
		pFnSubmitCerberusIntro = (UFunction*) UObject::GObjObjects()->Data[ 58026 ];

	USFXOnlineComponentUI_execSubmitCerberusIntro_Parms SubmitCerberusIntro_Parms;
	SubmitCerberusIntro_Parms.eReturnCode = eReturnCode;

	pFnSubmitCerberusIntro->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitCerberusIntro, &SubmitCerberusIntro_Parms, NULL );

	pFnSubmitCerberusIntro->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.SubmitNucleusWelcomeMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXOnlineComponentUI::SubmitNucleusWelcomeMessage ( )
{
	static UFunction* pFnSubmitNucleusWelcomeMessage = NULL;

	if ( ! pFnSubmitNucleusWelcomeMessage )
		pFnSubmitNucleusWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 58025 ];

	USFXOnlineComponentUI_execSubmitNucleusWelcomeMessage_Parms SubmitNucleusWelcomeMessage_Parms;

	pFnSubmitNucleusWelcomeMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitNucleusWelcomeMessage, &SubmitNucleusWelcomeMessage_Parms, NULL );

	pFnSubmitNucleusWelcomeMessage->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.SubmitTermsOfService
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAccept                        ( CPF_Parm )

void USFXOnlineComponentUI::SubmitTermsOfService ( unsigned long bAccept )
{
	static UFunction* pFnSubmitTermsOfService = NULL;

	if ( ! pFnSubmitTermsOfService )
		pFnSubmitTermsOfService = (UFunction*) UObject::GObjObjects()->Data[ 58023 ];

	USFXOnlineComponentUI_execSubmitTermsOfService_Parms SubmitTermsOfService_Parms;
	SubmitTermsOfService_Parms.bAccept = bAccept;

	pFnSubmitTermsOfService->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitTermsOfService, &SubmitTermsOfService_Parms, NULL );

	pFnSubmitTermsOfService->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.SubmitCreateNucleusAccount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sEmail                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sPassword                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bEAProducts                    ( CPF_Parm )
// unsigned long                  bThirdParty                    ( CPF_Parm )
// unsigned long                  bRegisterProduct               ( CPF_Parm )
// unsigned long                  bBioWareProducts               ( CPF_Parm )
// unsigned long                  bSubmit                        ( CPF_Parm )

void USFXOnlineComponentUI::SubmitCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bSubmit )
{
	static UFunction* pFnSubmitCreateNucleusAccount = NULL;

	if ( ! pFnSubmitCreateNucleusAccount )
		pFnSubmitCreateNucleusAccount = (UFunction*) UObject::GObjObjects()->Data[ 58015 ];

	USFXOnlineComponentUI_execSubmitCreateNucleusAccount_Parms SubmitCreateNucleusAccount_Parms;
	memcpy ( &SubmitCreateNucleusAccount_Parms.sEmail, &sEmail, 0xC );
	memcpy ( &SubmitCreateNucleusAccount_Parms.sPassword, &sPassword, 0xC );
	SubmitCreateNucleusAccount_Parms.bEAProducts = bEAProducts;
	SubmitCreateNucleusAccount_Parms.bThirdParty = bThirdParty;
	SubmitCreateNucleusAccount_Parms.bRegisterProduct = bRegisterProduct;
	SubmitCreateNucleusAccount_Parms.bBioWareProducts = bBioWareProducts;
	SubmitCreateNucleusAccount_Parms.bSubmit = bSubmit;

	pFnSubmitCreateNucleusAccount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitCreateNucleusAccount, &SubmitCreateNucleusAccount_Parms, NULL );

	pFnSubmitCreateNucleusAccount->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.SubmitMessageBox
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  eReturnEnum                    ( CPF_Parm )

void USFXOnlineComponentUI::SubmitMessageBox ( unsigned char eReturnEnum )
{
	static UFunction* pFnSubmitMessageBox = NULL;

	if ( ! pFnSubmitMessageBox )
		pFnSubmitMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 58012 ];

	USFXOnlineComponentUI_execSubmitMessageBox_Parms SubmitMessageBox_Parms;
	SubmitMessageBox_Parms.eReturnEnum = eReturnEnum;

	pFnSubmitMessageBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitMessageBox, &SubmitMessageBox_Parms, NULL );

	pFnSubmitMessageBox->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.SubmitNucleusLogin
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Email                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// unsigned char                  eReturnCode                    ( CPF_Parm )

void USFXOnlineComponentUI::SubmitNucleusLogin ( struct FString Email, struct FString Password, unsigned char eReturnCode )
{
	static UFunction* pFnSubmitNucleusLogin = NULL;

	if ( ! pFnSubmitNucleusLogin )
		pFnSubmitNucleusLogin = (UFunction*) UObject::GObjObjects()->Data[ 58007 ];

	USFXOnlineComponentUI_execSubmitNucleusLogin_Parms SubmitNucleusLogin_Parms;
	memcpy ( &SubmitNucleusLogin_Parms.Email, &Email, 0xC );
	memcpy ( &SubmitNucleusLogin_Parms.Password, &Password, 0xC );
	SubmitNucleusLogin_Parms.eReturnCode = eReturnCode;

	pFnSubmitNucleusLogin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitNucleusLogin, &SubmitNucleusLogin_Parms, NULL );

	pFnSubmitNucleusLogin->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.SubmitIntroPage
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bContinue                      ( CPF_Parm )

void USFXOnlineComponentUI::SubmitIntroPage ( unsigned long bContinue )
{
	static UFunction* pFnSubmitIntroPage = NULL;

	if ( ! pFnSubmitIntroPage )
		pFnSubmitIntroPage = (UFunction*) UObject::GObjObjects()->Data[ 58005 ];

	USFXOnlineComponentUI_execSubmitIntroPage_Parms SubmitIntroPage_Parms;
	SubmitIntroPage_Parms.bContinue = bContinue;

	pFnSubmitIntroPage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSubmitIntroPage, &SubmitIntroPage_Parms, NULL );

	pFnSubmitIntroPage->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowParentEmail
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXOnlineComponentUI::ShowParentEmail ( )
{
	static UFunction* pFnShowParentEmail = NULL;

	if ( ! pFnShowParentEmail )
		pFnShowParentEmail = (UFunction*) UObject::GObjObjects()->Data[ 58004 ];

	USFXOnlineComponentUI_execShowParentEmail_Parms ShowParentEmail_Parms;

	pFnShowParentEmail->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowParentEmail, &ShowParentEmail_Parms, NULL );

	pFnShowParentEmail->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowAccountDemographics
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// TArray< struct FString >       m_CountryCodeList              ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FString >       m_CountryDisplayList           ( CPF_Parm | CPF_NeedCtorLink )

void USFXOnlineComponentUI::ShowAccountDemographics ( TArray< struct FString > m_CountryCodeList, TArray< struct FString > m_CountryDisplayList )
{
	static UFunction* pFnShowAccountDemographics = NULL;

	if ( ! pFnShowAccountDemographics )
		pFnShowAccountDemographics = (UFunction*) UObject::GObjObjects()->Data[ 57999 ];

	USFXOnlineComponentUI_execShowAccountDemographics_Parms ShowAccountDemographics_Parms;
	memcpy ( &ShowAccountDemographics_Parms.m_CountryCodeList, &m_CountryCodeList, 0xC );
	memcpy ( &ShowAccountDemographics_Parms.m_CountryDisplayList, &m_CountryDisplayList, 0xC );

	pFnShowAccountDemographics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowAccountDemographics, &ShowAccountDemographics_Parms, NULL );

	pFnShowAccountDemographics->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowEmailPasswordMismatch
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Email                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )

void USFXOnlineComponentUI::ShowEmailPasswordMismatch ( struct FString Email, struct FString Password )
{
	static UFunction* pFnShowEmailPasswordMismatch = NULL;

	if ( ! pFnShowEmailPasswordMismatch )
		pFnShowEmailPasswordMismatch = (UFunction*) UObject::GObjObjects()->Data[ 57996 ];

	USFXOnlineComponentUI_execShowEmailPasswordMismatch_Parms ShowEmailPasswordMismatch_Parms;
	memcpy ( &ShowEmailPasswordMismatch_Parms.Email, &Email, 0xC );
	memcpy ( &ShowEmailPasswordMismatch_Parms.Password, &Password, 0xC );

	pFnShowEmailPasswordMismatch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowEmailPasswordMismatch, &ShowEmailPasswordMismatch_Parms, NULL );

	pFnShowEmailPasswordMismatch->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowCreateNucleusAccountEx
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sEmail                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sPassword                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bEAProducts                    ( CPF_Parm )
// unsigned long                  bThirdParty                    ( CPF_Parm )
// unsigned long                  bBioWareProducts               ( CPF_Parm )
// struct FString                 i_sCountryCode                 ( CPF_Parm | CPF_NeedCtorLink )
// int                            BirthDay                       ( CPF_Parm )
// int                            BirthMonth                     ( CPF_Parm )
// int                            BirthYear                      ( CPF_Parm )
// struct FString                 i_sLanguageCode                ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FString >       m_CountryCodeList              ( CPF_Parm | CPF_NeedCtorLink )
// TArray< struct FString >       m_CountryDisplayList           ( CPF_Parm | CPF_NeedCtorLink )

void USFXOnlineComponentUI::ShowCreateNucleusAccountEx ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bBioWareProducts, struct FString i_sCountryCode, int BirthDay, int BirthMonth, int BirthYear, struct FString i_sLanguageCode, TArray< struct FString > m_CountryCodeList, TArray< struct FString > m_CountryDisplayList )
{
	static UFunction* pFnShowCreateNucleusAccountEx = NULL;

	if ( ! pFnShowCreateNucleusAccountEx )
		pFnShowCreateNucleusAccountEx = (UFunction*) UObject::GObjObjects()->Data[ 57981 ];

	USFXOnlineComponentUI_execShowCreateNucleusAccountEx_Parms ShowCreateNucleusAccountEx_Parms;
	memcpy ( &ShowCreateNucleusAccountEx_Parms.sEmail, &sEmail, 0xC );
	memcpy ( &ShowCreateNucleusAccountEx_Parms.sPassword, &sPassword, 0xC );
	ShowCreateNucleusAccountEx_Parms.bEAProducts = bEAProducts;
	ShowCreateNucleusAccountEx_Parms.bThirdParty = bThirdParty;
	ShowCreateNucleusAccountEx_Parms.bBioWareProducts = bBioWareProducts;
	memcpy ( &ShowCreateNucleusAccountEx_Parms.i_sCountryCode, &i_sCountryCode, 0xC );
	ShowCreateNucleusAccountEx_Parms.BirthDay = BirthDay;
	ShowCreateNucleusAccountEx_Parms.BirthMonth = BirthMonth;
	ShowCreateNucleusAccountEx_Parms.BirthYear = BirthYear;
	memcpy ( &ShowCreateNucleusAccountEx_Parms.i_sLanguageCode, &i_sLanguageCode, 0xC );
	memcpy ( &ShowCreateNucleusAccountEx_Parms.m_CountryCodeList, &m_CountryCodeList, 0xC );
	memcpy ( &ShowCreateNucleusAccountEx_Parms.m_CountryDisplayList, &m_CountryDisplayList, 0xC );

	pFnShowCreateNucleusAccountEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowCreateNucleusAccountEx, &ShowCreateNucleusAccountEx_Parms, NULL );

	pFnShowCreateNucleusAccountEx->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowCerberusWelcomeMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXOnlineComponentUI::ShowCerberusWelcomeMessage ( )
{
	static UFunction* pFnShowCerberusWelcomeMessage = NULL;

	if ( ! pFnShowCerberusWelcomeMessage )
		pFnShowCerberusWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 57980 ];

	USFXOnlineComponentUI_execShowCerberusWelcomeMessage_Parms ShowCerberusWelcomeMessage_Parms;

	pFnShowCerberusWelcomeMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowCerberusWelcomeMessage, &ShowCerberusWelcomeMessage_Parms, NULL );

	pFnShowCerberusWelcomeMessage->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowRedeemCode
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXOnlineComponentUI::ShowRedeemCode ( )
{
	static UFunction* pFnShowRedeemCode = NULL;

	if ( ! pFnShowRedeemCode )
		pFnShowRedeemCode = (UFunction*) UObject::GObjObjects()->Data[ 57979 ];

	USFXOnlineComponentUI_execShowRedeemCode_Parms ShowRedeemCode_Parms;

	pFnShowRedeemCode->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowRedeemCode, &ShowRedeemCode_Parms, NULL );

	pFnShowRedeemCode->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowCerberusIntro
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXOnlineComponentUI::ShowCerberusIntro ( )
{
	static UFunction* pFnShowCerberusIntro = NULL;

	if ( ! pFnShowCerberusIntro )
		pFnShowCerberusIntro = (UFunction*) UObject::GObjObjects()->Data[ 57978 ];

	USFXOnlineComponentUI_execShowCerberusIntro_Parms ShowCerberusIntro_Parms;

	pFnShowCerberusIntro->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowCerberusIntro, &ShowCerberusIntro_Parms, NULL );

	pFnShowCerberusIntro->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowNucleusWelcomeMessage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXOnlineComponentUI::ShowNucleusWelcomeMessage ( )
{
	static UFunction* pFnShowNucleusWelcomeMessage = NULL;

	if ( ! pFnShowNucleusWelcomeMessage )
		pFnShowNucleusWelcomeMessage = (UFunction*) UObject::GObjObjects()->Data[ 57977 ];

	USFXOnlineComponentUI_execShowNucleusWelcomeMessage_Parms ShowNucleusWelcomeMessage_Parms;

	pFnShowNucleusWelcomeMessage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowNucleusWelcomeMessage, &ShowNucleusWelcomeMessage_Parms, NULL );

	pFnShowNucleusWelcomeMessage->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowTermsOfService
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 i_sTermsOfService              ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bTOSChanged                    ( CPF_OptionalParm | CPF_Parm )

void USFXOnlineComponentUI::ShowTermsOfService ( struct FString i_sTermsOfService, unsigned long bTOSChanged )
{
	static UFunction* pFnShowTermsOfService = NULL;

	if ( ! pFnShowTermsOfService )
		pFnShowTermsOfService = (UFunction*) UObject::GObjObjects()->Data[ 57974 ];

	USFXOnlineComponentUI_execShowTermsOfService_Parms ShowTermsOfService_Parms;
	memcpy ( &ShowTermsOfService_Parms.i_sTermsOfService, &i_sTermsOfService, 0xC );
	ShowTermsOfService_Parms.bTOSChanged = bTOSChanged;

	pFnShowTermsOfService->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowTermsOfService, &ShowTermsOfService_Parms, NULL );

	pFnShowTermsOfService->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowCreateNucleusAccount
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sEmail                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sPassword                      ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bEAProducts                    ( CPF_Parm )
// unsigned long                  bThirdParty                    ( CPF_Parm )
// unsigned long                  bRegisterProduct               ( CPF_Parm )
// unsigned long                  bBioWareProducts               ( CPF_Parm )
// unsigned long                  bUnderage                      ( CPF_Parm )

void USFXOnlineComponentUI::ShowCreateNucleusAccount ( struct FString sEmail, struct FString sPassword, unsigned long bEAProducts, unsigned long bThirdParty, unsigned long bRegisterProduct, unsigned long bBioWareProducts, unsigned long bUnderage )
{
	static UFunction* pFnShowCreateNucleusAccount = NULL;

	if ( ! pFnShowCreateNucleusAccount )
		pFnShowCreateNucleusAccount = (UFunction*) UObject::GObjObjects()->Data[ 57966 ];

	USFXOnlineComponentUI_execShowCreateNucleusAccount_Parms ShowCreateNucleusAccount_Parms;
	memcpy ( &ShowCreateNucleusAccount_Parms.sEmail, &sEmail, 0xC );
	memcpy ( &ShowCreateNucleusAccount_Parms.sPassword, &sPassword, 0xC );
	ShowCreateNucleusAccount_Parms.bEAProducts = bEAProducts;
	ShowCreateNucleusAccount_Parms.bThirdParty = bThirdParty;
	ShowCreateNucleusAccount_Parms.bRegisterProduct = bRegisterProduct;
	ShowCreateNucleusAccount_Parms.bBioWareProducts = bBioWareProducts;
	ShowCreateNucleusAccount_Parms.bUnderage = bUnderage;

	pFnShowCreateNucleusAccount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowCreateNucleusAccount, &ShowCreateNucleusAccount_Parms, NULL );

	pFnShowCreateNucleusAccount->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowMessageBoxWait
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXOnlineComponentUI::ShowMessageBoxWait ( )
{
	static UFunction* pFnShowMessageBoxWait = NULL;

	if ( ! pFnShowMessageBoxWait )
		pFnShowMessageBoxWait = (UFunction*) UObject::GObjObjects()->Data[ 57962 ];

	USFXOnlineComponentUI_execShowMessageBoxWait_Parms ShowMessageBoxWait_Parms;

	pFnShowMessageBoxWait->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowMessageBoxWait, &ShowMessageBoxWait_Parms, NULL );

	pFnShowMessageBoxWait->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowMessageBox
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 sTitle                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sButton1Text                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sButton2Text                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sButton3Text                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void USFXOnlineComponentUI::ShowMessageBox ( struct FString sTitle, struct FString sMessage, struct FString sButton1Text, struct FString sButton2Text, struct FString sButton3Text )
{
	static UFunction* pFnShowMessageBox = NULL;

	if ( ! pFnShowMessageBox )
		pFnShowMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 57956 ];

	USFXOnlineComponentUI_execShowMessageBox_Parms ShowMessageBox_Parms;
	memcpy ( &ShowMessageBox_Parms.sTitle, &sTitle, 0xC );
	memcpy ( &ShowMessageBox_Parms.sMessage, &sMessage, 0xC );
	memcpy ( &ShowMessageBox_Parms.sButton1Text, &sButton1Text, 0xC );
	memcpy ( &ShowMessageBox_Parms.sButton2Text, &sButton2Text, 0xC );
	memcpy ( &ShowMessageBox_Parms.sButton3Text, &sButton3Text, 0xC );

	pFnShowMessageBox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowMessageBox, &ShowMessageBox_Parms, NULL );

	pFnShowMessageBox->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowNucleusLogin
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FString                 Email                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Password                       ( CPF_Parm | CPF_NeedCtorLink )
// int                            eScreenState                   ( CPF_Parm )

void USFXOnlineComponentUI::ShowNucleusLogin ( struct FString Email, struct FString Password, int eScreenState )
{
	static UFunction* pFnShowNucleusLogin = NULL;

	if ( ! pFnShowNucleusLogin )
		pFnShowNucleusLogin = (UFunction*) UObject::GObjObjects()->Data[ 57952 ];

	USFXOnlineComponentUI_execShowNucleusLogin_Parms ShowNucleusLogin_Parms;
	memcpy ( &ShowNucleusLogin_Parms.Email, &Email, 0xC );
	memcpy ( &ShowNucleusLogin_Parms.Password, &Password, 0xC );
	ShowNucleusLogin_Parms.eScreenState = eScreenState;

	pFnShowNucleusLogin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowNucleusLogin, &ShowNucleusLogin_Parms, NULL );

	pFnShowNucleusLogin->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ShowIntroPage
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXOnlineComponentUI::ShowIntroPage ( )
{
	static UFunction* pFnShowIntroPage = NULL;

	if ( ! pFnShowIntroPage )
		pFnShowIntroPage = (UFunction*) UObject::GObjObjects()->Data[ 57951 ];

	USFXOnlineComponentUI_execShowIntroPage_Parms ShowIntroPage_Parms;

	pFnShowIntroPage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowIntroPage, &ShowIntroPage_Parms, NULL );

	pFnShowIntroPage->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ExternalCallback_ShowStore
// [0x00120000] 
// Parameters infos:
// TArray< struct FSFXOfferDescriptor > aOffers                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXOnlineComponentUI::ExternalCallback_ShowStore ( TArray< struct FSFXOfferDescriptor > aOffers )
{
	static UFunction* pFnExternalCallback_ShowStore = NULL;

	if ( ! pFnExternalCallback_ShowStore )
		pFnExternalCallback_ShowStore = (UFunction*) UObject::GObjObjects()->Data[ 57906 ];

	USFXOnlineComponentUI_execExternalCallback_ShowStore_Parms ExternalCallback_ShowStore_Parms;
	memcpy ( &ExternalCallback_ShowStore_Parms.aOffers, &aOffers, 0xC );

	this->ProcessEvent ( pFnExternalCallback_ShowStore, &ExternalCallback_ShowStore_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.ExternalCallback_HasCerberusDLC
// [0x00120000] 
// Parameters infos:
// unsigned long                  bVal                           ( CPF_Parm )

void USFXOnlineComponentUI::ExternalCallback_HasCerberusDLC ( unsigned long bVal )
{
	static UFunction* pFnExternalCallback_HasCerberusDLC = NULL;

	if ( ! pFnExternalCallback_HasCerberusDLC )
		pFnExternalCallback_HasCerberusDLC = (UFunction*) UObject::GObjObjects()->Data[ 57907 ];

	USFXOnlineComponentUI_execExternalCallback_HasCerberusDLC_Parms ExternalCallback_HasCerberusDLC_Parms;
	ExternalCallback_HasCerberusDLC_Parms.bVal = bVal;

	this->ProcessEvent ( pFnExternalCallback_HasCerberusDLC, &ExternalCallback_HasCerberusDLC_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.ExternalCallback_CloseEANetworking
// [0x00120000] 
// Parameters infos:

void USFXOnlineComponentUI::ExternalCallback_CloseEANetworking ( )
{
	static UFunction* pFnExternalCallback_CloseEANetworking = NULL;

	if ( ! pFnExternalCallback_CloseEANetworking )
		pFnExternalCallback_CloseEANetworking = (UFunction*) UObject::GObjObjects()->Data[ 57908 ];

	USFXOnlineComponentUI_execExternalCallback_CloseEANetworking_Parms ExternalCallback_CloseEANetworking_Parms;

	this->ProcessEvent ( pFnExternalCallback_CloseEANetworking, &ExternalCallback_CloseEANetworking_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.ExternalCallback_SetState
// [0x00120000] 
// Parameters infos:
// unsigned char                  eState                         ( CPF_Parm )

void USFXOnlineComponentUI::ExternalCallback_SetState ( unsigned char eState )
{
	static UFunction* pFnExternalCallback_SetState = NULL;

	if ( ! pFnExternalCallback_SetState )
		pFnExternalCallback_SetState = (UFunction*) UObject::GObjObjects()->Data[ 57909 ];

	USFXOnlineComponentUI_execExternalCallback_SetState_Parms ExternalCallback_SetState_Parms;
	ExternalCallback_SetState_Parms.eState = eState;

	this->ProcessEvent ( pFnExternalCallback_SetState, &ExternalCallback_SetState_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.ExternalCallback_ClearNotifications
// [0x00120000] 
// Parameters infos:

void USFXOnlineComponentUI::ExternalCallback_ClearNotifications ( )
{
	static UFunction* pFnExternalCallback_ClearNotifications = NULL;

	if ( ! pFnExternalCallback_ClearNotifications )
		pFnExternalCallback_ClearNotifications = (UFunction*) UObject::GObjObjects()->Data[ 57910 ];

	USFXOnlineComponentUI_execExternalCallback_ClearNotifications_Parms ExternalCallback_ClearNotifications_Parms;

	this->ProcessEvent ( pFnExternalCallback_ClearNotifications, &ExternalCallback_ClearNotifications_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.ExternalCallback_OnDisplayNotification
// [0x00120000] 
// Parameters infos:
// unsigned char                  Type                           ( CPF_Parm )
// struct FString                 MessageData                    ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Title                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 Image                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXOnlineComponentUI::ExternalCallback_OnDisplayNotification ( unsigned char Type, struct FString MessageData, struct FString Title, struct FString Image )
{
	static UFunction* pFnExternalCallback_OnDisplayNotification = NULL;

	if ( ! pFnExternalCallback_OnDisplayNotification )
		pFnExternalCallback_OnDisplayNotification = (UFunction*) UObject::GObjObjects()->Data[ 57911 ];

	USFXOnlineComponentUI_execExternalCallback_OnDisplayNotification_Parms ExternalCallback_OnDisplayNotification_Parms;
	ExternalCallback_OnDisplayNotification_Parms.Type = Type;
	memcpy ( &ExternalCallback_OnDisplayNotification_Parms.MessageData, &MessageData, 0xC );
	memcpy ( &ExternalCallback_OnDisplayNotification_Parms.Title, &Title, 0xC );
	memcpy ( &ExternalCallback_OnDisplayNotification_Parms.Image, &Image, 0xC );

	this->ProcessEvent ( pFnExternalCallback_OnDisplayNotification, &ExternalCallback_OnDisplayNotification_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.AcceptTOS
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bAccept                        ( CPF_Parm )

void USFXOnlineComponentUI::AcceptTOS ( unsigned long bAccept )
{
	static UFunction* pFnAcceptTOS = NULL;

	if ( ! pFnAcceptTOS )
		pFnAcceptTOS = (UFunction*) UObject::GObjObjects()->Data[ 57941 ];

	USFXOnlineComponentUI_execAcceptTOS_Parms AcceptTOS_Parms;
	AcceptTOS_Parms.bAccept = bAccept;

	pFnAcceptTOS->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAcceptTOS, &AcceptTOS_Parms, NULL );

	pFnAcceptTOS->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.DownloadContent
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned long                  bCerberusContent               ( CPF_Parm )

void USFXOnlineComponentUI::DownloadContent ( unsigned long bCerberusContent )
{
	static UFunction* pFnDownloadContent = NULL;

	if ( ! pFnDownloadContent )
		pFnDownloadContent = (UFunction*) UObject::GObjObjects()->Data[ 57939 ];

	USFXOnlineComponentUI_execDownloadContent_Parms DownloadContent_Parms;
	DownloadContent_Parms.bCerberusContent = bCerberusContent;

	pFnDownloadContent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDownloadContent, &DownloadContent_Parms, NULL );

	pFnDownloadContent->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.Disconnect
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXOnlineComponentUI::Disconnect ( )
{
	static UFunction* pFnDisconnect = NULL;

	if ( ! pFnDisconnect )
		pFnDisconnect = (UFunction*) UObject::GObjObjects()->Data[ 57938 ];

	USFXOnlineComponentUI_execDisconnect_Parms Disconnect_Parms;

	pFnDisconnect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisconnect, &Disconnect_Parms, NULL );

	pFnDisconnect->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.Connect
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// unsigned char                  connectMode                    ( CPF_Parm )

void USFXOnlineComponentUI::Connect ( unsigned char connectMode )
{
	static UFunction* pFnConnect = NULL;

	if ( ! pFnConnect )
		pFnConnect = (UFunction*) UObject::GObjObjects()->Data[ 57936 ];

	USFXOnlineComponentUI_execConnect_Parms Connect_Parms;
	Connect_Parms.connectMode = connectMode;

	pFnConnect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnConnect, &Connect_Parms, NULL );

	pFnConnect->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.ClearGui
// [0x00020002] 
// Parameters infos:

void USFXOnlineComponentUI::ClearGui ( )
{
	static UFunction* pFnClearGui = NULL;

	if ( ! pFnClearGui )
		pFnClearGui = (UFunction*) UObject::GObjObjects()->Data[ 57935 ];

	USFXOnlineComponentUI_execClearGui_Parms ClearGui_Parms;

	this->ProcessEvent ( pFnClearGui, &ClearGui_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.SetGui
// [0x00020002] 
// Parameters infos:
// class USFXSFHandler_EANetworking* i_NetworkingGUI                ( CPF_Parm )

void USFXOnlineComponentUI::SetGui ( class USFXSFHandler_EANetworking* i_NetworkingGUI )
{
	static UFunction* pFnSetGui = NULL;

	if ( ! pFnSetGui )
		pFnSetGui = (UFunction*) UObject::GObjObjects()->Data[ 57920 ];

	USFXOnlineComponentUI_execSetGui_Parms SetGui_Parms;
	SetGui_Parms.i_NetworkingGUI = i_NetworkingGUI;

	this->ProcessEvent ( pFnSetGui, &SetGui_Parms, NULL );
};

// Function SFXGame.SFXOnlineComponentUI.OnTick
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:
// class USFXOnlineEvent*         oEvent                         ( CPF_Parm )

void USFXOnlineComponentUI::OnTick ( class USFXOnlineEvent* oEvent )
{
	static UFunction* pFnOnTick = NULL;

	if ( ! pFnOnTick )
		pFnOnTick = (UFunction*) UObject::GObjObjects()->Data[ 57918 ];

	USFXOnlineComponentUI_execOnTick_Parms OnTick_Parms;
	OnTick_Parms.oEvent = oEvent;

	pFnOnTick->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnTick, &OnTick_Parms, NULL );

	pFnOnTick->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.GetAPIName
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName USFXOnlineComponentUI::GetAPIName ( )
{
	static UFunction* pFnGetAPIName = NULL;

	if ( ! pFnGetAPIName )
		pFnGetAPIName = (UFunction*) UObject::GObjObjects()->Data[ 57916 ];

	USFXOnlineComponentUI_execGetAPIName_Parms GetAPIName_Parms;

	pFnGetAPIName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAPIName, &GetAPIName_Parms, NULL );

	pFnGetAPIName->FunctionFlags |= 0x400;

	return GetAPIName_Parms.ReturnValue;
};

// Function SFXGame.SFXOnlineComponentUI.OnRelease
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void USFXOnlineComponentUI::OnRelease ( )
{
	static UFunction* pFnOnRelease = NULL;

	if ( ! pFnOnRelease )
		pFnOnRelease = (UFunction*) UObject::GObjObjects()->Data[ 57915 ];

	USFXOnlineComponentUI_execOnRelease_Parms OnRelease_Parms;

	pFnOnRelease->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnRelease, &OnRelease_Parms, NULL );

	pFnOnRelease->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXOnlineComponentUI.OnInitialize
// [0x00020400] ( FUNC_Native )
// Parameters infos:
// class USFXOnlineSubsystem*     oOnlineSubsystem               ( CPF_Parm )

void USFXOnlineComponentUI::OnInitialize ( class USFXOnlineSubsystem* oOnlineSubsystem )
{
	static UFunction* pFnOnInitialize = NULL;

	if ( ! pFnOnInitialize )
		pFnOnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 57913 ];

	USFXOnlineComponentUI_execOnInitialize_Parms OnInitialize_Parms;
	OnInitialize_Parms.oOnlineSubsystem = oOnlineSubsystem;

	pFnOnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnInitialize, &OnInitialize_Parms, NULL );

	pFnOnInitialize->FunctionFlags |= 0x400;
};

// Function SFXGame.SFXAI_Core.CanCustomActionTerminateEarly
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::CanCustomActionTerminateEarly ( )
{
	static UFunction* pFnCanCustomActionTerminateEarly = NULL;

	if ( ! pFnCanCustomActionTerminateEarly )
		pFnCanCustomActionTerminateEarly = (UFunction*) UObject::GObjObjects()->Data[ 52631 ];

	ASFXAI_Core_execCanCustomActionTerminateEarly_Parms CanCustomActionTerminateEarly_Parms;

	this->ProcessEvent ( pFnCanCustomActionTerminateEarly, &CanCustomActionTerminateEarly_Parms, NULL );

	return CanCustomActionTerminateEarly_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.NotifyKnockedOutOfCover
// [0x00020000] 
// Parameters infos:

void ASFXAI_Core::NotifyKnockedOutOfCover ( )
{
	static UFunction* pFnNotifyKnockedOutOfCover = NULL;

	if ( ! pFnNotifyKnockedOutOfCover )
		pFnNotifyKnockedOutOfCover = (UFunction*) UObject::GObjObjects()->Data[ 52630 ];

	ASFXAI_Core_execNotifyKnockedOutOfCover_Parms NotifyKnockedOutOfCover_Parms;

	this->ProcessEvent ( pFnNotifyKnockedOutOfCover, &NotifyKnockedOutOfCover_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.FindClosestApproachDistance
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

float ASFXAI_Core::FindClosestApproachDistance ( class AActor* oActor )
{
	static UFunction* pFnFindClosestApproachDistance = NULL;

	if ( ! pFnFindClosestApproachDistance )
		pFnFindClosestApproachDistance = (UFunction*) UObject::GObjObjects()->Data[ 52625 ];

	ASFXAI_Core_execFindClosestApproachDistance_Parms FindClosestApproachDistance_Parms;
	FindClosestApproachDistance_Parms.oActor = oActor;

	this->ProcessEvent ( pFnFindClosestApproachDistance, &FindClosestApproachDistance_Parms, NULL );

	return FindClosestApproachDistance_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.TeleportToActor
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// unsigned long                  bForceTeleport                 ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_Core::TeleportToActor ( class AActor* oActor, unsigned long bForceTeleport )
{
	static UFunction* pFnTeleportToActor = NULL;

	if ( ! pFnTeleportToActor )
		pFnTeleportToActor = (UFunction*) UObject::GObjObjects()->Data[ 52618 ];

	ASFXAI_Core_execTeleportToActor_Parms TeleportToActor_Parms;
	TeleportToActor_Parms.oActor = oActor;
	TeleportToActor_Parms.bForceTeleport = bForceTeleport;

	this->ProcessEvent ( pFnTeleportToActor, &TeleportToActor_Parms, NULL );

	return TeleportToActor_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.IsInWeaponRange
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool ASFXAI_Core::IsInWeaponRange ( class AActor* oTarget )
{
	static UFunction* pFnIsInWeaponRange = NULL;

	if ( ! pFnIsInWeaponRange )
		pFnIsInWeaponRange = (UFunction*) UObject::GObjObjects()->Data[ 52589 ];

	ASFXAI_Core_execIsInWeaponRange_Parms IsInWeaponRange_Parms;
	IsInWeaponRange_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnIsInWeaponRange, &IsInWeaponRange_Parms, NULL );

	return IsInWeaponRange_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.TargetRange
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXAI_Core::TargetRange ( )
{
	static UFunction* pFnTargetRange = NULL;

	if ( ! pFnTargetRange )
		pFnTargetRange = (UFunction*) UObject::GObjObjects()->Data[ 52587 ];

	ASFXAI_Core_execTargetRange_Parms TargetRange_Parms;

	this->ProcessEvent ( pFnTargetRange, &TargetRange_Parms, NULL );

	return TargetRange_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.UsePower
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPower                        ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreSuppression             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreReservation             ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bCheckLOS                      ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_Core::UsePower ( struct FName nmPower, class AActor* oTarget, unsigned long bIgnoreSuppression, unsigned long bIgnoreReservation, unsigned long bCheckLOS )
{
	static UFunction* pFnUsePower = NULL;

	if ( ! pFnUsePower )
		pFnUsePower = (UFunction*) UObject::GObjObjects()->Data[ 52577 ];

	ASFXAI_Core_execUsePower_Parms UsePower_Parms;
	memcpy ( &UsePower_Parms.nmPower, &nmPower, 0x8 );
	UsePower_Parms.oTarget = oTarget;
	UsePower_Parms.bIgnoreSuppression = bIgnoreSuppression;
	UsePower_Parms.bIgnoreReservation = bIgnoreReservation;
	UsePower_Parms.bCheckLOS = bCheckLOS;

	this->ProcessEvent ( pFnUsePower, &UsePower_Parms, NULL );

	return UsePower_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.CanShootWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool ASFXAI_Core::CanShootWeapon ( class AActor* oTarget )
{
	static UFunction* pFnCanShootWeapon = NULL;

	if ( ! pFnCanShootWeapon )
		pFnCanShootWeapon = (UFunction*) UObject::GObjObjects()->Data[ 52574 ];

	ASFXAI_Core_execCanShootWeapon_Parms CanShootWeapon_Parms;
	CanShootWeapon_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnCanShootWeapon, &CanShootWeapon_Parms, NULL );

	return CanShootWeapon_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.CanUsePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPower*               oPower                         ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreDelay                   ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_Core::CanUsePower ( class USFXPower* oPower, class AActor* oTarget, unsigned long bIgnoreDelay )
{
	static UFunction* pFnCanUsePower = NULL;

	if ( ! pFnCanUsePower )
		pFnCanUsePower = (UFunction*) UObject::GObjObjects()->Data[ 52562 ];

	ASFXAI_Core_execCanUsePower_Parms CanUsePower_Parms;
	CanUsePower_Parms.oPower = oPower;
	CanUsePower_Parms.oTarget = oTarget;
	CanUsePower_Parms.bIgnoreDelay = bIgnoreDelay;

	this->ProcessEvent ( pFnCanUsePower, &CanUsePower_Parms, NULL );

	return CanUsePower_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.ChooseDeathPower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPower                        ( CPF_Parm | CPF_OutParm )

bool ASFXAI_Core::ChooseDeathPower ( struct FName* nmPower )
{
	static UFunction* pFnChooseDeathPower = NULL;

	if ( ! pFnChooseDeathPower )
		pFnChooseDeathPower = (UFunction*) UObject::GObjObjects()->Data[ 52555 ];

	ASFXAI_Core_execChooseDeathPower_Parms ChooseDeathPower_Parms;

	this->ProcessEvent ( pFnChooseDeathPower, &ChooseDeathPower_Parms, NULL );

	if ( nmPower )
		memcpy ( nmPower, &ChooseDeathPower_Parms.nmPower, 0x8 );

	return ChooseDeathPower_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.ChooseDefensivePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPower                        ( CPF_Parm | CPF_OutParm )

bool ASFXAI_Core::ChooseDefensivePower ( struct FName* nmPower )
{
	static UFunction* pFnChooseDefensivePower = NULL;

	if ( ! pFnChooseDefensivePower )
		pFnChooseDefensivePower = (UFunction*) UObject::GObjObjects()->Data[ 52548 ];

	ASFXAI_Core_execChooseDefensivePower_Parms ChooseDefensivePower_Parms;

	this->ProcessEvent ( pFnChooseDefensivePower, &ChooseDefensivePower_Parms, NULL );

	if ( nmPower )
		memcpy ( nmPower, &ChooseDefensivePower_Parms.nmPower, 0x8 );

	return ChooseDefensivePower_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.ChooseAttackPower
// [0x00C20002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// struct FName                   nmPower                        ( CPF_Parm | CPF_OutParm )
// int                            nRequiresAttackTicket          ( CPF_Parm | CPF_OutParm )
// struct FVector                 AttackOrigin                   ( CPF_Parm | CPF_OutParm )

bool ASFXAI_Core::ChooseAttackPower ( class AActor* oTarget, struct FName* nmPower, int* nRequiresAttackTicket, struct FVector* AttackOrigin )
{
	static UFunction* pFnChooseAttackPower = NULL;

	if ( ! pFnChooseAttackPower )
		pFnChooseAttackPower = (UFunction*) UObject::GObjObjects()->Data[ 52533 ];

	ASFXAI_Core_execChooseAttackPower_Parms ChooseAttackPower_Parms;
	ChooseAttackPower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnChooseAttackPower, &ChooseAttackPower_Parms, NULL );

	if ( nmPower )
		memcpy ( nmPower, &ChooseAttackPower_Parms.nmPower, 0x8 );

	if ( nRequiresAttackTicket )
		*nRequiresAttackTicket = ChooseAttackPower_Parms.nRequiresAttackTicket;

	if ( AttackOrigin )
		memcpy ( AttackOrigin, &ChooseAttackPower_Parms.AttackOrigin, 0xC );

	return ChooseAttackPower_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.NotifySharedCooldownFinished
// [0x00020000] 
// Parameters infos:

void ASFXAI_Core::NotifySharedCooldownFinished ( )
{
	static UFunction* pFnNotifySharedCooldownFinished = NULL;

	if ( ! pFnNotifySharedCooldownFinished )
		pFnNotifySharedCooldownFinished = (UFunction*) UObject::GObjObjects()->Data[ 52532 ];

	ASFXAI_Core_execNotifySharedCooldownFinished_Parms NotifySharedCooldownFinished_Parms;

	this->ProcessEvent ( pFnNotifySharedCooldownFinished, &NotifySharedCooldownFinished_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.UpdateMovementActions
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void ASFXAI_Core::eventUpdateMovementActions ( )
{
	static UFunction* pFnUpdateMovementActions = NULL;

	if ( ! pFnUpdateMovementActions )
		pFnUpdateMovementActions = (UFunction*) UObject::GObjObjects()->Data[ 52531 ];

	ASFXAI_Core_eventUpdateMovementActions_Parms UpdateMovementActions_Parms;

	this->ProcessEvent ( pFnUpdateMovementActions, &UpdateMovementActions_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.MoveToGoal
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  NewMoveGoal                    ( CPF_Parm )
// float                          NewMoveOffset                  ( CPF_OptionalParm | CPF_Parm )
// struct FScriptDelegate         MoveDelegate                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreAIGoHere                ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_Core::MoveToGoal ( class AActor* NewMoveGoal, float NewMoveOffset, struct FScriptDelegate MoveDelegate, unsigned long bIgnoreAIGoHere )
{
	static UFunction* pFnMoveToGoal = NULL;

	if ( ! pFnMoveToGoal )
		pFnMoveToGoal = (UFunction*) UObject::GObjObjects()->Data[ 52483 ];

	ASFXAI_Core_execMoveToGoal_Parms MoveToGoal_Parms;
	MoveToGoal_Parms.NewMoveGoal = NewMoveGoal;
	MoveToGoal_Parms.NewMoveOffset = NewMoveOffset;
	memcpy ( &MoveToGoal_Parms.MoveDelegate, &MoveDelegate, 0xC );
	MoveToGoal_Parms.bIgnoreAIGoHere = bIgnoreAIGoHere;

	this->ProcessEvent ( pFnMoveToGoal, &MoveToGoal_Parms, NULL );

	return MoveToGoal_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.RespondToBump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool ASFXAI_Core::RespondToBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnRespondToBump = NULL;

	if ( ! pFnRespondToBump )
		pFnRespondToBump = (UFunction*) UObject::GObjObjects()->Data[ 52466 ];

	ASFXAI_Core_execRespondToBump_Parms RespondToBump_Parms;
	RespondToBump_Parms.Other = Other;
	memcpy ( &RespondToBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnRespondToBump, &RespondToBump_Parms, NULL );

	return RespondToBump_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.EnableSpecialMove
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::EnableSpecialMove ( )
{
	static UFunction* pFnEnableSpecialMove = NULL;

	if ( ! pFnEnableSpecialMove )
		pFnEnableSpecialMove = (UFunction*) UObject::GObjObjects()->Data[ 52464 ];

	ASFXAI_Core_execEnableSpecialMove_Parms EnableSpecialMove_Parms;

	this->ProcessEvent ( pFnEnableSpecialMove, &EnableSpecialMove_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.StartSpecialMoveDelayTimer
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::StartSpecialMoveDelayTimer ( )
{
	static UFunction* pFnStartSpecialMoveDelayTimer = NULL;

	if ( ! pFnStartSpecialMoveDelayTimer )
		pFnStartSpecialMoveDelayTimer = (UFunction*) UObject::GObjObjects()->Data[ 52463 ];

	ASFXAI_Core_execStartSpecialMoveDelayTimer_Parms StartSpecialMoveDelayTimer_Parms;

	this->ProcessEvent ( pFnStartSpecialMoveDelayTimer, &StartSpecialMoveDelayTimer_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.DrawLocationMarker
// [0x00820002] 
// Parameters infos:
// struct FVector                 vLocation                      ( CPF_Parm )
// float                          fSize                          ( CPF_OptionalParm | CPF_Parm )
// int                            nRed                           ( CPF_OptionalParm | CPF_Parm )
// int                            nGreen                         ( CPF_OptionalParm | CPF_Parm )
// int                            nBlue                          ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_Core::DrawLocationMarker ( struct FVector vLocation, float fSize, int nRed, int nGreen, int nBlue )
{
	static UFunction* pFnDrawLocationMarker = NULL;

	if ( ! pFnDrawLocationMarker )
		pFnDrawLocationMarker = (UFunction*) UObject::GObjObjects()->Data[ 52455 ];

	ASFXAI_Core_execDrawLocationMarker_Parms DrawLocationMarker_Parms;
	memcpy ( &DrawLocationMarker_Parms.vLocation, &vLocation, 0xC );
	DrawLocationMarker_Parms.fSize = fSize;
	DrawLocationMarker_Parms.nRed = nRed;
	DrawLocationMarker_Parms.nGreen = nGreen;
	DrawLocationMarker_Parms.nBlue = nBlue;

	this->ProcessEvent ( pFnDrawLocationMarker, &DrawLocationMarker_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.BioClearCrossLevelReferences
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULevel*                  oLevel                         ( CPF_Parm )

void ASFXAI_Core::eventBioClearCrossLevelReferences ( class ULevel* oLevel )
{
	static UFunction* pFnBioClearCrossLevelReferences = NULL;

	if ( ! pFnBioClearCrossLevelReferences )
		pFnBioClearCrossLevelReferences = (UFunction*) UObject::GObjObjects()->Data[ 52453 ];

	ASFXAI_Core_eventBioClearCrossLevelReferences_Parms BioClearCrossLevelReferences_Parms;
	BioClearCrossLevelReferences_Parms.oLevel = oLevel;

	this->ProcessEvent ( pFnBioClearCrossLevelReferences, &BioClearCrossLevelReferences_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.CanSwitchBehaviours
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::CanSwitchBehaviours ( )
{
	static UFunction* pFnCanSwitchBehaviours = NULL;

	if ( ! pFnCanSwitchBehaviours )
		pFnCanSwitchBehaviours = (UFunction*) UObject::GObjObjects()->Data[ 52430 ];

	ASFXAI_Core_execCanSwitchBehaviours_Parms CanSwitchBehaviours_Parms;

	this->ProcessEvent ( pFnCanSwitchBehaviours, &CanSwitchBehaviours_Parms, NULL );

	return CanSwitchBehaviours_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.IsActorInPlaypen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool ASFXAI_Core::IsActorInPlaypen ( class AActor* oActor )
{
	static UFunction* pFnIsActorInPlaypen = NULL;

	if ( ! pFnIsActorInPlaypen )
		pFnIsActorInPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 52427 ];

	ASFXAI_Core_execIsActorInPlaypen_Parms IsActorInPlaypen_Parms;
	IsActorInPlaypen_Parms.oActor = oActor;

	this->ProcessEvent ( pFnIsActorInPlaypen, &IsActorInPlaypen_Parms, NULL );

	return IsActorInPlaypen_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.OnLeftPlaypen
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXAI_Core::eventOnLeftPlaypen ( )
{
	static UFunction* pFnOnLeftPlaypen = NULL;

	if ( ! pFnOnLeftPlaypen )
		pFnOnLeftPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 52426 ];

	ASFXAI_Core_eventOnLeftPlaypen_Parms OnLeftPlaypen_Parms;

	this->ProcessEvent ( pFnOnLeftPlaypen, &OnLeftPlaypen_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.IsReturningToPlaypen
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::IsReturningToPlaypen ( )
{
	static UFunction* pFnIsReturningToPlaypen = NULL;

	if ( ! pFnIsReturningToPlaypen )
		pFnIsReturningToPlaypen = (UFunction*) UObject::GObjObjects()->Data[ 52416 ];

	ASFXAI_Core_execIsReturningToPlaypen_Parms IsReturningToPlaypen_Parms;

	this->ProcessEvent ( pFnIsReturningToPlaypen, &IsReturningToPlaypen_Parms, NULL );

	return IsReturningToPlaypen_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.IsFlankedByTarget
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool ASFXAI_Core::IsFlankedByTarget ( class AActor* oTarget )
{
	static UFunction* pFnIsFlankedByTarget = NULL;

	if ( ! pFnIsFlankedByTarget )
		pFnIsFlankedByTarget = (UFunction*) UObject::GObjObjects()->Data[ 52410 ];

	ASFXAI_Core_execIsFlankedByTarget_Parms IsFlankedByTarget_Parms;
	IsFlankedByTarget_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnIsFlankedByTarget, &IsFlankedByTarget_Parms, NULL );

	return IsFlankedByTarget_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.CustomActionTimeout
// [0x00020000] 
// Parameters infos:

void ASFXAI_Core::CustomActionTimeout ( )
{
	static UFunction* pFnCustomActionTimeout = NULL;

	if ( ! pFnCustomActionTimeout )
		pFnCustomActionTimeout = (UFunction*) UObject::GObjObjects()->Data[ 52409 ];

	ASFXAI_Core_execCustomActionTimeout_Parms CustomActionTimeout_Parms;

	this->ProcessEvent ( pFnCustomActionTimeout, &CustomActionTimeout_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.IsPlayingDeathReaction
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::IsPlayingDeathReaction ( )
{
	static UFunction* pFnIsPlayingDeathReaction = NULL;

	if ( ! pFnIsPlayingDeathReaction )
		pFnIsPlayingDeathReaction = (UFunction*) UObject::GObjObjects()->Data[ 52373 ];

	ASFXAI_Core_execIsPlayingDeathReaction_Parms IsPlayingDeathReaction_Parms;

	this->ProcessEvent ( pFnIsPlayingDeathReaction, &IsPlayingDeathReaction_Parms, NULL );

	return IsPlayingDeathReaction_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.IsPlayingReaction
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::IsPlayingReaction ( )
{
	static UFunction* pFnIsPlayingReaction = NULL;

	if ( ! pFnIsPlayingReaction )
		pFnIsPlayingReaction = (UFunction*) UObject::GObjObjects()->Data[ 52371 ];

	ASFXAI_Core_execIsPlayingReaction_Parms IsPlayingReaction_Parms;

	this->ProcessEvent ( pFnIsPlayingReaction, &IsPlayingReaction_Parms, NULL );

	return IsPlayingReaction_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.NotifyLimbDetached
// [0x00020002] 
// Parameters infos:
// unsigned char                  ePartGroup                     ( CPF_Parm )

void ASFXAI_Core::NotifyLimbDetached ( unsigned char ePartGroup )
{
	static UFunction* pFnNotifyLimbDetached = NULL;

	if ( ! pFnNotifyLimbDetached )
		pFnNotifyLimbDetached = (UFunction*) UObject::GObjObjects()->Data[ 52369 ];

	ASFXAI_Core_execNotifyLimbDetached_Parms NotifyLimbDetached_Parms;
	NotifyLimbDetached_Parms.ePartGroup = ePartGroup;

	this->ProcessEvent ( pFnNotifyLimbDetached, &NotifyLimbDetached_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.VerifyCAHasBeenInstanced
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  CAIndex                        ( CPF_Parm )

bool ASFXAI_Core::VerifyCAHasBeenInstanced ( unsigned char CAIndex )
{
	static UFunction* pFnVerifyCAHasBeenInstanced = NULL;

	if ( ! pFnVerifyCAHasBeenInstanced )
		pFnVerifyCAHasBeenInstanced = (UFunction*) UObject::GObjObjects()->Data[ 52345 ];

	ASFXAI_Core_execVerifyCAHasBeenInstanced_Parms VerifyCAHasBeenInstanced_Parms;
	VerifyCAHasBeenInstanced_Parms.CAIndex = CAIndex;

	this->ProcessEvent ( pFnVerifyCAHasBeenInstanced, &VerifyCAHasBeenInstanced_Parms, NULL );

	return VerifyCAHasBeenInstanced_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.IsDoingACustomAction
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::IsDoingACustomAction ( )
{
	static UFunction* pFnIsDoingACustomAction = NULL;

	if ( ! pFnIsDoingACustomAction )
		pFnIsDoingACustomAction = (UFunction*) UObject::GObjObjects()->Data[ 40824 ];

	ASFXAI_Core_execIsDoingACustomAction_Parms IsDoingACustomAction_Parms;

	this->ProcessEvent ( pFnIsDoingACustomAction, &IsDoingACustomAction_Parms, NULL );

	return IsDoingACustomAction_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.CustomActionEnded
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  PrevAction                     ( CPF_Parm )

void ASFXAI_Core::CustomActionEnded ( unsigned char PrevAction )
{
	static UFunction* pFnCustomActionEnded = NULL;

	if ( ! pFnCustomActionEnded )
		pFnCustomActionEnded = (UFunction*) UObject::GObjObjects()->Data[ 52339 ];

	ASFXAI_Core_execCustomActionEnded_Parms CustomActionEnded_Parms;
	CustomActionEnded_Parms.PrevAction = PrevAction;

	this->ProcessEvent ( pFnCustomActionEnded, &CustomActionEnded_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.CanDoCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  CAction                        ( CPF_Parm )

bool ASFXAI_Core::eventCanDoCustomAction ( unsigned char CAction )
{
	static UFunction* pFnCanDoCustomAction = NULL;

	if ( ! pFnCanDoCustomAction )
		pFnCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 52342 ];

	ASFXAI_Core_eventCanDoCustomAction_Parms CanDoCustomAction_Parms;
	CanDoCustomAction_Parms.CAction = CAction;

	this->ProcessEvent ( pFnCanDoCustomAction, &CanDoCustomAction_Parms, NULL );

	return CanDoCustomAction_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.EndCustomAction
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXAI_Core::EndCustomAction ( )
{
	static UFunction* pFnEndCustomAction = NULL;

	if ( ! pFnEndCustomAction )
		pFnEndCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 34897 ];

	ASFXAI_Core_execEndCustomAction_Parms EndCustomAction_Parms;

	this->ProcessEvent ( pFnEndCustomAction, &EndCustomAction_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.DoCustomAction
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  NewAction                      ( CPF_Parm )

void ASFXAI_Core::eventDoCustomAction ( unsigned char NewAction )
{
	static UFunction* pFnDoCustomAction = NULL;

	if ( ! pFnDoCustomAction )
		pFnDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 52340 ];

	ASFXAI_Core_eventDoCustomAction_Parms DoCustomAction_Parms;
	DoCustomAction_Parms.NewAction = NewAction;

	this->ProcessEvent ( pFnDoCustomAction, &DoCustomAction_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.StartCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  NewAction                      ( CPF_Parm )
// unsigned char                  CustomActionType               ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_Core::eventStartCustomAction ( unsigned char NewAction, unsigned char CustomActionType )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 52334 ];

	ASFXAI_Core_eventStartCustomAction_Parms StartCustomAction_Parms;
	StartCustomAction_Parms.NewAction = NewAction;
	StartCustomAction_Parms.CustomActionType = CustomActionType;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );

	return StartCustomAction_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.GetCustomActionState
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eAction                        ( CPF_Parm )

struct FName ASFXAI_Core::GetCustomActionState ( unsigned char eAction )
{
	static UFunction* pFnGetCustomActionState = NULL;

	if ( ! pFnGetCustomActionState )
		pFnGetCustomActionState = (UFunction*) UObject::GObjObjects()->Data[ 52331 ];

	ASFXAI_Core_execGetCustomActionState_Parms GetCustomActionState_Parms;
	GetCustomActionState_Parms.eAction = eAction;

	this->ProcessEvent ( pFnGetCustomActionState, &GetCustomActionState_Parms, NULL );

	return GetCustomActionState_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.GetCurrentCustomAction
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioCustomAction*        pAction                        ( CPF_Parm | CPF_OutParm )

bool ASFXAI_Core::eventGetCurrentCustomAction ( class UBioCustomAction** pAction )
{
	static UFunction* pFnGetCurrentCustomAction = NULL;

	if ( ! pFnGetCurrentCustomAction )
		pFnGetCurrentCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 52328 ];

	ASFXAI_Core_eventGetCurrentCustomAction_Parms GetCurrentCustomAction_Parms;

	this->ProcessEvent ( pFnGetCurrentCustomAction, &GetCurrentCustomAction_Parms, NULL );

	if ( pAction )
		*pAction = GetCurrentCustomAction_Parms.pAction;

	return GetCurrentCustomAction_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.OnEnteringStasis
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXAI_Core::eventOnEnteringStasis ( )
{
	static UFunction* pFnOnEnteringStasis = NULL;

	if ( ! pFnOnEnteringStasis )
		pFnOnEnteringStasis = (UFunction*) UObject::GObjObjects()->Data[ 52327 ];

	ASFXAI_Core_eventOnEnteringStasis_Parms OnEnteringStasis_Parms;

	this->ProcessEvent ( pFnOnEnteringStasis, &OnEnteringStasis_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.NotifyDeathBlow
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::NotifyDeathBlow ( )
{
	static UFunction* pFnNotifyDeathBlow = NULL;

	if ( ! pFnNotifyDeathBlow )
		pFnNotifyDeathBlow = (UFunction*) UObject::GObjObjects()->Data[ 52326 ];

	ASFXAI_Core_execNotifyDeathBlow_Parms NotifyDeathBlow_Parms;

	this->ProcessEvent ( pFnNotifyDeathBlow, &NotifyDeathBlow_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.UpdateDeathState
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::UpdateDeathState ( )
{
	static UFunction* pFnUpdateDeathState = NULL;

	if ( ! pFnUpdateDeathState )
		pFnUpdateDeathState = (UFunction*) UObject::GObjObjects()->Data[ 52324 ];

	ASFXAI_Core_execUpdateDeathState_Parms UpdateDeathState_Parms;

	this->ProcessEvent ( pFnUpdateDeathState, &UpdateDeathState_Parms, NULL );

	return UpdateDeathState_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.CheckPendingWeaponSwitch
// [0x00020000] 
// Parameters infos:

void ASFXAI_Core::CheckPendingWeaponSwitch ( )
{
	static UFunction* pFnCheckPendingWeaponSwitch = NULL;

	if ( ! pFnCheckPendingWeaponSwitch )
		pFnCheckPendingWeaponSwitch = (UFunction*) UObject::GObjObjects()->Data[ 52270 ];

	ASFXAI_Core_execCheckPendingWeaponSwitch_Parms CheckPendingWeaponSwitch_Parms;

	this->ProcessEvent ( pFnCheckPendingWeaponSwitch, &CheckPendingWeaponSwitch_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.PlayAmbientVoc
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::PlayAmbientVoc ( )
{
	static UFunction* pFnPlayAmbientVoc = NULL;

	if ( ! pFnPlayAmbientVoc )
		pFnPlayAmbientVoc = (UFunction*) UObject::GObjObjects()->Data[ 52256 ];

	ASFXAI_Core_execPlayAmbientVoc_Parms PlayAmbientVoc_Parms;

	this->ProcessEvent ( pFnPlayAmbientVoc, &PlayAmbientVoc_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.Taunt
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::Taunt ( )
{
	static UFunction* pFnTaunt = NULL;

	if ( ! pFnTaunt )
		pFnTaunt = (UFunction*) UObject::GObjObjects()->Data[ 52255 ];

	ASFXAI_Core_execTaunt_Parms Taunt_Parms;

	this->ProcessEvent ( pFnTaunt, &Taunt_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.IsInFightingState
// [0x00020000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::IsInFightingState ( )
{
	static UFunction* pFnIsInFightingState = NULL;

	if ( ! pFnIsInFightingState )
		pFnIsInFightingState = (UFunction*) UObject::GObjObjects()->Data[ 52253 ];

	ASFXAI_Core_execIsInFightingState_Parms IsInFightingState_Parms;

	this->ProcessEvent ( pFnIsInFightingState, &IsInFightingState_Parms, NULL );

	return IsInFightingState_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.SwitchWeapon
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              oWeapon                        ( CPF_Parm )

void ASFXAI_Core::SwitchWeapon ( class ASFXWeapon* oWeapon )
{
	static UFunction* pFnSwitchWeapon = NULL;

	if ( ! pFnSwitchWeapon )
		pFnSwitchWeapon = (UFunction*) UObject::GObjObjects()->Data[ 52245 ];

	ASFXAI_Core_execSwitchWeapon_Parms SwitchWeapon_Parms;
	SwitchWeapon_Parms.oWeapon = oWeapon;

	this->ProcessEvent ( pFnSwitchWeapon, &SwitchWeapon_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.SetSquadIntoCombat
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::SetSquadIntoCombat ( )
{
	static UFunction* pFnSetSquadIntoCombat = NULL;

	if ( ! pFnSetSquadIntoCombat )
		pFnSetSquadIntoCombat = (UFunction*) UObject::GObjObjects()->Data[ 52243 ];

	ASFXAI_Core_execSetSquadIntoCombat_Parms SetSquadIntoCombat_Parms;

	this->ProcessEvent ( pFnSetSquadIntoCombat, &SetSquadIntoCombat_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.GetPowerUsePercent
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXAI_Core::GetPowerUsePercent ( )
{
	static UFunction* pFnGetPowerUsePercent = NULL;

	if ( ! pFnGetPowerUsePercent )
		pFnGetPowerUsePercent = (UFunction*) UObject::GObjObjects()->Data[ 52241 ];

	ASFXAI_Core_execGetPowerUsePercent_Parms GetPowerUsePercent_Parms;

	this->ProcessEvent ( pFnGetPowerUsePercent, &GetPowerUsePercent_Parms, NULL );

	return GetPowerUsePercent_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.ReleaseTicket
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// unsigned char                  eTicket                        ( CPF_Parm )
// unsigned long                  bKillAttackTicket              ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_Core::ReleaseTicket ( class AActor* oTarget, unsigned char eTicket, unsigned long bKillAttackTicket )
{
	static UFunction* pFnReleaseTicket = NULL;

	if ( ! pFnReleaseTicket )
		pFnReleaseTicket = (UFunction*) UObject::GObjObjects()->Data[ 52236 ];

	ASFXAI_Core_execReleaseTicket_Parms ReleaseTicket_Parms;
	ReleaseTicket_Parms.oTarget = oTarget;
	ReleaseTicket_Parms.eTicket = eTicket;
	ReleaseTicket_Parms.bKillAttackTicket = bKillAttackTicket;

	this->ProcessEvent ( pFnReleaseTicket, &ReleaseTicket_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.AcquireTicket
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// unsigned char                  eTicket                        ( CPF_Parm )
// int                            nAttackTicketCost              ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_Core::AcquireTicket ( class AActor* oTarget, unsigned char eTicket, int nAttackTicketCost )
{
	static UFunction* pFnAcquireTicket = NULL;

	if ( ! pFnAcquireTicket )
		pFnAcquireTicket = (UFunction*) UObject::GObjObjects()->Data[ 52229 ];

	ASFXAI_Core_execAcquireTicket_Parms AcquireTicket_Parms;
	AcquireTicket_Parms.oTarget = oTarget;
	AcquireTicket_Parms.eTicket = eTicket;
	AcquireTicket_Parms.nAttackTicketCost = nAttackTicketCost;

	this->ProcessEvent ( pFnAcquireTicket, &AcquireTicket_Parms, NULL );

	return AcquireTicket_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.ClearPowerReservation
// [0x00020002] 
// Parameters infos:
// struct FName                   nmPower                        ( CPF_Parm )
// unsigned long                  bSkipProjectilePowers          ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_Core::ClearPowerReservation ( struct FName nmPower, unsigned long bSkipProjectilePowers )
{
	static UFunction* pFnClearPowerReservation = NULL;

	if ( ! pFnClearPowerReservation )
		pFnClearPowerReservation = (UFunction*) UObject::GObjObjects()->Data[ 52224 ];

	ASFXAI_Core_execClearPowerReservation_Parms ClearPowerReservation_Parms;
	memcpy ( &ClearPowerReservation_Parms.nmPower, &nmPower, 0x8 );
	ClearPowerReservation_Parms.bSkipProjectilePowers = bSkipProjectilePowers;

	this->ProcessEvent ( pFnClearPowerReservation, &ClearPowerReservation_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.RequestPowerReservation
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPower                        ( CPF_Parm )
// unsigned long                  bForceSuccess                  ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_Core::RequestPowerReservation ( struct FName nmPower, unsigned long bForceSuccess )
{
	static UFunction* pFnRequestPowerReservation = NULL;

	if ( ! pFnRequestPowerReservation )
		pFnRequestPowerReservation = (UFunction*) UObject::GObjObjects()->Data[ 52218 ];

	ASFXAI_Core_execRequestPowerReservation_Parms RequestPowerReservation_Parms;
	memcpy ( &RequestPowerReservation_Parms.nmPower, &nmPower, 0x8 );
	RequestPowerReservation_Parms.bForceSuccess = bForceSuccess;

	this->ProcessEvent ( pFnRequestPowerReservation, &RequestPowerReservation_Parms, NULL );

	return RequestPowerReservation_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.Reload
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::Reload ( )
{
	static UFunction* pFnReload = NULL;

	if ( ! pFnReload )
		pFnReload = (UFunction*) UObject::GObjObjects()->Data[ 52215 ];

	ASFXAI_Core_execReload_Parms Reload_Parms;

	this->ProcessEvent ( pFnReload, &Reload_Parms, NULL );

	return Reload_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.ShouldReload
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::ShouldReload ( )
{
	static UFunction* pFnShouldReload = NULL;

	if ( ! pFnShouldReload )
		pFnShouldReload = (UFunction*) UObject::GObjObjects()->Data[ 52210 ];

	ASFXAI_Core_execShouldReload_Parms ShouldReload_Parms;

	this->ProcessEvent ( pFnShouldReload, &ShouldReload_Parms, NULL );

	return ShouldReload_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.ChooseAttack
// [0x00C20002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// struct FName                   nmPowerName                    ( CPF_Parm | CPF_OutParm )

bool ASFXAI_Core::ChooseAttack ( class AActor* oTarget, struct FName* nmPowerName )
{
	static UFunction* pFnChooseAttack = NULL;

	if ( ! pFnChooseAttack )
		pFnChooseAttack = (UFunction*) UObject::GObjObjects()->Data[ 52203 ];

	ASFXAI_Core_execChooseAttack_Parms ChooseAttack_Parms;
	ChooseAttack_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnChooseAttack, &ChooseAttack_Parms, NULL );

	if ( nmPowerName )
		memcpy ( nmPowerName, &ChooseAttack_Parms.nmPowerName, 0x8 );

	return ChooseAttack_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.ATTACK
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

unsigned char ASFXAI_Core::ATTACK ( )
{
	static UFunction* pFnATTACK = NULL;

	if ( ! pFnATTACK )
		pFnATTACK = (UFunction*) UObject::GObjObjects()->Data[ 52200 ];

	ASFXAI_Core_execATTACK_Parms ATTACK_Parms;

	this->ProcessEvent ( pFnATTACK, &ATTACK_Parms, NULL );

	return ATTACK_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.ClearCancelAction
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::ClearCancelAction ( )
{
	static UFunction* pFnClearCancelAction = NULL;

	if ( ! pFnClearCancelAction )
		pFnClearCancelAction = (UFunction*) UObject::GObjObjects()->Data[ 52199 ];

	ASFXAI_Core_execClearCancelAction_Parms ClearCancelAction_Parms;

	this->ProcessEvent ( pFnClearCancelAction, &ClearCancelAction_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.CancelAction
// [0x00020002] 
// Parameters infos:
// int                            nReason                        ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_Core::CancelAction ( int nReason )
{
	static UFunction* pFnCancelAction = NULL;

	if ( ! pFnCancelAction )
		pFnCancelAction = (UFunction*) UObject::GObjObjects()->Data[ 52197 ];

	ASFXAI_Core_execCancelAction_Parms CancelAction_Parms;
	CancelAction_Parms.nReason = nReason;

	this->ProcessEvent ( pFnCancelAction, &CancelAction_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.IsAttacking
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::IsAttacking ( )
{
	static UFunction* pFnIsAttacking = NULL;

	if ( ! pFnIsAttacking )
		pFnIsAttacking = (UFunction*) UObject::GObjObjects()->Data[ 52195 ];

	ASFXAI_Core_execIsAttacking_Parms IsAttacking_Parms;

	this->ProcessEvent ( pFnIsAttacking, &IsAttacking_Parms, NULL );

	return IsAttacking_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.WantsToRun
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDistance                      ( CPF_Parm )

bool ASFXAI_Core::WantsToRun ( float fDistance )
{
	static UFunction* pFnWantsToRun = NULL;

	if ( ! pFnWantsToRun )
		pFnWantsToRun = (UFunction*) UObject::GObjObjects()->Data[ 52191 ];

	ASFXAI_Core_execWantsToRun_Parms WantsToRun_Parms;
	WantsToRun_Parms.fDistance = fDistance;

	this->ProcessEvent ( pFnWantsToRun, &WantsToRun_Parms, NULL );

	return WantsToRun_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.SetMovementSpeed
// [0x00820002] 
// Parameters infos:

void ASFXAI_Core::SetMovementSpeed ( )
{
	static UFunction* pFnSetMovementSpeed = NULL;

	if ( ! pFnSetMovementSpeed )
		pFnSetMovementSpeed = (UFunction*) UObject::GObjObjects()->Data[ 52188 ];

	ASFXAI_Core_execSetMovementSpeed_Parms SetMovementSpeed_Parms;

	this->ProcessEvent ( pFnSetMovementSpeed, &SetMovementSpeed_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.PeriodicMoveCheck
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::PeriodicMoveCheck ( )
{
	static UFunction* pFnPeriodicMoveCheck = NULL;

	if ( ! pFnPeriodicMoveCheck )
		pFnPeriodicMoveCheck = (UFunction*) UObject::GObjObjects()->Data[ 52187 ];

	ASFXAI_Core_execPeriodicMoveCheck_Parms PeriodicMoveCheck_Parms;

	this->ProcessEvent ( pFnPeriodicMoveCheck, &PeriodicMoveCheck_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.SetMoveGoal
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  NewMoveGoal                    ( CPF_Parm )
// float                          NewMoveOffset                  ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_Core::SetMoveGoal ( class AActor* NewMoveGoal, float NewMoveOffset )
{
	static UFunction* pFnSetMoveGoal = NULL;

	if ( ! pFnSetMoveGoal )
		pFnSetMoveGoal = (UFunction*) UObject::GObjObjects()->Data[ 52183 ];

	ASFXAI_Core_execSetMoveGoal_Parms SetMoveGoal_Parms;
	SetMoveGoal_Parms.NewMoveGoal = NewMoveGoal;
	SetMoveGoal_Parms.NewMoveOffset = NewMoveOffset;

	this->ProcessEvent ( pFnSetMoveGoal, &SetMoveGoal_Parms, NULL );

	return SetMoveGoal_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.PeriodicCoverValidation
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::PeriodicCoverValidation ( )
{
	static UFunction* pFnPeriodicCoverValidation = NULL;

	if ( ! pFnPeriodicCoverValidation )
		pFnPeriodicCoverValidation = (UFunction*) UObject::GObjObjects()->Data[ 52176 ];

	ASFXAI_Core_execPeriodicCoverValidation_Parms PeriodicCoverValidation_Parms;

	this->ProcessEvent ( pFnPeriodicCoverValidation, &PeriodicCoverValidation_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.IsMovingToCover
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::IsMovingToCover ( )
{
	static UFunction* pFnIsMovingToCover = NULL;

	if ( ! pFnIsMovingToCover )
		pFnIsMovingToCover = (UFunction*) UObject::GObjObjects()->Data[ 52174 ];

	ASFXAI_Core_execIsMovingToCover_Parms IsMovingToCover_Parms;

	this->ProcessEvent ( pFnIsMovingToCover, &IsMovingToCover_Parms, NULL );

	return IsMovingToCover_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.MoveToCover
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGoal_AtCover*           GoalEvaluator                  ( CPF_Parm )
// class AActor*                  GoalActor                      ( CPF_Parm )
// unsigned long                  bUsePeriodicCheck              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreAIGoHere                ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_Core::MoveToCover ( class UGoal_AtCover* GoalEvaluator, class AActor* GoalActor, unsigned long bUsePeriodicCheck, unsigned long bIgnoreAIGoHere )
{
	static UFunction* pFnMoveToCover = NULL;

	if ( ! pFnMoveToCover )
		pFnMoveToCover = (UFunction*) UObject::GObjObjects()->Data[ 52167 ];

	ASFXAI_Core_execMoveToCover_Parms MoveToCover_Parms;
	MoveToCover_Parms.GoalEvaluator = GoalEvaluator;
	MoveToCover_Parms.GoalActor = GoalActor;
	MoveToCover_Parms.bUsePeriodicCheck = bUsePeriodicCheck;
	MoveToCover_Parms.bIgnoreAIGoHere = bIgnoreAIGoHere;

	this->ProcessEvent ( pFnMoveToCover, &MoveToCover_Parms, NULL );

	return MoveToCover_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.AcquireCoverGoal
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UGoal_AtCover*           GoalEvaluator                  ( CPF_Parm )
// class AActor*                  GoalActor                      ( CPF_Parm )
// unsigned long                  bIgnoreAIGoHere                ( CPF_Parm )
// struct FCoverInfo              NewCoverGoal                   ( CPF_Parm | CPF_OutParm )

bool ASFXAI_Core::AcquireCoverGoal ( class UGoal_AtCover* GoalEvaluator, class AActor* GoalActor, unsigned long bIgnoreAIGoHere, struct FCoverInfo* NewCoverGoal )
{
	static UFunction* pFnAcquireCoverGoal = NULL;

	if ( ! pFnAcquireCoverGoal )
		pFnAcquireCoverGoal = (UFunction*) UObject::GObjObjects()->Data[ 52160 ];

	ASFXAI_Core_execAcquireCoverGoal_Parms AcquireCoverGoal_Parms;
	AcquireCoverGoal_Parms.GoalEvaluator = GoalEvaluator;
	AcquireCoverGoal_Parms.GoalActor = GoalActor;
	AcquireCoverGoal_Parms.bIgnoreAIGoHere = bIgnoreAIGoHere;

	this->ProcessEvent ( pFnAcquireCoverGoal, &AcquireCoverGoal_Parms, NULL );

	if ( NewCoverGoal )
		memcpy ( NewCoverGoal, &AcquireCoverGoal_Parms.NewCoverGoal, 0x8 );

	return AcquireCoverGoal_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.ApplyBasePathConstraints
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::ApplyBasePathConstraints ( )
{
	static UFunction* pFnApplyBasePathConstraints = NULL;

	if ( ! pFnApplyBasePathConstraints )
		pFnApplyBasePathConstraints = (UFunction*) UObject::GObjObjects()->Data[ 52159 ];

	ASFXAI_Core_execApplyBasePathConstraints_Parms ApplyBasePathConstraints_Parms;

	this->ProcessEvent ( pFnApplyBasePathConstraints, &ApplyBasePathConstraints_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.DebugMoveToGoal
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  NewMoveGoal                    ( CPF_Parm )
// float                          NewMoveOffset                  ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_Core::DebugMoveToGoal ( class AActor* NewMoveGoal, float NewMoveOffset )
{
	static UFunction* pFnDebugMoveToGoal = NULL;

	if ( ! pFnDebugMoveToGoal )
		pFnDebugMoveToGoal = (UFunction*) UObject::GObjObjects()->Data[ 52155 ];

	ASFXAI_Core_execDebugMoveToGoal_Parms DebugMoveToGoal_Parms;
	DebugMoveToGoal_Parms.NewMoveGoal = NewMoveGoal;
	DebugMoveToGoal_Parms.NewMoveOffset = NewMoveOffset;

	this->ProcessEvent ( pFnDebugMoveToGoal, &DebugMoveToGoal_Parms, NULL );

	return DebugMoveToGoal_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.DebugMoveToCover
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FCoverInfo              NewCoverGoal                   ( CPF_Parm )

bool ASFXAI_Core::DebugMoveToCover ( struct FCoverInfo NewCoverGoal )
{
	static UFunction* pFnDebugMoveToCover = NULL;

	if ( ! pFnDebugMoveToCover )
		pFnDebugMoveToCover = (UFunction*) UObject::GObjObjects()->Data[ 52152 ];

	ASFXAI_Core_execDebugMoveToCover_Parms DebugMoveToCover_Parms;
	memcpy ( &DebugMoveToCover_Parms.NewCoverGoal, &NewCoverGoal, 0x8 );

	this->ProcessEvent ( pFnDebugMoveToCover, &DebugMoveToCover_Parms, NULL );

	return DebugMoveToCover_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.NotifyWeaponDelayFinished
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::NotifyWeaponDelayFinished ( )
{
	static UFunction* pFnNotifyWeaponDelayFinished = NULL;

	if ( ! pFnNotifyWeaponDelayFinished )
		pFnNotifyWeaponDelayFinished = (UFunction*) UObject::GObjObjects()->Data[ 52121 ];

	ASFXAI_Core_execNotifyWeaponDelayFinished_Parms NotifyWeaponDelayFinished_Parms;

	this->ProcessEvent ( pFnNotifyWeaponDelayFinished, &NotifyWeaponDelayFinished_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.ReEvaluateCover
// [0x00020000] 
// Parameters infos:

void ASFXAI_Core::ReEvaluateCover ( )
{
	static UFunction* pFnReEvaluateCover = NULL;

	if ( ! pFnReEvaluateCover )
		pFnReEvaluateCover = (UFunction*) UObject::GObjObjects()->Data[ 52120 ];

	ASFXAI_Core_execReEvaluateCover_Parms ReEvaluateCover_Parms;

	this->ProcessEvent ( pFnReEvaluateCover, &ReEvaluateCover_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.GetAimLocation
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            EnemyIdx                       ( CPF_Parm )
// struct FVector                 StartLoc                       ( CPF_Parm )

struct FVector ASFXAI_Core::GetAimLocation ( int EnemyIdx, struct FVector StartLoc )
{
	static UFunction* pFnGetAimLocation = NULL;

	if ( ! pFnGetAimLocation )
		pFnGetAimLocation = (UFunction*) UObject::GObjObjects()->Data[ 52109 ];

	ASFXAI_Core_execGetAimLocation_Parms GetAimLocation_Parms;
	GetAimLocation_Parms.EnemyIdx = EnemyIdx;
	memcpy ( &GetAimLocation_Parms.StartLoc, &StartLoc, 0xC );

	this->ProcessEvent ( pFnGetAimLocation, &GetAimLocation_Parms, NULL );

	return GetAimLocation_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.GetBestTargetCoverAction
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                TargetPawn                     ( CPF_Parm )
// struct FCoverInfo              TargetCover                    ( CPF_Parm )

unsigned char ASFXAI_Core::GetBestTargetCoverAction ( class ABioPawn* TargetPawn, struct FCoverInfo TargetCover )
{
	static UFunction* pFnGetBestTargetCoverAction = NULL;

	if ( ! pFnGetBestTargetCoverAction )
		pFnGetBestTargetCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 52105 ];

	ASFXAI_Core_execGetBestTargetCoverAction_Parms GetBestTargetCoverAction_Parms;
	GetBestTargetCoverAction_Parms.TargetPawn = TargetPawn;
	memcpy ( &GetBestTargetCoverAction_Parms.TargetCover, &TargetCover, 0x8 );

	this->ProcessEvent ( pFnGetBestTargetCoverAction, &GetBestTargetCoverAction_Parms, NULL );

	return GetBestTargetCoverAction_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.SetBestTargetCoverAction
// [0x00020002] 
// Parameters infos:
// unsigned char                  BestAction                     ( CPF_Parm )

void ASFXAI_Core::SetBestTargetCoverAction ( unsigned char BestAction )
{
	static UFunction* pFnSetBestTargetCoverAction = NULL;

	if ( ! pFnSetBestTargetCoverAction )
		pFnSetBestTargetCoverAction = (UFunction*) UObject::GObjObjects()->Data[ 52103 ];

	ASFXAI_Core_execSetBestTargetCoverAction_Parms SetBestTargetCoverAction_Parms;
	SetBestTargetCoverAction_Parms.BestAction = BestAction;

	this->ProcessEvent ( pFnSetBestTargetCoverAction, &SetBestTargetCoverAction_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.RespondToPush
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::RespondToPush ( )
{
	static UFunction* pFnRespondToPush = NULL;

	if ( ! pFnRespondToPush )
		pFnRespondToPush = (UFunction*) UObject::GObjObjects()->Data[ 52101 ];

	ASFXAI_Core_execRespondToPush_Parms RespondToPush_Parms;

	this->ProcessEvent ( pFnRespondToPush, &RespondToPush_Parms, NULL );

	return RespondToPush_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.PushPawn
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXAI_Core::PushPawn ( class ABioPawn* oPawn, struct FVector HitNormal )
{
	static UFunction* pFnPushPawn = NULL;

	if ( ! pFnPushPawn )
		pFnPushPawn = (UFunction*) UObject::GObjObjects()->Data[ 52098 ];

	ASFXAI_Core_execPushPawn_Parms PushPawn_Parms;
	PushPawn_Parms.oPawn = oPawn;
	memcpy ( &PushPawn_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnPushPawn, &PushPawn_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.NotifyHitWall
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )

bool ASFXAI_Core::NotifyHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = (UFunction*) UObject::GObjObjects()->Data[ 52093 ];

	ASFXAI_Core_execNotifyHitWall_Parms NotifyHitWall_Parms;
	memcpy ( &NotifyHitWall_Parms.HitNormal, &HitNormal, 0xC );
	NotifyHitWall_Parms.Wall = Wall;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );

	return NotifyHitWall_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.NotifyBump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool ASFXAI_Core::NotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 52087 ];

	ASFXAI_Core_execNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.NotifyCoverDisabled
// [0x00020102] 
// Parameters infos:
// class ACoverLink*              Link                           ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

void ASFXAI_Core::NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx )
{
	static UFunction* pFnNotifyCoverDisabled = NULL;

	if ( ! pFnNotifyCoverDisabled )
		pFnNotifyCoverDisabled = (UFunction*) UObject::GObjObjects()->Data[ 52083 ];

	ASFXAI_Core_execNotifyCoverDisabled_Parms NotifyCoverDisabled_Parms;
	NotifyCoverDisabled_Parms.Link = Link;
	NotifyCoverDisabled_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnNotifyCoverDisabled, &NotifyCoverDisabled_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.NotifyPowerFinished
// [0x00020000] 
// Parameters infos:
// struct FName                   nmPower                        ( CPF_Parm )

void ASFXAI_Core::NotifyPowerFinished ( struct FName nmPower )
{
	static UFunction* pFnNotifyPowerFinished = NULL;

	if ( ! pFnNotifyPowerFinished )
		pFnNotifyPowerFinished = (UFunction*) UObject::GObjObjects()->Data[ 52081 ];

	ASFXAI_Core_execNotifyPowerFinished_Parms NotifyPowerFinished_Parms;
	memcpy ( &NotifyPowerFinished_Parms.nmPower, &nmPower, 0x8 );

	this->ProcessEvent ( pFnNotifyPowerFinished, &NotifyPowerFinished_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.NotifyUnderAttack
// [0x00020000] 
// Parameters infos:
// unsigned long                  bHit                           ( CPF_Parm )

void ASFXAI_Core::NotifyUnderAttack ( unsigned long bHit )
{
	static UFunction* pFnNotifyUnderAttack = NULL;

	if ( ! pFnNotifyUnderAttack )
		pFnNotifyUnderAttack = (UFunction*) UObject::GObjObjects()->Data[ 52079 ];

	ASFXAI_Core_execNotifyUnderAttack_Parms NotifyUnderAttack_Parms;
	NotifyUnderAttack_Parms.bHit = bHit;

	this->ProcessEvent ( pFnNotifyUnderAttack, &NotifyUnderAttack_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.NotifyNearMiss
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXAI_Core::NotifyNearMiss ( struct FVector HitLocation )
{
	static UFunction* pFnNotifyNearMiss = NULL;

	if ( ! pFnNotifyNearMiss )
		pFnNotifyNearMiss = (UFunction*) UObject::GObjObjects()->Data[ 52077 ];

	ASFXAI_Core_execNotifyNearMiss_Parms NotifyNearMiss_Parms;
	memcpy ( &NotifyNearMiss_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnNotifyNearMiss, &NotifyNearMiss_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.NotifyTakeHit
// [0x00020002] 
// Parameters infos:
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// int                            Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )

void ASFXAI_Core::NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = (UFunction*) UObject::GObjObjects()->Data[ 52071 ];

	ASFXAI_Core_execNotifyTakeHit_Parms NotifyTakeHit_Parms;
	NotifyTakeHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &NotifyTakeHit_Parms.HitLocation, &HitLocation, 0xC );
	NotifyTakeHit_Parms.Damage = Damage;
	NotifyTakeHit_Parms.DamageType = DamageType;
	memcpy ( &NotifyTakeHit_Parms.Momentum, &Momentum, 0xC );

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.FindNewCover
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::FindNewCover ( )
{
	static UFunction* pFnFindNewCover = NULL;

	if ( ! pFnFindNewCover )
		pFnFindNewCover = (UFunction*) UObject::GObjObjects()->Data[ 52070 ];

	ASFXAI_Core_execFindNewCover_Parms FindNewCover_Parms;

	this->ProcessEvent ( pFnFindNewCover, &FindNewCover_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.TriggerAttackVocalization
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::TriggerAttackVocalization ( )
{
	static UFunction* pFnTriggerAttackVocalization = NULL;

	if ( ! pFnTriggerAttackVocalization )
		pFnTriggerAttackVocalization = (UFunction*) UObject::GObjObjects()->Data[ 52057 ];

	ASFXAI_Core_execTriggerAttackVocalization_Parms TriggerAttackVocalization_Parms;

	this->ProcessEvent ( pFnTriggerAttackVocalization, &TriggerAttackVocalization_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.OnTargetChanged
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::OnTargetChanged ( )
{
	static UFunction* pFnOnTargetChanged = NULL;

	if ( ! pFnOnTargetChanged )
		pFnOnTargetChanged = (UFunction*) UObject::GObjObjects()->Data[ 52056 ];

	ASFXAI_Core_execOnTargetChanged_Parms OnTargetChanged_Parms;

	this->ProcessEvent ( pFnOnTargetChanged, &OnTargetChanged_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.AdjustEnemyRating
// [0x00420000] 
// Parameters infos:
// class APawn*                   EnemyPawn                      ( CPF_Parm )
// float                          fRating                        ( CPF_Parm | CPF_OutParm )

void ASFXAI_Core::AdjustEnemyRating ( class APawn* EnemyPawn, float* fRating )
{
	static UFunction* pFnAdjustEnemyRating = NULL;

	if ( ! pFnAdjustEnemyRating )
		pFnAdjustEnemyRating = (UFunction*) UObject::GObjObjects()->Data[ 52053 ];

	ASFXAI_Core_execAdjustEnemyRating_Parms AdjustEnemyRating_Parms;
	AdjustEnemyRating_Parms.EnemyPawn = EnemyPawn;

	this->ProcessEvent ( pFnAdjustEnemyRating, &AdjustEnemyRating_Parms, NULL );

	if ( fRating )
		*fRating = AdjustEnemyRating_Parms.fRating;
};

// Function SFXGame.SFXAI_Core.AdjustRatingByTickets
// [0x00420002] 
// Parameters infos:
// int                            EnemyIdx                       ( CPF_Parm )
// float                          out_Rating                     ( CPF_Parm | CPF_OutParm )

void ASFXAI_Core::AdjustRatingByTickets ( int EnemyIdx, float* out_Rating )
{
	static UFunction* pFnAdjustRatingByTickets = NULL;

	if ( ! pFnAdjustRatingByTickets )
		pFnAdjustRatingByTickets = (UFunction*) UObject::GObjObjects()->Data[ 52048 ];

	ASFXAI_Core_execAdjustRatingByTickets_Parms AdjustRatingByTickets_Parms;
	AdjustRatingByTickets_Parms.EnemyIdx = EnemyIdx;

	this->ProcessEvent ( pFnAdjustRatingByTickets, &AdjustRatingByTickets_Parms, NULL );

	if ( out_Rating )
		*out_Rating = AdjustRatingByTickets_Parms.out_Rating;
};

// Function SFXGame.SFXAI_Core.SelectTarget
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::SelectTarget ( )
{
	static UFunction* pFnSelectTarget = NULL;

	if ( ! pFnSelectTarget )
		pFnSelectTarget = (UFunction*) UObject::GObjObjects()->Data[ 52036 ];

	ASFXAI_Core_execSelectTarget_Parms SelectTarget_Parms;

	this->ProcessEvent ( pFnSelectTarget, &SelectTarget_Parms, NULL );

	return SelectTarget_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.SpawnedByKismet
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXAI_Core::eventSpawnedByKismet ( )
{
	static UFunction* pFnSpawnedByKismet = NULL;

	if ( ! pFnSpawnedByKismet )
		pFnSpawnedByKismet = (UFunction*) UObject::GObjObjects()->Data[ 52035 ];

	ASFXAI_Core_eventSpawnedByKismet_Parms SpawnedByKismet_Parms;

	this->ProcessEvent ( pFnSpawnedByKismet, &SpawnedByKismet_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.Initialize
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 52034 ];

	ASFXAI_Core_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 52033 ];

	ASFXAI_Core_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.ChangeBehaviour
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewBehaviour                   ( CPF_Parm )

bool ASFXAI_Core::ChangeBehaviour ( struct FName NewBehaviour )
{
	static UFunction* pFnChangeBehaviour = NULL;

	if ( ! pFnChangeBehaviour )
		pFnChangeBehaviour = (UFunction*) UObject::GObjObjects()->Data[ 52030 ];

	ASFXAI_Core_execChangeBehaviour_Parms ChangeBehaviour_Parms;
	memcpy ( &ChangeBehaviour_Parms.NewBehaviour, &NewBehaviour, 0x8 );

	this->ProcessEvent ( pFnChangeBehaviour, &ChangeBehaviour_Parms, NULL );

	return ChangeBehaviour_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.SetDefaultBehaviour
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewBehaviour                   ( CPF_Parm )

bool ASFXAI_Core::SetDefaultBehaviour ( struct FName NewBehaviour )
{
	static UFunction* pFnSetDefaultBehaviour = NULL;

	if ( ! pFnSetDefaultBehaviour )
		pFnSetDefaultBehaviour = (UFunction*) UObject::GObjObjects()->Data[ 52026 ];

	ASFXAI_Core_execSetDefaultBehaviour_Parms SetDefaultBehaviour_Parms;
	memcpy ( &SetDefaultBehaviour_Parms.NewBehaviour, &NewBehaviour, 0x8 );

	this->ProcessEvent ( pFnSetDefaultBehaviour, &SetDefaultBehaviour_Parms, NULL );

	return SetDefaultBehaviour_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.GetBehaviourList
// [0x00422802] ( FUNC_Event )
// Parameters infos:
// TArray< struct FName >         Behaviours                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXAI_Core::eventGetBehaviourList ( TArray< struct FName >* Behaviours )
{
	static UFunction* pFnGetBehaviourList = NULL;

	if ( ! pFnGetBehaviourList )
		pFnGetBehaviourList = (UFunction*) UObject::GObjObjects()->Data[ 52022 ];

	ASFXAI_Core_eventGetBehaviourList_Parms GetBehaviourList_Parms;

	this->ProcessEvent ( pFnGetBehaviourList, &GetBehaviourList_Parms, NULL );

	if ( Behaviours )
		memcpy ( Behaviours, &GetBehaviourList_Parms.Behaviours, 0xC );
};

// Function SFXGame.SFXAI_Core.ClearGoHereDelegates
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::ClearGoHereDelegates ( )
{
	static UFunction* pFnClearGoHereDelegates = NULL;

	if ( ! pFnClearGoHereDelegates )
		pFnClearGoHereDelegates = (UFunction*) UObject::GObjObjects()->Data[ 52021 ];

	ASFXAI_Core_execClearGoHereDelegates_Parms ClearGoHereDelegates_Parms;

	this->ProcessEvent ( pFnClearGoHereDelegates, &ClearGoHereDelegates_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.AssignGoHereDelegates
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         RangeDel                       ( CPF_Parm | CPF_NeedCtorLink )
// struct FScriptDelegate         FlankDel                       ( CPF_Parm | CPF_NeedCtorLink )

void ASFXAI_Core::AssignGoHereDelegates ( struct FScriptDelegate RangeDel, struct FScriptDelegate FlankDel )
{
	static UFunction* pFnAssignGoHereDelegates = NULL;

	if ( ! pFnAssignGoHereDelegates )
		pFnAssignGoHereDelegates = (UFunction*) UObject::GObjObjects()->Data[ 52018 ];

	ASFXAI_Core_execAssignGoHereDelegates_Parms AssignGoHereDelegates_Parms;
	memcpy ( &AssignGoHereDelegates_Parms.RangeDel, &RangeDel, 0xC );
	memcpy ( &AssignGoHereDelegates_Parms.FlankDel, &FlankDel, 0xC );

	this->ProcessEvent ( pFnAssignGoHereDelegates, &AssignGoHereDelegates_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.StopFollowingActor
// [0x00020002] 
// Parameters infos:

void ASFXAI_Core::StopFollowingActor ( )
{
	static UFunction* pFnStopFollowingActor = NULL;

	if ( ! pFnStopFollowingActor )
		pFnStopFollowingActor = (UFunction*) UObject::GObjObjects()->Data[ 52017 ];

	ASFXAI_Core_execStopFollowingActor_Parms StopFollowingActor_Parms;

	this->ProcessEvent ( pFnStopFollowingActor, &StopFollowingActor_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.StartFollowingActor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ActorToFollow                  ( CPF_Parm )

bool ASFXAI_Core::StartFollowingActor ( class AActor* ActorToFollow )
{
	static UFunction* pFnStartFollowingActor = NULL;

	if ( ! pFnStartFollowingActor )
		pFnStartFollowingActor = (UFunction*) UObject::GObjObjects()->Data[ 52014 ];

	ASFXAI_Core_execStartFollowingActor_Parms StartFollowingActor_Parms;
	StartFollowingActor_Parms.ActorToFollow = ActorToFollow;

	this->ProcessEvent ( pFnStartFollowingActor, &StartFollowingActor_Parms, NULL );

	return StartFollowingActor_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.MoveToGoalExternal
// [0x00020002] 
// Parameters infos:
// class AActor*                  NewMoveGoal                    ( CPF_Parm )
// float                          NewMoveOffset                  ( CPF_OptionalParm | CPF_Parm )
// struct FScriptDelegate         MoveDelegate                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ASFXAI_Core::MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, struct FScriptDelegate MoveDelegate )
{
	static UFunction* pFnMoveToGoalExternal = NULL;

	if ( ! pFnMoveToGoalExternal )
		pFnMoveToGoalExternal = (UFunction*) UObject::GObjObjects()->Data[ 52010 ];

	ASFXAI_Core_execMoveToGoalExternal_Parms MoveToGoalExternal_Parms;
	MoveToGoalExternal_Parms.NewMoveGoal = NewMoveGoal;
	MoveToGoalExternal_Parms.NewMoveOffset = NewMoveOffset;
	memcpy ( &MoveToGoalExternal_Parms.MoveDelegate, &MoveDelegate, 0xC );

	this->ProcessEvent ( pFnMoveToGoalExternal, &MoveToGoalExternal_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.FireWeaponAtTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// unsigned long                  bCheckLOS                      ( CPF_Parm )
// struct FScriptDelegate         FireDelegate                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ASFXAI_Core::FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, struct FScriptDelegate FireDelegate )
{
	static UFunction* pFnFireWeaponAtTarget = NULL;

	if ( ! pFnFireWeaponAtTarget )
		pFnFireWeaponAtTarget = (UFunction*) UObject::GObjObjects()->Data[ 52006 ];

	ASFXAI_Core_execFireWeaponAtTarget_Parms FireWeaponAtTarget_Parms;
	FireWeaponAtTarget_Parms.oTarget = oTarget;
	FireWeaponAtTarget_Parms.bCheckLOS = bCheckLOS;
	memcpy ( &FireWeaponAtTarget_Parms.FireDelegate, &FireDelegate, 0xC );

	this->ProcessEvent ( pFnFireWeaponAtTarget, &FireWeaponAtTarget_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.UsePowerOnTarget
// [0x00020002] 
// Parameters infos:
// struct FName                   nmPowerToUse                   ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_Parm )
// struct FScriptDelegate         PowerDelegate                  ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreSuppression             ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_Core::UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression )
{
	static UFunction* pFnUsePowerOnTarget = NULL;

	if ( ! pFnUsePowerOnTarget )
		pFnUsePowerOnTarget = (UFunction*) UObject::GObjObjects()->Data[ 52001 ];

	ASFXAI_Core_execUsePowerOnTarget_Parms UsePowerOnTarget_Parms;
	memcpy ( &UsePowerOnTarget_Parms.nmPowerToUse, &nmPowerToUse, 0x8 );
	UsePowerOnTarget_Parms.oTarget = oTarget;
	memcpy ( &UsePowerOnTarget_Parms.PowerDelegate, &PowerDelegate, 0xC );
	UsePowerOnTarget_Parms.bIgnoreSuppression = bIgnoreSuppression;

	this->ProcessEvent ( pFnUsePowerOnTarget, &UsePowerOnTarget_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.NotifyPlaypenChanged
// [0x00020000] 
// Parameters infos:

void ASFXAI_Core::NotifyPlaypenChanged ( )
{
	static UFunction* pFnNotifyPlaypenChanged = NULL;

	if ( ! pFnNotifyPlaypenChanged )
		pFnNotifyPlaypenChanged = (UFunction*) UObject::GObjObjects()->Data[ 52000 ];

	ASFXAI_Core_execNotifyPlaypenChanged_Parms NotifyPlaypenChanged_Parms;

	this->ProcessEvent ( pFnNotifyPlaypenChanged, &NotifyPlaypenChanged_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.TryInvalidateTargetFlank
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Core::TryInvalidateTargetFlank ( )
{
	static UFunction* pFnTryInvalidateTargetFlank = NULL;

	if ( ! pFnTryInvalidateTargetFlank )
		pFnTryInvalidateTargetFlank = (UFunction*) UObject::GObjObjects()->Data[ 51913 ];

	ASFXAI_Core_execTryInvalidateTargetFlank_Parms TryInvalidateTargetFlank_Parms;

	this->ProcessEvent ( pFnTryInvalidateTargetFlank, &TryInvalidateTargetFlank_Parms, NULL );

	return TryInvalidateTargetFlank_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.TryInvalidateTargetRange
// [0x00120000] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fRangeToTarget                 ( CPF_Parm )

bool ASFXAI_Core::TryInvalidateTargetRange ( float fRangeToTarget )
{
	static UFunction* pFnTryInvalidateTargetRange = NULL;

	if ( ! pFnTryInvalidateTargetRange )
		pFnTryInvalidateTargetRange = (UFunction*) UObject::GObjObjects()->Data[ 51915 ];

	ASFXAI_Core_execTryInvalidateTargetRange_Parms TryInvalidateTargetRange_Parms;
	TryInvalidateTargetRange_Parms.fRangeToTarget = fRangeToTarget;

	this->ProcessEvent ( pFnTryInvalidateTargetRange, &TryInvalidateTargetRange_Parms, NULL );

	return TryInvalidateTargetRange_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Core.MoveToDelegate
// [0x00120000] 
// Parameters infos:
// int                            nReason                        ( CPF_Parm )

void ASFXAI_Core::MoveToDelegate ( int nReason )
{
	static UFunction* pFnMoveToDelegate = NULL;

	if ( ! pFnMoveToDelegate )
		pFnMoveToDelegate = (UFunction*) UObject::GObjObjects()->Data[ 51917 ];

	ASFXAI_Core_execMoveToDelegate_Parms MoveToDelegate_Parms;
	MoveToDelegate_Parms.nReason = nReason;

	this->ProcessEvent ( pFnMoveToDelegate, &MoveToDelegate_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.FireWeaponDelegate
// [0x00120000] 
// Parameters infos:
// int                            nReason                        ( CPF_Parm )

void ASFXAI_Core::FireWeaponDelegate ( int nReason )
{
	static UFunction* pFnFireWeaponDelegate = NULL;

	if ( ! pFnFireWeaponDelegate )
		pFnFireWeaponDelegate = (UFunction*) UObject::GObjObjects()->Data[ 51919 ];

	ASFXAI_Core_execFireWeaponDelegate_Parms FireWeaponDelegate_Parms;
	FireWeaponDelegate_Parms.nReason = nReason;

	this->ProcessEvent ( pFnFireWeaponDelegate, &FireWeaponDelegate_Parms, NULL );
};

// Function SFXGame.SFXAI_Core.UsePowerDelegate
// [0x00120000] 
// Parameters infos:
// int                            nReason                        ( CPF_Parm )

void ASFXAI_Core::UsePowerDelegate ( int nReason )
{
	static UFunction* pFnUsePowerDelegate = NULL;

	if ( ! pFnUsePowerDelegate )
		pFnUsePowerDelegate = (UFunction*) UObject::GObjObjects()->Data[ 51921 ];

	ASFXAI_Core_execUsePowerDelegate_Parms UsePowerDelegate_Parms;
	UsePowerDelegate_Parms.nReason = nReason;

	this->ProcessEvent ( pFnUsePowerDelegate, &UsePowerDelegate_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Power.ShutDown
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Power::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 59570 ];

	ASFXProjectile_Power_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Power.Recycle
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Power::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 59569 ];

	ASFXProjectile_Power_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Power.Tick
// [0x00820102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile_Power::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 59566 ];

	ASFXProjectile_Power_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Power.InitializePowerProjectile
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// float                          fTravelSpeed                   ( CPF_Parm )
// float                          fRadius                        ( CPF_Parm )
// class UBioPower*               oPower                         ( CPF_Parm )

bool ASFXProjectile_Power::InitializePowerProjectile ( class AActor* oCaster, float fTravelSpeed, float fRadius, class UBioPower* oPower )
{
	static UFunction* pFnInitializePowerProjectile = NULL;

	if ( ! pFnInitializePowerProjectile )
		pFnInitializePowerProjectile = (UFunction*) UObject::GObjObjects()->Data[ 59554 ];

	ASFXProjectile_Power_execInitializePowerProjectile_Parms InitializePowerProjectile_Parms;
	InitializePowerProjectile_Parms.oCaster = oCaster;
	InitializePowerProjectile_Parms.fTravelSpeed = fTravelSpeed;
	InitializePowerProjectile_Parms.fRadius = fRadius;
	InitializePowerProjectile_Parms.oPower = oPower;

	this->ProcessEvent ( pFnInitializePowerProjectile, &InitializePowerProjectile_Parms, NULL );

	return InitializePowerProjectile_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile_Power.GenerateOnCastAt
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void ASFXProjectile_Power::eventGenerateOnCastAt ( class AActor* Target )
{
	static UFunction* pFnGenerateOnCastAt = NULL;

	if ( ! pFnGenerateOnCastAt )
		pFnGenerateOnCastAt = (UFunction*) UObject::GObjObjects()->Data[ 59552 ];

	ASFXProjectile_Power_eventGenerateOnCastAt_Parms GenerateOnCastAt_Parms;
	GenerateOnCastAt_Parms.Target = Target;

	this->ProcessEvent ( pFnGenerateOnCastAt, &GenerateOnCastAt_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Power.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_Power::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 59548 ];

	ASFXProjectile_Power_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Power.ProjectileHurtRadius
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          InDamageAmount                 ( CPF_Parm )
// float                          InDamageRadius                 ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool ASFXProjectile_Power::ProjectileHurtRadius ( float InDamageAmount, float InDamageRadius, float Momentum, struct FVector HurtOrigin, struct FVector HitNormal )
{
	static UFunction* pFnProjectileHurtRadius = NULL;

	if ( ! pFnProjectileHurtRadius )
		pFnProjectileHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 59533 ];

	ASFXProjectile_Power_execProjectileHurtRadius_Parms ProjectileHurtRadius_Parms;
	ProjectileHurtRadius_Parms.InDamageAmount = InDamageAmount;
	ProjectileHurtRadius_Parms.InDamageRadius = InDamageRadius;
	ProjectileHurtRadius_Parms.Momentum = Momentum;
	memcpy ( &ProjectileHurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	memcpy ( &ProjectileHurtRadius_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProjectileHurtRadius, &ProjectileHurtRadius_Parms, NULL );

	return ProjectileHurtRadius_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile_Power.DoPowerImpact
// [0x00020002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// int                            nImpactedCount                 ( CPF_Parm )

void ASFXProjectile_Power::DoPowerImpact ( class AActor* oActor, class AController* InstigatedBy, int nImpactedCount )
{
	static UFunction* pFnDoPowerImpact = NULL;

	if ( ! pFnDoPowerImpact )
		pFnDoPowerImpact = (UFunction*) UObject::GObjObjects()->Data[ 59529 ];

	ASFXProjectile_Power_execDoPowerImpact_Parms DoPowerImpact_Parms;
	DoPowerImpact_Parms.oActor = oActor;
	DoPowerImpact_Parms.InstigatedBy = InstigatedBy;
	DoPowerImpact_Parms.nImpactedCount = nImpactedCount;

	this->ProcessEvent ( pFnDoPowerImpact, &DoPowerImpact_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Power.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_Power::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 59525 ];

	ASFXProjectile_Power_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Power.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ASFXProjectile_Power::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 59521 ];

	ASFXProjectile_Power_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Power.Timer
// [0x00020100] 
// Parameters infos:

void ASFXProjectile_Power::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 59520 ];

	ASFXProjectile_Power_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Power.GetDamageRadius
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXProjectile_Power::GetDamageRadius ( )
{
	static UFunction* pFnGetDamageRadius = NULL;

	if ( ! pFnGetDamageRadius )
		pFnGetDamageRadius = (UFunction*) UObject::GObjObjects()->Data[ 59518 ];

	ASFXProjectile_Power_execGetDamageRadius_Parms GetDamageRadius_Parms;

	this->ProcessEvent ( pFnGetDamageRadius, &GetDamageRadius_Parms, NULL );

	return GetDamageRadius_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile_Explosive.ProjectileHurtRadius
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          InDamageAmount                 ( CPF_Parm )
// float                          InDamageRadius                 ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool ASFXProjectile_Explosive::ProjectileHurtRadius ( float InDamageAmount, float InDamageRadius, float Momentum, struct FVector HurtOrigin, struct FVector HitNormal )
{
	static UFunction* pFnProjectileHurtRadius = NULL;

	if ( ! pFnProjectileHurtRadius )
		pFnProjectileHurtRadius = (UFunction*) UObject::GObjObjects()->Data[ 59487 ];

	ASFXProjectile_Explosive_execProjectileHurtRadius_Parms ProjectileHurtRadius_Parms;
	ProjectileHurtRadius_Parms.InDamageAmount = InDamageAmount;
	ProjectileHurtRadius_Parms.InDamageRadius = InDamageRadius;
	ProjectileHurtRadius_Parms.Momentum = Momentum;
	memcpy ( &ProjectileHurtRadius_Parms.HurtOrigin, &HurtOrigin, 0xC );
	memcpy ( &ProjectileHurtRadius_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProjectileHurtRadius, &ProjectileHurtRadius_Parms, NULL );

	return ProjectileHurtRadius_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile_Explosive.DoImpact
// [0x00020002] 
// Parameters infos:
// class AActor*                  InImpactedActor                ( CPF_Parm )
// class AController*             InInstigatorController         ( CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm )
// float                          InDamageRadius                 ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )

void ASFXProjectile_Explosive::DoImpact ( class AActor* InImpactedActor, class AController* InInstigatorController, float BaseDamage, float InDamageRadius, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage )
{
	static UFunction* pFnDoImpact = NULL;

	if ( ! pFnDoImpact )
		pFnDoImpact = (UFunction*) UObject::GObjObjects()->Data[ 59477 ];

	ASFXProjectile_Explosive_execDoImpact_Parms DoImpact_Parms;
	DoImpact_Parms.InImpactedActor = InImpactedActor;
	DoImpact_Parms.InInstigatorController = InInstigatorController;
	DoImpact_Parms.BaseDamage = BaseDamage;
	DoImpact_Parms.InDamageRadius = InDamageRadius;
	DoImpact_Parms.Momentum = Momentum;
	memcpy ( &DoImpact_Parms.HurtOrigin, &HurtOrigin, 0xC );
	DoImpact_Parms.bFullDamage = bFullDamage;

	this->ProcessEvent ( pFnDoImpact, &DoImpact_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Explosive.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_Explosive::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 59473 ];

	ASFXProjectile_Explosive_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Explosive.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_Explosive::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 59470 ];

	ASFXProjectile_Explosive_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Explosive.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ASFXProjectile_Explosive::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 59466 ];

	ASFXProjectile_Explosive_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Explosive.Timer
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Explosive::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = (UFunction*) UObject::GObjObjects()->Data[ 59465 ];

	ASFXProjectile_Explosive_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Explosive.SpawnExplosionEffects
// [0x00820102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_Explosive::SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnSpawnExplosionEffects = NULL;

	if ( ! pFnSpawnExplosionEffects )
		pFnSpawnExplosionEffects = (UFunction*) UObject::GObjObjects()->Data[ 59455 ];

	ASFXProjectile_Explosive_execSpawnExplosionEffects_Parms SpawnExplosionEffects_Parms;
	memcpy ( &SpawnExplosionEffects_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &SpawnExplosionEffects_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnSpawnExplosionEffects, &SpawnExplosionEffects_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Explosive.SetExplosionEffectParameters
// [0x00020100] 
// Parameters infos:
// class UParticleSystemComponent* ProjExplosion                  ( CPF_Parm | CPF_EditInline )

void ASFXProjectile_Explosive::SetExplosionEffectParameters ( class UParticleSystemComponent* ProjExplosion )
{
	static UFunction* pFnSetExplosionEffectParameters = NULL;

	if ( ! pFnSetExplosionEffectParameters )
		pFnSetExplosionEffectParameters = (UFunction*) UObject::GObjObjects()->Data[ 59453 ];

	ASFXProjectile_Explosive_execSetExplosionEffectParameters_Parms SetExplosionEffectParameters_Parms;
	SetExplosionEffectParameters_Parms.ProjExplosion = ProjExplosion;

	this->ProcessEvent ( pFnSetExplosionEffectParameters, &SetExplosionEffectParameters_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Explosive.EffectIsRelevant
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool ASFXProjectile_Explosive::EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance )
{
	static UFunction* pFnEffectIsRelevant = NULL;

	if ( ! pFnEffectIsRelevant )
		pFnEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 59447 ];

	ASFXProjectile_Explosive_execEffectIsRelevant_Parms EffectIsRelevant_Parms;
	memcpy ( &EffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	EffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	EffectIsRelevant_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnEffectIsRelevant, &EffectIsRelevant_Parms, NULL );

	return EffectIsRelevant_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile_Explosive.CheckMaxEffectDistance
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APlayerController*       P                              ( CPF_Parm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool ASFXProjectile_Explosive::CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance )
{
	static UFunction* pFnCheckMaxEffectDistance = NULL;

	if ( ! pFnCheckMaxEffectDistance )
		pFnCheckMaxEffectDistance = (UFunction*) UObject::GObjObjects()->Data[ 59441 ];

	ASFXProjectile_Explosive_execCheckMaxEffectDistance_Parms CheckMaxEffectDistance_Parms;
	CheckMaxEffectDistance_Parms.P = P;
	memcpy ( &CheckMaxEffectDistance_Parms.SpawnLocation, &SpawnLocation, 0xC );
	CheckMaxEffectDistance_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnCheckMaxEffectDistance, &CheckMaxEffectDistance_Parms, NULL );

	return CheckMaxEffectDistance_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile_Explosive.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ASFXProjectile_Explosive::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 59439 ];

	ASFXProjectile_Explosive_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Explosive.Recycle
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Explosive::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 59438 ];

	ASFXProjectile_Explosive_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Explosive.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXProjectile_Explosive::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 59437 ];

	ASFXProjectile_Explosive_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Explosive.CanSplash
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXProjectile_Explosive::CanSplash ( )
{
	static UFunction* pFnCanSplash = NULL;

	if ( ! pFnCanSplash )
		pFnCanSplash = (UFunction*) UObject::GObjObjects()->Data[ 59435 ];

	ASFXProjectile_Explosive_execCanSplash_Parms CanSplash_Parms;

	this->ProcessEvent ( pFnCanSplash, &CanSplash_Parms, NULL );

	return CanSplash_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile_Explosive.Landed
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ASFXProjectile_Explosive::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 59432 ];

	ASFXProjectile_Explosive_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function SFXGame.SFXProjectile.SpawnImpactEffect
// [0x00020100] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile::SpawnImpactEffect ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnSpawnImpactEffect = NULL;

	if ( ! pFnSpawnImpactEffect )
		pFnSpawnImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 59407 ];

	ASFXProjectile_execSpawnImpactEffect_Parms SpawnImpactEffect_Parms;
	memcpy ( &SpawnImpactEffect_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &SpawnImpactEffect_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnSpawnImpactEffect, &SpawnImpactEffect_Parms, NULL );
};

// Function SFXGame.SFXProjectile.GetDamageRadius
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXProjectile::GetDamageRadius ( )
{
	static UFunction* pFnGetDamageRadius = NULL;

	if ( ! pFnGetDamageRadius )
		pFnGetDamageRadius = (UFunction*) UObject::GObjObjects()->Data[ 59404 ];

	ASFXProjectile_execGetDamageRadius_Parms GetDamageRadius_Parms;

	this->ProcessEvent ( pFnGetDamageRadius, &GetDamageRadius_Parms, NULL );

	return GetDamageRadius_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile.GetDamage
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXProjectile::GetDamage ( )
{
	static UFunction* pFnGetDamage = NULL;

	if ( ! pFnGetDamage )
		pFnGetDamage = (UFunction*) UObject::GObjObjects()->Data[ 59401 ];

	ASFXProjectile_execGetDamage_Parms GetDamage_Parms;

	this->ProcessEvent ( pFnGetDamage, &GetDamage_Parms, NULL );

	return GetDamage_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile.ProcessTouch
// [0x00020102] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 59397 ];

	ASFXProjectile_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function SFXGame.SFXProjectile.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXProjectile::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 59395 ];

	ASFXProjectile_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXProjectile.ProjEffectsTrailFinished
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// class UParticleSystemComponent* PSC                            ( CPF_Parm | CPF_EditInline )

void ASFXProjectile::ProjEffectsTrailFinished ( class UParticleSystemComponent* PSC )
{
	static UFunction* pFnProjEffectsTrailFinished = NULL;

	if ( ! pFnProjEffectsTrailFinished )
		pFnProjEffectsTrailFinished = (UFunction*) UObject::GObjObjects()->Data[ 59393 ];

	ASFXProjectile_execProjEffectsTrailFinished_Parms ProjEffectsTrailFinished_Parms;
	ProjEffectsTrailFinished_Parms.PSC = PSC;

	this->ProcessEvent ( pFnProjEffectsTrailFinished, &ProjEffectsTrailFinished_Parms, NULL );
};

// Function SFXGame.SFXProjectile.SetProjectileHidden
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bHide                          ( CPF_Parm )

void ASFXProjectile::SetProjectileHidden ( unsigned long bHide )
{
	static UFunction* pFnSetProjectileHidden = NULL;

	if ( ! pFnSetProjectileHidden )
		pFnSetProjectileHidden = (UFunction*) UObject::GObjObjects()->Data[ 59377 ];

	ASFXProjectile_execSetProjectileHidden_Parms SetProjectileHidden_Parms;
	SetProjectileHidden_Parms.bHide = bHide;

	this->ProcessEvent ( pFnSetProjectileHidden, &SetProjectileHidden_Parms, NULL );
};

// Function SFXGame.SFXProjectile.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 59389 ];

	ASFXProjectile_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function SFXGame.SFXProjectile.HitWall
// [0x00020922] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )
// class UPrimitiveComponent*     WallComp                       ( CPF_Parm | CPF_EditInline )

void ASFXProjectile::eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = (UFunction*) UObject::GObjObjects()->Data[ 59385 ];

	ASFXProjectile_eventHitWall_Parms HitWall_Parms;
	memcpy ( &HitWall_Parms.HitNormal, &HitNormal, 0xC );
	HitWall_Parms.Wall = Wall;
	HitWall_Parms.WallComp = WallComp;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function SFXGame.SFXProjectile.OutsideWorldBounds
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXProjectile::eventOutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = (UFunction*) UObject::GObjObjects()->Data[ 59384 ];

	ASFXProjectile_eventOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function SFXGame.SFXProjectile.IsShuttingDown
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXProjectile::IsShuttingDown ( )
{
	static UFunction* pFnIsShuttingDown = NULL;

	if ( ! pFnIsShuttingDown )
		pFnIsShuttingDown = (UFunction*) UObject::GObjObjects()->Data[ 59382 ];

	ASFXProjectile_execIsShuttingDown_Parms IsShuttingDown_Parms;

	this->ProcessEvent ( pFnIsShuttingDown, &IsShuttingDown_Parms, NULL );

	return IsShuttingDown_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile.ShutDown
// [0x00020102] 
// Parameters infos:

void ASFXProjectile::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 59381 ];

	ASFXProjectile_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function SFXGame.SFXProjectile.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 Direction                      ( CPF_Parm )

void ASFXProjectile::Init ( struct FVector Direction )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 59379 ];

	ASFXProjectile_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.Direction, &Direction, 0xC );

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXProjectile.ShutdownPostEffects
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void ASFXProjectile::ShutdownPostEffects ( )
{
	static UFunction* pFnShutdownPostEffects = NULL;

	if ( ! pFnShutdownPostEffects )
		pFnShutdownPostEffects = (UFunction*) UObject::GObjObjects()->Data[ 59378 ];

	ASFXProjectile_execShutdownPostEffects_Parms ShutdownPostEffects_Parms;

	this->ProcessEvent ( pFnShutdownPostEffects, &ShutdownPostEffects_Parms, NULL );
};

// Function SFXGame.SFXProjectile.Reuse
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void ASFXProjectile::Reuse ( )
{
	static UFunction* pFnReuse = NULL;

	if ( ! pFnReuse )
		pFnReuse = (UFunction*) UObject::GObjObjects()->Data[ 57841 ];

	ASFXProjectile_execReuse_Parms Reuse_Parms;

	this->ProcessEvent ( pFnReuse, &Reuse_Parms, NULL );
};

// Function SFXGame.SFXProjectile.Recycle
// [0x00020102] 
// Parameters infos:

void ASFXProjectile::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 59376 ];

	ASFXProjectile_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function SFXGame.SFXProjectile.SpawnFlightEffects
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void ASFXProjectile::SpawnFlightEffects ( )
{
	static UFunction* pFnSpawnFlightEffects = NULL;

	if ( ! pFnSpawnFlightEffects )
		pFnSpawnFlightEffects = (UFunction*) UObject::GObjObjects()->Data[ 59374 ];

	ASFXProjectile_execSpawnFlightEffects_Parms SpawnFlightEffects_Parms;

	this->ProcessEvent ( pFnSpawnFlightEffects, &SpawnFlightEffects_Parms, NULL );
};

// Function SFXGame.BioSeqEvt_AffectedByPower.HandleActivation
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// class UClass*                  inPower                        ( CPF_Parm )

void UBioSeqEvt_AffectedByPower::HandleActivation ( class AActor* InOriginator, class AActor* InInstigator, class UClass* inPower )
{
	static UFunction* pFnHandleActivation = NULL;

	if ( ! pFnHandleActivation )
		pFnHandleActivation = (UFunction*) UObject::GObjObjects()->Data[ 29546 ];

	UBioSeqEvt_AffectedByPower_execHandleActivation_Parms HandleActivation_Parms;
	HandleActivation_Parms.InOriginator = InOriginator;
	HandleActivation_Parms.InInstigator = InInstigator;
	HandleActivation_Parms.inPower = inPower;

	this->ProcessEvent ( pFnHandleActivation, &HandleActivation_Parms, NULL );
};

// Function SFXGame.BioActiveShoot.GetEventTypeName
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName UBioActiveShoot::eventGetEventTypeName ( )
{
	static UFunction* pFnGetEventTypeName = NULL;

	if ( ! pFnGetEventTypeName )
		pFnGetEventTypeName = (UFunction*) UObject::GObjObjects()->Data[ 29572 ];

	UBioActiveShoot_eventGetEventTypeName_Parms GetEventTypeName_Parms;

	this->ProcessEvent ( pFnGetEventTypeName, &GetEventTypeName_Parms, NULL );

	return GetEventTypeName_Parms.ReturnValue;
};

// Function SFXGame.BioActiveShoot.ValidSuperMode
// [0x00022802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eMode                          ( CPF_Parm )

bool UBioActiveShoot::eventValidSuperMode ( unsigned char eMode )
{
	static UFunction* pFnValidSuperMode = NULL;

	if ( ! pFnValidSuperMode )
		pFnValidSuperMode = (UFunction*) UObject::GObjObjects()->Data[ 29569 ];

	UBioActiveShoot_eventValidSuperMode_Parms ValidSuperMode_Parms;
	ValidSuperMode_Parms.eMode = eMode;

	this->ProcessEvent ( pFnValidSuperMode, &ValidSuperMode_Parms, NULL );

	return ValidSuperMode_Parms.ReturnValue;
};

// Function SFXGame.SFXHeavyWeapon.PlayLowAmmoVocalization
// [0x00020000] 
// Parameters infos:

void ASFXHeavyWeapon::PlayLowAmmoVocalization ( )
{
	static UFunction* pFnPlayLowAmmoVocalization = NULL;

	if ( ! pFnPlayLowAmmoVocalization )
		pFnPlayLowAmmoVocalization = (UFunction*) UObject::GObjObjects()->Data[ 57097 ];

	ASFXHeavyWeapon_execPlayLowAmmoVocalization_Parms PlayLowAmmoVocalization_Parms;

	this->ProcessEvent ( pFnPlayLowAmmoVocalization, &PlayLowAmmoVocalization_Parms, NULL );
};

// Function SFXGame.SFXHeavyWeapon.AddHeavyAmmo
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Ammo                           ( CPF_Parm )

int ASFXHeavyWeapon::AddHeavyAmmo ( int Ammo )
{
	static UFunction* pFnAddHeavyAmmo = NULL;

	if ( ! pFnAddHeavyAmmo )
		pFnAddHeavyAmmo = (UFunction*) UObject::GObjObjects()->Data[ 33131 ];

	ASFXHeavyWeapon_execAddHeavyAmmo_Parms AddHeavyAmmo_Parms;
	AddHeavyAmmo_Parms.Ammo = Ammo;

	this->ProcessEvent ( pFnAddHeavyAmmo, &AddHeavyAmmo_Parms, NULL );

	return AddHeavyAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXHeavyWeapon.ScaleWeapon
// [0x00020002] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void ASFXHeavyWeapon::ScaleWeapon ( int Level )
{
	static UFunction* pFnScaleWeapon = NULL;

	if ( ! pFnScaleWeapon )
		pFnScaleWeapon = (UFunction*) UObject::GObjObjects()->Data[ 57092 ];

	ASFXHeavyWeapon_execScaleWeapon_Parms ScaleWeapon_Parms;
	ScaleWeapon_Parms.Level = Level;

	this->ProcessEvent ( pFnScaleWeapon, &ScaleWeapon_Parms, NULL );
};

// Function SFXGame.SFXHeavyWeapon.GetCurrentSpareAmmo
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXHeavyWeapon::GetCurrentSpareAmmo ( )
{
	static UFunction* pFnGetCurrentSpareAmmo = NULL;

	if ( ! pFnGetCurrentSpareAmmo )
		pFnGetCurrentSpareAmmo = (UFunction*) UObject::GObjObjects()->Data[ 57090 ];

	ASFXHeavyWeapon_execGetCurrentSpareAmmo_Parms GetCurrentSpareAmmo_Parms;

	this->ProcessEvent ( pFnGetCurrentSpareAmmo, &GetCurrentSpareAmmo_Parms, NULL );

	return GetCurrentSpareAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXHeavyWeapon.AddAmmo
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int ASFXHeavyWeapon::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = (UFunction*) UObject::GObjObjects()->Data[ 57087 ];

	ASFXHeavyWeapon_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXHeavyWeapon.ConsumeAmmo
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXHeavyWeapon::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 57085 ];

	ASFXHeavyWeapon_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CalculateCoverLeanOutOffset
// [0x00420802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Direction                      ( CPF_Parm )
// unsigned char                  Type                           ( CPF_Parm )
// struct FVector                 Offset                         ( CPF_Parm | CPF_OutParm )

bool ASFXWeapon::eventCalculateCoverLeanOutOffset ( unsigned char Direction, unsigned char Type, struct FVector* Offset )
{
	static UFunction* pFnCalculateCoverLeanOutOffset = NULL;

	if ( ! pFnCalculateCoverLeanOutOffset )
		pFnCalculateCoverLeanOutOffset = (UFunction*) UObject::GObjObjects()->Data[ 57062 ];

	ASFXWeapon_eventCalculateCoverLeanOutOffset_Parms CalculateCoverLeanOutOffset_Parms;
	CalculateCoverLeanOutOffset_Parms.Direction = Direction;
	CalculateCoverLeanOutOffset_Parms.Type = Type;

	this->ProcessEvent ( pFnCalculateCoverLeanOutOffset, &CalculateCoverLeanOutOffset_Parms, NULL );

	if ( Offset )
		memcpy ( Offset, &CalculateCoverLeanOutOffset_Parms.Offset, 0xC );

	return CalculateCoverLeanOutOffset_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetGeneralDescription
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXWeapon::GetGeneralDescription ( )
{
	static UFunction* pFnGetGeneralDescription = NULL;

	if ( ! pFnGetGeneralDescription )
		pFnGetGeneralDescription = (UFunction*) UObject::GObjObjects()->Data[ 57060 ];

	ASFXWeapon_execGetGeneralDescription_Parms GetGeneralDescription_Parms;

	this->ProcessEvent ( pFnGetGeneralDescription, &GetGeneralDescription_Parms, NULL );

	return GetGeneralDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetShortDescription
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXWeapon::GetShortDescription ( )
{
	static UFunction* pFnGetShortDescription = NULL;

	if ( ! pFnGetShortDescription )
		pFnGetShortDescription = (UFunction*) UObject::GObjObjects()->Data[ 57058 ];

	ASFXWeapon_execGetShortDescription_Parms GetShortDescription_Parms;

	this->ProcessEvent ( pFnGetShortDescription, &GetShortDescription_Parms, NULL );

	return GetShortDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetPrettyName
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXWeapon::GetPrettyName ( )
{
	static UFunction* pFnGetPrettyName = NULL;

	if ( ! pFnGetPrettyName )
		pFnGetPrettyName = (UFunction*) UObject::GObjObjects()->Data[ 57052 ];

	ASFXWeapon_execGetPrettyName_Parms GetPrettyName_Parms;

	this->ProcessEvent ( pFnGetPrettyName, &GetPrettyName_Parms, NULL );

	return GetPrettyName_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetWeaponDebug
// [0x00420100] 
// Parameters infos:
// TArray< struct FString >       DebugInfo                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXWeapon::GetWeaponDebug ( TArray< struct FString >* DebugInfo )
{
	static UFunction* pFnGetWeaponDebug = NULL;

	if ( ! pFnGetWeaponDebug )
		pFnGetWeaponDebug = (UFunction*) UObject::GObjObjects()->Data[ 57049 ];

	ASFXWeapon_execGetWeaponDebug_Parms GetWeaponDebug_Parms;

	this->ProcessEvent ( pFnGetWeaponDebug, &GetWeaponDebug_Parms, NULL );

	if ( DebugInfo )
		memcpy ( DebugInfo, &GetWeaponDebug_Parms.DebugInfo, 0xC );
};

// Function SFXGame.SFXWeapon.DrawDebugShot
// [0x00020100] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 EndLocation                    ( CPF_Parm )

void ASFXWeapon::DrawDebugShot ( struct FVector StartLocation, struct FVector EndLocation )
{
	static UFunction* pFnDrawDebugShot = NULL;

	if ( ! pFnDrawDebugShot )
		pFnDrawDebugShot = (UFunction*) UObject::GObjObjects()->Data[ 57046 ];

	ASFXWeapon_execDrawDebugShot_Parms DrawDebugShot_Parms;
	memcpy ( &DrawDebugShot_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DrawDebugShot_Parms.EndLocation, &EndLocation, 0xC );

	this->ProcessEvent ( pFnDrawDebugShot, &DrawDebugShot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DisableAmmoPowerHologram
// [0x00020002] 
// Parameters infos:

void ASFXWeapon::DisableAmmoPowerHologram ( )
{
	static UFunction* pFnDisableAmmoPowerHologram = NULL;

	if ( ! pFnDisableAmmoPowerHologram )
		pFnDisableAmmoPowerHologram = (UFunction*) UObject::GObjObjects()->Data[ 57045 ];

	ASFXWeapon_execDisableAmmoPowerHologram_Parms DisableAmmoPowerHologram_Parms;

	this->ProcessEvent ( pFnDisableAmmoPowerHologram, &DisableAmmoPowerHologram_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EnableAmmoPowerHologram
// [0x00020002] 
// Parameters infos:
// class UParticleSystem*         Template                       ( CPF_Parm )
// class UParticleSystem*         IconTemplate                   ( CPF_Parm )

void ASFXWeapon::EnableAmmoPowerHologram ( class UParticleSystem* Template, class UParticleSystem* IconTemplate )
{
	static UFunction* pFnEnableAmmoPowerHologram = NULL;

	if ( ! pFnEnableAmmoPowerHologram )
		pFnEnableAmmoPowerHologram = (UFunction*) UObject::GObjObjects()->Data[ 57040 ];

	ASFXWeapon_execEnableAmmoPowerHologram_Parms EnableAmmoPowerHologram_Parms;
	EnableAmmoPowerHologram_Parms.Template = Template;
	EnableAmmoPowerHologram_Parms.IconTemplate = IconTemplate;

	this->ProcessEvent ( pFnEnableAmmoPowerHologram, &EnableAmmoPowerHologram_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXWeapon::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 57039 ];

	ASFXWeapon_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HolderDied
// [0x00020002] 
// Parameters infos:

void ASFXWeapon::HolderDied ( )
{
	static UFunction* pFnHolderDied = NULL;

	if ( ! pFnHolderDied )
		pFnHolderDied = (UFunction*) UObject::GObjObjects()->Data[ 57038 ];

	ASFXWeapon_execHolderDied_Parms HolderDied_Parms;

	this->ProcessEvent ( pFnHolderDied, &HolderDied_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DropFrom
// [0x00020002] 
// Parameters infos:
// struct FVector                 StartLocation                  ( CPF_Parm )
// struct FVector                 StartVelocity                  ( CPF_Parm )

void ASFXWeapon::DropFrom ( struct FVector StartLocation, struct FVector StartVelocity )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = (UFunction*) UObject::GObjObjects()->Data[ 57030 ];

	ASFXWeapon_execDropFrom_Parms DropFrom_Parms;
	memcpy ( &DropFrom_Parms.StartLocation, &StartLocation, 0xC );
	memcpy ( &DropFrom_Parms.StartVelocity, &StartVelocity, 0xC );

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CanThrow
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon::CanThrow ( )
{
	static UFunction* pFnCanThrow = NULL;

	if ( ! pFnCanThrow )
		pFnCanThrow = (UFunction*) UObject::GObjObjects()->Data[ 57028 ];

	ASFXWeapon_execCanThrow_Parms CanThrow_Parms;

	this->ProcessEvent ( pFnCanThrow, &CanThrow_Parms, NULL );

	return CanThrow_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.DetachWeapon
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = (UFunction*) UObject::GObjObjects()->Data[ 57026 ];

	ASFXWeapon_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AttachMuzzleEffectsComponents
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class USkeletalMeshComponent*  SkelMesh                       ( CPF_Parm | CPF_EditInline )
// struct FName                   MuzzleSocket                   ( CPF_OptionalParm | CPF_Parm )
// struct FName                   CasingSocket                   ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon::eventAttachMuzzleEffectsComponents ( class USkeletalMeshComponent* SkelMesh, struct FName MuzzleSocket, struct FName CasingSocket )
{
	static UFunction* pFnAttachMuzzleEffectsComponents = NULL;

	if ( ! pFnAttachMuzzleEffectsComponents )
		pFnAttachMuzzleEffectsComponents = (UFunction*) UObject::GObjObjects()->Data[ 57022 ];

	ASFXWeapon_eventAttachMuzzleEffectsComponents_Parms AttachMuzzleEffectsComponents_Parms;
	AttachMuzzleEffectsComponents_Parms.SkelMesh = SkelMesh;
	memcpy ( &AttachMuzzleEffectsComponents_Parms.MuzzleSocket, &MuzzleSocket, 0x8 );
	memcpy ( &AttachMuzzleEffectsComponents_Parms.CasingSocket, &CasingSocket, 0x8 );

	this->ProcessEvent ( pFnAttachMuzzleEffectsComponents, &AttachMuzzleEffectsComponents_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AttachWeaponTo
// [0x00020102] 
// Parameters infos:
// class USkeletalMeshComponent*  MeshCpnt                       ( CPF_Parm | CPF_EditInline )
// struct FName                   SocketName                     ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon::AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = (UFunction*) UObject::GObjObjects()->Data[ 57017 ];

	ASFXWeapon_execAttachWeaponTo_Parms AttachWeaponTo_Parms;
	AttachWeaponTo_Parms.MeshCpnt = MeshCpnt;
	memcpy ( &AttachWeaponTo_Parms.SocketName, &SocketName, 0x8 );

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.AssignToSlot
// [0x00020002] 
// Parameters infos:
// unsigned char                  Slot                           ( CPF_Parm )

void ASFXWeapon::AssignToSlot ( unsigned char Slot )
{
	static UFunction* pFnAssignToSlot = NULL;

	if ( ! pFnAssignToSlot )
		pFnAssignToSlot = (UFunction*) UObject::GObjObjects()->Data[ 57014 ];

	ASFXWeapon_execAssignToSlot_Parms AssignToSlot_Parms;
	AssignToSlot_Parms.Slot = Slot;

	this->ProcessEvent ( pFnAssignToSlot, &AssignToSlot_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GivenTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   thisPawn                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon::GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 57011 ];

	ASFXWeapon_execGivenTo_Parms GivenTo_Parms;
	GivenTo_Parms.thisPawn = thisPawn;
	GivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EquipTimedOut
// [0x00020100] 
// Parameters infos:

void ASFXWeapon::EquipTimedOut ( )
{
	static UFunction* pFnEquipTimedOut = NULL;

	if ( ! pFnEquipTimedOut )
		pFnEquipTimedOut = (UFunction*) UObject::GObjObjects()->Data[ 56997 ];

	ASFXWeapon_execEquipTimedOut_Parms EquipTimedOut_Parms;

	this->ProcessEvent ( pFnEquipTimedOut, &EquipTimedOut_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EquipFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon::EquipFinished ( )
{
	static UFunction* pFnEquipFinished = NULL;

	if ( ! pFnEquipFinished )
		pFnEquipFinished = (UFunction*) UObject::GObjObjects()->Data[ 56996 ];

	ASFXWeapon_execEquipFinished_Parms EquipFinished_Parms;

	this->ProcessEvent ( pFnEquipFinished, &EquipFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EquipNearFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon::EquipNearFinished ( )
{
	static UFunction* pFnEquipNearFinished = NULL;

	if ( ! pFnEquipNearFinished )
		pFnEquipNearFinished = (UFunction*) UObject::GObjObjects()->Data[ 56995 ];

	ASFXWeapon_execEquipNearFinished_Parms EquipNearFinished_Parms;

	this->ProcessEvent ( pFnEquipNearFinished, &EquipNearFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Collapse
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::Collapse ( )
{
	static UFunction* pFnCollapse = NULL;

	if ( ! pFnCollapse )
		pFnCollapse = (UFunction*) UObject::GObjObjects()->Data[ 56994 ];

	ASFXWeapon_execCollapse_Parms Collapse_Parms;

	this->ProcessEvent ( pFnCollapse, &Collapse_Parms, NULL );
};

// Function SFXGame.SFXWeapon.Expand
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::Expand ( )
{
	static UFunction* pFnExpand = NULL;

	if ( ! pFnExpand )
		pFnExpand = (UFunction*) UObject::GObjObjects()->Data[ 56993 ];

	ASFXWeapon_execExpand_Parms Expand_Parms;

	this->ProcessEvent ( pFnExpand, &Expand_Parms, NULL );
};

// Function SFXGame.SFXWeapon.UnEquipTimedOut
// [0x00020100] 
// Parameters infos:

void ASFXWeapon::UnEquipTimedOut ( )
{
	static UFunction* pFnUnEquipTimedOut = NULL;

	if ( ! pFnUnEquipTimedOut )
		pFnUnEquipTimedOut = (UFunction*) UObject::GObjObjects()->Data[ 56985 ];

	ASFXWeapon_execUnEquipTimedOut_Parms UnEquipTimedOut_Parms;

	this->ProcessEvent ( pFnUnEquipTimedOut, &UnEquipTimedOut_Parms, NULL );
};

// Function SFXGame.SFXWeapon.UnEquipFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon::UnEquipFinished ( )
{
	static UFunction* pFnUnEquipFinished = NULL;

	if ( ! pFnUnEquipFinished )
		pFnUnEquipFinished = (UFunction*) UObject::GObjObjects()->Data[ 56984 ];

	ASFXWeapon_execUnEquipFinished_Parms UnEquipFinished_Parms;

	this->ProcessEvent ( pFnUnEquipFinished, &UnEquipFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ReloadNearFinished
// [0x00020100] 
// Parameters infos:

void ASFXWeapon::ReloadNearFinished ( )
{
	static UFunction* pFnReloadNearFinished = NULL;

	if ( ! pFnReloadNearFinished )
		pFnReloadNearFinished = (UFunction*) UObject::GObjObjects()->Data[ 56969 ];

	ASFXWeapon_execReloadNearFinished_Parms ReloadNearFinished_Parms;

	this->ProcessEvent ( pFnReloadNearFinished, &ReloadNearFinished_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CancelReload
// [0x00020000] 
// Parameters infos:

void ASFXWeapon::CancelReload ( )
{
	static UFunction* pFnCancelReload = NULL;

	if ( ! pFnCancelReload )
		pFnCancelReload = (UFunction*) UObject::GObjObjects()->Data[ 56968 ];

	ASFXWeapon_execCancelReload_Parms CancelReload_Parms;

	this->ProcessEvent ( pFnCancelReload, &CancelReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.RefireBurst
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::RefireBurst ( )
{
	static UFunction* pFnRefireBurst = NULL;

	if ( ! pFnRefireBurst )
		pFnRefireBurst = (UFunction*) UObject::GObjObjects()->Data[ 56954 ];

	ASFXWeapon_execRefireBurst_Parms RefireBurst_Parms;

	this->ProcessEvent ( pFnRefireBurst, &RefireBurst_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ShouldRefire
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = (UFunction*) UObject::GObjObjects()->Data[ 56951 ];

	ASFXWeapon_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );

	return ShouldRefire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayNoAmmoFireSound
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::PlayNoAmmoFireSound ( )
{
	static UFunction* pFnPlayNoAmmoFireSound = NULL;

	if ( ! pFnPlayNoAmmoFireSound )
		pFnPlayNoAmmoFireSound = (UFunction*) UObject::GObjObjects()->Data[ 56950 ];

	ASFXWeapon_execPlayNoAmmoFireSound_Parms PlayNoAmmoFireSound_Parms;

	this->ProcessEvent ( pFnPlayNoAmmoFireSound, &PlayNoAmmoFireSound_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayNoAmmoEffects
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::PlayNoAmmoEffects ( )
{
	static UFunction* pFnPlayNoAmmoEffects = NULL;

	if ( ! pFnPlayNoAmmoEffects )
		pFnPlayNoAmmoEffects = (UFunction*) UObject::GObjObjects()->Data[ 56934 ];

	ASFXWeapon_execPlayNoAmmoEffects_Parms PlayNoAmmoEffects_Parms;

	this->ProcessEvent ( pFnPlayNoAmmoEffects, &PlayNoAmmoEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.TryReload
// [0x00020102] 
// Parameters infos:
// unsigned long                  bDisplayHint                   ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon::TryReload ( unsigned long bDisplayHint )
{
	static UFunction* pFnTryReload = NULL;

	if ( ! pFnTryReload )
		pFnTryReload = (UFunction*) UObject::GObjObjects()->Data[ 56931 ];

	ASFXWeapon_execTryReload_Parms TryReload_Parms;
	TryReload_Parms.bDisplayHint = bDisplayHint;

	this->ProcessEvent ( pFnTryReload, &TryReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DissipateHeat
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXWeapon::DissipateHeat ( float DeltaTime )
{
	static UFunction* pFnDissipateHeat = NULL;

	if ( ! pFnDissipateHeat )
		pFnDissipateHeat = (UFunction*) UObject::GObjObjects()->Data[ 56929 ];

	ASFXWeapon_execDissipateHeat_Parms DissipateHeat_Parms;
	DissipateHeat_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnDissipateHeat, &DissipateHeat_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DoReload
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::DoReload ( )
{
	static UFunction* pFnDoReload = NULL;

	if ( ! pFnDoReload )
		pFnDoReload = (UFunction*) UObject::GObjObjects()->Data[ 56927 ];

	ASFXWeapon_execDoReload_Parms DoReload_Parms;

	this->ProcessEvent ( pFnDoReload, &DoReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.DoEarlyReload
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::DoEarlyReload ( )
{
	static UFunction* pFnDoEarlyReload = NULL;

	if ( ! pFnDoEarlyReload )
		pFnDoEarlyReload = (UFunction*) UObject::GObjObjects()->Data[ 56926 ];

	ASFXWeapon_execDoEarlyReload_Parms DoEarlyReload_Parms;

	this->ProcessEvent ( pFnDoEarlyReload, &DoEarlyReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetReloadDuration
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon::GetReloadDuration ( )
{
	static UFunction* pFnGetReloadDuration = NULL;

	if ( ! pFnGetReloadDuration )
		pFnGetReloadDuration = (UFunction*) UObject::GObjObjects()->Data[ 56924 ];

	ASFXWeapon_execGetReloadDuration_Parms GetReloadDuration_Parms;

	this->ProcessEvent ( pFnGetReloadDuration, &GetReloadDuration_Parms, NULL );

	return GetReloadDuration_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ShouldAutoReload
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = (UFunction*) UObject::GObjObjects()->Data[ 56922 ];

	ASFXWeapon_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );

	return ShouldAutoReload_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.CanReload
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon::CanReload ( )
{
	static UFunction* pFnCanReload = NULL;

	if ( ! pFnCanReload )
		pFnCanReload = (UFunction*) UObject::GObjObjects()->Data[ 56919 ];

	ASFXWeapon_execCanReload_Parms CanReload_Parms;

	this->ProcessEvent ( pFnCanReload, &CanReload_Parms, NULL );

	return CanReload_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.EffectIsRelevant
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 SpawnLocation                  ( CPF_Parm )
// unsigned long                  bForceDedicated                ( CPF_Parm )
// float                          CullDistance                   ( CPF_OptionalParm | CPF_Parm )

bool ASFXWeapon::EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance )
{
	static UFunction* pFnEffectIsRelevant = NULL;

	if ( ! pFnEffectIsRelevant )
		pFnEffectIsRelevant = (UFunction*) UObject::GObjObjects()->Data[ 56914 ];

	ASFXWeapon_execEffectIsRelevant_Parms EffectIsRelevant_Parms;
	memcpy ( &EffectIsRelevant_Parms.SpawnLocation, &SpawnLocation, 0xC );
	EffectIsRelevant_Parms.bForceDedicated = bForceDedicated;
	EffectIsRelevant_Parms.CullDistance = CullDistance;

	this->ProcessEvent ( pFnEffectIsRelevant, &EffectIsRelevant_Parms, NULL );

	return EffectIsRelevant_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayReloadEject
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::PlayReloadEject ( )
{
	static UFunction* pFnPlayReloadEject = NULL;

	if ( ! pFnPlayReloadEject )
		pFnPlayReloadEject = (UFunction*) UObject::GObjObjects()->Data[ 56913 ];

	ASFXWeapon_execPlayReloadEject_Parms PlayReloadEject_Parms;

	this->ProcessEvent ( pFnPlayReloadEject, &PlayReloadEject_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StopFireEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon::StopFireEffects ( unsigned char FireModeNum )
{
	static UFunction* pFnStopFireEffects = NULL;

	if ( ! pFnStopFireEffects )
		pFnStopFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 56911 ];

	ASFXWeapon_execStopFireEffects_Parms StopFireEffects_Parms;
	StopFireEffects_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStopFireEffects, &StopFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.WeaponPlayWwiseEvent
// [0x00020102] 
// Parameters infos:
// class UWwiseEvent*             Sound                          ( CPF_Parm )
// float                          NoiseLoudness                  ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 SoundLoc                       ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon::WeaponPlayWwiseEvent ( class UWwiseEvent* Sound, float NoiseLoudness, struct FVector SoundLoc )
{
	static UFunction* pFnWeaponPlayWwiseEvent = NULL;

	if ( ! pFnWeaponPlayWwiseEvent )
		pFnWeaponPlayWwiseEvent = (UFunction*) UObject::GObjObjects()->Data[ 56907 ];

	ASFXWeapon_execWeaponPlayWwiseEvent_Parms WeaponPlayWwiseEvent_Parms;
	WeaponPlayWwiseEvent_Parms.Sound = Sound;
	WeaponPlayWwiseEvent_Parms.NoiseLoudness = NoiseLoudness;
	memcpy ( &WeaponPlayWwiseEvent_Parms.SoundLoc, &SoundLoc, 0xC );

	this->ProcessEvent ( pFnWeaponPlayWwiseEvent, &WeaponPlayWwiseEvent_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SpawnTracerEffect
// [0x00820102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// float                          HitDistance                    ( CPF_Parm )

void ASFXWeapon::SpawnTracerEffect ( struct FVector HitLocation, float HitDistance )
{
	static UFunction* pFnSpawnTracerEffect = NULL;

	if ( ! pFnSpawnTracerEffect )
		pFnSpawnTracerEffect = (UFunction*) UObject::GObjObjects()->Data[ 56897 ];

	ASFXWeapon_execSpawnTracerEffect_Parms SpawnTracerEffect_Parms;
	memcpy ( &SpawnTracerEffect_Parms.HitLocation, &HitLocation, 0xC );
	SpawnTracerEffect_Parms.HitDistance = HitDistance;

	this->ProcessEvent ( pFnSpawnTracerEffect, &SpawnTracerEffect_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ShouldSpawnTracerFX
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon::ShouldSpawnTracerFX ( )
{
	static UFunction* pFnShouldSpawnTracerFX = NULL;

	if ( ! pFnShouldSpawnTracerFX )
		pFnShouldSpawnTracerFX = (UFunction*) UObject::GObjObjects()->Data[ 56895 ];

	ASFXWeapon_execShouldSpawnTracerFX_Parms ShouldSpawnTracerFX_Parms;

	this->ProcessEvent ( pFnShouldSpawnTracerFX, &ShouldSpawnTracerFX_Parms, NULL );

	return ShouldSpawnTracerFX_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayOwnedFireEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXWeapon::PlayOwnedFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayOwnedFireEffects = NULL;

	if ( ! pFnPlayOwnedFireEffects )
		pFnPlayOwnedFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 56892 ];

	ASFXWeapon_execPlayOwnedFireEffects_Parms PlayOwnedFireEffects_Parms;
	PlayOwnedFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayOwnedFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayOwnedFireEffects, &PlayOwnedFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HideReloadEmitters
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::HideReloadEmitters ( )
{
	static UFunction* pFnHideReloadEmitters = NULL;

	if ( ! pFnHideReloadEmitters )
		pFnHideReloadEmitters = (UFunction*) UObject::GObjObjects()->Data[ 56891 ];

	ASFXWeapon_execHideReloadEmitters_Parms HideReloadEmitters_Parms;

	this->ProcessEvent ( pFnHideReloadEmitters, &HideReloadEmitters_Parms, NULL );
};

// Function SFXGame.SFXWeapon.HideMuzzleFlashEmitter
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::HideMuzzleFlashEmitter ( )
{
	static UFunction* pFnHideMuzzleFlashEmitter = NULL;

	if ( ! pFnHideMuzzleFlashEmitter )
		pFnHideMuzzleFlashEmitter = (UFunction*) UObject::GObjObjects()->Data[ 56890 ];

	ASFXWeapon_execHideMuzzleFlashEmitter_Parms HideMuzzleFlashEmitter_Parms;

	this->ProcessEvent ( pFnHideMuzzleFlashEmitter, &HideMuzzleFlashEmitter_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StopMuzzleFlashEffect
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::StopMuzzleFlashEffect ( )
{
	static UFunction* pFnStopMuzzleFlashEffect = NULL;

	if ( ! pFnStopMuzzleFlashEffect )
		pFnStopMuzzleFlashEffect = (UFunction*) UObject::GObjObjects()->Data[ 56889 ];

	ASFXWeapon_execStopMuzzleFlashEffect_Parms StopMuzzleFlashEffect_Parms;

	this->ProcessEvent ( pFnStopMuzzleFlashEffect, &StopMuzzleFlashEffect_Parms, NULL );
};

// Function SFXGame.SFXWeapon.IsCameraWithinRadius
// [0x00820102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 TestLocation                   ( CPF_Parm )
// float                          Radius                         ( CPF_Parm )

bool ASFXWeapon::IsCameraWithinRadius ( struct FVector TestLocation, float Radius )
{
	static UFunction* pFnIsCameraWithinRadius = NULL;

	if ( ! pFnIsCameraWithinRadius )
		pFnIsCameraWithinRadius = (UFunction*) UObject::GObjObjects()->Data[ 56882 ];

	ASFXWeapon_execIsCameraWithinRadius_Parms IsCameraWithinRadius_Parms;
	memcpy ( &IsCameraWithinRadius_Parms.TestLocation, &TestLocation, 0xC );
	IsCameraWithinRadius_Parms.Radius = Radius;

	this->ProcessEvent ( pFnIsCameraWithinRadius, &IsCameraWithinRadius_Parms, NULL );

	return IsCameraWithinRadius_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.IsMuzzleFlashRelevant
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon::IsMuzzleFlashRelevant ( )
{
	static UFunction* pFnIsMuzzleFlashRelevant = NULL;

	if ( ! pFnIsMuzzleFlashRelevant )
		pFnIsMuzzleFlashRelevant = (UFunction*) UObject::GObjObjects()->Data[ 56880 ];

	ASFXWeapon_execIsMuzzleFlashRelevant_Parms IsMuzzleFlashRelevant_Parms;

	this->ProcessEvent ( pFnIsMuzzleFlashRelevant, &IsMuzzleFlashRelevant_Parms, NULL );

	return IsMuzzleFlashRelevant_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayMuzzleFlashEffect
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::PlayMuzzleFlashEffect ( )
{
	static UFunction* pFnPlayMuzzleFlashEffect = NULL;

	if ( ! pFnPlayMuzzleFlashEffect )
		pFnPlayMuzzleFlashEffect = (UFunction*) UObject::GObjObjects()->Data[ 56879 ];

	ASFXWeapon_execPlayMuzzleFlashEffect_Parms PlayMuzzleFlashEffect_Parms;

	this->ProcessEvent ( pFnPlayMuzzleFlashEffect, &PlayMuzzleFlashEffect_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayFireEffects
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon::PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = (UFunction*) UObject::GObjObjects()->Data[ 56876 ];

	ASFXWeapon_execPlayFireEffects_Parms PlayFireEffects_Parms;
	PlayFireEffects_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffects_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CheckTimerFireOnce
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::CheckTimerFireOnce ( )
{
	static UFunction* pFnCheckTimerFireOnce = NULL;

	if ( ! pFnCheckTimerFireOnce )
		pFnCheckTimerFireOnce = (UFunction*) UObject::GObjObjects()->Data[ 56875 ];

	ASFXWeapon_execCheckTimerFireOnce_Parms CheckTimerFireOnce_Parms;

	this->ProcessEvent ( pFnCheckTimerFireOnce, &CheckTimerFireOnce_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PlayFireEffectsOnce
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )

void ASFXWeapon::PlayFireEffectsOnce ( unsigned char FireModeNum, struct FVector HitLocation )
{
	static UFunction* pFnPlayFireEffectsOnce = NULL;

	if ( ! pFnPlayFireEffectsOnce )
		pFnPlayFireEffectsOnce = (UFunction*) UObject::GObjObjects()->Data[ 56872 ];

	ASFXWeapon_execPlayFireEffectsOnce_Parms PlayFireEffectsOnce_Parms;
	PlayFireEffectsOnce_Parms.FireModeNum = FireModeNum;
	memcpy ( &PlayFireEffectsOnce_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayFireEffectsOnce, &PlayFireEffectsOnce_Parms, NULL );
};

// Function SFXGame.SFXWeapon.PrecacheVFX
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXWeapon::eventPrecacheVFX ( )
{
	static UFunction* pFnPrecacheVFX = NULL;

	if ( ! pFnPrecacheVFX )
		pFnPrecacheVFX = (UFunction*) UObject::GObjObjects()->Data[ 56858 ];

	ASFXWeapon_eventPrecacheVFX_Parms PrecacheVFX_Parms;

	this->ProcessEvent ( pFnPrecacheVFX, &PrecacheVFX_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponSpecificDecalData
// [0x00420100] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class USFXPhysicalMaterialDecals* DecalEffects                   ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm | CPF_OutParm )

class UDecalComponent* ASFXWeapon::GetWeaponSpecificDecalData ( class USFXPhysicalMaterialDecals* DecalEffects, float* FadeTime )
{
	static UFunction* pFnGetWeaponSpecificDecalData = NULL;

	if ( ! pFnGetWeaponSpecificDecalData )
		pFnGetWeaponSpecificDecalData = (UFunction*) UObject::GObjObjects()->Data[ 56853 ];

	ASFXWeapon_execGetWeaponSpecificDecalData_Parms GetWeaponSpecificDecalData_Parms;
	GetWeaponSpecificDecalData_Parms.DecalEffects = DecalEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificDecalData, &GetWeaponSpecificDecalData_Parms, NULL );

	if ( FadeTime )
		*FadeTime = GetWeaponSpecificDecalData_Parms.FadeTime;

	return GetWeaponSpecificDecalData_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetDecalData
// [0x00420102] 
// Parameters infos:
// class UDecalComponent*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )
// float                          FadeTime                       ( CPF_Parm | CPF_OutParm )

class UDecalComponent* ASFXWeapon::GetDecalData ( class UPhysicalMaterial* PhysMat, float* FadeTime )
{
	static UFunction* pFnGetDecalData = NULL;

	if ( ! pFnGetDecalData )
		pFnGetDecalData = (UFunction*) UObject::GObjObjects()->Data[ 56848 ];

	ASFXWeapon_execGetDecalData_Parms GetDecalData_Parms;
	GetDecalData_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetDecalData, &GetDecalData_Parms, NULL );

	if ( FadeTime )
		*FadeTime = GetDecalData_Parms.FadeTime;

	return GetDecalData_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SpawnADecal
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon::SpawnADecal ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnADecal = NULL;

	if ( ! pFnSpawnADecal )
		pFnSpawnADecal = (UFunction*) UObject::GObjObjects()->Data[ 56838 ];

	ASFXWeapon_execSpawnADecal_Parms SpawnADecal_Parms;
	memcpy ( &SpawnADecal_Parms.Impact, &Impact, 0x44 );

	this->ProcessEvent ( pFnSpawnADecal, &SpawnADecal_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponSpecificImpactSound
// [0x00020100] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactSounds* ImpactSounds                   ( CPF_Parm )

class UWwiseEvent* ASFXWeapon::GetWeaponSpecificImpactSound ( class USFXPhysicalMaterialImpactSounds* ImpactSounds )
{
	static UFunction* pFnGetWeaponSpecificImpactSound = NULL;

	if ( ! pFnGetWeaponSpecificImpactSound )
		pFnGetWeaponSpecificImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 56834 ];

	ASFXWeapon_execGetWeaponSpecificImpactSound_Parms GetWeaponSpecificImpactSound_Parms;
	GetWeaponSpecificImpactSound_Parms.ImpactSounds = ImpactSounds;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactSound, &GetWeaponSpecificImpactSound_Parms, NULL );

	return GetWeaponSpecificImpactSound_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetImpactSound
// [0x00020102] 
// Parameters infos:
// class UWwiseEvent*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )

class UWwiseEvent* ASFXWeapon::GetImpactSound ( class UPhysicalMaterial* PhysMat )
{
	static UFunction* pFnGetImpactSound = NULL;

	if ( ! pFnGetImpactSound )
		pFnGetImpactSound = (UFunction*) UObject::GObjObjects()->Data[ 56830 ];

	ASFXWeapon_execGetImpactSound_Parms GetImpactSound_Parms;
	GetImpactSound_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetImpactSound, &GetImpactSound_Parms, NULL );

	return GetImpactSound_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SpawnImpactSounds
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon::SpawnImpactSounds ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnImpactSounds = NULL;

	if ( ! pFnSpawnImpactSounds )
		pFnSpawnImpactSounds = (UFunction*) UObject::GObjObjects()->Data[ 56826 ];

	ASFXWeapon_execSpawnImpactSounds_Parms SpawnImpactSounds_Parms;
	memcpy ( &SpawnImpactSounds_Parms.Impact, &Impact, 0x44 );

	this->ProcessEvent ( pFnSpawnImpactSounds, &SpawnImpactSounds_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetWeaponSpecificImpactEffect
// [0x00020100] 
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPhysicalMaterialImpactEffects* ImpactEffects                  ( CPF_Parm )

class UParticleSystem* ASFXWeapon::GetWeaponSpecificImpactEffect ( class USFXPhysicalMaterialImpactEffects* ImpactEffects )
{
	static UFunction* pFnGetWeaponSpecificImpactEffect = NULL;

	if ( ! pFnGetWeaponSpecificImpactEffect )
		pFnGetWeaponSpecificImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 56822 ];

	ASFXWeapon_execGetWeaponSpecificImpactEffect_Parms GetWeaponSpecificImpactEffect_Parms;
	GetWeaponSpecificImpactEffect_Parms.ImpactEffects = ImpactEffects;

	this->ProcessEvent ( pFnGetWeaponSpecificImpactEffect, &GetWeaponSpecificImpactEffect_Parms, NULL );

	return GetWeaponSpecificImpactEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetImpactEffect
// [0x00020102] 
// Parameters infos:
// class UParticleSystem*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UPhysicalMaterial*       PhysMat                        ( CPF_Parm )

class UParticleSystem* ASFXWeapon::GetImpactEffect ( class UPhysicalMaterial* PhysMat )
{
	static UFunction* pFnGetImpactEffect = NULL;

	if ( ! pFnGetImpactEffect )
		pFnGetImpactEffect = (UFunction*) UObject::GObjObjects()->Data[ 56818 ];

	ASFXWeapon_execGetImpactEffect_Parms GetImpactEffect_Parms;
	GetImpactEffect_Parms.PhysMat = PhysMat;

	this->ProcessEvent ( pFnGetImpactEffect, &GetImpactEffect_Parms, NULL );

	return GetImpactEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ActivateImpactPSC
// [0x00040103] ( FUNC_Final )
// Parameters infos:
// class UParticleSystem*         Template                       ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon::ActivateImpactPSC ( class UParticleSystem* Template, struct FImpactInfo Impact )
{
	static UFunction* pFnActivateImpactPSC = NULL;

	if ( ! pFnActivateImpactPSC )
		pFnActivateImpactPSC = (UFunction*) UObject::GObjObjects()->Data[ 56813 ];

	ASFXWeapon_execActivateImpactPSC_Parms ActivateImpactPSC_Parms;
	ActivateImpactPSC_Parms.Template = Template;
	memcpy ( &ActivateImpactPSC_Parms.Impact, &Impact, 0x44 );

	this->ProcessEvent ( pFnActivateImpactPSC, &ActivateImpactPSC_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SpawnImpactEffects
// [0x00020102] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon::SpawnImpactEffects ( struct FImpactInfo Impact )
{
	static UFunction* pFnSpawnImpactEffects = NULL;

	if ( ! pFnSpawnImpactEffects )
		pFnSpawnImpactEffects = (UFunction*) UObject::GObjObjects()->Data[ 56809 ];

	ASFXWeapon_execSpawnImpactEffects_Parms SpawnImpactEffects_Parms;
	memcpy ( &SpawnImpactEffects_Parms.Impact, &Impact, 0x44 );

	this->ProcessEvent ( pFnSpawnImpactEffects, &SpawnImpactEffects_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ProcessInstantHit
// [0x00820102] 
// Parameters infos:
// unsigned char                  FiringMode                     ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon::ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact )
{
	static UFunction* pFnProcessInstantHit = NULL;

	if ( ! pFnProcessInstantHit )
		pFnProcessInstantHit = (UFunction*) UObject::GObjObjects()->Data[ 56797 ];

	ASFXWeapon_execProcessInstantHit_Parms ProcessInstantHit_Parms;
	ProcessInstantHit_Parms.FiringMode = FiringMode;
	memcpy ( &ProcessInstantHit_Parms.Impact, &Impact, 0x44 );

	this->ProcessEvent ( pFnProcessInstantHit, &ProcessInstantHit_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CalcWeaponFire
// [0x00C20102] 
// Parameters infos:
// struct FImpactInfo             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartTrace                     ( CPF_Parm )
// struct FVector                 EndTrace                       ( CPF_Parm )
// TArray< struct FImpactInfo >   ImpactList                     ( CPF_OptionalParm | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

struct FImpactInfo ASFXWeapon::CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, TArray< struct FImpactInfo >* ImpactList )
{
	static UFunction* pFnCalcWeaponFire = NULL;

	if ( ! pFnCalcWeaponFire )
		pFnCalcWeaponFire = (UFunction*) UObject::GObjObjects()->Data[ 56788 ];

	ASFXWeapon_execCalcWeaponFire_Parms CalcWeaponFire_Parms;
	memcpy ( &CalcWeaponFire_Parms.StartTrace, &StartTrace, 0xC );
	memcpy ( &CalcWeaponFire_Parms.EndTrace, &EndTrace, 0xC );

	this->ProcessEvent ( pFnCalcWeaponFire, &CalcWeaponFire_Parms, NULL );

	if ( ImpactList )
		memcpy ( ImpactList, &CalcWeaponFire_Parms.ImpactList, 0xC );

	return CalcWeaponFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.InstantFire
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::InstantFire ( )
{
	static UFunction* pFnInstantFire = NULL;

	if ( ! pFnInstantFire )
		pFnInstantFire = (UFunction*) UObject::GObjObjects()->Data[ 56786 ];

	ASFXWeapon_execInstantFire_Parms InstantFire_Parms;

	this->ProcessEvent ( pFnInstantFire, &InstantFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetMaximumAllowedAmmo
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon::GetMaximumAllowedAmmo ( )
{
	static UFunction* pFnGetMaximumAllowedAmmo = NULL;

	if ( ! pFnGetMaximumAllowedAmmo )
		pFnGetMaximumAllowedAmmo = (UFunction*) UObject::GObjObjects()->Data[ 56784 ];

	ASFXWeapon_execGetMaximumAllowedAmmo_Parms GetMaximumAllowedAmmo_Parms;

	this->ProcessEvent ( pFnGetMaximumAllowedAmmo, &GetMaximumAllowedAmmo_Parms, NULL );

	return GetMaximumAllowedAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetAmmoCountInMagazine
// [0x00020102] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXWeapon::GetAmmoCountInMagazine ( )
{
	static UFunction* pFnGetAmmoCountInMagazine = NULL;

	if ( ! pFnGetAmmoCountInMagazine )
		pFnGetAmmoCountInMagazine = (UFunction*) UObject::GObjObjects()->Data[ 56782 ];

	ASFXWeapon_execGetAmmoCountInMagazine_Parms GetAmmoCountInMagazine_Parms;

	this->ProcessEvent ( pFnGetAmmoCountInMagazine, &GetAmmoCountInMagazine_Parms, NULL );

	return GetAmmoCountInMagazine_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetFireInterval
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

float ASFXWeapon::GetFireInterval ( unsigned char FireModeNum )
{
	static UFunction* pFnGetFireInterval = NULL;

	if ( ! pFnGetFireInterval )
		pFnGetFireInterval = (UFunction*) UObject::GObjObjects()->Data[ 56779 ];

	ASFXWeapon_execGetFireInterval_Parms GetFireInterval_Parms;
	GetFireInterval_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnGetFireInterval, &GetFireInterval_Parms, NULL );

	return GetFireInterval_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.HasAnyAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = (UFunction*) UObject::GObjObjects()->Data[ 56777 ];

	ASFXWeapon_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );

	return HasAnyAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.HasAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )
// int                            Amount                         ( CPF_OptionalParm | CPF_Parm )

bool ASFXWeapon::HasAmmo ( unsigned char FireModeNum, int Amount )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = (UFunction*) UObject::GObjObjects()->Data[ 56772 ];

	ASFXWeapon_execHasAmmo_Parms HasAmmo_Parms;
	HasAmmo_Parms.FireModeNum = FireModeNum;
	HasAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );

	return HasAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.HasBurstAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FireModeNum                    ( CPF_Parm )

bool ASFXWeapon::HasBurstAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnHasBurstAmmo = NULL;

	if ( ! pFnHasBurstAmmo )
		pFnHasBurstAmmo = (UFunction*) UObject::GObjObjects()->Data[ 56769 ];

	ASFXWeapon_execHasBurstAmmo_Parms HasBurstAmmo_Parms;
	HasBurstAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnHasBurstAmmo, &HasBurstAmmo_Parms, NULL );

	return HasBurstAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.HasSpareAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon::HasSpareAmmo ( )
{
	static UFunction* pFnHasSpareAmmo = NULL;

	if ( ! pFnHasSpareAmmo )
		pFnHasSpareAmmo = (UFunction*) UObject::GObjObjects()->Data[ 56767 ];

	ASFXWeapon_execHasSpareAmmo_Parms HasSpareAmmo_Parms;

	this->ProcessEvent ( pFnHasSpareAmmo, &HasSpareAmmo_Parms, NULL );

	return HasSpareAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.AddAmmo
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Amount                         ( CPF_Parm )

int ASFXWeapon::AddAmmo ( int Amount )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = (UFunction*) UObject::GObjObjects()->Data[ 56763 ];

	ASFXWeapon_execAddAmmo_Parms AddAmmo_Parms;
	AddAmmo_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );

	return AddAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PlayLowAmmoVocalization
// [0x00020002] 
// Parameters infos:

void ASFXWeapon::PlayLowAmmoVocalization ( )
{
	static UFunction* pFnPlayLowAmmoVocalization = NULL;

	if ( ! pFnPlayLowAmmoVocalization )
		pFnPlayLowAmmoVocalization = (UFunction*) UObject::GObjObjects()->Data[ 56762 ];

	ASFXWeapon_execPlayLowAmmoVocalization_Parms PlayLowAmmoVocalization_Parms;

	this->ProcessEvent ( pFnPlayLowAmmoVocalization, &PlayLowAmmoVocalization_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ConsumeAmmo
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon::ConsumeAmmo ( unsigned char FireModeNum )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 56754 ];

	ASFXWeapon_execConsumeAmmo_Parms ConsumeAmmo_Parms;
	ConsumeAmmo_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.InitializeAmmo
// [0x00020002] 
// Parameters infos:

void ASFXWeapon::InitializeAmmo ( )
{
	static UFunction* pFnInitializeAmmo = NULL;

	if ( ! pFnInitializeAmmo )
		pFnInitializeAmmo = (UFunction*) UObject::GObjObjects()->Data[ 56753 ];

	ASFXWeapon_execInitializeAmmo_Parms InitializeAmmo_Parms;

	this->ProcessEvent ( pFnInitializeAmmo, &InitializeAmmo_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetZoomFOV
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          BaseFOV                        ( CPF_Parm )

float ASFXWeapon::GetZoomFOV ( float BaseFOV )
{
	static UFunction* pFnGetZoomFOV = NULL;

	if ( ! pFnGetZoomFOV )
		pFnGetZoomFOV = (UFunction*) UObject::GObjObjects()->Data[ 56750 ];

	ASFXWeapon_execGetZoomFOV_Parms GetZoomFOV_Parms;
	GetZoomFOV_Parms.BaseFOV = BaseFOV;

	this->ProcessEvent ( pFnGetZoomFOV, &GetZoomFOV_Parms, NULL );

	return GetZoomFOV_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetModifiedFOV
// [0x00420102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          FOV                            ( CPF_Parm | CPF_OutParm )

bool ASFXWeapon::GetModifiedFOV ( float* FOV )
{
	static UFunction* pFnGetModifiedFOV = NULL;

	if ( ! pFnGetModifiedFOV )
		pFnGetModifiedFOV = (UFunction*) UObject::GObjObjects()->Data[ 56747 ];

	ASFXWeapon_execGetModifiedFOV_Parms GetModifiedFOV_Parms;

	this->ProcessEvent ( pFnGetModifiedFOV, &GetModifiedFOV_Parms, NULL );

	if ( FOV )
		*FOV = GetModifiedFOV_Parms.FOV;

	return GetModifiedFOV_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetMuzzleLoc
// [0x00820102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector ASFXWeapon::GetMuzzleLoc ( )
{
	static UFunction* pFnGetMuzzleLoc = NULL;

	if ( ! pFnGetMuzzleLoc )
		pFnGetMuzzleLoc = (UFunction*) UObject::GObjObjects()->Data[ 56738 ];

	ASFXWeapon_execGetMuzzleLoc_Parms GetMuzzleLoc_Parms;

	this->ProcessEvent ( pFnGetMuzzleLoc, &GetMuzzleLoc_Parms, NULL );

	return GetMuzzleLoc_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.SetWeaponRecoil
// [0x00020102] 
// Parameters infos:
// float                          PitchRecoil                    ( CPF_Parm )

void ASFXWeapon::SetWeaponRecoil ( float PitchRecoil )
{
	static UFunction* pFnSetWeaponRecoil = NULL;

	if ( ! pFnSetWeaponRecoil )
		pFnSetWeaponRecoil = (UFunction*) UObject::GObjObjects()->Data[ 56735 ];

	ASFXWeapon_execSetWeaponRecoil_Parms SetWeaponRecoil_Parms;
	SetWeaponRecoil_Parms.PitchRecoil = PitchRecoil;

	this->ProcessEvent ( pFnSetWeaponRecoil, &SetWeaponRecoil_Parms, NULL );
};

// Function SFXGame.SFXWeapon.SetZoomed
// [0x00020102] 
// Parameters infos:
// unsigned long                  bState                         ( CPF_Parm )

void ASFXWeapon::SetZoomed ( unsigned long bState )
{
	static UFunction* pFnSetZoomed = NULL;

	if ( ! pFnSetZoomed )
		pFnSetZoomed = (UFunction*) UObject::GObjObjects()->Data[ 56732 ];

	ASFXWeapon_execSetZoomed_Parms SetZoomed_Parms;
	SetZoomed_Parms.bState = bState;

	this->ProcessEvent ( pFnSetZoomed, &SetZoomed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetAIAimDelay
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon::GetAIAimDelay ( )
{
	static UFunction* pFnGetAIAimDelay = NULL;

	if ( ! pFnGetAIAimDelay )
		pFnGetAIAimDelay = (UFunction*) UObject::GObjObjects()->Data[ 56728 ];

	ASFXWeapon_execGetAIAimDelay_Parms GetAIAimDelay_Parms;

	this->ProcessEvent ( pFnGetAIAimDelay, &GetAIAimDelay_Parms, NULL );

	return GetAIAimDelay_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetAimError
// [0x00820102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Accuracy                       ( CPF_Parm )

float ASFXWeapon::GetAimError ( float Accuracy )
{
	static UFunction* pFnGetAimError = NULL;

	if ( ! pFnGetAimError )
		pFnGetAimError = (UFunction*) UObject::GObjObjects()->Data[ 56723 ];

	ASFXWeapon_execGetAimError_Parms GetAimError_Parms;
	GetAimError_Parms.Accuracy = Accuracy;

	this->ProcessEvent ( pFnGetAimError, &GetAimError_Parms, NULL );

	return GetAimError_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetPlayerAimError
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon::GetPlayerAimError ( )
{
	static UFunction* pFnGetPlayerAimError = NULL;

	if ( ! pFnGetPlayerAimError )
		pFnGetPlayerAimError = (UFunction*) UObject::GObjObjects()->Data[ 56720 ];

	ASFXWeapon_execGetPlayerAimError_Parms GetPlayerAimError_Parms;

	this->ProcessEvent ( pFnGetPlayerAimError, &GetPlayerAimError_Parms, NULL );

	return GetPlayerAimError_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetAdjustedAim
// [0x00820102] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator ASFXWeapon::GetAdjustedAim ( struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAim = NULL;

	if ( ! pFnGetAdjustedAim )
		pFnGetAdjustedAim = (UFunction*) UObject::GObjObjects()->Data[ 56715 ];

	ASFXWeapon_execGetAdjustedAim_Parms GetAdjustedAim_Parms;
	memcpy ( &GetAdjustedAim_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAim, &GetAdjustedAim_Parms, NULL );

	return GetAdjustedAim_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetRateOfFire
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon::GetRateOfFire ( )
{
	static UFunction* pFnGetRateOfFire = NULL;

	if ( ! pFnGetRateOfFire )
		pFnGetRateOfFire = (UFunction*) UObject::GObjObjects()->Data[ 56712 ];

	ASFXWeapon_execGetRateOfFire_Parms GetRateOfFire_Parms;

	this->ProcessEvent ( pFnGetRateOfFire, &GetRateOfFire_Parms, NULL );

	return GetRateOfFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetTraceRange
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon::GetTraceRange ( )
{
	static UFunction* pFnGetTraceRange = NULL;

	if ( ! pFnGetTraceRange )
		pFnGetTraceRange = (UFunction*) UObject::GObjObjects()->Data[ 56710 ];

	ASFXWeapon_execGetTraceRange_Parms GetTraceRange_Parms;

	this->ProcessEvent ( pFnGetTraceRange, &GetTraceRange_Parms, NULL );

	return GetTraceRange_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetWeaponAimErrorRange
// [0x00820102] 
// Parameters infos:
// struct FVector2D               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector2D ASFXWeapon::GetWeaponAimErrorRange ( )
{
	static UFunction* pFnGetWeaponAimErrorRange = NULL;

	if ( ! pFnGetWeaponAimErrorRange )
		pFnGetWeaponAimErrorRange = (UFunction*) UObject::GObjObjects()->Data[ 56706 ];

	ASFXWeapon_execGetWeaponAimErrorRange_Parms GetWeaponAimErrorRange_Parms;

	this->ProcessEvent ( pFnGetWeaponAimErrorRange, &GetWeaponAimErrorRange_Parms, NULL );

	return GetWeaponAimErrorRange_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetWeaponRecoil
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon::GetWeaponRecoil ( )
{
	static UFunction* pFnGetWeaponRecoil = NULL;

	if ( ! pFnGetWeaponRecoil )
		pFnGetWeaponRecoil = (UFunction*) UObject::GObjObjects()->Data[ 56702 ];

	ASFXWeapon_execGetWeaponRecoil_Parms GetWeaponRecoil_Parms;

	this->ProcessEvent ( pFnGetWeaponRecoil, &GetWeaponRecoil_Parms, NULL );

	return GetWeaponRecoil_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ResetAmmoOnHolster
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::ResetAmmoOnHolster ( )
{
	static UFunction* pFnResetAmmoOnHolster = NULL;

	if ( ! pFnResetAmmoOnHolster )
		pFnResetAmmoOnHolster = (UFunction*) UObject::GObjObjects()->Data[ 56701 ];

	ASFXWeapon_execResetAmmoOnHolster_Parms ResetAmmoOnHolster_Parms;

	this->ProcessEvent ( pFnResetAmmoOnHolster, &ResetAmmoOnHolster_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetCurrentTotalAmmo
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon::GetCurrentTotalAmmo ( )
{
	static UFunction* pFnGetCurrentTotalAmmo = NULL;

	if ( ! pFnGetCurrentTotalAmmo )
		pFnGetCurrentTotalAmmo = (UFunction*) UObject::GObjObjects()->Data[ 56699 ];

	ASFXWeapon_execGetCurrentTotalAmmo_Parms GetCurrentTotalAmmo_Parms;

	this->ProcessEvent ( pFnGetCurrentTotalAmmo, &GetCurrentTotalAmmo_Parms, NULL );

	return GetCurrentTotalAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetCurrentSpareAmmo
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon::GetCurrentSpareAmmo ( )
{
	static UFunction* pFnGetCurrentSpareAmmo = NULL;

	if ( ! pFnGetCurrentSpareAmmo )
		pFnGetCurrentSpareAmmo = (UFunction*) UObject::GObjObjects()->Data[ 56697 ];

	ASFXWeapon_execGetCurrentSpareAmmo_Parms GetCurrentSpareAmmo_Parms;

	this->ProcessEvent ( pFnGetCurrentSpareAmmo, &GetCurrentSpareAmmo_Parms, NULL );

	return GetCurrentSpareAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetMaxSpareAmmo
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon::GetMaxSpareAmmo ( )
{
	static UFunction* pFnGetMaxSpareAmmo = NULL;

	if ( ! pFnGetMaxSpareAmmo )
		pFnGetMaxSpareAmmo = (UFunction*) UObject::GObjObjects()->Data[ 56695 ];

	ASFXWeapon_execGetMaxSpareAmmo_Parms GetMaxSpareAmmo_Parms;

	this->ProcessEvent ( pFnGetMaxSpareAmmo, &GetMaxSpareAmmo_Parms, NULL );

	return GetMaxSpareAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetMagazineSize
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon::GetMagazineSize ( )
{
	static UFunction* pFnGetMagazineSize = NULL;

	if ( ! pFnGetMagazineSize )
		pFnGetMagazineSize = (UFunction*) UObject::GObjObjects()->Data[ 56693 ];

	ASFXWeapon_execGetMagazineSize_Parms GetMagazineSize_Parms;

	this->ProcessEvent ( pFnGetMagazineSize, &GetMagazineSize_Parms, NULL );

	return GetMagazineSize_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.OutOfAmmo
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon::OutOfAmmo ( )
{
	static UFunction* pFnOutOfAmmo = NULL;

	if ( ! pFnOutOfAmmo )
		pFnOutOfAmmo = (UFunction*) UObject::GObjObjects()->Data[ 56691 ];

	ASFXWeapon_execOutOfAmmo_Parms OutOfAmmo_Parms;

	this->ProcessEvent ( pFnOutOfAmmo, &OutOfAmmo_Parms, NULL );

	return OutOfAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetDamageType
// [0x00020102] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  FiringMode                     ( CPF_Parm )

class UClass* ASFXWeapon::GetDamageType ( unsigned char FiringMode )
{
	static UFunction* pFnGetDamageType = NULL;

	if ( ! pFnGetDamageType )
		pFnGetDamageType = (UFunction*) UObject::GObjObjects()->Data[ 56688 ];

	ASFXWeapon_execGetDamageType_Parms GetDamageType_Parms;
	GetDamageType_Parms.FiringMode = FiringMode;

	this->ProcessEvent ( pFnGetDamageType, &GetDamageType_Parms, NULL );

	return GetDamageType_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetRangeMultiplier
// [0x00420102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )
// float                          RangeMultiplier                ( CPF_Parm | CPF_OutParm )
// float                          Range                          ( CPF_Parm | CPF_OutParm )

void ASFXWeapon::GetRangeMultiplier ( struct FVector HitLocation, class AActor* HitActor, float* RangeMultiplier, float* Range )
{
	static UFunction* pFnGetRangeMultiplier = NULL;

	if ( ! pFnGetRangeMultiplier )
		pFnGetRangeMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 56683 ];

	ASFXWeapon_execGetRangeMultiplier_Parms GetRangeMultiplier_Parms;
	memcpy ( &GetRangeMultiplier_Parms.HitLocation, &HitLocation, 0xC );
	GetRangeMultiplier_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnGetRangeMultiplier, &GetRangeMultiplier_Parms, NULL );

	if ( RangeMultiplier )
		*RangeMultiplier = GetRangeMultiplier_Parms.RangeMultiplier;

	if ( Range )
		*Range = GetRangeMultiplier_Parms.Range;
};

// Function SFXGame.SFXWeapon.ModifyDamage
// [0x00420102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )
// float                          Multiplier                     ( CPF_Parm | CPF_OutParm )

void ASFXWeapon::ModifyDamage ( struct FVector HitLocation, class AActor* HitActor, float* Multiplier )
{
	static UFunction* pFnModifyDamage = NULL;

	if ( ! pFnModifyDamage )
		pFnModifyDamage = (UFunction*) UObject::GObjObjects()->Data[ 56676 ];

	ASFXWeapon_execModifyDamage_Parms ModifyDamage_Parms;
	memcpy ( &ModifyDamage_Parms.HitLocation, &HitLocation, 0xC );
	ModifyDamage_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnModifyDamage, &ModifyDamage_Parms, NULL );

	if ( Multiplier )
		*Multiplier = ModifyDamage_Parms.Multiplier;
};

// Function SFXGame.SFXWeapon.GetFireModeBaseDamage
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon::GetFireModeBaseDamage ( )
{
	static UFunction* pFnGetFireModeBaseDamage = NULL;

	if ( ! pFnGetFireModeBaseDamage )
		pFnGetFireModeBaseDamage = (UFunction*) UObject::GObjObjects()->Data[ 56673 ];

	ASFXWeapon_execGetFireModeBaseDamage_Parms GetFireModeBaseDamage_Parms;

	this->ProcessEvent ( pFnGetFireModeBaseDamage, &GetFireModeBaseDamage_Parms, NULL );

	return GetFireModeBaseDamage_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.NotifyUnpossessed
// [0x00020000] 
// Parameters infos:

void ASFXWeapon::NotifyUnpossessed ( )
{
	static UFunction* pFnNotifyUnpossessed = NULL;

	if ( ! pFnNotifyUnpossessed )
		pFnNotifyUnpossessed = (UFunction*) UObject::GObjObjects()->Data[ 56672 ];

	ASFXWeapon_execNotifyUnpossessed_Parms NotifyUnpossessed_Parms;

	this->ProcessEvent ( pFnNotifyUnpossessed, &NotifyUnpossessed_Parms, NULL );
};

// Function SFXGame.SFXWeapon.UseFirstPersonCamera
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXWeapon::UseFirstPersonCamera ( )
{
	static UFunction* pFnUseFirstPersonCamera = NULL;

	if ( ! pFnUseFirstPersonCamera )
		pFnUseFirstPersonCamera = (UFunction*) UObject::GObjObjects()->Data[ 56670 ];

	ASFXWeapon_execUseFirstPersonCamera_Parms UseFirstPersonCamera_Parms;

	this->ProcessEvent ( pFnUseFirstPersonCamera, &UseFirstPersonCamera_Parms, NULL );

	return UseFirstPersonCamera_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.GetProjectileFirePosition
// [0x00C20102] 
// Parameters infos:
// struct FVector                 out_ProjLoc                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 out_ProjDir                    ( CPF_Parm | CPF_OutParm )

void ASFXWeapon::GetProjectileFirePosition ( struct FVector* out_ProjLoc, struct FVector* out_ProjDir )
{
	static UFunction* pFnGetProjectileFirePosition = NULL;

	if ( ! pFnGetProjectileFirePosition )
		pFnGetProjectileFirePosition = (UFunction*) UObject::GObjObjects()->Data[ 56664 ];

	ASFXWeapon_execGetProjectileFirePosition_Parms GetProjectileFirePosition_Parms;

	this->ProcessEvent ( pFnGetProjectileFirePosition, &GetProjectileFirePosition_Parms, NULL );

	if ( out_ProjLoc )
		memcpy ( out_ProjLoc, &GetProjectileFirePosition_Parms.out_ProjLoc, 0xC );

	if ( out_ProjDir )
		memcpy ( out_ProjDir, &GetProjectileFirePosition_Parms.out_ProjDir, 0xC );
};

// Function SFXGame.SFXWeapon.GetPhysicalFireStartLoc
// [0x00020102] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 AimDir                         ( CPF_OptionalParm | CPF_Parm )

struct FVector ASFXWeapon::GetPhysicalFireStartLoc ( struct FVector AimDir )
{
	static UFunction* pFnGetPhysicalFireStartLoc = NULL;

	if ( ! pFnGetPhysicalFireStartLoc )
		pFnGetPhysicalFireStartLoc = (UFunction*) UObject::GObjObjects()->Data[ 56661 ];

	ASFXWeapon_execGetPhysicalFireStartLoc_Parms GetPhysicalFireStartLoc_Parms;
	memcpy ( &GetPhysicalFireStartLoc_Parms.AimDir, &AimDir, 0xC );

	this->ProcessEvent ( pFnGetPhysicalFireStartLoc, &GetPhysicalFireStartLoc_Parms, NULL );

	return GetPhysicalFireStartLoc_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ProjectileFire
// [0x00820102] 
// Parameters infos:
// class AProjectile*             ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class AProjectile* ASFXWeapon::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = (UFunction*) UObject::GObjObjects()->Data[ 56654 ];

	ASFXWeapon_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );

	return ProjectileFire_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.ForceEndFire
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::ForceEndFire ( )
{
	static UFunction* pFnForceEndFire = NULL;

	if ( ! pFnForceEndFire )
		pFnForceEndFire = (UFunction*) UObject::GObjObjects()->Data[ 56653 ];

	ASFXWeapon_execForceEndFire_Parms ForceEndFire_Parms;

	this->ProcessEvent ( pFnForceEndFire, &ForceEndFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.EndFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon::EndFire ( unsigned char FireModeNum )
{
	static UFunction* pFnEndFire = NULL;

	if ( ! pFnEndFire )
		pFnEndFire = (UFunction*) UObject::GObjObjects()->Data[ 56651 ];

	ASFXWeapon_execEndFire_Parms EndFire_Parms;
	EndFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnEndFire, &EndFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.StartBurstFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXWeapon::StartBurstFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartBurstFire = NULL;

	if ( ! pFnStartBurstFire )
		pFnStartBurstFire = (UFunction*) UObject::GObjObjects()->Data[ 56648 ];

	ASFXWeapon_execStartBurstFire_Parms StartBurstFire_Parms;
	StartBurstFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartBurstFire, &StartBurstFire_Parms, NULL );
};

// Function SFXGame.SFXWeapon.BurstRefireTimer
// [0x00020000] 
// Parameters infos:

void ASFXWeapon::BurstRefireTimer ( )
{
	static UFunction* pFnBurstRefireTimer = NULL;

	if ( ! pFnBurstRefireTimer )
		pFnBurstRefireTimer = (UFunction*) UObject::GObjObjects()->Data[ 56647 ];

	ASFXWeapon_execBurstRefireTimer_Parms BurstRefireTimer_Parms;

	this->ProcessEvent ( pFnBurstRefireTimer, &BurstRefireTimer_Parms, NULL );
};

// Function SFXGame.SFXWeapon.InitDefaultDecalProperties
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::InitDefaultDecalProperties ( )
{
	static UFunction* pFnInitDefaultDecalProperties = NULL;

	if ( ! pFnInitDefaultDecalProperties )
		pFnInitDefaultDecalProperties = (UFunction*) UObject::GObjObjects()->Data[ 56646 ];

	ASFXWeapon_execInitDefaultDecalProperties_Parms InitDefaultDecalProperties_Parms;

	this->ProcessEvent ( pFnInitDefaultDecalProperties, &InitDefaultDecalProperties_Parms, NULL );
};

// Function SFXGame.SFXWeapon.ScaleWeapon
// [0x00020002] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void ASFXWeapon::ScaleWeapon ( int Level )
{
	static UFunction* pFnScaleWeapon = NULL;

	if ( ! pFnScaleWeapon )
		pFnScaleWeapon = (UFunction*) UObject::GObjObjects()->Data[ 56644 ];

	ASFXWeapon_execScaleWeapon_Parms ScaleWeapon_Parms;
	ScaleWeapon_Parms.Level = Level;

	this->ProcessEvent ( pFnScaleWeapon, &ScaleWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon.CalculateStaticBonus
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon::CalculateStaticBonus ( )
{
	static UFunction* pFnCalculateStaticBonus = NULL;

	if ( ! pFnCalculateStaticBonus )
		pFnCalculateStaticBonus = (UFunction*) UObject::GObjObjects()->Data[ 56642 ];

	ASFXWeapon_execCalculateStaticBonus_Parms CalculateStaticBonus_Parms;

	this->ProcessEvent ( pFnCalculateStaticBonus, &CalculateStaticBonus_Parms, NULL );

	return CalculateStaticBonus_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASFXWeapon::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 56641 ];

	ASFXWeapon_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXWeapon.OnWeaponUnequip
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void ASFXWeapon::OnWeaponUnequip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponUnequip = NULL;

	if ( ! pFnOnWeaponUnequip )
		pFnOnWeaponUnequip = (UFunction*) UObject::GObjObjects()->Data[ 41754 ];

	ASFXWeapon_execOnWeaponUnequip_Parms OnWeaponUnequip_Parms;
	OnWeaponUnequip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponUnequip, &OnWeaponUnequip_Parms, NULL );
};

// Function SFXGame.SFXWeapon.OnWeaponEquip
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void ASFXWeapon::OnWeaponEquip ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponEquip = NULL;

	if ( ! pFnOnWeaponEquip )
		pFnOnWeaponEquip = (UFunction*) UObject::GObjObjects()->Data[ 41752 ];

	ASFXWeapon_execOnWeaponEquip_Parms OnWeaponEquip_Parms;
	OnWeaponEquip_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponEquip, &OnWeaponEquip_Parms, NULL );
};

// Function SFXGame.SFXWeapon.OnWeaponReload
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void ASFXWeapon::OnWeaponReload ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnOnWeaponReload = NULL;

	if ( ! pFnOnWeaponReload )
		pFnOnWeaponReload = (UFunction*) UObject::GObjObjects()->Data[ 41750 ];

	ASFXWeapon_execOnWeaponReload_Parms OnWeaponReload_Parms;
	OnWeaponReload_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnOnWeaponReload, &OnWeaponReload_Parms, NULL );
};

// Function SFXGame.SFXWeapon.GetDamageVocProbabilityMod
// [0x00120000] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon::GetDamageVocProbabilityMod ( )
{
	static UFunction* pFnGetDamageVocProbabilityMod = NULL;

	if ( ! pFnGetDamageVocProbabilityMod )
		pFnGetDamageVocProbabilityMod = (UFunction*) UObject::GObjObjects()->Data[ 41748 ];

	ASFXWeapon_execGetDamageVocProbabilityMod_Parms GetDamageVocProbabilityMod_Parms;

	this->ProcessEvent ( pFnGetDamageVocProbabilityMod, &GetDamageVocProbabilityMod_Parms, NULL );

	return GetDamageVocProbabilityMod_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon.OnWeaponImpact
// [0x00120000] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FImpactInfo             Impact                         ( CPF_Parm )

void ASFXWeapon::OnWeaponImpact ( class ASFXWeapon* Weapon, struct FImpactInfo Impact )
{
	static UFunction* pFnOnWeaponImpact = NULL;

	if ( ! pFnOnWeaponImpact )
		pFnOnWeaponImpact = (UFunction*) UObject::GObjObjects()->Data[ 41745 ];

	ASFXWeapon_execOnWeaponImpact_Parms OnWeaponImpact_Parms;
	OnWeaponImpact_Parms.Weapon = Weapon;
	memcpy ( &OnWeaponImpact_Parms.Impact, &Impact, 0x44 );

	this->ProcessEvent ( pFnOnWeaponImpact, &OnWeaponImpact_Parms, NULL );
};

// Function SFXGame.SFXModule_GameEffectManager.UnpauseEffectsByType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  EffectClass                    ( CPF_Parm )

void USFXModule_GameEffectManager::UnpauseEffectsByType ( class UClass* EffectClass )
{
	static UFunction* pFnUnpauseEffectsByType = NULL;

	if ( ! pFnUnpauseEffectsByType )
		pFnUnpauseEffectsByType = (UFunction*) UObject::GObjObjects()->Data[ 39319 ];

	USFXModule_GameEffectManager_execUnpauseEffectsByType_Parms UnpauseEffectsByType_Parms;
	UnpauseEffectsByType_Parms.EffectClass = EffectClass;

	this->ProcessEvent ( pFnUnpauseEffectsByType, &UnpauseEffectsByType_Parms, NULL );
};

// Function SFXGame.SFXModule_GameEffectManager.PauseEffectsByType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  EffectClass                    ( CPF_Parm )

void USFXModule_GameEffectManager::PauseEffectsByType ( class UClass* EffectClass )
{
	static UFunction* pFnPauseEffectsByType = NULL;

	if ( ! pFnPauseEffectsByType )
		pFnPauseEffectsByType = (UFunction*) UObject::GObjObjects()->Data[ 39315 ];

	USFXModule_GameEffectManager_execPauseEffectsByType_Parms PauseEffectsByType_Parms;
	PauseEffectsByType_Parms.EffectClass = EffectClass;

	this->ProcessEvent ( pFnPauseEffectsByType, &PauseEffectsByType_Parms, NULL );
};

// Function SFXGame.SFXModule_GameEffectManager.GetFirstEffectOfType
// [0x00020002] 
// Parameters infos:
// class USFXGameEffect*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EffectClass                    ( CPF_Parm )

class USFXGameEffect* USFXModule_GameEffectManager::GetFirstEffectOfType ( class UClass* EffectClass )
{
	static UFunction* pFnGetFirstEffectOfType = NULL;

	if ( ! pFnGetFirstEffectOfType )
		pFnGetFirstEffectOfType = (UFunction*) UObject::GObjObjects()->Data[ 39311 ];

	USFXModule_GameEffectManager_execGetFirstEffectOfType_Parms GetFirstEffectOfType_Parms;
	GetFirstEffectOfType_Parms.EffectClass = EffectClass;

	this->ProcessEvent ( pFnGetFirstEffectOfType, &GetFirstEffectOfType_Parms, NULL );

	return GetFirstEffectOfType_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_GameEffectManager.OnCombatEnd
// [0x00020002] 
// Parameters infos:

void USFXModule_GameEffectManager::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 39309 ];

	USFXModule_GameEffectManager_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXModule_GameEffectManager.GetEffectValue
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EffectClass                    ( CPF_Parm )
// float                          baseValue                      ( CPF_OptionalParm | CPF_Parm )

float USFXModule_GameEffectManager::GetEffectValue ( class UClass* EffectClass, float baseValue )
{
	static UFunction* pFnGetEffectValue = NULL;

	if ( ! pFnGetEffectValue )
		pFnGetEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 39302 ];

	USFXModule_GameEffectManager_execGetEffectValue_Parms GetEffectValue_Parms;
	GetEffectValue_Parms.EffectClass = EffectClass;
	GetEffectValue_Parms.baseValue = baseValue;

	this->ProcessEvent ( pFnGetEffectValue, &GetEffectValue_Parms, NULL );

	return GetEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_GameEffectManager.RemoveAllEffects
// [0x00020002] 
// Parameters infos:

void USFXModule_GameEffectManager::RemoveAllEffects ( )
{
	static UFunction* pFnRemoveAllEffects = NULL;

	if ( ! pFnRemoveAllEffects )
		pFnRemoveAllEffects = (UFunction*) UObject::GObjObjects()->Data[ 39299 ];

	USFXModule_GameEffectManager_execRemoveAllEffects_Parms RemoveAllEffects_Parms;

	this->ProcessEvent ( pFnRemoveAllEffects, &RemoveAllEffects_Parms, NULL );
};

// Function SFXGame.SFXModule_GameEffectManager.RemoveEffectsByTypeAndCategory
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  EffectClass                    ( CPF_Parm )
// struct FName                   Category                       ( CPF_Parm )

void USFXModule_GameEffectManager::RemoveEffectsByTypeAndCategory ( class UClass* EffectClass, struct FName Category )
{
	static UFunction* pFnRemoveEffectsByTypeAndCategory = NULL;

	if ( ! pFnRemoveEffectsByTypeAndCategory )
		pFnRemoveEffectsByTypeAndCategory = (UFunction*) UObject::GObjObjects()->Data[ 39294 ];

	USFXModule_GameEffectManager_execRemoveEffectsByTypeAndCategory_Parms RemoveEffectsByTypeAndCategory_Parms;
	RemoveEffectsByTypeAndCategory_Parms.EffectClass = EffectClass;
	memcpy ( &RemoveEffectsByTypeAndCategory_Parms.Category, &Category, 0x8 );

	this->ProcessEvent ( pFnRemoveEffectsByTypeAndCategory, &RemoveEffectsByTypeAndCategory_Parms, NULL );
};

// Function SFXGame.SFXModule_GameEffectManager.UpdateEffectsByCategory
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// TArray< class UClass* >        EffectClasses                  ( CPF_Parm | CPF_NeedCtorLink )
// struct FName                   Category                       ( CPF_Parm )
// class AController*             Instigator                     ( CPF_Parm )

void USFXModule_GameEffectManager::UpdateEffectsByCategory ( TArray< class UClass* > EffectClasses, struct FName Category, class AController* Instigator )
{
	static UFunction* pFnUpdateEffectsByCategory = NULL;

	if ( ! pFnUpdateEffectsByCategory )
		pFnUpdateEffectsByCategory = (UFunction*) UObject::GObjObjects()->Data[ 39286 ];

	USFXModule_GameEffectManager_execUpdateEffectsByCategory_Parms UpdateEffectsByCategory_Parms;
	memcpy ( &UpdateEffectsByCategory_Parms.EffectClasses, &EffectClasses, 0xC );
	memcpy ( &UpdateEffectsByCategory_Parms.Category, &Category, 0x8 );
	UpdateEffectsByCategory_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnUpdateEffectsByCategory, &UpdateEffectsByCategory_Parms, NULL );
};

// Function SFXGame.SFXModule_GameEffectManager.RemoveEffectsByCategory
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FName                   Category                       ( CPF_Parm )

void USFXModule_GameEffectManager::RemoveEffectsByCategory ( struct FName Category )
{
	static UFunction* pFnRemoveEffectsByCategory = NULL;

	if ( ! pFnRemoveEffectsByCategory )
		pFnRemoveEffectsByCategory = (UFunction*) UObject::GObjObjects()->Data[ 39282 ];

	USFXModule_GameEffectManager_execRemoveEffectsByCategory_Parms RemoveEffectsByCategory_Parms;
	memcpy ( &RemoveEffectsByCategory_Parms.Category, &Category, 0x8 );

	this->ProcessEvent ( pFnRemoveEffectsByCategory, &RemoveEffectsByCategory_Parms, NULL );
};

// Function SFXGame.SFXModule_GameEffectManager.RemoveEffectsByType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class UClass*                  EffectClass                    ( CPF_Parm )

void USFXModule_GameEffectManager::RemoveEffectsByType ( class UClass* EffectClass )
{
	static UFunction* pFnRemoveEffectsByType = NULL;

	if ( ! pFnRemoveEffectsByType )
		pFnRemoveEffectsByType = (UFunction*) UObject::GObjObjects()->Data[ 34256 ];

	USFXModule_GameEffectManager_execRemoveEffectsByType_Parms RemoveEffectsByType_Parms;
	RemoveEffectsByType_Parms.EffectClass = EffectClass;

	this->ProcessEvent ( pFnRemoveEffectsByType, &RemoveEffectsByType_Parms, NULL );
};

// Function SFXGame.SFXModule_GameEffectManager.RemoveEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USFXGameEffect*          Effect                         ( CPF_Parm )

void USFXModule_GameEffectManager::RemoveEffect ( class USFXGameEffect* Effect )
{
	static UFunction* pFnRemoveEffect = NULL;

	if ( ! pFnRemoveEffect )
		pFnRemoveEffect = (UFunction*) UObject::GObjObjects()->Data[ 39277 ];

	USFXModule_GameEffectManager_execRemoveEffect_Parms RemoveEffect_Parms;
	RemoveEffect_Parms.Effect = Effect;

	this->ProcessEvent ( pFnRemoveEffect, &RemoveEffect_Parms, NULL );
};

// Function SFXGame.SFXModule_GameEffectManager.CreateEffect
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class USFXGameEffect*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EffectClass                    ( CPF_Parm )
// struct FName                   Category                       ( CPF_Parm )
// float                          Duration                       ( CPF_Parm )
// unsigned char                  DurationType                   ( CPF_Parm )
// float                          EffectValue                    ( CPF_Parm )
// class AController*             Instigator                     ( CPF_OptionalParm | CPF_Parm )

class USFXGameEffect* USFXModule_GameEffectManager::CreateEffect ( class UClass* EffectClass, struct FName Category, float Duration, unsigned char DurationType, float EffectValue, class AController* Instigator )
{
	static UFunction* pFnCreateEffect = NULL;

	if ( ! pFnCreateEffect )
		pFnCreateEffect = (UFunction*) UObject::GObjObjects()->Data[ 34239 ];

	USFXModule_GameEffectManager_execCreateEffect_Parms CreateEffect_Parms;
	CreateEffect_Parms.EffectClass = EffectClass;
	memcpy ( &CreateEffect_Parms.Category, &Category, 0x8 );
	CreateEffect_Parms.Duration = Duration;
	CreateEffect_Parms.DurationType = DurationType;
	CreateEffect_Parms.EffectValue = EffectValue;
	CreateEffect_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnCreateEffect, &CreateEffect_Parms, NULL );

	return CreateEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_GameEffectManager.HasEffectOfTypeAndCategory
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EffectClass                    ( CPF_Parm )
// struct FName                   Category                       ( CPF_Parm )

bool USFXModule_GameEffectManager::HasEffectOfTypeAndCategory ( class UClass* EffectClass, struct FName Category )
{
	static UFunction* pFnHasEffectOfTypeAndCategory = NULL;

	if ( ! pFnHasEffectOfTypeAndCategory )
		pFnHasEffectOfTypeAndCategory = (UFunction*) UObject::GObjObjects()->Data[ 39261 ];

	USFXModule_GameEffectManager_execHasEffectOfTypeAndCategory_Parms HasEffectOfTypeAndCategory_Parms;
	HasEffectOfTypeAndCategory_Parms.EffectClass = EffectClass;
	memcpy ( &HasEffectOfTypeAndCategory_Parms.Category, &Category, 0x8 );

	this->ProcessEvent ( pFnHasEffectOfTypeAndCategory, &HasEffectOfTypeAndCategory_Parms, NULL );

	return HasEffectOfTypeAndCategory_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_GameEffectManager.HasEffectOfCategory
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   Category                       ( CPF_Parm )

bool USFXModule_GameEffectManager::HasEffectOfCategory ( struct FName Category )
{
	static UFunction* pFnHasEffectOfCategory = NULL;

	if ( ! pFnHasEffectOfCategory )
		pFnHasEffectOfCategory = (UFunction*) UObject::GObjObjects()->Data[ 39257 ];

	USFXModule_GameEffectManager_execHasEffectOfCategory_Parms HasEffectOfCategory_Parms;
	memcpy ( &HasEffectOfCategory_Parms.Category, &Category, 0x8 );

	this->ProcessEvent ( pFnHasEffectOfCategory, &HasEffectOfCategory_Parms, NULL );

	return HasEffectOfCategory_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_GameEffectManager.HasEffectOfType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EffectClass                    ( CPF_Parm )

bool USFXModule_GameEffectManager::HasEffectOfType ( class UClass* EffectClass )
{
	static UFunction* pFnHasEffectOfType = NULL;

	if ( ! pFnHasEffectOfType )
		pFnHasEffectOfType = (UFunction*) UObject::GObjObjects()->Data[ 39253 ];

	USFXModule_GameEffectManager_execHasEffectOfType_Parms HasEffectOfType_Parms;
	HasEffectOfType_Parms.EffectClass = EffectClass;

	this->ProcessEvent ( pFnHasEffectOfType, &HasEffectOfType_Parms, NULL );

	return HasEffectOfType_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_GameEffectManager.FindBestEffect
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  EffectClass                    ( CPF_Parm )
// class USFXGameEffect*          BestEffect                     ( CPF_Parm | CPF_OutParm )

bool USFXModule_GameEffectManager::FindBestEffect ( class UClass* EffectClass, class USFXGameEffect** BestEffect )
{
	static UFunction* pFnFindBestEffect = NULL;

	if ( ! pFnFindBestEffect )
		pFnFindBestEffect = (UFunction*) UObject::GObjObjects()->Data[ 39248 ];

	USFXModule_GameEffectManager_execFindBestEffect_Parms FindBestEffect_Parms;
	FindBestEffect_Parms.EffectClass = EffectClass;

	this->ProcessEvent ( pFnFindBestEffect, &FindBestEffect_Parms, NULL );

	if ( BestEffect )
		*BestEffect = FindBestEffect_Parms.BestEffect;

	return FindBestEffect_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_GameEffectManager.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXModule_GameEffectManager::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 39241 ];

	USFXModule_GameEffectManager_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_AIAccuracyPenalty.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_AIAccuracyPenalty::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 54988 ];

	USFXGameEffect_AIAccuracyPenalty_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_AIAccuracyPenalty.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_AIAccuracyPenalty::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 54986 ];

	USFXGameEffect_AIAccuracyPenalty_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect.OnUnpaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 54984 ];

	USFXGameEffect_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnPaused
// [0x00020000] 
// Parameters infos:

void USFXGameEffect::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 54983 ];

	USFXGameEffect_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnCombatEnd
// [0x00020000] 
// Parameters infos:

void USFXGameEffect::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 54982 ];

	USFXGameEffect_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 54980 ];

	USFXGameEffect_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnUpdate
// [0x00020000] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 54978 ];

	USFXGameEffect_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 54977 ];

	USFXGameEffect_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect.ComputeTotalEffectValue
// [0x00022000] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 54972 ];

	USFXGameEffect_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect.ComputeEffectValue
// [0x00420000] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 54970 ];

	USFXGameEffect_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect.GetStrongerEffect
// [0x00420002] 
// Parameters infos:
// class USFXGameEffect*          Effect                         ( CPF_Parm | CPF_OutParm )

void USFXGameEffect::GetStrongerEffect ( class USFXGameEffect** Effect )
{
	static UFunction* pFnGetStrongerEffect = NULL;

	if ( ! pFnGetStrongerEffect )
		pFnGetStrongerEffect = (UFunction*) UObject::GObjObjects()->Data[ 54968 ];

	USFXGameEffect_execGetStrongerEffect_Parms GetStrongerEffect_Parms;

	this->ProcessEvent ( pFnGetStrongerEffect, &GetStrongerEffect_Parms, NULL );

	if ( Effect )
		*Effect = GetStrongerEffect_Parms.Effect;
};

// Function SFXGame.SFXGameEffect.HasExpired
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameEffect::HasExpired ( )
{
	static UFunction* pFnHasExpired = NULL;

	if ( ! pFnHasExpired )
		pFnHasExpired = (UFunction*) UObject::GObjObjects()->Data[ 54966 ];

	USFXGameEffect_execHasExpired_Parms HasExpired_Parms;

	this->ProcessEvent ( pFnHasExpired, &HasExpired_Parms, NULL );

	return HasExpired_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqEvt_EnteringStasis.RegisterEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqEvt_EnteringStasis::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = (UFunction*) UObject::GObjObjects()->Data[ 60656 ];

	USFXSeqEvt_EnteringStasis_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function SFXGame.SFXSeqEvt_LeavingStasis.RegisterEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqEvt_LeavingStasis::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = (UFunction*) UObject::GObjObjects()->Data[ 60660 ];

	USFXSeqEvt_LeavingStasis_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function SFXGame.BioPlayerControllerSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioPlayerControllerSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 42551 ];

	UBioPlayerControllerSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioPlayerControllerSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioPlayerControllerSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 42547 ];

	UBioPlayerControllerSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.BioAnimNotify_CustomAction.Notify
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Owner                          ( CPF_Parm )
// class UAnimNodeSequence*       AnimSeqInstigator              ( CPF_Parm )

void UBioAnimNotify_CustomAction::eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = (UFunction*) UObject::GObjObjects()->Data[ 31094 ];

	UBioAnimNotify_CustomAction_eventNotify_Parms Notify_Parms;
	Notify_Parms.Owner = Owner;
	Notify_Parms.AnimSeqInstigator = AnimSeqInstigator;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function SFXGame.BioAreaTransition.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ABioAreaTransition::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 31228 ];

	ABioAreaTransition_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.CreateWeapons
// [0x00020002] 
// Parameters infos:
// class USFXLoadoutData*         ChkLoadout                     ( CPF_Parm )

void ASFXPawn_Player::CreateWeapons ( class USFXLoadoutData* ChkLoadout )
{
	static UFunction* pFnCreateWeapons = NULL;

	if ( ! pFnCreateWeapons )
		pFnCreateWeapons = (UFunction*) UObject::GObjObjects()->Data[ 58719 ];

	ASFXPawn_Player_execCreateWeapons_Parms CreateWeapons_Parms;
	CreateWeapons_Parms.ChkLoadout = ChkLoadout;

	this->ProcessEvent ( pFnCreateWeapons, &CreateWeapons_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.SetCombatState_Inactive
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::SetCombatState_Inactive ( )
{
	static UFunction* pFnSetCombatState_Inactive = NULL;

	if ( ! pFnSetCombatState_Inactive )
		pFnSetCombatState_Inactive = (UFunction*) UObject::GObjObjects()->Data[ 58718 ];

	ASFXPawn_Player_execSetCombatState_Inactive_Parms SetCombatState_Inactive_Parms;

	this->ProcessEvent ( pFnSetCombatState_Inactive, &SetCombatState_Inactive_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.SetCombatState_Active
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::SetCombatState_Active ( )
{
	static UFunction* pFnSetCombatState_Active = NULL;

	if ( ! pFnSetCombatState_Active )
		pFnSetCombatState_Active = (UFunction*) UObject::GObjObjects()->Data[ 58717 ];

	ASFXPawn_Player_execSetCombatState_Active_Parms SetCombatState_Active_Parms;

	this->ProcessEvent ( pFnSetCombatState_Active, &SetCombatState_Active_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.SetCombatState
// [0x00020002] 
// Parameters infos:
// unsigned long                  bDraw                          ( CPF_Parm )

void ASFXPawn_Player::SetCombatState ( unsigned long bDraw )
{
	static UFunction* pFnSetCombatState = NULL;

	if ( ! pFnSetCombatState )
		pFnSetCombatState = (UFunction*) UObject::GObjObjects()->Data[ 58715 ];

	ASFXPawn_Player_execSetCombatState_Parms SetCombatState_Parms;
	SetCombatState_Parms.bDraw = bDraw;

	this->ProcessEvent ( pFnSetCombatState, &SetCombatState_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.SetRTPCHelmetIsEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UWwiseAudioComponent*    WwiseComponent                 ( CPF_Parm | CPF_EditInline )

void ASFXPawn_Player::eventSetRTPCHelmetIsEnabled ( class UWwiseAudioComponent* WwiseComponent )
{
	static UFunction* pFnSetRTPCHelmetIsEnabled = NULL;

	if ( ! pFnSetRTPCHelmetIsEnabled )
		pFnSetRTPCHelmetIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 58713 ];

	ASFXPawn_Player_eventSetRTPCHelmetIsEnabled_Parms SetRTPCHelmetIsEnabled_Parms;
	SetRTPCHelmetIsEnabled_Parms.WwiseComponent = WwiseComponent;

	this->ProcessEvent ( pFnSetRTPCHelmetIsEnabled, &SetRTPCHelmetIsEnabled_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.SwitchToBackupWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              PreferredWeapon                ( CPF_OptionalParm | CPF_Parm )

bool ASFXPawn_Player::SwitchToBackupWeapon ( class ASFXWeapon* PreferredWeapon )
{
	static UFunction* pFnSwitchToBackupWeapon = NULL;

	if ( ! pFnSwitchToBackupWeapon )
		pFnSwitchToBackupWeapon = (UFunction*) UObject::GObjObjects()->Data[ 58705 ];

	ASFXPawn_Player_execSwitchToBackupWeapon_Parms SwitchToBackupWeapon_Parms;
	SwitchToBackupWeapon_Parms.PreferredWeapon = PreferredWeapon;

	this->ProcessEvent ( pFnSwitchToBackupWeapon, &SwitchToBackupWeapon_Parms, NULL );

	return SwitchToBackupWeapon_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Player.PlayerCoverAcquired
// [0x00020002] 
// Parameters infos:
// struct FCovPosInfo             CovInfo                        ( CPF_Parm )

void ASFXPawn_Player::PlayerCoverAcquired ( struct FCovPosInfo CovInfo )
{
	static UFunction* pFnPlayerCoverAcquired = NULL;

	if ( ! pFnPlayerCoverAcquired )
		pFnPlayerCoverAcquired = (UFunction*) UObject::GObjObjects()->Data[ 58703 ];

	ASFXPawn_Player_execPlayerCoverAcquired_Parms PlayerCoverAcquired_Parms;
	memcpy ( &PlayerCoverAcquired_Parms.CovInfo, &CovInfo, 0x34 );

	this->ProcessEvent ( pFnPlayerCoverAcquired, &PlayerCoverAcquired_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.GetGUIIcon
// [0x00020002] 
// Parameters infos:
// class UTexture2D*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bDeadIcon                      ( CPF_OptionalParm | CPF_Parm )

class UTexture2D* ASFXPawn_Player::GetGUIIcon ( unsigned long bDeadIcon )
{
	static UFunction* pFnGetGUIIcon = NULL;

	if ( ! pFnGetGUIIcon )
		pFnGetGUIIcon = (UFunction*) UObject::GObjObjects()->Data[ 58700 ];

	ASFXPawn_Player_execGetGUIIcon_Parms GetGUIIcon_Parms;
	GetGUIIcon_Parms.bDeadIcon = bDeadIcon;

	this->ProcessEvent ( pFnGetGUIIcon, &GetGUIIcon_Parms, NULL );

	return GetGUIIcon_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Player.PlayDying
// [0x00020102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLoc                         ( CPF_Parm )

void ASFXPawn_Player::PlayDying ( class UClass* DamageType, struct FVector HitLoc )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = (UFunction*) UObject::GObjObjects()->Data[ 58696 ];

	ASFXPawn_Player_execPlayDying_Parms PlayDying_Parms;
	PlayDying_Parms.DamageType = DamageType;
	memcpy ( &PlayDying_Parms.HitLoc, &HitLoc, 0xC );

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.PlayShieldHit
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void ASFXPawn_Player::PlayShieldHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPlayShieldHit = NULL;

	if ( ! pFnPlayShieldHit )
		pFnPlayShieldHit = (UFunction*) UObject::GObjObjects()->Data[ 58687 ];

	ASFXPawn_Player_execPlayShieldHit_Parms PlayShieldHit_Parms;
	PlayShieldHit_Parms.Damage = Damage;
	PlayShieldHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &PlayShieldHit_Parms.HitLocation, &HitLocation, 0xC );
	PlayShieldHit_Parms.DamageType = DamageType;
	memcpy ( &PlayShieldHit_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &PlayShieldHit_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnPlayShieldHit, &PlayShieldHit_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.PlayAnimatedReaction
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  CustomAction                   ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bDeathReaction                 ( CPF_OptionalParm | CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_OptionalParm | CPF_Parm | CPF_OutParm )

bool ASFXPawn_Player::PlayAnimatedReaction ( unsigned char CustomAction, class AController* InstigatedBy, unsigned long bPlayImpact, struct FVector HitLocation, struct FVector HitNormal, unsigned long bDeathReaction, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnPlayAnimatedReaction = NULL;

	if ( ! pFnPlayAnimatedReaction )
		pFnPlayAnimatedReaction = (UFunction*) UObject::GObjObjects()->Data[ 58675 ];

	ASFXPawn_Player_execPlayAnimatedReaction_Parms PlayAnimatedReaction_Parms;
	PlayAnimatedReaction_Parms.CustomAction = CustomAction;
	PlayAnimatedReaction_Parms.InstigatedBy = InstigatedBy;
	PlayAnimatedReaction_Parms.bPlayImpact = bPlayImpact;
	memcpy ( &PlayAnimatedReaction_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &PlayAnimatedReaction_Parms.HitNormal, &HitNormal, 0xC );
	PlayAnimatedReaction_Parms.bDeathReaction = bDeathReaction;

	this->ProcessEvent ( pFnPlayAnimatedReaction, &PlayAnimatedReaction_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &PlayAnimatedReaction_Parms.HitInfo, 0x1C );

	return PlayAnimatedReaction_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Player.CheckEnterCombat
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::CheckEnterCombat ( )
{
	static UFunction* pFnCheckEnterCombat = NULL;

	if ( ! pFnCheckEnterCombat )
		pFnCheckEnterCombat = (UFunction*) UObject::GObjObjects()->Data[ 58665 ];

	ASFXPawn_Player_execCheckEnterCombat_Parms CheckEnterCombat_Parms;

	this->ProcessEvent ( pFnCheckEnterCombat, &CheckEnterCombat_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.AutoMapPC
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::AutoMapPC ( )
{
	static UFunction* pFnAutoMapPC = NULL;

	if ( ! pFnAutoMapPC )
		pFnAutoMapPC = (UFunction*) UObject::GObjObjects()->Data[ 58650 ];

	ASFXPawn_Player_execAutoMapPC_Parms AutoMapPC_Parms;

	this->ProcessEvent ( pFnAutoMapPC, &AutoMapPC_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.AutoMapXbox
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::AutoMapXbox ( )
{
	static UFunction* pFnAutoMapXbox = NULL;

	if ( ! pFnAutoMapXbox )
		pFnAutoMapXbox = (UFunction*) UObject::GObjObjects()->Data[ 58644 ];

	ASFXPawn_Player_execAutoMapXbox_Parms AutoMapXbox_Parms;

	this->ProcessEvent ( pFnAutoMapXbox, &AutoMapXbox_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.ApplyBonuses
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::ApplyBonuses ( )
{
	static UFunction* pFnApplyBonuses = NULL;

	if ( ! pFnApplyBonuses )
		pFnApplyBonuses = (UFunction*) UObject::GObjObjects()->Data[ 58638 ];

	ASFXPawn_Player_execApplyBonuses_Parms ApplyBonuses_Parms;

	this->ProcessEvent ( pFnApplyBonuses, &ApplyBonuses_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.AutoMap
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::AutoMap ( )
{
	static UFunction* pFnAutoMap = NULL;

	if ( ! pFnAutoMap )
		pFnAutoMap = (UFunction*) UObject::GObjObjects()->Data[ 58637 ];

	ASFXPawn_Player_execAutoMap_Parms AutoMap_Parms;

	this->ProcessEvent ( pFnAutoMap, &AutoMap_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.FindPower
// [0x00020002] 
// Parameters infos:
// class USFXPower*               ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPower                        ( CPF_Parm )

class USFXPower* ASFXPawn_Player::FindPower ( struct FName nmPower )
{
	static UFunction* pFnFindPower = NULL;

	if ( ! pFnFindPower )
		pFnFindPower = (UFunction*) UObject::GObjObjects()->Data[ 58633 ];

	ASFXPawn_Player_execFindPower_Parms FindPower_Parms;
	memcpy ( &FindPower_Parms.nmPower, &nmPower, 0x8 );

	this->ProcessEvent ( pFnFindPower, &FindPower_Parms, NULL );

	return FindPower_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Player.PossessedBy
// [0x00020002] 
// Parameters infos:
// class AController*             C                              ( CPF_Parm )
// unsigned long                  bVehicleTransition             ( CPF_Parm )

void ASFXPawn_Player::PossessedBy ( class AController* C, unsigned long bVehicleTransition )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = (UFunction*) UObject::GObjObjects()->Data[ 58629 ];

	ASFXPawn_Player_execPossessedBy_Parms PossessedBy_Parms;
	PossessedBy_Parms.C = C;
	PossessedBy_Parms.bVehicleTransition = bVehicleTransition;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 58626 ];

	ASFXPawn_Player_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.AddPlayerInventory
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::AddPlayerInventory ( )
{
	static UFunction* pFnAddPlayerInventory = NULL;

	if ( ! pFnAddPlayerInventory )
		pFnAddPlayerInventory = (UFunction*) UObject::GObjObjects()->Data[ 58623 ];

	ASFXPawn_Player_execAddPlayerInventory_Parms AddPlayerInventory_Parms;

	this->ProcessEvent ( pFnAddPlayerInventory, &AddPlayerInventory_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.GetScaledLevel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXPawn_Player::GetScaledLevel ( )
{
	static UFunction* pFnGetScaledLevel = NULL;

	if ( ! pFnGetScaledLevel )
		pFnGetScaledLevel = (UFunction*) UObject::GObjObjects()->Data[ 58621 ];

	ASFXPawn_Player_execGetScaledLevel_Parms GetScaledLevel_Parms;

	this->ProcessEvent ( pFnGetScaledLevel, &GetScaledLevel_Parms, NULL );

	return GetScaledLevel_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Player.CopyPawnAppearance
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                SourcePawn                     ( CPF_Parm )

void ASFXPawn_Player::CopyPawnAppearance ( class ABioPawn* SourcePawn )
{
	static UFunction* pFnCopyPawnAppearance = NULL;

	if ( ! pFnCopyPawnAppearance )
		pFnCopyPawnAppearance = (UFunction*) UObject::GObjObjects()->Data[ 58616 ];

	ASFXPawn_Player_execCopyPawnAppearance_Parms CopyPawnAppearance_Parms;
	CopyPawnAppearance_Parms.SourcePawn = SourcePawn;

	this->ProcessEvent ( pFnCopyPawnAppearance, &CopyPawnAppearance_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.ProcessViewRotation
// [0x00C20102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void ASFXPawn_Player::ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = (UFunction*) UObject::GObjObjects()->Data[ 58607 ];

	ASFXPawn_Player_execProcessViewRotation_Parms ProcessViewRotation_Parms;
	ProcessViewRotation_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ProcessViewRotation_Parms.out_ViewRotation, 0xC );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &ProcessViewRotation_Parms.out_DeltaRot, 0xC );
};

// Function SFXGame.SFXPawn_Player.ForceHelmetVisibility
// [0x00020002] 
// Parameters infos:
// unsigned long                  bHelmetVisible                 ( CPF_Parm )

void ASFXPawn_Player::ForceHelmetVisibility ( unsigned long bHelmetVisible )
{
	static UFunction* pFnForceHelmetVisibility = NULL;

	if ( ! pFnForceHelmetVisibility )
		pFnForceHelmetVisibility = (UFunction*) UObject::GObjObjects()->Data[ 58605 ];

	ASFXPawn_Player_execForceHelmetVisibility_Parms ForceHelmetVisibility_Parms;
	ForceHelmetVisibility_Parms.bHelmetVisible = bHelmetVisible;

	this->ProcessEvent ( pFnForceHelmetVisibility, &ForceHelmetVisibility_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.ForceShowHelmet
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bShowHelmet                    ( CPF_Parm )

void ASFXPawn_Player::ForceShowHelmet ( unsigned long bShowHelmet )
{
	static UFunction* pFnForceShowHelmet = NULL;

	if ( ! pFnForceShowHelmet )
		pFnForceShowHelmet = (UFunction*) UObject::GObjObjects()->Data[ 58599 ];

	ASFXPawn_Player_execForceShowHelmet_Parms ForceShowHelmet_Parms;
	ForceShowHelmet_Parms.bShowHelmet = bShowHelmet;

	this->ProcessEvent ( pFnForceShowHelmet, &ForceShowHelmet_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.ForceHideHelmet
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bHideHelmet                    ( CPF_Parm )

void ASFXPawn_Player::ForceHideHelmet ( unsigned long bHideHelmet )
{
	static UFunction* pFnForceHideHelmet = NULL;

	if ( ! pFnForceHideHelmet )
		pFnForceHideHelmet = (UFunction*) UObject::GObjObjects()->Data[ 58597 ];

	ASFXPawn_Player_execForceHideHelmet_Parms ForceHideHelmet_Parms;
	ForceHideHelmet_Parms.bHideHelmet = bHideHelmet;

	this->ProcessEvent ( pFnForceHideHelmet, &ForceHideHelmet_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.PlayHit
// [0x00020002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void ASFXPawn_Player::PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = (UFunction*) UObject::GObjObjects()->Data[ 58589 ];

	ASFXPawn_Player_execPlayHit_Parms PlayHit_Parms;
	PlayHit_Parms.Damage = Damage;
	PlayHit_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &PlayHit_Parms.HitLocation, &HitLocation, 0xC );
	PlayHit_Parms.DamageType = DamageType;
	memcpy ( &PlayHit_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &PlayHit_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.UpdateWeaponVisibility
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::UpdateWeaponVisibility ( )
{
	static UFunction* pFnUpdateWeaponVisibility = NULL;

	if ( ! pFnUpdateWeaponVisibility )
		pFnUpdateWeaponVisibility = (UFunction*) UObject::GObjObjects()->Data[ 58587 ];

	ASFXPawn_Player_execUpdateWeaponVisibility_Parms UpdateWeaponVisibility_Parms;

	this->ProcessEvent ( pFnUpdateWeaponVisibility, &UpdateWeaponVisibility_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.CreateWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WeaponClass                    ( CPF_Parm )
// unsigned long                  bEquipWeapon                   ( CPF_OptionalParm | CPF_Parm )

bool ASFXPawn_Player::CreateWeapon ( class UClass* WeaponClass, unsigned long bEquipWeapon )
{
	static UFunction* pFnCreateWeapon = NULL;

	if ( ! pFnCreateWeapon )
		pFnCreateWeapon = (UFunction*) UObject::GObjObjects()->Data[ 58582 ];

	ASFXPawn_Player_execCreateWeapon_Parms CreateWeapon_Parms;
	CreateWeapon_Parms.WeaponClass = WeaponClass;
	CreateWeapon_Parms.bEquipWeapon = bEquipWeapon;

	this->ProcessEvent ( pFnCreateWeapon, &CreateWeapon_Parms, NULL );

	return CreateWeapon_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Player.UpdateParameters
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void ASFXPawn_Player::UpdateParameters ( )
{
	static UFunction* pFnUpdateParameters = NULL;

	if ( ! pFnUpdateParameters )
		pFnUpdateParameters = (UFunction*) UObject::GObjObjects()->Data[ 46589 ];

	ASFXPawn_Player_execUpdateParameters_Parms UpdateParameters_Parms;

	this->ProcessEvent ( pFnUpdateParameters, &UpdateParameters_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.GetParagonRenegadeNetPips
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// int                            ParagonPips                    ( CPF_Parm | CPF_OutParm )
// int                            RenegadePips                   ( CPF_Parm | CPF_OutParm )

void ASFXPawn_Player::GetParagonRenegadeNetPips ( int* ParagonPips, int* RenegadePips )
{
	static UFunction* pFnGetParagonRenegadeNetPips = NULL;

	if ( ! pFnGetParagonRenegadeNetPips )
		pFnGetParagonRenegadeNetPips = (UFunction*) UObject::GObjObjects()->Data[ 58564 ];

	ASFXPawn_Player_execGetParagonRenegadeNetPips_Parms GetParagonRenegadeNetPips_Parms;

	this->ProcessEvent ( pFnGetParagonRenegadeNetPips, &GetParagonRenegadeNetPips_Parms, NULL );

	if ( ParagonPips )
		*ParagonPips = GetParagonRenegadeNetPips_Parms.ParagonPips;

	if ( RenegadePips )
		*RenegadePips = GetParagonRenegadeNetPips_Parms.RenegadePips;
};

// Function SFXGame.SFXPawn_Player.ApplyScarParameters
// [0x00822003] ( FUNC_Final )
// Parameters infos:
// TArray< struct FScarInfo >     InScars                        ( CPF_Const | CPF_Parm | CPF_NeedCtorLink )
// int                            InNetAlignment                 ( CPF_Parm )
// class ABioPawn*                Pawn                           ( CPF_Parm )

void ASFXPawn_Player::ApplyScarParameters ( TArray< struct FScarInfo > InScars, int InNetAlignment, class ABioPawn* Pawn )
{
	static UFunction* pFnApplyScarParameters = NULL;

	if ( ! pFnApplyScarParameters )
		pFnApplyScarParameters = (UFunction*) UObject::GObjObjects()->Data[ 50556 ];

	ASFXPawn_Player_execApplyScarParameters_Parms ApplyScarParameters_Parms;
	memcpy ( &ApplyScarParameters_Parms.InScars, &InScars, 0xC );
	ApplyScarParameters_Parms.InNetAlignment = InNetAlignment;
	ApplyScarParameters_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnApplyScarParameters, &ApplyScarParameters_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.UpdateBodyAppearance
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void ASFXPawn_Player::UpdateBodyAppearance ( )
{
	static UFunction* pFnUpdateBodyAppearance = NULL;

	if ( ! pFnUpdateBodyAppearance )
		pFnUpdateBodyAppearance = (UFunction*) UObject::GObjObjects()->Data[ 58528 ];

	ASFXPawn_Player_execUpdateBodyAppearance_Parms UpdateBodyAppearance_Parms;

	this->ProcessEvent ( pFnUpdateBodyAppearance, &UpdateBodyAppearance_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.RefreshMaterialInstances
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::RefreshMaterialInstances ( )
{
	static UFunction* pFnRefreshMaterialInstances = NULL;

	if ( ! pFnRefreshMaterialInstances )
		pFnRefreshMaterialInstances = (UFunction*) UObject::GObjObjects()->Data[ 58530 ];

	ASFXPawn_Player_execRefreshMaterialInstances_Parms RefreshMaterialInstances_Parms;

	this->ProcessEvent ( pFnRefreshMaterialInstances, &RefreshMaterialInstances_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.ClearMaterialInstances
// [0x00020000] 
// Parameters infos:

void ASFXPawn_Player::ClearMaterialInstances ( )
{
	static UFunction* pFnClearMaterialInstances = NULL;

	if ( ! pFnClearMaterialInstances )
		pFnClearMaterialInstances = (UFunction*) UObject::GObjObjects()->Data[ 58529 ];

	ASFXPawn_Player_execClearMaterialInstances_Parms ClearMaterialInstances_Parms;

	this->ProcessEvent ( pFnClearMaterialInstances, &ClearMaterialInstances_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.UpdateAppearance
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::UpdateAppearance ( )
{
	static UFunction* pFnUpdateAppearance = NULL;

	if ( ! pFnUpdateAppearance )
		pFnUpdateAppearance = (UFunction*) UObject::GObjObjects()->Data[ 58527 ];

	ASFXPawn_Player_execUpdateAppearance_Parms UpdateAppearance_Parms;

	this->ProcessEvent ( pFnUpdateAppearance, &UpdateAppearance_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.UpdateHairAppearance
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::UpdateHairAppearance ( )
{
	static UFunction* pFnUpdateHairAppearance = NULL;

	if ( ! pFnUpdateHairAppearance )
		pFnUpdateHairAppearance = (UFunction*) UObject::GObjObjects()->Data[ 58526 ];

	ASFXPawn_Player_execUpdateHairAppearance_Parms UpdateHairAppearance_Parms;

	this->ProcessEvent ( pFnUpdateHairAppearance, &UpdateHairAppearance_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.UpdateGameEffects
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Player::UpdateGameEffects ( )
{
	static UFunction* pFnUpdateGameEffects = NULL;

	if ( ! pFnUpdateGameEffects )
		pFnUpdateGameEffects = (UFunction*) UObject::GObjObjects()->Data[ 58522 ];

	ASFXPawn_Player_execUpdateGameEffects_Parms UpdateGameEffects_Parms;

	this->ProcessEvent ( pFnUpdateGameEffects, &UpdateGameEffects_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.GetGameEffects
// [0x00420002] 
// Parameters infos:
// int                            Id                             ( CPF_Parm )
// TArray< struct FCustomizableElement > Meshes                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< class UClass* >        Effects                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXPawn_Player::GetGameEffects ( int Id, TArray< struct FCustomizableElement >* Meshes, TArray< class UClass* >* Effects )
{
	static UFunction* pFnGetGameEffects = NULL;

	if ( ! pFnGetGameEffects )
		pFnGetGameEffects = (UFunction*) UObject::GObjObjects()->Data[ 58513 ];

	ASFXPawn_Player_execGetGameEffects_Parms GetGameEffects_Parms;
	GetGameEffects_Parms.Id = Id;

	this->ProcessEvent ( pFnGetGameEffects, &GetGameEffects_Parms, NULL );

	if ( Meshes )
		memcpy ( Meshes, &GetGameEffects_Parms.Meshes, 0xC );

	if ( Effects )
		memcpy ( Effects, &GetGameEffects_Parms.Effects, 0xC );
};

// Function SFXGame.SFXPawn_Player.ValidateAppearanceIDs
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void ASFXPawn_Player::ValidateAppearanceIDs ( )
{
	static UFunction* pFnValidateAppearanceIDs = NULL;

	if ( ! pFnValidateAppearanceIDs )
		pFnValidateAppearanceIDs = (UFunction*) UObject::GObjObjects()->Data[ 58512 ];

	ASFXPawn_Player_execValidateAppearanceIDs_Parms ValidateAppearanceIDs_Parms;

	this->ProcessEvent ( pFnValidateAppearanceIDs, &ValidateAppearanceIDs_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.EnsureMIC
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// class UMaterialInstanceConstant* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USkeletalMeshComponent*  MeshCmpt                       ( CPF_Parm | CPF_EditInline )
// int                            MatIdx                         ( CPF_OptionalParm | CPF_Parm )

class UMaterialInstanceConstant* ASFXPawn_Player::EnsureMIC ( class USkeletalMeshComponent* MeshCmpt, int MatIdx )
{
	static UFunction* pFnEnsureMIC = NULL;

	if ( ! pFnEnsureMIC )
		pFnEnsureMIC = (UFunction*) UObject::GObjObjects()->Data[ 58506 ];

	ASFXPawn_Player_execEnsureMIC_Parms EnsureMIC_Parms;
	EnsureMIC_Parms.MeshCmpt = MeshCmpt;
	EnsureMIC_Parms.MatIdx = MatIdx;

	this->ProcessEvent ( pFnEnsureMIC, &EnsureMIC_Parms, NULL );

	return EnsureMIC_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Player.GetHelmetMesh
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class USkeletalMesh*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Id                             ( CPF_Parm )
// unsigned char                  Part                           ( CPF_Parm )
// TArray< struct FCustomizableElement > Meshes                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FCustomizableElement    Element                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class USkeletalMesh* ASFXPawn_Player::GetHelmetMesh ( int Id, unsigned char Part, TArray< struct FCustomizableElement >* Meshes, struct FCustomizableElement* Element )
{
	static UFunction* pFnGetHelmetMesh = NULL;

	if ( ! pFnGetHelmetMesh )
		pFnGetHelmetMesh = (UFunction*) UObject::GObjObjects()->Data[ 58496 ];

	ASFXPawn_Player_execGetHelmetMesh_Parms GetHelmetMesh_Parms;
	GetHelmetMesh_Parms.Id = Id;
	GetHelmetMesh_Parms.Part = Part;

	this->ProcessEvent ( pFnGetHelmetMesh, &GetHelmetMesh_Parms, NULL );

	if ( Meshes )
		memcpy ( Meshes, &GetHelmetMesh_Parms.Meshes, 0xC );

	if ( Element )
		memcpy ( Element, &GetHelmetMesh_Parms.Element, 0x188 );

	return GetHelmetMesh_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Player.GetMaterialOverride
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class UMaterialInstance*       ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Id                             ( CPF_Parm )
// TArray< struct FCustomizableElement > Meshes                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FCustomizableElement    Element                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class UMaterialInstance* ASFXPawn_Player::GetMaterialOverride ( int Id, TArray< struct FCustomizableElement >* Meshes, struct FCustomizableElement* Element )
{
	static UFunction* pFnGetMaterialOverride = NULL;

	if ( ! pFnGetMaterialOverride )
		pFnGetMaterialOverride = (UFunction*) UObject::GObjObjects()->Data[ 58487 ];

	ASFXPawn_Player_execGetMaterialOverride_Parms GetMaterialOverride_Parms;
	GetMaterialOverride_Parms.Id = Id;

	this->ProcessEvent ( pFnGetMaterialOverride, &GetMaterialOverride_Parms, NULL );

	if ( Meshes )
		memcpy ( Meshes, &GetMaterialOverride_Parms.Meshes, 0xC );

	if ( Element )
		memcpy ( Element, &GetMaterialOverride_Parms.Element, 0x188 );

	return GetMaterialOverride_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Player.GetMesh
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class USkeletalMesh*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Id                             ( CPF_Parm )
// TArray< struct FCustomizableElement > Meshes                         ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FCustomizableElement    Element                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

class USkeletalMesh* ASFXPawn_Player::GetMesh ( int Id, TArray< struct FCustomizableElement >* Meshes, struct FCustomizableElement* Element )
{
	static UFunction* pFnGetMesh = NULL;

	if ( ! pFnGetMesh )
		pFnGetMesh = (UFunction*) UObject::GObjObjects()->Data[ 58478 ];

	ASFXPawn_Player_execGetMesh_Parms GetMesh_Parms;
	GetMesh_Parms.Id = Id;

	this->ProcessEvent ( pFnGetMesh, &GetMesh_Parms, NULL );

	if ( Meshes )
		memcpy ( Meshes, &GetMesh_Parms.Meshes, 0xC );

	if ( Element )
		memcpy ( Element, &GetMesh_Parms.Element, 0x188 );

	return GetMesh_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Player.LoadShaderCacheForObject
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 BaseObjectName                 ( CPF_Parm | CPF_NeedCtorLink )

void ASFXPawn_Player::LoadShaderCacheForObject ( struct FString BaseObjectName )
{
	static UFunction* pFnLoadShaderCacheForObject = NULL;

	if ( ! pFnLoadShaderCacheForObject )
		pFnLoadShaderCacheForObject = (UFunction*) UObject::GObjObjects()->Data[ 58474 ];

	ASFXPawn_Player_execLoadShaderCacheForObject_Parms LoadShaderCacheForObject_Parms;
	memcpy ( &LoadShaderCacheForObject_Parms.BaseObjectName, &BaseObjectName, 0xC );

	this->ProcessEvent ( pFnLoadShaderCacheForObject, &LoadShaderCacheForObject_Parms, NULL );
};

// Function SFXGame.SFXPawn_Player.GetFullName
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXPawn_Player::GetFullName ( )
{
	static UFunction* pFnGetFullName = NULL;

	if ( ! pFnGetFullName )
		pFnGetFullName = (UFunction*) UObject::GObjObjects()->Data[ 46564 ];

	ASFXPawn_Player_execGetFullName_Parms GetFullName_Parms;

	this->ProcessEvent ( pFnGetFullName, &GetFullName_Parms, NULL );

	return GetFullName_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn.OnPowersLoaded
// [0x00020002] 
// Parameters infos:

void ASFXPawn::OnPowersLoaded ( )
{
	static UFunction* pFnOnPowersLoaded = NULL;

	if ( ! pFnOnPowersLoaded )
		pFnOnPowersLoaded = (UFunction*) UObject::GObjObjects()->Data[ 58275 ];

	ASFXPawn_execOnPowersLoaded_Parms OnPowersLoaded_Parms;

	this->ProcessEvent ( pFnOnPowersLoaded, &OnPowersLoaded_Parms, NULL );
};

// Function SFXGame.SFXPawn.CreatePlayerSquadWeapons
// [0x00020002] 
// Parameters infos:
// class USFXPlayerSquadLoadoutData* ChkLoadout                     ( CPF_Parm )
// struct FString                 LoadoutWeapons                 ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ASFXPawn::CreatePlayerSquadWeapons ( class USFXPlayerSquadLoadoutData* ChkLoadout, struct FString* LoadoutWeapons )
{
	static UFunction* pFnCreatePlayerSquadWeapons = NULL;

	if ( ! pFnCreatePlayerSquadWeapons )
		pFnCreatePlayerSquadWeapons = (UFunction*) UObject::GObjObjects()->Data[ 58266 ];

	ASFXPawn_execCreatePlayerSquadWeapons_Parms CreatePlayerSquadWeapons_Parms;
	CreatePlayerSquadWeapons_Parms.ChkLoadout = ChkLoadout;
	memcpy ( &CreatePlayerSquadWeapons_Parms.LoadoutWeapons, &LoadoutWeapons, 0x48 );

	this->ProcessEvent ( pFnCreatePlayerSquadWeapons, &CreatePlayerSquadWeapons_Parms, NULL );
};

// Function SFXGame.SFXPawn.GetPrettyName
// [0x00020002] 
// Parameters infos:

void ASFXPawn::GetPrettyName ( )
{
	static UFunction* pFnGetPrettyName = NULL;

	if ( ! pFnGetPrettyName )
		pFnGetPrettyName = (UFunction*) UObject::GObjObjects()->Data[ 58264 ];

	ASFXPawn_execGetPrettyName_Parms GetPrettyName_Parms;

	this->ProcessEvent ( pFnGetPrettyName, &GetPrettyName_Parms, NULL );
};

// Function SFXGame.SFXPawn.GetShieldTypeAsDisplayString
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FString ASFXPawn::GetShieldTypeAsDisplayString ( )
{
	static UFunction* pFnGetShieldTypeAsDisplayString = NULL;

	if ( ! pFnGetShieldTypeAsDisplayString )
		pFnGetShieldTypeAsDisplayString = (UFunction*) UObject::GObjObjects()->Data[ 58260 ];

	ASFXPawn_execGetShieldTypeAsDisplayString_Parms GetShieldTypeAsDisplayString_Parms;

	this->ProcessEvent ( pFnGetShieldTypeAsDisplayString, &GetShieldTypeAsDisplayString_Parms, NULL );

	return GetShieldTypeAsDisplayString_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn.CanUseWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  WeaponClass                    ( CPF_Parm )

bool ASFXPawn::CanUseWeapon ( class UClass* WeaponClass )
{
	static UFunction* pFnCanUseWeapon = NULL;

	if ( ! pFnCanUseWeapon )
		pFnCanUseWeapon = (UFunction*) UObject::GObjObjects()->Data[ 58252 ];

	ASFXPawn_execCanUseWeapon_Parms CanUseWeapon_Parms;
	CanUseWeapon_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFnCanUseWeapon, &CanUseWeapon_Parms, NULL );

	return CanUseWeapon_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn.PlayFireCharging
// [0x00020002] 
// Parameters infos:

void ASFXPawn::PlayFireCharging ( )
{
	static UFunction* pFnPlayFireCharging = NULL;

	if ( ! pFnPlayFireCharging )
		pFnPlayFireCharging = (UFunction*) UObject::GObjObjects()->Data[ 58251 ];

	ASFXPawn_execPlayFireCharging_Parms PlayFireCharging_Parms;

	this->ProcessEvent ( pFnPlayFireCharging, &PlayFireCharging_Parms, NULL );
};

// Function SFXGame.SFXPawn.CreateVisualEffect
// [0x00420002] 
// Parameters infos:
// class UBioVFXTemplate*         Template                       ( CPF_Parm )
// class ABioVisualEffect*        Effect                         ( CPF_Parm | CPF_OutParm )

void ASFXPawn::CreateVisualEffect ( class UBioVFXTemplate* Template, class ABioVisualEffect** Effect )
{
	static UFunction* pFnCreateVisualEffect = NULL;

	if ( ! pFnCreateVisualEffect )
		pFnCreateVisualEffect = (UFunction*) UObject::GObjObjects()->Data[ 58248 ];

	ASFXPawn_execCreateVisualEffect_Parms CreateVisualEffect_Parms;
	CreateVisualEffect_Parms.Template = Template;

	this->ProcessEvent ( pFnCreateVisualEffect, &CreateVisualEffect_Parms, NULL );

	if ( Effect )
		*Effect = CreateVisualEffect_Parms.Effect;
};

// Function SFXGame.SFXPawn.TalkingTimout
// [0x00020002] 
// Parameters infos:

void ASFXPawn::TalkingTimout ( )
{
	static UFunction* pFnTalkingTimout = NULL;

	if ( ! pFnTalkingTimout )
		pFnTalkingTimout = (UFunction*) UObject::GObjObjects()->Data[ 58247 ];

	ASFXPawn_execTalkingTimout_Parms TalkingTimout_Parms;

	this->ProcessEvent ( pFnTalkingTimout, &TalkingTimout_Parms, NULL );
};

// Function SFXGame.SFXPawn.SetTalking
// [0x00020002] 
// Parameters infos:

void ASFXPawn::SetTalking ( )
{
	static UFunction* pFnSetTalking = NULL;

	if ( ! pFnSetTalking )
		pFnSetTalking = (UFunction*) UObject::GObjObjects()->Data[ 58246 ];

	ASFXPawn_execSetTalking_Parms SetTalking_Parms;

	this->ProcessEvent ( pFnSetTalking, &SetTalking_Parms, NULL );
};

// Function SFXGame.SFXPawn.PlayStepEffect
// [0x00020002] 
// Parameters infos:
// int                            FootDown                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// float                          Loudness                       ( CPF_Parm )

void ASFXPawn::PlayStepEffect ( int FootDown, struct FTraceHitInfo HitInfo, float Loudness )
{
	static UFunction* pFnPlayStepEffect = NULL;

	if ( ! pFnPlayStepEffect )
		pFnPlayStepEffect = (UFunction*) UObject::GObjObjects()->Data[ 58240 ];

	ASFXPawn_execPlayStepEffect_Parms PlayStepEffect_Parms;
	PlayStepEffect_Parms.FootDown = FootDown;
	memcpy ( &PlayStepEffect_Parms.HitInfo, &HitInfo, 0x1C );
	PlayStepEffect_Parms.Loudness = Loudness;

	this->ProcessEvent ( pFnPlayStepEffect, &PlayStepEffect_Parms, NULL );
};

// Function SFXGame.BioArtPlaceableBehaviorSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioArtPlaceableBehaviorSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 31725 ];

	UBioArtPlaceableBehaviorSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioArtPlaceableBehaviorSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioArtPlaceableBehaviorSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 31720 ];

	UBioArtPlaceableBehaviorSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.BioBaseSquadSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioBaseSquadSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 32314 ];

	UBioBaseSquadSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioBaseSquadSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioBaseSquadSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 32312 ];

	UBioBaseSquadSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.BioSeqEvt_TakeDamage.HandleDamage
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  InOriginator                   ( CPF_Parm )
// class AActor*                  InInstigator                   ( CPF_Parm )
// class UClass*                  inDamageType                   ( CPF_Parm )
// float                          inAmount                       ( CPF_Parm )
// float                          inMitigatedAmount              ( CPF_Parm )

void UBioSeqEvt_TakeDamage::HandleDamage ( class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, float inAmount, float inMitigatedAmount )
{
	static UFunction* pFnHandleDamage = NULL;

	if ( ! pFnHandleDamage )
		pFnHandleDamage = (UFunction*) UObject::GObjObjects()->Data[ 46065 ];

	UBioSeqEvt_TakeDamage_execHandleDamage_Parms HandleDamage_Parms;
	HandleDamage_Parms.InOriginator = InOriginator;
	HandleDamage_Parms.InInstigator = InInstigator;
	HandleDamage_Parms.inDamageType = inDamageType;
	HandleDamage_Parms.inAmount = inAmount;
	HandleDamage_Parms.inMitigatedAmount = inMitigatedAmount;

	this->ProcessEvent ( pFnHandleDamage, &HandleDamage_Parms, NULL );
};

// Function SFXGame.BioSeqEvt_TakeDamage.IsValidDamageType
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  inDamageType                   ( CPF_Parm )

bool UBioSeqEvt_TakeDamage::IsValidDamageType ( class UClass* inDamageType )
{
	static UFunction* pFnIsValidDamageType = NULL;

	if ( ! pFnIsValidDamageType )
		pFnIsValidDamageType = (UFunction*) UObject::GObjObjects()->Data[ 46061 ];

	UBioSeqEvt_TakeDamage_execIsValidDamageType_Parms IsValidDamageType_Parms;
	IsValidDamageType_Parms.inDamageType = inDamageType;

	this->ProcessEvent ( pFnIsValidDamageType, &IsValidDamageType_Parms, NULL );

	return IsValidDamageType_Parms.ReturnValue;
};

// Function SFXGame.BioCameraBehaviorFlourish.Tick
// [0x00820002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void UBioCameraBehaviorFlourish::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 32499 ];

	UBioCameraBehaviorFlourish_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorFree.Initialize
// [0x00020002] 
// Parameters infos:
// class ABioPlayerController*    NewOwner                       ( CPF_Parm )

void UBioCameraBehaviorFree::Initialize ( class ABioPlayerController* NewOwner )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 32519 ];

	UBioCameraBehaviorFree_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.NewOwner = NewOwner;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.BioCameraBehaviorFree.Tick
// [0x00820002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void UBioCameraBehaviorFree::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 32515 ];

	UBioCameraBehaviorFree_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXInventoryManager.StartFire
// [0x00020102] 
// Parameters infos:
// unsigned char                  FireModeNum                    ( CPF_Parm )

void ASFXInventoryManager::StartFire ( unsigned char FireModeNum )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = (UFunction*) UObject::GObjObjects()->Data[ 57538 ];

	ASFXInventoryManager_execStartFire_Parms StartFire_Parms;
	StartFire_Parms.FireModeNum = FireModeNum;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function SFXGame.SFXInventoryManager.GrantScaledCredits
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nSize                          ( CPF_Parm )
// unsigned long                  i_bTickResource                ( CPF_OptionalParm | CPF_Parm )

bool ASFXInventoryManager::GrantScaledCredits ( int nSize, unsigned long i_bTickResource )
{
	static UFunction* pFnGrantScaledCredits = NULL;

	if ( ! pFnGrantScaledCredits )
		pFnGrantScaledCredits = (UFunction*) UObject::GObjObjects()->Data[ 57527 ];

	ASFXInventoryManager_execGrantScaledCredits_Parms GrantScaledCredits_Parms;
	GrantScaledCredits_Parms.nSize = nSize;
	GrantScaledCredits_Parms.i_bTickResource = i_bTickResource;

	this->ProcessEvent ( pFnGrantScaledCredits, &GrantScaledCredits_Parms, NULL );

	return GrantScaledCredits_Parms.ReturnValue;
};

// Function SFXGame.SFXInventoryManager.GetMaxProbes
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXInventoryManager::GetMaxProbes ( )
{
	static UFunction* pFnGetMaxProbes = NULL;

	if ( ! pFnGetMaxProbes )
		pFnGetMaxProbes = (UFunction*) UObject::GObjObjects()->Data[ 57525 ];

	ASFXInventoryManager_execGetMaxProbes_Parms GetMaxProbes_Parms;

	this->ProcessEvent ( pFnGetMaxProbes, &GetMaxProbes_Parms, NULL );

	return GetMaxProbes_Parms.ReturnValue;
};

// Function SFXGame.SFXInventoryManager.GetMaxMedigel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXInventoryManager::GetMaxMedigel ( )
{
	static UFunction* pFnGetMaxMedigel = NULL;

	if ( ! pFnGetMaxMedigel )
		pFnGetMaxMedigel = (UFunction*) UObject::GObjObjects()->Data[ 57523 ];

	ASFXInventoryManager_execGetMaxMedigel_Parms GetMaxMedigel_Parms;

	this->ProcessEvent ( pFnGetMaxMedigel, &GetMaxMedigel_Parms, NULL );

	return GetMaxMedigel_Parms.ReturnValue;
};

// Function SFXGame.SFXInventoryManager.SetMaxFuel
// [0x00020002] 
// Parameters infos:
// float                          F                              ( CPF_Parm )

void ASFXInventoryManager::SetMaxFuel ( float F )
{
	static UFunction* pFnSetMaxFuel = NULL;

	if ( ! pFnSetMaxFuel )
		pFnSetMaxFuel = (UFunction*) UObject::GObjObjects()->Data[ 57521 ];

	ASFXInventoryManager_execSetMaxFuel_Parms SetMaxFuel_Parms;
	SetMaxFuel_Parms.F = F;

	this->ProcessEvent ( pFnSetMaxFuel, &SetMaxFuel_Parms, NULL );
};

// Function SFXGame.SFXInventoryManager.GetMaxFuel
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXInventoryManager::GetMaxFuel ( )
{
	static UFunction* pFnGetMaxFuel = NULL;

	if ( ! pFnGetMaxFuel )
		pFnGetMaxFuel = (UFunction*) UObject::GObjObjects()->Data[ 57518 ];

	ASFXInventoryManager_execGetMaxFuel_Parms GetMaxFuel_Parms;

	this->ProcessEvent ( pFnGetMaxFuel, &GetMaxFuel_Parms, NULL );

	return GetMaxFuel_Parms.ReturnValue;
};

// Function SFXGame.SFXInventoryManager.GetResource
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eInvResType                    ( CPF_Parm )

int ASFXInventoryManager::GetResource ( unsigned char eInvResType )
{
	static UFunction* pFnGetResource = NULL;

	if ( ! pFnGetResource )
		pFnGetResource = (UFunction*) UObject::GObjObjects()->Data[ 57515 ];

	ASFXInventoryManager_execGetResource_Parms GetResource_Parms;
	GetResource_Parms.eInvResType = eInvResType;

	this->ProcessEvent ( pFnGetResource, &GetResource_Parms, NULL );

	return GetResource_Parms.ReturnValue;
};

// Function SFXGame.SFXInventoryManager.AdjustResource
// [0x00020002] 
// Parameters infos:
// unsigned char                  eInvResType                    ( CPF_Parm )
// int                            Amount                         ( CPF_Parm )
// unsigned long                  bShowNotification              ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreBudget                  ( CPF_OptionalParm | CPF_Parm )

void ASFXInventoryManager::AdjustResource ( unsigned char eInvResType, int Amount, unsigned long bShowNotification, unsigned long bIgnoreBudget )
{
	static UFunction* pFnAdjustResource = NULL;

	if ( ! pFnAdjustResource )
		pFnAdjustResource = (UFunction*) UObject::GObjObjects()->Data[ 57506 ];

	ASFXInventoryManager_execAdjustResource_Parms AdjustResource_Parms;
	AdjustResource_Parms.eInvResType = eInvResType;
	AdjustResource_Parms.Amount = Amount;
	AdjustResource_Parms.bShowNotification = bShowNotification;
	AdjustResource_Parms.bIgnoreBudget = bIgnoreBudget;

	this->ProcessEvent ( pFnAdjustResource, &AdjustResource_Parms, NULL );
};

// Function SFXGame.SFXInventoryManager.EmptyInventory
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXInventoryManager::eventEmptyInventory ( )
{
	static UFunction* pFnEmptyInventory = NULL;

	if ( ! pFnEmptyInventory )
		pFnEmptyInventory = (UFunction*) UObject::GObjObjects()->Data[ 57504 ];

	ASFXInventoryManager_eventEmptyInventory_Parms EmptyInventory_Parms;

	this->ProcessEvent ( pFnEmptyInventory, &EmptyInventory_Parms, NULL );
};

// Function SFXGame.SFXInventoryManager.ProcessDamage
// [0x00420102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          Damage                         ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void ASFXInventoryManager::ProcessDamage ( class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum )
{
	static UFunction* pFnProcessDamage = NULL;

	if ( ! pFnProcessDamage )
		pFnProcessDamage = (UFunction*) UObject::GObjObjects()->Data[ 57494 ];

	ASFXInventoryManager_execProcessDamage_Parms ProcessDamage_Parms;
	ProcessDamage_Parms.DamageType = DamageType;
	ProcessDamage_Parms.InstigatedBy = InstigatedBy;
	ProcessDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnProcessDamage, &ProcessDamage_Parms, NULL );

	if ( Damage )
		*Damage = ProcessDamage_Parms.Damage;

	if ( HitInfo )
		memcpy ( HitInfo, &ProcessDamage_Parms.HitInfo, 0x1C );

	if ( HitLocation )
		memcpy ( HitLocation, &ProcessDamage_Parms.HitLocation, 0xC );

	if ( Momentum )
		memcpy ( Momentum, &ProcessDamage_Parms.Momentum, 0xC );
};

// Function SFXGame.SFXInventoryManager.CreateInventory
// [0x00020102] 
// Parameters infos:
// class AInventory*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  NewInventoryItemClass          ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

class AInventory* ASFXInventoryManager::CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate )
{
	static UFunction* pFnCreateInventory = NULL;

	if ( ! pFnCreateInventory )
		pFnCreateInventory = (UFunction*) UObject::GObjObjects()->Data[ 57489 ];

	ASFXInventoryManager_execCreateInventory_Parms CreateInventory_Parms;
	CreateInventory_Parms.NewInventoryItemClass = NewInventoryItemClass;
	CreateInventory_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnCreateInventory, &CreateInventory_Parms, NULL );

	return CreateInventory_Parms.ReturnValue;
};

// Function SFXGame.SFXInventoryManager.GetWeaponInSlot
// [0x00020102] 
// Parameters infos:
// class ASFXWeapon*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Slot                           ( CPF_Parm )
// unsigned long                  bIgnoreWielded                 ( CPF_OptionalParm | CPF_Parm )

class ASFXWeapon* ASFXInventoryManager::GetWeaponInSlot ( unsigned char Slot, unsigned long bIgnoreWielded )
{
	static UFunction* pFnGetWeaponInSlot = NULL;

	if ( ! pFnGetWeaponInSlot )
		pFnGetWeaponInSlot = (UFunction*) UObject::GObjObjects()->Data[ 57484 ];

	ASFXInventoryManager_execGetWeaponInSlot_Parms GetWeaponInSlot_Parms;
	GetWeaponInSlot_Parms.Slot = Slot;
	GetWeaponInSlot_Parms.bIgnoreWielded = bIgnoreWielded;

	this->ProcessEvent ( pFnGetWeaponInSlot, &GetWeaponInSlot_Parms, NULL );

	return GetWeaponInSlot_Parms.ReturnValue;
};

// Function SFXGame.SFXInventoryManager.SetWeaponIfAvailable
// [0x00020102] 
// Parameters infos:
// class ASFXWeapon*              WeapToSwitch                   ( CPF_Parm )

void ASFXInventoryManager::SetWeaponIfAvailable ( class ASFXWeapon* WeapToSwitch )
{
	static UFunction* pFnSetWeaponIfAvailable = NULL;

	if ( ! pFnSetWeaponIfAvailable )
		pFnSetWeaponIfAvailable = (UFunction*) UObject::GObjObjects()->Data[ 57481 ];

	ASFXInventoryManager_execSetWeaponIfAvailable_Parms SetWeaponIfAvailable_Parms;
	SetWeaponIfAvailable_Parms.WeapToSwitch = WeapToSwitch;

	this->ProcessEvent ( pFnSetWeaponIfAvailable, &SetWeaponIfAvailable_Parms, NULL );
};

// Function SFXGame.SFXInventoryManager.SetWeaponFromSlot
// [0x00020102] 
// Parameters infos:
// unsigned char                  Slot                           ( CPF_Parm )

void ASFXInventoryManager::SetWeaponFromSlot ( unsigned char Slot )
{
	static UFunction* pFnSetWeaponFromSlot = NULL;

	if ( ! pFnSetWeaponFromSlot )
		pFnSetWeaponFromSlot = (UFunction*) UObject::GObjObjects()->Data[ 57478 ];

	ASFXInventoryManager_execSetWeaponFromSlot_Parms SetWeaponFromSlot_Parms;
	SetWeaponFromSlot_Parms.Slot = Slot;

	this->ProcessEvent ( pFnSetWeaponFromSlot, &SetWeaponFromSlot_Parms, NULL );
};

// Function SFXGame.SFXInventoryManager.SetWeaponBySelected
// [0x00020102] 
// Parameters infos:

void ASFXInventoryManager::SetWeaponBySelected ( )
{
	static UFunction* pFnSetWeaponBySelected = NULL;

	if ( ! pFnSetWeaponBySelected )
		pFnSetWeaponBySelected = (UFunction*) UObject::GObjObjects()->Data[ 57475 ];

	ASFXInventoryManager_execSetWeaponBySelected_Parms SetWeaponBySelected_Parms;

	this->ProcessEvent ( pFnSetWeaponBySelected, &SetWeaponBySelected_Parms, NULL );
};

// Function SFXGame.SFXInventoryManager.ChangedWeapon
// [0x00020102] 
// Parameters infos:

void ASFXInventoryManager::ChangedWeapon ( )
{
	static UFunction* pFnChangedWeapon = NULL;

	if ( ! pFnChangedWeapon )
		pFnChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 57472 ];

	ASFXInventoryManager_execChangedWeapon_Parms ChangedWeapon_Parms;

	this->ProcessEvent ( pFnChangedWeapon, &ChangedWeapon_Parms, NULL );
};

// Function SFXGame.SFXInventoryManager.CancelWeaponChange
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXInventoryManager::CancelWeaponChange ( )
{
	static UFunction* pFnCancelWeaponChange = NULL;

	if ( ! pFnCancelWeaponChange )
		pFnCancelWeaponChange = (UFunction*) UObject::GObjObjects()->Data[ 57470 ];

	ASFXInventoryManager_execCancelWeaponChange_Parms CancelWeaponChange_Parms;

	this->ProcessEvent ( pFnCancelWeaponChange, &CancelWeaponChange_Parms, NULL );

	return CancelWeaponChange_Parms.ReturnValue;
};

// Function SFXGame.SFXInventoryManager.GetPlayerCrosshairValue
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXInventoryManager::GetPlayerCrosshairValue ( )
{
	static UFunction* pFnGetPlayerCrosshairValue = NULL;

	if ( ! pFnGetPlayerCrosshairValue )
		pFnGetPlayerCrosshairValue = (UFunction*) UObject::GObjObjects()->Data[ 57465 ];

	ASFXInventoryManager_execGetPlayerCrosshairValue_Parms GetPlayerCrosshairValue_Parms;

	this->ProcessEvent ( pFnGetPlayerCrosshairValue, &GetPlayerCrosshairValue_Parms, NULL );

	return GetPlayerCrosshairValue_Parms.ReturnValue;
};

// Function SFXGame.SFXInventoryManager.GetPlayerNormalizedAccuracy
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXInventoryManager::GetPlayerNormalizedAccuracy ( )
{
	static UFunction* pFnGetPlayerNormalizedAccuracy = NULL;

	if ( ! pFnGetPlayerNormalizedAccuracy )
		pFnGetPlayerNormalizedAccuracy = (UFunction*) UObject::GObjObjects()->Data[ 57463 ];

	ASFXInventoryManager_execGetPlayerNormalizedAccuracy_Parms GetPlayerNormalizedAccuracy_Parms;

	this->ProcessEvent ( pFnGetPlayerNormalizedAccuracy, &GetPlayerNormalizedAccuracy_Parms, NULL );

	return GetPlayerNormalizedAccuracy_Parms.ReturnValue;
};

// Function SFXGame.SFXInventoryManager.UpdatePlayerAccuracy
// [0x00820102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXInventoryManager::UpdatePlayerAccuracy ( float DeltaTime )
{
	static UFunction* pFnUpdatePlayerAccuracy = NULL;

	if ( ! pFnUpdatePlayerAccuracy )
		pFnUpdatePlayerAccuracy = (UFunction*) UObject::GObjObjects()->Data[ 57449 ];

	ASFXInventoryManager_execUpdatePlayerAccuracy_Parms UpdatePlayerAccuracy_Parms;
	UpdatePlayerAccuracy_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdatePlayerAccuracy, &UpdatePlayerAccuracy_Parms, NULL );
};

// Function SFXGame.SFXInventoryManager.DebugDrawWeaponAccuracy
// [0x00820102] 
// Parameters infos:

void ASFXInventoryManager::DebugDrawWeaponAccuracy ( )
{
	static UFunction* pFnDebugDrawWeaponAccuracy = NULL;

	if ( ! pFnDebugDrawWeaponAccuracy )
		pFnDebugDrawWeaponAccuracy = (UFunction*) UObject::GObjObjects()->Data[ 57443 ];

	ASFXInventoryManager_execDebugDrawWeaponAccuracy_Parms DebugDrawWeaponAccuracy_Parms;

	this->ProcessEvent ( pFnDebugDrawWeaponAccuracy, &DebugDrawWeaponAccuracy_Parms, NULL );
};

// Function SFXGame.SFXInventoryManager.Tick
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXInventoryManager::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 57439 ];

	ASFXInventoryManager_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXInventoryManager.UpdateKickbackFade
// [0x00C20102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void ASFXInventoryManager::UpdateKickbackFade ( float DeltaTime, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnUpdateKickbackFade = NULL;

	if ( ! pFnUpdateKickbackFade )
		pFnUpdateKickbackFade = (UFunction*) UObject::GObjObjects()->Data[ 57431 ];

	ASFXInventoryManager_execUpdateKickbackFade_Parms UpdateKickbackFade_Parms;
	UpdateKickbackFade_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateKickbackFade, &UpdateKickbackFade_Parms, NULL );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &UpdateKickbackFade_Parms.out_DeltaRot, 0xC );
};

// Function SFXGame.SFXInventoryManager.ApplySniperDrift
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool ASFXInventoryManager::ApplySniperDrift ( float DeltaTime )
{
	static UFunction* pFnApplySniperDrift = NULL;

	if ( ! pFnApplySniperDrift )
		pFnApplySniperDrift = (UFunction*) UObject::GObjObjects()->Data[ 57422 ];

	ASFXInventoryManager_execApplySniperDrift_Parms ApplySniperDrift_Parms;
	ApplySniperDrift_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnApplySniperDrift, &ApplySniperDrift_Parms, NULL );

	return ApplySniperDrift_Parms.ReturnValue;
};

// Function SFXGame.SFXInventoryManager.UpdateKickback
// [0x00C20102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                out_DeltaRot                   ( CPF_Parm | CPF_OutParm )

void ASFXInventoryManager::UpdateKickback ( float DeltaTime, struct FRotator* out_DeltaRot )
{
	static UFunction* pFnUpdateKickback = NULL;

	if ( ! pFnUpdateKickback )
		pFnUpdateKickback = (UFunction*) UObject::GObjObjects()->Data[ 57417 ];

	ASFXInventoryManager_execUpdateKickback_Parms UpdateKickback_Parms;
	UpdateKickback_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateKickback, &UpdateKickback_Parms, NULL );

	if ( out_DeltaRot )
		memcpy ( out_DeltaRot, &UpdateKickback_Parms.out_DeltaRot, 0xC );
};

// Function SFXGame.SFXInventoryManager.SetWeaponRecoil
// [0x00020102] 
// Parameters infos:
// float                          PitchRecoil                    ( CPF_Parm )

void ASFXInventoryManager::SetWeaponRecoil ( float PitchRecoil )
{
	static UFunction* pFnSetWeaponRecoil = NULL;

	if ( ! pFnSetWeaponRecoil )
		pFnSetWeaponRecoil = (UFunction*) UObject::GObjObjects()->Data[ 57410 ];

	ASFXInventoryManager_execSetWeaponRecoil_Parms SetWeaponRecoil_Parms;
	SetWeaponRecoil_Parms.PitchRecoil = PitchRecoil;

	this->ProcessEvent ( pFnSetWeaponRecoil, &SetWeaponRecoil_Parms, NULL );
};

// Function SFXGame.SFXInventoryManager.SwitchToBestWeapon
// [0x00020100] 
// Parameters infos:
// unsigned long                  bForceADifferentWeapon         ( CPF_OptionalParm | CPF_Parm )

void ASFXInventoryManager::SwitchToBestWeapon ( unsigned long bForceADifferentWeapon )
{
	static UFunction* pFnSwitchToBestWeapon = NULL;

	if ( ! pFnSwitchToBestWeapon )
		pFnSwitchToBestWeapon = (UFunction*) UObject::GObjObjects()->Data[ 57408 ];

	ASFXInventoryManager_execSwitchToBestWeapon_Parms SwitchToBestWeapon_Parms;
	SwitchToBestWeapon_Parms.bForceADifferentWeapon = bForceADifferentWeapon;

	this->ProcessEvent ( pFnSwitchToBestWeapon, &SwitchToBestWeapon_Parms, NULL );
};

// Function SFXGame.SFXPlayerCamera.SetBaseRotation
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FRotator                NewRotation                    ( CPF_Parm )

void ASFXPlayerCamera::SetBaseRotation ( struct FRotator NewRotation )
{
	static UFunction* pFnSetBaseRotation = NULL;

	if ( ! pFnSetBaseRotation )
		pFnSetBaseRotation = (UFunction*) UObject::GObjObjects()->Data[ 58992 ];

	ASFXPlayerCamera_execSetBaseRotation_Parms SetBaseRotation_Parms;
	memcpy ( &SetBaseRotation_Parms.NewRotation, &NewRotation, 0xC );

	this->ProcessEvent ( pFnSetBaseRotation, &SetBaseRotation_Parms, NULL );
};

// Function SFXGame.SFXPlayerCamera.GetBaseRotation
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator ASFXPlayerCamera::GetBaseRotation ( )
{
	static UFunction* pFnGetBaseRotation = NULL;

	if ( ! pFnGetBaseRotation )
		pFnGetBaseRotation = (UFunction*) UObject::GObjObjects()->Data[ 58990 ];

	ASFXPlayerCamera_execGetBaseRotation_Parms GetBaseRotation_Parms;

	this->ProcessEvent ( pFnGetBaseRotation, &GetBaseRotation_Parms, NULL );

	return GetBaseRotation_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerCamera.SwitchTo
// [0x00020002] 
// Parameters infos:
// class USFXCameraMode*          NewMode                        ( CPF_Parm )

void ASFXPlayerCamera::SwitchTo ( class USFXCameraMode* NewMode )
{
	static UFunction* pFnSwitchTo = NULL;

	if ( ! pFnSwitchTo )
		pFnSwitchTo = (UFunction*) UObject::GObjObjects()->Data[ 58988 ];

	ASFXPlayerCamera_execSwitchTo_Parms SwitchTo_Parms;
	SwitchTo_Parms.NewMode = NewMode;

	this->ProcessEvent ( pFnSwitchTo, &SwitchTo_Parms, NULL );
};

// Function SFXGame.SFXPlayerCamera.SetBehavior
// [0x00020002] 
// Parameters infos:
// class USFXCameraMode*          Mode                           ( CPF_Parm )
// class USFXCameraMode_Interpolate* NewTransition                  ( CPF_Parm )
// float                          Time                           ( CPF_Parm )
// unsigned long                  PreserveTarget                 ( CPF_Parm )

void ASFXPlayerCamera::SetBehavior ( class USFXCameraMode* Mode, class USFXCameraMode_Interpolate* NewTransition, float Time, unsigned long PreserveTarget )
{
	static UFunction* pFnSetBehavior = NULL;

	if ( ! pFnSetBehavior )
		pFnSetBehavior = (UFunction*) UObject::GObjObjects()->Data[ 58981 ];

	ASFXPlayerCamera_execSetBehavior_Parms SetBehavior_Parms;
	SetBehavior_Parms.Mode = Mode;
	SetBehavior_Parms.NewTransition = NewTransition;
	SetBehavior_Parms.Time = Time;
	SetBehavior_Parms.PreserveTarget = PreserveTarget;

	this->ProcessEvent ( pFnSetBehavior, &SetBehavior_Parms, NULL );
};

// Function SFXGame.SFXPlayerCamera.UpdateCameraManager
// [0x00420002] 
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )
// float                          fAspectRatio                   ( CPF_Parm | CPF_OutParm )
// struct FTPOV                   POV                            ( CPF_Parm | CPF_OutParm )

void ASFXPlayerCamera::UpdateCameraManager ( float fDeltaTime, float* fAspectRatio, struct FTPOV* POV )
{
	static UFunction* pFnUpdateCameraManager = NULL;

	if ( ! pFnUpdateCameraManager )
		pFnUpdateCameraManager = (UFunction*) UObject::GObjObjects()->Data[ 58976 ];

	ASFXPlayerCamera_execUpdateCameraManager_Parms UpdateCameraManager_Parms;
	UpdateCameraManager_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnUpdateCameraManager, &UpdateCameraManager_Parms, NULL );

	if ( fAspectRatio )
		*fAspectRatio = UpdateCameraManager_Parms.fAspectRatio;

	if ( POV )
		memcpy ( POV, &UpdateCameraManager_Parms.POV, 0x1C );
};

// Function SFXGame.SFXPlayerCamera.PickCameraMode
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXPlayerCamera::PickCameraMode ( float DeltaTime )
{
	static UFunction* pFnPickCameraMode = NULL;

	if ( ! pFnPickCameraMode )
		pFnPickCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 58967 ];

	ASFXPlayerCamera_execPickCameraMode_Parms PickCameraMode_Parms;
	PickCameraMode_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnPickCameraMode, &PickCameraMode_Parms, NULL );
};

// Function SFXGame.SFXPlayerCamera.PlayCameraTransition
// [0x00020002] 
// Parameters infos:
// class USFXCameraMode_Interpolate* Transition                     ( CPF_Parm )
// float                          Time                           ( CPF_Parm )

void ASFXPlayerCamera::PlayCameraTransition ( class USFXCameraMode_Interpolate* Transition, float Time )
{
	static UFunction* pFnPlayCameraTransition = NULL;

	if ( ! pFnPlayCameraTransition )
		pFnPlayCameraTransition = (UFunction*) UObject::GObjObjects()->Data[ 58960 ];

	ASFXPlayerCamera_execPlayCameraTransition_Parms PlayCameraTransition_Parms;
	PlayCameraTransition_Parms.Transition = Transition;
	PlayCameraTransition_Parms.Time = Time;

	this->ProcessEvent ( pFnPlayCameraTransition, &PlayCameraTransition_Parms, NULL );
};

// Function SFXGame.SFXPlayerCamera.RotateToFace
// [0x00020002] 
// Parameters infos:
// struct FVector                 AimPoint                       ( CPF_Parm )
// float                          Time                           ( CPF_Parm )

void ASFXPlayerCamera::RotateToFace ( struct FVector AimPoint, float Time )
{
	static UFunction* pFnRotateToFace = NULL;

	if ( ! pFnRotateToFace )
		pFnRotateToFace = (UFunction*) UObject::GObjObjects()->Data[ 58957 ];

	ASFXPlayerCamera_execRotateToFace_Parms RotateToFace_Parms;
	memcpy ( &RotateToFace_Parms.AimPoint, &AimPoint, 0xC );
	RotateToFace_Parms.Time = Time;

	this->ProcessEvent ( pFnRotateToFace, &RotateToFace_Parms, NULL );
};

// Function SFXGame.SFXPlayerCamera.UpdateViewTarget
// [0x00420002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FTViewTarget            OutVT                          ( CPF_Parm | CPF_OutParm )

void ASFXPlayerCamera::UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT )
{
	static UFunction* pFnUpdateViewTarget = NULL;

	if ( ! pFnUpdateViewTarget )
		pFnUpdateViewTarget = (UFunction*) UObject::GObjObjects()->Data[ 58952 ];

	ASFXPlayerCamera_execUpdateViewTarget_Parms UpdateViewTarget_Parms;
	UpdateViewTarget_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdateViewTarget, &UpdateViewTarget_Parms, NULL );

	if ( OutVT )
		memcpy ( OutVT, &UpdateViewTarget_Parms.OutVT, 0x2C );
};

// Function SFXGame.SFXPlayerCamera.CreateCameraModifier
// [0x00020002] 
// Parameters infos:
// class UCameraModifier*         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  ModifierClass                  ( CPF_Parm )

class UCameraModifier* ASFXPlayerCamera::CreateCameraModifier ( class UClass* ModifierClass )
{
	static UFunction* pFnCreateCameraModifier = NULL;

	if ( ! pFnCreateCameraModifier )
		pFnCreateCameraModifier = (UFunction*) UObject::GObjObjects()->Data[ 58948 ];

	ASFXPlayerCamera_execCreateCameraModifier_Parms CreateCameraModifier_Parms;
	CreateCameraModifier_Parms.ModifierClass = ModifierClass;

	this->ProcessEvent ( pFnCreateCameraModifier, &CreateCameraModifier_Parms, NULL );

	return CreateCameraModifier_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerCamera.AddScreenShake
// [0x00020002] 
// Parameters infos:
// struct FScreenShakeStruct      Shake                          ( CPF_Parm )

void ASFXPlayerCamera::AddScreenShake ( struct FScreenShakeStruct Shake )
{
	static UFunction* pFnAddScreenShake = NULL;

	if ( ! pFnAddScreenShake )
		pFnAddScreenShake = (UFunction*) UObject::GObjObjects()->Data[ 58946 ];

	ASFXPlayerCamera_execAddScreenShake_Parms AddScreenShake_Parms;
	memcpy ( &AddScreenShake_Parms.Shake, &Shake, 0x70 );

	this->ProcessEvent ( pFnAddScreenShake, &AddScreenShake_Parms, NULL );
};

// Function SFXGame.SFXPlayerCamera.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ASFXPlayerCamera::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 58945 ];

	ASFXPlayerCamera_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManager.DrawActorLog
// [0x00820002] 
// Parameters infos:
// class AActor*                  oActor                         ( CPF_Parm )
// class ABioHUD*                 H                              ( CPF_Parm )

void ASFXVocalizationManager::DrawActorLog ( class AActor* oActor, class ABioHUD* H )
{
	static UFunction* pFnDrawActorLog = NULL;

	if ( ! pFnDrawActorLog )
		pFnDrawActorLog = (UFunction*) UObject::GObjObjects()->Data[ 62655 ];

	ASFXVocalizationManager_execDrawActorLog_Parms DrawActorLog_Parms;
	DrawActorLog_Parms.oActor = oActor;
	DrawActorLog_Parms.H = H;

	this->ProcessEvent ( pFnDrawActorLog, &DrawActorLog_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManager.DebugDraw
// [0x00020002] 
// Parameters infos:
// class ABioHUD*                 H                              ( CPF_Parm )

void ASFXVocalizationManager::DebugDraw ( class ABioHUD* H )
{
	static UFunction* pFnDebugDraw = NULL;

	if ( ! pFnDebugDraw )
		pFnDebugDraw = (UFunction*) UObject::GObjObjects()->Data[ 62649 ];

	ASFXVocalizationManager_execDebugDraw_Parms DebugDraw_Parms;
	DebugDraw_Parms.H = H;

	this->ProcessEvent ( pFnDebugDraw, &DebugDraw_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManager.TickEvents
// [0x00820902] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXVocalizationManager::eventTickEvents ( float DeltaTime )
{
	static UFunction* pFnTickEvents = NULL;

	if ( ! pFnTickEvents )
		pFnTickEvents = (UFunction*) UObject::GObjObjects()->Data[ 62641 ];

	ASFXVocalizationManager_eventTickEvents_Parms TickEvents_Parms;
	TickEvents_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTickEvents, &TickEvents_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManager.PlaySFXVocalizationSLineInternal
// [0x00C80902] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Speaker                        ( CPF_Parm )
// float                          DelaySec                       ( CPF_OptionalParm | CPF_Parm )
// struct FSFXVocalizationEvent   E                              ( CPF_Const | CPF_Parm | CPF_OutParm )
// struct FSFXVocalizationLine    LineToPlay                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

bool ASFXVocalizationManager::eventPlaySFXVocalizationSLineInternal ( class ABioPawn* Speaker, float DelaySec, struct FSFXVocalizationEvent* E, struct FSFXVocalizationLine* LineToPlay )
{
	static UFunction* pFnPlaySFXVocalizationSLineInternal = NULL;

	if ( ! pFnPlaySFXVocalizationSLineInternal )
		pFnPlaySFXVocalizationSLineInternal = (UFunction*) UObject::GObjObjects()->Data[ 62634 ];

	ASFXVocalizationManager_eventPlaySFXVocalizationSLineInternal_Parms PlaySFXVocalizationSLineInternal_Parms;
	PlaySFXVocalizationSLineInternal_Parms.Speaker = Speaker;
	PlaySFXVocalizationSLineInternal_Parms.DelaySec = DelaySec;

	this->ProcessEvent ( pFnPlaySFXVocalizationSLineInternal, &PlaySFXVocalizationSLineInternal_Parms, NULL );

	if ( E )
		memcpy ( E, &PlaySFXVocalizationSLineInternal_Parms.E, 0x14 );

	if ( LineToPlay )
		memcpy ( LineToPlay, &PlaySFXVocalizationSLineInternal_Parms.LineToPlay, 0x1C );

	return PlaySFXVocalizationSLineInternal_Parms.ReturnValue;
};

// Function SFXGame.SFXVocalizationManager.TriggerVocalizationEvent
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  Id                             ( CPF_Parm )
// class ABioPawn*                InInstigator                   ( CPF_Parm )
// class ABioPawn*                Recipient                      ( CPF_OptionalParm | CPF_Parm )
// class ABioPawn*                ReferringTo                    ( CPF_OptionalParm | CPF_Parm )
// float                          DelaySec                       ( CPF_OptionalParm | CPF_Parm )
// float                          fChanceToPlayModifier          ( CPF_OptionalParm | CPF_Parm )

void ASFXVocalizationManager::TriggerVocalizationEvent ( unsigned char Id, class ABioPawn* InInstigator, class ABioPawn* Recipient, class ABioPawn* ReferringTo, float DelaySec, float fChanceToPlayModifier )
{
	static UFunction* pFnTriggerVocalizationEvent = NULL;

	if ( ! pFnTriggerVocalizationEvent )
		pFnTriggerVocalizationEvent = (UFunction*) UObject::GObjObjects()->Data[ 49745 ];

	ASFXVocalizationManager_execTriggerVocalizationEvent_Parms TriggerVocalizationEvent_Parms;
	TriggerVocalizationEvent_Parms.Id = Id;
	TriggerVocalizationEvent_Parms.InInstigator = InInstigator;
	TriggerVocalizationEvent_Parms.Recipient = Recipient;
	TriggerVocalizationEvent_Parms.ReferringTo = ReferringTo;
	TriggerVocalizationEvent_Parms.DelaySec = DelaySec;
	TriggerVocalizationEvent_Parms.fChanceToPlayModifier = fChanceToPlayModifier;

	this->ProcessEvent ( pFnTriggerVocalizationEvent, &TriggerVocalizationEvent_Parms, NULL );
};

// Function SFXGame.SFXVocalizationManager.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXVocalizationManager::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 62623 ];

	ASFXVocalizationManager_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXModule_DamagePlayer.ComputePercentBledOut
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXModule_DamagePlayer::ComputePercentBledOut ( )
{
	static UFunction* pFnComputePercentBledOut = NULL;

	if ( ! pFnComputePercentBledOut )
		pFnComputePercentBledOut = (UFunction*) UObject::GObjObjects()->Data[ 57658 ];

	USFXModule_DamagePlayer_execComputePercentBledOut_Parms ComputePercentBledOut_Parms;

	this->ProcessEvent ( pFnComputePercentBledOut, &ComputePercentBledOut_Parms, NULL );

	return ComputePercentBledOut_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_DamagePlayer.OnBleedOutStop
// [0x00020002] 
// Parameters infos:

void USFXModule_DamagePlayer::OnBleedOutStop ( )
{
	static UFunction* pFnOnBleedOutStop = NULL;

	if ( ! pFnOnBleedOutStop )
		pFnOnBleedOutStop = (UFunction*) UObject::GObjObjects()->Data[ 57657 ];

	USFXModule_DamagePlayer_execOnBleedOutStop_Parms OnBleedOutStop_Parms;

	this->ProcessEvent ( pFnOnBleedOutStop, &OnBleedOutStop_Parms, NULL );
};

// Function SFXGame.SFXModule_DamagePlayer.OnBleedOutStart
// [0x00020002] 
// Parameters infos:

void USFXModule_DamagePlayer::OnBleedOutStart ( )
{
	static UFunction* pFnOnBleedOutStart = NULL;

	if ( ! pFnOnBleedOutStart )
		pFnOnBleedOutStart = (UFunction*) UObject::GObjObjects()->Data[ 57656 ];

	USFXModule_DamagePlayer_execOnBleedOutStart_Parms OnBleedOutStart_Parms;

	this->ProcessEvent ( pFnOnBleedOutStart, &OnBleedOutStart_Parms, NULL );
};

// Function SFXGame.SFXModule_DamagePlayer.ScaleBleedOut
// [0x00020002] 
// Parameters infos:
// float                          PercentBledOut                 ( CPF_Parm )

void USFXModule_DamagePlayer::ScaleBleedOut ( float PercentBledOut )
{
	static UFunction* pFnScaleBleedOut = NULL;

	if ( ! pFnScaleBleedOut )
		pFnScaleBleedOut = (UFunction*) UObject::GObjObjects()->Data[ 57654 ];

	USFXModule_DamagePlayer_execScaleBleedOut_Parms ScaleBleedOut_Parms;
	ScaleBleedOut_Parms.PercentBledOut = PercentBledOut;

	this->ProcessEvent ( pFnScaleBleedOut, &ScaleBleedOut_Parms, NULL );
};

// Function SFXGame.SFXModule_DamagePlayer.UpdateBleedOut
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXModule_DamagePlayer::UpdateBleedOut ( float TimeDelta )
{
	static UFunction* pFnUpdateBleedOut = NULL;

	if ( ! pFnUpdateBleedOut )
		pFnUpdateBleedOut = (UFunction*) UObject::GObjObjects()->Data[ 57650 ];

	USFXModule_DamagePlayer_execUpdateBleedOut_Parms UpdateBleedOut_Parms;
	UpdateBleedOut_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnUpdateBleedOut, &UpdateBleedOut_Parms, NULL );
};

// Function SFXGame.SFXModule_DamagePlayer.CalculateBleedoutVFXParam
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXModule_DamagePlayer::CalculateBleedoutVFXParam ( )
{
	static UFunction* pFnCalculateBleedoutVFXParam = NULL;

	if ( ! pFnCalculateBleedoutVFXParam )
		pFnCalculateBleedoutVFXParam = (UFunction*) UObject::GObjObjects()->Data[ 57648 ];

	USFXModule_DamagePlayer_execCalculateBleedoutVFXParam_Parms CalculateBleedoutVFXParam_Parms;

	this->ProcessEvent ( pFnCalculateBleedoutVFXParam, &CalculateBleedoutVFXParam_Parms, NULL );

	return CalculateBleedoutVFXParam_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_DamagePlayer.Tick
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXModule_DamagePlayer::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 57642 ];

	USFXModule_DamagePlayer_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXModule_DamagePlayer.RecoverFromBleedout
// [0x00020002] 
// Parameters infos:

void USFXModule_DamagePlayer::RecoverFromBleedout ( )
{
	static UFunction* pFnRecoverFromBleedout = NULL;

	if ( ! pFnRecoverFromBleedout )
		pFnRecoverFromBleedout = (UFunction*) UObject::GObjObjects()->Data[ 57641 ];

	USFXModule_DamagePlayer_execRecoverFromBleedout_Parms RecoverFromBleedout_Parms;

	this->ProcessEvent ( pFnRecoverFromBleedout, &RecoverFromBleedout_Parms, NULL );
};

// Function SFXGame.SFXModule_DamagePlayer.ApplyDamageToHealth
// [0x00420102] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )

void USFXModule_DamagePlayer::ApplyDamageToHealth ( float Damage, class AController* InstigatedBy, class UClass* DamageType, struct FVector* HitLocation )
{
	static UFunction* pFnApplyDamageToHealth = NULL;

	if ( ! pFnApplyDamageToHealth )
		pFnApplyDamageToHealth = (UFunction*) UObject::GObjObjects()->Data[ 57633 ];

	USFXModule_DamagePlayer_execApplyDamageToHealth_Parms ApplyDamageToHealth_Parms;
	ApplyDamageToHealth_Parms.Damage = Damage;
	ApplyDamageToHealth_Parms.InstigatedBy = InstigatedBy;
	ApplyDamageToHealth_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnApplyDamageToHealth, &ApplyDamageToHealth_Parms, NULL );

	if ( HitLocation )
		memcpy ( HitLocation, &ApplyDamageToHealth_Parms.HitLocation, 0xC );
};

// Function SFXGame.SFXModule_DamagePlayer.SFXTakeDamage
// [0x00420002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void USFXModule_DamagePlayer::SFXTakeDamage ( float Damage, class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum )
{
	static UFunction* pFnSFXTakeDamage = NULL;

	if ( ! pFnSFXTakeDamage )
		pFnSFXTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 57623 ];

	USFXModule_DamagePlayer_execSFXTakeDamage_Parms SFXTakeDamage_Parms;
	SFXTakeDamage_Parms.Damage = Damage;
	SFXTakeDamage_Parms.DamageType = DamageType;
	SFXTakeDamage_Parms.InstigatedBy = InstigatedBy;
	SFXTakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnSFXTakeDamage, &SFXTakeDamage_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &SFXTakeDamage_Parms.HitInfo, 0x1C );

	if ( HitLocation )
		memcpy ( HitLocation, &SFXTakeDamage_Parms.HitLocation, 0xC );

	if ( Momentum )
		memcpy ( Momentum, &SFXTakeDamage_Parms.Momentum, 0xC );
};

// Function SFXGame.SFXModule_DamageParty.ApplyDamageToHealth
// [0x00420102] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )

void USFXModule_DamageParty::ApplyDamageToHealth ( float Damage, class AController* InstigatedBy, class UClass* DamageType, struct FVector* HitLocation )
{
	static UFunction* pFnApplyDamageToHealth = NULL;

	if ( ! pFnApplyDamageToHealth )
		pFnApplyDamageToHealth = (UFunction*) UObject::GObjObjects()->Data[ 57601 ];

	USFXModule_DamageParty_execApplyDamageToHealth_Parms ApplyDamageToHealth_Parms;
	ApplyDamageToHealth_Parms.Damage = Damage;
	ApplyDamageToHealth_Parms.InstigatedBy = InstigatedBy;
	ApplyDamageToHealth_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnApplyDamageToHealth, &ApplyDamageToHealth_Parms, NULL );

	if ( HitLocation )
		memcpy ( HitLocation, &ApplyDamageToHealth_Parms.HitLocation, 0xC );
};

// Function SFXGame.SFXModule_DamageParty.Regen
// [0x00020102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USFXModule_DamageParty::Regen ( float DeltaTime )
{
	static UFunction* pFnRegen = NULL;

	if ( ! pFnRegen )
		pFnRegen = (UFunction*) UObject::GObjObjects()->Data[ 57597 ];

	USFXModule_DamageParty_execRegen_Parms Regen_Parms;
	Regen_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnRegen, &Regen_Parms, NULL );
};

// Function SFXGame.SFXModule_DamageParty.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USFXModule_DamageParty::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 57595 ];

	USFXModule_DamageParty_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXModule_Damage.Tick
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXModule_Damage::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 39235 ];

	USFXModule_Damage_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXModule_Damage.DestroyConstraint
// [0x00020002] 
// Parameters infos:
// unsigned char                  Group                          ( CPF_Parm )

void USFXModule_Damage::DestroyConstraint ( unsigned char Group )
{
	static UFunction* pFnDestroyConstraint = NULL;

	if ( ! pFnDestroyConstraint )
		pFnDestroyConstraint = (UFunction*) UObject::GObjObjects()->Data[ 39232 ];

	USFXModule_Damage_execDestroyConstraint_Parms DestroyConstraint_Parms;
	DestroyConstraint_Parms.Group = Group;

	this->ProcessEvent ( pFnDestroyConstraint, &DestroyConstraint_Parms, NULL );
};

// Function SFXGame.SFXModule_Damage.GetConstraints
// [0x00020002] 
// Parameters infos:
// TArray< unsigned char >        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

TArray< unsigned char > USFXModule_Damage::GetConstraints ( )
{
	static UFunction* pFnGetConstraints = NULL;

	if ( ! pFnGetConstraints )
		pFnGetConstraints = (UFunction*) UObject::GObjObjects()->Data[ 39226 ];

	USFXModule_Damage_execGetConstraints_Parms GetConstraints_Parms;

	this->ProcessEvent ( pFnGetConstraints, &GetConstraints_Parms, NULL );

	return GetConstraints_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_Damage.PlayHitEffects
// [0x00C20003] ( FUNC_Final )
// Parameters infos:
// class AActor*                  DamageCauser                   ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )

void USFXModule_Damage::PlayHitEffects ( class AActor* DamageCauser, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation )
{
	static UFunction* pFnPlayHitEffects = NULL;

	if ( ! pFnPlayHitEffects )
		pFnPlayHitEffects = (UFunction*) UObject::GObjObjects()->Data[ 39164 ];

	USFXModule_Damage_execPlayHitEffects_Parms PlayHitEffects_Parms;
	PlayHitEffects_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnPlayHitEffects, &PlayHitEffects_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &PlayHitEffects_Parms.HitInfo, 0x1C );

	if ( HitLocation )
		memcpy ( HitLocation, &PlayHitEffects_Parms.HitLocation, 0xC );
};

// Function SFXGame.SFXModule_Damage.GetBodyFromHit
// [0x00420003] ( FUNC_Final )
// Parameters infos:
// class URB_BodySetup*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )

class URB_BodySetup* USFXModule_Damage::GetBodyFromHit ( struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnGetBodyFromHit = NULL;

	if ( ! pFnGetBodyFromHit )
		pFnGetBodyFromHit = (UFunction*) UObject::GObjObjects()->Data[ 39163 ];

	USFXModule_Damage_execGetBodyFromHit_Parms GetBodyFromHit_Parms;

	this->ProcessEvent ( pFnGetBodyFromHit, &GetBodyFromHit_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &GetBodyFromHit_Parms.HitInfo, 0x1C );

	return GetBodyFromHit_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_Damage.SFXTakeRadiusDamage
// [0x00820002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// float                          DamageRadius                   ( CPF_Parm )
// unsigned long                  bFullDamage                    ( CPF_Parm )
// struct FVector                 HurtOrigin                     ( CPF_Parm )
// float                          Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )

void USFXModule_Damage::SFXTakeRadiusDamage ( float Damage, float DamageRadius, unsigned long bFullDamage, struct FVector HurtOrigin, float Momentum, class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser )
{
	static UFunction* pFnSFXTakeRadiusDamage = NULL;

	if ( ! pFnSFXTakeRadiusDamage )
		pFnSFXTakeRadiusDamage = (UFunction*) UObject::GObjObjects()->Data[ 39200 ];

	USFXModule_Damage_execSFXTakeRadiusDamage_Parms SFXTakeRadiusDamage_Parms;
	SFXTakeRadiusDamage_Parms.Damage = Damage;
	SFXTakeRadiusDamage_Parms.DamageRadius = DamageRadius;
	SFXTakeRadiusDamage_Parms.bFullDamage = bFullDamage;
	memcpy ( &SFXTakeRadiusDamage_Parms.HurtOrigin, &HurtOrigin, 0xC );
	SFXTakeRadiusDamage_Parms.Momentum = Momentum;
	SFXTakeRadiusDamage_Parms.DamageType = DamageType;
	SFXTakeRadiusDamage_Parms.InstigatedBy = InstigatedBy;
	SFXTakeRadiusDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnSFXTakeRadiusDamage, &SFXTakeRadiusDamage_Parms, NULL );
};

// Function SFXGame.SFXModule_Damage.ProcessHit
// [0x00420102] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// unsigned long                  HeadShot                       ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )

void USFXModule_Damage::ProcessHit ( float Damage, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, unsigned long HeadShot, struct FTraceHitInfo* HitInfo )
{
	static UFunction* pFnProcessHit = NULL;

	if ( ! pFnProcessHit )
		pFnProcessHit = (UFunction*) UObject::GObjObjects()->Data[ 39189 ];

	USFXModule_Damage_execProcessHit_Parms ProcessHit_Parms;
	ProcessHit_Parms.Damage = Damage;
	memcpy ( &ProcessHit_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessHit_Parms.Momentum, &Momentum, 0xC );
	ProcessHit_Parms.DamageType = DamageType;
	ProcessHit_Parms.InstigatedBy = InstigatedBy;
	ProcessHit_Parms.DamageCauser = DamageCauser;
	ProcessHit_Parms.HeadShot = HeadShot;

	this->ProcessEvent ( pFnProcessHit, &ProcessHit_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &ProcessHit_Parms.HitInfo, 0x1C );
};

// Function SFXGame.SFXModule_Damage.DetachLimb
// [0x00020102] 
// Parameters infos:
// class URB_BodySetup*           HitBody                        ( CPF_Parm )

void USFXModule_Damage::DetachLimb ( class URB_BodySetup* HitBody )
{
	static UFunction* pFnDetachLimb = NULL;

	if ( ! pFnDetachLimb )
		pFnDetachLimb = (UFunction*) UObject::GObjObjects()->Data[ 39177 ];

	USFXModule_Damage_execDetachLimb_Parms DetachLimb_Parms;
	DetachLimb_Parms.HitBody = HitBody;

	this->ProcessEvent ( pFnDetachLimb, &DetachLimb_Parms, NULL );
};

// Function SFXGame.SFXModule_Damage.CreateGoreActor
// [0x00820002] 
// Parameters infos:
// class APawn*                   Pawn                           ( CPF_Parm )
// struct FName                   BoneName                       ( CPF_Parm )

void USFXModule_Damage::CreateGoreActor ( class APawn* Pawn, struct FName BoneName )
{
	static UFunction* pFnCreateGoreActor = NULL;

	if ( ! pFnCreateGoreActor )
		pFnCreateGoreActor = (UFunction*) UObject::GObjObjects()->Data[ 39172 ];

	USFXModule_Damage_execCreateGoreActor_Parms CreateGoreActor_Parms;
	CreateGoreActor_Parms.Pawn = Pawn;
	memcpy ( &CreateGoreActor_Parms.BoneName, &BoneName, 0x8 );

	this->ProcessEvent ( pFnCreateGoreActor, &CreateGoreActor_Parms, NULL );
};

// Function SFXGame.SFXModule_Damage.ApplyDamageToHealth
// [0x00420102] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )

void USFXModule_Damage::ApplyDamageToHealth ( float Damage, class AController* InstigatedBy, class UClass* DamageType, struct FVector* HitLocation )
{
	static UFunction* pFnApplyDamageToHealth = NULL;

	if ( ! pFnApplyDamageToHealth )
		pFnApplyDamageToHealth = (UFunction*) UObject::GObjObjects()->Data[ 39167 ];

	USFXModule_Damage_execApplyDamageToHealth_Parms ApplyDamageToHealth_Parms;
	ApplyDamageToHealth_Parms.Damage = Damage;
	ApplyDamageToHealth_Parms.InstigatedBy = InstigatedBy;
	ApplyDamageToHealth_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnApplyDamageToHealth, &ApplyDamageToHealth_Parms, NULL );

	if ( HitLocation )
		memcpy ( HitLocation, &ApplyDamageToHealth_Parms.HitLocation, 0xC );
};

// Function SFXGame.SFXModule_Damage.SFXTakeDamage
// [0x00420002] 
// Parameters infos:
// float                          Damage                         ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_OptionalParm | CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void USFXModule_Damage::SFXTakeDamage ( float Damage, class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum )
{
	static UFunction* pFnSFXTakeDamage = NULL;

	if ( ! pFnSFXTakeDamage )
		pFnSFXTakeDamage = (UFunction*) UObject::GObjObjects()->Data[ 39138 ];

	USFXModule_Damage_execSFXTakeDamage_Parms SFXTakeDamage_Parms;
	SFXTakeDamage_Parms.Damage = Damage;
	SFXTakeDamage_Parms.DamageType = DamageType;
	SFXTakeDamage_Parms.InstigatedBy = InstigatedBy;
	SFXTakeDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnSFXTakeDamage, &SFXTakeDamage_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &SFXTakeDamage_Parms.HitInfo, 0x1C );

	if ( HitLocation )
		memcpy ( HitLocation, &SFXTakeDamage_Parms.HitLocation, 0xC );

	if ( Momentum )
		memcpy ( Momentum, &SFXTakeDamage_Parms.Momentum, 0xC );
};

// Function SFXGame.SFXModule_Damage.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXModule_Damage::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 39137 ];

	USFXModule_Damage_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXModule_Damage.ScaleHealth
// [0x00020002] 
// Parameters infos:

void USFXModule_Damage::ScaleHealth ( )
{
	static UFunction* pFnScaleHealth = NULL;

	if ( ! pFnScaleHealth )
		pFnScaleHealth = (UFunction*) UObject::GObjObjects()->Data[ 39136 ];

	USFXModule_Damage_execScaleHealth_Parms ScaleHealth_Parms;

	this->ProcessEvent ( pFnScaleHealth, &ScaleHealth_Parms, NULL );
};

// Function SFXGame.SFXPlotTreasure.TriggerResourceHint
// [0x00820002] 
// Parameters infos:
// unsigned char                  InvType                        ( CPF_Parm )
// int                            nAmount                        ( CPF_Parm )

void USFXPlotTreasure::TriggerResourceHint ( unsigned char InvType, int nAmount )
{
	static UFunction* pFnTriggerResourceHint = NULL;

	if ( ! pFnTriggerResourceHint )
		pFnTriggerResourceHint = (UFunction*) UObject::GObjObjects()->Data[ 51188 ];

	USFXPlotTreasure_execTriggerResourceHint_Parms TriggerResourceHint_Parms;
	TriggerResourceHint_Parms.InvType = InvType;
	TriggerResourceHint_Parms.nAmount = nAmount;

	this->ProcessEvent ( pFnTriggerResourceHint, &TriggerResourceHint_Parms, NULL );
};

// Function SFXGame.SFXPlotTreasure.SetNewUpgradesAvailable
// [0x00020002] 
// Parameters infos:
// unsigned long                  bUpgadesAvailable              ( CPF_Parm )

void USFXPlotTreasure::SetNewUpgradesAvailable ( unsigned long bUpgadesAvailable )
{
	static UFunction* pFnSetNewUpgradesAvailable = NULL;

	if ( ! pFnSetNewUpgradesAvailable )
		pFnSetNewUpgradesAvailable = (UFunction*) UObject::GObjObjects()->Data[ 51186 ];

	USFXPlotTreasure_execSetNewUpgradesAvailable_Parms SetNewUpgradesAvailable_Parms;
	SetNewUpgradesAvailable_Parms.bUpgadesAvailable = bUpgadesAvailable;

	this->ProcessEvent ( pFnSetNewUpgradesAvailable, &SetNewUpgradesAvailable_Parms, NULL );
};

// Function SFXGame.SFXPlotTreasure.SetNewResearchAvailable
// [0x00020002] 
// Parameters infos:
// unsigned long                  bResearchAvailable             ( CPF_Parm )

void USFXPlotTreasure::SetNewResearchAvailable ( unsigned long bResearchAvailable )
{
	static UFunction* pFnSetNewResearchAvailable = NULL;

	if ( ! pFnSetNewResearchAvailable )
		pFnSetNewResearchAvailable = (UFunction*) UObject::GObjObjects()->Data[ 51184 ];

	USFXPlotTreasure_execSetNewResearchAvailable_Parms SetNewResearchAvailable_Parms;
	SetNewResearchAvailable_Parms.bResearchAvailable = bResearchAvailable;

	this->ProcessEvent ( pFnSetNewResearchAvailable, &SetNewResearchAvailable_Parms, NULL );
};

// Function SFXGame.SFXPlotTreasure.FindImage
// [0x00022002] 
// Parameters infos:
// class UTexture2D*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Path                           ( CPF_Parm | CPF_NeedCtorLink )

class UTexture2D* USFXPlotTreasure::FindImage ( struct FString Path )
{
	static UFunction* pFnFindImage = NULL;

	if ( ! pFnFindImage )
		pFnFindImage = (UFunction*) UObject::GObjObjects()->Data[ 51180 ];

	USFXPlotTreasure_execFindImage_Parms FindImage_Parms;
	memcpy ( &FindImage_Parms.Path, &Path, 0xC );

	this->ProcessEvent ( pFnFindImage, &FindImage_Parms, NULL );

	return FindImage_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.GetTechImageResourcePath
// [0x00422002] 
// Parameters infos:
// struct FName                   nmTech                         ( CPF_Parm )
// unsigned long                  bNoLookup                      ( CPF_OptionalParm | CPF_Parm )
// struct FString                 sImagePath                     ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// struct FString                 sLargeImagePath                ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXPlotTreasure::GetTechImageResourcePath ( struct FName nmTech, unsigned long bNoLookup, struct FString* sImagePath, struct FString* sLargeImagePath )
{
	static UFunction* pFnGetTechImageResourcePath = NULL;

	if ( ! pFnGetTechImageResourcePath )
		pFnGetTechImageResourcePath = (UFunction*) UObject::GObjObjects()->Data[ 51173 ];

	USFXPlotTreasure_execGetTechImageResourcePath_Parms GetTechImageResourcePath_Parms;
	memcpy ( &GetTechImageResourcePath_Parms.nmTech, &nmTech, 0x8 );
	GetTechImageResourcePath_Parms.bNoLookup = bNoLookup;

	this->ProcessEvent ( pFnGetTechImageResourcePath, &GetTechImageResourcePath_Parms, NULL );

	if ( sImagePath )
		memcpy ( sImagePath, &GetTechImageResourcePath_Parms.sImagePath, 0xC );

	if ( sLargeImagePath )
		memcpy ( sLargeImagePath, &GetTechImageResourcePath_Parms.sLargeImagePath, 0xC );
};

// Function SFXGame.SFXPlotTreasure.GetTreasureLargeImageResourcePath
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nTreasureId                    ( CPF_Parm )

struct FString USFXPlotTreasure::GetTreasureLargeImageResourcePath ( int nTreasureId )
{
	static UFunction* pFnGetTreasureLargeImageResourcePath = NULL;

	if ( ! pFnGetTreasureLargeImageResourcePath )
		pFnGetTreasureLargeImageResourcePath = (UFunction*) UObject::GObjObjects()->Data[ 51165 ];

	USFXPlotTreasure_execGetTreasureLargeImageResourcePath_Parms GetTreasureLargeImageResourcePath_Parms;
	GetTreasureLargeImageResourcePath_Parms.nTreasureId = nTreasureId;

	this->ProcessEvent ( pFnGetTreasureLargeImageResourcePath, &GetTreasureLargeImageResourcePath_Parms, NULL );

	return GetTreasureLargeImageResourcePath_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.GetTreasureImageResourcePath
// [0x00022002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nTreasureId                    ( CPF_Parm )

struct FString USFXPlotTreasure::GetTreasureImageResourcePath ( int nTreasureId )
{
	static UFunction* pFnGetTreasureImageResourcePath = NULL;

	if ( ! pFnGetTreasureImageResourcePath )
		pFnGetTreasureImageResourcePath = (UFunction*) UObject::GObjObjects()->Data[ 51157 ];

	USFXPlotTreasure_execGetTreasureImageResourcePath_Parms GetTreasureImageResourcePath_Parms;
	GetTreasureImageResourcePath_Parms.nTreasureId = nTreasureId;

	this->ProcessEvent ( pFnGetTreasureImageResourcePath, &GetTreasureImageResourcePath_Parms, NULL );

	return GetTreasureImageResourcePath_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.Price
// [0x00820002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTreasureId                    ( CPF_Parm )
// unsigned long                  bDiscount                      ( CPF_OptionalParm | CPF_Parm )

float USFXPlotTreasure::Price ( int nTreasureId, unsigned long bDiscount )
{
	static UFunction* pFnPrice = NULL;

	if ( ! pFnPrice )
		pFnPrice = (UFunction*) UObject::GObjObjects()->Data[ 51145 ];

	USFXPlotTreasure_execPrice_Parms Price_Parms;
	Price_Parms.nTreasureId = nTreasureId;
	Price_Parms.bDiscount = bDiscount;

	this->ProcessEvent ( pFnPrice, &Price_Parms, NULL );

	return Price_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.CalculateResearchLevelMultiplier
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmTech                         ( CPF_Parm )

int USFXPlotTreasure::CalculateResearchLevelMultiplier ( struct FName nmTech )
{
	static UFunction* pFnCalculateResearchLevelMultiplier = NULL;

	if ( ! pFnCalculateResearchLevelMultiplier )
		pFnCalculateResearchLevelMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 51137 ];

	USFXPlotTreasure_execCalculateResearchLevelMultiplier_Parms CalculateResearchLevelMultiplier_Parms;
	memcpy ( &CalculateResearchLevelMultiplier_Parms.nmTech, &nmTech, 0x8 );

	this->ProcessEvent ( pFnCalculateResearchLevelMultiplier, &CalculateResearchLevelMultiplier_Parms, NULL );

	return CalculateResearchLevelMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.ChargeForTreasure
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTreasureId                    ( CPF_Parm )
// unsigned long                  bDiscount                      ( CPF_OptionalParm | CPF_Parm )

bool USFXPlotTreasure::ChargeForTreasure ( int nTreasureId, unsigned long bDiscount )
{
	static UFunction* pFnChargeForTreasure = NULL;

	if ( ! pFnChargeForTreasure )
		pFnChargeForTreasure = (UFunction*) UObject::GObjObjects()->Data[ 51131 ];

	USFXPlotTreasure_execChargeForTreasure_Parms ChargeForTreasure_Parms;
	ChargeForTreasure_Parms.nTreasureId = nTreasureId;
	ChargeForTreasure_Parms.bDiscount = bDiscount;

	this->ProcessEvent ( pFnChargeForTreasure, &ChargeForTreasure_Parms, NULL );

	return ChargeForTreasure_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.QualifiesForTreasure
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTreasureId                    ( CPF_Parm )

bool USFXPlotTreasure::QualifiesForTreasure ( int nTreasureId )
{
	static UFunction* pFnQualifiesForTreasure = NULL;

	if ( ! pFnQualifiesForTreasure )
		pFnQualifiesForTreasure = (UFunction*) UObject::GObjObjects()->Data[ 51124 ];

	USFXPlotTreasure_execQualifiesForTreasure_Parms QualifiesForTreasure_Parms;
	QualifiesForTreasure_Parms.nTreasureId = nTreasureId;

	this->ProcessEvent ( pFnQualifiesForTreasure, &QualifiesForTreasure_Parms, NULL );

	return QualifiesForTreasure_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.DiscoveredResearch
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTreasureId                    ( CPF_Parm )

bool USFXPlotTreasure::DiscoveredResearch ( int nTreasureId )
{
	static UFunction* pFnDiscoveredResearch = NULL;

	if ( ! pFnDiscoveredResearch )
		pFnDiscoveredResearch = (UFunction*) UObject::GObjObjects()->Data[ 51120 ];

	USFXPlotTreasure_execDiscoveredResearch_Parms DiscoveredResearch_Parms;
	DiscoveredResearch_Parms.nTreasureId = nTreasureId;

	this->ProcessEvent ( pFnDiscoveredResearch, &DiscoveredResearch_Parms, NULL );

	return DiscoveredResearch_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.CanAffordTreasure
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTreasureId                    ( CPF_Parm )
// unsigned long                  bDiscount                      ( CPF_OptionalParm | CPF_Parm )

bool USFXPlotTreasure::CanAffordTreasure ( int nTreasureId, unsigned long bDiscount )
{
	static UFunction* pFnCanAffordTreasure = NULL;

	if ( ! pFnCanAffordTreasure )
		pFnCanAffordTreasure = (UFunction*) UObject::GObjObjects()->Data[ 51111 ];

	USFXPlotTreasure_execCanAffordTreasure_Parms CanAffordTreasure_Parms;
	CanAffordTreasure_Parms.nTreasureId = nTreasureId;
	CanAffordTreasure_Parms.bDiscount = bDiscount;

	this->ProcessEvent ( pFnCanAffordTreasure, &CanAffordTreasure_Parms, NULL );

	return CanAffordTreasure_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.GetTechName
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FSTech                  stTech                         ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAddOne                        ( CPF_OptionalParm | CPF_Parm )

struct FString USFXPlotTreasure::GetTechName ( struct FSTech stTech, unsigned long bAddOne )
{
	static UFunction* pFnGetTechName = NULL;

	if ( ! pFnGetTechName )
		pFnGetTechName = (UFunction*) UObject::GObjObjects()->Data[ 51104 ];

	USFXPlotTreasure_execGetTechName_Parms GetTechName_Parms;
	memcpy ( &GetTechName_Parms.stTech, &stTech, 0x40 );
	GetTechName_Parms.bAddOne = bAddOne;

	this->ProcessEvent ( pFnGetTechName, &GetTechName_Parms, NULL );

	return GetTechName_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.CheckForUpgradedWeaponAchievement
// [0x00820002] 
// Parameters infos:

void USFXPlotTreasure::CheckForUpgradedWeaponAchievement ( )
{
	static UFunction* pFnCheckForUpgradedWeaponAchievement = NULL;

	if ( ! pFnCheckForUpgradedWeaponAchievement )
		pFnCheckForUpgradedWeaponAchievement = (UFunction*) UObject::GObjObjects()->Data[ 51092 ];

	USFXPlotTreasure_execCheckForUpgradedWeaponAchievement_Parms CheckForUpgradedWeaponAchievement_Parms;

	this->ProcessEvent ( pFnCheckForUpgradedWeaponAchievement, &CheckForUpgradedWeaponAchievement_Parms, NULL );
};

// Function SFXGame.SFXPlotTreasure.ReLockTech
// [0x00020002] 
// Parameters infos:
// struct FSTech                  stTech                         ( CPF_Parm | CPF_NeedCtorLink )

void USFXPlotTreasure::ReLockTech ( struct FSTech stTech )
{
	static UFunction* pFnReLockTech = NULL;

	if ( ! pFnReLockTech )
		pFnReLockTech = (UFunction*) UObject::GObjObjects()->Data[ 51090 ];

	USFXPlotTreasure_execReLockTech_Parms ReLockTech_Parms;
	memcpy ( &ReLockTech_Parms.stTech, &stTech, 0x40 );

	this->ProcessEvent ( pFnReLockTech, &ReLockTech_Parms, NULL );
};

// Function SFXGame.SFXPlotTreasure.AwardTech
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmTech                         ( CPF_Parm )
// unsigned long                  bNoAnimation                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bStorePurchase                 ( CPF_OptionalParm | CPF_Parm )

bool USFXPlotTreasure::AwardTech ( struct FName nmTech, unsigned long bNoAnimation, unsigned long bStorePurchase )
{
	static UFunction* pFnAwardTech = NULL;

	if ( ! pFnAwardTech )
		pFnAwardTech = (UFunction*) UObject::GObjObjects()->Data[ 51073 ];

	USFXPlotTreasure_execAwardTech_Parms AwardTech_Parms;
	memcpy ( &AwardTech_Parms.nmTech, &nmTech, 0x8 );
	AwardTech_Parms.bNoAnimation = bNoAnimation;
	AwardTech_Parms.bStorePurchase = bStorePurchase;

	this->ProcessEvent ( pFnAwardTech, &AwardTech_Parms, NULL );

	return AwardTech_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.FindTechByResearch
// [0x00022002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmTech                         ( CPF_Parm )

struct FName USFXPlotTreasure::FindTechByResearch ( struct FName nmTech )
{
	static UFunction* pFnFindTechByResearch = NULL;

	if ( ! pFnFindTechByResearch )
		pFnFindTechByResearch = (UFunction*) UObject::GObjObjects()->Data[ 51068 ];

	USFXPlotTreasure_execFindTechByResearch_Parms FindTechByResearch_Parms;
	memcpy ( &FindTechByResearch_Parms.nmTech, &nmTech, 0x8 );

	this->ProcessEvent ( pFnFindTechByResearch, &FindTechByResearch_Parms, NULL );

	return FindTechByResearch_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.AwardTreasure
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTreasureId                    ( CPF_Parm )
// unsigned long                  bDiscount                      ( CPF_OptionalParm | CPF_Parm )

bool USFXPlotTreasure::AwardTreasure ( int nTreasureId, unsigned long bDiscount )
{
	static UFunction* pFnAwardTreasure = NULL;

	if ( ! pFnAwardTreasure )
		pFnAwardTreasure = (UFunction*) UObject::GObjObjects()->Data[ 51058 ];

	USFXPlotTreasure_execAwardTreasure_Parms AwardTreasure_Parms;
	AwardTreasure_Parms.nTreasureId = nTreasureId;
	AwardTreasure_Parms.bDiscount = bDiscount;

	this->ProcessEvent ( pFnAwardTreasure, &AwardTreasure_Parms, NULL );

	return AwardTreasure_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.LogWarning
// [0x00040001] ( FUNC_Final )
// Parameters infos:
// struct FString                 msg                            ( CPF_Parm | CPF_NeedCtorLink )

void USFXPlotTreasure::LogWarning ( struct FString msg )
{
	static UFunction* pFnLogWarning = NULL;

	if ( ! pFnLogWarning )
		pFnLogWarning = (UFunction*) UObject::GObjObjects()->Data[ 51056 ];

	USFXPlotTreasure_execLogWarning_Parms LogWarning_Parms;
	memcpy ( &LogWarning_Parms.msg, &msg, 0xC );

	this->ProcessEvent ( pFnLogWarning, &LogWarning_Parms, NULL );
};

// Function SFXGame.SFXPlotTreasure.CurrentLevel
// [0x00020002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FName USFXPlotTreasure::CurrentLevel ( )
{
	static UFunction* pFnCurrentLevel = NULL;

	if ( ! pFnCurrentLevel )
		pFnCurrentLevel = (UFunction*) UObject::GObjObjects()->Data[ 51053 ];

	USFXPlotTreasure_execCurrentLevel_Parms CurrentLevel_Parms;

	this->ProcessEvent ( pFnCurrentLevel, &CurrentLevel_Parms, NULL );

	return CurrentLevel_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.tech
// [0x00820002] 
// Parameters infos:
// struct FSTech                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   nmTech                         ( CPF_Parm )

struct FSTech USFXPlotTreasure::tech ( struct FName nmTech )
{
	static UFunction* pFntech = NULL;

	if ( ! pFntech )
		pFntech = (UFunction*) UObject::GObjObjects()->Data[ 51047 ];

	USFXPlotTreasure_exectech_Parms tech_Parms;
	memcpy ( &tech_Parms.nmTech, &nmTech, 0x8 );

	this->ProcessEvent ( pFntech, &tech_Parms, NULL );

	return tech_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.TREASURE
// [0x00820002] 
// Parameters infos:
// struct FSTreasure              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nTreasureId                    ( CPF_Parm )

struct FSTreasure USFXPlotTreasure::TREASURE ( int nTreasureId )
{
	static UFunction* pFnTREASURE = NULL;

	if ( ! pFnTREASURE )
		pFnTREASURE = (UFunction*) UObject::GObjObjects()->Data[ 51035 ];

	USFXPlotTreasure_execTREASURE_Parms TREASURE_Parms;
	TREASURE_Parms.nTreasureId = nTreasureId;

	this->ProcessEvent ( pFnTREASURE, &TREASURE_Parms, NULL );

	return TREASURE_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.Budget
// [0x00820002] 
// Parameters infos:
// struct FSResourceBudget        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmLevel                        ( CPF_OptionalParm | CPF_Parm )

struct FSResourceBudget USFXPlotTreasure::Budget ( struct FName nmLevel )
{
	static UFunction* pFnBudget = NULL;

	if ( ! pFnBudget )
		pFnBudget = (UFunction*) UObject::GObjObjects()->Data[ 51030 ];

	USFXPlotTreasure_execBudget_Parms Budget_Parms;
	memcpy ( &Budget_Parms.nmLevel, &nmLevel, 0x8 );

	this->ProcessEvent ( pFnBudget, &Budget_Parms, NULL );

	return Budget_Parms.ReturnValue;
};

// Function SFXGame.SFXPlotTreasure.BudgetFromId
// [0x00820002] 
// Parameters infos:
// struct FSResourceBudget        ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nID                            ( CPF_Parm )

struct FSResourceBudget USFXPlotTreasure::BudgetFromId ( int nID )
{
	static UFunction* pFnBudgetFromId = NULL;

	if ( ! pFnBudgetFromId )
		pFnBudgetFromId = (UFunction*) UObject::GObjObjects()->Data[ 51018 ];

	USFXPlotTreasure_execBudgetFromId_Parms BudgetFromId_Parms;
	BudgetFromId_Parms.nID = nID;

	this->ProcessEvent ( pFnBudgetFromId, &BudgetFromId_Parms, NULL );

	return BudgetFromId_Parms.ReturnValue;
};

// Function SFXGame.SFXGameConfig.RecordTreasure
// [0x00820002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eType                          ( CPF_Parm )
// int                            Award                          ( CPF_Parm )
// int                            LevelId                        ( CPF_OptionalParm | CPF_Parm )

int USFXGameConfig::RecordTreasure ( unsigned char eType, int Award, int LevelId )
{
	static UFunction* pFnRecordTreasure = NULL;

	if ( ! pFnRecordTreasure )
		pFnRecordTreasure = (UFunction*) UObject::GObjObjects()->Data[ 49319 ];

	USFXGameConfig_execRecordTreasure_Parms RecordTreasure_Parms;
	RecordTreasure_Parms.eType = eType;
	RecordTreasure_Parms.Award = Award;
	RecordTreasure_Parms.LevelId = LevelId;

	this->ProcessEvent ( pFnRecordTreasure, &RecordTreasure_Parms, NULL );

	return RecordTreasure_Parms.ReturnValue;
};

// Function SFXGame.SFXGameConfig.GetGlobalBudget
// [0x00820002] 
// Parameters infos:
// struct FTreasureBudget         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FTreasureBudget USFXGameConfig::GetGlobalBudget ( )
{
	static UFunction* pFnGetGlobalBudget = NULL;

	if ( ! pFnGetGlobalBudget )
		pFnGetGlobalBudget = (UFunction*) UObject::GObjObjects()->Data[ 49315 ];

	USFXGameConfig_execGetGlobalBudget_Parms GetGlobalBudget_Parms;

	this->ProcessEvent ( pFnGetGlobalBudget, &GetGlobalBudget_Parms, NULL );

	return GetGlobalBudget_Parms.ReturnValue;
};

// Function SFXGame.SFXGameConfig.GetLevelBudget
// [0x00820002] 
// Parameters infos:
// struct FTreasureBudget         ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FTreasureBudget USFXGameConfig::GetLevelBudget ( )
{
	static UFunction* pFnGetLevelBudget = NULL;

	if ( ! pFnGetLevelBudget )
		pFnGetLevelBudget = (UFunction*) UObject::GObjObjects()->Data[ 49311 ];

	USFXGameConfig_execGetLevelBudget_Parms GetLevelBudget_Parms;

	this->ProcessEvent ( pFnGetLevelBudget, &GetLevelBudget_Parms, NULL );

	return GetLevelBudget_Parms.ReturnValue;
};

// Function SFXGame.SFXPRI.DivyPoints
// [0x00820002] 
// Parameters infos:
// class AController*             Other                          ( CPF_Parm )

void ASFXPRI::DivyPoints ( class AController* Other )
{
	static UFunction* pFnDivyPoints = NULL;

	if ( ! pFnDivyPoints )
		pFnDivyPoints = (UFunction*) UObject::GObjObjects()->Data[ 59358 ];

	ASFXPRI_execDivyPoints_Parms DivyPoints_Parms;
	DivyPoints_Parms.Other = Other;

	this->ProcessEvent ( pFnDivyPoints, &DivyPoints_Parms, NULL );
};

// Function SFXGame.SFXPRI.ResetDamageDealt
// [0x00020002] 
// Parameters infos:

void ASFXPRI::ResetDamageDealt ( )
{
	static UFunction* pFnResetDamageDealt = NULL;

	if ( ! pFnResetDamageDealt )
		pFnResetDamageDealt = (UFunction*) UObject::GObjObjects()->Data[ 59357 ];

	ASFXPRI_execResetDamageDealt_Parms ResetDamageDealt_Parms;

	this->ProcessEvent ( pFnResetDamageDealt, &ResetDamageDealt_Parms, NULL );
};

// Function SFXGame.SFXPRI.ScoreFinesseKill
// [0x00820002] 
// Parameters infos:
// class ABioPawn*                Other                          ( CPF_Parm )
// class UClass*                  DamageType                     ( CPF_Parm )

void ASFXPRI::ScoreFinesseKill ( class ABioPawn* Other, class UClass* DamageType )
{
	static UFunction* pFnScoreFinesseKill = NULL;

	if ( ! pFnScoreFinesseKill )
		pFnScoreFinesseKill = (UFunction*) UObject::GObjObjects()->Data[ 59352 ];

	ASFXPRI_execScoreFinesseKill_Parms ScoreFinesseKill_Parms;
	ScoreFinesseKill_Parms.Other = Other;
	ScoreFinesseKill_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnScoreFinesseKill, &ScoreFinesseKill_Parms, NULL );
};

// Function SFXGame.SFXPRI.AddGrinderAchievement
// [0x00020002] 
// Parameters infos:
// unsigned char                  AchievementId                  ( CPF_Parm )
// class ABioPawn*                oTarget                        ( CPF_Parm )

void ASFXPRI::AddGrinderAchievement ( unsigned char AchievementId, class ABioPawn* oTarget )
{
	static UFunction* pFnAddGrinderAchievement = NULL;

	if ( ! pFnAddGrinderAchievement )
		pFnAddGrinderAchievement = (UFunction*) UObject::GObjObjects()->Data[ 59349 ];

	ASFXPRI_execAddGrinderAchievement_Parms AddGrinderAchievement_Parms;
	AddGrinderAchievement_Parms.AchievementId = AchievementId;
	AddGrinderAchievement_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnAddGrinderAchievement, &AddGrinderAchievement_Parms, NULL );
};

// Function SFXGame.SFXPRI.AddScore
// [0x00820002] 
// Parameters infos:
// int                            Points                         ( CPF_Parm )
// struct FString                 Message                        ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bAddDifficultyScore            ( CPF_OptionalParm | CPF_Parm )

void ASFXPRI::AddScore ( int Points, struct FString Message, unsigned long bAddDifficultyScore )
{
	static UFunction* pFnAddScore = NULL;

	if ( ! pFnAddScore )
		pFnAddScore = (UFunction*) UObject::GObjObjects()->Data[ 59344 ];

	ASFXPRI_execAddScore_Parms AddScore_Parms;
	AddScore_Parms.Points = Points;
	memcpy ( &AddScore_Parms.Message, &Message, 0xC );
	AddScore_Parms.bAddDifficultyScore = bAddDifficultyScore;

	this->ProcessEvent ( pFnAddScore, &AddScore_Parms, NULL );
};

// Function SFXGame.SFXPRI.LockScore
// [0x00020002] 
// Parameters infos:
// float                          fScore                         ( CPF_Parm )

void ASFXPRI::LockScore ( float fScore )
{
	static UFunction* pFnLockScore = NULL;

	if ( ! pFnLockScore )
		pFnLockScore = (UFunction*) UObject::GObjObjects()->Data[ 59342 ];

	ASFXPRI_execLockScore_Parms LockScore_Parms;
	LockScore_Parms.fScore = fScore;

	this->ProcessEvent ( pFnLockScore, &LockScore_Parms, NULL );
};

// Function SFXGame.SFXPRI.DrawScore
// [0x00020002] 
// Parameters infos:

void ASFXPRI::DrawScore ( )
{
	static UFunction* pFnDrawScore = NULL;

	if ( ! pFnDrawScore )
		pFnDrawScore = (UFunction*) UObject::GObjObjects()->Data[ 59336 ];

	ASFXPRI_execDrawScore_Parms DrawScore_Parms;

	this->ProcessEvent ( pFnDrawScore, &DrawScore_Parms, NULL );
};

// Function SFXGame.SFXPRI.RecordDamageDone
// [0x00820002] 
// Parameters infos:
// class AController*             DamageCauser                   ( CPF_Parm )
// float                          Amount                         ( CPF_Parm )

void ASFXPRI::RecordDamageDone ( class AController* DamageCauser, float Amount )
{
	static UFunction* pFnRecordDamageDone = NULL;

	if ( ! pFnRecordDamageDone )
		pFnRecordDamageDone = (UFunction*) UObject::GObjObjects()->Data[ 59331 ];

	ASFXPRI_execRecordDamageDone_Parms RecordDamageDone_Parms;
	RecordDamageDone_Parms.DamageCauser = DamageCauser;
	RecordDamageDone_Parms.Amount = Amount;

	this->ProcessEvent ( pFnRecordDamageDone, &RecordDamageDone_Parms, NULL );
};

// Function SFXGame.SFXPRI.SwitchTarget
// [0x00020102] 
// Parameters infos:
// class AActor*                  Target                         ( CPF_Parm )

void ASFXPRI::SwitchTarget ( class AActor* Target )
{
	static UFunction* pFnSwitchTarget = NULL;

	if ( ! pFnSwitchTarget )
		pFnSwitchTarget = (UFunction*) UObject::GObjObjects()->Data[ 59329 ];

	ASFXPRI_execSwitchTarget_Parms SwitchTarget_Parms;
	SwitchTarget_Parms.Target = Target;

	this->ProcessEvent ( pFnSwitchTarget, &SwitchTarget_Parms, NULL );
};

// Function SFXGame.SFXPRI.Clear
// [0x00020102] 
// Parameters infos:

void ASFXPRI::Clear ( )
{
	static UFunction* pFnClear = NULL;

	if ( ! pFnClear )
		pFnClear = (UFunction*) UObject::GObjObjects()->Data[ 59328 ];

	ASFXPRI_execClear_Parms Clear_Parms;

	this->ProcessEvent ( pFnClear, &Clear_Parms, NULL );
};

// Function SFXGame.SFXPRI.FindLocalPRI
// [0x00022103] ( FUNC_Final )
// Parameters infos:
// class ASFXPRI*                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ASFXPRI* ASFXPRI::FindLocalPRI ( )
{
	static UFunction* pFnFindLocalPRI = NULL;

	if ( ! pFnFindLocalPRI )
		pFnFindLocalPRI = (UFunction*) UObject::GObjObjects()->Data[ 33505 ];

	ASFXPRI_execFindLocalPRI_Parms FindLocalPRI_Parms;

	this->ProcessEvent ( pFnFindLocalPRI, &FindLocalPRI_Parms, NULL );

	return FindLocalPRI_Parms.ReturnValue;
};

// Function SFXGame.SFXPRI.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void ASFXPRI::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 59324 ];

	ASFXPRI_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXPRI.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXPRI::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 59321 ];

	ASFXPRI_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXPRI.UpdateScoreDifficulty
// [0x00020002] 
// Parameters infos:

void ASFXPRI::UpdateScoreDifficulty ( )
{
	static UFunction* pFnUpdateScoreDifficulty = NULL;

	if ( ! pFnUpdateScoreDifficulty )
		pFnUpdateScoreDifficulty = (UFunction*) UObject::GObjObjects()->Data[ 59320 ];

	ASFXPRI_execUpdateScoreDifficulty_Parms UpdateScoreDifficulty_Parms;

	this->ProcessEvent ( pFnUpdateScoreDifficulty, &UpdateScoreDifficulty_Parms, NULL );
};

// Function SFXGame.SFXDifficulty.UpdateDifficulty
// [0x00022002] 
// Parameters infos:
// class ASFXPRI*                 PRI                            ( CPF_Parm )

void USFXDifficulty::UpdateDifficulty ( class ASFXPRI* PRI )
{
	static UFunction* pFnUpdateDifficulty = NULL;

	if ( ! pFnUpdateDifficulty )
		pFnUpdateDifficulty = (UFunction*) UObject::GObjObjects()->Data[ 54581 ];

	USFXDifficulty_execUpdateDifficulty_Parms UpdateDifficulty_Parms;
	UpdateDifficulty_Parms.PRI = PRI;

	this->ProcessEvent ( pFnUpdateDifficulty, &UpdateDifficulty_Parms, NULL );
};

// Function SFXGame.SFXDifficulty.GetPlayerDifficultyScore
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXDifficulty::GetPlayerDifficultyScore ( )
{
	static UFunction* pFnGetPlayerDifficultyScore = NULL;

	if ( ! pFnGetPlayerDifficultyScore )
		pFnGetPlayerDifficultyScore = (UFunction*) UObject::GObjObjects()->Data[ 54577 ];

	USFXDifficulty_execGetPlayerDifficultyScore_Parms GetPlayerDifficultyScore_Parms;

	this->ProcessEvent ( pFnGetPlayerDifficultyScore, &GetPlayerDifficultyScore_Parms, NULL );

	return GetPlayerDifficultyScore_Parms.ReturnValue;
};

// Function SFXGame.SFXDifficulty.GetDurationMultiplier
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Owner                          ( CPF_Parm )

float USFXDifficulty::GetDurationMultiplier ( class AActor* Owner )
{
	static UFunction* pFnGetDurationMultiplier = NULL;

	if ( ! pFnGetDurationMultiplier )
		pFnGetDurationMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 54574 ];

	USFXDifficulty_execGetDurationMultiplier_Parms GetDurationMultiplier_Parms;
	GetDurationMultiplier_Parms.Owner = Owner;

	this->ProcessEvent ( pFnGetDurationMultiplier, &GetDurationMultiplier_Parms, NULL );

	return GetDurationMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXDifficulty.GetCooldownMultiplier
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Owner                          ( CPF_Parm )

float USFXDifficulty::GetCooldownMultiplier ( class AActor* Owner )
{
	static UFunction* pFnGetCooldownMultiplier = NULL;

	if ( ! pFnGetCooldownMultiplier )
		pFnGetCooldownMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 54571 ];

	USFXDifficulty_execGetCooldownMultiplier_Parms GetCooldownMultiplier_Parms;
	GetCooldownMultiplier_Parms.Owner = Owner;

	this->ProcessEvent ( pFnGetCooldownMultiplier, &GetCooldownMultiplier_Parms, NULL );

	return GetCooldownMultiplier_Parms.ReturnValue;
};

// Function SFXGame.SFXShield_Base.ItemRemovedFromInvManager
// [0x00020002] 
// Parameters infos:

void ASFXShield_Base::ItemRemovedFromInvManager ( )
{
	static UFunction* pFnItemRemovedFromInvManager = NULL;

	if ( ! pFnItemRemovedFromInvManager )
		pFnItemRemovedFromInvManager = (UFunction*) UObject::GObjObjects()->Data[ 62036 ];

	ASFXShield_Base_execItemRemovedFromInvManager_Parms ItemRemovedFromInvManager_Parms;

	this->ProcessEvent ( pFnItemRemovedFromInvManager, &ItemRemovedFromInvManager_Parms, NULL );
};

// Function SFXGame.SFXShield_Base.GivenTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   thisPawn                       ( CPF_Parm )
// unsigned long                  bDoNotActivate                 ( CPF_OptionalParm | CPF_Parm )

void ASFXShield_Base::GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = (UFunction*) UObject::GObjObjects()->Data[ 62032 ];

	ASFXShield_Base_execGivenTo_Parms GivenTo_Parms;
	GivenTo_Parms.thisPawn = thisPawn;
	GivenTo_Parms.bDoNotActivate = bDoNotActivate;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function SFXGame.SFXShield_Base.GetShieldBars
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXShield_Base::GetShieldBars ( )
{
	static UFunction* pFnGetShieldBars = NULL;

	if ( ! pFnGetShieldBars )
		pFnGetShieldBars = (UFunction*) UObject::GObjObjects()->Data[ 62030 ];

	ASFXShield_Base_execGetShieldBars_Parms GetShieldBars_Parms;

	this->ProcessEvent ( pFnGetShieldBars, &GetShieldBars_Parms, NULL );

	return GetShieldBars_Parms.ReturnValue;
};

// Function SFXGame.SFXShield_Base.GetImpactScale
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

float ASFXShield_Base::GetImpactScale ( class ASFXWeapon* Weapon, struct FVector HitLocation )
{
	static UFunction* pFnGetImpactScale = NULL;

	if ( ! pFnGetImpactScale )
		pFnGetImpactScale = (UFunction*) UObject::GObjObjects()->Data[ 62024 ];

	ASFXShield_Base_execGetImpactScale_Parms GetImpactScale_Parms;
	GetImpactScale_Parms.Weapon = Weapon;
	memcpy ( &GetImpactScale_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnGetImpactScale, &GetImpactScale_Parms, NULL );

	return GetImpactScale_Parms.ReturnValue;
};

// Function SFXGame.SFXShield_Base.PlayShieldSound
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXShield_Base::PlayShieldSound ( class ASFXWeapon* Weapon, struct FTraceHitInfo HitInfo, struct FVector HitLocation )
{
	static UFunction* pFnPlayShieldSound = NULL;

	if ( ! pFnPlayShieldSound )
		pFnPlayShieldSound = (UFunction*) UObject::GObjObjects()->Data[ 62019 ];

	ASFXShield_Base_execPlayShieldSound_Parms PlayShieldSound_Parms;
	PlayShieldSound_Parms.Weapon = Weapon;
	memcpy ( &PlayShieldSound_Parms.HitInfo, &HitInfo, 0x1C );
	memcpy ( &PlayShieldSound_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnPlayShieldSound, &PlayShieldSound_Parms, NULL );
};

// Function SFXGame.SFXShield_Base.ActivateWeaponImpact
// [0x00C20103] ( FUNC_Final )
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// class UParticleSystem*         Template                       ( CPF_Parm )
// class USkeletalMeshComponent*  SMC                            ( CPF_Parm | CPF_EditInline )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )

void ASFXShield_Base::ActivateWeaponImpact ( class ASFXWeapon* Weapon, class UParticleSystem* Template, class USkeletalMeshComponent* SMC, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation )
{
	static UFunction* pFnActivateWeaponImpact = NULL;

	if ( ! pFnActivateWeaponImpact )
		pFnActivateWeaponImpact = (UFunction*) UObject::GObjObjects()->Data[ 61985 ];

	ASFXShield_Base_execActivateWeaponImpact_Parms ActivateWeaponImpact_Parms;
	ActivateWeaponImpact_Parms.Weapon = Weapon;
	ActivateWeaponImpact_Parms.Template = Template;
	ActivateWeaponImpact_Parms.SMC = SMC;

	this->ProcessEvent ( pFnActivateWeaponImpact, &ActivateWeaponImpact_Parms, NULL );

	if ( HitInfo )
		memcpy ( HitInfo, &ActivateWeaponImpact_Parms.HitInfo, 0x1C );

	if ( HitLocation )
		memcpy ( HitLocation, &ActivateWeaponImpact_Parms.HitLocation, 0xC );
};

// Function SFXGame.SFXShield_Base.ActivatePSC
// [0x00020103] ( FUNC_Final )
// Parameters infos:
// class UParticleSystem*         Template                       ( CPF_Parm )
// float                          ImpactScale                    ( CPF_OptionalParm | CPF_Parm )
// struct FVector                 Offset                         ( CPF_OptionalParm | CPF_Parm )

void ASFXShield_Base::ActivatePSC ( class UParticleSystem* Template, float ImpactScale, struct FVector Offset )
{
	static UFunction* pFnActivatePSC = NULL;

	if ( ! pFnActivatePSC )
		pFnActivatePSC = (UFunction*) UObject::GObjObjects()->Data[ 61974 ];

	ASFXShield_Base_execActivatePSC_Parms ActivatePSC_Parms;
	ActivatePSC_Parms.Template = Template;
	ActivatePSC_Parms.ImpactScale = ImpactScale;
	memcpy ( &ActivatePSC_Parms.Offset, &Offset, 0xC );

	this->ProcessEvent ( pFnActivatePSC, &ActivatePSC_Parms, NULL );
};

// Function SFXGame.SFXShield_Base.GetDamageResistance
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DamageType                     ( CPF_Parm )

float ASFXShield_Base::GetDamageResistance ( class UClass* DamageType )
{
	static UFunction* pFnGetDamageResistance = NULL;

	if ( ! pFnGetDamageResistance )
		pFnGetDamageResistance = (UFunction*) UObject::GObjObjects()->Data[ 62000 ];

	ASFXShield_Base_execGetDamageResistance_Parms GetDamageResistance_Parms;
	GetDamageResistance_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnGetDamageResistance, &GetDamageResistance_Parms, NULL );

	return GetDamageResistance_Parms.ReturnValue;
};

// Function SFXGame.SFXShield_Base.ApplyDamageToShields
// [0x00C80102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// float                          Damage                         ( CPF_Parm | CPF_OutParm )

void ASFXShield_Base::ApplyDamageToShields ( class UClass* DamageType, struct FVector Momentum, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class AController* InstigatedBy, float* Damage )
{
	static UFunction* pFnApplyDamageToShields = NULL;

	if ( ! pFnApplyDamageToShields )
		pFnApplyDamageToShields = (UFunction*) UObject::GObjObjects()->Data[ 61986 ];

	ASFXShield_Base_execApplyDamageToShields_Parms ApplyDamageToShields_Parms;
	ApplyDamageToShields_Parms.DamageType = DamageType;
	memcpy ( &ApplyDamageToShields_Parms.Momentum, &Momentum, 0xC );
	memcpy ( &ApplyDamageToShields_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ApplyDamageToShields_Parms.HitInfo, &HitInfo, 0x1C );
	ApplyDamageToShields_Parms.InstigatedBy = InstigatedBy;

	this->ProcessEvent ( pFnApplyDamageToShields, &ApplyDamageToShields_Parms, NULL );

	if ( Damage )
		*Damage = ApplyDamageToShields_Parms.Damage;
};

// Function SFXGame.SFXShield_Base.ApplyDamage
// [0x00420102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          Damage                         ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void ASFXShield_Base::ApplyDamage ( class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum )
{
	static UFunction* pFnApplyDamage = NULL;

	if ( ! pFnApplyDamage )
		pFnApplyDamage = (UFunction*) UObject::GObjObjects()->Data[ 61975 ];

	ASFXShield_Base_execApplyDamage_Parms ApplyDamage_Parms;
	ApplyDamage_Parms.DamageType = DamageType;
	ApplyDamage_Parms.InstigatedBy = InstigatedBy;
	ApplyDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnApplyDamage, &ApplyDamage_Parms, NULL );

	if ( Damage )
		*Damage = ApplyDamage_Parms.Damage;

	if ( HitInfo )
		memcpy ( HitInfo, &ApplyDamage_Parms.HitInfo, 0x1C );

	if ( HitLocation )
		memcpy ( HitLocation, &ApplyDamage_Parms.HitLocation, 0xC );

	if ( Momentum )
		memcpy ( Momentum, &ApplyDamage_Parms.Momentum, 0xC );
};

// Function SFXGame.SFXShield_Base.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void ASFXShield_Base::Tick ( float DeltaSeconds )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 61969 ];

	ASFXShield_Base_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXShield_Base.GetShieldRechargeTime
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXShield_Base::GetShieldRechargeTime ( )
{
	static UFunction* pFnGetShieldRechargeTime = NULL;

	if ( ! pFnGetShieldRechargeTime )
		pFnGetShieldRechargeTime = (UFunction*) UObject::GObjObjects()->Data[ 61966 ];

	ASFXShield_Base_execGetShieldRechargeTime_Parms GetShieldRechargeTime_Parms;

	this->ProcessEvent ( pFnGetShieldRechargeTime, &GetShieldRechargeTime_Parms, NULL );

	return GetShieldRechargeTime_Parms.ReturnValue;
};

// Function SFXGame.SFXShield_Base.GetShieldRegenDelay
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXShield_Base::GetShieldRegenDelay ( )
{
	static UFunction* pFnGetShieldRegenDelay = NULL;

	if ( ! pFnGetShieldRegenDelay )
		pFnGetShieldRegenDelay = (UFunction*) UObject::GObjObjects()->Data[ 61964 ];

	ASFXShield_Base_execGetShieldRegenDelay_Parms GetShieldRegenDelay_Parms;

	this->ProcessEvent ( pFnGetShieldRegenDelay, &GetShieldRegenDelay_Parms, NULL );

	return GetShieldRegenDelay_Parms.ReturnValue;
};

// Function SFXGame.SFXShield_Base.ScaleShields
// [0x00020102] 
// Parameters infos:

void ASFXShield_Base::ScaleShields ( )
{
	static UFunction* pFnScaleShields = NULL;

	if ( ! pFnScaleShields )
		pFnScaleShields = (UFunction*) UObject::GObjObjects()->Data[ 61963 ];

	ASFXShield_Base_execScaleShields_Parms ScaleShields_Parms;

	this->ProcessEvent ( pFnScaleShields, &ScaleShields_Parms, NULL );
};

// Function SFXGame.SFXShield_Base.ShieldDestroyedPowerCallback
// [0x00120000] 
// Parameters infos:
// class AActor*                  ShieldActor                    ( CPF_Parm )
// class ASFXShield_Base*         Shield                         ( CPF_Parm )

void ASFXShield_Base::ShieldDestroyedPowerCallback ( class AActor* ShieldActor, class ASFXShield_Base* Shield )
{
	static UFunction* pFnShieldDestroyedPowerCallback = NULL;

	if ( ! pFnShieldDestroyedPowerCallback )
		pFnShieldDestroyedPowerCallback = (UFunction*) UObject::GObjObjects()->Data[ 61939 ];

	ASFXShield_Base_execShieldDestroyedPowerCallback_Parms ShieldDestroyedPowerCallback_Parms;
	ShieldDestroyedPowerCallback_Parms.ShieldActor = ShieldActor;
	ShieldDestroyedPowerCallback_Parms.Shield = Shield;

	this->ProcessEvent ( pFnShieldDestroyedPowerCallback, &ShieldDestroyedPowerCallback_Parms, NULL );
};

// Function SFXGame.SFXArmor_Base.ApplyDamage
// [0x00420102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          Damage                         ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void ASFXArmor_Base::ApplyDamage ( class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum )
{
	static UFunction* pFnApplyDamage = NULL;

	if ( ! pFnApplyDamage )
		pFnApplyDamage = (UFunction*) UObject::GObjObjects()->Data[ 53452 ];

	ASFXArmor_Base_execApplyDamage_Parms ApplyDamage_Parms;
	ApplyDamage_Parms.DamageType = DamageType;
	ApplyDamage_Parms.InstigatedBy = InstigatedBy;
	ApplyDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnApplyDamage, &ApplyDamage_Parms, NULL );

	if ( Damage )
		*Damage = ApplyDamage_Parms.Damage;

	if ( HitInfo )
		memcpy ( HitInfo, &ApplyDamage_Parms.HitInfo, 0x1C );

	if ( HitLocation )
		memcpy ( HitLocation, &ApplyDamage_Parms.HitLocation, 0xC );

	if ( Momentum )
		memcpy ( Momentum, &ApplyDamage_Parms.Momentum, 0xC );
};

// Function SFXGame.SFXArmor_Base.GetDamageResistance
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UClass*                  DamageType                     ( CPF_Parm )

float ASFXArmor_Base::GetDamageResistance ( class UClass* DamageType )
{
	static UFunction* pFnGetDamageResistance = NULL;

	if ( ! pFnGetDamageResistance )
		pFnGetDamageResistance = (UFunction*) UObject::GObjObjects()->Data[ 53445 ];

	ASFXArmor_Base_execGetDamageResistance_Parms GetDamageResistance_Parms;
	GetDamageResistance_Parms.DamageType = DamageType;

	this->ProcessEvent ( pFnGetDamageResistance, &GetDamageResistance_Parms, NULL );

	return GetDamageResistance_Parms.ReturnValue;
};

// Function SFXGame.SFXArmor_Base.GetLevelRatio
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXArmor_Base::GetLevelRatio ( )
{
	static UFunction* pFnGetLevelRatio = NULL;

	if ( ! pFnGetLevelRatio )
		pFnGetLevelRatio = (UFunction*) UObject::GObjObjects()->Data[ 53443 ];

	ASFXArmor_Base_execGetLevelRatio_Parms GetLevelRatio_Parms;

	this->ProcessEvent ( pFnGetLevelRatio, &GetLevelRatio_Parms, NULL );

	return GetLevelRatio_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerController.ServerBecomeActivePlayer
// [0x002200C2] 
// Parameters infos:

void ASFXPlayerController::ServerBecomeActivePlayer ( )
{
	static UFunction* pFnServerBecomeActivePlayer = NULL;

	if ( ! pFnServerBecomeActivePlayer )
		pFnServerBecomeActivePlayer = (UFunction*) UObject::GObjObjects()->Data[ 59048 ];

	ASFXPlayerController_execServerBecomeActivePlayer_Parms ServerBecomeActivePlayer_Parms;

	this->ProcessEvent ( pFnServerBecomeActivePlayer, &ServerBecomeActivePlayer_Parms, NULL );
};

// Function SFXGame.SFXPlayerController.MantleCover
// [0x00020002] 
// Parameters infos:
// struct FCovPosInfo             CovInfo                        ( CPF_Parm )

void ASFXPlayerController::MantleCover ( struct FCovPosInfo CovInfo )
{
	static UFunction* pFnMantleCover = NULL;

	if ( ! pFnMantleCover )
		pFnMantleCover = (UFunction*) UObject::GObjObjects()->Data[ 59044 ];

	ASFXPlayerController_execMantleCover_Parms MantleCover_Parms;
	memcpy ( &MantleCover_Parms.CovInfo, &CovInfo, 0x34 );

	this->ProcessEvent ( pFnMantleCover, &MantleCover_Parms, NULL );
};

// Function SFXGame.SFXPlayerController.ClimbCover
// [0x00020002] 
// Parameters infos:
// struct FCovPosInfo             CovInfo                        ( CPF_Parm )

void ASFXPlayerController::ClimbCover ( struct FCovPosInfo CovInfo )
{
	static UFunction* pFnClimbCover = NULL;

	if ( ! pFnClimbCover )
		pFnClimbCover = (UFunction*) UObject::GObjObjects()->Data[ 59040 ];

	ASFXPlayerController_execClimbCover_Parms ClimbCover_Parms;
	memcpy ( &ClimbCover_Parms.CovInfo, &CovInfo, 0x34 );

	this->ProcessEvent ( pFnClimbCover, &ClimbCover_Parms, NULL );
};

// Function SFXGame.SFXPlayerController.TryClimbOrMantleCover
// [0x00820203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXPlayerController::TryClimbOrMantleCover ( )
{
	static UFunction* pFnTryClimbOrMantleCover = NULL;

	if ( ! pFnTryClimbOrMantleCover )
		pFnTryClimbOrMantleCover = (UFunction*) UObject::GObjObjects()->Data[ 59036 ];

	ASFXPlayerController_execTryClimbOrMantleCover_Parms TryClimbOrMantleCover_Parms;

	this->ProcessEvent ( pFnTryClimbOrMantleCover, &TryClimbOrMantleCover_Parms, NULL );

	return TryClimbOrMantleCover_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerController.GetCurrentCustomAction
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UBioCustomAction*        pAction                        ( CPF_Parm | CPF_OutParm )

bool ASFXPlayerController::GetCurrentCustomAction ( class UBioCustomAction** pAction )
{
	static UFunction* pFnGetCurrentCustomAction = NULL;

	if ( ! pFnGetCurrentCustomAction )
		pFnGetCurrentCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 59033 ];

	ASFXPlayerController_execGetCurrentCustomAction_Parms GetCurrentCustomAction_Parms;

	this->ProcessEvent ( pFnGetCurrentCustomAction, &GetCurrentCustomAction_Parms, NULL );

	if ( pAction )
		*pAction = GetCurrentCustomAction_Parms.pAction;

	return GetCurrentCustomAction_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerController.CustomActionEnded
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  PrevAction                     ( CPF_Parm )

void ASFXPlayerController::CustomActionEnded ( unsigned char PrevAction )
{
	static UFunction* pFnCustomActionEnded = NULL;

	if ( ! pFnCustomActionEnded )
		pFnCustomActionEnded = (UFunction*) UObject::GObjObjects()->Data[ 59022 ];

	ASFXPlayerController_execCustomActionEnded_Parms CustomActionEnded_Parms;
	CustomActionEnded_Parms.PrevAction = PrevAction;

	this->ProcessEvent ( pFnCustomActionEnded, &CustomActionEnded_Parms, NULL );
};

// Function SFXGame.SFXPlayerController.CustomActionStarted
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  NewAction                      ( CPF_Parm )

void ASFXPlayerController::CustomActionStarted ( unsigned char NewAction )
{
	static UFunction* pFnCustomActionStarted = NULL;

	if ( ! pFnCustomActionStarted )
		pFnCustomActionStarted = (UFunction*) UObject::GObjObjects()->Data[ 59023 ];

	ASFXPlayerController_execCustomActionStarted_Parms CustomActionStarted_Parms;
	CustomActionStarted_Parms.NewAction = NewAction;

	this->ProcessEvent ( pFnCustomActionStarted, &CustomActionStarted_Parms, NULL );
};

// Function SFXGame.SFXPlayerController.VerifyCAHasBeenInstanced
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  CAction                        ( CPF_Parm )

bool ASFXPlayerController::VerifyCAHasBeenInstanced ( unsigned char CAction )
{
	static UFunction* pFnVerifyCAHasBeenInstanced = NULL;

	if ( ! pFnVerifyCAHasBeenInstanced )
		pFnVerifyCAHasBeenInstanced = (UFunction*) UObject::GObjObjects()->Data[ 59027 ];

	ASFXPlayerController_execVerifyCAHasBeenInstanced_Parms VerifyCAHasBeenInstanced_Parms;
	VerifyCAHasBeenInstanced_Parms.CAction = CAction;

	this->ProcessEvent ( pFnVerifyCAHasBeenInstanced, &VerifyCAHasBeenInstanced_Parms, NULL );

	return VerifyCAHasBeenInstanced_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerController.CanDoCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  CAction                        ( CPF_Parm )

bool ASFXPlayerController::eventCanDoCustomAction ( unsigned char CAction )
{
	static UFunction* pFnCanDoCustomAction = NULL;

	if ( ! pFnCanDoCustomAction )
		pFnCanDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 59024 ];

	ASFXPlayerController_eventCanDoCustomAction_Parms CanDoCustomAction_Parms;
	CanDoCustomAction_Parms.CAction = CAction;

	this->ProcessEvent ( pFnCanDoCustomAction, &CanDoCustomAction_Parms, NULL );

	return CanDoCustomAction_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerController.EndCustomAction
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void ASFXPlayerController::EndCustomAction ( )
{
	static UFunction* pFnEndCustomAction = NULL;

	if ( ! pFnEndCustomAction )
		pFnEndCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 34896 ];

	ASFXPlayerController_execEndCustomAction_Parms EndCustomAction_Parms;

	this->ProcessEvent ( pFnEndCustomAction, &EndCustomAction_Parms, NULL );
};

// Function SFXGame.SFXPlayerController.DoCustomAction
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:
// unsigned char                  NewAction                      ( CPF_Parm )

void ASFXPlayerController::eventDoCustomAction ( unsigned char NewAction )
{
	static UFunction* pFnDoCustomAction = NULL;

	if ( ! pFnDoCustomAction )
		pFnDoCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 58686 ];

	ASFXPlayerController_eventDoCustomAction_Parms DoCustomAction_Parms;
	DoCustomAction_Parms.NewAction = NewAction;

	this->ProcessEvent ( pFnDoCustomAction, &DoCustomAction_Parms, NULL );
};

// Function SFXGame.SFXPlayerController.NotifyHitWall
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  Wall                           ( CPF_Parm )

bool ASFXPlayerController::NotifyHitWall ( struct FVector HitNormal, class AActor* Wall )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = (UFunction*) UObject::GObjObjects()->Data[ 59014 ];

	ASFXPlayerController_execNotifyHitWall_Parms NotifyHitWall_Parms;
	memcpy ( &NotifyHitWall_Parms.HitNormal, &HitNormal, 0xC );
	NotifyHitWall_Parms.Wall = Wall;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );

	return NotifyHitWall_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerController.NotifyBump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool ASFXPlayerController::NotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 59006 ];

	ASFXPlayerController_execNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function SFXGame.SFXPlayerController.CheckNearMiss
// [0x00020002] 
// Parameters infos:
// class APawn*                   Shooter                        ( CPF_Parm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 WeapLoc                        ( CPF_Parm )
// struct FVector                 LineDir                        ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )

void ASFXPlayerController::CheckNearMiss ( class APawn* Shooter, class AWeapon* W, struct FVector WeapLoc, struct FVector LineDir, struct FVector HitLocation )
{
	static UFunction* pFnCheckNearMiss = NULL;

	if ( ! pFnCheckNearMiss )
		pFnCheckNearMiss = (UFunction*) UObject::GObjObjects()->Data[ 58997 ];

	ASFXPlayerController_execCheckNearMiss_Parms CheckNearMiss_Parms;
	CheckNearMiss_Parms.Shooter = Shooter;
	CheckNearMiss_Parms.W = W;
	memcpy ( &CheckNearMiss_Parms.WeapLoc, &WeapLoc, 0xC );
	memcpy ( &CheckNearMiss_Parms.LineDir, &LineDir, 0xC );
	memcpy ( &CheckNearMiss_Parms.HitLocation, &HitLocation, 0xC );

	this->ProcessEvent ( pFnCheckNearMiss, &CheckNearMiss_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecBovineFortitude
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecBovineFortitude ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecBovineFortitude = NULL;

	if ( ! pFnTecBovineFortitude )
		pFnTecBovineFortitude = (UFunction*) UObject::GObjObjects()->Data[ 49615 ];

	USFXBonusList_execTecBovineFortitude_Parms TecBovineFortitude_Parms;
	TecBovineFortitude_Parms.gv = gv;

	this->ProcessEvent ( pFnTecBovineFortitude, &TecBovineFortitude_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecTechR2
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecTechR2 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecTechR2 = NULL;

	if ( ! pFnTecTechR2 )
		pFnTecTechR2 = (UFunction*) UObject::GObjObjects()->Data[ 49613 ];

	USFXBonusList_execTecTechR2_Parms TecTechR2_Parms;
	TecTechR2_Parms.gv = gv;

	this->ProcessEvent ( pFnTecTechR2, &TecTechR2_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecTechR1
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecTechR1 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecTechR1 = NULL;

	if ( ! pFnTecTechR1 )
		pFnTecTechR1 = (UFunction*) UObject::GObjObjects()->Data[ 49611 ];

	USFXBonusList_execTecTechR1_Parms TecTechR1_Parms;
	TecTechR1_Parms.gv = gv;

	this->ProcessEvent ( pFnTecTechR1, &TecTechR1_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecSniperRifleR2
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecSniperRifleR2 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecSniperRifleR2 = NULL;

	if ( ! pFnTecSniperRifleR2 )
		pFnTecSniperRifleR2 = (UFunction*) UObject::GObjObjects()->Data[ 49609 ];

	USFXBonusList_execTecSniperRifleR2_Parms TecSniperRifleR2_Parms;
	TecSniperRifleR2_Parms.gv = gv;

	this->ProcessEvent ( pFnTecSniperRifleR2, &TecSniperRifleR2_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecSniperRifleR1
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecSniperRifleR1 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecSniperRifleR1 = NULL;

	if ( ! pFnTecSniperRifleR1 )
		pFnTecSniperRifleR1 = (UFunction*) UObject::GObjObjects()->Data[ 49607 ];

	USFXBonusList_execTecSniperRifleR1_Parms TecSniperRifleR1_Parms;
	TecSniperRifleR1_Parms.gv = gv;

	this->ProcessEvent ( pFnTecSniperRifleR1, &TecSniperRifleR1_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecShotgunR2
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// class ABioPawn*                Player                         ( CPF_Parm )

void USFXBonusList::TecShotgunR2 ( class UBioGlobalVariableTable* gv, class ABioPawn* Player )
{
	static UFunction* pFnTecShotgunR2 = NULL;

	if ( ! pFnTecShotgunR2 )
		pFnTecShotgunR2 = (UFunction*) UObject::GObjObjects()->Data[ 49603 ];

	USFXBonusList_execTecShotgunR2_Parms TecShotgunR2_Parms;
	TecShotgunR2_Parms.gv = gv;
	TecShotgunR2_Parms.Player = Player;

	this->ProcessEvent ( pFnTecShotgunR2, &TecShotgunR2_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecShotgunR1
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecShotgunR1 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecShotgunR1 = NULL;

	if ( ! pFnTecShotgunR1 )
		pFnTecShotgunR1 = (UFunction*) UObject::GObjObjects()->Data[ 49601 ];

	USFXBonusList_execTecShotgunR1_Parms TecShotgunR1_Parms;
	TecShotgunR1_Parms.gv = gv;

	this->ProcessEvent ( pFnTecShotgunR1, &TecShotgunR1_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecShieldR2
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecShieldR2 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecShieldR2 = NULL;

	if ( ! pFnTecShieldR2 )
		pFnTecShieldR2 = (UFunction*) UObject::GObjObjects()->Data[ 49599 ];

	USFXBonusList_execTecShieldR2_Parms TecShieldR2_Parms;
	TecShieldR2_Parms.gv = gv;

	this->ProcessEvent ( pFnTecShieldR2, &TecShieldR2_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecShieldR1
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecShieldR1 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecShieldR1 = NULL;

	if ( ! pFnTecShieldR1 )
		pFnTecShieldR1 = (UFunction*) UObject::GObjObjects()->Data[ 49597 ];

	USFXBonusList_execTecShieldR1_Parms TecShieldR1_Parms;
	TecShieldR1_Parms.gv = gv;

	this->ProcessEvent ( pFnTecShieldR1, &TecShieldR1_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecShepardR2
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXBonusList::TecShepardR2 ( class UBioGlobalVariableTable* gv, TArray< class ABioPawn* > Squad )
{
	static UFunction* pFnTecShepardR2 = NULL;

	if ( ! pFnTecShepardR2 )
		pFnTecShepardR2 = (UFunction*) UObject::GObjObjects()->Data[ 49593 ];

	USFXBonusList_execTecShepardR2_Parms TecShepardR2_Parms;
	TecShepardR2_Parms.gv = gv;
	memcpy ( &TecShepardR2_Parms.Squad, &Squad, 0xC );

	this->ProcessEvent ( pFnTecShepardR2, &TecShepardR2_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecShepardR1
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecShepardR1 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecShepardR1 = NULL;

	if ( ! pFnTecShepardR1 )
		pFnTecShepardR1 = (UFunction*) UObject::GObjObjects()->Data[ 49591 ];

	USFXBonusList_execTecShepardR1_Parms TecShepardR1_Parms;
	TecShepardR1_Parms.gv = gv;

	this->ProcessEvent ( pFnTecShepardR1, &TecShepardR1_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecMediGelR2
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecMediGelR2 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecMediGelR2 = NULL;

	if ( ! pFnTecMediGelR2 )
		pFnTecMediGelR2 = (UFunction*) UObject::GObjObjects()->Data[ 49589 ];

	USFXBonusList_execTecMediGelR2_Parms TecMediGelR2_Parms;
	TecMediGelR2_Parms.gv = gv;

	this->ProcessEvent ( pFnTecMediGelR2, &TecMediGelR2_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecMediGelR1
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecMediGelR1 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecMediGelR1 = NULL;

	if ( ! pFnTecMediGelR1 )
		pFnTecMediGelR1 = (UFunction*) UObject::GObjObjects()->Data[ 49587 ];

	USFXBonusList_execTecMediGelR1_Parms TecMediGelR1_Parms;
	TecMediGelR1_Parms.gv = gv;

	this->ProcessEvent ( pFnTecMediGelR1, &TecMediGelR1_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecHeavyPistolR2
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecHeavyPistolR2 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecHeavyPistolR2 = NULL;

	if ( ! pFnTecHeavyPistolR2 )
		pFnTecHeavyPistolR2 = (UFunction*) UObject::GObjObjects()->Data[ 49585 ];

	USFXBonusList_execTecHeavyPistolR2_Parms TecHeavyPistolR2_Parms;
	TecHeavyPistolR2_Parms.gv = gv;

	this->ProcessEvent ( pFnTecHeavyPistolR2, &TecHeavyPistolR2_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecHeavyPistolR1
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecHeavyPistolR1 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecHeavyPistolR1 = NULL;

	if ( ! pFnTecHeavyPistolR1 )
		pFnTecHeavyPistolR1 = (UFunction*) UObject::GObjObjects()->Data[ 49583 ];

	USFXBonusList_execTecHeavyPistolR1_Parms TecHeavyPistolR1_Parms;
	TecHeavyPistolR1_Parms.gv = gv;

	this->ProcessEvent ( pFnTecHeavyPistolR1, &TecHeavyPistolR1_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecBioticR2
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecBioticR2 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecBioticR2 = NULL;

	if ( ! pFnTecBioticR2 )
		pFnTecBioticR2 = (UFunction*) UObject::GObjObjects()->Data[ 49581 ];

	USFXBonusList_execTecBioticR2_Parms TecBioticR2_Parms;
	TecBioticR2_Parms.gv = gv;

	this->ProcessEvent ( pFnTecBioticR2, &TecBioticR2_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecBioticR1
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecBioticR1 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecBioticR1 = NULL;

	if ( ! pFnTecBioticR1 )
		pFnTecBioticR1 = (UFunction*) UObject::GObjObjects()->Data[ 49579 ];

	USFXBonusList_execTecBioticR1_Parms TecBioticR1_Parms;
	TecBioticR1_Parms.gv = gv;

	this->ProcessEvent ( pFnTecBioticR1, &TecBioticR1_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecAutoPistolR2
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// class ABioPawn*                Player                         ( CPF_Parm )

void USFXBonusList::TecAutoPistolR2 ( class UBioGlobalVariableTable* gv, class ABioPawn* Player )
{
	static UFunction* pFnTecAutoPistolR2 = NULL;

	if ( ! pFnTecAutoPistolR2 )
		pFnTecAutoPistolR2 = (UFunction*) UObject::GObjObjects()->Data[ 49575 ];

	USFXBonusList_execTecAutoPistolR2_Parms TecAutoPistolR2_Parms;
	TecAutoPistolR2_Parms.gv = gv;
	TecAutoPistolR2_Parms.Player = Player;

	this->ProcessEvent ( pFnTecAutoPistolR2, &TecAutoPistolR2_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecAutoPistolR1
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecAutoPistolR1 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecAutoPistolR1 = NULL;

	if ( ! pFnTecAutoPistolR1 )
		pFnTecAutoPistolR1 = (UFunction*) UObject::GObjObjects()->Data[ 49573 ];

	USFXBonusList_execTecAutoPistolR1_Parms TecAutoPistolR1_Parms;
	TecAutoPistolR1_Parms.gv = gv;

	this->ProcessEvent ( pFnTecAutoPistolR1, &TecAutoPistolR1_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecAssaultRifleR2
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXBonusList::TecAssaultRifleR2 ( class UBioGlobalVariableTable* gv, TArray< class ABioPawn* > Squad )
{
	static UFunction* pFnTecAssaultRifleR2 = NULL;

	if ( ! pFnTecAssaultRifleR2 )
		pFnTecAssaultRifleR2 = (UFunction*) UObject::GObjObjects()->Data[ 49569 ];

	USFXBonusList_execTecAssaultRifleR2_Parms TecAssaultRifleR2_Parms;
	TecAssaultRifleR2_Parms.gv = gv;
	memcpy ( &TecAssaultRifleR2_Parms.Squad, &Squad, 0xC );

	this->ProcessEvent ( pFnTecAssaultRifleR2, &TecAssaultRifleR2_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecAssaultRifleR1
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecAssaultRifleR1 ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecAssaultRifleR1 = NULL;

	if ( ! pFnTecAssaultRifleR1 )
		pFnTecAssaultRifleR1 = (UFunction*) UObject::GObjObjects()->Data[ 49567 ];

	USFXBonusList_execTecAssaultRifleR1_Parms TecAssaultRifleR1_Parms;
	TecAssaultRifleR1_Parms.gv = gv;

	this->ProcessEvent ( pFnTecAssaultRifleR1, &TecAssaultRifleR1_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecTechUpgrade
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecTechUpgrade ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecTechUpgrade = NULL;

	if ( ! pFnTecTechUpgrade )
		pFnTecTechUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 49565 ];

	USFXBonusList_execTecTechUpgrade_Parms TecTechUpgrade_Parms;
	TecTechUpgrade_Parms.gv = gv;

	this->ProcessEvent ( pFnTecTechUpgrade, &TecTechUpgrade_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecSniperRifle
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXBonusList::TecSniperRifle ( class UBioGlobalVariableTable* gv, TArray< class ABioPawn* > Squad )
{
	static UFunction* pFnTecSniperRifle = NULL;

	if ( ! pFnTecSniperRifle )
		pFnTecSniperRifle = (UFunction*) UObject::GObjObjects()->Data[ 49561 ];

	USFXBonusList_execTecSniperRifle_Parms TecSniperRifle_Parms;
	TecSniperRifle_Parms.gv = gv;
	memcpy ( &TecSniperRifle_Parms.Squad, &Squad, 0xC );

	this->ProcessEvent ( pFnTecSniperRifle, &TecSniperRifle_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecShotgun
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXBonusList::TecShotgun ( class UBioGlobalVariableTable* gv, TArray< class ABioPawn* > Squad )
{
	static UFunction* pFnTecShotgun = NULL;

	if ( ! pFnTecShotgun )
		pFnTecShotgun = (UFunction*) UObject::GObjObjects()->Data[ 49557 ];

	USFXBonusList_execTecShotgun_Parms TecShotgun_Parms;
	TecShotgun_Parms.gv = gv;
	memcpy ( &TecShotgun_Parms.Squad, &Squad, 0xC );

	this->ProcessEvent ( pFnTecShotgun, &TecShotgun_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecShipScanner
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecShipScanner ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecShipScanner = NULL;

	if ( ! pFnTecShipScanner )
		pFnTecShipScanner = (UFunction*) UObject::GObjObjects()->Data[ 49555 ];

	USFXBonusList_execTecShipScanner_Parms TecShipScanner_Parms;
	TecShipScanner_Parms.gv = gv;

	this->ProcessEvent ( pFnTecShipScanner, &TecShipScanner_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecShipFuel
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecShipFuel ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecShipFuel = NULL;

	if ( ! pFnTecShipFuel )
		pFnTecShipFuel = (UFunction*) UObject::GObjObjects()->Data[ 49553 ];

	USFXBonusList_execTecShipFuel_Parms TecShipFuel_Parms;
	TecShipFuel_Parms.gv = gv;

	this->ProcessEvent ( pFnTecShipFuel, &TecShipFuel_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecShipProbes
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecShipProbes ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecShipProbes = NULL;

	if ( ! pFnTecShipProbes )
		pFnTecShipProbes = (UFunction*) UObject::GObjObjects()->Data[ 49551 ];

	USFXBonusList_execTecShipProbes_Parms TecShipProbes_Parms;
	TecShipProbes_Parms.gv = gv;

	this->ProcessEvent ( pFnTecShipProbes, &TecShipProbes_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecShield
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXBonusList::TecShield ( class UBioGlobalVariableTable* gv, TArray< class ABioPawn* > Squad )
{
	static UFunction* pFnTecShield = NULL;

	if ( ! pFnTecShield )
		pFnTecShield = (UFunction*) UObject::GObjObjects()->Data[ 49547 ];

	USFXBonusList_execTecShield_Parms TecShield_Parms;
	TecShield_Parms.gv = gv;
	memcpy ( &TecShield_Parms.Squad, &Squad, 0xC );

	this->ProcessEvent ( pFnTecShield, &TecShield_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecShepardHealth
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// class ABioPawn*                Player                         ( CPF_Parm )

void USFXBonusList::TecShepardHealth ( class UBioGlobalVariableTable* gv, class ABioPawn* Player )
{
	static UFunction* pFnTecShepardHealth = NULL;

	if ( ! pFnTecShepardHealth )
		pFnTecShepardHealth = (UFunction*) UObject::GObjObjects()->Data[ 49543 ];

	USFXBonusList_execTecShepardHealth_Parms TecShepardHealth_Parms;
	TecShepardHealth_Parms.gv = gv;
	TecShepardHealth_Parms.Player = Player;

	this->ProcessEvent ( pFnTecShepardHealth, &TecShepardHealth_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecQuarianShield
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXBonusList::TecQuarianShield ( class UBioGlobalVariableTable* gv, TArray< class ABioPawn* > Squad )
{
	static UFunction* pFnTecQuarianShield = NULL;

	if ( ! pFnTecQuarianShield )
		pFnTecQuarianShield = (UFunction*) UObject::GObjObjects()->Data[ 49539 ];

	USFXBonusList_execTecQuarianShield_Parms TecQuarianShield_Parms;
	TecQuarianShield_Parms.gv = gv;
	memcpy ( &TecQuarianShield_Parms.Squad, &Squad, 0xC );

	this->ProcessEvent ( pFnTecQuarianShield, &TecQuarianShield_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecMordinUpgrade
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecMordinUpgrade ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecMordinUpgrade = NULL;

	if ( ! pFnTecMordinUpgrade )
		pFnTecMordinUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 49537 ];

	USFXBonusList_execTecMordinUpgrade_Parms TecMordinUpgrade_Parms;
	TecMordinUpgrade_Parms.gv = gv;

	this->ProcessEvent ( pFnTecMordinUpgrade, &TecMordinUpgrade_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecMiniGameHack
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecMiniGameHack ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecMiniGameHack = NULL;

	if ( ! pFnTecMiniGameHack )
		pFnTecMiniGameHack = (UFunction*) UObject::GObjObjects()->Data[ 49535 ];

	USFXBonusList_execTecMiniGameHack_Parms TecMiniGameHack_Parms;
	TecMiniGameHack_Parms.gv = gv;

	this->ProcessEvent ( pFnTecMiniGameHack, &TecMiniGameHack_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecMiniGameDecrypt
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecMiniGameDecrypt ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecMiniGameDecrypt = NULL;

	if ( ! pFnTecMiniGameDecrypt )
		pFnTecMiniGameDecrypt = (UFunction*) UObject::GObjObjects()->Data[ 49533 ];

	USFXBonusList_execTecMiniGameDecrypt_Parms TecMiniGameDecrypt_Parms;
	TecMiniGameDecrypt_Parms.gv = gv;

	this->ProcessEvent ( pFnTecMiniGameDecrypt, &TecMiniGameDecrypt_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecMedigelUpgrade
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecMedigelUpgrade ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecMedigelUpgrade = NULL;

	if ( ! pFnTecMedigelUpgrade )
		pFnTecMedigelUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 49531 ];

	USFXBonusList_execTecMedigelUpgrade_Parms TecMedigelUpgrade_Parms;
	TecMedigelUpgrade_Parms.gv = gv;

	this->ProcessEvent ( pFnTecMedigelUpgrade, &TecMedigelUpgrade_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecLegionUpgrade
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXBonusList::TecLegionUpgrade ( class UBioGlobalVariableTable* gv, TArray< class ABioPawn* > Squad )
{
	static UFunction* pFnTecLegionUpgrade = NULL;

	if ( ! pFnTecLegionUpgrade )
		pFnTecLegionUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 49525 ];

	USFXBonusList_execTecLegionUpgrade_Parms TecLegionUpgrade_Parms;
	TecLegionUpgrade_Parms.gv = gv;
	memcpy ( &TecLegionUpgrade_Parms.Squad, &Squad, 0xC );

	this->ProcessEvent ( pFnTecLegionUpgrade, &TecLegionUpgrade_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecJackUpgrade
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecJackUpgrade ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecJackUpgrade = NULL;

	if ( ! pFnTecJackUpgrade )
		pFnTecJackUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 49523 ];

	USFXBonusList_execTecJackUpgrade_Parms TecJackUpgrade_Parms;
	TecJackUpgrade_Parms.gv = gv;

	this->ProcessEvent ( pFnTecJackUpgrade, &TecJackUpgrade_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecHeavyPistol
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXBonusList::TecHeavyPistol ( class UBioGlobalVariableTable* gv, TArray< class ABioPawn* > Squad )
{
	static UFunction* pFnTecHeavyPistol = NULL;

	if ( ! pFnTecHeavyPistol )
		pFnTecHeavyPistol = (UFunction*) UObject::GObjObjects()->Data[ 49519 ];

	USFXBonusList_execTecHeavyPistol_Parms TecHeavyPistol_Parms;
	TecHeavyPistol_Parms.gv = gv;
	memcpy ( &TecHeavyPistol_Parms.Squad, &Squad, 0xC );

	this->ProcessEvent ( pFnTecHeavyPistol, &TecHeavyPistol_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecHeavyAmmo
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// class ABioPawn*                Player                         ( CPF_Parm )

void USFXBonusList::TecHeavyAmmo ( class UBioGlobalVariableTable* gv, class ABioPawn* Player )
{
	static UFunction* pFnTecHeavyAmmo = NULL;

	if ( ! pFnTecHeavyAmmo )
		pFnTecHeavyAmmo = (UFunction*) UObject::GObjObjects()->Data[ 49515 ];

	USFXBonusList_execTecHeavyAmmo_Parms TecHeavyAmmo_Parms;
	TecHeavyAmmo_Parms.gv = gv;
	TecHeavyAmmo_Parms.Player = Player;

	this->ProcessEvent ( pFnTecHeavyAmmo, &TecHeavyAmmo_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecGruntUpgrade
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXBonusList::TecGruntUpgrade ( class UBioGlobalVariableTable* gv, TArray< class ABioPawn* > Squad )
{
	static UFunction* pFnTecGruntUpgrade = NULL;

	if ( ! pFnTecGruntUpgrade )
		pFnTecGruntUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 49510 ];

	USFXBonusList_execTecGruntUpgrade_Parms TecGruntUpgrade_Parms;
	TecGruntUpgrade_Parms.gv = gv;
	memcpy ( &TecGruntUpgrade_Parms.Squad, &Squad, 0xC );

	this->ProcessEvent ( pFnTecGruntUpgrade, &TecGruntUpgrade_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecExploreScanner
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecExploreScanner ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecExploreScanner = NULL;

	if ( ! pFnTecExploreScanner )
		pFnTecExploreScanner = (UFunction*) UObject::GObjObjects()->Data[ 49508 ];

	USFXBonusList_execTecExploreScanner_Parms TecExploreScanner_Parms;
	TecExploreScanner_Parms.gv = gv;

	this->ProcessEvent ( pFnTecExploreScanner, &TecExploreScanner_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecBioticUpgrade
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )

void USFXBonusList::TecBioticUpgrade ( class UBioGlobalVariableTable* gv )
{
	static UFunction* pFnTecBioticUpgrade = NULL;

	if ( ! pFnTecBioticUpgrade )
		pFnTecBioticUpgrade = (UFunction*) UObject::GObjObjects()->Data[ 49506 ];

	USFXBonusList_execTecBioticUpgrade_Parms TecBioticUpgrade_Parms;
	TecBioticUpgrade_Parms.gv = gv;

	this->ProcessEvent ( pFnTecBioticUpgrade, &TecBioticUpgrade_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecAutoPistol
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXBonusList::TecAutoPistol ( class UBioGlobalVariableTable* gv, TArray< class ABioPawn* > Squad )
{
	static UFunction* pFnTecAutoPistol = NULL;

	if ( ! pFnTecAutoPistol )
		pFnTecAutoPistol = (UFunction*) UObject::GObjObjects()->Data[ 49502 ];

	USFXBonusList_execTecAutoPistol_Parms TecAutoPistol_Parms;
	TecAutoPistol_Parms.gv = gv;
	memcpy ( &TecAutoPistol_Parms.Squad, &Squad, 0xC );

	this->ProcessEvent ( pFnTecAutoPistol, &TecAutoPistol_Parms, NULL );
};

// Function SFXGame.SFXBonusList.TecAssaultRifle
// [0x00020002] 
// Parameters infos:
// class UBioGlobalVariableTable* gv                             ( CPF_Parm )
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXBonusList::TecAssaultRifle ( class UBioGlobalVariableTable* gv, TArray< class ABioPawn* > Squad )
{
	static UFunction* pFnTecAssaultRifle = NULL;

	if ( ! pFnTecAssaultRifle )
		pFnTecAssaultRifle = (UFunction*) UObject::GObjObjects()->Data[ 49498 ];

	USFXBonusList_execTecAssaultRifle_Parms TecAssaultRifle_Parms;
	TecAssaultRifle_Parms.gv = gv;
	memcpy ( &TecAssaultRifle_Parms.Squad, &Squad, 0xC );

	this->ProcessEvent ( pFnTecAssaultRifle, &TecAssaultRifle_Parms, NULL );
};

// Function SFXGame.SFXBonusList.ScaleSquadShields
// [0x00020002] 
// Parameters infos:
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXBonusList::ScaleSquadShields ( TArray< class ABioPawn* > Squad )
{
	static UFunction* pFnScaleSquadShields = NULL;

	if ( ! pFnScaleSquadShields )
		pFnScaleSquadShields = (UFunction*) UObject::GObjObjects()->Data[ 49493 ];

	USFXBonusList_execScaleSquadShields_Parms ScaleSquadShields_Parms;
	memcpy ( &ScaleSquadShields_Parms.Squad, &Squad, 0xC );

	this->ProcessEvent ( pFnScaleSquadShields, &ScaleSquadShields_Parms, NULL );
};

// Function SFXGame.SFXBonusList.ScaleSquadWeapons
// [0x00020002] 
// Parameters infos:
// class UClass*                  WeaponClass                    ( CPF_Parm )
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_NeedCtorLink )

void USFXBonusList::ScaleSquadWeapons ( class UClass* WeaponClass, TArray< class ABioPawn* > Squad )
{
	static UFunction* pFnScaleSquadWeapons = NULL;

	if ( ! pFnScaleSquadWeapons )
		pFnScaleSquadWeapons = (UFunction*) UObject::GObjObjects()->Data[ 49487 ];

	USFXBonusList_execScaleSquadWeapons_Parms ScaleSquadWeapons_Parms;
	ScaleSquadWeapons_Parms.WeaponClass = WeaponClass;
	memcpy ( &ScaleSquadWeapons_Parms.Squad, &Squad, 0xC );

	this->ProcessEvent ( pFnScaleSquadWeapons, &ScaleSquadWeapons_Parms, NULL );
};

// Function SFXGame.SFXBonusList.GetPlayerSquad
// [0x00420002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )
// TArray< class ABioPawn* >      Squad                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// class ABioPawn*                Player                         ( CPF_Parm | CPF_OutParm )

void USFXBonusList::GetPlayerSquad ( class ABioWorldInfo* WorldInfo, TArray< class ABioPawn* >* Squad, class ABioPawn** Player )
{
	static UFunction* pFnGetPlayerSquad = NULL;

	if ( ! pFnGetPlayerSquad )
		pFnGetPlayerSquad = (UFunction*) UObject::GObjObjects()->Data[ 49480 ];

	USFXBonusList_execGetPlayerSquad_Parms GetPlayerSquad_Parms;
	GetPlayerSquad_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnGetPlayerSquad, &GetPlayerSquad_Parms, NULL );

	if ( Squad )
		memcpy ( Squad, &GetPlayerSquad_Parms.Squad, 0xC );

	if ( Player )
		*Player = GetPlayerSquad_Parms.Player;
};

// Function SFXGame.SFXBonusList.AwardTechBonus
// [0x00020002] 
// Parameters infos:
// struct FName                   nmTech                         ( CPF_Parm )
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void USFXBonusList::AwardTechBonus ( struct FName nmTech, class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnAwardTechBonus = NULL;

	if ( ! pFnAwardTechBonus )
		pFnAwardTechBonus = (UFunction*) UObject::GObjObjects()->Data[ 49473 ];

	USFXBonusList_execAwardTechBonus_Parms AwardTechBonus_Parms;
	memcpy ( &AwardTechBonus_Parms.nmTech, &nmTech, 0x8 );
	AwardTechBonus_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnAwardTechBonus, &AwardTechBonus_Parms, NULL );
};

// Function SFXGame.SFXBonusList.UpdateCache
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void USFXBonusList::UpdateCache ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnUpdateCache = NULL;

	if ( ! pFnUpdateCache )
		pFnUpdateCache = (UFunction*) UObject::GObjObjects()->Data[ 34368 ];

	USFXBonusList_execUpdateCache_Parms UpdateCache_Parms;
	UpdateCache_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnUpdateCache, &UpdateCache_Parms, NULL );
};

// Function SFXGame.SFXBonusList.DoPatchDefaultPropertyUpdates
// [0x00020002] 
// Parameters infos:

void USFXBonusList::DoPatchDefaultPropertyUpdates ( )
{
	static UFunction* pFnDoPatchDefaultPropertyUpdates = NULL;

	if ( ! pFnDoPatchDefaultPropertyUpdates )
		pFnDoPatchDefaultPropertyUpdates = (UFunction*) UObject::GObjObjects()->Data[ 49467 ];

	USFXBonusList_execDoPatchDefaultPropertyUpdates_Parms DoPatchDefaultPropertyUpdates_Parms;

	this->ProcessEvent ( pFnDoPatchDefaultPropertyUpdates, &DoPatchDefaultPropertyUpdates_Parms, NULL );
};

// Function SFXGame.SFXBonusList.CacheExportIDs
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void USFXBonusList::CacheExportIDs ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnCacheExportIDs = NULL;

	if ( ! pFnCacheExportIDs )
		pFnCacheExportIDs = (UFunction*) UObject::GObjObjects()->Data[ 49463 ];

	USFXBonusList_execCacheExportIDs_Parms CacheExportIDs_Parms;
	CacheExportIDs_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnCacheExportIDs, &CacheExportIDs_Parms, NULL );
};

// Function SFXGame.BioSeqAct_PlotTreasureTester.ValidateTechSheet
// [0x00822002] 
// Parameters infos:
// class USFXPlotTreasure*        oTreasure                      ( CPF_Parm )

void UBioSeqAct_PlotTreasureTester::ValidateTechSheet ( class USFXPlotTreasure* oTreasure )
{
	static UFunction* pFnValidateTechSheet = NULL;

	if ( ! pFnValidateTechSheet )
		pFnValidateTechSheet = (UFunction*) UObject::GObjObjects()->Data[ 44956 ];

	UBioSeqAct_PlotTreasureTester_execValidateTechSheet_Parms ValidateTechSheet_Parms;
	ValidateTechSheet_Parms.oTreasure = oTreasure;

	this->ProcessEvent ( pFnValidateTechSheet, &ValidateTechSheet_Parms, NULL );
};

// Function SFXGame.BioSeqAct_PlotTreasureTester.ValidateTreasureSheet
// [0x00822002] 
// Parameters infos:
// class USFXPlotTreasure*        oTreasure                      ( CPF_Parm )

void UBioSeqAct_PlotTreasureTester::ValidateTreasureSheet ( class USFXPlotTreasure* oTreasure )
{
	static UFunction* pFnValidateTreasureSheet = NULL;

	if ( ! pFnValidateTreasureSheet )
		pFnValidateTreasureSheet = (UFunction*) UObject::GObjObjects()->Data[ 44943 ];

	UBioSeqAct_PlotTreasureTester_execValidateTreasureSheet_Parms ValidateTreasureSheet_Parms;
	ValidateTreasureSheet_Parms.oTreasure = oTreasure;

	this->ProcessEvent ( pFnValidateTreasureSheet, &ValidateTreasureSheet_Parms, NULL );
};

// Function SFXGame.BioSeqAct_PlotTreasureTester.ValidateResourcesSheet
// [0x00822002] 
// Parameters infos:
// class USFXPlotTreasure*        oTreasure                      ( CPF_Parm )

void UBioSeqAct_PlotTreasureTester::ValidateResourcesSheet ( class USFXPlotTreasure* oTreasure )
{
	static UFunction* pFnValidateResourcesSheet = NULL;

	if ( ! pFnValidateResourcesSheet )
		pFnValidateResourcesSheet = (UFunction*) UObject::GObjObjects()->Data[ 44932 ];

	UBioSeqAct_PlotTreasureTester_execValidateResourcesSheet_Parms ValidateResourcesSheet_Parms;
	ValidateResourcesSheet_Parms.oTreasure = oTreasure;

	this->ProcessEvent ( pFnValidateResourcesSheet, &ValidateResourcesSheet_Parms, NULL );
};

// Function SFXGame.BioSeqAct_PlotTreasureTester.Validate
// [0x00022002] 
// Parameters infos:
// class USFXPlotTreasure*        oTreasure                      ( CPF_Parm )

void UBioSeqAct_PlotTreasureTester::Validate ( class USFXPlotTreasure* oTreasure )
{
	static UFunction* pFnValidate = NULL;

	if ( ! pFnValidate )
		pFnValidate = (UFunction*) UObject::GObjObjects()->Data[ 44930 ];

	UBioSeqAct_PlotTreasureTester_execValidate_Parms Validate_Parms;
	Validate_Parms.oTreasure = oTreasure;

	this->ProcessEvent ( pFnValidate, &Validate_Parms, NULL );
};

// Function SFXGame.BioSeqAct_PlotTreasureTester.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_PlotTreasureTester::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44927 ];

	UBioSeqAct_PlotTreasureTester_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXPawn_Henchman.CreateWeapons
// [0x00020002] 
// Parameters infos:
// class USFXLoadoutData*         ChkLoadout                     ( CPF_Parm )

void ASFXPawn_Henchman::CreateWeapons ( class USFXLoadoutData* ChkLoadout )
{
	static UFunction* pFnCreateWeapons = NULL;

	if ( ! pFnCreateWeapons )
		pFnCreateWeapons = (UFunction*) UObject::GObjObjects()->Data[ 58399 ];

	ASFXPawn_Henchman_execCreateWeapons_Parms CreateWeapons_Parms;
	CreateWeapons_Parms.ChkLoadout = ChkLoadout;

	this->ProcessEvent ( pFnCreateWeapons, &CreateWeapons_Parms, NULL );
};

// Function SFXGame.SFXPawn_Henchman.GetDefaultLoadout
// [0x00C22002] 
// Parameters infos:
// struct FName                   HTag                           ( CPF_Parm )
// struct FString                 DLoadout                       ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void ASFXPawn_Henchman::GetDefaultLoadout ( struct FName HTag, struct FString* DLoadout )
{
	static UFunction* pFnGetDefaultLoadout = NULL;

	if ( ! pFnGetDefaultLoadout )
		pFnGetDefaultLoadout = (UFunction*) UObject::GObjObjects()->Data[ 58386 ];

	ASFXPawn_Henchman_execGetDefaultLoadout_Parms GetDefaultLoadout_Parms;
	memcpy ( &GetDefaultLoadout_Parms.HTag, &HTag, 0x8 );

	this->ProcessEvent ( pFnGetDefaultLoadout, &GetDefaultLoadout_Parms, NULL );

	if ( DLoadout )
		memcpy ( DLoadout, &GetDefaultLoadout_Parms.DLoadout, 0x48 );
};

// Function SFXGame.SFXPawn_Henchman.GetMaxAttackTickets
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXPawn_Henchman::eventGetMaxAttackTickets ( )
{
	static UFunction* pFnGetMaxAttackTickets = NULL;

	if ( ! pFnGetMaxAttackTickets )
		pFnGetMaxAttackTickets = (UFunction*) UObject::GObjObjects()->Data[ 58383 ];

	ASFXPawn_Henchman_eventGetMaxAttackTickets_Parms GetMaxAttackTickets_Parms;

	this->ProcessEvent ( pFnGetMaxAttackTickets, &GetMaxAttackTickets_Parms, NULL );

	return GetMaxAttackTickets_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Henchman.GetMaxTargetTickets
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXPawn_Henchman::eventGetMaxTargetTickets ( )
{
	static UFunction* pFnGetMaxTargetTickets = NULL;

	if ( ! pFnGetMaxTargetTickets )
		pFnGetMaxTargetTickets = (UFunction*) UObject::GObjObjects()->Data[ 58380 ];

	ASFXPawn_Henchman_eventGetMaxTargetTickets_Parms GetMaxTargetTickets_Parms;

	this->ProcessEvent ( pFnGetMaxTargetTickets, &GetMaxTargetTickets_Parms, NULL );

	return GetMaxTargetTickets_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Henchman.PlayDeathVocalization
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                Killer                         ( CPF_Parm )

void ASFXPawn_Henchman::PlayDeathVocalization ( class ABioPawn* Killer )
{
	static UFunction* pFnPlayDeathVocalization = NULL;

	if ( ! pFnPlayDeathVocalization )
		pFnPlayDeathVocalization = (UFunction*) UObject::GObjObjects()->Data[ 58375 ];

	ASFXPawn_Henchman_execPlayDeathVocalization_Parms PlayDeathVocalization_Parms;
	PlayDeathVocalization_Parms.Killer = Killer;

	this->ProcessEvent ( pFnPlayDeathVocalization, &PlayDeathVocalization_Parms, NULL );
};

// Function SFXGame.SFXPawn_Henchman.SetRTPCHelmetIsEnabled
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class UWwiseAudioComponent*    WwiseComponent                 ( CPF_Parm | CPF_EditInline )

void ASFXPawn_Henchman::eventSetRTPCHelmetIsEnabled ( class UWwiseAudioComponent* WwiseComponent )
{
	static UFunction* pFnSetRTPCHelmetIsEnabled = NULL;

	if ( ! pFnSetRTPCHelmetIsEnabled )
		pFnSetRTPCHelmetIsEnabled = (UFunction*) UObject::GObjObjects()->Data[ 58373 ];

	ASFXPawn_Henchman_eventSetRTPCHelmetIsEnabled_Parms SetRTPCHelmetIsEnabled_Parms;
	SetRTPCHelmetIsEnabled_Parms.WwiseComponent = WwiseComponent;

	this->ProcessEvent ( pFnSetRTPCHelmetIsEnabled, &SetRTPCHelmetIsEnabled_Parms, NULL );
};

// Function SFXGame.SFXPawn_Henchman.GetGUIIcon
// [0x00020002] 
// Parameters infos:
// class UTexture2D*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bDeadIcon                      ( CPF_OptionalParm | CPF_Parm )

class UTexture2D* ASFXPawn_Henchman::GetGUIIcon ( unsigned long bDeadIcon )
{
	static UFunction* pFnGetGUIIcon = NULL;

	if ( ! pFnGetGUIIcon )
		pFnGetGUIIcon = (UFunction*) UObject::GObjObjects()->Data[ 58370 ];

	ASFXPawn_Henchman_execGetGUIIcon_Parms GetGUIIcon_Parms;
	GetGUIIcon_Parms.bDeadIcon = bDeadIcon;

	this->ProcessEvent ( pFnGetGUIIcon, &GetGUIIcon_Parms, NULL );

	return GetGUIIcon_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Henchman.ValidateRagdoll
// [0x00020000] 
// Parameters infos:

void ASFXPawn_Henchman::ValidateRagdoll ( )
{
	static UFunction* pFnValidateRagdoll = NULL;

	if ( ! pFnValidateRagdoll )
		pFnValidateRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 58369 ];

	ASFXPawn_Henchman_execValidateRagdoll_Parms ValidateRagdoll_Parms;

	this->ProcessEvent ( pFnValidateRagdoll, &ValidateRagdoll_Parms, NULL );
};

// Function SFXGame.SFXPawn_Henchman.InitializeHenchman
// [0x00020002] 
// Parameters infos:
// int                            DesiredLevel                   ( CPF_Parm )

void ASFXPawn_Henchman::InitializeHenchman ( int DesiredLevel )
{
	static UFunction* pFnInitializeHenchman = NULL;

	if ( ! pFnInitializeHenchman )
		pFnInitializeHenchman = (UFunction*) UObject::GObjObjects()->Data[ 58363 ];

	ASFXPawn_Henchman_execInitializeHenchman_Parms InitializeHenchman_Parms;
	InitializeHenchman_Parms.DesiredLevel = DesiredLevel;

	this->ProcessEvent ( pFnInitializeHenchman, &InitializeHenchman_Parms, NULL );
};

// Function SFXGame.SFXPawn_Henchman.SpawnDefaultWeapons
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Henchman::SpawnDefaultWeapons ( )
{
	static UFunction* pFnSpawnDefaultWeapons = NULL;

	if ( ! pFnSpawnDefaultWeapons )
		pFnSpawnDefaultWeapons = (UFunction*) UObject::GObjObjects()->Data[ 58360 ];

	ASFXPawn_Henchman_execSpawnDefaultWeapons_Parms SpawnDefaultWeapons_Parms;

	this->ProcessEvent ( pFnSpawnDefaultWeapons, &SpawnDefaultWeapons_Parms, NULL );
};

// Function SFXGame.SFXPawn_Henchman.Resurrect
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          PercentOfHealthRegained        ( CPF_Parm )
// unsigned long                  bIsInstantaneous               ( CPF_Parm )

bool ASFXPawn_Henchman::eventResurrect ( float PercentOfHealthRegained, unsigned long bIsInstantaneous )
{
	static UFunction* pFnResurrect = NULL;

	if ( ! pFnResurrect )
		pFnResurrect = (UFunction*) UObject::GObjObjects()->Data[ 58356 ];

	ASFXPawn_Henchman_eventResurrect_Parms Resurrect_Parms;
	Resurrect_Parms.PercentOfHealthRegained = PercentOfHealthRegained;
	Resurrect_Parms.bIsInstantaneous = bIsInstantaneous;

	this->ProcessEvent ( pFnResurrect, &Resurrect_Parms, NULL );

	return Resurrect_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Henchman.Revive
// [0x00020002] 
// Parameters infos:
// class AActor*                  User                           ( CPF_Parm )

void ASFXPawn_Henchman::Revive ( class AActor* User )
{
	static UFunction* pFnRevive = NULL;

	if ( ! pFnRevive )
		pFnRevive = (UFunction*) UObject::GObjObjects()->Data[ 58354 ];

	ASFXPawn_Henchman_execRevive_Parms Revive_Parms;
	Revive_Parms.User = User;

	this->ProcessEvent ( pFnRevive, &Revive_Parms, NULL );
};

// Function SFXGame.SFXPawn_Henchman.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ASFXPawn_Henchman::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 58352 ];

	ASFXPawn_Henchman_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXPawn_Henchman.GetAttackOrderPower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPower*               Power                          ( CPF_Parm | CPF_OutParm )

bool ASFXPawn_Henchman::GetAttackOrderPower ( class USFXPower** Power )
{
	static UFunction* pFnGetAttackOrderPower = NULL;

	if ( ! pFnGetAttackOrderPower )
		pFnGetAttackOrderPower = (UFunction*) UObject::GObjObjects()->Data[ 58344 ];

	ASFXPawn_Henchman_execGetAttackOrderPower_Parms GetAttackOrderPower_Parms;

	this->ProcessEvent ( pFnGetAttackOrderPower, &GetAttackOrderPower_Parms, NULL );

	if ( Power )
		*Power = GetAttackOrderPower_Parms.Power;

	return GetAttackOrderPower_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Henchman.InCombat
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXPawn_Henchman::InCombat ( )
{
	static UFunction* pFnInCombat = NULL;

	if ( ! pFnInCombat )
		pFnInCombat = (UFunction*) UObject::GObjObjects()->Data[ 58341 ];

	ASFXPawn_Henchman_execInCombat_Parms InCombat_Parms;

	this->ProcessEvent ( pFnInCombat, &InCombat_Parms, NULL );

	return InCombat_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Henchman.OutsideWorldBounds
// [0x00020922] ( FUNC_Event )
// Parameters infos:

void ASFXPawn_Henchman::eventOutsideWorldBounds ( )
{
	static UFunction* pFnOutsideWorldBounds = NULL;

	if ( ! pFnOutsideWorldBounds )
		pFnOutsideWorldBounds = (UFunction*) UObject::GObjObjects()->Data[ 58339 ];

	ASFXPawn_Henchman_eventOutsideWorldBounds_Parms OutsideWorldBounds_Parms;

	this->ProcessEvent ( pFnOutsideWorldBounds, &OutsideWorldBounds_Parms, NULL );
};

// Function SFXGame.SFXPawn_Henchman.FellOutOfWorld
// [0x00020902] ( FUNC_Event )
// Parameters infos:
// class UClass*                  dmgType                        ( CPF_Parm )

void ASFXPawn_Henchman::eventFellOutOfWorld ( class UClass* dmgType )
{
	static UFunction* pFnFellOutOfWorld = NULL;

	if ( ! pFnFellOutOfWorld )
		pFnFellOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 58336 ];

	ASFXPawn_Henchman_eventFellOutOfWorld_Parms FellOutOfWorld_Parms;
	FellOutOfWorld_Parms.dmgType = dmgType;

	this->ProcessEvent ( pFnFellOutOfWorld, &FellOutOfWorld_Parms, NULL );
};

// Function SFXGame.SFXPawn_Henchman.GetScaledLevel
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXPawn_Henchman::GetScaledLevel ( )
{
	static UFunction* pFnGetScaledLevel = NULL;

	if ( ! pFnGetScaledLevel )
		pFnGetScaledLevel = (UFunction*) UObject::GObjObjects()->Data[ 58334 ];

	ASFXPawn_Henchman_execGetScaledLevel_Parms GetScaledLevel_Parms;

	this->ProcessEvent ( pFnGetScaledLevel, &GetScaledLevel_Parms, NULL );

	return GetScaledLevel_Parms.ReturnValue;
};

// Function SFXGame.SFXPawn_Henchman.ForceHelmetVisibility
// [0x00020002] 
// Parameters infos:
// unsigned long                  bHelmetVisible                 ( CPF_Parm )

void ASFXPawn_Henchman::ForceHelmetVisibility ( unsigned long bHelmetVisible )
{
	static UFunction* pFnForceHelmetVisibility = NULL;

	if ( ! pFnForceHelmetVisibility )
		pFnForceHelmetVisibility = (UFunction*) UObject::GObjObjects()->Data[ 58332 ];

	ASFXPawn_Henchman_execForceHelmetVisibility_Parms ForceHelmetVisibility_Parms;
	ForceHelmetVisibility_Parms.bHelmetVisible = bHelmetVisible;

	this->ProcessEvent ( pFnForceHelmetVisibility, &ForceHelmetVisibility_Parms, NULL );
};

// Function SFXGame.SFXPawn_Henchman.ShowHelmet
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bShowHelmet                    ( CPF_Parm )

void ASFXPawn_Henchman::ShowHelmet ( unsigned long bShowHelmet )
{
	static UFunction* pFnShowHelmet = NULL;

	if ( ! pFnShowHelmet )
		pFnShowHelmet = (UFunction*) UObject::GObjObjects()->Data[ 58330 ];

	ASFXPawn_Henchman_execShowHelmet_Parms ShowHelmet_Parms;
	ShowHelmet_Parms.bShowHelmet = bShowHelmet;

	this->ProcessEvent ( pFnShowHelmet, &ShowHelmet_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.CheckThreatRadius
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::CheckThreatRadius ( )
{
	static UFunction* pFnCheckThreatRadius = NULL;

	if ( ! pFnCheckThreatRadius )
		pFnCheckThreatRadius = (UFunction*) UObject::GObjObjects()->Data[ 53125 ];

	ASFXAI_Henchman_execCheckThreatRadius_Parms CheckThreatRadius_Parms;

	this->ProcessEvent ( pFnCheckThreatRadius, &CheckThreatRadius_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.IsWithinThreatRadius
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Henchman::IsWithinThreatRadius ( )
{
	static UFunction* pFnIsWithinThreatRadius = NULL;

	if ( ! pFnIsWithinThreatRadius )
		pFnIsWithinThreatRadius = (UFunction*) UObject::GObjObjects()->Data[ 53122 ];

	ASFXAI_Henchman_execIsWithinThreatRadius_Parms IsWithinThreatRadius_Parms;

	this->ProcessEvent ( pFnIsWithinThreatRadius, &IsWithinThreatRadius_Parms, NULL );

	return IsWithinThreatRadius_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.NotifyKnockedOutOfCover
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::NotifyKnockedOutOfCover ( )
{
	static UFunction* pFnNotifyKnockedOutOfCover = NULL;

	if ( ! pFnNotifyKnockedOutOfCover )
		pFnNotifyKnockedOutOfCover = (UFunction*) UObject::GObjObjects()->Data[ 53121 ];

	ASFXAI_Henchman_execNotifyKnockedOutOfCover_Parms NotifyKnockedOutOfCover_Parms;

	this->ProcessEvent ( pFnNotifyKnockedOutOfCover, &NotifyKnockedOutOfCover_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.CanInstantlyUsePowers
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Henchman::CanInstantlyUsePowers ( )
{
	static UFunction* pFnCanInstantlyUsePowers = NULL;

	if ( ! pFnCanInstantlyUsePowers )
		pFnCanInstantlyUsePowers = (UFunction*) UObject::GObjObjects()->Data[ 53119 ];

	ASFXAI_Henchman_execCanInstantlyUsePowers_Parms CanInstantlyUsePowers_Parms;

	this->ProcessEvent ( pFnCanInstantlyUsePowers, &CanInstantlyUsePowers_Parms, NULL );

	return CanInstantlyUsePowers_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.InstantUsePower
// [0x00820002] 
// Parameters infos:

void ASFXAI_Henchman::InstantUsePower ( )
{
	static UFunction* pFnInstantUsePower = NULL;

	if ( ! pFnInstantUsePower )
		pFnInstantUsePower = (UFunction*) UObject::GObjObjects()->Data[ 53111 ];

	ASFXAI_Henchman_execInstantUsePower_Parms InstantUsePower_Parms;

	this->ProcessEvent ( pFnInstantUsePower, &InstantUsePower_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.OnCombatStart
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::OnCombatStart ( )
{
	static UFunction* pFnOnCombatStart = NULL;

	if ( ! pFnOnCombatStart )
		pFnOnCombatStart = (UFunction*) UObject::GObjObjects()->Data[ 53110 ];

	ASFXAI_Henchman_execOnCombatStart_Parms OnCombatStart_Parms;

	this->ProcessEvent ( pFnOnCombatStart, &OnCombatStart_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.IsPlayerReachable
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Henchman::IsPlayerReachable ( )
{
	static UFunction* pFnIsPlayerReachable = NULL;

	if ( ! pFnIsPlayerReachable )
		pFnIsPlayerReachable = (UFunction*) UObject::GObjObjects()->Data[ 53105 ];

	ASFXAI_Henchman_execIsPlayerReachable_Parms IsPlayerReachable_Parms;

	this->ProcessEvent ( pFnIsPlayerReachable, &IsPlayerReachable_Parms, NULL );

	return IsPlayerReachable_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.ShouldWaitForPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Henchman::ShouldWaitForPlayer ( )
{
	static UFunction* pFnShouldWaitForPlayer = NULL;

	if ( ! pFnShouldWaitForPlayer )
		pFnShouldWaitForPlayer = (UFunction*) UObject::GObjObjects()->Data[ 53100 ];

	ASFXAI_Henchman_execShouldWaitForPlayer_Parms ShouldWaitForPlayer_Parms;

	this->ProcessEvent ( pFnShouldWaitForPlayer, &ShouldWaitForPlayer_Parms, NULL );

	return ShouldWaitForPlayer_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.AdjustEnemyRating
// [0x00420002] 
// Parameters infos:
// class APawn*                   EnemyPawn                      ( CPF_Parm )
// float                          fRating                        ( CPF_Parm | CPF_OutParm )

void ASFXAI_Henchman::AdjustEnemyRating ( class APawn* EnemyPawn, float* fRating )
{
	static UFunction* pFnAdjustEnemyRating = NULL;

	if ( ! pFnAdjustEnemyRating )
		pFnAdjustEnemyRating = (UFunction*) UObject::GObjObjects()->Data[ 53096 ];

	ASFXAI_Henchman_execAdjustEnemyRating_Parms AdjustEnemyRating_Parms;
	AdjustEnemyRating_Parms.EnemyPawn = EnemyPawn;

	this->ProcessEvent ( pFnAdjustEnemyRating, &AdjustEnemyRating_Parms, NULL );

	if ( fRating )
		*fRating = AdjustEnemyRating_Parms.fRating;
};

// Function SFXGame.SFXAI_Henchman.AdjustRatingByTickets
// [0x00420000] 
// Parameters infos:
// int                            EnemyIdx                       ( CPF_Parm )
// float                          out_Rating                     ( CPF_Parm | CPF_OutParm )

void ASFXAI_Henchman::AdjustRatingByTickets ( int EnemyIdx, float* out_Rating )
{
	static UFunction* pFnAdjustRatingByTickets = NULL;

	if ( ! pFnAdjustRatingByTickets )
		pFnAdjustRatingByTickets = (UFunction*) UObject::GObjObjects()->Data[ 53093 ];

	ASFXAI_Henchman_execAdjustRatingByTickets_Parms AdjustRatingByTickets_Parms;
	AdjustRatingByTickets_Parms.EnemyIdx = EnemyIdx;

	this->ProcessEvent ( pFnAdjustRatingByTickets, &AdjustRatingByTickets_Parms, NULL );

	if ( out_Rating )
		*out_Rating = AdjustRatingByTickets_Parms.out_Rating;
};

// Function SFXGame.SFXAI_Henchman.CheckInCombat
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::CheckInCombat ( )
{
	static UFunction* pFnCheckInCombat = NULL;

	if ( ! pFnCheckInCombat )
		pFnCheckInCombat = (UFunction*) UObject::GObjObjects()->Data[ 53092 ];

	ASFXAI_Henchman_execCheckInCombat_Parms CheckInCombat_Parms;

	this->ProcessEvent ( pFnCheckInCombat, &CheckInCombat_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.NotifyNewEnemy
// [0x00020002] 
// Parameters infos:
// class APawn*                   NewEnemy                       ( CPF_Parm )

void ASFXAI_Henchman::NotifyNewEnemy ( class APawn* NewEnemy )
{
	static UFunction* pFnNotifyNewEnemy = NULL;

	if ( ! pFnNotifyNewEnemy )
		pFnNotifyNewEnemy = (UFunction*) UObject::GObjObjects()->Data[ 53090 ];

	ASFXAI_Henchman_execNotifyNewEnemy_Parms NotifyNewEnemy_Parms;
	NotifyNewEnemy_Parms.NewEnemy = NewEnemy;

	this->ProcessEvent ( pFnNotifyNewEnemy, &NotifyNewEnemy_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.ApplyOrderBonus
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::ApplyOrderBonus ( )
{
	static UFunction* pFnApplyOrderBonus = NULL;

	if ( ! pFnApplyOrderBonus )
		pFnApplyOrderBonus = (UFunction*) UObject::GObjObjects()->Data[ 53082 ];

	ASFXAI_Henchman_execApplyOrderBonus_Parms ApplyOrderBonus_Parms;

	this->ProcessEvent ( pFnApplyOrderBonus, &ApplyOrderBonus_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.ModifyBurstDelay
// [0x00420002] 
// Parameters infos:
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// float                          BurstDelay                     ( CPF_Parm | CPF_OutParm )

void ASFXAI_Henchman::ModifyBurstDelay ( class ASFXWeapon* Weapon, float* BurstDelay )
{
	static UFunction* pFnModifyBurstDelay = NULL;

	if ( ! pFnModifyBurstDelay )
		pFnModifyBurstDelay = (UFunction*) UObject::GObjObjects()->Data[ 53079 ];

	ASFXAI_Henchman_execModifyBurstDelay_Parms ModifyBurstDelay_Parms;
	ModifyBurstDelay_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnModifyBurstDelay, &ModifyBurstDelay_Parms, NULL );

	if ( BurstDelay )
		*BurstDelay = ModifyBurstDelay_Parms.BurstDelay;
};

// Function SFXGame.SFXAI_Henchman.OnTargetChanged
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::OnTargetChanged ( )
{
	static UFunction* pFnOnTargetChanged = NULL;

	if ( ! pFnOnTargetChanged )
		pFnOnTargetChanged = (UFunction*) UObject::GObjObjects()->Data[ 53077 ];

	ASFXAI_Henchman_execOnTargetChanged_Parms OnTargetChanged_Parms;

	this->ProcessEvent ( pFnOnTargetChanged, &OnTargetChanged_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.CheckMeleeAttacker
// [0x00820002] 
// Parameters infos:

void ASFXAI_Henchman::CheckMeleeAttacker ( )
{
	static UFunction* pFnCheckMeleeAttacker = NULL;

	if ( ! pFnCheckMeleeAttacker )
		pFnCheckMeleeAttacker = (UFunction*) UObject::GObjObjects()->Data[ 53073 ];

	ASFXAI_Henchman_execCheckMeleeAttacker_Parms CheckMeleeAttacker_Parms;

	this->ProcessEvent ( pFnCheckMeleeAttacker, &CheckMeleeAttacker_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.CheckLineOfFireClear
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::CheckLineOfFireClear ( )
{
	static UFunction* pFnCheckLineOfFireClear = NULL;

	if ( ! pFnCheckLineOfFireClear )
		pFnCheckLineOfFireClear = (UFunction*) UObject::GObjObjects()->Data[ 53071 ];

	ASFXAI_Henchman_execCheckLineOfFireClear_Parms CheckLineOfFireClear_Parms;

	this->ProcessEvent ( pFnCheckLineOfFireClear, &CheckLineOfFireClear_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.CheckPlayerLineOfFire
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::CheckPlayerLineOfFire ( )
{
	static UFunction* pFnCheckPlayerLineOfFire = NULL;

	if ( ! pFnCheckPlayerLineOfFire )
		pFnCheckPlayerLineOfFire = (UFunction*) UObject::GObjObjects()->Data[ 53069 ];

	ASFXAI_Henchman_execCheckPlayerLineOfFire_Parms CheckPlayerLineOfFire_Parms;

	this->ProcessEvent ( pFnCheckPlayerLineOfFire, &CheckPlayerLineOfFire_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.IsInPlayerLineOfFire
// [0x00C20002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPlayerIsFiring                ( CPF_Parm | CPF_OutParm )

bool ASFXAI_Henchman::IsInPlayerLineOfFire ( int* nPlayerIsFiring )
{
	static UFunction* pFnIsInPlayerLineOfFire = NULL;

	if ( ! pFnIsInPlayerLineOfFire )
		pFnIsInPlayerLineOfFire = (UFunction*) UObject::GObjObjects()->Data[ 53057 ];

	ASFXAI_Henchman_execIsInPlayerLineOfFire_Parms IsInPlayerLineOfFire_Parms;

	this->ProcessEvent ( pFnIsInPlayerLineOfFire, &IsInPlayerLineOfFire_Parms, NULL );

	if ( nPlayerIsFiring )
		*nPlayerIsFiring = IsInPlayerLineOfFire_Parms.nPlayerIsFiring;

	return IsInPlayerLineOfFire_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.StopDefendingActor
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::StopDefendingActor ( )
{
	static UFunction* pFnStopDefendingActor = NULL;

	if ( ! pFnStopDefendingActor )
		pFnStopDefendingActor = (UFunction*) UObject::GObjObjects()->Data[ 53056 ];

	ASFXAI_Henchman_execStopDefendingActor_Parms StopDefendingActor_Parms;

	this->ProcessEvent ( pFnStopDefendingActor, &StopDefendingActor_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.StartDefendingActor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ActorToDefend                  ( CPF_Parm )
// float                          fMaxDistanceFromActor          ( CPF_Parm )

bool ASFXAI_Henchman::StartDefendingActor ( class AActor* ActorToDefend, float fMaxDistanceFromActor )
{
	static UFunction* pFnStartDefendingActor = NULL;

	if ( ! pFnStartDefendingActor )
		pFnStartDefendingActor = (UFunction*) UObject::GObjObjects()->Data[ 53052 ];

	ASFXAI_Henchman_execStartDefendingActor_Parms StartDefendingActor_Parms;
	StartDefendingActor_Parms.ActorToDefend = ActorToDefend;
	StartDefendingActor_Parms.fMaxDistanceFromActor = fMaxDistanceFromActor;

	this->ProcessEvent ( pFnStartDefendingActor, &StartDefendingActor_Parms, NULL );

	return StartDefendingActor_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.StartFollowingActor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  ActorToFollow                  ( CPF_Parm )

bool ASFXAI_Henchman::StartFollowingActor ( class AActor* ActorToFollow )
{
	static UFunction* pFnStartFollowingActor = NULL;

	if ( ! pFnStartFollowingActor )
		pFnStartFollowingActor = (UFunction*) UObject::GObjObjects()->Data[ 53049 ];

	ASFXAI_Henchman_execStartFollowingActor_Parms StartFollowingActor_Parms;
	StartFollowingActor_Parms.ActorToFollow = ActorToFollow;

	this->ProcessEvent ( pFnStartFollowingActor, &StartFollowingActor_Parms, NULL );

	return StartFollowingActor_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.GetAimLocation
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            EnemyIdx                       ( CPF_Parm )
// struct FVector                 StartLoc                       ( CPF_Parm )

struct FVector ASFXAI_Henchman::GetAimLocation ( int EnemyIdx, struct FVector StartLoc )
{
	static UFunction* pFnGetAimLocation = NULL;

	if ( ! pFnGetAimLocation )
		pFnGetAimLocation = (UFunction*) UObject::GObjObjects()->Data[ 53035 ];

	ASFXAI_Henchman_execGetAimLocation_Parms GetAimLocation_Parms;
	GetAimLocation_Parms.EnemyIdx = EnemyIdx;
	memcpy ( &GetAimLocation_Parms.StartLoc, &StartLoc, 0xC );

	this->ProcessEvent ( pFnGetAimLocation, &GetAimLocation_Parms, NULL );

	return GetAimLocation_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.NotifyPowerDelayFinished
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::NotifyPowerDelayFinished ( )
{
	static UFunction* pFnNotifyPowerDelayFinished = NULL;

	if ( ! pFnNotifyPowerDelayFinished )
		pFnNotifyPowerDelayFinished = (UFunction*) UObject::GObjObjects()->Data[ 53034 ];

	ASFXAI_Henchman_execNotifyPowerDelayFinished_Parms NotifyPowerDelayFinished_Parms;

	this->ProcessEvent ( pFnNotifyPowerDelayFinished, &NotifyPowerDelayFinished_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.NotifySharedCooldownFinished
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::NotifySharedCooldownFinished ( )
{
	static UFunction* pFnNotifySharedCooldownFinished = NULL;

	if ( ! pFnNotifySharedCooldownFinished )
		pFnNotifySharedCooldownFinished = (UFunction*) UObject::GObjObjects()->Data[ 53031 ];

	ASFXAI_Henchman_execNotifySharedCooldownFinished_Parms NotifySharedCooldownFinished_Parms;

	this->ProcessEvent ( pFnNotifySharedCooldownFinished, &NotifySharedCooldownFinished_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.ArePowersCoolingDown
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Henchman::ArePowersCoolingDown ( )
{
	static UFunction* pFnArePowersCoolingDown = NULL;

	if ( ! pFnArePowersCoolingDown )
		pFnArePowersCoolingDown = (UFunction*) UObject::GObjObjects()->Data[ 53029 ];

	ASFXAI_Henchman_execArePowersCoolingDown_Parms ArePowersCoolingDown_Parms;

	this->ProcessEvent ( pFnArePowersCoolingDown, &ArePowersCoolingDown_Parms, NULL );

	return ArePowersCoolingDown_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.NotifyHenchmenLoaded
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::NotifyHenchmenLoaded ( )
{
	static UFunction* pFnNotifyHenchmenLoaded = NULL;

	if ( ! pFnNotifyHenchmenLoaded )
		pFnNotifyHenchmenLoaded = (UFunction*) UObject::GObjObjects()->Data[ 53024 ];

	ASFXAI_Henchman_execNotifyHenchmenLoaded_Parms NotifyHenchmenLoaded_Parms;

	this->ProcessEvent ( pFnNotifyHenchmenLoaded, &NotifyHenchmenLoaded_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.OnEnteringStasis
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASFXAI_Henchman::eventOnEnteringStasis ( )
{
	static UFunction* pFnOnEnteringStasis = NULL;

	if ( ! pFnOnEnteringStasis )
		pFnOnEnteringStasis = (UFunction*) UObject::GObjObjects()->Data[ 53021 ];

	ASFXAI_Henchman_eventOnEnteringStasis_Parms OnEnteringStasis_Parms;

	this->ProcessEvent ( pFnOnEnteringStasis, &OnEnteringStasis_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.ShouldAttack
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Henchman::ShouldAttack ( )
{
	static UFunction* pFnShouldAttack = NULL;

	if ( ! pFnShouldAttack )
		pFnShouldAttack = (UFunction*) UObject::GObjObjects()->Data[ 53018 ];

	ASFXAI_Henchman_execShouldAttack_Parms ShouldAttack_Parms;

	this->ProcessEvent ( pFnShouldAttack, &ShouldAttack_Parms, NULL );

	return ShouldAttack_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.CanUsePowers
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bCheckProfileOption            ( CPF_Parm )

bool ASFXAI_Henchman::CanUsePowers ( unsigned long bCheckProfileOption )
{
	static UFunction* pFnCanUsePowers = NULL;

	if ( ! pFnCanUsePowers )
		pFnCanUsePowers = (UFunction*) UObject::GObjObjects()->Data[ 53001 ];

	ASFXAI_Henchman_execCanUsePowers_Parms CanUsePowers_Parms;
	CanUsePowers_Parms.bCheckProfileOption = bCheckProfileOption;

	this->ProcessEvent ( pFnCanUsePowers, &CanUsePowers_Parms, NULL );

	return CanUsePowers_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.ChooseDefensivePower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmPower                        ( CPF_Parm | CPF_OutParm )

bool ASFXAI_Henchman::ChooseDefensivePower ( struct FName* nmPower )
{
	static UFunction* pFnChooseDefensivePower = NULL;

	if ( ! pFnChooseDefensivePower )
		pFnChooseDefensivePower = (UFunction*) UObject::GObjObjects()->Data[ 52998 ];

	ASFXAI_Henchman_execChooseDefensivePower_Parms ChooseDefensivePower_Parms;

	this->ProcessEvent ( pFnChooseDefensivePower, &ChooseDefensivePower_Parms, NULL );

	if ( nmPower )
		memcpy ( nmPower, &ChooseDefensivePower_Parms.nmPower, 0x8 );

	return ChooseDefensivePower_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.ChooseAttackPowerHelper
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// unsigned long                  bPlayerRequest                 ( CPF_Parm )
// struct FName                   nmPower                        ( CPF_Parm | CPF_OutParm )
// int                            nRequiresAttackTicket          ( CPF_Parm | CPF_OutParm )
// struct FVector                 AttackOrigin                   ( CPF_Parm | CPF_OutParm )

bool ASFXAI_Henchman::ChooseAttackPowerHelper ( class AActor* oTarget, unsigned long bPlayerRequest, struct FName* nmPower, int* nRequiresAttackTicket, struct FVector* AttackOrigin )
{
	static UFunction* pFnChooseAttackPowerHelper = NULL;

	if ( ! pFnChooseAttackPowerHelper )
		pFnChooseAttackPowerHelper = (UFunction*) UObject::GObjObjects()->Data[ 52991 ];

	ASFXAI_Henchman_execChooseAttackPowerHelper_Parms ChooseAttackPowerHelper_Parms;
	ChooseAttackPowerHelper_Parms.oTarget = oTarget;
	ChooseAttackPowerHelper_Parms.bPlayerRequest = bPlayerRequest;

	this->ProcessEvent ( pFnChooseAttackPowerHelper, &ChooseAttackPowerHelper_Parms, NULL );

	if ( nmPower )
		memcpy ( nmPower, &ChooseAttackPowerHelper_Parms.nmPower, 0x8 );

	if ( nRequiresAttackTicket )
		*nRequiresAttackTicket = ChooseAttackPowerHelper_Parms.nRequiresAttackTicket;

	if ( AttackOrigin )
		memcpy ( AttackOrigin, &ChooseAttackPowerHelper_Parms.AttackOrigin, 0xC );

	return ChooseAttackPowerHelper_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.ChooseAttackPower
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// struct FName                   nmPower                        ( CPF_Parm | CPF_OutParm )
// int                            nRequiresAttackTicket          ( CPF_Parm | CPF_OutParm )
// struct FVector                 AttackOrigin                   ( CPF_Parm | CPF_OutParm )

bool ASFXAI_Henchman::ChooseAttackPower ( class AActor* oTarget, struct FName* nmPower, int* nRequiresAttackTicket, struct FVector* AttackOrigin )
{
	static UFunction* pFnChooseAttackPower = NULL;

	if ( ! pFnChooseAttackPower )
		pFnChooseAttackPower = (UFunction*) UObject::GObjObjects()->Data[ 52985 ];

	ASFXAI_Henchman_execChooseAttackPower_Parms ChooseAttackPower_Parms;
	ChooseAttackPower_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnChooseAttackPower, &ChooseAttackPower_Parms, NULL );

	if ( nmPower )
		memcpy ( nmPower, &ChooseAttackPower_Parms.nmPower, 0x8 );

	if ( nRequiresAttackTicket )
		*nRequiresAttackTicket = ChooseAttackPower_Parms.nRequiresAttackTicket;

	if ( AttackOrigin )
		memcpy ( AttackOrigin, &ChooseAttackPower_Parms.AttackOrigin, 0xC );

	return ChooseAttackPower_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.RespondToBump
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool ASFXAI_Henchman::RespondToBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnRespondToBump = NULL;

	if ( ! pFnRespondToBump )
		pFnRespondToBump = (UFunction*) UObject::GObjObjects()->Data[ 52965 ];

	ASFXAI_Henchman_execRespondToBump_Parms RespondToBump_Parms;
	RespondToBump_Parms.Other = Other;
	memcpy ( &RespondToBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnRespondToBump, &RespondToBump_Parms, NULL );

	return RespondToBump_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.NotifyBump
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool ASFXAI_Henchman::eventNotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 52961 ];

	ASFXAI_Henchman_eventNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.WantsToRun
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDistance                      ( CPF_Parm )

bool ASFXAI_Henchman::WantsToRun ( float fDistance )
{
	static UFunction* pFnWantsToRun = NULL;

	if ( ! pFnWantsToRun )
		pFnWantsToRun = (UFunction*) UObject::GObjObjects()->Data[ 52940 ];

	ASFXAI_Henchman_execWantsToRun_Parms WantsToRun_Parms;
	WantsToRun_Parms.fDistance = fDistance;

	this->ProcessEvent ( pFnWantsToRun, &WantsToRun_Parms, NULL );

	return WantsToRun_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.SetSquadIntoCombat
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::SetSquadIntoCombat ( )
{
	static UFunction* pFnSetSquadIntoCombat = NULL;

	if ( ! pFnSetSquadIntoCombat )
		pFnSetSquadIntoCombat = (UFunction*) UObject::GObjObjects()->Data[ 52938 ];

	ASFXAI_Henchman_execSetSquadIntoCombat_Parms SetSquadIntoCombat_Parms;

	this->ProcessEvent ( pFnSetSquadIntoCombat, &SetSquadIntoCombat_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.IsInCombat
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Henchman::IsInCombat ( )
{
	static UFunction* pFnIsInCombat = NULL;

	if ( ! pFnIsInCombat )
		pFnIsInCombat = (UFunction*) UObject::GObjObjects()->Data[ 52936 ];

	ASFXAI_Henchman_execIsInCombat_Parms IsInCombat_Parms;

	this->ProcessEvent ( pFnIsInCombat, &IsInCombat_Parms, NULL );

	return IsInCombat_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.IsInMoveTo
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Henchman::IsInMoveTo ( )
{
	static UFunction* pFnIsInMoveTo = NULL;

	if ( ! pFnIsInMoveTo )
		pFnIsInMoveTo = (UFunction*) UObject::GObjObjects()->Data[ 52934 ];

	ASFXAI_Henchman_execIsInMoveTo_Parms IsInMoveTo_Parms;

	this->ProcessEvent ( pFnIsInMoveTo, &IsInMoveTo_Parms, NULL );

	return IsInMoveTo_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.ShouldFollowPlayer
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Henchman::ShouldFollowPlayer ( )
{
	static UFunction* pFnShouldFollowPlayer = NULL;

	if ( ! pFnShouldFollowPlayer )
		pFnShouldFollowPlayer = (UFunction*) UObject::GObjObjects()->Data[ 52930 ];

	ASFXAI_Henchman_execShouldFollowPlayer_Parms ShouldFollowPlayer_Parms;

	this->ProcessEvent ( pFnShouldFollowPlayer, &ShouldFollowPlayer_Parms, NULL );

	return ShouldFollowPlayer_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.TeleportToActor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// unsigned long                  bForceTeleport                 ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_Henchman::TeleportToActor ( class AActor* oActor, unsigned long bForceTeleport )
{
	static UFunction* pFnTeleportToActor = NULL;

	if ( ! pFnTeleportToActor )
		pFnTeleportToActor = (UFunction*) UObject::GObjObjects()->Data[ 52925 ];

	ASFXAI_Henchman_execTeleportToActor_Parms TeleportToActor_Parms;
	TeleportToActor_Parms.oActor = oActor;
	TeleportToActor_Parms.bForceTeleport = bForceTeleport;

	this->ProcessEvent ( pFnTeleportToActor, &TeleportToActor_Parms, NULL );

	return TeleportToActor_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.NotifyUnderAttack
// [0x00020002] 
// Parameters infos:
// unsigned long                  bHit                           ( CPF_Parm )

void ASFXAI_Henchman::NotifyUnderAttack ( unsigned long bHit )
{
	static UFunction* pFnNotifyUnderAttack = NULL;

	if ( ! pFnNotifyUnderAttack )
		pFnNotifyUnderAttack = (UFunction*) UObject::GObjObjects()->Data[ 52919 ];

	ASFXAI_Henchman_execNotifyUnderAttack_Parms NotifyUnderAttack_Parms;
	NotifyUnderAttack_Parms.bHit = bHit;

	this->ProcessEvent ( pFnNotifyUnderAttack, &NotifyUnderAttack_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.ResetFarAwayFlag
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::ResetFarAwayFlag ( )
{
	static UFunction* pFnResetFarAwayFlag = NULL;

	if ( ! pFnResetFarAwayFlag )
		pFnResetFarAwayFlag = (UFunction*) UObject::GObjObjects()->Data[ 52918 ];

	ASFXAI_Henchman_execResetFarAwayFlag_Parms ResetFarAwayFlag_Parms;

	this->ProcessEvent ( pFnResetFarAwayFlag, &ResetFarAwayFlag_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.NotifyCoverClaimViolation
// [0x00020102] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AController*             NewClaim                       ( CPF_Parm )
// class ACoverLink*              Link                           ( CPF_Parm )
// int                            SlotIdx                        ( CPF_Parm )

bool ASFXAI_Henchman::NotifyCoverClaimViolation ( class AController* NewClaim, class ACoverLink* Link, int SlotIdx )
{
	static UFunction* pFnNotifyCoverClaimViolation = NULL;

	if ( ! pFnNotifyCoverClaimViolation )
		pFnNotifyCoverClaimViolation = (UFunction*) UObject::GObjObjects()->Data[ 52913 ];

	ASFXAI_Henchman_execNotifyCoverClaimViolation_Parms NotifyCoverClaimViolation_Parms;
	NotifyCoverClaimViolation_Parms.NewClaim = NewClaim;
	NotifyCoverClaimViolation_Parms.Link = Link;
	NotifyCoverClaimViolation_Parms.SlotIdx = SlotIdx;

	this->ProcessEvent ( pFnNotifyCoverClaimViolation, &NotifyCoverClaimViolation_Parms, NULL );

	return NotifyCoverClaimViolation_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.HenchmanMoveToCover
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Henchman::HenchmanMoveToCover ( )
{
	static UFunction* pFnHenchmanMoveToCover = NULL;

	if ( ! pFnHenchmanMoveToCover )
		pFnHenchmanMoveToCover = (UFunction*) UObject::GObjObjects()->Data[ 52909 ];

	ASFXAI_Henchman_execHenchmanMoveToCover_Parms HenchmanMoveToCover_Parms;

	this->ProcessEvent ( pFnHenchmanMoveToCover, &HenchmanMoveToCover_Parms, NULL );

	return HenchmanMoveToCover_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.BioClearCrossLevelReferences
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class ULevel*                  oLevel                         ( CPF_Parm )

void ASFXAI_Henchman::eventBioClearCrossLevelReferences ( class ULevel* oLevel )
{
	static UFunction* pFnBioClearCrossLevelReferences = NULL;

	if ( ! pFnBioClearCrossLevelReferences )
		pFnBioClearCrossLevelReferences = (UFunction*) UObject::GObjObjects()->Data[ 52898 ];

	ASFXAI_Henchman_eventBioClearCrossLevelReferences_Parms BioClearCrossLevelReferences_Parms;
	BioClearCrossLevelReferences_Parms.oLevel = oLevel;

	this->ProcessEvent ( pFnBioClearCrossLevelReferences, &BioClearCrossLevelReferences_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.NotifyChangedWeapon
// [0x00020002] 
// Parameters infos:
// class AWeapon*                 PreviousWeapon                 ( CPF_Parm )
// class AWeapon*                 NewWeapon                      ( CPF_Parm )

void ASFXAI_Henchman::NotifyChangedWeapon ( class AWeapon* PreviousWeapon, class AWeapon* NewWeapon )
{
	static UFunction* pFnNotifyChangedWeapon = NULL;

	if ( ! pFnNotifyChangedWeapon )
		pFnNotifyChangedWeapon = (UFunction*) UObject::GObjObjects()->Data[ 52855 ];

	ASFXAI_Henchman_execNotifyChangedWeapon_Parms NotifyChangedWeapon_Parms;
	NotifyChangedWeapon_Parms.PreviousWeapon = PreviousWeapon;
	NotifyChangedWeapon_Parms.NewWeapon = NewWeapon;

	this->ProcessEvent ( pFnNotifyChangedWeapon, &NotifyChangedWeapon_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.TriggerAttackVocalization
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::TriggerAttackVocalization ( )
{
	static UFunction* pFnTriggerAttackVocalization = NULL;

	if ( ! pFnTriggerAttackVocalization )
		pFnTriggerAttackVocalization = (UFunction*) UObject::GObjObjects()->Data[ 52854 ];

	ASFXAI_Henchman_execTriggerAttackVocalization_Parms TriggerAttackVocalization_Parms;

	this->ProcessEvent ( pFnTriggerAttackVocalization, &TriggerAttackVocalization_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.OutOfWorld
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::OutOfWorld ( )
{
	static UFunction* pFnOutOfWorld = NULL;

	if ( ! pFnOutOfWorld )
		pFnOutOfWorld = (UFunction*) UObject::GObjObjects()->Data[ 52853 ];

	ASFXAI_Henchman_execOutOfWorld_Parms OutOfWorld_Parms;

	this->ProcessEvent ( pFnOutOfWorld, &OutOfWorld_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.GetNextOrder
// [0x00820002] 
// Parameters infos:
// struct FHenchmanOrder          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eOrder                         ( CPF_Parm )

struct FHenchmanOrder ASFXAI_Henchman::GetNextOrder ( unsigned char eOrder )
{
	static UFunction* pFnGetNextOrder = NULL;

	if ( ! pFnGetNextOrder )
		pFnGetNextOrder = (UFunction*) UObject::GObjObjects()->Data[ 52848 ];

	ASFXAI_Henchman_execGetNextOrder_Parms GetNextOrder_Parms;
	GetNextOrder_Parms.eOrder = eOrder;

	this->ProcessEvent ( pFnGetNextOrder, &GetNextOrder_Parms, NULL );

	return GetNextOrder_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.ExecuteOrders
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::ExecuteOrders ( )
{
	static UFunction* pFnExecuteOrders = NULL;

	if ( ! pFnExecuteOrders )
		pFnExecuteOrders = (UFunction*) UObject::GObjObjects()->Data[ 52847 ];

	ASFXAI_Henchman_execExecuteOrders_Parms ExecuteOrders_Parms;

	this->ProcessEvent ( pFnExecuteOrders, &ExecuteOrders_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.RemoveOldSwitchWeaponOrders
// [0x00020002] 
// Parameters infos:

void ASFXAI_Henchman::RemoveOldSwitchWeaponOrders ( )
{
	static UFunction* pFnRemoveOldSwitchWeaponOrders = NULL;

	if ( ! pFnRemoveOldSwitchWeaponOrders )
		pFnRemoveOldSwitchWeaponOrders = (UFunction*) UObject::GObjObjects()->Data[ 52845 ];

	ASFXAI_Henchman_execRemoveOldSwitchWeaponOrders_Parms RemoveOldSwitchWeaponOrders_Parms;

	this->ProcessEvent ( pFnRemoveOldSwitchWeaponOrders, &RemoveOldSwitchWeaponOrders_Parms, NULL );
};

// Function SFXGame.SFXAI_Henchman.CanStartImmediateOrder
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Henchman::CanStartImmediateOrder ( )
{
	static UFunction* pFnCanStartImmediateOrder = NULL;

	if ( ! pFnCanStartImmediateOrder )
		pFnCanStartImmediateOrder = (UFunction*) UObject::GObjObjects()->Data[ 52842 ];

	ASFXAI_Henchman_execCanStartImmediateOrder_Parms CanStartImmediateOrder_Parms;

	this->ProcessEvent ( pFnCanStartImmediateOrder, &CanStartImmediateOrder_Parms, NULL );

	return CanStartImmediateOrder_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.CanQueueOrder
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool ASFXAI_Henchman::CanQueueOrder ( )
{
	static UFunction* pFnCanQueueOrder = NULL;

	if ( ! pFnCanQueueOrder )
		pFnCanQueueOrder = (UFunction*) UObject::GObjObjects()->Data[ 52839 ];

	ASFXAI_Henchman_execCanQueueOrder_Parms CanQueueOrder_Parms;

	this->ProcessEvent ( pFnCanQueueOrder, &CanQueueOrder_Parms, NULL );

	return CanQueueOrder_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.CancelOrder
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eOrder                         ( CPF_Parm )
// struct FName                   nmPower                        ( CPF_Parm )

bool ASFXAI_Henchman::CancelOrder ( unsigned char eOrder, struct FName nmPower )
{
	static UFunction* pFnCancelOrder = NULL;

	if ( ! pFnCancelOrder )
		pFnCancelOrder = (UFunction*) UObject::GObjObjects()->Data[ 52834 ];

	ASFXAI_Henchman_execCancelOrder_Parms CancelOrder_Parms;
	CancelOrder_Parms.eOrder = eOrder;
	memcpy ( &CancelOrder_Parms.nmPower, &nmPower, 0x8 );

	this->ProcessEvent ( pFnCancelOrder, &CancelOrder_Parms, NULL );

	return CancelOrder_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.GetInstantOrderCount
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int ASFXAI_Henchman::GetInstantOrderCount ( )
{
	static UFunction* pFnGetInstantOrderCount = NULL;

	if ( ! pFnGetInstantOrderCount )
		pFnGetInstantOrderCount = (UFunction*) UObject::GObjObjects()->Data[ 52830 ];

	ASFXAI_Henchman_execGetInstantOrderCount_Parms GetInstantOrderCount_Parms;

	this->ProcessEvent ( pFnGetInstantOrderCount, &GetInstantOrderCount_Parms, NULL );

	return GetInstantOrderCount_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Henchman.AddOrder
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  eOrder                         ( CPF_Parm )
// class AActor*                  oTargetActor                   ( CPF_Parm )
// struct FVector                 vTargetLocation                ( CPF_Parm )
// struct FName                   nmPower                        ( CPF_Parm )
// class ASFXWeapon*              oWeapon                        ( CPF_Parm )
// int                            nQueue                         ( CPF_OptionalParm | CPF_Parm )

bool ASFXAI_Henchman::AddOrder ( unsigned char eOrder, class AActor* oTargetActor, struct FVector vTargetLocation, struct FName nmPower, class ASFXWeapon* oWeapon, int nQueue )
{
	static UFunction* pFnAddOrder = NULL;

	if ( ! pFnAddOrder )
		pFnAddOrder = (UFunction*) UObject::GObjObjects()->Data[ 52818 ];

	ASFXAI_Henchman_execAddOrder_Parms AddOrder_Parms;
	AddOrder_Parms.eOrder = eOrder;
	AddOrder_Parms.oTargetActor = oTargetActor;
	memcpy ( &AddOrder_Parms.vTargetLocation, &vTargetLocation, 0xC );
	memcpy ( &AddOrder_Parms.nmPower, &nmPower, 0x8 );
	AddOrder_Parms.oWeapon = oWeapon;
	AddOrder_Parms.nQueue = nQueue;

	this->ProcessEvent ( pFnAddOrder, &AddOrder_Parms, NULL );

	return AddOrder_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.AddNotificationOneParameter
// [0x00880002] 
// Parameters infos:
// struct FSFXNotificationData    oNoteData                      ( CPF_Parm | CPF_NeedCtorLink )
// int                            nParam1                        ( CPF_Parm )

void UBioHintSystem::AddNotificationOneParameter ( struct FSFXNotificationData oNoteData, int nParam1 )
{
	static UFunction* pFnAddNotificationOneParameter = NULL;

	if ( ! pFnAddNotificationOneParameter )
		pFnAddNotificationOneParameter = (UFunction*) UObject::GObjObjects()->Data[ 37740 ];

	UBioHintSystem_execAddNotificationOneParameter_Parms AddNotificationOneParameter_Parms;
	memcpy ( &AddNotificationOneParameter_Parms.oNoteData, &oNoteData, 0x4C );
	AddNotificationOneParameter_Parms.nParam1 = nParam1;

	this->ProcessEvent ( pFnAddNotificationOneParameter, &AddNotificationOneParameter_Parms, NULL );
};

// Function SFXGame.BioHintSystem.JournalUpdate
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void UBioHintSystem::eventJournalUpdate ( )
{
	static UFunction* pFnJournalUpdate = NULL;

	if ( ! pFnJournalUpdate )
		pFnJournalUpdate = (UFunction*) UObject::GObjObjects()->Data[ 37736 ];

	UBioHintSystem_eventJournalUpdate_Parms JournalUpdate_Parms;

	this->ProcessEvent ( pFnJournalUpdate, &JournalUpdate_Parms, NULL );
};

// Function SFXGame.BioHintSystem.CodexUpdate
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void UBioHintSystem::eventCodexUpdate ( )
{
	static UFunction* pFnCodexUpdate = NULL;

	if ( ! pFnCodexUpdate )
		pFnCodexUpdate = (UFunction*) UObject::GObjObjects()->Data[ 37731 ];

	UBioHintSystem_eventCodexUpdate_Parms CodexUpdate_Parms;

	this->ProcessEvent ( pFnCodexUpdate, &CodexUpdate_Parms, NULL );
};

// Function SFXGame.BioHintSystem.AddNotification_HeavyAmmoFull
// [0x00020002] 
// Parameters infos:

void UBioHintSystem::AddNotification_HeavyAmmoFull ( )
{
	static UFunction* pFnAddNotification_HeavyAmmoFull = NULL;

	if ( ! pFnAddNotification_HeavyAmmoFull )
		pFnAddNotification_HeavyAmmoFull = (UFunction*) UObject::GObjObjects()->Data[ 37730 ];

	UBioHintSystem_execAddNotification_HeavyAmmoFull_Parms AddNotification_HeavyAmmoFull_Parms;

	this->ProcessEvent ( pFnAddNotification_HeavyAmmoFull, &AddNotification_HeavyAmmoFull_Parms, NULL );
};

// Function SFXGame.BioHintSystem.AddNotification_MediGelFull
// [0x00020002] 
// Parameters infos:

void UBioHintSystem::AddNotification_MediGelFull ( )
{
	static UFunction* pFnAddNotification_MediGelFull = NULL;

	if ( ! pFnAddNotification_MediGelFull )
		pFnAddNotification_MediGelFull = (UFunction*) UObject::GObjObjects()->Data[ 37729 ];

	UBioHintSystem_execAddNotification_MediGelFull_Parms AddNotification_MediGelFull_Parms;

	this->ProcessEvent ( pFnAddNotification_MediGelFull, &AddNotification_MediGelFull_Parms, NULL );
};

// Function SFXGame.BioHintSystem.AddNotification_SalvageRecovery
// [0x00020002] 
// Parameters infos:
// int                            Amount                         ( CPF_Parm )

void UBioHintSystem::AddNotification_SalvageRecovery ( int Amount )
{
	static UFunction* pFnAddNotification_SalvageRecovery = NULL;

	if ( ! pFnAddNotification_SalvageRecovery )
		pFnAddNotification_SalvageRecovery = (UFunction*) UObject::GObjObjects()->Data[ 37727 ];

	UBioHintSystem_execAddNotification_SalvageRecovery_Parms AddNotification_SalvageRecovery_Parms;
	AddNotification_SalvageRecovery_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddNotification_SalvageRecovery, &AddNotification_SalvageRecovery_Parms, NULL );
};

// Function SFXGame.BioHintSystem.AddNotification_ProbeRecovery
// [0x00020002] 
// Parameters infos:
// int                            Amount                         ( CPF_Parm )

void UBioHintSystem::AddNotification_ProbeRecovery ( int Amount )
{
	static UFunction* pFnAddNotification_ProbeRecovery = NULL;

	if ( ! pFnAddNotification_ProbeRecovery )
		pFnAddNotification_ProbeRecovery = (UFunction*) UObject::GObjObjects()->Data[ 37725 ];

	UBioHintSystem_execAddNotification_ProbeRecovery_Parms AddNotification_ProbeRecovery_Parms;
	AddNotification_ProbeRecovery_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddNotification_ProbeRecovery, &AddNotification_ProbeRecovery_Parms, NULL );
};

// Function SFXGame.BioHintSystem.AddNotification_LevelUp
// [0x00020002] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void UBioHintSystem::AddNotification_LevelUp ( int Level )
{
	static UFunction* pFnAddNotification_LevelUp = NULL;

	if ( ! pFnAddNotification_LevelUp )
		pFnAddNotification_LevelUp = (UFunction*) UObject::GObjObjects()->Data[ 37723 ];

	UBioHintSystem_execAddNotification_LevelUp_Parms AddNotification_LevelUp_Parms;
	AddNotification_LevelUp_Parms.Level = Level;

	this->ProcessEvent ( pFnAddNotification_LevelUp, &AddNotification_LevelUp_Parms, NULL );
};

// Function SFXGame.BioHintSystem.AddNotification_XP
// [0x00020002] 
// Parameters infos:
// int                            Amount                         ( CPF_Parm )

void UBioHintSystem::AddNotification_XP ( int Amount )
{
	static UFunction* pFnAddNotification_XP = NULL;

	if ( ! pFnAddNotification_XP )
		pFnAddNotification_XP = (UFunction*) UObject::GObjObjects()->Data[ 37721 ];

	UBioHintSystem_execAddNotification_XP_Parms AddNotification_XP_Parms;
	AddNotification_XP_Parms.Amount = Amount;

	this->ProcessEvent ( pFnAddNotification_XP, &AddNotification_XP_Parms, NULL );
};

// Function SFXGame.BioHintSystem.AddNotification_TechUnlocked
// [0x00820002] 
// Parameters infos:
// struct FString                 sTitle                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sName                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )
// class UTexture*                oImage                         ( CPF_OptionalParm | CPF_Parm )

void UBioHintSystem::AddNotification_TechUnlocked ( struct FString sTitle, struct FString sName, struct FString sMessage, class UTexture* oImage )
{
	static UFunction* pFnAddNotification_TechUnlocked = NULL;

	if ( ! pFnAddNotification_TechUnlocked )
		pFnAddNotification_TechUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 37715 ];

	UBioHintSystem_execAddNotification_TechUnlocked_Parms AddNotification_TechUnlocked_Parms;
	memcpy ( &AddNotification_TechUnlocked_Parms.sTitle, &sTitle, 0xC );
	memcpy ( &AddNotification_TechUnlocked_Parms.sName, &sName, 0xC );
	memcpy ( &AddNotification_TechUnlocked_Parms.sMessage, &sMessage, 0xC );
	AddNotification_TechUnlocked_Parms.oImage = oImage;

	this->ProcessEvent ( pFnAddNotification_TechUnlocked, &AddNotification_TechUnlocked_Parms, NULL );
};

// Function SFXGame.BioHintSystem.AddNotification_Tech
// [0x00820002] 
// Parameters infos:
// struct FString                 sTitle                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sName                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )
// class UTexture*                oImage                         ( CPF_OptionalParm | CPF_Parm )

void UBioHintSystem::AddNotification_Tech ( struct FString sTitle, struct FString sName, struct FString sMessage, class UTexture* oImage )
{
	static UFunction* pFnAddNotification_Tech = NULL;

	if ( ! pFnAddNotification_Tech )
		pFnAddNotification_Tech = (UFunction*) UObject::GObjObjects()->Data[ 37709 ];

	UBioHintSystem_execAddNotification_Tech_Parms AddNotification_Tech_Parms;
	memcpy ( &AddNotification_Tech_Parms.sTitle, &sTitle, 0xC );
	memcpy ( &AddNotification_Tech_Parms.sName, &sName, 0xC );
	memcpy ( &AddNotification_Tech_Parms.sMessage, &sMessage, 0xC );
	AddNotification_Tech_Parms.oImage = oImage;

	this->ProcessEvent ( pFnAddNotification_Tech, &AddNotification_Tech_Parms, NULL );
};

// Function SFXGame.BioHintSystem.AddNotification_Weapon
// [0x00820002] 
// Parameters infos:
// struct FString                 sTitle                         ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sName                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )
// class UTexture*                oImage                         ( CPF_OptionalParm | CPF_Parm )

void UBioHintSystem::AddNotification_Weapon ( struct FString sTitle, struct FString sName, struct FString sMessage, class UTexture* oImage )
{
	static UFunction* pFnAddNotification_Weapon = NULL;

	if ( ! pFnAddNotification_Weapon )
		pFnAddNotification_Weapon = (UFunction*) UObject::GObjObjects()->Data[ 37703 ];

	UBioHintSystem_execAddNotification_Weapon_Parms AddNotification_Weapon_Parms;
	memcpy ( &AddNotification_Weapon_Parms.sTitle, &sTitle, 0xC );
	memcpy ( &AddNotification_Weapon_Parms.sName, &sName, 0xC );
	memcpy ( &AddNotification_Weapon_Parms.sMessage, &sMessage, 0xC );
	AddNotification_Weapon_Parms.oImage = oImage;

	this->ProcessEvent ( pFnAddNotification_Weapon, &AddNotification_Weapon_Parms, NULL );
};

// Function SFXGame.BioHintSystem.AddNotification_ResearchRecovered
// [0x00820002] 
// Parameters infos:
// struct FString                 sName                          ( CPF_Parm | CPF_NeedCtorLink )
// struct FString                 sMessage                       ( CPF_Parm | CPF_NeedCtorLink )
// class UTexture*                oImage                         ( CPF_OptionalParm | CPF_Parm )

void UBioHintSystem::AddNotification_ResearchRecovered ( struct FString sName, struct FString sMessage, class UTexture* oImage )
{
	static UFunction* pFnAddNotification_ResearchRecovered = NULL;

	if ( ! pFnAddNotification_ResearchRecovered )
		pFnAddNotification_ResearchRecovered = (UFunction*) UObject::GObjObjects()->Data[ 37697 ];

	UBioHintSystem_execAddNotification_ResearchRecovered_Parms AddNotification_ResearchRecovered_Parms;
	memcpy ( &AddNotification_ResearchRecovered_Parms.sName, &sName, 0xC );
	memcpy ( &AddNotification_ResearchRecovered_Parms.sMessage, &sMessage, 0xC );
	AddNotification_ResearchRecovered_Parms.oImage = oImage;

	this->ProcessEvent ( pFnAddNotification_ResearchRecovered, &AddNotification_ResearchRecovered_Parms, NULL );
};

// Function SFXGame.BioHintSystem.PowerCast
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmContext                      ( CPF_Parm | CPF_OutParm )

bool UBioHintSystem::PowerCast ( struct FName* nmContext )
{
	static UFunction* pFnPowerCast = NULL;

	if ( ! pFnPowerCast )
		pFnPowerCast = (UFunction*) UObject::GObjObjects()->Data[ 37694 ];

	UBioHintSystem_execPowerCast_Parms PowerCast_Parms;

	this->ProcessEvent ( pFnPowerCast, &PowerCast_Parms, NULL );

	if ( nmContext )
		memcpy ( nmContext, &PowerCast_Parms.nmContext, 0x8 );

	return PowerCast_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.UpdateWeaponWheelTutorialHint
// [0x00820002] 
// Parameters infos:
// int                            nWeaponType                    ( CPF_Parm )

void UBioHintSystem::UpdateWeaponWheelTutorialHint ( int nWeaponType )
{
	static UFunction* pFnUpdateWeaponWheelTutorialHint = NULL;

	if ( ! pFnUpdateWeaponWheelTutorialHint )
		pFnUpdateWeaponWheelTutorialHint = (UFunction*) UObject::GObjObjects()->Data[ 37688 ];

	UBioHintSystem_execUpdateWeaponWheelTutorialHint_Parms UpdateWeaponWheelTutorialHint_Parms;
	UpdateWeaponWheelTutorialHint_Parms.nWeaponType = nWeaponType;

	this->ProcessEvent ( pFnUpdateWeaponWheelTutorialHint, &UpdateWeaponWheelTutorialHint_Parms, NULL );
};

// Function SFXGame.BioHintSystem.UpdatePowerWheelTutorialHint
// [0x00820002] 
// Parameters infos:
// struct FName                   nmPower                        ( CPF_Parm )

void UBioHintSystem::UpdatePowerWheelTutorialHint ( struct FName nmPower )
{
	static UFunction* pFnUpdatePowerWheelTutorialHint = NULL;

	if ( ! pFnUpdatePowerWheelTutorialHint )
		pFnUpdatePowerWheelTutorialHint = (UFunction*) UObject::GObjObjects()->Data[ 37681 ];

	UBioHintSystem_execUpdatePowerWheelTutorialHint_Parms UpdatePowerWheelTutorialHint_Parms;
	memcpy ( &UpdatePowerWheelTutorialHint_Parms.nmPower, &nmPower, 0x8 );

	this->ProcessEvent ( pFnUpdatePowerWheelTutorialHint, &UpdatePowerWheelTutorialHint_Parms, NULL );
};

// Function SFXGame.BioHintSystem.GeneratePowerWheelTutorialHint
// [0x00820002] 
// Parameters infos:
// unsigned long                  bPowerWheel                    ( CPF_Parm )
// unsigned long                  bWeaponWheel                   ( CPF_Parm )

void UBioHintSystem::GeneratePowerWheelTutorialHint ( unsigned long bPowerWheel, unsigned long bWeaponWheel )
{
	static UFunction* pFnGeneratePowerWheelTutorialHint = NULL;

	if ( ! pFnGeneratePowerWheelTutorialHint )
		pFnGeneratePowerWheelTutorialHint = (UFunction*) UObject::GObjObjects()->Data[ 37674 ];

	UBioHintSystem_execGeneratePowerWheelTutorialHint_Parms GeneratePowerWheelTutorialHint_Parms;
	GeneratePowerWheelTutorialHint_Parms.bPowerWheel = bPowerWheel;
	GeneratePowerWheelTutorialHint_Parms.bWeaponWheel = bWeaponWheel;

	this->ProcessEvent ( pFnGeneratePowerWheelTutorialHint, &GeneratePowerWheelTutorialHint_Parms, NULL );
};

// Function SFXGame.BioHintSystem.FindHintDefinition
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   nmHint                         ( CPF_Parm )
// struct FHintDefinition         oHint                          ( CPF_Parm | CPF_OutParm )

bool UBioHintSystem::FindHintDefinition ( struct FName nmHint, struct FHintDefinition* oHint )
{
	static UFunction* pFnFindHintDefinition = NULL;

	if ( ! pFnFindHintDefinition )
		pFnFindHintDefinition = (UFunction*) UObject::GObjObjects()->Data[ 37668 ];

	UBioHintSystem_execFindHintDefinition_Parms FindHintDefinition_Parms;
	memcpy ( &FindHintDefinition_Parms.nmHint, &nmHint, 0x8 );

	this->ProcessEvent ( pFnFindHintDefinition, &FindHintDefinition_Parms, NULL );

	if ( oHint )
		memcpy ( oHint, &FindHintDefinition_Parms.oHint, 0x40 );

	return FindHintDefinition_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.EnableWeaponTutorialHint
// [0x00020002] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )

void UBioHintSystem::EnableWeaponTutorialHint ( unsigned long bOn )
{
	static UFunction* pFnEnableWeaponTutorialHint = NULL;

	if ( ! pFnEnableWeaponTutorialHint )
		pFnEnableWeaponTutorialHint = (UFunction*) UObject::GObjObjects()->Data[ 37666 ];

	UBioHintSystem_execEnableWeaponTutorialHint_Parms EnableWeaponTutorialHint_Parms;
	EnableWeaponTutorialHint_Parms.bOn = bOn;

	this->ProcessEvent ( pFnEnableWeaponTutorialHint, &EnableWeaponTutorialHint_Parms, NULL );
};

// Function SFXGame.BioHintSystem.EnablePowerTutorialHint
// [0x00020002] 
// Parameters infos:
// unsigned long                  bOn                            ( CPF_Parm )
// unsigned char                  eTutType                       ( CPF_Parm )

void UBioHintSystem::EnablePowerTutorialHint ( unsigned long bOn, unsigned char eTutType )
{
	static UFunction* pFnEnablePowerTutorialHint = NULL;

	if ( ! pFnEnablePowerTutorialHint )
		pFnEnablePowerTutorialHint = (UFunction*) UObject::GObjObjects()->Data[ 37663 ];

	UBioHintSystem_execEnablePowerTutorialHint_Parms EnablePowerTutorialHint_Parms;
	EnablePowerTutorialHint_Parms.bOn = bOn;
	EnablePowerTutorialHint_Parms.eTutType = eTutType;

	this->ProcessEvent ( pFnEnablePowerTutorialHint, &EnablePowerTutorialHint_Parms, NULL );
};

// Function SFXGame.BioHintSystem.UseAmmoPowerHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::UseAmmoPowerHint ( )
{
	static UFunction* pFnUseAmmoPowerHint = NULL;

	if ( ! pFnUseAmmoPowerHint )
		pFnUseAmmoPowerHint = (UFunction*) UObject::GObjObjects()->Data[ 37653 ];

	UBioHintSystem_execUseAmmoPowerHint_Parms UseAmmoPowerHint_Parms;

	this->ProcessEvent ( pFnUseAmmoPowerHint, &UseAmmoPowerHint_Parms, NULL );

	return UseAmmoPowerHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.FindLandingSite
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::FindLandingSite ( )
{
	static UFunction* pFnFindLandingSite = NULL;

	if ( ! pFnFindLandingSite )
		pFnFindLandingSite = (UFunction*) UObject::GObjObjects()->Data[ 37643 ];

	UBioHintSystem_execFindLandingSite_Parms FindLandingSite_Parms;

	this->ProcessEvent ( pFnFindLandingSite, &FindLandingSite_Parms, NULL );

	return FindLandingSite_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.LaunchProbeHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::LaunchProbeHint ( )
{
	static UFunction* pFnLaunchProbeHint = NULL;

	if ( ! pFnLaunchProbeHint )
		pFnLaunchProbeHint = (UFunction*) UObject::GObjObjects()->Data[ 37631 ];

	UBioHintSystem_execLaunchProbeHint_Parms LaunchProbeHint_Parms;

	this->ProcessEvent ( pFnLaunchProbeHint, &LaunchProbeHint_Parms, NULL );

	return LaunchProbeHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.PlanetScanHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::PlanetScanHint ( )
{
	static UFunction* pFnPlanetScanHint = NULL;

	if ( ! pFnPlanetScanHint )
		pFnPlanetScanHint = (UFunction*) UObject::GObjObjects()->Data[ 37623 ];

	UBioHintSystem_execPlanetScanHint_Parms PlanetScanHint_Parms;

	this->ProcessEvent ( pFnPlanetScanHint, &PlanetScanHint_Parms, NULL );

	return PlanetScanHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.CooldownHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::CooldownHint ( )
{
	static UFunction* pFnCooldownHint = NULL;

	if ( ! pFnCooldownHint )
		pFnCooldownHint = (UFunction*) UObject::GObjObjects()->Data[ 37620 ];

	UBioHintSystem_execCooldownHint_Parms CooldownHint_Parms;

	this->ProcessEvent ( pFnCooldownHint, &CooldownHint_Parms, NULL );

	return CooldownHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.LevelUpHint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::LevelUpHint ( )
{
	static UFunction* pFnLevelUpHint = NULL;

	if ( ! pFnLevelUpHint )
		pFnLevelUpHint = (UFunction*) UObject::GObjObjects()->Data[ 37618 ];

	UBioHintSystem_execLevelUpHint_Parms LevelUpHint_Parms;

	this->ProcessEvent ( pFnLevelUpHint, &LevelUpHint_Parms, NULL );

	return LevelUpHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.HackGameHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::HackGameHint ( )
{
	static UFunction* pFnHackGameHint = NULL;

	if ( ! pFnHackGameHint )
		pFnHackGameHint = (UFunction*) UObject::GObjObjects()->Data[ 37612 ];

	UBioHintSystem_execHackGameHint_Parms HackGameHint_Parms;

	this->ProcessEvent ( pFnHackGameHint, &HackGameHint_Parms, NULL );

	return HackGameHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.BypassGameHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::BypassGameHint ( )
{
	static UFunction* pFnBypassGameHint = NULL;

	if ( ! pFnBypassGameHint )
		pFnBypassGameHint = (UFunction*) UObject::GObjObjects()->Data[ 37606 ];

	UBioHintSystem_execBypassGameHint_Parms BypassGameHint_Parms;

	this->ProcessEvent ( pFnBypassGameHint, &BypassGameHint_Parms, NULL );

	return BypassGameHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.ResurrectHint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::ResurrectHint ( )
{
	static UFunction* pFnResurrectHint = NULL;

	if ( ! pFnResurrectHint )
		pFnResurrectHint = (UFunction*) UObject::GObjObjects()->Data[ 37604 ];

	UBioHintSystem_execResurrectHint_Parms ResurrectHint_Parms;

	this->ProcessEvent ( pFnResurrectHint, &ResurrectHint_Parms, NULL );

	return ResurrectHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.MeleeHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::MeleeHint ( )
{
	static UFunction* pFnMeleeHint = NULL;

	if ( ! pFnMeleeHint )
		pFnMeleeHint = (UFunction*) UObject::GObjObjects()->Data[ 37599 ];

	UBioHintSystem_execMeleeHint_Parms MeleeHint_Parms;

	this->ProcessEvent ( pFnMeleeHint, &MeleeHint_Parms, NULL );

	return MeleeHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.ClassMappedPowerHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::ClassMappedPowerHint ( )
{
	static UFunction* pFnClassMappedPowerHint = NULL;

	if ( ! pFnClassMappedPowerHint )
		pFnClassMappedPowerHint = (UFunction*) UObject::GObjObjects()->Data[ 37593 ];

	UBioHintSystem_execClassMappedPowerHint_Parms ClassMappedPowerHint_Parms;

	this->ProcessEvent ( pFnClassMappedPowerHint, &ClassMappedPowerHint_Parms, NULL );

	return ClassMappedPowerHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.RightMappedPowerHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::RightMappedPowerHint ( )
{
	static UFunction* pFnRightMappedPowerHint = NULL;

	if ( ! pFnRightMappedPowerHint )
		pFnRightMappedPowerHint = (UFunction*) UObject::GObjObjects()->Data[ 37587 ];

	UBioHintSystem_execRightMappedPowerHint_Parms RightMappedPowerHint_Parms;

	this->ProcessEvent ( pFnRightMappedPowerHint, &RightMappedPowerHint_Parms, NULL );

	return RightMappedPowerHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.LeftMappedPowerHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::LeftMappedPowerHint ( )
{
	static UFunction* pFnLeftMappedPowerHint = NULL;

	if ( ! pFnLeftMappedPowerHint )
		pFnLeftMappedPowerHint = (UFunction*) UObject::GObjObjects()->Data[ 37581 ];

	UBioHintSystem_execLeftMappedPowerHint_Parms LeftMappedPowerHint_Parms;

	this->ProcessEvent ( pFnLeftMappedPowerHint, &LeftMappedPowerHint_Parms, NULL );

	return LeftMappedPowerHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.PCMappedPowerHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::PCMappedPowerHint ( )
{
	static UFunction* pFnPCMappedPowerHint = NULL;

	if ( ! pFnPCMappedPowerHint )
		pFnPCMappedPowerHint = (UFunction*) UObject::GObjObjects()->Data[ 37577 ];

	UBioHintSystem_execPCMappedPowerHint_Parms PCMappedPowerHint_Parms;

	this->ProcessEvent ( pFnPCMappedPowerHint, &PCMappedPowerHint_Parms, NULL );

	return PCMappedPowerHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.ZoomHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::ZoomHint ( )
{
	static UFunction* pFnZoomHint = NULL;

	if ( ! pFnZoomHint )
		pFnZoomHint = (UFunction*) UObject::GObjObjects()->Data[ 37570 ];

	UBioHintSystem_execZoomHint_Parms ZoomHint_Parms;

	this->ProcessEvent ( pFnZoomHint, &ZoomHint_Parms, NULL );

	return ZoomHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.TakeCoverHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::TakeCoverHint ( )
{
	static UFunction* pFnTakeCoverHint = NULL;

	if ( ! pFnTakeCoverHint )
		pFnTakeCoverHint = (UFunction*) UObject::GObjObjects()->Data[ 37566 ];

	UBioHintSystem_execTakeCoverHint_Parms TakeCoverHint_Parms;

	this->ProcessEvent ( pFnTakeCoverHint, &TakeCoverHint_Parms, NULL );

	return TakeCoverHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.ManualReloadHint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioHintSystem::ManualReloadHint ( )
{
	static UFunction* pFnManualReloadHint = NULL;

	if ( ! pFnManualReloadHint )
		pFnManualReloadHint = (UFunction*) UObject::GObjObjects()->Data[ 37561 ];

	UBioHintSystem_execManualReloadHint_Parms ManualReloadHint_Parms;

	this->ProcessEvent ( pFnManualReloadHint, &ManualReloadHint_Parms, NULL );

	return ManualReloadHint_Parms.ReturnValue;
};

// Function SFXGame.BioHintSystem.CacheCurrentState
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void UBioHintSystem::eventCacheCurrentState ( )
{
	static UFunction* pFnCacheCurrentState = NULL;

	if ( ! pFnCacheCurrentState )
		pFnCacheCurrentState = (UFunction*) UObject::GObjObjects()->Data[ 37545 ];

	UBioHintSystem_eventCacheCurrentState_Parms CacheCurrentState_Parms;

	this->ProcessEvent ( pFnCacheCurrentState, &CacheCurrentState_Parms, NULL );
};

// Function SFXGame.BioConsequenceFunctions.GrantBonusTalents
// [0x00022002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )
// int                            bonusIdentifier                ( CPF_Parm )

void UBioConsequenceFunctions::GrantBonusTalents ( class ABioWorldInfo* WorldInfo, int bonusIdentifier )
{
	static UFunction* pFnGrantBonusTalents = NULL;

	if ( ! pFnGrantBonusTalents )
		pFnGrantBonusTalents = (UFunction*) UObject::GObjObjects()->Data[ 34491 ];

	UBioConsequenceFunctions_execGrantBonusTalents_Parms GrantBonusTalents_Parms;
	GrantBonusTalents_Parms.WorldInfo = WorldInfo;
	GrantBonusTalents_Parms.bonusIdentifier = bonusIdentifier;

	this->ProcessEvent ( pFnGrantBonusTalents, &GrantBonusTalents_Parms, NULL );
};

// Function SFXGame.BioConsequenceFunctions.GrantCredits
// [0x00022002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )
// int                            Count                          ( CPF_Parm )

void UBioConsequenceFunctions::GrantCredits ( class ABioWorldInfo* WorldInfo, int Count )
{
	static UFunction* pFnGrantCredits = NULL;

	if ( ! pFnGrantCredits )
		pFnGrantCredits = (UFunction*) UObject::GObjObjects()->Data[ 34486 ];

	UBioConsequenceFunctions_execGrantCredits_Parms GrantCredits_Parms;
	GrantCredits_Parms.WorldInfo = WorldInfo;
	GrantCredits_Parms.Count = Count;

	this->ProcessEvent ( pFnGrantCredits, &GrantCredits_Parms, NULL );
};

// Function SFXGame.BioConsequenceFunctions.GrantMediGel
// [0x00022002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )
// int                            Count                          ( CPF_Parm )

void UBioConsequenceFunctions::GrantMediGel ( class ABioWorldInfo* WorldInfo, int Count )
{
	static UFunction* pFnGrantMediGel = NULL;

	if ( ! pFnGrantMediGel )
		pFnGrantMediGel = (UFunction*) UObject::GObjObjects()->Data[ 34481 ];

	UBioConsequenceFunctions_execGrantMediGel_Parms GrantMediGel_Parms;
	GrantMediGel_Parms.WorldInfo = WorldInfo;
	GrantMediGel_Parms.Count = Count;

	this->ProcessEvent ( pFnGrantMediGel, &GrantMediGel_Parms, NULL );
};

// Function SFXGame.BioConsequenceFunctions.GrantScaledXP
// [0x00022002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )
// int                            Curve                          ( CPF_Parm )

void UBioConsequenceFunctions::GrantScaledXP ( class ABioWorldInfo* WorldInfo, int Curve )
{
	static UFunction* pFnGrantScaledXP = NULL;

	if ( ! pFnGrantScaledXP )
		pFnGrantScaledXP = (UFunction*) UObject::GObjObjects()->Data[ 34478 ];

	UBioConsequenceFunctions_execGrantScaledXP_Parms GrantScaledXP_Parms;
	GrantScaledXP_Parms.WorldInfo = WorldInfo;
	GrantScaledXP_Parms.Curve = Curve;

	this->ProcessEvent ( pFnGrantScaledXP, &GrantScaledXP_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CombatActivate.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UBioCustomAction_CombatActivate::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 35187 ];

	UBioCustomAction_CombatActivate_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CombatActivate.StopCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_CombatActivate::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35185 ];

	UBioCustomAction_CombatActivate_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CombatActivate.ContinueCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_CombatActivate::ContinueCustomAction ( )
{
	static UFunction* pFnContinueCustomAction = NULL;

	if ( ! pFnContinueCustomAction )
		pFnContinueCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35183 ];

	UBioCustomAction_CombatActivate_execContinueCustomAction_Parms ContinueCustomAction_Parms;

	this->ProcessEvent ( pFnContinueCustomAction, &ContinueCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CombatActivate.PauseCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_CombatActivate::PauseCustomAction ( )
{
	static UFunction* pFnPauseCustomAction = NULL;

	if ( ! pFnPauseCustomAction )
		pFnPauseCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35181 ];

	UBioCustomAction_CombatActivate_execPauseCustomAction_Parms PauseCustomAction_Parms;

	this->ProcessEvent ( pFnPauseCustomAction, &PauseCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CombatActivate.StartCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_CombatActivate::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35178 ];

	UBioCustomAction_CombatActivate_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CoverClimbMantleBase.CacheCoverInfo
// [0x00020002] 
// Parameters infos:
// struct FCovPosInfo             CoverInfo                      ( CPF_Parm )

void UBioCustomAction_CoverClimbMantleBase::CacheCoverInfo ( struct FCovPosInfo CoverInfo )
{
	static UFunction* pFnCacheCoverInfo = NULL;

	if ( ! pFnCacheCoverInfo )
		pFnCacheCoverInfo = (UFunction*) UObject::GObjObjects()->Data[ 35230 ];

	UBioCustomAction_CoverClimbMantleBase_execCacheCoverInfo_Parms CacheCoverInfo_Parms;
	memcpy ( &CacheCoverInfo_Parms.CoverInfo, &CoverInfo, 0x34 );

	this->ProcessEvent ( pFnCacheCoverInfo, &CacheCoverInfo_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CoverClimbMantleBase.EndPlayBodyStance
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  StanceID                       ( CPF_Parm )

void UBioCustomAction_CoverClimbMantleBase::EndPlayBodyStance ( unsigned char StanceID )
{
	static UFunction* pFnEndPlayBodyStance = NULL;

	if ( ! pFnEndPlayBodyStance )
		pFnEndPlayBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 35209 ];

	UBioCustomAction_CoverClimbMantleBase_execEndPlayBodyStance_Parms EndPlayBodyStance_Parms;
	EndPlayBodyStance_Parms.StanceID = StanceID;

	this->ProcessEvent ( pFnEndPlayBodyStance, &EndPlayBodyStance_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CoverClimbMantleBase.StopPlayBodyStance
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// unsigned char                  StanceID                       ( CPF_Parm )

void UBioCustomAction_CoverClimbMantleBase::StopPlayBodyStance ( unsigned char StanceID )
{
	static UFunction* pFnStopPlayBodyStance = NULL;

	if ( ! pFnStopPlayBodyStance )
		pFnStopPlayBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 35210 ];

	UBioCustomAction_CoverClimbMantleBase_execStopPlayBodyStance_Parms StopPlayBodyStance_Parms;
	StopPlayBodyStance_Parms.StanceID = StanceID;

	this->ProcessEvent ( pFnStopPlayBodyStance, &StopPlayBodyStance_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CoverClimbMantleBase.StartPlayBodyStance
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  StanceID                       ( CPF_Parm )

bool UBioCustomAction_CoverClimbMantleBase::StartPlayBodyStance ( unsigned char StanceID )
{
	static UFunction* pFnStartPlayBodyStance = NULL;

	if ( ! pFnStartPlayBodyStance )
		pFnStartPlayBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 35207 ];

	UBioCustomAction_CoverClimbMantleBase_execStartPlayBodyStance_Parms StartPlayBodyStance_Parms;
	StartPlayBodyStance_Parms.StanceID = StanceID;

	this->ProcessEvent ( pFnStartPlayBodyStance, &StartPlayBodyStance_Parms, NULL );

	return StartPlayBodyStance_Parms.ReturnValue;
};

// Function SFXGame.BioCustomAction_CoverClimbMantleBase.GetBodyStance
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  StanceID                       ( CPF_Parm )
// struct FBodyStance             out_BodyStance                 ( CPF_Parm | CPF_OutParm )

bool UBioCustomAction_CoverClimbMantleBase::GetBodyStance ( unsigned char StanceID, struct FBodyStance* out_BodyStance )
{
	static UFunction* pFnGetBodyStance = NULL;

	if ( ! pFnGetBodyStance )
		pFnGetBodyStance = (UFunction*) UObject::GObjObjects()->Data[ 35217 ];

	UBioCustomAction_CoverClimbMantleBase_execGetBodyStance_Parms GetBodyStance_Parms;
	GetBodyStance_Parms.StanceID = StanceID;

	this->ProcessEvent ( pFnGetBodyStance, &GetBodyStance_Parms, NULL );

	if ( out_BodyStance )
		memcpy ( out_BodyStance, &GetBodyStance_Parms.out_BodyStance, 0xC );

	return GetBodyStance_Parms.ReturnValue;
};

// Function SFXGame.BioCustomAction_CoverClimbMantleBase.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UBioCustomAction_CoverClimbMantleBase::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 35213 ];

	UBioCustomAction_CoverClimbMantleBase_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CoverClimbMantleBase.TickCustomAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaTime                     ( CPF_Parm )

void UBioCustomAction_CoverClimbMantleBase::eventTickCustomAction ( float fDeltaTime )
{
	static UFunction* pFnTickCustomAction = NULL;

	if ( ! pFnTickCustomAction )
		pFnTickCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35211 ];

	UBioCustomAction_CoverClimbMantleBase_eventTickCustomAction_Parms TickCustomAction_Parms;
	TickCustomAction_Parms.fDeltaTime = fDeltaTime;

	this->ProcessEvent ( pFnTickCustomAction, &TickCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CoverClimbMantleBase.StopCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_CoverClimbMantleBase::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35208 ];

	UBioCustomAction_CoverClimbMantleBase_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CoverClimbMantleBase.StartCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_CoverClimbMantleBase::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35202 ];

	UBioCustomAction_CoverClimbMantleBase_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CoverClimb.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UBioCustomAction_CoverClimb::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 35236 ];

	UBioCustomAction_CoverClimb_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CoverClimb.StopCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_CoverClimb::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35235 ];

	UBioCustomAction_CoverClimb_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CoverClimb.StartCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_CoverClimb::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35234 ];

	UBioCustomAction_CoverClimb_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CoverMantle.NotifyBump
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

bool UBioCustomAction_CoverMantle::NotifyBump ( class AActor* Other, struct FVector HitNormal )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = (UFunction*) UObject::GObjObjects()->Data[ 35252 ];

	UBioCustomAction_CoverMantle_execNotifyBump_Parms NotifyBump_Parms;
	NotifyBump_Parms.Other = Other;
	memcpy ( &NotifyBump_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );

	return NotifyBump_Parms.ReturnValue;
};

// Function SFXGame.BioCustomAction_CoverMantle.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UBioCustomAction_CoverMantle::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 35248 ];

	UBioCustomAction_CoverMantle_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CoverMantle.StopCustomAction
// [0x00820002] 
// Parameters infos:

void UBioCustomAction_CoverMantle::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35246 ];

	UBioCustomAction_CoverMantle_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_CoverMantle.StartCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_CoverMantle::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35245 ];

	UBioCustomAction_CoverMantle_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_DeathCrawl.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UBioCustomAction_DeathCrawl::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 35262 ];

	UBioCustomAction_DeathCrawl_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.BioCustomAction_DeathCrawl.StopCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_DeathCrawl::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35261 ];

	UBioCustomAction_DeathCrawl_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_DeathCrawl.StartCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_DeathCrawl::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35260 ];

	UBioCustomAction_DeathCrawl_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_KroganSmash.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UBioCustomAction_KroganSmash::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 35296 ];

	UBioCustomAction_KroganSmash_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.BioCustomAction_KroganSmash.StopCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_KroganSmash::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35295 ];

	UBioCustomAction_KroganSmash_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_KroganSmash.StartCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_KroganSmash::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35294 ];

	UBioCustomAction_KroganSmash_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_PraetorianTeleport.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UBioCustomAction_PraetorianTeleport::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 35305 ];

	UBioCustomAction_PraetorianTeleport_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.BioCustomAction_PraetorianTeleport.StopCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_PraetorianTeleport::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35304 ];

	UBioCustomAction_PraetorianTeleport_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_PraetorianTeleport.StartCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_PraetorianTeleport::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35303 ];

	UBioCustomAction_PraetorianTeleport_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_WaypointAnimation.SetWaypointAnim
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   AnimName                       ( CPF_Parm )
// int                            eStance                        ( CPF_Parm )

bool UBioCustomAction_WaypointAnimation::SetWaypointAnim ( struct FName AnimName, int eStance )
{
	static UFunction* pFnSetWaypointAnim = NULL;

	if ( ! pFnSetWaypointAnim )
		pFnSetWaypointAnim = (UFunction*) UObject::GObjObjects()->Data[ 35322 ];

	UBioCustomAction_WaypointAnimation_execSetWaypointAnim_Parms SetWaypointAnim_Parms;
	memcpy ( &SetWaypointAnim_Parms.AnimName, &AnimName, 0x8 );
	SetWaypointAnim_Parms.eStance = eStance;

	this->ProcessEvent ( pFnSetWaypointAnim, &SetWaypointAnim_Parms, NULL );

	return SetWaypointAnim_Parms.ReturnValue;
};

// Function SFXGame.BioCustomAction_WaypointAnimation.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void UBioCustomAction_WaypointAnimation::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 35318 ];

	UBioCustomAction_WaypointAnimation_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.BioCustomAction_WaypointAnimation.StopCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_WaypointAnimation::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35317 ];

	UBioCustomAction_WaypointAnimation_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.BioCustomAction_WaypointAnimation.StartCustomAction
// [0x00020002] 
// Parameters infos:

void UBioCustomAction_WaypointAnimation::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 35316 ];

	UBioCustomAction_WaypointAnimation_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.BioGameEffectSuppression.Create
// [0x00022002] 
// Parameters infos:
// class UBioGameProperty*        oProperty                      ( CPF_Parm )

void UBioGameEffectSuppression::Create ( class UBioGameProperty* oProperty )
{
	static UFunction* pFnCreate = NULL;

	if ( ! pFnCreate )
		pFnCreate = (UFunction*) UObject::GObjObjects()->Data[ 36690 ];

	UBioGameEffectSuppression_execCreate_Parms Create_Parms;
	Create_Parms.oProperty = oProperty;

	this->ProcessEvent ( pFnCreate, &Create_Parms, NULL );
};

// Function SFXGame.SFXModule_AimAssist.DebugDraw_ZoomSnap
// [0x00820002] 
// Parameters infos:
// class ABioHUD*                 H                              ( CPF_Parm )

void USFXModule_AimAssist::DebugDraw_ZoomSnap ( class ABioHUD* H )
{
	static UFunction* pFnDebugDraw_ZoomSnap = NULL;

	if ( ! pFnDebugDraw_ZoomSnap )
		pFnDebugDraw_ZoomSnap = (UFunction*) UObject::GObjObjects()->Data[ 41894 ];

	USFXModule_AimAssist_execDebugDraw_ZoomSnap_Parms DebugDraw_ZoomSnap_Parms;
	DebugDraw_ZoomSnap_Parms.H = H;

	this->ProcessEvent ( pFnDebugDraw_ZoomSnap, &DebugDraw_ZoomSnap_Parms, NULL );
};

// Function SFXGame.SFXModule_AimAssist.ZoomSnap
// [0x00820002] 
// Parameters infos:

void USFXModule_AimAssist::ZoomSnap ( )
{
	static UFunction* pFnZoomSnap = NULL;

	if ( ! pFnZoomSnap )
		pFnZoomSnap = (UFunction*) UObject::GObjObjects()->Data[ 41715 ];

	USFXModule_AimAssist_execZoomSnap_Parms ZoomSnap_Parms;

	this->ProcessEvent ( pFnZoomSnap, &ZoomSnap_Parms, NULL );
};

// Function SFXGame.SFXModule_AimAssist.DebugDraw_Adhesion
// [0x00820002] 
// Parameters infos:
// class ABioHUD*                 H                              ( CPF_Parm )

void USFXModule_AimAssist::DebugDraw_Adhesion ( class ABioHUD* H )
{
	static UFunction* pFnDebugDraw_Adhesion = NULL;

	if ( ! pFnDebugDraw_Adhesion )
		pFnDebugDraw_Adhesion = (UFunction*) UObject::GObjObjects()->Data[ 41704 ];

	USFXModule_AimAssist_execDebugDraw_Adhesion_Parms DebugDraw_Adhesion_Parms;
	DebugDraw_Adhesion_Parms.H = H;

	this->ProcessEvent ( pFnDebugDraw_Adhesion, &DebugDraw_Adhesion_Parms, NULL );
};

// Function SFXGame.SFXModule_AimAssist.PrintQuat
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FQuat                   Q                              ( CPF_Parm )

struct FString USFXModule_AimAssist::PrintQuat ( struct FQuat Q )
{
	static UFunction* pFnPrintQuat = NULL;

	if ( ! pFnPrintQuat )
		pFnPrintQuat = (UFunction*) UObject::GObjObjects()->Data[ 41701 ];

	USFXModule_AimAssist_execPrintQuat_Parms PrintQuat_Parms;
	memcpy ( &PrintQuat_Parms.Q, &Q, 0x10 );

	this->ProcessEvent ( pFnPrintQuat, &PrintQuat_Parms, NULL );

	return PrintQuat_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_AimAssist.ViewAdhesion
// [0x00C20002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FRotator                out_ViewRotation               ( CPF_Parm | CPF_OutParm )

bool USFXModule_AimAssist::ViewAdhesion ( float DeltaTime, class ASFXWeapon* Weapon, struct FRotator* out_ViewRotation )
{
	static UFunction* pFnViewAdhesion = NULL;

	if ( ! pFnViewAdhesion )
		pFnViewAdhesion = (UFunction*) UObject::GObjObjects()->Data[ 41670 ];

	USFXModule_AimAssist_execViewAdhesion_Parms ViewAdhesion_Parms;
	ViewAdhesion_Parms.DeltaTime = DeltaTime;
	ViewAdhesion_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnViewAdhesion, &ViewAdhesion_Parms, NULL );

	if ( out_ViewRotation )
		memcpy ( out_ViewRotation, &ViewAdhesion_Parms.out_ViewRotation, 0xC );

	return ViewAdhesion_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_AimAssist.DebugDraw_Friction
// [0x00820002] 
// Parameters infos:
// class ABioHUD*                 H                              ( CPF_Parm )

void USFXModule_AimAssist::DebugDraw_Friction ( class ABioHUD* H )
{
	static UFunction* pFnDebugDraw_Friction = NULL;

	if ( ! pFnDebugDraw_Friction )
		pFnDebugDraw_Friction = (UFunction*) UObject::GObjObjects()->Data[ 41661 ];

	USFXModule_AimAssist_execDebugDraw_Friction_Parms DebugDraw_Friction_Parms;
	DebugDraw_Friction_Parms.H = H;

	this->ProcessEvent ( pFnDebugDraw_Friction, &DebugDraw_Friction_Parms, NULL );
};

// Function SFXGame.SFXModule_AimAssist.ViewFriction
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

void USFXModule_AimAssist::ViewFriction ( float DeltaTime, class ASFXWeapon* Weapon )
{
	static UFunction* pFnViewFriction = NULL;

	if ( ! pFnViewFriction )
		pFnViewFriction = (UFunction*) UObject::GObjObjects()->Data[ 41649 ];

	USFXModule_AimAssist_execViewFriction_Parms ViewFriction_Parms;
	ViewFriction_Parms.DeltaTime = DeltaTime;
	ViewFriction_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnViewFriction, &ViewFriction_Parms, NULL );
};

// Function SFXGame.SFXModule_AimAssist.GetAdjustedAimFor
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWeapon*                 W                              ( CPF_Parm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )

struct FRotator USFXModule_AimAssist::GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = (UFunction*) UObject::GObjObjects()->Data[ 41641 ];

	USFXModule_AimAssist_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;
	GetAdjustedAimFor_Parms.W = W;
	memcpy ( &GetAdjustedAimFor_Parms.StartFireLoc, &StartFireLoc, 0xC );

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );

	return GetAdjustedAimFor_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_AimAssist.GetMagneticAimCorrection
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 StartFireLoc                   ( CPF_Parm )
// struct FRotator                BaseAimRot                     ( CPF_Parm )
// float                          MaxAngle                       ( CPF_Parm )
// float                          Threshold                      ( CPF_Parm )
// float                          Range                          ( CPF_Parm )

struct FRotator USFXModule_AimAssist::GetMagneticAimCorrection ( struct FVector StartFireLoc, struct FRotator BaseAimRot, float MaxAngle, float Threshold, float Range )
{
	static UFunction* pFnGetMagneticAimCorrection = NULL;

	if ( ! pFnGetMagneticAimCorrection )
		pFnGetMagneticAimCorrection = (UFunction*) UObject::GObjObjects()->Data[ 41627 ];

	USFXModule_AimAssist_execGetMagneticAimCorrection_Parms GetMagneticAimCorrection_Parms;
	memcpy ( &GetMagneticAimCorrection_Parms.StartFireLoc, &StartFireLoc, 0xC );
	memcpy ( &GetMagneticAimCorrection_Parms.BaseAimRot, &BaseAimRot, 0xC );
	GetMagneticAimCorrection_Parms.MaxAngle = MaxAngle;
	GetMagneticAimCorrection_Parms.Threshold = Threshold;
	GetMagneticAimCorrection_Parms.Range = Range;

	this->ProcessEvent ( pFnGetMagneticAimCorrection, &GetMagneticAimCorrection_Parms, NULL );

	return GetMagneticAimCorrection_Parms.ReturnValue;
};

// Function SFXGame.SFXModule_AimAssist.UpdateViewRotationForAdhesion
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )
// struct FRotator                ViewRotation                   ( CPF_Parm )

void USFXModule_AimAssist::UpdateViewRotationForAdhesion ( float DeltaTime, struct FRotator ViewRotation )
{
	static UFunction* pFnUpdateViewRotationForAdhesion = NULL;

	if ( ! pFnUpdateViewRotationForAdhesion )
		pFnUpdateViewRotationForAdhesion = (UFunction*) UObject::GObjObjects()->Data[ 41623 ];

	USFXModule_AimAssist_execUpdateViewRotationForAdhesion_Parms UpdateViewRotationForAdhesion_Parms;
	UpdateViewRotationForAdhesion_Parms.DeltaTime = DeltaTime;
	memcpy ( &UpdateViewRotationForAdhesion_Parms.ViewRotation, &ViewRotation, 0xC );

	this->ProcessEvent ( pFnUpdateViewRotationForAdhesion, &UpdateViewRotationForAdhesion_Parms, NULL );
};

// Function SFXGame.SFXModule_AimAssist.CacheCurrentAimAssistTarget
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void USFXModule_AimAssist::CacheCurrentAimAssistTarget ( )
{
	static UFunction* pFnCacheCurrentAimAssistTarget = NULL;

	if ( ! pFnCacheCurrentAimAssistTarget )
		pFnCacheCurrentAimAssistTarget = (UFunction*) UObject::GObjObjects()->Data[ 41614 ];

	USFXModule_AimAssist_execCacheCurrentAimAssistTarget_Parms CacheCurrentAimAssistTarget_Parms;

	this->ProcessEvent ( pFnCacheCurrentAimAssistTarget, &CacheCurrentAimAssistTarget_Parms, NULL );
};

// Function SFXGame.SFXWeapon_SniperRifle_Base.ModifyDamage
// [0x00420102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm | CPF_OutParm )

void ASFXWeapon_SniperRifle_Base::ModifyDamage ( struct FVector HitLocation, class AActor* HitActor, float* BaseDamage )
{
	static UFunction* pFnModifyDamage = NULL;

	if ( ! pFnModifyDamage )
		pFnModifyDamage = (UFunction*) UObject::GObjObjects()->Data[ 62713 ];

	ASFXWeapon_SniperRifle_Base_execModifyDamage_Parms ModifyDamage_Parms;
	memcpy ( &ModifyDamage_Parms.HitLocation, &HitLocation, 0xC );
	ModifyDamage_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnModifyDamage, &ModifyDamage_Parms, NULL );

	if ( BaseDamage )
		*BaseDamage = ModifyDamage_Parms.BaseDamage;
};

// Function SFXGame.SFXWeapon_Shotgun_Base.ScaleWeapon
// [0x00020002] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void ASFXWeapon_Shotgun_Base::ScaleWeapon ( int Level )
{
	static UFunction* pFnScaleWeapon = NULL;

	if ( ! pFnScaleWeapon )
		pFnScaleWeapon = (UFunction*) UObject::GObjObjects()->Data[ 62705 ];

	ASFXWeapon_Shotgun_Base_execScaleWeapon_Parms ScaleWeapon_Parms;
	ScaleWeapon_Parms.Level = Level;

	this->ProcessEvent ( pFnScaleWeapon, &ScaleWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon_Shotgun_Base.ModifyDamage
// [0x00420102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm | CPF_OutParm )

void ASFXWeapon_Shotgun_Base::ModifyDamage ( struct FVector HitLocation, class AActor* HitActor, float* BaseDamage )
{
	static UFunction* pFnModifyDamage = NULL;

	if ( ! pFnModifyDamage )
		pFnModifyDamage = (UFunction*) UObject::GObjObjects()->Data[ 62701 ];

	ASFXWeapon_Shotgun_Base_execModifyDamage_Parms ModifyDamage_Parms;
	memcpy ( &ModifyDamage_Parms.HitLocation, &HitLocation, 0xC );
	ModifyDamage_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnModifyDamage, &ModifyDamage_Parms, NULL );

	if ( BaseDamage )
		*BaseDamage = ModifyDamage_Parms.BaseDamage;
};

// Function SFXGame.BioMaterialOverrideSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioMaterialOverrideSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 38544 ];

	UBioMaterialOverrideSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioMaterialOverrideSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioMaterialOverrideSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 38540 ];

	UBioMaterialOverrideSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.SFXPowerLevelUpHelper.CanMakePurchase
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXPowerLevelUpHelper::CanMakePurchase ( )
{
	static UFunction* pFnCanMakePurchase = NULL;

	if ( ! pFnCanMakePurchase )
		pFnCanMakePurchase = (UFunction*) UObject::GObjObjects()->Data[ 46336 ];

	USFXPowerLevelUpHelper_execCanMakePurchase_Parms CanMakePurchase_Parms;

	this->ProcessEvent ( pFnCanMakePurchase, &CanMakePurchase_Parms, NULL );

	return CanMakePurchase_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerLevelUpHelper.GetNextWheelDisplayIndex
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXPowerLevelUpHelper::GetNextWheelDisplayIndex ( )
{
	static UFunction* pFnGetNextWheelDisplayIndex = NULL;

	if ( ! pFnGetNextWheelDisplayIndex )
		pFnGetNextWheelDisplayIndex = (UFunction*) UObject::GObjObjects()->Data[ 46332 ];

	USFXPowerLevelUpHelper_execGetNextWheelDisplayIndex_Parms GetNextWheelDisplayIndex_Parms;

	this->ProcessEvent ( pFnGetNextWheelDisplayIndex, &GetNextWheelDisplayIndex_Parms, NULL );

	return GetNextWheelDisplayIndex_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerLevelUpHelper.GetCurrentRankByPower
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXPower*               Power                          ( CPF_Parm )

float USFXPowerLevelUpHelper::GetCurrentRankByPower ( class USFXPower* Power )
{
	static UFunction* pFnGetCurrentRankByPower = NULL;

	if ( ! pFnGetCurrentRankByPower )
		pFnGetCurrentRankByPower = (UFunction*) UObject::GObjObjects()->Data[ 46328 ];

	USFXPowerLevelUpHelper_execGetCurrentRankByPower_Parms GetCurrentRankByPower_Parms;
	GetCurrentRankByPower_Parms.Power = Power;

	this->ProcessEvent ( pFnGetCurrentRankByPower, &GetCurrentRankByPower_Parms, NULL );

	return GetCurrentRankByPower_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerLevelUpHelper.GetCurrentRank
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPowerIndex                    ( CPF_Parm )

float USFXPowerLevelUpHelper::GetCurrentRank ( int nPowerIndex )
{
	static UFunction* pFnGetCurrentRank = NULL;

	if ( ! pFnGetCurrentRank )
		pFnGetCurrentRank = (UFunction*) UObject::GObjObjects()->Data[ 46325 ];

	USFXPowerLevelUpHelper_execGetCurrentRank_Parms GetCurrentRank_Parms;
	GetCurrentRank_Parms.nPowerIndex = nPowerIndex;

	this->ProcessEvent ( pFnGetCurrentRank, &GetCurrentRank_Parms, NULL );

	return GetCurrentRank_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerLevelUpHelper.CancelEvolution
// [0x00020002] 
// Parameters infos:
// class USFXPower*               OriginalPower                  ( CPF_Parm )

void USFXPowerLevelUpHelper::CancelEvolution ( class USFXPower* OriginalPower )
{
	static UFunction* pFnCancelEvolution = NULL;

	if ( ! pFnCancelEvolution )
		pFnCancelEvolution = (UFunction*) UObject::GObjObjects()->Data[ 46322 ];

	USFXPowerLevelUpHelper_execCancelEvolution_Parms CancelEvolution_Parms;
	CancelEvolution_Parms.OriginalPower = OriginalPower;

	this->ProcessEvent ( pFnCancelEvolution, &CancelEvolution_Parms, NULL );
};

// Function SFXGame.SFXPowerLevelUpHelper.EvolvePower
// [0x00020002] 
// Parameters infos:
// class USFXPower*               OriginalPower                  ( CPF_Parm )
// class UClass*                  EvolvedPowerClass              ( CPF_Parm )

void USFXPowerLevelUpHelper::EvolvePower ( class USFXPower* OriginalPower, class UClass* EvolvedPowerClass )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 46311 ];

	USFXPowerLevelUpHelper_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.OriginalPower = OriginalPower;
	EvolvePower_Parms.EvolvedPowerClass = EvolvedPowerClass;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function SFXGame.SFXPowerLevelUpHelper.CancelChanges
// [0x00020002] 
// Parameters infos:

void USFXPowerLevelUpHelper::CancelChanges ( )
{
	static UFunction* pFnCancelChanges = NULL;

	if ( ! pFnCancelChanges )
		pFnCancelChanges = (UFunction*) UObject::GObjObjects()->Data[ 46309 ];

	USFXPowerLevelUpHelper_execCancelChanges_Parms CancelChanges_Parms;

	this->ProcessEvent ( pFnCancelChanges, &CancelChanges_Parms, NULL );
};

// Function SFXGame.SFXPowerLevelUpHelper.ApplyChanges
// [0x00020002] 
// Parameters infos:

void USFXPowerLevelUpHelper::ApplyChanges ( )
{
	static UFunction* pFnApplyChanges = NULL;

	if ( ! pFnApplyChanges )
		pFnApplyChanges = (UFunction*) UObject::GObjObjects()->Data[ 46306 ];

	USFXPowerLevelUpHelper_execApplyChanges_Parms ApplyChanges_Parms;

	this->ProcessEvent ( pFnApplyChanges, &ApplyChanges_Parms, NULL );
};

// Function SFXGame.SFXPowerLevelUpHelper.CanEvolvePower
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPowerIndex                    ( CPF_Parm )

bool USFXPowerLevelUpHelper::CanEvolvePower ( int nPowerIndex )
{
	static UFunction* pFnCanEvolvePower = NULL;

	if ( ! pFnCanEvolvePower )
		pFnCanEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 46303 ];

	USFXPowerLevelUpHelper_execCanEvolvePower_Parms CanEvolvePower_Parms;
	CanEvolvePower_Parms.nPowerIndex = nPowerIndex;

	this->ProcessEvent ( pFnCanEvolvePower, &CanEvolvePower_Parms, NULL );

	return CanEvolvePower_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerLevelUpHelper.IsUnlocked
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPowerIndex                    ( CPF_Parm )

bool USFXPowerLevelUpHelper::IsUnlocked ( int nPowerIndex )
{
	static UFunction* pFnIsUnlocked = NULL;

	if ( ! pFnIsUnlocked )
		pFnIsUnlocked = (UFunction*) UObject::GObjObjects()->Data[ 46291 ];

	USFXPowerLevelUpHelper_execIsUnlocked_Parms IsUnlocked_Parms;
	IsUnlocked_Parms.nPowerIndex = nPowerIndex;

	this->ProcessEvent ( pFnIsUnlocked, &IsUnlocked_Parms, NULL );

	return IsUnlocked_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerLevelUpHelper.GetAvailableRank
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPowerIndex                    ( CPF_Parm )

int USFXPowerLevelUpHelper::GetAvailableRank ( int nPowerIndex )
{
	static UFunction* pFnGetAvailableRank = NULL;

	if ( ! pFnGetAvailableRank )
		pFnGetAvailableRank = (UFunction*) UObject::GObjObjects()->Data[ 46287 ];

	USFXPowerLevelUpHelper_execGetAvailableRank_Parms GetAvailableRank_Parms;
	GetAvailableRank_Parms.nPowerIndex = nPowerIndex;

	this->ProcessEvent ( pFnGetAvailableRank, &GetAvailableRank_Parms, NULL );

	return GetAvailableRank_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerLevelUpHelper.GetRemainingPoints
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

int USFXPowerLevelUpHelper::GetRemainingPoints ( )
{
	static UFunction* pFnGetRemainingPoints = NULL;

	if ( ! pFnGetRemainingPoints )
		pFnGetRemainingPoints = (UFunction*) UObject::GObjObjects()->Data[ 46285 ];

	USFXPowerLevelUpHelper_execGetRemainingPoints_Parms GetRemainingPoints_Parms;

	this->ProcessEvent ( pFnGetRemainingPoints, &GetRemainingPoints_Parms, NULL );

	return GetRemainingPoints_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerLevelUpHelper.CanIncreaseRank
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPowerIndex                    ( CPF_Parm )
// int                            nCostToIncrease                ( CPF_Parm | CPF_OutParm )

bool USFXPowerLevelUpHelper::CanIncreaseRank ( int nPowerIndex, int* nCostToIncrease )
{
	static UFunction* pFnCanIncreaseRank = NULL;

	if ( ! pFnCanIncreaseRank )
		pFnCanIncreaseRank = (UFunction*) UObject::GObjObjects()->Data[ 46278 ];

	USFXPowerLevelUpHelper_execCanIncreaseRank_Parms CanIncreaseRank_Parms;
	CanIncreaseRank_Parms.nPowerIndex = nPowerIndex;

	this->ProcessEvent ( pFnCanIncreaseRank, &CanIncreaseRank_Parms, NULL );

	if ( nCostToIncrease )
		*nCostToIncrease = CanIncreaseRank_Parms.nCostToIncrease;

	return CanIncreaseRank_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerLevelUpHelper.IncreaseRank
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            nPowerIndex                    ( CPF_Parm )

bool USFXPowerLevelUpHelper::IncreaseRank ( int nPowerIndex )
{
	static UFunction* pFnIncreaseRank = NULL;

	if ( ! pFnIncreaseRank )
		pFnIncreaseRank = (UFunction*) UObject::GObjObjects()->Data[ 46269 ];

	USFXPowerLevelUpHelper_execIncreaseRank_Parms IncreaseRank_Parms;
	IncreaseRank_Parms.nPowerIndex = nPowerIndex;

	this->ProcessEvent ( pFnIncreaseRank, &IncreaseRank_Parms, NULL );

	return IncreaseRank_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerLevelUpHelper.AutoLevelUp
// [0x00020002] 
// Parameters infos:

void USFXPowerLevelUpHelper::AutoLevelUp ( )
{
	static UFunction* pFnAutoLevelUp = NULL;

	if ( ! pFnAutoLevelUp )
		pFnAutoLevelUp = (UFunction*) UObject::GObjObjects()->Data[ 46265 ];

	USFXPowerLevelUpHelper_execAutoLevelUp_Parms AutoLevelUp_Parms;

	this->ProcessEvent ( pFnAutoLevelUp, &AutoLevelUp_Parms, NULL );
};

// Function SFXGame.SFXPowerLevelUpHelper.SetPawn
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Pawn                           ( CPF_Parm )

bool USFXPowerLevelUpHelper::SetPawn ( class ABioPawn* Pawn )
{
	static UFunction* pFnSetPawn = NULL;

	if ( ! pFnSetPawn )
		pFnSetPawn = (UFunction*) UObject::GObjObjects()->Data[ 46261 ];

	USFXPowerLevelUpHelper_execSetPawn_Parms SetPawn_Parms;
	SetPawn_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnSetPawn, &SetPawn_Parms, NULL );

	return SetPawn_Parms.ReturnValue;
};

// Function SFXGame.SFXPowerLevelUpHelper.Initialize
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

bool USFXPowerLevelUpHelper::Initialize ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 46258 ];

	USFXPowerLevelUpHelper_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	return Initialize_Parms.ReturnValue;
};

// Function SFXGame.BioMorphFaceSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioMorphFaceSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 38824 ];

	UBioMorphFaceSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioMorphFaceSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioMorphFaceSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 38819 ];

	UBioMorphFaceSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.BioOp.EvaluateInt
// [0x00422002] 
// Parameters infos:
// unsigned char                  eOp                            ( CPF_Parm )
// int                            nB                             ( CPF_Parm )
// unsigned long                  bInvertOp                      ( CPF_Parm )
// int                            nU                             ( CPF_Parm )
// int                            nA                             ( CPF_Parm | CPF_OutParm )

void UBioOp::EvaluateInt ( unsigned char eOp, int nB, unsigned long bInvertOp, int nU, int* nA )
{
	static UFunction* pFnEvaluateInt = NULL;

	if ( ! pFnEvaluateInt )
		pFnEvaluateInt = (UFunction*) UObject::GObjObjects()->Data[ 38866 ];

	UBioOp_execEvaluateInt_Parms EvaluateInt_Parms;
	EvaluateInt_Parms.eOp = eOp;
	EvaluateInt_Parms.nB = nB;
	EvaluateInt_Parms.bInvertOp = bInvertOp;
	EvaluateInt_Parms.nU = nU;

	this->ProcessEvent ( pFnEvaluateInt, &EvaluateInt_Parms, NULL );

	if ( nA )
		*nA = EvaluateInt_Parms.nA;
};

// Function SFXGame.BioOp.EvaluateFloat
// [0x00422002] 
// Parameters infos:
// unsigned char                  eOp                            ( CPF_Parm )
// unsigned long                  bInvertOp                      ( CPF_Parm )
// float                          fU                             ( CPF_OptionalParm | CPF_Parm )
// float                          fA                             ( CPF_Parm | CPF_OutParm )
// float                          fB                             ( CPF_Parm | CPF_OutParm )

void UBioOp::EvaluateFloat ( unsigned char eOp, unsigned long bInvertOp, float fU, float* fA, float* fB )
{
	static UFunction* pFnEvaluateFloat = NULL;

	if ( ! pFnEvaluateFloat )
		pFnEvaluateFloat = (UFunction*) UObject::GObjObjects()->Data[ 38860 ];

	UBioOp_execEvaluateFloat_Parms EvaluateFloat_Parms;
	EvaluateFloat_Parms.eOp = eOp;
	EvaluateFloat_Parms.bInvertOp = bInvertOp;
	EvaluateFloat_Parms.fU = fU;

	this->ProcessEvent ( pFnEvaluateFloat, &EvaluateFloat_Parms, NULL );

	if ( fA )
		*fA = EvaluateFloat_Parms.fA;

	if ( fB )
		*fB = EvaluateFloat_Parms.fB;
};

// Function SFXGame.SFXPower_PassivePower.GetNegotiationBonus
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXPower_PassivePower::GetNegotiationBonus ( )
{
	static UFunction* pFnGetNegotiationBonus = NULL;

	if ( ! pFnGetNegotiationBonus )
		pFnGetNegotiationBonus = (UFunction*) UObject::GObjObjects()->Data[ 59285 ];

	USFXPower_PassivePower_execGetNegotiationBonus_Parms GetNegotiationBonus_Parms;

	this->ProcessEvent ( pFnGetNegotiationBonus, &GetNegotiationBonus_Parms, NULL );

	return GetNegotiationBonus_Parms.ReturnValue;
};

// Function SFXGame.SFXPower_PassivePower.ModifyIntimidateSkill
// [0x00420002] 
// Parameters infos:
// int                            nRankToUse                     ( CPF_OptionalParm | CPF_Parm )
// float                          fIntimidateSkill               ( CPF_Parm | CPF_OutParm )

void USFXPower_PassivePower::ModifyIntimidateSkill ( int nRankToUse, float* fIntimidateSkill )
{
	static UFunction* pFnModifyIntimidateSkill = NULL;

	if ( ! pFnModifyIntimidateSkill )
		pFnModifyIntimidateSkill = (UFunction*) UObject::GObjObjects()->Data[ 59281 ];

	USFXPower_PassivePower_execModifyIntimidateSkill_Parms ModifyIntimidateSkill_Parms;
	ModifyIntimidateSkill_Parms.nRankToUse = nRankToUse;

	this->ProcessEvent ( pFnModifyIntimidateSkill, &ModifyIntimidateSkill_Parms, NULL );

	if ( fIntimidateSkill )
		*fIntimidateSkill = ModifyIntimidateSkill_Parms.fIntimidateSkill;
};

// Function SFXGame.SFXPower_PassivePower.ModifyCharmSkill
// [0x00420002] 
// Parameters infos:
// int                            nRankToUse                     ( CPF_OptionalParm | CPF_Parm )
// float                          fCharmSkill                    ( CPF_Parm | CPF_OutParm )

void USFXPower_PassivePower::ModifyCharmSkill ( int nRankToUse, float* fCharmSkill )
{
	static UFunction* pFnModifyCharmSkill = NULL;

	if ( ! pFnModifyCharmSkill )
		pFnModifyCharmSkill = (UFunction*) UObject::GObjObjects()->Data[ 59277 ];

	USFXPower_PassivePower_execModifyCharmSkill_Parms ModifyCharmSkill_Parms;
	ModifyCharmSkill_Parms.nRankToUse = nRankToUse;

	this->ProcessEvent ( pFnModifyCharmSkill, &ModifyCharmSkill_Parms, NULL );

	if ( fCharmSkill )
		*fCharmSkill = ModifyCharmSkill_Parms.fCharmSkill;
};

// Function SFXGame.SFXGameEffect_Regeneration.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_Regeneration::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55652 ];

	USFXGameEffect_Regeneration_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Regeneration.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_Regeneration::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55650 ];

	USFXGameEffect_Regeneration_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXAI_None.SwitchWeapon
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              oWpn                           ( CPF_Parm )

void ASFXAI_None::SwitchWeapon ( class ASFXWeapon* oWpn )
{
	static UFunction* pFnSwitchWeapon = NULL;

	if ( ! pFnSwitchWeapon )
		pFnSwitchWeapon = (UFunction*) UObject::GObjObjects()->Data[ 53211 ];

	ASFXAI_None_execSwitchWeapon_Parms SwitchWeapon_Parms;
	SwitchWeapon_Parms.oWpn = oWpn;

	this->ProcessEvent ( pFnSwitchWeapon, &SwitchWeapon_Parms, NULL );
};

// Function SFXGame.SFXAI_None.MoveToGoalExternal
// [0x00020002] 
// Parameters infos:
// class AActor*                  NewMoveGoal                    ( CPF_Parm )
// float                          NewMoveOffset                  ( CPF_OptionalParm | CPF_Parm )
// struct FScriptDelegate         MoveDelegate                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ASFXAI_None::MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, struct FScriptDelegate MoveDelegate )
{
	static UFunction* pFnMoveToGoalExternal = NULL;

	if ( ! pFnMoveToGoalExternal )
		pFnMoveToGoalExternal = (UFunction*) UObject::GObjObjects()->Data[ 53207 ];

	ASFXAI_None_execMoveToGoalExternal_Parms MoveToGoalExternal_Parms;
	MoveToGoalExternal_Parms.NewMoveGoal = NewMoveGoal;
	MoveToGoalExternal_Parms.NewMoveOffset = NewMoveOffset;
	memcpy ( &MoveToGoalExternal_Parms.MoveDelegate, &MoveDelegate, 0xC );

	this->ProcessEvent ( pFnMoveToGoalExternal, &MoveToGoalExternal_Parms, NULL );
};

// Function SFXGame.SFXAI_None.FireWeaponAtTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// unsigned long                  bCheckLOS                      ( CPF_Parm )
// struct FScriptDelegate         FireDelegate                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ASFXAI_None::FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, struct FScriptDelegate FireDelegate )
{
	static UFunction* pFnFireWeaponAtTarget = NULL;

	if ( ! pFnFireWeaponAtTarget )
		pFnFireWeaponAtTarget = (UFunction*) UObject::GObjObjects()->Data[ 53203 ];

	ASFXAI_None_execFireWeaponAtTarget_Parms FireWeaponAtTarget_Parms;
	FireWeaponAtTarget_Parms.oTarget = oTarget;
	FireWeaponAtTarget_Parms.bCheckLOS = bCheckLOS;
	memcpy ( &FireWeaponAtTarget_Parms.FireDelegate, &FireDelegate, 0xC );

	this->ProcessEvent ( pFnFireWeaponAtTarget, &FireWeaponAtTarget_Parms, NULL );
};

// Function SFXGame.SFXAI_None.UsePowerOnTarget
// [0x00020002] 
// Parameters infos:
// struct FName                   nmPowerToUse                   ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_Parm )
// struct FScriptDelegate         PowerDelegate                  ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreSuppression             ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_None::UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression )
{
	static UFunction* pFnUsePowerOnTarget = NULL;

	if ( ! pFnUsePowerOnTarget )
		pFnUsePowerOnTarget = (UFunction*) UObject::GObjObjects()->Data[ 53198 ];

	ASFXAI_None_execUsePowerOnTarget_Parms UsePowerOnTarget_Parms;
	memcpy ( &UsePowerOnTarget_Parms.nmPowerToUse, &nmPowerToUse, 0x8 );
	UsePowerOnTarget_Parms.oTarget = oTarget;
	memcpy ( &UsePowerOnTarget_Parms.PowerDelegate, &PowerDelegate, 0xC );
	UsePowerOnTarget_Parms.bIgnoreSuppression = bIgnoreSuppression;

	this->ProcessEvent ( pFnUsePowerOnTarget, &UsePowerOnTarget_Parms, NULL );
};

// Function SFXGame.SFXAI_None.SetTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )

void ASFXAI_None::SetTarget ( class AActor* oTarget )
{
	static UFunction* pFnSetTarget = NULL;

	if ( ! pFnSetTarget )
		pFnSetTarget = (UFunction*) UObject::GObjObjects()->Data[ 53196 ];

	ASFXAI_None_execSetTarget_Parms SetTarget_Parms;
	SetTarget_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnSetTarget, &SetTarget_Parms, NULL );
};

// Function SFXGame.BioPawnSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 pObject                        ( CPF_Parm )

void UBioPawnSaveObject::LoadObject ( class UObject* pObject )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 41088 ];

	UBioPawnSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.pObject = pObject;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioPawnSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 pObject                        ( CPF_Parm )

void UBioPawnSaveObject::SaveObject ( class UObject* pObject )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 41085 ];

	UBioPawnSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.pObject = pObject;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.BioSeqAct_OrbitalGame.GetGalaxyCamera
// [0x00020002] 
// Parameters infos:
// class UBioCameraBehaviorGalaxy* ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioCameraBehaviorGalaxy* UBioSeqAct_OrbitalGame::GetGalaxyCamera ( )
{
	static UFunction* pFnGetGalaxyCamera = NULL;

	if ( ! pFnGetGalaxyCamera )
		pFnGetGalaxyCamera = (UFunction*) UObject::GObjObjects()->Data[ 44898 ];

	UBioSeqAct_OrbitalGame_execGetGalaxyCamera_Parms GetGalaxyCamera_Parms;

	this->ProcessEvent ( pFnGetGalaxyCamera, &GetGalaxyCamera_Parms, NULL );

	return GetGalaxyCamera_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_OrbitalGame.SignalProbeImpact
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_OrbitalGame::SignalProbeImpact ( )
{
	static UFunction* pFnSignalProbeImpact = NULL;

	if ( ! pFnSignalProbeImpact )
		pFnSignalProbeImpact = (UFunction*) UObject::GObjObjects()->Data[ 44897 ];

	UBioSeqAct_OrbitalGame_execSignalProbeImpact_Parms SignalProbeImpact_Parms;

	this->ProcessEvent ( pFnSignalProbeImpact, &SignalProbeImpact_Parms, NULL );
};

// Function SFXGame.BioSeqAct_OrbitalGame.SignalProbeLaunch
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_OrbitalGame::SignalProbeLaunch ( )
{
	static UFunction* pFnSignalProbeLaunch = NULL;

	if ( ! pFnSignalProbeLaunch )
		pFnSignalProbeLaunch = (UFunction*) UObject::GObjObjects()->Data[ 44896 ];

	UBioSeqAct_OrbitalGame_execSignalProbeLaunch_Parms SignalProbeLaunch_Parms;

	this->ProcessEvent ( pFnSignalProbeLaunch, &SignalProbeLaunch_Parms, NULL );
};

// Function SFXGame.BioSeqAct_OrbitalGame.EndAction
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_OrbitalGame::EndAction ( )
{
	static UFunction* pFnEndAction = NULL;

	if ( ! pFnEndAction )
		pFnEndAction = (UFunction*) UObject::GObjObjects()->Data[ 44895 ];

	UBioSeqAct_OrbitalGame_execEndAction_Parms EndAction_Parms;

	this->ProcessEvent ( pFnEndAction, &EndAction_Parms, NULL );
};

// Function SFXGame.BioSeqAct_OrbitalGame.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool UBioSeqAct_OrbitalGame::eventUpdate ( float DeltaTime )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 44890 ];

	UBioSeqAct_OrbitalGame_eventUpdate_Parms Update_Parms;
	Update_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );

	return Update_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_OrbitalGame.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_OrbitalGame::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44876 ];

	UBioSeqAct_OrbitalGame_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.ActivateImpactEmitter
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )

void USFXCustomAction_DamageReaction::ActivateImpactEmitter ( struct FVector HitLocation, struct FVector HitNormal, struct FTraceHitInfo HitInfo )
{
	static UFunction* pFnActivateImpactEmitter = NULL;

	if ( ! pFnActivateImpactEmitter )
		pFnActivateImpactEmitter = (UFunction*) UObject::GObjObjects()->Data[ 54131 ];

	USFXCustomAction_DamageReaction_execActivateImpactEmitter_Parms ActivateImpactEmitter_Parms;
	memcpy ( &ActivateImpactEmitter_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &ActivateImpactEmitter_Parms.HitInfo, &HitInfo, 0x1C );

	this->ProcessEvent ( pFnActivateImpactEmitter, &ActivateImpactEmitter_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.EndThisCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_DamageReaction::EndThisCustomAction ( )
{
	static UFunction* pFnEndThisCustomAction = NULL;

	if ( ! pFnEndThisCustomAction )
		pFnEndThisCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54130 ];

	USFXCustomAction_DamageReaction_execEndThisCustomAction_Parms EndThisCustomAction_Parms;

	this->ProcessEvent ( pFnEndThisCustomAction, &EndThisCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.CheckForRagdollRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_DamageReaction::CheckForRagdollRecovery ( )
{
	static UFunction* pFnCheckForRagdollRecovery = NULL;

	if ( ! pFnCheckForRagdollRecovery )
		pFnCheckForRagdollRecovery = (UFunction*) UObject::GObjObjects()->Data[ 54129 ];

	USFXCustomAction_DamageReaction_execCheckForRagdollRecovery_Parms CheckForRagdollRecovery_Parms;

	this->ProcessEvent ( pFnCheckForRagdollRecovery, &CheckForRagdollRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_DamageReaction::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 54125 ];

	USFXCustomAction_DamageReaction_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_DamageReaction::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54124 ];

	USFXCustomAction_DamageReaction_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.OnCustomActionTimeUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_DamageReaction::OnCustomActionTimeUp ( )
{
	static UFunction* pFnOnCustomActionTimeUp = NULL;

	if ( ! pFnOnCustomActionTimeUp )
		pFnOnCustomActionTimeUp = (UFunction*) UObject::GObjObjects()->Data[ 54123 ];

	USFXCustomAction_DamageReaction_execOnCustomActionTimeUp_Parms OnCustomActionTimeUp_Parms;

	this->ProcessEvent ( pFnOnCustomActionTimeUp, &OnCustomActionTimeUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_DamageReaction::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54122 ];

	USFXCustomAction_DamageReaction_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_DamageReaction.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class AController*             Inst                           ( CPF_OptionalParm | CPF_Parm )

void USFXCustomAction_DamageReaction::Init ( struct FVector HitLocation, struct FVector HitNormal, struct FTraceHitInfo HitInfo, unsigned long bPlayImpact, class AController* Inst )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 54116 ];

	USFXCustomAction_DamageReaction_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &Init_Parms.HitInfo, &HitInfo, 0x1C );
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.Inst = Inst;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.setshakelfreq
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Z                              ( CPF_Parm )

void USFXGameModeOrbital::setshakelfreq ( float X, float Y, float Z )
{
	static UFunction* pFnsetshakelfreq = NULL;

	if ( ! pFnsetshakelfreq )
		pFnsetshakelfreq = (UFunction*) UObject::GObjObjects()->Data[ 56566 ];

	USFXGameModeOrbital_execsetshakelfreq_Parms setshakelfreq_Parms;
	setshakelfreq_Parms.X = X;
	setshakelfreq_Parms.Y = Y;
	setshakelfreq_Parms.Z = Z;

	this->ProcessEvent ( pFnsetshakelfreq, &setshakelfreq_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.setshakelamp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Z                              ( CPF_Parm )

void USFXGameModeOrbital::setshakelamp ( float X, float Y, float Z )
{
	static UFunction* pFnsetshakelamp = NULL;

	if ( ! pFnsetshakelamp )
		pFnsetshakelamp = (UFunction*) UObject::GObjObjects()->Data[ 56562 ];

	USFXGameModeOrbital_execsetshakelamp_Parms setshakelamp_Parms;
	setshakelamp_Parms.X = X;
	setshakelamp_Parms.Y = Y;
	setshakelamp_Parms.Z = Z;

	this->ProcessEvent ( pFnsetshakelamp, &setshakelamp_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.setshakerfreq
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Z                              ( CPF_Parm )

void USFXGameModeOrbital::setshakerfreq ( float X, float Y, float Z )
{
	static UFunction* pFnsetshakerfreq = NULL;

	if ( ! pFnsetshakerfreq )
		pFnsetshakerfreq = (UFunction*) UObject::GObjObjects()->Data[ 56558 ];

	USFXGameModeOrbital_execsetshakerfreq_Parms setshakerfreq_Parms;
	setshakerfreq_Parms.X = X;
	setshakerfreq_Parms.Y = Y;
	setshakerfreq_Parms.Z = Z;

	this->ProcessEvent ( pFnsetshakerfreq, &setshakerfreq_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.setshakeramp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          X                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          Z                              ( CPF_Parm )

void USFXGameModeOrbital::setshakeramp ( float X, float Y, float Z )
{
	static UFunction* pFnsetshakeramp = NULL;

	if ( ! pFnsetshakeramp )
		pFnsetshakeramp = (UFunction*) UObject::GObjObjects()->Data[ 56554 ];

	USFXGameModeOrbital_execsetshakeramp_Parms setshakeramp_Parms;
	setshakeramp_Parms.X = X;
	setshakeramp_Parms.Y = Y;
	setshakeramp_Parms.Z = Z;

	this->ProcessEvent ( pFnsetshakeramp, &setshakeramp_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.setshaket
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          T                              ( CPF_Parm )

void USFXGameModeOrbital::setshaket ( float T )
{
	static UFunction* pFnsetshaket = NULL;

	if ( ! pFnsetshaket )
		pFnsetshaket = (UFunction*) UObject::GObjObjects()->Data[ 56552 ];

	USFXGameModeOrbital_execsetshaket_Parms setshaket_Parms;
	setshaket_Parms.T = T;

	this->ProcessEvent ( pFnsetshaket, &setshaket_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.SetResourceRetrievalFactor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          F                              ( CPF_Parm )

void USFXGameModeOrbital::SetResourceRetrievalFactor ( float F )
{
	static UFunction* pFnSetResourceRetrievalFactor = NULL;

	if ( ! pFnSetResourceRetrievalFactor )
		pFnSetResourceRetrievalFactor = (UFunction*) UObject::GObjObjects()->Data[ 56550 ];

	USFXGameModeOrbital_execSetResourceRetrievalFactor_Parms SetResourceRetrievalFactor_Parms;
	SetResourceRetrievalFactor_Parms.F = F;

	this->ProcessEvent ( pFnSetResourceRetrievalFactor, &SetResourceRetrievalFactor_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.ToggleProbeDebug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeOrbital::ToggleProbeDebug ( )
{
	static UFunction* pFnToggleProbeDebug = NULL;

	if ( ! pFnToggleProbeDebug )
		pFnToggleProbeDebug = (UFunction*) UObject::GObjObjects()->Data[ 56549 ];

	USFXGameModeOrbital_execToggleProbeDebug_Parms ToggleProbeDebug_Parms;

	this->ProcessEvent ( pFnToggleProbeDebug, &ToggleProbeDebug_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.SetProbeTime
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          T                              ( CPF_Parm )

void USFXGameModeOrbital::SetProbeTime ( float T )
{
	static UFunction* pFnSetProbeTime = NULL;

	if ( ! pFnSetProbeTime )
		pFnSetProbeTime = (UFunction*) UObject::GObjObjects()->Data[ 56547 ];

	USFXGameModeOrbital_execSetProbeTime_Parms SetProbeTime_Parms;
	SetProbeTime_Parms.T = T;

	this->ProcessEvent ( pFnSetProbeTime, &SetProbeTime_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.SetProbeControl
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          A                              ( CPF_Parm )
// float                          T                              ( CPF_Parm )

void USFXGameModeOrbital::SetProbeControl ( float A, float T )
{
	static UFunction* pFnSetProbeControl = NULL;

	if ( ! pFnSetProbeControl )
		pFnSetProbeControl = (UFunction*) UObject::GObjObjects()->Data[ 56544 ];

	USFXGameModeOrbital_execSetProbeControl_Parms SetProbeControl_Parms;
	SetProbeControl_Parms.A = A;
	SetProbeControl_Parms.T = T;

	this->ProcessEvent ( pFnSetProbeControl, &SetProbeControl_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.SetReticleScale
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          Scale                          ( CPF_Parm )

void USFXGameModeOrbital::SetReticleScale ( float Scale )
{
	static UFunction* pFnSetReticleScale = NULL;

	if ( ! pFnSetReticleScale )
		pFnSetReticleScale = (UFunction*) UObject::GObjObjects()->Data[ 56542 ];

	USFXGameModeOrbital_execSetReticleScale_Parms SetReticleScale_Parms;
	SetReticleScale_Parms.Scale = Scale;

	this->ProcessEvent ( pFnSetReticleScale, &SetReticleScale_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.SetPlanetRotateSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          Speed                          ( CPF_Parm )

void USFXGameModeOrbital::SetPlanetRotateSpeed ( float Speed )
{
	static UFunction* pFnSetPlanetRotateSpeed = NULL;

	if ( ! pFnSetPlanetRotateSpeed )
		pFnSetPlanetRotateSpeed = (UFunction*) UObject::GObjObjects()->Data[ 56540 ];

	USFXGameModeOrbital_execSetPlanetRotateSpeed_Parms SetPlanetRotateSpeed_Parms;
	SetPlanetRotateSpeed_Parms.Speed = Speed;

	this->ProcessEvent ( pFnSetPlanetRotateSpeed, &SetPlanetRotateSpeed_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.SetScanRotateSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          Speed                          ( CPF_Parm )

void USFXGameModeOrbital::SetScanRotateSpeed ( float Speed )
{
	static UFunction* pFnSetScanRotateSpeed = NULL;

	if ( ! pFnSetScanRotateSpeed )
		pFnSetScanRotateSpeed = (UFunction*) UObject::GObjObjects()->Data[ 56538 ];

	USFXGameModeOrbital_execSetScanRotateSpeed_Parms SetScanRotateSpeed_Parms;
	SetScanRotateSpeed_Parms.Speed = Speed;

	this->ProcessEvent ( pFnSetScanRotateSpeed, &SetScanRotateSpeed_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.SetScanSpeed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          Speed                          ( CPF_Parm )

void USFXGameModeOrbital::SetScanSpeed ( float Speed )
{
	static UFunction* pFnSetScanSpeed = NULL;

	if ( ! pFnSetScanSpeed )
		pFnSetScanSpeed = (UFunction*) UObject::GObjObjects()->Data[ 56536 ];

	USFXGameModeOrbital_execSetScanSpeed_Parms SetScanSpeed_Parms;
	SetScanSpeed_Parms.Speed = Speed;

	this->ProcessEvent ( pFnSetScanSpeed, &SetScanSpeed_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.SetReticleRotMaxClamp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          P                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          R                              ( CPF_Parm )

void USFXGameModeOrbital::SetReticleRotMaxClamp ( float P, float Y, float R )
{
	static UFunction* pFnSetReticleRotMaxClamp = NULL;

	if ( ! pFnSetReticleRotMaxClamp )
		pFnSetReticleRotMaxClamp = (UFunction*) UObject::GObjObjects()->Data[ 56532 ];

	USFXGameModeOrbital_execSetReticleRotMaxClamp_Parms SetReticleRotMaxClamp_Parms;
	SetReticleRotMaxClamp_Parms.P = P;
	SetReticleRotMaxClamp_Parms.Y = Y;
	SetReticleRotMaxClamp_Parms.R = R;

	this->ProcessEvent ( pFnSetReticleRotMaxClamp, &SetReticleRotMaxClamp_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.SetReticleRotMinClamp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          P                              ( CPF_Parm )
// float                          Y                              ( CPF_Parm )
// float                          R                              ( CPF_Parm )

void USFXGameModeOrbital::SetReticleRotMinClamp ( float P, float Y, float R )
{
	static UFunction* pFnSetReticleRotMinClamp = NULL;

	if ( ! pFnSetReticleRotMinClamp )
		pFnSetReticleRotMinClamp = (UFunction*) UObject::GObjObjects()->Data[ 56528 ];

	USFXGameModeOrbital_execSetReticleRotMinClamp_Parms SetReticleRotMinClamp_Parms;
	SetReticleRotMinClamp_Parms.P = P;
	SetReticleRotMinClamp_Parms.Y = Y;
	SetReticleRotMinClamp_Parms.R = R;

	this->ProcessEvent ( pFnSetReticleRotMinClamp, &SetReticleRotMinClamp_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.SetScanDist
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// float                          A                              ( CPF_Parm )

void USFXGameModeOrbital::SetScanDist ( float A )
{
	static UFunction* pFnSetScanDist = NULL;

	if ( ! pFnSetScanDist )
		pFnSetScanDist = (UFunction*) UObject::GObjObjects()->Data[ 56526 ];

	USFXGameModeOrbital_execSetScanDist_Parms SetScanDist_Parms;
	SetScanDist_Parms.A = A;

	this->ProcessEvent ( pFnSetScanDist, &SetScanDist_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.GiveResource
// [0x00020002] 
// Parameters infos:
// unsigned char                  FeatureType                    ( CPF_Parm )
// unsigned char                  MineralType                    ( CPF_Parm )
// int                            Amount                         ( CPF_Parm )

void USFXGameModeOrbital::GiveResource ( unsigned char FeatureType, unsigned char MineralType, int Amount )
{
	static UFunction* pFnGiveResource = NULL;

	if ( ! pFnGiveResource )
		pFnGiveResource = (UFunction*) UObject::GObjObjects()->Data[ 56516 ];

	USFXGameModeOrbital_execGiveResource_Parms GiveResource_Parms;
	GiveResource_Parms.FeatureType = FeatureType;
	GiveResource_Parms.MineralType = MineralType;
	GiveResource_Parms.Amount = Amount;

	this->ProcessEvent ( pFnGiveResource, &GiveResource_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.RingReticleUpDown
// [0x00020002] 
// Parameters infos:
// float                          Axis                           ( CPF_Parm )

void USFXGameModeOrbital::RingReticleUpDown ( float Axis )
{
	static UFunction* pFnRingReticleUpDown = NULL;

	if ( ! pFnRingReticleUpDown )
		pFnRingReticleUpDown = (UFunction*) UObject::GObjObjects()->Data[ 56514 ];

	USFXGameModeOrbital_execRingReticleUpDown_Parms RingReticleUpDown_Parms;
	RingReticleUpDown_Parms.Axis = Axis;

	this->ProcessEvent ( pFnRingReticleUpDown, &RingReticleUpDown_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.RingReticleLeftRight
// [0x00820002] 
// Parameters infos:
// float                          Axis                           ( CPF_Parm )

void USFXGameModeOrbital::RingReticleLeftRight ( float Axis )
{
	static UFunction* pFnRingReticleLeftRight = NULL;

	if ( ! pFnRingReticleLeftRight )
		pFnRingReticleLeftRight = (UFunction*) UObject::GObjObjects()->Data[ 56511 ];

	USFXGameModeOrbital_execRingReticleLeftRight_Parms RingReticleLeftRight_Parms;
	RingReticleLeftRight_Parms.Axis = Axis;

	this->ProcessEvent ( pFnRingReticleLeftRight, &RingReticleLeftRight_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.GetScannerSpeedUpgradeFactor
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXGameModeOrbital::GetScannerSpeedUpgradeFactor ( )
{
	static UFunction* pFnGetScannerSpeedUpgradeFactor = NULL;

	if ( ! pFnGetScannerSpeedUpgradeFactor )
		pFnGetScannerSpeedUpgradeFactor = (UFunction*) UObject::GObjObjects()->Data[ 56509 ];

	USFXGameModeOrbital_execGetScannerSpeedUpgradeFactor_Parms GetScannerSpeedUpgradeFactor_Parms;

	this->ProcessEvent ( pFnGetScannerSpeedUpgradeFactor, &GetScannerSpeedUpgradeFactor_Parms, NULL );

	return GetScannerSpeedUpgradeFactor_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeOrbital.UpdateReticle
// [0x00820002] 
// Parameters infos:

void USFXGameModeOrbital::UpdateReticle ( )
{
	static UFunction* pFnUpdateReticle = NULL;

	if ( ! pFnUpdateReticle )
		pFnUpdateReticle = (UFunction*) UObject::GObjObjects()->Data[ 56506 ];

	USFXGameModeOrbital_execUpdateReticle_Parms UpdateReticle_Parms;

	this->ProcessEvent ( pFnUpdateReticle, &UpdateReticle_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.PlanetLeftRight
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// float                          Axis                           ( CPF_Parm )

void USFXGameModeOrbital::PlanetLeftRight ( float Axis )
{
	static UFunction* pFnPlanetLeftRight = NULL;

	if ( ! pFnPlanetLeftRight )
		pFnPlanetLeftRight = (UFunction*) UObject::GObjObjects()->Data[ 56502 ];

	USFXGameModeOrbital_execPlanetLeftRight_Parms PlanetLeftRight_Parms;
	PlanetLeftRight_Parms.Axis = Axis;

	this->ProcessEvent ( pFnPlanetLeftRight, &PlanetLeftRight_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.LaunchProbe
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeOrbital::LaunchProbe ( )
{
	static UFunction* pFnLaunchProbe = NULL;

	if ( ! pFnLaunchProbe )
		pFnLaunchProbe = (UFunction*) UObject::GObjObjects()->Data[ 56496 ];

	USFXGameModeOrbital_execLaunchProbe_Parms LaunchProbe_Parms;

	this->ProcessEvent ( pFnLaunchProbe, &LaunchProbe_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.EndImpact
// [0x00820002] 
// Parameters infos:

void USFXGameModeOrbital::EndImpact ( )
{
	static UFunction* pFnEndImpact = NULL;

	if ( ! pFnEndImpact )
		pFnEndImpact = (UFunction*) UObject::GObjObjects()->Data[ 56482 ];

	USFXGameModeOrbital_execEndImpact_Parms EndImpact_Parms;

	this->ProcessEvent ( pFnEndImpact, &EndImpact_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.ShowProbeImpactVFX
// [0x00020002] 
// Parameters infos:
// class UBioPlanet*              PlanetData                     ( CPF_Parm )
// struct FVector                 pos                            ( CPF_Parm )
// class AInterpActor*            Planet                         ( CPF_Parm )

void USFXGameModeOrbital::ShowProbeImpactVFX ( class UBioPlanet* PlanetData, struct FVector pos, class AInterpActor* Planet )
{
	static UFunction* pFnShowProbeImpactVFX = NULL;

	if ( ! pFnShowProbeImpactVFX )
		pFnShowProbeImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 56477 ];

	USFXGameModeOrbital_execShowProbeImpactVFX_Parms ShowProbeImpactVFX_Parms;
	ShowProbeImpactVFX_Parms.PlanetData = PlanetData;
	memcpy ( &ShowProbeImpactVFX_Parms.pos, &pos, 0xC );
	ShowProbeImpactVFX_Parms.Planet = Planet;

	this->ProcessEvent ( pFnShowProbeImpactVFX, &ShowProbeImpactVFX_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.ProbeImpact
// [0x00820002] 
// Parameters infos:

void USFXGameModeOrbital::ProbeImpact ( )
{
	static UFunction* pFnProbeImpact = NULL;

	if ( ! pFnProbeImpact )
		pFnProbeImpact = (UFunction*) UObject::GObjObjects()->Data[ 56474 ];

	USFXGameModeOrbital_execProbeImpact_Parms ProbeImpact_Parms;

	this->ProcessEvent ( pFnProbeImpact, &ProbeImpact_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.StopScanning
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeOrbital::StopScanning ( )
{
	static UFunction* pFnStopScanning = NULL;

	if ( ! pFnStopScanning )
		pFnStopScanning = (UFunction*) UObject::GObjObjects()->Data[ 56471 ];

	USFXGameModeOrbital_execStopScanning_Parms StopScanning_Parms;

	this->ProcessEvent ( pFnStopScanning, &StopScanning_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.StartScanning
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeOrbital::StartScanning ( )
{
	static UFunction* pFnStartScanning = NULL;

	if ( ! pFnStartScanning )
		pFnStartScanning = (UFunction*) UObject::GObjObjects()->Data[ 56467 ];

	USFXGameModeOrbital_execStartScanning_Parms StartScanning_Parms;

	this->ProcessEvent ( pFnStartScanning, &StartScanning_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.SetButtonLabel
// [0x00820002] 
// Parameters infos:
// struct FString                 sButton                        ( CPF_Parm | CPF_NeedCtorLink )

void USFXGameModeOrbital::SetButtonLabel ( struct FString sButton )
{
	static UFunction* pFnSetButtonLabel = NULL;

	if ( ! pFnSetButtonLabel )
		pFnSetButtonLabel = (UFunction*) UObject::GObjObjects()->Data[ 56459 ];

	USFXGameModeOrbital_execSetButtonLabel_Parms SetButtonLabel_Parms;
	memcpy ( &SetButtonLabel_Parms.sButton, &sButton, 0xC );

	this->ProcessEvent ( pFnSetButtonLabel, &SetButtonLabel_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.SetLTriggerLabelVisible
// [0x00820002] 
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )

void USFXGameModeOrbital::SetLTriggerLabelVisible ( unsigned long bShow )
{
	static UFunction* pFnSetLTriggerLabelVisible = NULL;

	if ( ! pFnSetLTriggerLabelVisible )
		pFnSetLTriggerLabelVisible = (UFunction*) UObject::GObjObjects()->Data[ 56453 ];

	USFXGameModeOrbital_execSetLTriggerLabelVisible_Parms SetLTriggerLabelVisible_Parms;
	SetLTriggerLabelVisible_Parms.bShow = bShow;

	this->ProcessEvent ( pFnSetLTriggerLabelVisible, &SetLTriggerLabelVisible_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.SetRTriggerLabelVisible
// [0x00820002] 
// Parameters infos:
// unsigned long                  bShow                          ( CPF_Parm )

void USFXGameModeOrbital::SetRTriggerLabelVisible ( unsigned long bShow )
{
	static UFunction* pFnSetRTriggerLabelVisible = NULL;

	if ( ! pFnSetRTriggerLabelVisible )
		pFnSetRTriggerLabelVisible = (UFunction*) UObject::GObjObjects()->Data[ 56447 ];

	USFXGameModeOrbital_execSetRTriggerLabelVisible_Parms SetRTriggerLabelVisible_Parms;
	SetRTriggerLabelVisible_Parms.bShow = bShow;

	this->ProcessEvent ( pFnSetRTriggerLabelVisible, &SetRTriggerLabelVisible_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.UpdateProbeHudElement
// [0x00820002] 
// Parameters infos:
// int                            nProbes                        ( CPF_Parm )

void USFXGameModeOrbital::UpdateProbeHudElement ( int nProbes )
{
	static UFunction* pFnUpdateProbeHudElement = NULL;

	if ( ! pFnUpdateProbeHudElement )
		pFnUpdateProbeHudElement = (UFunction*) UObject::GObjObjects()->Data[ 56441 ];

	USFXGameModeOrbital_execUpdateProbeHudElement_Parms UpdateProbeHudElement_Parms;
	UpdateProbeHudElement_Parms.nProbes = nProbes;

	this->ProcessEvent ( pFnUpdateProbeHudElement, &UpdateProbeHudElement_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.ToggleMouseLock
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// unsigned long                  bNewMouseLock                  ( CPF_Parm )

void USFXGameModeOrbital::ToggleMouseLock ( unsigned long bNewMouseLock )
{
	static UFunction* pFnToggleMouseLock = NULL;

	if ( ! pFnToggleMouseLock )
		pFnToggleMouseLock = (UFunction*) UObject::GObjObjects()->Data[ 56437 ];

	USFXGameModeOrbital_execToggleMouseLock_Parms ToggleMouseLock_Parms;
	ToggleMouseLock_Parms.bNewMouseLock = bNewMouseLock;

	this->ProcessEvent ( pFnToggleMouseLock, &ToggleMouseLock_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.StopFeatureSounds
// [0x00020002] 
// Parameters infos:

void USFXGameModeOrbital::StopFeatureSounds ( )
{
	static UFunction* pFnStopFeatureSounds = NULL;

	if ( ! pFnStopFeatureSounds )
		pFnStopFeatureSounds = (UFunction*) UObject::GObjObjects()->Data[ 56435 ];

	USFXGameModeOrbital_execStopFeatureSounds_Parms StopFeatureSounds_Parms;

	this->ProcessEvent ( pFnStopFeatureSounds, &StopFeatureSounds_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.StartFeatureSounds
// [0x00020002] 
// Parameters infos:

void USFXGameModeOrbital::StartFeatureSounds ( )
{
	static UFunction* pFnStartFeatureSounds = NULL;

	if ( ! pFnStartFeatureSounds )
		pFnStartFeatureSounds = (UFunction*) UObject::GObjObjects()->Data[ 56431 ];

	USFXGameModeOrbital_execStartFeatureSounds_Parms StartFeatureSounds_Parms;

	this->ProcessEvent ( pFnStartFeatureSounds, &StartFeatureSounds_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.GetRelativeReticlePosition
// [0x00820002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USFXGameModeOrbital::GetRelativeReticlePosition ( )
{
	static UFunction* pFnGetRelativeReticlePosition = NULL;

	if ( ! pFnGetRelativeReticlePosition )
		pFnGetRelativeReticlePosition = (UFunction*) UObject::GObjObjects()->Data[ 56427 ];

	USFXGameModeOrbital_execGetRelativeReticlePosition_Parms GetRelativeReticlePosition_Parms;

	this->ProcessEvent ( pFnGetRelativeReticlePosition, &GetRelativeReticlePosition_Parms, NULL );

	return GetRelativeReticlePosition_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeOrbital.UpdateAnomalyIndicator
// [0x00820002] 
// Parameters infos:
// struct FVector                 toLanding                      ( CPF_Parm )
// float                          DeltaTime                      ( CPF_Parm )
// unsigned long                  flashIndicator                 ( CPF_Parm )

void USFXGameModeOrbital::UpdateAnomalyIndicator ( struct FVector toLanding, float DeltaTime, unsigned long flashIndicator )
{
	static UFunction* pFnUpdateAnomalyIndicator = NULL;

	if ( ! pFnUpdateAnomalyIndicator )
		pFnUpdateAnomalyIndicator = (UFunction*) UObject::GObjObjects()->Data[ 56417 ];

	USFXGameModeOrbital_execUpdateAnomalyIndicator_Parms UpdateAnomalyIndicator_Parms;
	memcpy ( &UpdateAnomalyIndicator_Parms.toLanding, &toLanding, 0xC );
	UpdateAnomalyIndicator_Parms.DeltaTime = DeltaTime;
	UpdateAnomalyIndicator_Parms.flashIndicator = flashIndicator;

	this->ProcessEvent ( pFnUpdateAnomalyIndicator, &UpdateAnomalyIndicator_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.ShowHUDAnomalyIndicator
// [0x00020002] 
// Parameters infos:

void USFXGameModeOrbital::ShowHUDAnomalyIndicator ( )
{
	static UFunction* pFnShowHUDAnomalyIndicator = NULL;

	if ( ! pFnShowHUDAnomalyIndicator )
		pFnShowHUDAnomalyIndicator = (UFunction*) UObject::GObjObjects()->Data[ 56413 ];

	USFXGameModeOrbital_execShowHUDAnomalyIndicator_Parms ShowHUDAnomalyIndicator_Parms;

	this->ProcessEvent ( pFnShowHUDAnomalyIndicator, &ShowHUDAnomalyIndicator_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.ScanResources
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USFXGameModeOrbital::ScanResources ( float DeltaTime )
{
	static UFunction* pFnScanResources = NULL;

	if ( ! pFnScanResources )
		pFnScanResources = (UFunction*) UObject::GObjObjects()->Data[ 56394 ];

	USFXGameModeOrbital_execScanResources_Parms ScanResources_Parms;
	ScanResources_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnScanResources, &ScanResources_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.ScannedResourceAmount
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDistTo                        ( CPF_Parm )
// int                            ResourceAmount                 ( CPF_Parm )

int USFXGameModeOrbital::ScannedResourceAmount ( float fDistTo, int ResourceAmount )
{
	static UFunction* pFnScannedResourceAmount = NULL;

	if ( ! pFnScannedResourceAmount )
		pFnScannedResourceAmount = (UFunction*) UObject::GObjObjects()->Data[ 56390 ];

	USFXGameModeOrbital_execScannedResourceAmount_Parms ScannedResourceAmount_Parms;
	ScannedResourceAmount_Parms.fDistTo = fDistTo;
	ScannedResourceAmount_Parms.ResourceAmount = ResourceAmount;

	this->ProcessEvent ( pFnScannedResourceAmount, &ScannedResourceAmount_Parms, NULL );

	return ScannedResourceAmount_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeOrbital.Update
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USFXGameModeOrbital::Update ( float DeltaTime )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 56382 ];

	USFXGameModeOrbital_execUpdate_Parms Update_Parms;
	Update_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.UpdatePlanetScale
// [0x00820002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USFXGameModeOrbital::UpdatePlanetScale ( float DeltaTime )
{
	static UFunction* pFnUpdatePlanetScale = NULL;

	if ( ! pFnUpdatePlanetScale )
		pFnUpdatePlanetScale = (UFunction*) UObject::GObjObjects()->Data[ 56377 ];

	USFXGameModeOrbital_execUpdatePlanetScale_Parms UpdatePlanetScale_Parms;
	UpdatePlanetScale_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdatePlanetScale, &UpdatePlanetScale_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.ResetProbe
// [0x00020002] 
// Parameters infos:

void USFXGameModeOrbital::ResetProbe ( )
{
	static UFunction* pFnResetProbe = NULL;

	if ( ! pFnResetProbe )
		pFnResetProbe = (UFunction*) UObject::GObjObjects()->Data[ 56375 ];

	USFXGameModeOrbital_execResetProbe_Parms ResetProbe_Parms;

	this->ProcessEvent ( pFnResetProbe, &ResetProbe_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.CanExit
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeOrbital::eventCanExit ( )
{
	static UFunction* pFnCanExit = NULL;

	if ( ! pFnCanExit )
		pFnCanExit = (UFunction*) UObject::GObjObjects()->Data[ 56373 ];

	USFXGameModeOrbital_eventCanExit_Parms CanExit_Parms;

	this->ProcessEvent ( pFnCanExit, &CanExit_Parms, NULL );

	return CanExit_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeOrbital.GetGameData
// [0x00020002] 
// Parameters infos:
// class UBioSeqAct_OrbitalGame*  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UBioSeqAct_OrbitalGame* USFXGameModeOrbital::GetGameData ( )
{
	static UFunction* pFnGetGameData = NULL;

	if ( ! pFnGetGameData )
		pFnGetGameData = (UFunction*) UObject::GObjObjects()->Data[ 56370 ];

	USFXGameModeOrbital_execGetGameData_Parms GetGameData_Parms;

	this->ProcessEvent ( pFnGetGameData, &GetGameData_Parms, NULL );

	return GetGameData_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeOrbital.BeginExitGalaxyMap
// [0x00020002] 
// Parameters infos:
// unsigned long                  resize                         ( CPF_Parm )

void USFXGameModeOrbital::BeginExitGalaxyMap ( unsigned long resize )
{
	static UFunction* pFnBeginExitGalaxyMap = NULL;

	if ( ! pFnBeginExitGalaxyMap )
		pFnBeginExitGalaxyMap = (UFunction*) UObject::GObjObjects()->Data[ 56368 ];

	USFXGameModeOrbital_execBeginExitGalaxyMap_Parms BeginExitGalaxyMap_Parms;
	BeginExitGalaxyMap_Parms.resize = resize;

	this->ProcessEvent ( pFnBeginExitGalaxyMap, &BeginExitGalaxyMap_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.Deactivated
// [0x00020002] 
// Parameters infos:

void USFXGameModeOrbital::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 56364 ];

	USFXGameModeOrbital_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.UpdatePlanetRichness
// [0x00820002] 
// Parameters infos:

void USFXGameModeOrbital::UpdatePlanetRichness ( )
{
	static UFunction* pFnUpdatePlanetRichness = NULL;

	if ( ! pFnUpdatePlanetRichness )
		pFnUpdatePlanetRichness = (UFunction*) UObject::GObjObjects()->Data[ 56352 ];

	USFXGameModeOrbital_execUpdatePlanetRichness_Parms UpdatePlanetRichness_Parms;

	this->ProcessEvent ( pFnUpdatePlanetRichness, &UpdatePlanetRichness_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.Activated
// [0x00820002] 
// Parameters infos:

void USFXGameModeOrbital::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 56343 ];

	USFXGameModeOrbital_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.DoPatchDefaultPropertyUpdates
// [0x00020002] 
// Parameters infos:

void USFXGameModeOrbital::DoPatchDefaultPropertyUpdates ( )
{
	static UFunction* pFnDoPatchDefaultPropertyUpdates = NULL;

	if ( ! pFnDoPatchDefaultPropertyUpdates )
		pFnDoPatchDefaultPropertyUpdates = (UFunction*) UObject::GObjObjects()->Data[ 56342 ];

	USFXGameModeOrbital_execDoPatchDefaultPropertyUpdates_Parms DoPatchDefaultPropertyUpdates_Parms;

	this->ProcessEvent ( pFnDoPatchDefaultPropertyUpdates, &DoPatchDefaultPropertyUpdates_Parms, NULL );
};

// Function SFXGame.SFXGameModeOrbital.GetCameraMode
// [0x00420002] 
// Parameters infos:
// class USFXCameraMode*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXCameraMode*          OldCameraMode                  ( CPF_Parm )
// int                            PreserveTarget                 ( CPF_Parm | CPF_OutParm )
// float                          TransitionTime                 ( CPF_Parm | CPF_OutParm )
// class USFXCameraMode_Interpolate* Transition                     ( CPF_Parm | CPF_OutParm )

class USFXCameraMode* USFXGameModeOrbital::GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition )
{
	static UFunction* pFnGetCameraMode = NULL;

	if ( ! pFnGetCameraMode )
		pFnGetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 56336 ];

	USFXGameModeOrbital_execGetCameraMode_Parms GetCameraMode_Parms;
	GetCameraMode_Parms.OldCameraMode = OldCameraMode;

	this->ProcessEvent ( pFnGetCameraMode, &GetCameraMode_Parms, NULL );

	if ( PreserveTarget )
		*PreserveTarget = GetCameraMode_Parms.PreserveTarget;

	if ( TransitionTime )
		*TransitionTime = GetCameraMode_Parms.TransitionTime;

	if ( Transition )
		*Transition = GetCameraMode_Parms.Transition;

	return GetCameraMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeGalaxy.TabLeft
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeGalaxy::TabLeft ( )
{
	static UFunction* pFnTabLeft = NULL;

	if ( ! pFnTabLeft )
		pFnTabLeft = (UFunction*) UObject::GObjObjects()->Data[ 56147 ];

	USFXGameModeGalaxy_execTabLeft_Parms TabLeft_Parms;

	this->ProcessEvent ( pFnTabLeft, &TabLeft_Parms, NULL );
};

// Function SFXGame.SFXGameModeGalaxy.TabRight
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeGalaxy::TabRight ( )
{
	static UFunction* pFnTabRight = NULL;

	if ( ! pFnTabRight )
		pFnTabRight = (UFunction*) UObject::GObjObjects()->Data[ 56142 ];

	USFXGameModeGalaxy_execTabRight_Parms TabRight_Parms;

	this->ProcessEvent ( pFnTabRight, &TabRight_Parms, NULL );
};

// Function SFXGame.SFXGameModeGalaxy.StopFuel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeGalaxy::StopFuel ( )
{
	static UFunction* pFnStopFuel = NULL;

	if ( ! pFnStopFuel )
		pFnStopFuel = (UFunction*) UObject::GObjObjects()->Data[ 56140 ];

	USFXGameModeGalaxy_execStopFuel_Parms StopFuel_Parms;

	this->ProcessEvent ( pFnStopFuel, &StopFuel_Parms, NULL );
};

// Function SFXGame.SFXGameModeGalaxy.StartFuel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeGalaxy::StartFuel ( )
{
	static UFunction* pFnStartFuel = NULL;

	if ( ! pFnStartFuel )
		pFnStartFuel = (UFunction*) UObject::GObjObjects()->Data[ 56138 ];

	USFXGameModeGalaxy_execStartFuel_Parms StartFuel_Parms;

	this->ProcessEvent ( pFnStartFuel, &StartFuel_Parms, NULL );
};

// Function SFXGame.SFXGameModeGalaxy.BuyFuel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeGalaxy::BuyFuel ( )
{
	static UFunction* pFnBuyFuel = NULL;

	if ( ! pFnBuyFuel )
		pFnBuyFuel = (UFunction*) UObject::GObjObjects()->Data[ 56135 ];

	USFXGameModeGalaxy_execBuyFuel_Parms BuyFuel_Parms;

	this->ProcessEvent ( pFnBuyFuel, &BuyFuel_Parms, NULL );
};

// Function SFXGame.SFXGameModeGalaxy.BuyProbes
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeGalaxy::BuyProbes ( )
{
	static UFunction* pFnBuyProbes = NULL;

	if ( ! pFnBuyProbes )
		pFnBuyProbes = (UFunction*) UObject::GObjObjects()->Data[ 56133 ];

	USFXGameModeGalaxy_execBuyProbes_Parms BuyProbes_Parms;

	this->ProcessEvent ( pFnBuyProbes, &BuyProbes_Parms, NULL );
};

// Function SFXGame.SFXGameModeGalaxy.BeginExitGalaxyMap
// [0x00020000] 
// Parameters infos:
// unsigned long                  resize                         ( CPF_Parm )

void USFXGameModeGalaxy::BeginExitGalaxyMap ( unsigned long resize )
{
	static UFunction* pFnBeginExitGalaxyMap = NULL;

	if ( ! pFnBeginExitGalaxyMap )
		pFnBeginExitGalaxyMap = (UFunction*) UObject::GObjObjects()->Data[ 56131 ];

	USFXGameModeGalaxy_execBeginExitGalaxyMap_Parms BeginExitGalaxyMap_Parms;
	BeginExitGalaxyMap_Parms.resize = resize;

	this->ProcessEvent ( pFnBeginExitGalaxyMap, &BeginExitGalaxyMap_Parms, NULL );
};

// Function SFXGame.SFXGameModeGalaxy.CanExit
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeGalaxy::CanExit ( )
{
	static UFunction* pFnCanExit = NULL;

	if ( ! pFnCanExit )
		pFnCanExit = (UFunction*) UObject::GObjObjects()->Data[ 56129 ];

	USFXGameModeGalaxy_execCanExit_Parms CanExit_Parms;

	this->ProcessEvent ( pFnCanExit, &CanExit_Parms, NULL );

	return CanExit_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeGalaxy.HACK_GetCameraMode
// [0x00020002] 
// Parameters infos:
// class USFXCameraMode*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXCameraMode* USFXGameModeGalaxy::HACK_GetCameraMode ( )
{
	static UFunction* pFnHACK_GetCameraMode = NULL;

	if ( ! pFnHACK_GetCameraMode )
		pFnHACK_GetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 56127 ];

	USFXGameModeGalaxy_execHACK_GetCameraMode_Parms HACK_GetCameraMode_Parms;

	this->ProcessEvent ( pFnHACK_GetCameraMode, &HACK_GetCameraMode_Parms, NULL );

	return HACK_GetCameraMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeGalaxy.GetCameraMode
// [0x00420002] 
// Parameters infos:
// class USFXCameraMode*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXCameraMode*          OldCameraMode                  ( CPF_Parm )
// int                            PreserveTarget                 ( CPF_Parm | CPF_OutParm )
// float                          TransitionTime                 ( CPF_Parm | CPF_OutParm )
// class USFXCameraMode_Interpolate* Transition                     ( CPF_Parm | CPF_OutParm )

class USFXCameraMode* USFXGameModeGalaxy::GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition )
{
	static UFunction* pFnGetCameraMode = NULL;

	if ( ! pFnGetCameraMode )
		pFnGetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 56121 ];

	USFXGameModeGalaxy_execGetCameraMode_Parms GetCameraMode_Parms;
	GetCameraMode_Parms.OldCameraMode = OldCameraMode;

	this->ProcessEvent ( pFnGetCameraMode, &GetCameraMode_Parms, NULL );

	if ( PreserveTarget )
		*PreserveTarget = GetCameraMode_Parms.PreserveTarget;

	if ( TransitionTime )
		*TransitionTime = GetCameraMode_Parms.TransitionTime;

	if ( Transition )
		*Transition = GetCameraMode_Parms.Transition;

	return GetCameraMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeGalaxy.Initialize
// [0x00020002] 
// Parameters infos:

void USFXGameModeGalaxy::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 56120 ];

	USFXGameModeGalaxy_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.BioPlayerVehicleSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioPlayerVehicleSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 42738 ];

	UBioPlayerVehicleSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioPlayerVehicleSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioPlayerVehicleSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 42733 ];

	UBioPlayerVehicleSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.BioPlaypenVolumeAdditive.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ABioPlaypenVolumeAdditive::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 42755 ];

	ABioPlaypenVolumeAdditive_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function SFXGame.BioPlaypenVolumeAdditive.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ABioPlaypenVolumeAdditive::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 42745 ];

	ABioPlaypenVolumeAdditive_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function SFXGame.BioPlaypenVolumeSubtractive.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ABioPlaypenVolumeSubtractive::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 42769 ];

	ABioPlaypenVolumeSubtractive_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function SFXGame.BioPlaypenVolumeSubtractive.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ABioPlaypenVolumeSubtractive::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 42762 ];

	ABioPlaypenVolumeSubtractive_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function SFXGame.BioPowerScriptDesign.HasRemainingShieldOfType
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )
// class UClass*                  ShieldClass                    ( CPF_Parm )

bool UBioPowerScriptDesign::HasRemainingShieldOfType ( class ABioPawn* oPawn, class UClass* ShieldClass )
{
	static UFunction* pFnHasRemainingShieldOfType = NULL;

	if ( ! pFnHasRemainingShieldOfType )
		pFnHasRemainingShieldOfType = (UFunction*) UObject::GObjObjects()->Data[ 43516 ];

	UBioPowerScriptDesign_execHasRemainingShieldOfType_Parms HasRemainingShieldOfType_Parms;
	HasRemainingShieldOfType_Parms.oPawn = oPawn;
	HasRemainingShieldOfType_Parms.ShieldClass = ShieldClass;

	this->ProcessEvent ( pFnHasRemainingShieldOfType, &HasRemainingShieldOfType_Parms, NULL );

	return HasRemainingShieldOfType_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.SpawnVFXAtLocation
// [0x00820002] 
// Parameters infos:
// struct FVector                 Location                       ( CPF_Parm )
// class UParticleSystem*         PS                             ( CPF_Parm )

void UBioPowerScriptDesign::SpawnVFXAtLocation ( struct FVector Location, class UParticleSystem* PS )
{
	static UFunction* pFnSpawnVFXAtLocation = NULL;

	if ( ! pFnSpawnVFXAtLocation )
		pFnSpawnVFXAtLocation = (UFunction*) UObject::GObjObjects()->Data[ 43507 ];

	UBioPowerScriptDesign_execSpawnVFXAtLocation_Parms SpawnVFXAtLocation_Parms;
	memcpy ( &SpawnVFXAtLocation_Parms.Location, &Location, 0xC );
	SpawnVFXAtLocation_Parms.PS = PS;

	this->ProcessEvent ( pFnSpawnVFXAtLocation, &SpawnVFXAtLocation_Parms, NULL );
};

// Function SFXGame.BioPowerScriptDesign.ImpactPlaceable
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// struct FVector                 Momentum                       ( CPF_Parm )
// float                          PlotPlaceableDamage            ( CPF_Parm )
// unsigned long                  bForceDamage                   ( CPF_OptionalParm | CPF_Parm )

bool UBioPowerScriptDesign::ImpactPlaceable ( class AActor* oCaster, class AActor* oImpacted, struct FVector Momentum, float PlotPlaceableDamage, unsigned long bForceDamage )
{
	static UFunction* pFnImpactPlaceable = NULL;

	if ( ! pFnImpactPlaceable )
		pFnImpactPlaceable = (UFunction*) UObject::GObjObjects()->Data[ 43495 ];

	UBioPowerScriptDesign_execImpactPlaceable_Parms ImpactPlaceable_Parms;
	ImpactPlaceable_Parms.oCaster = oCaster;
	ImpactPlaceable_Parms.oImpacted = oImpacted;
	memcpy ( &ImpactPlaceable_Parms.Momentum, &Momentum, 0xC );
	ImpactPlaceable_Parms.PlotPlaceableDamage = PlotPlaceableDamage;
	ImpactPlaceable_Parms.bForceDamage = bForceDamage;

	this->ProcessEvent ( pFnImpactPlaceable, &ImpactPlaceable_Parms, NULL );

	return ImpactPlaceable_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.RagdollPhysicsImpact
// [0x00820002] 
// Parameters infos:
// class APawn*                   oPawn                          ( CPF_Parm )
// class AActor*                  oImpactActor                   ( CPF_Parm )
// struct FVector                 vImpactDir                     ( CPF_Parm )
// float                          fVelocityToDamageMult          ( CPF_OptionalParm | CPF_Parm )

void UBioPowerScriptDesign::RagdollPhysicsImpact ( class APawn* oPawn, class AActor* oImpactActor, struct FVector vImpactDir, float fVelocityToDamageMult )
{
	static UFunction* pFnRagdollPhysicsImpact = NULL;

	if ( ! pFnRagdollPhysicsImpact )
		pFnRagdollPhysicsImpact = (UFunction*) UObject::GObjObjects()->Data[ 43472 ];

	UBioPowerScriptDesign_execRagdollPhysicsImpact_Parms RagdollPhysicsImpact_Parms;
	RagdollPhysicsImpact_Parms.oPawn = oPawn;
	RagdollPhysicsImpact_Parms.oImpactActor = oImpactActor;
	memcpy ( &RagdollPhysicsImpact_Parms.vImpactDir, &vImpactDir, 0xC );
	RagdollPhysicsImpact_Parms.fVelocityToDamageMult = fVelocityToDamageMult;

	this->ProcessEvent ( pFnRagdollPhysicsImpact, &RagdollPhysicsImpact_Parms, NULL );
};

// Function SFXGame.BioPowerScriptDesign.CheckBioticComboAchievement
// [0x00022002] 
// Parameters infos:
// class ABioPawn*                oCaster                        ( CPF_Parm )
// class ABioPawn*                oTarget                        ( CPF_Parm )
// unsigned long                  bOrderedByPlayer               ( CPF_Parm )

void UBioPowerScriptDesign::CheckBioticComboAchievement ( class ABioPawn* oCaster, class ABioPawn* oTarget, unsigned long bOrderedByPlayer )
{
	static UFunction* pFnCheckBioticComboAchievement = NULL;

	if ( ! pFnCheckBioticComboAchievement )
		pFnCheckBioticComboAchievement = (UFunction*) UObject::GObjObjects()->Data[ 43466 ];

	UBioPowerScriptDesign_execCheckBioticComboAchievement_Parms CheckBioticComboAchievement_Parms;
	CheckBioticComboAchievement_Parms.oCaster = oCaster;
	CheckBioticComboAchievement_Parms.oTarget = oTarget;
	CheckBioticComboAchievement_Parms.bOrderedByPlayer = bOrderedByPlayer;

	this->ProcessEvent ( pFnCheckBioticComboAchievement, &CheckBioticComboAchievement_Parms, NULL );
};

// Function SFXGame.BioPowerScriptDesign.RemoveBioticEffects
// [0x00022002] 
// Parameters infos:
// class ABioPawn*                oPawn                          ( CPF_Parm )
// unsigned long                  bRemoveStasis                  ( CPF_OptionalParm | CPF_Parm )

void UBioPowerScriptDesign::RemoveBioticEffects ( class ABioPawn* oPawn, unsigned long bRemoveStasis )
{
	static UFunction* pFnRemoveBioticEffects = NULL;

	if ( ! pFnRemoveBioticEffects )
		pFnRemoveBioticEffects = (UFunction*) UObject::GObjObjects()->Data[ 43455 ];

	UBioPowerScriptDesign_execRemoveBioticEffects_Parms RemoveBioticEffects_Parms;
	RemoveBioticEffects_Parms.oPawn = oPawn;
	RemoveBioticEffects_Parms.bRemoveStasis = bRemoveStasis;

	this->ProcessEvent ( pFnRemoveBioticEffects, &RemoveBioticEffects_Parms, NULL );
};

// Function SFXGame.BioPowerScriptDesign.HasEffectType
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class UClass*                  EffectClass                    ( CPF_Parm )

bool UBioPowerScriptDesign::HasEffectType ( class AActor* oTarget, class UClass* EffectClass )
{
	static UFunction* pFnHasEffectType = NULL;

	if ( ! pFnHasEffectType )
		pFnHasEffectType = (UFunction*) UObject::GObjObjects()->Data[ 43449 ];

	UBioPowerScriptDesign_execHasEffectType_Parms HasEffectType_Parms;
	HasEffectType_Parms.oTarget = oTarget;
	HasEffectType_Parms.EffectClass = EffectClass;

	this->ProcessEvent ( pFnHasEffectType, &HasEffectType_Parms, NULL );

	return HasEffectType_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.GetPhysicsLevelResistance
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

float UBioPowerScriptDesign::GetPhysicsLevelResistance ( class AActor* oTarget )
{
	static UFunction* pFnGetPhysicsLevelResistance = NULL;

	if ( ! pFnGetPhysicsLevelResistance )
		pFnGetPhysicsLevelResistance = (UFunction*) UObject::GObjObjects()->Data[ 43444 ];

	UBioPowerScriptDesign_execGetPhysicsLevelResistance_Parms GetPhysicsLevelResistance_Parms;
	GetPhysicsLevelResistance_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnGetPhysicsLevelResistance, &GetPhysicsLevelResistance_Parms, NULL );

	return GetPhysicsLevelResistance_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.GetBioticMultiplier
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

float UBioPowerScriptDesign::GetBioticMultiplier ( class AActor* oTarget )
{
	static UFunction* pFnGetBioticMultiplier = NULL;

	if ( ! pFnGetBioticMultiplier )
		pFnGetBioticMultiplier = (UFunction*) UObject::GObjObjects()->Data[ 43438 ];

	UBioPowerScriptDesign_execGetBioticMultiplier_Parms GetBioticMultiplier_Parms;
	GetBioticMultiplier_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnGetBioticMultiplier, &GetBioticMultiplier_Parms, NULL );

	return GetBioticMultiplier_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.GetWeaponDamage
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_Parm )

float UBioPowerScriptDesign::GetWeaponDamage ( class ASFXWeapon* Weapon, struct FVector HitLocation, class AActor* HitActor )
{
	static UFunction* pFnGetWeaponDamage = NULL;

	if ( ! pFnGetWeaponDamage )
		pFnGetWeaponDamage = (UFunction*) UObject::GObjObjects()->Data[ 43430 ];

	UBioPowerScriptDesign_execGetWeaponDamage_Parms GetWeaponDamage_Parms;
	GetWeaponDamage_Parms.Weapon = Weapon;
	memcpy ( &GetWeaponDamage_Parms.HitLocation, &HitLocation, 0xC );
	GetWeaponDamage_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnGetWeaponDamage, &GetWeaponDamage_Parms, NULL );

	return GetWeaponDamage_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.GetBulletsPerSecond
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

float UBioPowerScriptDesign::GetBulletsPerSecond ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnGetBulletsPerSecond = NULL;

	if ( ! pFnGetBulletsPerSecond )
		pFnGetBulletsPerSecond = (UFunction*) UObject::GObjObjects()->Data[ 43425 ];

	UBioPowerScriptDesign_execGetBulletsPerSecond_Parms GetBulletsPerSecond_Parms;
	GetBulletsPerSecond_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnGetBulletsPerSecond, &GetBulletsPerSecond_Parms, NULL );

	return GetBulletsPerSecond_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.LerpPowerParameter2D
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector2D               Parameter                      ( CPF_Parm )
// int                            PowerRank                      ( CPF_Parm )

float UBioPowerScriptDesign::LerpPowerParameter2D ( struct FVector2D Parameter, int PowerRank )
{
	static UFunction* pFnLerpPowerParameter2D = NULL;

	if ( ! pFnLerpPowerParameter2D )
		pFnLerpPowerParameter2D = (UFunction*) UObject::GObjObjects()->Data[ 43420 ];

	UBioPowerScriptDesign_execLerpPowerParameter2D_Parms LerpPowerParameter2D_Parms;
	memcpy ( &LerpPowerParameter2D_Parms.Parameter, &Parameter, 0x8 );
	LerpPowerParameter2D_Parms.PowerRank = PowerRank;

	this->ProcessEvent ( pFnLerpPowerParameter2D, &LerpPowerParameter2D_Parms, NULL );

	return LerpPowerParameter2D_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.LerpPowerParameter
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 Parameter                      ( CPF_Parm )
// int                            PowerRank                      ( CPF_Parm )

float UBioPowerScriptDesign::LerpPowerParameter ( struct FVector Parameter, int PowerRank )
{
	static UFunction* pFnLerpPowerParameter = NULL;

	if ( ! pFnLerpPowerParameter )
		pFnLerpPowerParameter = (UFunction*) UObject::GObjObjects()->Data[ 43415 ];

	UBioPowerScriptDesign_execLerpPowerParameter_Parms LerpPowerParameter_Parms;
	memcpy ( &LerpPowerParameter_Parms.Parameter, &Parameter, 0xC );
	LerpPowerParameter_Parms.PowerRank = PowerRank;

	this->ProcessEvent ( pFnLerpPowerParameter, &LerpPowerParameter_Parms, NULL );

	return LerpPowerParameter_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.GetPowerRank
// [0x00420002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// int                            TalentID                       ( CPF_Parm )
// int                            PowerRank                      ( CPF_Parm | CPF_OutParm )

bool UBioPowerScriptDesign::GetPowerRank ( class AActor* oActor, int TalentID, int* PowerRank )
{
	static UFunction* pFnGetPowerRank = NULL;

	if ( ! pFnGetPowerRank )
		pFnGetPowerRank = (UFunction*) UObject::GObjObjects()->Data[ 43408 ];

	UBioPowerScriptDesign_execGetPowerRank_Parms GetPowerRank_Parms;
	GetPowerRank_Parms.oActor = oActor;
	GetPowerRank_Parms.TalentID = TalentID;

	this->ProcessEvent ( pFnGetPowerRank, &GetPowerRank_Parms, NULL );

	if ( PowerRank )
		*PowerRank = GetPowerRank_Parms.PowerRank;

	return GetPowerRank_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.CanBeRagdolledByPowers
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )

bool UBioPowerScriptDesign::CanBeRagdolledByPowers ( class ABioPawn* oPawn )
{
	static UFunction* pFnCanBeRagdolledByPowers = NULL;

	if ( ! pFnCanBeRagdolledByPowers )
		pFnCanBeRagdolledByPowers = (UFunction*) UObject::GObjObjects()->Data[ 43404 ];

	UBioPowerScriptDesign_execCanBeRagdolledByPowers_Parms CanBeRagdolledByPowers_Parms;
	CanBeRagdolledByPowers_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnCanBeRagdolledByPowers, &CanBeRagdolledByPowers_Parms, NULL );

	return CanBeRagdolledByPowers_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.IsInRagdoll
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool UBioPowerScriptDesign::IsInRagdoll ( class AActor* oActor )
{
	static UFunction* pFnIsInRagdoll = NULL;

	if ( ! pFnIsInRagdoll )
		pFnIsInRagdoll = (UFunction*) UObject::GObjObjects()->Data[ 43400 ];

	UBioPowerScriptDesign_execIsInRagdoll_Parms IsInRagdoll_Parms;
	IsInRagdoll_Parms.oActor = oActor;

	this->ProcessEvent ( pFnIsInRagdoll, &IsInRagdoll_Parms, NULL );

	return IsInRagdoll_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.PlayRandomReaction
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// TArray< unsigned char >        Actions                        ( CPF_Parm | CPF_NeedCtorLink )

bool UBioPowerScriptDesign::PlayRandomReaction ( class ABioPawn* oPawn, class AController* InstigatedBy, TArray< unsigned char > Actions )
{
	static UFunction* pFnPlayRandomReaction = NULL;

	if ( ! pFnPlayRandomReaction )
		pFnPlayRandomReaction = (UFunction*) UObject::GObjObjects()->Data[ 43388 ];

	UBioPowerScriptDesign_execPlayRandomReaction_Parms PlayRandomReaction_Parms;
	PlayRandomReaction_Parms.oPawn = oPawn;
	PlayRandomReaction_Parms.InstigatedBy = InstigatedBy;
	memcpy ( &PlayRandomReaction_Parms.Actions, &Actions, 0xC );

	this->ProcessEvent ( pFnPlayRandomReaction, &PlayRandomReaction_Parms, NULL );

	return PlayRandomReaction_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.HasAnimatedReactions
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )
// TArray< unsigned char >        Actions                        ( CPF_Parm | CPF_NeedCtorLink )

int UBioPowerScriptDesign::HasAnimatedReactions ( class ABioPawn* oPawn, TArray< unsigned char > Actions )
{
	static UFunction* pFnHasAnimatedReactions = NULL;

	if ( ! pFnHasAnimatedReactions )
		pFnHasAnimatedReactions = (UFunction*) UObject::GObjObjects()->Data[ 43380 ];

	UBioPowerScriptDesign_execHasAnimatedReactions_Parms HasAnimatedReactions_Parms;
	HasAnimatedReactions_Parms.oPawn = oPawn;
	memcpy ( &HasAnimatedReactions_Parms.Actions, &Actions, 0xC );

	this->ProcessEvent ( pFnHasAnimatedReactions, &HasAnimatedReactions_Parms, NULL );

	return HasAnimatedReactions_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.IsPlayingCombatReaction
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool UBioPowerScriptDesign::IsPlayingCombatReaction ( class AActor* oTarget )
{
	static UFunction* pFnIsPlayingCombatReaction = NULL;

	if ( ! pFnIsPlayingCombatReaction )
		pFnIsPlayingCombatReaction = (UFunction*) UObject::GObjObjects()->Data[ 43373 ];

	UBioPowerScriptDesign_execIsPlayingCombatReaction_Parms IsPlayingCombatReaction_Parms;
	IsPlayingCombatReaction_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnIsPlayingCombatReaction, &IsPlayingCombatReaction_Parms, NULL );

	return IsPlayingCombatReaction_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.GetCustomActionMapping
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  Reaction                       ( CPF_Parm )

unsigned char UBioPowerScriptDesign::GetCustomActionMapping ( unsigned char Reaction )
{
	static UFunction* pFnGetCustomActionMapping = NULL;

	if ( ! pFnGetCustomActionMapping )
		pFnGetCustomActionMapping = (UFunction*) UObject::GObjObjects()->Data[ 43370 ];

	UBioPowerScriptDesign_execGetCustomActionMapping_Parms GetCustomActionMapping_Parms;
	GetCustomActionMapping_Parms.Reaction = Reaction;

	this->ProcessEvent ( pFnGetCustomActionMapping, &GetCustomActionMapping_Parms, NULL );

	return GetCustomActionMapping_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.CauseDamageReaction
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// unsigned char                  Reaction                       ( CPF_Parm )
// unsigned long                  OverrideCurrentReaction        ( CPF_OptionalParm | CPF_Parm )

bool UBioPowerScriptDesign::CauseDamageReaction ( class AActor* oActor, class AController* InstigatedBy, unsigned char Reaction, unsigned long OverrideCurrentReaction )
{
	static UFunction* pFnCauseDamageReaction = NULL;

	if ( ! pFnCauseDamageReaction )
		pFnCauseDamageReaction = (UFunction*) UObject::GObjObjects()->Data[ 43360 ];

	UBioPowerScriptDesign_execCauseDamageReaction_Parms CauseDamageReaction_Parms;
	CauseDamageReaction_Parms.oActor = oActor;
	CauseDamageReaction_Parms.InstigatedBy = InstigatedBy;
	CauseDamageReaction_Parms.Reaction = Reaction;
	CauseDamageReaction_Parms.OverrideCurrentReaction = OverrideCurrentReaction;

	this->ProcessEvent ( pFnCauseDamageReaction, &CauseDamageReaction_Parms, NULL );

	return CauseDamageReaction_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.ApplyPermanentGameEffect
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class UClass*                  ClassName                      ( CPF_Parm )
// float                          fEffectValue                   ( CPF_Parm )
// struct FName                   nmCategory                     ( CPF_Parm )
// class AController*             Instigator                     ( CPF_Parm )

bool UBioPowerScriptDesign::ApplyPermanentGameEffect ( class AActor* oTarget, class UClass* ClassName, float fEffectValue, struct FName nmCategory, class AController* Instigator )
{
	static UFunction* pFnApplyPermanentGameEffect = NULL;

	if ( ! pFnApplyPermanentGameEffect )
		pFnApplyPermanentGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 43351 ];

	UBioPowerScriptDesign_execApplyPermanentGameEffect_Parms ApplyPermanentGameEffect_Parms;
	ApplyPermanentGameEffect_Parms.oTarget = oTarget;
	ApplyPermanentGameEffect_Parms.ClassName = ClassName;
	ApplyPermanentGameEffect_Parms.fEffectValue = fEffectValue;
	memcpy ( &ApplyPermanentGameEffect_Parms.nmCategory, &nmCategory, 0x8 );
	ApplyPermanentGameEffect_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnApplyPermanentGameEffect, &ApplyPermanentGameEffect_Parms, NULL );

	return ApplyPermanentGameEffect_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.ApplyTemporaryGameEffect
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class UClass*                  ClassName                      ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// float                          fEffectValue                   ( CPF_Parm )
// struct FName                   nmCategory                     ( CPF_Parm )
// class AController*             Instigator                     ( CPF_Parm )

bool UBioPowerScriptDesign::ApplyTemporaryGameEffect ( class AActor* oTarget, class UClass* ClassName, float fDuration, float fEffectValue, struct FName nmCategory, class AController* Instigator )
{
	static UFunction* pFnApplyTemporaryGameEffect = NULL;

	if ( ! pFnApplyTemporaryGameEffect )
		pFnApplyTemporaryGameEffect = (UFunction*) UObject::GObjObjects()->Data[ 43341 ];

	UBioPowerScriptDesign_execApplyTemporaryGameEffect_Parms ApplyTemporaryGameEffect_Parms;
	ApplyTemporaryGameEffect_Parms.oTarget = oTarget;
	ApplyTemporaryGameEffect_Parms.ClassName = ClassName;
	ApplyTemporaryGameEffect_Parms.fDuration = fDuration;
	ApplyTemporaryGameEffect_Parms.fEffectValue = fEffectValue;
	memcpy ( &ApplyTemporaryGameEffect_Parms.nmCategory, &nmCategory, 0x8 );
	ApplyTemporaryGameEffect_Parms.Instigator = Instigator;

	this->ProcessEvent ( pFnApplyTemporaryGameEffect, &ApplyTemporaryGameEffect_Parms, NULL );

	return ApplyTemporaryGameEffect_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.HideActorMesh
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool UBioPowerScriptDesign::HideActorMesh ( class AActor* oActor )
{
	static UFunction* pFnHideActorMesh = NULL;

	if ( ! pFnHideActorMesh )
		pFnHideActorMesh = (UFunction*) UObject::GObjObjects()->Data[ 43337 ];

	UBioPowerScriptDesign_execHideActorMesh_Parms HideActorMesh_Parms;
	HideActorMesh_Parms.oActor = oActor;

	this->ProcessEvent ( pFnHideActorMesh, &HideActorMesh_Parms, NULL );

	return HideActorMesh_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.PurgeWeaponHeat
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// unsigned long                  PurgeHeavyWeapons              ( CPF_OptionalParm | CPF_Parm )

bool UBioPowerScriptDesign::PurgeWeaponHeat ( class ASFXWeapon* Weapon, unsigned long PurgeHeavyWeapons )
{
	static UFunction* pFnPurgeWeaponHeat = NULL;

	if ( ! pFnPurgeWeaponHeat )
		pFnPurgeWeaponHeat = (UFunction*) UObject::GObjObjects()->Data[ 43332 ];

	UBioPowerScriptDesign_execPurgeWeaponHeat_Parms PurgeWeaponHeat_Parms;
	PurgeWeaponHeat_Parms.Weapon = Weapon;
	PurgeWeaponHeat_Parms.PurgeHeavyWeapons = PurgeHeavyWeapons;

	this->ProcessEvent ( pFnPurgeWeaponHeat, &PurgeWeaponHeat_Parms, NULL );

	return PurgeWeaponHeat_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.GetPawnByName
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AWorldInfo*              oWorldInfo                     ( CPF_Parm )
// struct FName                   PawnName                       ( CPF_Parm )

class ABioPawn* UBioPowerScriptDesign::GetPawnByName ( class AWorldInfo* oWorldInfo, struct FName PawnName )
{
	static UFunction* pFnGetPawnByName = NULL;

	if ( ! pFnGetPawnByName )
		pFnGetPawnByName = (UFunction*) UObject::GObjObjects()->Data[ 43327 ];

	UBioPowerScriptDesign_execGetPawnByName_Parms GetPawnByName_Parms;
	GetPawnByName_Parms.oWorldInfo = oWorldInfo;
	memcpy ( &GetPawnByName_Parms.PawnName, &PawnName, 0x8 );

	this->ProcessEvent ( pFnGetPawnByName, &GetPawnByName_Parms, NULL );

	return GetPawnByName_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.SetWeaponTracerVFX
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// class UStaticMesh*             Mesh                           ( CPF_Parm )

bool UBioPowerScriptDesign::SetWeaponTracerVFX ( class AActor* oCaster, class UStaticMesh* Mesh )
{
	static UFunction* pFnSetWeaponTracerVFX = NULL;

	if ( ! pFnSetWeaponTracerVFX )
		pFnSetWeaponTracerVFX = (UFunction*) UObject::GObjObjects()->Data[ 43320 ];

	UBioPowerScriptDesign_execSetWeaponTracerVFX_Parms SetWeaponTracerVFX_Parms;
	SetWeaponTracerVFX_Parms.oCaster = oCaster;
	SetWeaponTracerVFX_Parms.Mesh = Mesh;

	this->ProcessEvent ( pFnSetWeaponTracerVFX, &SetWeaponTracerVFX_Parms, NULL );

	return SetWeaponTracerVFX_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.SpawnRandomImpactVFX
// [0x00822002] 
// Parameters infos:
// class ABioPawn*                Pawn                           ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )

void UBioPowerScriptDesign::SpawnRandomImpactVFX ( class ABioPawn* Pawn, class UParticleSystem* ImpactParticleSystem )
{
	static UFunction* pFnSpawnRandomImpactVFX = NULL;

	if ( ! pFnSpawnRandomImpactVFX )
		pFnSpawnRandomImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 43311 ];

	UBioPowerScriptDesign_execSpawnRandomImpactVFX_Parms SpawnRandomImpactVFX_Parms;
	SpawnRandomImpactVFX_Parms.Pawn = Pawn;
	SpawnRandomImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;

	this->ProcessEvent ( pFnSpawnRandomImpactVFX, &SpawnRandomImpactVFX_Parms, NULL );
};

// Function SFXGame.BioPowerScriptDesign.GetRandomImpactBone
// [0x00822002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                Pawn                           ( CPF_Parm )

struct FName UBioPowerScriptDesign::GetRandomImpactBone ( class ABioPawn* Pawn )
{
	static UFunction* pFnGetRandomImpactBone = NULL;

	if ( ! pFnGetRandomImpactBone )
		pFnGetRandomImpactBone = (UFunction*) UObject::GObjObjects()->Data[ 43304 ];

	UBioPowerScriptDesign_execGetRandomImpactBone_Parms GetRandomImpactBone_Parms;
	GetRandomImpactBone_Parms.Pawn = Pawn;

	this->ProcessEvent ( pFnGetRandomImpactBone, &GetRandomImpactBone_Parms, NULL );

	return GetRandomImpactBone_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.SpawnWeaponImpactVFX
// [0x00822002] 
// Parameters infos:
// struct FImpactInfo             Impact                         ( CPF_Parm )
// class UParticleSystem*         ImpactParticleSystem           ( CPF_Parm )
// unsigned long                  UseImpactNormal                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  UseGodBone                     ( CPF_OptionalParm | CPF_Parm )
// float                          DrawScale                      ( CPF_OptionalParm | CPF_Parm )

void UBioPowerScriptDesign::SpawnWeaponImpactVFX ( struct FImpactInfo Impact, class UParticleSystem* ImpactParticleSystem, unsigned long UseImpactNormal, unsigned long UseGodBone, float DrawScale )
{
	static UFunction* pFnSpawnWeaponImpactVFX = NULL;

	if ( ! pFnSpawnWeaponImpactVFX )
		pFnSpawnWeaponImpactVFX = (UFunction*) UObject::GObjObjects()->Data[ 43290 ];

	UBioPowerScriptDesign_execSpawnWeaponImpactVFX_Parms SpawnWeaponImpactVFX_Parms;
	memcpy ( &SpawnWeaponImpactVFX_Parms.Impact, &Impact, 0x44 );
	SpawnWeaponImpactVFX_Parms.ImpactParticleSystem = ImpactParticleSystem;
	SpawnWeaponImpactVFX_Parms.UseImpactNormal = UseImpactNormal;
	SpawnWeaponImpactVFX_Parms.UseGodBone = UseGodBone;
	SpawnWeaponImpactVFX_Parms.DrawScale = DrawScale;

	this->ProcessEvent ( pFnSpawnWeaponImpactVFX, &SpawnWeaponImpactVFX_Parms, NULL );
};

// Function SFXGame.BioPowerScriptDesign.RemovePowerEffects
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// class AActor*                  oCaster                        ( CPF_Parm )
// struct FName                   sRemovePower                   ( CPF_Parm )
// unsigned long                  bRemoveFromSquad               ( CPF_OptionalParm | CPF_Parm )

bool UBioPowerScriptDesign::RemovePowerEffects ( class AActor* oTarget, class AActor* oCaster, struct FName sRemovePower, unsigned long bRemoveFromSquad )
{
	static UFunction* pFnRemovePowerEffects = NULL;

	if ( ! pFnRemovePowerEffects )
		pFnRemovePowerEffects = (UFunction*) UObject::GObjObjects()->Data[ 43274 ];

	UBioPowerScriptDesign_execRemovePowerEffects_Parms RemovePowerEffects_Parms;
	RemovePowerEffects_Parms.oTarget = oTarget;
	RemovePowerEffects_Parms.oCaster = oCaster;
	memcpy ( &RemovePowerEffects_Parms.sRemovePower, &sRemovePower, 0x8 );
	RemovePowerEffects_Parms.bRemoveFromSquad = bRemoveFromSquad;

	this->ProcessEvent ( pFnRemovePowerEffects, &RemovePowerEffects_Parms, NULL );

	return RemovePowerEffects_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.AdjustInventoryResource
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// unsigned char                  eResource                      ( CPF_Parm )
// int                            nAmount                        ( CPF_Parm )

bool UBioPowerScriptDesign::AdjustInventoryResource ( class AActor* oActor, unsigned char eResource, int nAmount )
{
	static UFunction* pFnAdjustInventoryResource = NULL;

	if ( ! pFnAdjustInventoryResource )
		pFnAdjustInventoryResource = (UFunction*) UObject::GObjObjects()->Data[ 43265 ];

	UBioPowerScriptDesign_execAdjustInventoryResource_Parms AdjustInventoryResource_Parms;
	AdjustInventoryResource_Parms.oActor = oActor;
	AdjustInventoryResource_Parms.eResource = eResource;
	AdjustInventoryResource_Parms.nAmount = nAmount;

	this->ProcessEvent ( pFnAdjustInventoryResource, &AdjustInventoryResource_Parms, NULL );

	return AdjustInventoryResource_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.IncreaseAllPowerCooldowns
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )
// float                          fDuration                      ( CPF_Parm )
// unsigned long                  bIncreaseTech                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncreaseBiotic                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncreaseWeapon                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIncreaseCombat                ( CPF_OptionalParm | CPF_Parm )

bool UBioPowerScriptDesign::IncreaseAllPowerCooldowns ( class AActor* oActor, float fDuration, unsigned long bIncreaseTech, unsigned long bIncreaseBiotic, unsigned long bIncreaseWeapon, unsigned long bIncreaseCombat )
{
	static UFunction* pFnIncreaseAllPowerCooldowns = NULL;

	if ( ! pFnIncreaseAllPowerCooldowns )
		pFnIncreaseAllPowerCooldowns = (UFunction*) UObject::GObjObjects()->Data[ 43252 ];

	UBioPowerScriptDesign_execIncreaseAllPowerCooldowns_Parms IncreaseAllPowerCooldowns_Parms;
	IncreaseAllPowerCooldowns_Parms.oActor = oActor;
	IncreaseAllPowerCooldowns_Parms.fDuration = fDuration;
	IncreaseAllPowerCooldowns_Parms.bIncreaseTech = bIncreaseTech;
	IncreaseAllPowerCooldowns_Parms.bIncreaseBiotic = bIncreaseBiotic;
	IncreaseAllPowerCooldowns_Parms.bIncreaseWeapon = bIncreaseWeapon;
	IncreaseAllPowerCooldowns_Parms.bIncreaseCombat = bIncreaseCombat;

	this->ProcessEvent ( pFnIncreaseAllPowerCooldowns, &IncreaseAllPowerCooldowns_Parms, NULL );

	return IncreaseAllPowerCooldowns_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.ClearAllPowerCooldowns
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oActor                         ( CPF_Parm )

bool UBioPowerScriptDesign::ClearAllPowerCooldowns ( class AActor* oActor )
{
	static UFunction* pFnClearAllPowerCooldowns = NULL;

	if ( ! pFnClearAllPowerCooldowns )
		pFnClearAllPowerCooldowns = (UFunction*) UObject::GObjObjects()->Data[ 43246 ];

	UBioPowerScriptDesign_execClearAllPowerCooldowns_Parms ClearAllPowerCooldowns_Parms;
	ClearAllPowerCooldowns_Parms.oActor = oActor;

	this->ProcessEvent ( pFnClearAllPowerCooldowns, &ClearAllPowerCooldowns_Parms, NULL );

	return ClearAllPowerCooldowns_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.ModifyArmor
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// float                          fArmor                         ( CPF_Parm )
// unsigned long                  bSetHeavyArmor                 ( CPF_OptionalParm | CPF_Parm )

bool UBioPowerScriptDesign::ModifyArmor ( class AActor* oTarget, float fArmor, unsigned long bSetHeavyArmor )
{
	static UFunction* pFnModifyArmor = NULL;

	if ( ! pFnModifyArmor )
		pFnModifyArmor = (UFunction*) UObject::GObjObjects()->Data[ 43238 ];

	UBioPowerScriptDesign_execModifyArmor_Parms ModifyArmor_Parms;
	ModifyArmor_Parms.oTarget = oTarget;
	ModifyArmor_Parms.fArmor = fArmor;
	ModifyArmor_Parms.bSetHeavyArmor = bSetHeavyArmor;

	this->ProcessEvent ( pFnModifyArmor, &ModifyArmor_Parms, NULL );

	return ModifyArmor_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.ResetTechResistance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool UBioPowerScriptDesign::ResetTechResistance ( class AActor* oTarget )
{
	static UFunction* pFnResetTechResistance = NULL;

	if ( ! pFnResetTechResistance )
		pFnResetTechResistance = (UFunction*) UObject::GObjObjects()->Data[ 43233 ];

	UBioPowerScriptDesign_execResetTechResistance_Parms ResetTechResistance_Parms;
	ResetTechResistance_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnResetTechResistance, &ResetTechResistance_Parms, NULL );

	return ResetTechResistance_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.ResetBioticResistance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

bool UBioPowerScriptDesign::ResetBioticResistance ( class AActor* oTarget )
{
	static UFunction* pFnResetBioticResistance = NULL;

	if ( ! pFnResetBioticResistance )
		pFnResetBioticResistance = (UFunction*) UObject::GObjObjects()->Data[ 43228 ];

	UBioPowerScriptDesign_execResetBioticResistance_Parms ResetBioticResistance_Parms;
	ResetBioticResistance_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnResetBioticResistance, &ResetBioticResistance_Parms, NULL );

	return ResetBioticResistance_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.SetTechResistance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// float                          fResistance                    ( CPF_Parm )

bool UBioPowerScriptDesign::SetTechResistance ( class AActor* oTarget, float fResistance )
{
	static UFunction* pFnSetTechResistance = NULL;

	if ( ! pFnSetTechResistance )
		pFnSetTechResistance = (UFunction*) UObject::GObjObjects()->Data[ 43223 ];

	UBioPowerScriptDesign_execSetTechResistance_Parms SetTechResistance_Parms;
	SetTechResistance_Parms.oTarget = oTarget;
	SetTechResistance_Parms.fResistance = fResistance;

	this->ProcessEvent ( pFnSetTechResistance, &SetTechResistance_Parms, NULL );

	return SetTechResistance_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.SetBioticResistance
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )
// float                          fResistance                    ( CPF_Parm )

bool UBioPowerScriptDesign::SetBioticResistance ( class AActor* oTarget, float fResistance )
{
	static UFunction* pFnSetBioticResistance = NULL;

	if ( ! pFnSetBioticResistance )
		pFnSetBioticResistance = (UFunction*) UObject::GObjObjects()->Data[ 43218 ];

	UBioPowerScriptDesign_execSetBioticResistance_Parms SetBioticResistance_Parms;
	SetBioticResistance_Parms.oTarget = oTarget;
	SetBioticResistance_Parms.fResistance = fResistance;

	this->ProcessEvent ( pFnSetBioticResistance, &SetBioticResistance_Parms, NULL );

	return SetBioticResistance_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.GetFactionRelationship
// [0x00020002] 
// Parameters infos:
// unsigned char                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oCaster                        ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_Parm )

unsigned char UBioPowerScriptDesign::GetFactionRelationship ( class AActor* oCaster, class AActor* oTarget )
{
	static UFunction* pFnGetFactionRelationship = NULL;

	if ( ! pFnGetFactionRelationship )
		pFnGetFactionRelationship = (UFunction*) UObject::GObjObjects()->Data[ 43212 ];

	UBioPowerScriptDesign_execGetFactionRelationship_Parms GetFactionRelationship_Parms;
	GetFactionRelationship_Parms.oCaster = oCaster;
	GetFactionRelationship_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnGetFactionRelationship, &GetFactionRelationship_Parms, NULL );

	return GetFactionRelationship_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.GetDistanceModifier
// [0x00820002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

float UBioPowerScriptDesign::GetDistanceModifier ( class AActor* oTarget )
{
	static UFunction* pFnGetDistanceModifier = NULL;

	if ( ! pFnGetDistanceModifier )
		pFnGetDistanceModifier = (UFunction*) UObject::GObjObjects()->Data[ 43205 ];

	UBioPowerScriptDesign_execGetDistanceModifier_Parms GetDistanceModifier_Parms;
	GetDistanceModifier_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnGetDistanceModifier, &GetDistanceModifier_Parms, NULL );

	return GetDistanceModifier_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.GetPhysicsLevel
// [0x00022002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// unsigned long                  bIgnoreResistance              ( CPF_OptionalParm | CPF_Parm )

int UBioPowerScriptDesign::GetPhysicsLevel ( class AActor* oImpacted, unsigned long bIgnoreResistance )
{
	static UFunction* pFnGetPhysicsLevel = NULL;

	if ( ! pFnGetPhysicsLevel )
		pFnGetPhysicsLevel = (UFunction*) UObject::GObjObjects()->Data[ 43198 ];

	UBioPowerScriptDesign_execGetPhysicsLevel_Parms GetPhysicsLevel_Parms;
	GetPhysicsLevel_Parms.oImpacted = oImpacted;
	GetPhysicsLevel_Parms.bIgnoreResistance = bIgnoreResistance;

	this->ProcessEvent ( pFnGetPhysicsLevel, &GetPhysicsLevel_Parms, NULL );

	return GetPhysicsLevel_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.IsMachineRace
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool UBioPowerScriptDesign::IsMachineRace ( class AActor* oImpacted )
{
	static UFunction* pFnIsMachineRace = NULL;

	if ( ! pFnIsMachineRace )
		pFnIsMachineRace = (UFunction*) UObject::GObjObjects()->Data[ 43194 ];

	UBioPowerScriptDesign_execIsMachineRace_Parms IsMachineRace_Parms;
	IsMachineRace_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsMachineRace, &IsMachineRace_Parms, NULL );

	return IsMachineRace_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.IsAnimalRace
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool UBioPowerScriptDesign::IsAnimalRace ( class AActor* oImpacted )
{
	static UFunction* pFnIsAnimalRace = NULL;

	if ( ! pFnIsAnimalRace )
		pFnIsAnimalRace = (UFunction*) UObject::GObjObjects()->Data[ 43190 ];

	UBioPowerScriptDesign_execIsAnimalRace_Parms IsAnimalRace_Parms;
	IsAnimalRace_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsAnimalRace, &IsAnimalRace_Parms, NULL );

	return IsAnimalRace_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.IsHumanoidRace
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool UBioPowerScriptDesign::IsHumanoidRace ( class AActor* oImpacted )
{
	static UFunction* pFnIsHumanoidRace = NULL;

	if ( ! pFnIsHumanoidRace )
		pFnIsHumanoidRace = (UFunction*) UObject::GObjObjects()->Data[ 43186 ];

	UBioPowerScriptDesign_execIsHumanoidRace_Parms IsHumanoidRace_Parms;
	IsHumanoidRace_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsHumanoidRace, &IsHumanoidRace_Parms, NULL );

	return IsHumanoidRace_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.IsOfRace
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )
// unsigned char                  eRace                          ( CPF_Parm )

bool UBioPowerScriptDesign::IsOfRace ( class AActor* oImpacted, unsigned char eRace )
{
	static UFunction* pFnIsOfRace = NULL;

	if ( ! pFnIsOfRace )
		pFnIsOfRace = (UFunction*) UObject::GObjObjects()->Data[ 43181 ];

	UBioPowerScriptDesign_execIsOfRace_Parms IsOfRace_Parms;
	IsOfRace_Parms.oImpacted = oImpacted;
	IsOfRace_Parms.eRace = eRace;

	this->ProcessEvent ( pFnIsOfRace, &IsOfRace_Parms, NULL );

	return IsOfRace_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.IsDeadBody
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool UBioPowerScriptDesign::IsDeadBody ( class AActor* oImpacted )
{
	static UFunction* pFnIsDeadBody = NULL;

	if ( ! pFnIsDeadBody )
		pFnIsDeadBody = (UFunction*) UObject::GObjObjects()->Data[ 43177 ];

	UBioPowerScriptDesign_execIsDeadBody_Parms IsDeadBody_Parms;
	IsDeadBody_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsDeadBody, &IsDeadBody_Parms, NULL );

	return IsDeadBody_Parms.ReturnValue;
};

// Function SFXGame.BioPowerScriptDesign.IsPlaceable
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oImpacted                      ( CPF_Parm )

bool UBioPowerScriptDesign::IsPlaceable ( class AActor* oImpacted )
{
	static UFunction* pFnIsPlaceable = NULL;

	if ( ! pFnIsPlaceable )
		pFnIsPlaceable = (UFunction*) UObject::GObjObjects()->Data[ 43174 ];

	UBioPowerScriptDesign_execIsPlaceable_Parms IsPlaceable_Parms;
	IsPlaceable_Parms.oImpacted = oImpacted;

	this->ProcessEvent ( pFnIsPlaceable, &IsPlaceable_Parms, NULL );

	return IsPlaceable_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_BioticWeakness.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_BioticWeakness::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55037 ];

	USFXGameEffect_BioticWeakness_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_BioticWeakness.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_BioticWeakness::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55035 ];

	USFXGameEffect_BioticWeakness_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_Singularity.OutOfRangeCheck
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Distance                       ( CPF_Parm )

bool USFXGameEffect_Singularity::OutOfRangeCheck ( float Distance )
{
	static UFunction* pFnOutOfRangeCheck = NULL;

	if ( ! pFnOutOfRangeCheck )
		pFnOutOfRangeCheck = (UFunction*) UObject::GObjObjects()->Data[ 55732 ];

	USFXGameEffect_Singularity_execOutOfRangeCheck_Parms OutOfRangeCheck_Parms;
	OutOfRangeCheck_Parms.Distance = Distance;

	this->ProcessEvent ( pFnOutOfRangeCheck, &OutOfRangeCheck_Parms, NULL );

	return OutOfRangeCheck_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_Singularity.IsStillInSingularity
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameEffect_Singularity::IsStillInSingularity ( )
{
	static UFunction* pFnIsStillInSingularity = NULL;

	if ( ! pFnIsStillInSingularity )
		pFnIsStillInSingularity = (UFunction*) UObject::GObjObjects()->Data[ 55728 ];

	USFXGameEffect_Singularity_execIsStillInSingularity_Parms IsStillInSingularity_Parms;

	this->ProcessEvent ( pFnIsStillInSingularity, &IsStillInSingularity_Parms, NULL );

	return IsStillInSingularity_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_Singularity.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Singularity::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55726 ];

	USFXGameEffect_Singularity_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Singularity.MoveActor
// [0x00820002] 
// Parameters infos:

void USFXGameEffect_Singularity::MoveActor ( )
{
	static UFunction* pFnMoveActor = NULL;

	if ( ! pFnMoveActor )
		pFnMoveActor = (UFunction*) UObject::GObjObjects()->Data[ 55720 ];

	USFXGameEffect_Singularity_execMoveActor_Parms MoveActor_Parms;

	this->ProcessEvent ( pFnMoveActor, &MoveActor_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Singularity.InitialMovement
// [0x00820002] 
// Parameters infos:

void USFXGameEffect_Singularity::InitialMovement ( )
{
	static UFunction* pFnInitialMovement = NULL;

	if ( ! pFnInitialMovement )
		pFnInitialMovement = (UFunction*) UObject::GObjObjects()->Data[ 55718 ];

	USFXGameEffect_Singularity_execInitialMovement_Parms InitialMovement_Parms;

	this->ProcessEvent ( pFnInitialMovement, &InitialMovement_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Singularity.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_Singularity::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55715 ];

	USFXGameEffect_Singularity_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Singularity.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Singularity::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55714 ];

	USFXGameEffect_Singularity_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Crush.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Crush::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55097 ];

	USFXGameEffect_Crush_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Crush.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_Crush::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55094 ];

	USFXGameEffect_Crush_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Crush.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Crush::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55093 ];

	USFXGameEffect_Crush_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Pull.HasOtherGravityEffects
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameEffect_Pull::HasOtherGravityEffects ( )
{
	static UFunction* pFnHasOtherGravityEffects = NULL;

	if ( ! pFnHasOtherGravityEffects )
		pFnHasOtherGravityEffects = (UFunction*) UObject::GObjObjects()->Data[ 55632 ];

	USFXGameEffect_Pull_execHasOtherGravityEffects_Parms HasOtherGravityEffects_Parms;

	this->ProcessEvent ( pFnHasOtherGravityEffects, &HasOtherGravityEffects_Parms, NULL );

	return HasOtherGravityEffects_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_Pull.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Pull::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55631 ];

	USFXGameEffect_Pull_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Pull.MoveActor
// [0x00020002] 
// Parameters infos:
// struct FVector                 vForce                         ( CPF_Parm )

void USFXGameEffect_Pull::MoveActor ( struct FVector vForce )
{
	static UFunction* pFnMoveActor = NULL;

	if ( ! pFnMoveActor )
		pFnMoveActor = (UFunction*) UObject::GObjObjects()->Data[ 55629 ];

	USFXGameEffect_Pull_execMoveActor_Parms MoveActor_Parms;
	memcpy ( &MoveActor_Parms.vForce, &vForce, 0xC );

	this->ProcessEvent ( pFnMoveActor, &MoveActor_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Pull.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_Pull::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55626 ];

	USFXGameEffect_Pull_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Pull.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Pull::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55625 ];

	USFXGameEffect_Pull_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_AntiGravity.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_AntiGravity::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55011 ];

	USFXGameEffect_AntiGravity_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_AntiGravity.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_AntiGravity::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55008 ];

	USFXGameEffect_AntiGravity_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Ragdoll.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Ragdoll::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55642 ];

	USFXGameEffect_Ragdoll_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Ragdoll.OnApplied
// [0x00820002] 
// Parameters infos:

void USFXGameEffect_Ragdoll::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55637 ];

	USFXGameEffect_Ragdoll_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Stasis.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Stasis::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55754 ];

	USFXGameEffect_Stasis_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Stasis.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Stasis::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55753 ];

	USFXGameEffect_Stasis_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_WeldPhysics.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeldPhysics::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55123 ];

	USFXGameEffect_WeldPhysics_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_WeldPhysics.RemoveExistingWeldEffects
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void USFXGameEffect_WeldPhysics::RemoveExistingWeldEffects ( )
{
	static UFunction* pFnRemoveExistingWeldEffects = NULL;

	if ( ! pFnRemoveExistingWeldEffects )
		pFnRemoveExistingWeldEffects = (UFunction*) UObject::GObjObjects()->Data[ 55119 ];

	USFXGameEffect_WeldPhysics_execRemoveExistingWeldEffects_Parms RemoveExistingWeldEffects_Parms;

	this->ProcessEvent ( pFnRemoveExistingWeldEffects, &RemoveExistingWeldEffects_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_WeldPhysics.OnApplied
// [0x00820002] 
// Parameters infos:

void USFXGameEffect_WeldPhysics::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55111 ];

	USFXGameEffect_WeldPhysics_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PhysicsDamageMultiplier.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PhysicsDamageMultiplier::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55535 ];

	USFXGameEffect_PhysicsDamageMultiplier_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PhysicsDamageMultiplier.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PhysicsDamageMultiplier::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55533 ];

	USFXGameEffect_PhysicsDamageMultiplier_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_CryoFreeze.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CryoFreeze::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55140 ];

	USFXGameEffect_CryoFreeze_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_CryoFreeze.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_CryoFreeze::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55137 ];

	USFXGameEffect_CryoFreeze_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_CryoFreeze.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CryoFreeze::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55135 ];

	USFXGameEffect_CryoFreeze_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_DelayedCryoFreeze.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_DelayedCryoFreeze::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55188 ];

	USFXGameEffect_DelayedCryoFreeze_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_DelayedCryoFreeze.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_DelayedCryoFreeze::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55186 ];

	USFXGameEffect_DelayedCryoFreeze_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_DelayedCryoFreeze.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_DelayedCryoFreeze::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55184 ];

	USFXGameEffect_DelayedCryoFreeze_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXEmitter.SetLifeTime
// [0x00020002] 
// Parameters infos:
// float                          Seconds                        ( CPF_Parm )

void ASFXEmitter::SetLifeTime ( float Seconds )
{
	static UFunction* pFnSetLifeTime = NULL;

	if ( ! pFnSetLifeTime )
		pFnSetLifeTime = (UFunction*) UObject::GObjObjects()->Data[ 54780 ];

	ASFXEmitter_execSetLifeTime_Parms SetLifeTime_Parms;
	SetLifeTime_Parms.Seconds = Seconds;

	this->ProcessEvent ( pFnSetLifeTime, &SetLifeTime_Parms, NULL );
};

// Function SFXGame.SFXEmitter.OnParticleSystemFinished
// [0x00020002] 
// Parameters infos:
// class UParticleSystemComponent* FinishedComponent              ( CPF_Parm | CPF_EditInline )

void ASFXEmitter::OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent )
{
	static UFunction* pFnOnParticleSystemFinished = NULL;

	if ( ! pFnOnParticleSystemFinished )
		pFnOnParticleSystemFinished = (UFunction*) UObject::GObjObjects()->Data[ 54778 ];

	ASFXEmitter_execOnParticleSystemFinished_Parms OnParticleSystemFinished_Parms;
	OnParticleSystemFinished_Parms.FinishedComponent = FinishedComponent;

	this->ProcessEvent ( pFnOnParticleSystemFinished, &OnParticleSystemFinished_Parms, NULL );
};

// Function SFXGame.SFXEmitter.Reuse
// [0x00020002] 
// Parameters infos:

void ASFXEmitter::Reuse ( )
{
	static UFunction* pFnReuse = NULL;

	if ( ! pFnReuse )
		pFnReuse = (UFunction*) UObject::GObjObjects()->Data[ 54777 ];

	ASFXEmitter_execReuse_Parms Reuse_Parms;

	this->ProcessEvent ( pFnReuse, &Reuse_Parms, NULL );
};

// Function SFXGame.SFXEmitter.Initialize
// [0x00020002] 
// Parameters infos:
// class UParticleSystem*         Template                       ( CPF_Parm )

void ASFXEmitter::Initialize ( class UParticleSystem* Template )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 54774 ];

	ASFXEmitter_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.Template = Template;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.SFXEmitter.Recycle
// [0x00020002] 
// Parameters infos:

void ASFXEmitter::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 54773 ];

	ASFXEmitter_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ActivateCharacterCreation.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ActivateCharacterCreation::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44017 ];

	UBioSeqAct_ActivateCharacterCreation_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_AddPlaypenVolume.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_AddPlaypenVolume::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44064 ];

	UBioSeqAct_AddPlaypenVolume_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_AddSquadToPerception.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_AddSquadToPerception::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44076 ];

	UBioSeqAct_AddSquadToPerception_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_AddToParty.Activated
// [0x00820002] 
// Parameters infos:

void UBioSeqAct_AddToParty::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44085 ];

	UBioSeqAct_AddToParty_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXTreasureUseModule.IsDefaultActionPossible
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXTreasureUseModule::eventIsDefaultActionPossible ( )
{
	static UFunction* pFnIsDefaultActionPossible = NULL;

	if ( ! pFnIsDefaultActionPossible )
		pFnIsDefaultActionPossible = (UFunction*) UObject::GObjObjects()->Data[ 62321 ];

	USFXTreasureUseModule_eventIsDefaultActionPossible_Parms IsDefaultActionPossible_Parms;

	this->ProcessEvent ( pFnIsDefaultActionPossible, &IsDefaultActionPossible_Parms, NULL );

	return IsDefaultActionPossible_Parms.ReturnValue;
};

// Function SFXGame.SFXTreasureUseModule.GiveAmmo
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ttype                          ( CPF_Parm )
// class ABioWorldInfo*           oWorldInfo                     ( CPF_Parm )
// int                            ResourceAmount                 ( CPF_Parm )

bool USFXTreasureUseModule::GiveAmmo ( unsigned char ttype, class ABioWorldInfo* oWorldInfo, int ResourceAmount )
{
	static UFunction* pFnGiveAmmo = NULL;

	if ( ! pFnGiveAmmo )
		pFnGiveAmmo = (UFunction*) UObject::GObjObjects()->Data[ 62310 ];

	USFXTreasureUseModule_execGiveAmmo_Parms GiveAmmo_Parms;
	GiveAmmo_Parms.ttype = ttype;
	GiveAmmo_Parms.oWorldInfo = oWorldInfo;
	GiveAmmo_Parms.ResourceAmount = ResourceAmount;

	this->ProcessEvent ( pFnGiveAmmo, &GiveAmmo_Parms, NULL );

	return GiveAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXTreasureUseModule.ScaleAmmo
// [0x00020002] 
// Parameters infos:
// class ASFXHeavyWeapon*         HWeapon                        ( CPF_Parm )

void USFXTreasureUseModule::ScaleAmmo ( class ASFXHeavyWeapon* HWeapon )
{
	static UFunction* pFnScaleAmmo = NULL;

	if ( ! pFnScaleAmmo )
		pFnScaleAmmo = (UFunction*) UObject::GObjObjects()->Data[ 62306 ];

	USFXTreasureUseModule_execScaleAmmo_Parms ScaleAmmo_Parms;
	ScaleAmmo_Parms.HWeapon = HWeapon;

	this->ProcessEvent ( pFnScaleAmmo, &ScaleAmmo_Parms, NULL );
};

// Function SFXGame.SFXTreasureUseModule.GiveInventoryTreasure
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  InvType                        ( CPF_Parm )
// int                            Amount                         ( CPF_Parm )
// class ABioWorldInfo*           oWorldInfo                     ( CPF_Parm )
// unsigned long                  bIsSalvage                     ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIgnoreBudget                  ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bExtraIfLow                    ( CPF_OptionalParm | CPF_Parm )

bool USFXTreasureUseModule::GiveInventoryTreasure ( unsigned char InvType, int Amount, class ABioWorldInfo* oWorldInfo, unsigned long bIsSalvage, unsigned long bIgnoreBudget, unsigned long bExtraIfLow )
{
	static UFunction* pFnGiveInventoryTreasure = NULL;

	if ( ! pFnGiveInventoryTreasure )
		pFnGiveInventoryTreasure = (UFunction*) UObject::GObjObjects()->Data[ 62293 ];

	USFXTreasureUseModule_execGiveInventoryTreasure_Parms GiveInventoryTreasure_Parms;
	GiveInventoryTreasure_Parms.InvType = InvType;
	GiveInventoryTreasure_Parms.Amount = Amount;
	GiveInventoryTreasure_Parms.oWorldInfo = oWorldInfo;
	GiveInventoryTreasure_Parms.bIsSalvage = bIsSalvage;
	GiveInventoryTreasure_Parms.bIgnoreBudget = bIgnoreBudget;
	GiveInventoryTreasure_Parms.bExtraIfLow = bExtraIfLow;

	this->ProcessEvent ( pFnGiveInventoryTreasure, &GiveInventoryTreasure_Parms, NULL );

	return GiveInventoryTreasure_Parms.ReturnValue;
};

// Function SFXGame.SFXTreasureUseModule.GiveMediGel
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ttype                          ( CPF_Parm )
// class ABioWorldInfo*           oWorldInfo                     ( CPF_Parm )
// int                            ResourceAmount                 ( CPF_Parm )
// unsigned long                  bAbsoluteAmount                ( CPF_Parm )

bool USFXTreasureUseModule::GiveMediGel ( unsigned char ttype, class ABioWorldInfo* oWorldInfo, int ResourceAmount, unsigned long bAbsoluteAmount )
{
	static UFunction* pFnGiveMediGel = NULL;

	if ( ! pFnGiveMediGel )
		pFnGiveMediGel = (UFunction*) UObject::GObjObjects()->Data[ 62285 ];

	USFXTreasureUseModule_execGiveMediGel_Parms GiveMediGel_Parms;
	GiveMediGel_Parms.ttype = ttype;
	GiveMediGel_Parms.oWorldInfo = oWorldInfo;
	GiveMediGel_Parms.ResourceAmount = ResourceAmount;
	GiveMediGel_Parms.bAbsoluteAmount = bAbsoluteAmount;

	this->ProcessEvent ( pFnGiveMediGel, &GiveMediGel_Parms, NULL );

	return GiveMediGel_Parms.ReturnValue;
};

// Function SFXGame.SFXTreasureUseModule.GiveCash
// [0x00822002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ttype                          ( CPF_Parm )
// class ABioWorldInfo*           oWorldInfo                     ( CPF_Parm )
// int                            nBudgetPercent                 ( CPF_Parm )
// unsigned long                  bAbsoluteAmount                ( CPF_Parm )
// unsigned long                  bIsSalvage                     ( CPF_Parm )

bool USFXTreasureUseModule::GiveCash ( unsigned char ttype, class ABioWorldInfo* oWorldInfo, int nBudgetPercent, unsigned long bAbsoluteAmount, unsigned long bIsSalvage )
{
	static UFunction* pFnGiveCash = NULL;

	if ( ! pFnGiveCash )
		pFnGiveCash = (UFunction*) UObject::GObjObjects()->Data[ 62274 ];

	USFXTreasureUseModule_execGiveCash_Parms GiveCash_Parms;
	GiveCash_Parms.ttype = ttype;
	GiveCash_Parms.oWorldInfo = oWorldInfo;
	GiveCash_Parms.nBudgetPercent = nBudgetPercent;
	GiveCash_Parms.bAbsoluteAmount = bAbsoluteAmount;
	GiveCash_Parms.bIsSalvage = bIsSalvage;

	this->ProcessEvent ( pFnGiveCash, &GiveCash_Parms, NULL );

	return GiveCash_Parms.ReturnValue;
};

// Function SFXGame.SFXTreasureUseModule.AwardResource
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned char                  ttype                          ( CPF_Parm )
// class ABioWorldInfo*           oWorldInfo                     ( CPF_Parm )
// int                            nBudgetPercent                 ( CPF_Parm )
// unsigned long                  bAbsoluteAmount                ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bIsSalvage                     ( CPF_OptionalParm | CPF_Parm )

bool USFXTreasureUseModule::AwardResource ( unsigned char ttype, class ABioWorldInfo* oWorldInfo, int nBudgetPercent, unsigned long bAbsoluteAmount, unsigned long bIsSalvage )
{
	static UFunction* pFnAwardResource = NULL;

	if ( ! pFnAwardResource )
		pFnAwardResource = (UFunction*) UObject::GObjObjects()->Data[ 62266 ];

	USFXTreasureUseModule_execAwardResource_Parms AwardResource_Parms;
	AwardResource_Parms.ttype = ttype;
	AwardResource_Parms.oWorldInfo = oWorldInfo;
	AwardResource_Parms.nBudgetPercent = nBudgetPercent;
	AwardResource_Parms.bAbsoluteAmount = bAbsoluteAmount;
	AwardResource_Parms.bIsSalvage = bIsSalvage;

	this->ProcessEvent ( pFnAwardResource, &AwardResource_Parms, NULL );

	return AwardResource_Parms.ReturnValue;
};

// Function SFXGame.SFXTreasureUseModule.GetSaveObjectClass
// [0x00022002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* USFXTreasureUseModule::GetSaveObjectClass ( )
{
	static UFunction* pFnGetSaveObjectClass = NULL;

	if ( ! pFnGetSaveObjectClass )
		pFnGetSaveObjectClass = (UFunction*) UObject::GObjObjects()->Data[ 62263 ];

	USFXTreasureUseModule_execGetSaveObjectClass_Parms GetSaveObjectClass_Parms;

	this->ProcessEvent ( pFnGetSaveObjectClass, &GetSaveObjectClass_Parms, NULL );

	return GetSaveObjectClass_Parms.ReturnValue;
};

// Function SFXGame.SFXTreasureUseModule.SetTargetable
// [0x00820002] 
// Parameters infos:
// unsigned long                  bTargetable                    ( CPF_Parm )

void USFXTreasureUseModule::SetTargetable ( unsigned long bTargetable )
{
	static UFunction* pFnSetTargetable = NULL;

	if ( ! pFnSetTargetable )
		pFnSetTargetable = (UFunction*) UObject::GObjObjects()->Data[ 62255 ];

	USFXTreasureUseModule_execSetTargetable_Parms SetTargetable_Parms;
	SetTargetable_Parms.bTargetable = bTargetable;

	this->ProcessEvent ( pFnSetTargetable, &SetTargetable_Parms, NULL );
};

// Function SFXGame.SFXTreasureUseModule.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void USFXTreasureUseModule::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 62254 ];

	USFXTreasureUseModule_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXTreasureUseModule.OnUsed
// [0x00020002] 
// Parameters infos:
// class AActor*                  User                           ( CPF_Parm )

void USFXTreasureUseModule::OnUsed ( class AActor* User )
{
	static UFunction* pFnOnUsed = NULL;

	if ( ! pFnOnUsed )
		pFnOnUsed = (UFunction*) UObject::GObjObjects()->Data[ 62251 ];

	USFXTreasureUseModule_execOnUsed_Parms OnUsed_Parms;
	OnUsed_Parms.User = User;

	this->ProcessEvent ( pFnOnUsed, &OnUsed_Parms, NULL );
};

// Function SFXGame.BioSeqAct_AdjustCostForDiscount.Activated
// [0x00820002] 
// Parameters infos:

void UBioSeqAct_AdjustCostForDiscount::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44111 ];

	UBioSeqAct_AdjustCostForDiscount_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_AOECauseDamage.Activated
// [0x00820002] 
// Parameters infos:

void UBioSeqAct_AOECauseDamage::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44130 ];

	UBioSeqAct_AOECauseDamage_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_AreaTransition.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_AreaTransition::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44149 ];

	UBioSeqAct_AreaTransition_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_AttachCrustEffect.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_AttachCrustEffect::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44155 ];

	UBioSeqAct_AttachCrustEffect_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_AttachVFX.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_AttachVFX::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44173 ];

	UBioSeqAct_AttachVFX_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_AttachVisualEffect.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_AttachVisualEffect::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44184 ];

	UBioSeqAct_AttachVisualEffect_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_AutoSave.UpdateOp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool UBioSeqAct_AutoSave::UpdateOp ( float fDeltaT )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 44193 ];

	UBioSeqAct_AutoSave_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_AutoSave.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_AutoSave::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44192 ];

	UBioSeqAct_AutoSave_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_AwardAchievement.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_AwardAchievement::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44200 ];

	UBioSeqAct_AwardAchievement_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_BioToggleCinematicMode.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_BioToggleCinematicMode::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44220 ];

	UBioSeqAct_BioToggleCinematicMode_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_BreakFromCover.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_BreakFromCover::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44258 ];

	UBioSeqAct_BreakFromCover_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_CancelTutorial.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_CancelTutorial::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44263 ];

	UBioSeqAct_CancelTutorial_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_CauseDamage.Activated
// [0x00820002] 
// Parameters infos:

void UBioSeqAct_CauseDamage::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44272 ];

	UBioSeqAct_CauseDamage_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ChangeAI.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_ChangeAI::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44283 ];

	UBioSeqAct_ChangeAI_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ClearAllActions.Activated
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_ClearAllActions::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44302 ];

	UBioSeqAct_ClearAllActions_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ClearBrowserWheelStateOverrides.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_ClearBrowserWheelStateOverrides::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44305 ];

	UBioSeqAct_ClearBrowserWheelStateOverrides_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ClearNewCharacterEffects.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_ClearNewCharacterEffects::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44309 ];

	UBioSeqAct_ClearNewCharacterEffects_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ClearSavedMap.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ClearSavedMap::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44318 ];

	UBioSeqAct_ClearSavedMap_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ClearSomeActions_Queue.Activated
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_ClearSomeActions_Queue::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44321 ];

	UBioSeqAct_ClearSomeActions_Queue_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ClearSomeActions_State.Activated
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_ClearSomeActions_State::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44324 ];

	UBioSeqAct_ClearSomeActions_State_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_Cover_AddCoverFrom.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_Cover_AddCoverFrom::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44336 ];

	UBioSeqAct_Cover_AddCoverFrom_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_Cover_GetCoveringRank.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_Cover_GetCoveringRank::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44342 ];

	UBioSeqAct_Cover_GetCoveringRank_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_Cover_RemoveCoverFrom.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_Cover_RemoveCoverFrom::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44347 ];

	UBioSeqAct_Cover_RemoveCoverFrom_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_Cover_SetCoveringRank.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_Cover_SetCoveringRank::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44353 ];

	UBioSeqAct_Cover_SetCoveringRank_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_Crouch.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_Crouch::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44358 ];

	UBioSeqAct_Crouch_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_CustomizeStageCameras.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_CustomizeStageCameras::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44370 ];

	UBioSeqAct_CustomizeStageCameras_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DisableSquad.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_DisableSquad::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44387 ];

	UBioSeqAct_DisableSquad_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DoActionInRadius.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_DoActionInRadius::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44397 ];

	UBioSeqAct_DoActionInRadius_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DoActionInVolume.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_DoActionInVolume::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44407 ];

	UBioSeqAct_DoActionInVolume_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DUIClear.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_DUIClear::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44412 ];

	UBioSeqAct_DUIClear_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DUIIsActive.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_DUIIsActive::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44417 ];

	UBioSeqAct_DUIIsActive_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DUISetBarFillDirection.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_DUISetBarFillDirection::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44422 ];

	UBioSeqAct_DUISetBarFillDirection_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DUISetBarFillPercent.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_DUISetBarFillPercent::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44427 ];

	UBioSeqAct_DUISetBarFillPercent_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DUISetBarMarkers.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_DUISetBarMarkers::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44433 ];

	UBioSeqAct_DUISetBarMarkers_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DUISetCounterValue.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_DUISetCounterValue::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44438 ];

	UBioSeqAct_DUISetCounterValue_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DUISetElementColor.Activated
// [0x00820002] 
// Parameters infos:

void UBioSeqAct_DUISetElementColor::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44444 ];

	UBioSeqAct_DUISetElementColor_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DUISetElementPulsing.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_DUISetElementPulsing::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44455 ];

	UBioSeqAct_DUISetElementPulsing_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DUISetElementVisible.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_DUISetElementVisible::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44463 ];

	UBioSeqAct_DUISetElementVisible_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DUISetQuasarLayout.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_DUISetQuasarLayout::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44467 ];

	UBioSeqAct_DUISetQuasarLayout_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_DUISetTextStringRef.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_DUISetTextStringRef::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44472 ];

	UBioSeqAct_DUISetTextStringRef_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_EnableSquad.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_EnableSquad::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44486 ];

	UBioSeqAct_EnableSquad_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_EndGame.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_EndGame::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44490 ];

	UBioSeqAct_EndGame_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_EnsurePawnIsUpright.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_EnsurePawnIsUpright::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44494 ];

	UBioSeqAct_EnsurePawnIsUpright_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_FactionRelationShip.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_FactionRelationShip::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44536 ];

	UBioSeqAct_FactionRelationShip_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_FactionRelationShip.GetPawnFrom
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class UObject*                 oInObj                         ( CPF_Parm )

class ABioPawn* UBioSeqAct_FactionRelationShip::GetPawnFrom ( class UObject* oInObj )
{
	static UFunction* pFnGetPawnFrom = NULL;

	if ( ! pFnGetPawnFrom )
		pFnGetPawnFrom = (UFunction*) UObject::GObjObjects()->Data[ 44533 ];

	UBioSeqAct_FactionRelationShip_execGetPawnFrom_Parms GetPawnFrom_Parms;
	GetPawnFrom_Parms.oInObj = oInObj;

	this->ProcessEvent ( pFnGetPawnFrom, &GetPawnFrom_Parms, NULL );

	return GetPawnFrom_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_FindCover.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_FindCover::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44563 ];

	UBioSeqAct_FindCover_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_FollowSquadLeader.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_FollowSquadLeader::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44578 ];

	UBioSeqAct_FollowSquadLeader_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ForceResourceLoad.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_ForceResourceLoad::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44584 ];

	UBioSeqAct_ForceResourceLoad_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_GetAchievementStatus.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_GetAchievementStatus::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44591 ];

	UBioSeqAct_GetAchievementStatus_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_GetClass.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_GetClass::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44596 ];

	UBioSeqAct_GetClass_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_GetConnectedObjects.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_GetConnectedObjects::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44604 ];

	UBioSeqAct_GetConnectedObjects_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_GetEquippedWeapon.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_GetEquippedWeapon::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44610 ];

	UBioSeqAct_GetEquippedWeapon_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.ScaleWeapon
// [0x00020002] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void ASFXWeapon_AssaultRifle_Base::ScaleWeapon ( int Level )
{
	static UFunction* pFnScaleWeapon = NULL;

	if ( ! pFnScaleWeapon )
		pFnScaleWeapon = (UFunction*) UObject::GObjObjects()->Data[ 62670 ];

	ASFXWeapon_AssaultRifle_Base_execScaleWeapon_Parms ScaleWeapon_Parms;
	ScaleWeapon_Parms.Level = Level;

	this->ProcessEvent ( pFnScaleWeapon, &ScaleWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon_AssaultRifle_Base.CalculateStaticBonus
// [0x00020102] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float ASFXWeapon_AssaultRifle_Base::CalculateStaticBonus ( )
{
	static UFunction* pFnCalculateStaticBonus = NULL;

	if ( ! pFnCalculateStaticBonus )
		pFnCalculateStaticBonus = (UFunction*) UObject::GObjObjects()->Data[ 62667 ];

	ASFXWeapon_AssaultRifle_Base_execCalculateStaticBonus_Parms CalculateStaticBonus_Parms;

	this->ProcessEvent ( pFnCalculateStaticBonus, &CalculateStaticBonus_Parms, NULL );

	return CalculateStaticBonus_Parms.ReturnValue;
};

// Function SFXGame.SFXWeapon_HeavyPistol_Base.ModifyDamage
// [0x00420102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm | CPF_OutParm )

void ASFXWeapon_HeavyPistol_Base::ModifyDamage ( struct FVector HitLocation, class AActor* HitActor, float* BaseDamage )
{
	static UFunction* pFnModifyDamage = NULL;

	if ( ! pFnModifyDamage )
		pFnModifyDamage = (UFunction*) UObject::GObjObjects()->Data[ 62691 ];

	ASFXWeapon_HeavyPistol_Base_execModifyDamage_Parms ModifyDamage_Parms;
	memcpy ( &ModifyDamage_Parms.HitLocation, &HitLocation, 0xC );
	ModifyDamage_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnModifyDamage, &ModifyDamage_Parms, NULL );

	if ( BaseDamage )
		*BaseDamage = ModifyDamage_Parms.BaseDamage;
};

// Function SFXGame.SFXWeapon_AutoPistol_Base.ScaleWeapon
// [0x00020002] 
// Parameters infos:
// int                            Level                          ( CPF_Parm )

void ASFXWeapon_AutoPistol_Base::ScaleWeapon ( int Level )
{
	static UFunction* pFnScaleWeapon = NULL;

	if ( ! pFnScaleWeapon )
		pFnScaleWeapon = (UFunction*) UObject::GObjObjects()->Data[ 62683 ];

	ASFXWeapon_AutoPistol_Base_execScaleWeapon_Parms ScaleWeapon_Parms;
	ScaleWeapon_Parms.Level = Level;

	this->ProcessEvent ( pFnScaleWeapon, &ScaleWeapon_Parms, NULL );
};

// Function SFXGame.SFXWeapon_AutoPistol_Base.ModifyDamage
// [0x00420102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// class AActor*                  HitActor                       ( CPF_OptionalParm | CPF_Parm )
// float                          BaseDamage                     ( CPF_Parm | CPF_OutParm )

void ASFXWeapon_AutoPistol_Base::ModifyDamage ( struct FVector HitLocation, class AActor* HitActor, float* BaseDamage )
{
	static UFunction* pFnModifyDamage = NULL;

	if ( ! pFnModifyDamage )
		pFnModifyDamage = (UFunction*) UObject::GObjObjects()->Data[ 62679 ];

	ASFXWeapon_AutoPistol_Base_execModifyDamage_Parms ModifyDamage_Parms;
	memcpy ( &ModifyDamage_Parms.HitLocation, &HitLocation, 0xC );
	ModifyDamage_Parms.HitActor = HitActor;

	this->ProcessEvent ( pFnModifyDamage, &ModifyDamage_Parms, NULL );

	if ( BaseDamage )
		*BaseDamage = ModifyDamage_Parms.BaseDamage;
};

// Function SFXGame.BioSeqAct_GetShieldPercentage.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_GetShieldPercentage::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44659 ];

	UBioSeqAct_GetShieldPercentage_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_GetSquad.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_GetSquad::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44669 ];

	UBioSeqAct_GetSquad_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_GetSquadInfo.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_GetSquadInfo::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44680 ];

	UBioSeqAct_GetSquadInfo_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_GetTalentRank.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_GetTalentRank::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44697 ];

	UBioSeqAct_GetTalentRank_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_GetTutorialViewed.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_GetTutorialViewed::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44703 ];

	UBioSeqAct_GetTutorialViewed_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_GrantScaledXP.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_GrantScaledXP::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44718 ];

	UBioSeqAct_GrantScaledXP_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_HideAllWeapons.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_HideAllWeapons::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44722 ];

	UBioSeqAct_HideAllWeapons_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_HideSniperHudOverlay.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_HideSniperHudOverlay::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44725 ];

	UBioSeqAct_HideSniperHudOverlay_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_HUDDisplayState.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_HUDDisplayState::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44730 ];

	UBioSeqAct_HUDDisplayState_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_IncreaseTalentMaxRank.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_IncreaseTalentMaxRank::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44740 ];

	UBioSeqAct_IncreaseTalentMaxRank_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_InterruptAmbientConversation.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_InterruptAmbientConversation::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44755 ];

	UBioSeqAct_InterruptAmbientConversation_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_IsActiveConversation.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_IsActiveConversation::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44764 ];

	UBioSeqAct_IsActiveConversation_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_IsVehicle.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_IsVehicle::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44769 ];

	UBioSeqAct_IsVehicle_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_KillPawn.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_KillPawn::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44772 ];

	UBioSeqAct_KillPawn_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_MiniGame.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_MiniGame::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44784 ];

	UBioSeqAct_MiniGame_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ModifyPropertyHeightfog.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ModifyPropertyHeightfog::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44789 ];

	UBioSeqAct_ModifyPropertyHeightfog_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_NearClipPlane.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_NearClipPlane::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44817 ];

	UBioSeqAct_NearClipPlane_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_Ragdoll.Activated
// [0x00820002] 
// Parameters infos:

void UBioSeqAct_Ragdoll::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 44997 ];

	UBioSeqAct_Ragdoll_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_RemoveFromParty.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_RemoveFromParty::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45006 ];

	UBioSeqAct_RemoveFromParty_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_RemovePlaypenVolume.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_RemovePlaypenVolume::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45016 ];

	UBioSeqAct_RemovePlaypenVolume_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_RestoreAI.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_RestoreAI::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45029 ];

	UBioSeqAct_RestoreAI_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ResumeWalking.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ResumeWalking::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45034 ];

	UBioSeqAct_ResumeWalking_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXAI_Ambient.PlayWaypointAnim
// [0x00020002] 
// Parameters infos:
// struct FName                   AnimName                       ( CPF_Parm )
// int                            eStance                        ( CPF_Parm )

void ASFXAI_Ambient::PlayWaypointAnim ( struct FName AnimName, int eStance )
{
	static UFunction* pFnPlayWaypointAnim = NULL;

	if ( ! pFnPlayWaypointAnim )
		pFnPlayWaypointAnim = (UFunction*) UObject::GObjObjects()->Data[ 52700 ];

	ASFXAI_Ambient_execPlayWaypointAnim_Parms PlayWaypointAnim_Parms;
	memcpy ( &PlayWaypointAnim_Parms.AnimName, &AnimName, 0x8 );
	PlayWaypointAnim_Parms.eStance = eStance;

	this->ProcessEvent ( pFnPlayWaypointAnim, &PlayWaypointAnim_Parms, NULL );
};

// Function SFXGame.SFXAI_Ambient.ResumeWalking
// [0x00020000] 
// Parameters infos:

void ASFXAI_Ambient::ResumeWalking ( )
{
	static UFunction* pFnResumeWalking = NULL;

	if ( ! pFnResumeWalking )
		pFnResumeWalking = (UFunction*) UObject::GObjObjects()->Data[ 52697 ];

	ASFXAI_Ambient_execResumeWalking_Parms ResumeWalking_Parms;

	this->ProcessEvent ( pFnResumeWalking, &ResumeWalking_Parms, NULL );
};

// Function SFXGame.SFXAI_Ambient.MoveOnScriptedRoute
// [0x00020002] 
// Parameters infos:
// class ARoute*                  oRoute                         ( CPF_Parm )
// int                            nNearestWaypoint               ( CPF_Parm )
// unsigned long                  bWalking                       ( CPF_Parm )
// unsigned char                  eWalkOrder                     ( CPF_Parm )
// unsigned long                  bSkipNodes                     ( CPF_Parm )

void ASFXAI_Ambient::MoveOnScriptedRoute ( class ARoute* oRoute, int nNearestWaypoint, unsigned long bWalking, unsigned char eWalkOrder, unsigned long bSkipNodes )
{
	static UFunction* pFnMoveOnScriptedRoute = NULL;

	if ( ! pFnMoveOnScriptedRoute )
		pFnMoveOnScriptedRoute = (UFunction*) UObject::GObjObjects()->Data[ 52675 ];

	ASFXAI_Ambient_execMoveOnScriptedRoute_Parms MoveOnScriptedRoute_Parms;
	MoveOnScriptedRoute_Parms.oRoute = oRoute;
	MoveOnScriptedRoute_Parms.nNearestWaypoint = nNearestWaypoint;
	MoveOnScriptedRoute_Parms.bWalking = bWalking;
	MoveOnScriptedRoute_Parms.eWalkOrder = eWalkOrder;
	MoveOnScriptedRoute_Parms.bSkipNodes = bSkipNodes;

	this->ProcessEvent ( pFnMoveOnScriptedRoute, &MoveOnScriptedRoute_Parms, NULL );
};

// Function SFXGame.SFXAI_Ambient.FindNearestRoutePoint
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FVector                 vLoc                           ( CPF_Parm )
// class ARoute*                  oRoute                         ( CPF_Parm )

int ASFXAI_Ambient::FindNearestRoutePoint ( struct FVector vLoc, class ARoute* oRoute )
{
	static UFunction* pFnFindNearestRoutePoint = NULL;

	if ( ! pFnFindNearestRoutePoint )
		pFnFindNearestRoutePoint = (UFunction*) UObject::GObjObjects()->Data[ 52666 ];

	ASFXAI_Ambient_execFindNearestRoutePoint_Parms FindNearestRoutePoint_Parms;
	memcpy ( &FindNearestRoutePoint_Parms.vLoc, &vLoc, 0xC );
	FindNearestRoutePoint_Parms.oRoute = oRoute;

	this->ProcessEvent ( pFnFindNearestRoutePoint, &FindNearestRoutePoint_Parms, NULL );

	return FindNearestRoutePoint_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_Ambient.SetMovementSpeed
// [0x00020000] 
// Parameters infos:

void ASFXAI_Ambient::SetMovementSpeed ( )
{
	static UFunction* pFnSetMovementSpeed = NULL;

	if ( ! pFnSetMovementSpeed )
		pFnSetMovementSpeed = (UFunction*) UObject::GObjObjects()->Data[ 52665 ];

	ASFXAI_Ambient_execSetMovementSpeed_Parms SetMovementSpeed_Parms;

	this->ProcessEvent ( pFnSetMovementSpeed, &SetMovementSpeed_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ResurrectHenchman.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ResurrectHenchman::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45039 ];

	UBioSeqAct_ResurrectHenchman_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SarenUsePower.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SarenUsePower::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45055 ];

	UBioSeqAct_SarenUsePower_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SaveCharacter.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_SaveCharacter::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45058 ];

	UBioSeqAct_SaveCharacter_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SelectWeapon.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SelectWeapon::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45075 ];

	UBioSeqAct_SelectWeapon_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetActionState.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetActionState::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45084 ];

	UBioSeqAct_SetActionState_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetActive.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetActive::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45092 ];

	UBioSeqAct_SetActive_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetBase.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetBase::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45101 ];

	UBioSeqAct_SetBase_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetBoolGroup.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_SetBoolGroup::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45114 ];

	UBioSeqAct_SetBoolGroup_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetBrowserWheelAvailable.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_SetBrowserWheelAvailable::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45119 ];

	UBioSeqAct_SetBrowserWheelAvailable_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetBrowserWheelStateOverrides.Activated
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_SetBrowserWheelStateOverrides::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45260 ];

	UBioSeqAct_SetBrowserWheelStateOverrides_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioTimerList.Tick
// [0x00820002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioTimerList::Tick ( float fDeltaT )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 50379 ];

	UBioTimerList_execTick_Parms Tick_Parms;
	Tick_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.BioTimerList.KillTimer
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 i_sTimerName                   ( CPF_Parm | CPF_NeedCtorLink )

bool UBioTimerList::KillTimer ( struct FString i_sTimerName )
{
	static UFunction* pFnKillTimer = NULL;

	if ( ! pFnKillTimer )
		pFnKillTimer = (UFunction*) UObject::GObjObjects()->Data[ 50374 ];

	UBioTimerList_execKillTimer_Parms KillTimer_Parms;
	memcpy ( &KillTimer_Parms.i_sTimerName, &i_sTimerName, 0xC );

	this->ProcessEvent ( pFnKillTimer, &KillTimer_Parms, NULL );

	return KillTimer_Parms.ReturnValue;
};

// Function SFXGame.BioTimerList.AddTimer
// [0x00820002] 
// Parameters infos:
// struct FScriptDelegate         TimerDelegate                  ( CPF_Parm | CPF_NeedCtorLink )
// class UObject*                 Params                         ( CPF_Parm )
// float                          fTime                          ( CPF_Parm )
// struct FString                 i_sTimerName                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void UBioTimerList::AddTimer ( struct FScriptDelegate TimerDelegate, class UObject* Params, float fTime, struct FString i_sTimerName )
{
	static UFunction* pFnAddTimer = NULL;

	if ( ! pFnAddTimer )
		pFnAddTimer = (UFunction*) UObject::GObjObjects()->Data[ 50365 ];

	UBioTimerList_execAddTimer_Parms AddTimer_Parms;
	memcpy ( &AddTimer_Parms.TimerDelegate, &TimerDelegate, 0xC );
	AddTimer_Parms.Params = Params;
	AddTimer_Parms.fTime = fTime;
	memcpy ( &AddTimer_Parms.i_sTimerName, &i_sTimerName, 0xC );

	this->ProcessEvent ( pFnAddTimer, &AddTimer_Parms, NULL );
};

// Function SFXGame.BioTimerList.BioTimerDelegate
// [0x00120000] 
// Parameters infos:
// class UObject*                 Params                         ( CPF_Parm )

void UBioTimerList::BioTimerDelegate ( class UObject* Params )
{
	static UFunction* pFnBioTimerDelegate = NULL;

	if ( ! pFnBioTimerDelegate )
		pFnBioTimerDelegate = (UFunction*) UObject::GObjObjects()->Data[ 50362 ];

	UBioTimerList_execBioTimerDelegate_Parms BioTimerDelegate_Parms;
	BioTimerDelegate_Parms.Params = Params;

	this->ProcessEvent ( pFnBioTimerDelegate, &BioTimerDelegate_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetBusyState.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetBusyState::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45267 ];

	UBioSeqAct_SetBusyState_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetCanWalkOffLedges.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetCanWalkOffLedges::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45277 ];

	UBioSeqAct_SetCanWalkOffLedges_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetExploreCameraRotation.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetExploreCameraRotation::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45290 ];

	UBioSeqAct_SetExploreCameraRotation_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetExploreCameraRotation.IsCameraExploreMode
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXCameraMode*          pCameraMode                    ( CPF_Parm )

bool UBioSeqAct_SetExploreCameraRotation::eventIsCameraExploreMode ( class USFXCameraMode* pCameraMode )
{
	static UFunction* pFnIsCameraExploreMode = NULL;

	if ( ! pFnIsCameraExploreMode )
		pFnIsCameraExploreMode = (UFunction*) UObject::GObjObjects()->Data[ 45286 ];

	UBioSeqAct_SetExploreCameraRotation_eventIsCameraExploreMode_Parms IsCameraExploreMode_Parms;
	IsCameraExploreMode_Parms.pCameraMode = pCameraMode;

	this->ProcessEvent ( pFnIsCameraExploreMode, &IsCameraExploreMode_Parms, NULL );

	return IsCameraExploreMode_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode_Explore.Initialize
// [0x00020002] 
// Parameters infos:
// class ABioPlayerController*    PC                             ( CPF_Parm )

void USFXCameraMode_Explore::Initialize ( class ABioPlayerController* PC )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 53551 ];

	USFXCameraMode_Explore_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.PC = PC;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetInputTrap.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetInputTrap::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45306 ];

	UBioSeqAct_SetInputTrap_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetIsInCombat.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetIsInCombat::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45310 ];

	UBioSeqAct_SetIsInCombat_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetLookAtTarget.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetLookAtTarget::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45319 ];

	UBioSeqAct_SetLookAtTarget_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetMaterialParameter.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetMaterialParameter::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45330 ];

	UBioSeqAct_SetMaterialParameter_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetMaterialParameter.Set
// [0x00020000] 
// Parameters infos:
// class ABioPawn*                pPawn                          ( CPF_Parm )
// struct FName                   nmMaterialParameter            ( CPF_Const | CPF_Parm )

void UBioSeqAct_SetMaterialParameter::Set ( class ABioPawn* pPawn, struct FName nmMaterialParameter )
{
	static UFunction* pFnSet = NULL;

	if ( ! pFnSet )
		pFnSet = (UFunction*) UObject::GObjObjects()->Data[ 45327 ];

	UBioSeqAct_SetMaterialParameter_execSet_Parms Set_Parms;
	Set_Parms.pPawn = pPawn;
	memcpy ( &Set_Parms.nmMaterialParameter, &nmMaterialParameter, 0x8 );

	this->ProcessEvent ( pFnSet, &Set_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetMaterialParameterColor.Set
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                pPawn                          ( CPF_Parm )
// struct FName                   nmMaterialParameter            ( CPF_Const | CPF_Parm )

void UBioSeqAct_SetMaterialParameterColor::Set ( class ABioPawn* pPawn, struct FName nmMaterialParameter )
{
	static UFunction* pFnSet = NULL;

	if ( ! pFnSet )
		pFnSet = (UFunction*) UObject::GObjObjects()->Data[ 45336 ];

	UBioSeqAct_SetMaterialParameterColor_execSet_Parms Set_Parms;
	Set_Parms.pPawn = pPawn;
	memcpy ( &Set_Parms.nmMaterialParameter, &nmMaterialParameter, 0x8 );

	this->ProcessEvent ( pFnSet, &Set_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetMaterialParameterScalar.Set
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                pPawn                          ( CPF_Parm )
// struct FName                   nmMaterialParameter            ( CPF_Const | CPF_Parm )

void UBioSeqAct_SetMaterialParameterScalar::Set ( class ABioPawn* pPawn, struct FName nmMaterialParameter )
{
	static UFunction* pFnSet = NULL;

	if ( ! pFnSet )
		pFnSet = (UFunction*) UObject::GObjObjects()->Data[ 45342 ];

	UBioSeqAct_SetMaterialParameterScalar_execSet_Parms Set_Parms;
	Set_Parms.pPawn = pPawn;
	memcpy ( &Set_Parms.nmMaterialParameter, &nmMaterialParameter, 0x8 );

	this->ProcessEvent ( pFnSet, &Set_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetOverrideTipText.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetOverrideTipText::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45352 ];

	UBioSeqAct_SetOverrideTipText_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetPlotPartySize.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_SetPlotPartySize::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45362 ];

	UBioSeqAct_SetPlotPartySize_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetPlotPartySize.getWorld
// [0x00020002] 
// Parameters infos:
// class ABioWorldInfo*           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class ABioWorldInfo* UBioSeqAct_SetPlotPartySize::getWorld ( )
{
	static UFunction* pFngetWorld = NULL;

	if ( ! pFngetWorld )
		pFngetWorld = (UFunction*) UObject::GObjObjects()->Data[ 45360 ];

	UBioSeqAct_SetPlotPartySize_execgetWorld_Parms getWorld_Parms;

	this->ProcessEvent ( pFngetWorld, &getWorld_Parms, NULL );

	return getWorld_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_SetPowerCooldown.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetPowerCooldown::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45372 ];

	UBioSeqAct_SetPowerCooldown_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetRadarDisplay.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetRadarDisplay::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45380 ];

	UBioSeqAct_SetRadarDisplay_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetSquadFaction.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_SetSquadFaction::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45391 ];

	UBioSeqAct_SetSquadFaction_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SetTutorialViewed.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_SetTutorialViewed::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45415 ];

	UBioSeqAct_SetTutorialViewed_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSFHandler_IntroText.HandleEvent
// [0x00C20002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_IntroText::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 47113 ];

	UBioSFHandler_IntroText_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSeqAct_ShowLatentTutorial.UpdateOp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool UBioSeqAct_ShowLatentTutorial::UpdateOp ( float fDeltaT )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 45500 ];

	UBioSeqAct_ShowLatentTutorial_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_ShowLatentTutorial.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_ShowLatentTutorial::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45499 ];

	UBioSeqAct_ShowLatentTutorial_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowMessage.MessageBoxUpdate
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )
// class UBioSFHandler_MessageBox* oMsgBox                        ( CPF_Parm )

void UBioSeqAct_ShowMessage::MessageBoxUpdate ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox )
{
	static UFunction* pFnMessageBoxUpdate = NULL;

	if ( ! pFnMessageBoxUpdate )
		pFnMessageBoxUpdate = (UFunction*) UObject::GObjObjects()->Data[ 45541 ];

	UBioSeqAct_ShowMessage_execMessageBoxUpdate_Parms MessageBoxUpdate_Parms;
	MessageBoxUpdate_Parms.fDeltaT = fDeltaT;
	MessageBoxUpdate_Parms.oMsgBox = oMsgBox;

	this->ProcessEvent ( pFnMessageBoxUpdate, &MessageBoxUpdate_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowMessage.MessageInputPressed
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSeqAct_ShowMessage::MessageInputPressed ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnMessageInputPressed = NULL;

	if ( ! pFnMessageInputPressed )
		pFnMessageInputPressed = (UFunction*) UObject::GObjObjects()->Data[ 45538 ];

	UBioSeqAct_ShowMessage_execMessageInputPressed_Parms MessageInputPressed_Parms;
	MessageInputPressed_Parms.bAPressed = bAPressed;
	MessageInputPressed_Parms.nContext = nContext;

	this->ProcessEvent ( pFnMessageInputPressed, &MessageInputPressed_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowMessage.UpdateOp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool UBioSeqAct_ShowMessage::UpdateOp ( float fDeltaT )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 45535 ];

	UBioSeqAct_ShowMessage_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_ShowMessage.Activated
// [0x00820002] 
// Parameters infos:

void UBioSeqAct_ShowMessage::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45530 ];

	UBioSeqAct_ShowMessage_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ShowTutorial.UpdateOp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool UBioSeqAct_ShowTutorial::UpdateOp ( float fDeltaT )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 45578 ];

	UBioSeqAct_ShowTutorial_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_ShowTutorial.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ShowTutorial::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45577 ];

	UBioSeqAct_ShowTutorial_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SquadStopHoldingPosition.Activated
// [0x00020000] 
// Parameters infos:

void UBioSeqAct_SquadStopHoldingPosition::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45647 ];

	UBioSeqAct_SquadStopHoldingPosition_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_SwitchWeighted.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_SwitchWeighted::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45695 ];

	UBioSeqAct_SwitchWeighted_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_TalkObjSelect.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_TalkObjSelect::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45723 ];

	UBioSeqAct_TalkObjSelect_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_TalkObjSelect.GetHenchID
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   Tag                            ( CPF_Parm )

int UBioSeqAct_TalkObjSelect::GetHenchID ( struct FName Tag )
{
	static UFunction* pFnGetHenchID = NULL;

	if ( ! pFnGetHenchID )
		pFnGetHenchID = (UFunction*) UObject::GObjObjects()->Data[ 45719 ];

	UBioSeqAct_TalkObjSelect_execGetHenchID_Parms GetHenchID_Parms;
	memcpy ( &GetHenchID_Parms.Tag, &Tag, 0x8 );

	this->ProcessEvent ( pFnGetHenchID, &GetHenchID_Parms, NULL );

	return GetHenchID_Parms.ReturnValue;
};

// Function SFXGame.BioSeqAct_TempLookAt.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_TempLookAt::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45744 ];

	UBioSeqAct_TempLookAt_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ToggleCombat.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ToggleCombat::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45748 ];

	UBioSeqAct_ToggleCombat_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_ToggleSave.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqAct_ToggleSave::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45759 ];

	UBioSeqAct_ToggleSave_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqAct_UpdateTacticianAchievement.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqAct_UpdateTacticianAchievement::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45778 ];

	UBioSeqAct_UpdateTacticianAchievement_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqCond_GetBoolGroup.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSeqCond_GetBoolGroup::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45830 ];

	UBioSeqCond_GetBoolGroup_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqCond_HasPlaypenVolume.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqCond_HasPlaypenVolume::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45836 ];

	UBioSeqCond_HasPlaypenVolume_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSeqCond_InCombat.Activated
// [0x00020002] 
// Parameters infos:

void UBioSeqCond_InCombat::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 45841 ];

	UBioSeqCond_InCombat_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Achievement.PopulateAchievementItemListEntry
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// int                            nDisplayIndex                  ( CPF_Parm )

void UBioSFHandler_Achievement::PopulateAchievementItemListEntry ( int nDisplayIndex )
{
	static UFunction* pFnPopulateAchievementItemListEntry = NULL;

	if ( ! pFnPopulateAchievementItemListEntry )
		pFnPopulateAchievementItemListEntry = (UFunction*) UObject::GObjObjects()->Data[ 46186 ];

	UBioSFHandler_Achievement_execPopulateAchievementItemListEntry_Parms PopulateAchievementItemListEntry_Parms;
	PopulateAchievementItemListEntry_Parms.nDisplayIndex = nDisplayIndex;

	this->ProcessEvent ( pFnPopulateAchievementItemListEntry, &PopulateAchievementItemListEntry_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Achievement.PopulateAchievementItemList
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_Achievement::PopulateAchievementItemList ( )
{
	static UFunction* pFnPopulateAchievementItemList = NULL;

	if ( ! pFnPopulateAchievementItemList )
		pFnPopulateAchievementItemList = (UFunction*) UObject::GObjObjects()->Data[ 46188 ];

	UBioSFHandler_Achievement_execPopulateAchievementItemList_Parms PopulateAchievementItemList_Parms;

	this->ProcessEvent ( pFnPopulateAchievementItemList, &PopulateAchievementItemList_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Achievement.Init
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_Achievement::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 46187 ];

	UBioSFHandler_Achievement_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Achievement.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_Achievement::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 46182 ];

	UBioSFHandler_Achievement_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_Achievement.SetFromMainMenu
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_Achievement::SetFromMainMenu ( )
{
	static UFunction* pFnSetFromMainMenu = NULL;

	if ( ! pFnSetFromMainMenu )
		pFnSetFromMainMenu = (UFunction*) UObject::GObjObjects()->Data[ 46181 ];

	UBioSFHandler_Achievement_execSetFromMainMenu_Parms SetFromMainMenu_Parms;

	this->ProcessEvent ( pFnSetFromMainMenu, &SetFromMainMenu_Parms, NULL );
};

// Function SFXGame.BioSFHandler_SharedIGG.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_SharedIGG::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 48885 ];

	UBioSFHandler_SharedIGG_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_SharedIGG.HandleInputEvent
// [0x00020800] ( FUNC_Event )
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_SharedIGG::eventHandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 48882 ];

	UBioSFHandler_SharedIGG_eventHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.AdditionalShutdownHandling
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_CharacterRecord2::AdditionalShutdownHandling ( )
{
	static UFunction* pFnAdditionalShutdownHandling = NULL;

	if ( ! pFnAdditionalShutdownHandling )
		pFnAdditionalShutdownHandling = (UFunction*) UObject::GObjObjects()->Data[ 46649 ];

	UBioSFHandler_CharacterRecord2_execAdditionalShutdownHandling_Parms AdditionalShutdownHandling_Parms;

	this->ProcessEvent ( pFnAdditionalShutdownHandling, &AdditionalShutdownHandling_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.CancelEvolution
// [0x00020002] 
// Parameters infos:
// class USFXPower*               OriginalPower                  ( CPF_Parm )

void UBioSFHandler_CharacterRecord2::CancelEvolution ( class USFXPower* OriginalPower )
{
	static UFunction* pFnCancelEvolution = NULL;

	if ( ! pFnCancelEvolution )
		pFnCancelEvolution = (UFunction*) UObject::GObjObjects()->Data[ 46647 ];

	UBioSFHandler_CharacterRecord2_execCancelEvolution_Parms CancelEvolution_Parms;
	CancelEvolution_Parms.OriginalPower = OriginalPower;

	this->ProcessEvent ( pFnCancelEvolution, &CancelEvolution_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.EvolvePower
// [0x00820002] 
// Parameters infos:
// class USFXPower*               OriginalPower                  ( CPF_Parm )
// class UClass*                  EvolvedPowerClass              ( CPF_Parm )

void UBioSFHandler_CharacterRecord2::EvolvePower ( class USFXPower* OriginalPower, class UClass* EvolvedPowerClass )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 46638 ];

	UBioSFHandler_CharacterRecord2_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.OriginalPower = OriginalPower;
	EvolvePower_Parms.EvolvedPowerClass = EvolvedPowerClass;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.CancelChanges
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_CharacterRecord2::CancelChanges ( )
{
	static UFunction* pFnCancelChanges = NULL;

	if ( ! pFnCancelChanges )
		pFnCancelChanges = (UFunction*) UObject::GObjObjects()->Data[ 46476 ];

	UBioSFHandler_CharacterRecord2_execCancelChanges_Parms CancelChanges_Parms;

	this->ProcessEvent ( pFnCancelChanges, &CancelChanges_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.GetSquadMemberNamesAndIcons
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// class UTexture*                NextMemberIcon                 ( CPF_Parm | CPF_OutParm )
// class UTexture*                PrevMemberIcon                 ( CPF_Parm | CPF_OutParm )

void UBioSFHandler_CharacterRecord2::GetSquadMemberNamesAndIcons ( class UTexture** NextMemberIcon, class UTexture** PrevMemberIcon )
{
	static UFunction* pFnGetSquadMemberNamesAndIcons = NULL;

	if ( ! pFnGetSquadMemberNamesAndIcons )
		pFnGetSquadMemberNamesAndIcons = (UFunction*) UObject::GObjObjects()->Data[ 46567 ];

	UBioSFHandler_CharacterRecord2_execGetSquadMemberNamesAndIcons_Parms GetSquadMemberNamesAndIcons_Parms;

	this->ProcessEvent ( pFnGetSquadMemberNamesAndIcons, &GetSquadMemberNamesAndIcons_Parms, NULL );

	//if ( srCurrentMember )

	//if ( srPreviousMember )

	//if ( srNextMember )

	if ( NextMemberIcon )
		*NextMemberIcon = GetSquadMemberNamesAndIcons_Parms.NextMemberIcon;

	if ( PrevMemberIcon )
		*PrevMemberIcon = GetSquadMemberNamesAndIcons_Parms.PrevMemberIcon;
};

// Function SFXGame.BioSFHandler_CharacterRecord2.GetExperienceProgress
// [0x00440003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            CurrentXP                      ( CPF_Parm | CPF_OutParm )
// int                            TargetXP                       ( CPF_Parm | CPF_OutParm )

bool UBioSFHandler_CharacterRecord2::GetExperienceProgress ( int* CurrentXP, int* TargetXP )
{
	static UFunction* pFnGetExperienceProgress = NULL;

	if ( ! pFnGetExperienceProgress )
		pFnGetExperienceProgress = (UFunction*) UObject::GObjObjects()->Data[ 46568 ];

	UBioSFHandler_CharacterRecord2_execGetExperienceProgress_Parms GetExperienceProgress_Parms;

	this->ProcessEvent ( pFnGetExperienceProgress, &GetExperienceProgress_Parms, NULL );

	if ( CurrentXP )
		*CurrentXP = GetExperienceProgress_Parms.CurrentXP;

	if ( TargetXP )
		*TargetXP = GetExperienceProgress_Parms.TargetXP;

	return GetExperienceProgress_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_CharacterRecord2.UpdatePoints
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_CharacterRecord2::UpdatePoints ( )
{
	static UFunction* pFnUpdatePoints = NULL;

	if ( ! pFnUpdatePoints )
		pFnUpdatePoints = (UFunction*) UObject::GObjObjects()->Data[ 46525 ];

	UBioSFHandler_CharacterRecord2_execUpdatePoints_Parms UpdatePoints_Parms;

	this->ProcessEvent ( pFnUpdatePoints, &UpdatePoints_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.UpdatePowerRanks
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// int                            nPowerIndex                    ( CPF_Parm )

void UBioSFHandler_CharacterRecord2::UpdatePowerRanks ( int nPowerIndex )
{
	static UFunction* pFnUpdatePowerRanks = NULL;

	if ( ! pFnUpdatePowerRanks )
		pFnUpdatePowerRanks = (UFunction*) UObject::GObjObjects()->Data[ 46611 ];

	UBioSFHandler_CharacterRecord2_execUpdatePowerRanks_Parms UpdatePowerRanks_Parms;
	UpdatePowerRanks_Parms.nPowerIndex = nPowerIndex;

	this->ProcessEvent ( pFnUpdatePowerRanks, &UpdatePowerRanks_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.UpdatePowerList
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_CharacterRecord2::UpdatePowerList ( )
{
	static UFunction* pFnUpdatePowerList = NULL;

	if ( ! pFnUpdatePowerList )
		pFnUpdatePowerList = (UFunction*) UObject::GObjObjects()->Data[ 46524 ];

	UBioSFHandler_CharacterRecord2_execUpdatePowerList_Parms UpdatePowerList_Parms;

	this->ProcessEvent ( pFnUpdatePowerList, &UpdatePowerList_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.CreatePowerList
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_CharacterRecord2::CreatePowerList ( )
{
	static UFunction* pFnCreatePowerList = NULL;

	if ( ! pFnCreatePowerList )
		pFnCreatePowerList = (UFunction*) UObject::GObjObjects()->Data[ 46523 ];

	UBioSFHandler_CharacterRecord2_execCreatePowerList_Parms CreatePowerList_Parms;

	this->ProcessEvent ( pFnCreatePowerList, &CreatePowerList_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.FloorEx
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          Value                          ( CPF_Parm )

float UBioSFHandler_CharacterRecord2::FloorEx ( float Value )
{
	static UFunction* pFnFloorEx = NULL;

	if ( ! pFnFloorEx )
		pFnFloorEx = (UFunction*) UObject::GObjObjects()->Data[ 46590 ];

	UBioSFHandler_CharacterRecord2_execFloorEx_Parms FloorEx_Parms;
	FloorEx_Parms.Value = Value;

	this->ProcessEvent ( pFnFloorEx, &FloorEx_Parms, NULL );

	return FloorEx_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_CharacterRecord2.UpdateParagonRenegadeValues
// [0x00820002] 
// Parameters infos:
// unsigned long                  bAnimate                       ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_CharacterRecord2::UpdateParagonRenegadeValues ( unsigned long bAnimate )
{
	static UFunction* pFnUpdateParagonRenegadeValues = NULL;

	if ( ! pFnUpdateParagonRenegadeValues )
		pFnUpdateParagonRenegadeValues = (UFunction*) UObject::GObjObjects()->Data[ 46580 ];

	UBioSFHandler_CharacterRecord2_execUpdateParagonRenegadeValues_Parms UpdateParagonRenegadeValues_Parms;
	UpdateParagonRenegadeValues_Parms.bAnimate = bAnimate;

	this->ProcessEvent ( pFnUpdateParagonRenegadeValues, &UpdateParagonRenegadeValues_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.GetParagonRenegadePercentage
// [0x00420002] 
// Parameters infos:
// class ASFXPawn_Player*         PlayerPawn                     ( CPF_Parm )
// float                          ParagonPercent                 ( CPF_Parm | CPF_OutParm )
// float                          RenegadePercent                ( CPF_Parm | CPF_OutParm )

void UBioSFHandler_CharacterRecord2::GetParagonRenegadePercentage ( class ASFXPawn_Player* PlayerPawn, float* ParagonPercent, float* RenegadePercent )
{
	static UFunction* pFnGetParagonRenegadePercentage = NULL;

	if ( ! pFnGetParagonRenegadePercentage )
		pFnGetParagonRenegadePercentage = (UFunction*) UObject::GObjObjects()->Data[ 46569 ];

	UBioSFHandler_CharacterRecord2_execGetParagonRenegadePercentage_Parms GetParagonRenegadePercentage_Parms;
	GetParagonRenegadePercentage_Parms.PlayerPawn = PlayerPawn;

	this->ProcessEvent ( pFnGetParagonRenegadePercentage, &GetParagonRenegadePercentage_Parms, NULL );

	if ( ParagonPercent )
		*ParagonPercent = GetParagonRenegadePercentage_Parms.ParagonPercent;

	if ( RenegadePercent )
		*RenegadePercent = GetParagonRenegadePercentage_Parms.RenegadePercent;
};

// Function SFXGame.BioSFHandler_CharacterRecord2.UpdateCharacterStats
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_CharacterRecord2::UpdateCharacterStats ( )
{
	static UFunction* pFnUpdateCharacterStats = NULL;

	if ( ! pFnUpdateCharacterStats )
		pFnUpdateCharacterStats = (UFunction*) UObject::GObjObjects()->Data[ 46538 ];

	UBioSFHandler_CharacterRecord2_execUpdateCharacterStats_Parms UpdateCharacterStats_Parms;

	this->ProcessEvent ( pFnUpdateCharacterStats, &UpdateCharacterStats_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.UpdateAll
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_CharacterRecord2::UpdateAll ( )
{
	static UFunction* pFnUpdateAll = NULL;

	if ( ! pFnUpdateAll )
		pFnUpdateAll = (UFunction*) UObject::GObjObjects()->Data[ 46478 ];

	UBioSFHandler_CharacterRecord2_execUpdateAll_Parms UpdateAll_Parms;

	this->ProcessEvent ( pFnUpdateAll, &UpdateAll_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.CleanupCharacter
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_CharacterRecord2::CleanupCharacter ( )
{
	static UFunction* pFnCleanupCharacter = NULL;

	if ( ! pFnCleanupCharacter )
		pFnCleanupCharacter = (UFunction*) UObject::GObjObjects()->Data[ 46477 ];

	UBioSFHandler_CharacterRecord2_execCleanupCharacter_Parms CleanupCharacter_Parms;

	this->ProcessEvent ( pFnCleanupCharacter, &CleanupCharacter_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.PurchasePowerRank
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// int                            nPowerIndex                    ( CPF_Parm )

void UBioSFHandler_CharacterRecord2::PurchasePowerRank ( int nPowerIndex )
{
	static UFunction* pFnPurchasePowerRank = NULL;

	if ( ! pFnPurchasePowerRank )
		pFnPurchasePowerRank = (UFunction*) UObject::GObjObjects()->Data[ 46475 ];

	UBioSFHandler_CharacterRecord2_execPurchasePowerRank_Parms PurchasePowerRank_Parms;
	PurchasePowerRank_Parms.nPowerIndex = nPowerIndex;

	this->ProcessEvent ( pFnPurchasePowerRank, &PurchasePowerRank_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.AutoLevelUp
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_CharacterRecord2::AutoLevelUp ( )
{
	static UFunction* pFnAutoLevelUp = NULL;

	if ( ! pFnAutoLevelUp )
		pFnAutoLevelUp = (UFunction*) UObject::GObjObjects()->Data[ 46474 ];

	UBioSFHandler_CharacterRecord2_execAutoLevelUp_Parms AutoLevelUp_Parms;

	this->ProcessEvent ( pFnAutoLevelUp, &AutoLevelUp_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.ChangeToCharacter
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                NextCharacter                  ( CPF_Parm )

bool UBioSFHandler_CharacterRecord2::ChangeToCharacter ( class ABioPawn* NextCharacter )
{
	static UFunction* pFnChangeToCharacter = NULL;

	if ( ! pFnChangeToCharacter )
		pFnChangeToCharacter = (UFunction*) UObject::GObjObjects()->Data[ 46513 ];

	UBioSFHandler_CharacterRecord2_execChangeToCharacter_Parms ChangeToCharacter_Parms;
	ChangeToCharacter_Parms.NextCharacter = NextCharacter;

	this->ProcessEvent ( pFnChangeToCharacter, &ChangeToCharacter_Parms, NULL );

	return ChangeToCharacter_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_CharacterRecord2.NextCharacter
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bNext                          ( CPF_Parm )

bool UBioSFHandler_CharacterRecord2::NextCharacter ( unsigned long bNext )
{
	static UFunction* pFnNextCharacter = NULL;

	if ( ! pFnNextCharacter )
		pFnNextCharacter = (UFunction*) UObject::GObjObjects()->Data[ 46473 ];

	UBioSFHandler_CharacterRecord2_execNextCharacter_Parms NextCharacter_Parms;
	NextCharacter_Parms.bNext = bNext;

	this->ProcessEvent ( pFnNextCharacter, &NextCharacter_Parms, NULL );

	return NextCharacter_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_CharacterRecord2.InitializeCharacterRecord
// [0x00840003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFHandler_CharacterRecord2::InitializeCharacterRecord ( )
{
	static UFunction* pFnInitializeCharacterRecord = NULL;

	if ( ! pFnInitializeCharacterRecord )
		pFnInitializeCharacterRecord = (UFunction*) UObject::GObjObjects()->Data[ 46472 ];

	UBioSFHandler_CharacterRecord2_execInitializeCharacterRecord_Parms InitializeCharacterRecord_Parms;

	this->ProcessEvent ( pFnInitializeCharacterRecord, &InitializeCharacterRecord_Parms, NULL );

	return InitializeCharacterRecord_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_CharacterRecord2.Callback_ClosedTalentMsgBox
// [0x00820002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            Context                        ( CPF_Parm )

void UBioSFHandler_CharacterRecord2::Callback_ClosedTalentMsgBox ( unsigned long bAPressed, int Context )
{
	static UFunction* pFnCallback_ClosedTalentMsgBox = NULL;

	if ( ! pFnCallback_ClosedTalentMsgBox )
		pFnCallback_ClosedTalentMsgBox = (UFunction*) UObject::GObjObjects()->Data[ 46497 ];

	UBioSFHandler_CharacterRecord2_execCallback_ClosedTalentMsgBox_Parms Callback_ClosedTalentMsgBox_Parms;
	Callback_ClosedTalentMsgBox_Parms.bAPressed = bAPressed;
	Callback_ClosedTalentMsgBox_Parms.Context = Context;

	this->ProcessEvent ( pFnCallback_ClosedTalentMsgBox, &Callback_ClosedTalentMsgBox_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.OnPanelAdded
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_CharacterRecord2::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 46492 ];

	UBioSFHandler_CharacterRecord2_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_CharacterRecord2::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 46490 ];

	UBioSFHandler_CharacterRecord2_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.Update
// [0x00820002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFHandler_CharacterRecord2::Update ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 46485 ];

	UBioSFHandler_CharacterRecord2_execUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.ProcessRStickAxisInput
// [0x00020002] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void UBioSFHandler_CharacterRecord2::ProcessRStickAxisInput ( float fValue )
{
	static UFunction* pFnProcessRStickAxisInput = NULL;

	if ( ! pFnProcessRStickAxisInput )
		pFnProcessRStickAxisInput = (UFunction*) UObject::GObjObjects()->Data[ 46483 ];

	UBioSFHandler_CharacterRecord2_execProcessRStickAxisInput_Parms ProcessRStickAxisInput_Parms;
	ProcessRStickAxisInput_Parms.fValue = fValue;

	this->ProcessEvent ( pFnProcessRStickAxisInput, &ProcessRStickAxisInput_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_CharacterRecord2::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 46479 ];

	UBioSFHandler_CharacterRecord2_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       Parameters                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_CharacterRecord2::HandleEvent ( unsigned char nCommand, TArray< struct FString >* Parameters )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 46468 ];

	UBioSFHandler_CharacterRecord2_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( Parameters )
		memcpy ( Parameters, &HandleEvent_Parms.Parameters, 0xC );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.SetOnCloseCallback
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         fn_OnCloseDelegate             ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_CharacterRecord2::SetOnCloseCallback ( struct FScriptDelegate fn_OnCloseDelegate )
{
	static UFunction* pFnSetOnCloseCallback = NULL;

	if ( ! pFnSetOnCloseCallback )
		pFnSetOnCloseCallback = (UFunction*) UObject::GObjObjects()->Data[ 46466 ];

	UBioSFHandler_CharacterRecord2_execSetOnCloseCallback_Parms SetOnCloseCallback_Parms;
	memcpy ( &SetOnCloseCallback_Parms.fn_OnCloseDelegate, &fn_OnCloseDelegate, 0xC );

	this->ProcessEvent ( pFnSetOnCloseCallback, &SetOnCloseCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_CharacterRecord2.OnCloseCallback
// [0x00120000] 
// Parameters infos:

void UBioSFHandler_CharacterRecord2::OnCloseCallback ( )
{
	static UFunction* pFnOnCloseCallback = NULL;

	if ( ! pFnOnCloseCallback )
		pFnOnCloseCallback = (UFunction*) UObject::GObjObjects()->Data[ 46444 ];

	UBioSFHandler_CharacterRecord2_execOnCloseCallback_Parms OnCloseCallback_Parms;

	this->ProcessEvent ( pFnOnCloseCallback, &OnCloseCallback_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Specialization.CancelEvolution
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_Specialization::CancelEvolution ( )
{
	static UFunction* pFnCancelEvolution = NULL;

	if ( ! pFnCancelEvolution )
		pFnCancelEvolution = (UFunction*) UObject::GObjObjects()->Data[ 48771 ];

	UBioSFHandler_Specialization_execCancelEvolution_Parms CancelEvolution_Parms;

	this->ProcessEvent ( pFnCancelEvolution, &CancelEvolution_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Specialization.EvolvePower
// [0x00040003] ( FUNC_Final )
// Parameters infos:
// int                            nIndex                         ( CPF_Parm )

void UBioSFHandler_Specialization::EvolvePower ( int nIndex )
{
	static UFunction* pFnEvolvePower = NULL;

	if ( ! pFnEvolvePower )
		pFnEvolvePower = (UFunction*) UObject::GObjObjects()->Data[ 48770 ];

	UBioSFHandler_Specialization_execEvolvePower_Parms EvolvePower_Parms;
	EvolvePower_Parms.nIndex = nIndex;

	this->ProcessEvent ( pFnEvolvePower, &EvolvePower_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Specialization.UpdatePowerList
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_Specialization::UpdatePowerList ( )
{
	static UFunction* pFnUpdatePowerList = NULL;

	if ( ! pFnUpdatePowerList )
		pFnUpdatePowerList = (UFunction*) UObject::GObjObjects()->Data[ 48769 ];

	UBioSFHandler_Specialization_execUpdatePowerList_Parms UpdatePowerList_Parms;

	this->ProcessEvent ( pFnUpdatePowerList, &UpdatePowerList_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Specialization.Update
// [0x00820002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFHandler_Specialization::Update ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 48775 ];

	UBioSFHandler_Specialization_execUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Specialization.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_Specialization::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 48772 ];

	UBioSFHandler_Specialization_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Specialization.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       Parameters                     ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_Specialization::HandleEvent ( unsigned char nCommand, TArray< struct FString >* Parameters )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 48765 ];

	UBioSFHandler_Specialization_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( Parameters )
		memcpy ( Parameters, &HandleEvent_Parms.Parameters, 0xC );
};

// Function SFXGame.BioSFHandler_Specialization.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_Specialization::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 48764 ];

	UBioSFHandler_Specialization_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Specialization.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_Specialization::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48763 ];

	UBioSFHandler_Specialization_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Specialization.Initialize
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )
// struct FName                   nmPowerName                    ( CPF_Parm )

bool UBioSFHandler_Specialization::Initialize ( class ABioPawn* oPawn, struct FName nmPowerName )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 48759 ];

	UBioSFHandler_Specialization_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.oPawn = oPawn;
	memcpy ( &Initialize_Parms.nmPowerName, &nmPowerName, 0x8 );

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	return Initialize_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_Specialization.CancelEvolutionDelegate
// [0x00120000] 
// Parameters infos:
// class USFXPower*               OriginalPower                  ( CPF_Parm )

void UBioSFHandler_Specialization::CancelEvolutionDelegate ( class USFXPower* OriginalPower )
{
	static UFunction* pFnCancelEvolutionDelegate = NULL;

	if ( ! pFnCancelEvolutionDelegate )
		pFnCancelEvolutionDelegate = (UFunction*) UObject::GObjObjects()->Data[ 48749 ];

	UBioSFHandler_Specialization_execCancelEvolutionDelegate_Parms CancelEvolutionDelegate_Parms;
	CancelEvolutionDelegate_Parms.OriginalPower = OriginalPower;

	this->ProcessEvent ( pFnCancelEvolutionDelegate, &CancelEvolutionDelegate_Parms, NULL );
};

// Function SFXGame.BioSFHandler_Specialization.EvolvePowerDelegate
// [0x00120000] 
// Parameters infos:
// class USFXPower*               OriginalPower                  ( CPF_Parm )
// class UClass*                  EvolvedPowerClass              ( CPF_Parm )

void UBioSFHandler_Specialization::EvolvePowerDelegate ( class USFXPower* OriginalPower, class UClass* EvolvedPowerClass )
{
	static UFunction* pFnEvolvePowerDelegate = NULL;

	if ( ! pFnEvolvePowerDelegate )
		pFnEvolvePowerDelegate = (UFunction*) UObject::GObjObjects()->Data[ 48750 ];

	UBioSFHandler_Specialization_execEvolvePowerDelegate_Parms EvolvePowerDelegate_Parms;
	EvolvePowerDelegate_Parms.OriginalPower = OriginalPower;
	EvolvePowerDelegate_Parms.EvolvedPowerClass = EvolvedPowerClass;

	this->ProcessEvent ( pFnEvolvePowerDelegate, &EvolvePowerDelegate_Parms, NULL );
};

// Function SFXGame.BioSFHandler_LoadGame.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_LoadGame::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 47169 ];

	UBioSFHandler_LoadGame_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.SFXAreaMapData.GetPixelCoordinates
// [0x00420002] 
// Parameters infos:
// float                          UU_X                           ( CPF_Parm )
// float                          UU_Y                           ( CPF_Parm )
// float                          Px                             ( CPF_Parm | CPF_OutParm )
// float                          Py                             ( CPF_Parm | CPF_OutParm )

void USFXAreaMapData::GetPixelCoordinates ( float UU_X, float UU_Y, float* Px, float* Py )
{
	static UFunction* pFnGetPixelCoordinates = NULL;

	if ( ! pFnGetPixelCoordinates )
		pFnGetPixelCoordinates = (UFunction*) UObject::GObjObjects()->Data[ 53429 ];

	USFXAreaMapData_execGetPixelCoordinates_Parms GetPixelCoordinates_Parms;
	GetPixelCoordinates_Parms.UU_X = UU_X;
	GetPixelCoordinates_Parms.UU_Y = UU_Y;

	this->ProcessEvent ( pFnGetPixelCoordinates, &GetPixelCoordinates_Parms, NULL );

	if ( Px )
		*Px = GetPixelCoordinates_Parms.Px;

	if ( Py )
		*Py = GetPixelCoordinates_Parms.Py;
};

// Function SFXGame.SFXAreaMapData.ReCalculate
// [0x00020002] 
// Parameters infos:

void USFXAreaMapData::ReCalculate ( )
{
	static UFunction* pFnReCalculate = NULL;

	if ( ! pFnReCalculate )
		pFnReCalculate = (UFunction*) UObject::GObjObjects()->Data[ 53426 ];

	USFXAreaMapData_execReCalculate_Parms ReCalculate_Parms;

	this->ProcessEvent ( pFnReCalculate, &ReCalculate_Parms, NULL );
};

// Function SFXGame.SFXAreaMapData.GetUUCordAtPxOrigin
// [0x00420002] 
// Parameters infos:
// float                          UU_X                           ( CPF_Parm | CPF_OutParm )
// float                          UU_Y                           ( CPF_Parm | CPF_OutParm )

void USFXAreaMapData::GetUUCordAtPxOrigin ( float* UU_X, float* UU_Y )
{
	static UFunction* pFnGetUUCordAtPxOrigin = NULL;

	if ( ! pFnGetUUCordAtPxOrigin )
		pFnGetUUCordAtPxOrigin = (UFunction*) UObject::GObjObjects()->Data[ 53420 ];

	USFXAreaMapData_execGetUUCordAtPxOrigin_Parms GetUUCordAtPxOrigin_Parms;

	this->ProcessEvent ( pFnGetUUCordAtPxOrigin, &GetUUCordAtPxOrigin_Parms, NULL );

	if ( UU_X )
		*UU_X = GetUUCordAtPxOrigin_Parms.UU_X;

	if ( UU_Y )
		*UU_Y = GetUUCordAtPxOrigin_Parms.UU_Y;
};

// Function SFXGame.SFXAreaMapData.GetPxPerUU
// [0x00820002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

float USFXAreaMapData::GetPxPerUU ( )
{
	static UFunction* pFnGetPxPerUU = NULL;

	if ( ! pFnGetPxPerUU )
		pFnGetPxPerUU = (UFunction*) UObject::GObjObjects()->Data[ 53413 ];

	USFXAreaMapData_execGetPxPerUU_Parms GetPxPerUU_Parms;

	this->ProcessEvent ( pFnGetPxPerUU, &GetPxPerUU_Parms, NULL );

	return GetPxPerUU_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_PartySelection.ExitScreen
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PartySelection::ExitScreen ( )
{
	static UFunction* pFnExitScreen = NULL;

	if ( ! pFnExitScreen )
		pFnExitScreen = (UFunction*) UObject::GObjObjects()->Data[ 48496 ];

	UBioSFHandler_PartySelection_execExitScreen_Parms ExitScreen_Parms;

	this->ProcessEvent ( pFnExitScreen, &ExitScreen_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PartySelection.FinalizeParty
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_PartySelection::FinalizeParty ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnFinalizeParty = NULL;

	if ( ! pFnFinalizeParty )
		pFnFinalizeParty = (UFunction*) UObject::GObjObjects()->Data[ 48492 ];

	UBioSFHandler_PartySelection_execFinalizeParty_Parms FinalizeParty_Parms;
	FinalizeParty_Parms.bAPressed = bAPressed;
	FinalizeParty_Parms.nContext = nContext;

	this->ProcessEvent ( pFnFinalizeParty, &FinalizeParty_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PartySelection.ConfirmParty
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_PartySelection::ConfirmParty ( )
{
	static UFunction* pFnConfirmParty = NULL;

	if ( ! pFnConfirmParty )
		pFnConfirmParty = (UFunction*) UObject::GObjObjects()->Data[ 48489 ];

	UBioSFHandler_PartySelection_execConfirmParty_Parms ConfirmParty_Parms;

	this->ProcessEvent ( pFnConfirmParty, &ConfirmParty_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PartySelection.DoInitialization
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_PartySelection::DoInitialization ( )
{
	static UFunction* pFnDoInitialization = NULL;

	if ( ! pFnDoInitialization )
		pFnDoInitialization = (UFunction*) UObject::GObjObjects()->Data[ 48464 ];

	UBioSFHandler_PartySelection_execDoInitialization_Parms DoInitialization_Parms;

	this->ProcessEvent ( pFnDoInitialization, &DoInitialization_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PartySelection.SendInfo
// [0x00820002] 
// Parameters infos:
// int                            nChar                          ( CPF_Parm )

void UBioSFHandler_PartySelection::SendInfo ( int nChar )
{
	static UFunction* pFnSendInfo = NULL;

	if ( ! pFnSendInfo )
		pFnSendInfo = (UFunction*) UObject::GObjObjects()->Data[ 48458 ];

	UBioSFHandler_PartySelection_execSendInfo_Parms SendInfo_Parms;
	SendInfo_Parms.nChar = nChar;

	this->ProcessEvent ( pFnSendInfo, &SendInfo_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PartySelection.SetInfo
// [0x00820002] 
// Parameters infos:
// struct FName                   nmTag                          ( CPF_Parm )
// class USFXPlayerSquadLoadoutData* oLoadout                       ( CPF_Parm )

void UBioSFHandler_PartySelection::SetInfo ( struct FName nmTag, class USFXPlayerSquadLoadoutData* oLoadout )
{
	static UFunction* pFnSetInfo = NULL;

	if ( ! pFnSetInfo )
		pFnSetInfo = (UFunction*) UObject::GObjObjects()->Data[ 48442 ];

	UBioSFHandler_PartySelection_execSetInfo_Parms SetInfo_Parms;
	memcpy ( &SetInfo_Parms.nmTag, &nmTag, 0x8 );
	SetInfo_Parms.oLoadout = oLoadout;

	this->ProcessEvent ( pFnSetInfo, &SetInfo_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PartySelection.PlayConflict
// [0x00020002] 
// Parameters infos:
// int                            nChar1                         ( CPF_Parm )
// int                            nChar2                         ( CPF_Parm )

void UBioSFHandler_PartySelection::PlayConflict ( int nChar1, int nChar2 )
{
	static UFunction* pFnPlayConflict = NULL;

	if ( ! pFnPlayConflict )
		pFnPlayConflict = (UFunction*) UObject::GObjObjects()->Data[ 48439 ];

	UBioSFHandler_PartySelection_execPlayConflict_Parms PlayConflict_Parms;
	PlayConflict_Parms.nChar1 = nChar1;
	PlayConflict_Parms.nChar2 = nChar2;

	this->ProcessEvent ( pFnPlayConflict, &PlayConflict_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PartySelection.SetCharacterAppearance
// [0x00020002] 
// Parameters infos:
// int                            nChar                          ( CPF_Parm )
// int                            nAppearance                    ( CPF_Parm )

void UBioSFHandler_PartySelection::SetCharacterAppearance ( int nChar, int nAppearance )
{
	static UFunction* pFnSetCharacterAppearance = NULL;

	if ( ! pFnSetCharacterAppearance )
		pFnSetCharacterAppearance = (UFunction*) UObject::GObjObjects()->Data[ 48435 ];

	UBioSFHandler_PartySelection_execSetCharacterAppearance_Parms SetCharacterAppearance_Parms;
	SetCharacterAppearance_Parms.nChar = nChar;
	SetCharacterAppearance_Parms.nAppearance = nAppearance;

	this->ProcessEvent ( pFnSetCharacterAppearance, &SetCharacterAppearance_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PartySelection.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_PartySelection::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 48428 ];

	UBioSFHandler_PartySelection_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_PartySelection.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PartySelection::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 48427 ];

	UBioSFHandler_PartySelection_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PartySelection.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PartySelection::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48426 ];

	UBioSFHandler_PartySelection_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PartySelection.ClearDelegates
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PartySelection::ClearDelegates ( )
{
	static UFunction* pFnClearDelegates = NULL;

	if ( ! pFnClearDelegates )
		pFnClearDelegates = (UFunction*) UObject::GObjObjects()->Data[ 48425 ];

	UBioSFHandler_PartySelection_execClearDelegates_Parms ClearDelegates_Parms;

	this->ProcessEvent ( pFnClearDelegates, &ClearDelegates_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PartySelection.SetExternalCallback_OnComplete
// [0x00020002] 
// Parameters infos:
// struct FScriptDelegate         pDelegate                      ( CPF_Parm | CPF_NeedCtorLink )

void UBioSFHandler_PartySelection::SetExternalCallback_OnComplete ( struct FScriptDelegate pDelegate )
{
	static UFunction* pFnSetExternalCallback_OnComplete = NULL;

	if ( ! pFnSetExternalCallback_OnComplete )
		pFnSetExternalCallback_OnComplete = (UFunction*) UObject::GObjObjects()->Data[ 48423 ];

	UBioSFHandler_PartySelection_execSetExternalCallback_OnComplete_Parms SetExternalCallback_OnComplete_Parms;
	memcpy ( &SetExternalCallback_OnComplete_Parms.pDelegate, &pDelegate, 0xC );

	this->ProcessEvent ( pFnSetExternalCallback_OnComplete, &SetExternalCallback_OnComplete_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PartySelection.ExternalCallback_OnComplete
// [0x00120000] 
// Parameters infos:

void UBioSFHandler_PartySelection::ExternalCallback_OnComplete ( )
{
	static UFunction* pFnExternalCallback_OnComplete = NULL;

	if ( ! pFnExternalCallback_OnComplete )
		pFnExternalCallback_OnComplete = (UFunction*) UObject::GObjObjects()->Data[ 48388 ];

	UBioSFHandler_PartySelection_execExternalCallback_OnComplete_Parms ExternalCallback_OnComplete_Parms;

	this->ProcessEvent ( pFnExternalCallback_OnComplete, &ExternalCallback_OnComplete_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCAchievement.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCAchievement::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48500 ];

	UBioSFHandler_PCAchievement_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCCharacterRecord2.ProcessRStickAxisInput
// [0x00020000] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void UBioSFHandler_PCCharacterRecord2::ProcessRStickAxisInput ( float fValue )
{
	static UFunction* pFnProcessRStickAxisInput = NULL;

	if ( ! pFnProcessRStickAxisInput )
		pFnProcessRStickAxisInput = (UFunction*) UObject::GObjObjects()->Data[ 48504 ];

	UBioSFHandler_PCCharacterRecord2_execProcessRStickAxisInput_Parms ProcessRStickAxisInput_Parms;
	ProcessRStickAxisInput_Parms.fValue = fValue;

	this->ProcessEvent ( pFnProcessRStickAxisInput, &ProcessRStickAxisInput_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCCharacterRecord2.OnPanelAdded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UBioSFHandler_PCCharacterRecord2::eventOnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48503 ];

	UBioSFHandler_PCCharacterRecord2_eventOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCChoiceGUI.ScrollText
// [0x00020000] 
// Parameters infos:
// float                          fValue                         ( CPF_Parm )

void UBioSFHandler_PCChoiceGUI::ScrollText ( float fValue )
{
	static UFunction* pFnScrollText = NULL;

	if ( ! pFnScrollText )
		pFnScrollText = (UFunction*) UObject::GObjObjects()->Data[ 48509 ];

	UBioSFHandler_PCChoiceGUI_execScrollText_Parms ScrollText_Parms;
	ScrollText_Parms.fValue = fValue;

	this->ProcessEvent ( pFnScrollText, &ScrollText_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCChoiceGUI.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCChoiceGUI::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48508 ];

	UBioSFHandler_PCChoiceGUI_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCConversation.Enforce16x9
// [0x00020002] 
// Parameters infos:
// unsigned long                  bVal                           ( CPF_Parm )

void UBioSFHandler_PCConversation::Enforce16x9 ( unsigned long bVal )
{
	static UFunction* pFnEnforce16x9 = NULL;

	if ( ! pFnEnforce16x9 )
		pFnEnforce16x9 = (UFunction*) UObject::GObjObjects()->Data[ 48534 ];

	UBioSFHandler_PCConversation_execEnforce16x9_Parms Enforce16x9_Parms;
	Enforce16x9_Parms.bVal = bVal;

	this->ProcessEvent ( pFnEnforce16x9, &Enforce16x9_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCConversation.Update
// [0x00020002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFHandler_PCConversation::Update ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 48530 ];

	UBioSFHandler_PCConversation_execUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCConversation.CalculateArrowPosition
// [0x00C20002] 
// Parameters infos:
// struct FASParams               stParam                        ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )
// TArray< struct FASParams >     lstParams                      ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_PCConversation::CalculateArrowPosition ( struct FASParams* stParam, TArray< struct FASParams >* lstParams )
{
	static UFunction* pFnCalculateArrowPosition = NULL;

	if ( ! pFnCalculateArrowPosition )
		pFnCalculateArrowPosition = (UFunction*) UObject::GObjObjects()->Data[ 48524 ];

	UBioSFHandler_PCConversation_execCalculateArrowPosition_Parms CalculateArrowPosition_Parms;

	this->ProcessEvent ( pFnCalculateArrowPosition, &CalculateArrowPosition_Parms, NULL );

	if ( stParam )
		memcpy ( stParam, &CalculateArrowPosition_Parms.stParam, 0x1C );

	if ( lstParams )
		memcpy ( lstParams, &CalculateArrowPosition_Parms.lstParams, 0xC );
};

// Function SFXGame.BioSFHandler_PCConversation.HighlightDefaultConvSegment
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCConversation::HighlightDefaultConvSegment ( )
{
	static UFunction* pFnHighlightDefaultConvSegment = NULL;

	if ( ! pFnHighlightDefaultConvSegment )
		pFnHighlightDefaultConvSegment = (UFunction*) UObject::GObjObjects()->Data[ 48523 ];

	UBioSFHandler_PCConversation_execHighlightDefaultConvSegment_Parms HighlightDefaultConvSegment_Parms;

	this->ProcessEvent ( pFnHighlightDefaultConvSegment, &HighlightDefaultConvSegment_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCConversation.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_PCConversation::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 48520 ];

	UBioSFHandler_PCConversation_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCConversation.OnPanelAdded
// [0x00820002] 
// Parameters infos:

void UBioSFHandler_PCConversation::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48516 ];

	UBioSFHandler_PCConversation_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCCredits.HandleInputEvent
// [0x00020002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void UBioSFHandler_PCCredits::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 48538 ];

	UBioSFHandler_PCCredits_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCDataCodex.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCDataCodex::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48543 ];

	UBioSFHandler_PCDataCodex_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCGameOver.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCGameOver::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48577 ];

	UBioSFHandler_PCGameOver_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCJournal.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCJournal::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48580 ];

	UBioSFHandler_PCJournal_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCLoadGame.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCLoadGame::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48583 ];

	UBioSFHandler_PCLoadGame_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCPartySelection.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void UBioSFHandler_PCPartySelection::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 48708 ];

	UBioSFHandler_PCPartySelection_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCPartySelection.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCPartySelection::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48707 ];

	UBioSFHandler_PCPartySelection_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_SaveGame.OnPanelRemoved
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_SaveGame::OnPanelRemoved ( )
{
	static UFunction* pFnOnPanelRemoved = NULL;

	if ( ! pFnOnPanelRemoved )
		pFnOnPanelRemoved = (UFunction*) UObject::GObjObjects()->Data[ 48741 ];

	UBioSFHandler_SaveGame_execOnPanelRemoved_Parms OnPanelRemoved_Parms;

	this->ProcessEvent ( pFnOnPanelRemoved, &OnPanelRemoved_Parms, NULL );
};

// Function SFXGame.BioSFHandler_SaveGame.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_SaveGame::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48740 ];

	UBioSFHandler_SaveGame_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_SaveGame.DeleteGameConfirm
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void UBioSFHandler_SaveGame::DeleteGameConfirm ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnDeleteGameConfirm = NULL;

	if ( ! pFnDeleteGameConfirm )
		pFnDeleteGameConfirm = (UFunction*) UObject::GObjObjects()->Data[ 48737 ];

	UBioSFHandler_SaveGame_execDeleteGameConfirm_Parms DeleteGameConfirm_Parms;
	DeleteGameConfirm_Parms.bAPressed = bAPressed;
	DeleteGameConfirm_Parms.nContext = nContext;

	this->ProcessEvent ( pFnDeleteGameConfirm, &DeleteGameConfirm_Parms, NULL );
};

// Function SFXGame.BioSFHandler_PCSaveGame.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSFHandler_PCSaveGame::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 48744 ];

	UBioSFHandler_PCSaveGame_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSFHandler_SelectCharacter.UpdateCharacterData
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UBioSFHandler_SelectCharacter::UpdateCharacterData ( )
{
	static UFunction* pFnUpdateCharacterData = NULL;

	if ( ! pFnUpdateCharacterData )
		pFnUpdateCharacterData = (UFunction*) UObject::GObjObjects()->Data[ 48873 ];

	UBioSFHandler_SelectCharacter_execUpdateCharacterData_Parms UpdateCharacterData_Parms;

	this->ProcessEvent ( pFnUpdateCharacterData, &UpdateCharacterData_Parms, NULL );
};

// Function SFXGame.BioSFHandler_SelectCharacter.DoCharactersExist
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool UBioSFHandler_SelectCharacter::DoCharactersExist ( )
{
	static UFunction* pFnDoCharactersExist = NULL;

	if ( ! pFnDoCharactersExist )
		pFnDoCharactersExist = (UFunction*) UObject::GObjObjects()->Data[ 48874 ];

	UBioSFHandler_SelectCharacter_execDoCharactersExist_Parms DoCharactersExist_Parms;

	this->ProcessEvent ( pFnDoCharactersExist, &DoCharactersExist_Parms, NULL );

	return DoCharactersExist_Parms.ReturnValue;
};

// Function SFXGame.BioSFHandler_SelectCharacter.HandleEvent
// [0x00420002] 
// Parameters infos:
// unsigned char                  nCommand                       ( CPF_Parm )
// TArray< struct FString >       lstArguments                   ( CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void UBioSFHandler_SelectCharacter::HandleEvent ( unsigned char nCommand, TArray< struct FString >* lstArguments )
{
	static UFunction* pFnHandleEvent = NULL;

	if ( ! pFnHandleEvent )
		pFnHandleEvent = (UFunction*) UObject::GObjObjects()->Data[ 48867 ];

	UBioSFHandler_SelectCharacter_execHandleEvent_Parms HandleEvent_Parms;
	HandleEvent_Parms.nCommand = nCommand;

	this->ProcessEvent ( pFnHandleEvent, &HandleEvent_Parms, NULL );

	if ( lstArguments )
		memcpy ( lstArguments, &HandleEvent_Parms.lstArguments, 0xC );
};

// Function SFXGame.BioSFHandler_SniperOverlay.SetDistance
// [0x00820002] 
// Parameters infos:
// int                            nDistance                      ( CPF_Parm )

void UBioSFHandler_SniperOverlay::SetDistance ( int nDistance )
{
	static UFunction* pFnSetDistance = NULL;

	if ( ! pFnSetDistance )
		pFnSetDistance = (UFunction*) UObject::GObjObjects()->Data[ 48891 ];

	UBioSFHandler_SniperOverlay_execSetDistance_Parms SetDistance_Parms;
	SetDistance_Parms.nDistance = nDistance;

	this->ProcessEvent ( pFnSetDistance, &SetDistance_Parms, NULL );
};

// Function SFXGame.BioSkillGame_Decryption_PCHandler.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void UBioSkillGame_Decryption_PCHandler::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 49077 ];

	UBioSkillGame_Decryption_PCHandler_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.BioSkillMap.IsSkillInMap
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   Skill                          ( CPF_Parm )

bool UBioSkillMap::IsSkillInMap ( struct FName Skill )
{
	static UFunction* pFnIsSkillInMap = NULL;

	if ( ! pFnIsSkillInMap )
		pFnIsSkillInMap = (UFunction*) UObject::GObjObjects()->Data[ 49168 ];

	UBioSkillMap_execIsSkillInMap_Parms IsSkillInMap_Parms;
	memcpy ( &IsSkillInMap_Parms.Skill, &Skill, 0x8 );

	this->ProcessEvent ( pFnIsSkillInMap, &IsSkillInMap_Parms, NULL );

	return IsSkillInMap_Parms.ReturnValue;
};

// Function SFXGame.BioSkillMap.GetSkill
// [0x00022002] 
// Parameters infos:
// struct FName                   ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            Num                            ( CPF_Parm )

struct FName UBioSkillMap::GetSkill ( int Num )
{
	static UFunction* pFnGetSkill = NULL;

	if ( ! pFnGetSkill )
		pFnGetSkill = (UFunction*) UObject::GObjObjects()->Data[ 49165 ];

	UBioSkillMap_execGetSkill_Parms GetSkill_Parms;
	GetSkill_Parms.Num = Num;

	this->ProcessEvent ( pFnGetSkill, &GetSkill_Parms, NULL );

	return GetSkill_Parms.ReturnValue;
};

// Function SFXGame.BioSpectator.NextMode
// [0x00020002] 
// Parameters infos:

void UBioSpectator::NextMode ( )
{
	static UFunction* pFnNextMode = NULL;

	if ( ! pFnNextMode )
		pFnNextMode = (UFunction*) UObject::GObjObjects()->Data[ 49209 ];

	UBioSpectator_execNextMode_Parms NextMode_Parms;

	this->ProcessEvent ( pFnNextMode, &NextMode_Parms, NULL );
};

// Function SFXGame.BioSpectator.PrevMode
// [0x00020002] 
// Parameters infos:

void UBioSpectator::PrevMode ( )
{
	static UFunction* pFnPrevMode = NULL;

	if ( ! pFnPrevMode )
		pFnPrevMode = (UFunction*) UObject::GObjObjects()->Data[ 49208 ];

	UBioSpectator_execPrevMode_Parms PrevMode_Parms;

	this->ProcessEvent ( pFnPrevMode, &PrevMode_Parms, NULL );
};

// Function SFXGame.BioSpectator.InitializeModes
// [0x00020002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void UBioSpectator::InitializeModes ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnInitializeModes = NULL;

	if ( ! pFnInitializeModes )
		pFnInitializeModes = (UFunction*) UObject::GObjObjects()->Data[ 49199 ];

	UBioSpectator_execInitializeModes_Parms InitializeModes_Parms;
	InitializeModes_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnInitializeModes, &InitializeModes_Parms, NULL );
};

// Function SFXGame.BioSpectatorMode.NextOption
// [0x00020002] 
// Parameters infos:

void UBioSpectatorMode::NextOption ( )
{
	static UFunction* pFnNextOption = NULL;

	if ( ! pFnNextOption )
		pFnNextOption = (UFunction*) UObject::GObjObjects()->Data[ 49234 ];

	UBioSpectatorMode_execNextOption_Parms NextOption_Parms;

	this->ProcessEvent ( pFnNextOption, &NextOption_Parms, NULL );
};

// Function SFXGame.BioSpectatorMode.PrevOption
// [0x00020002] 
// Parameters infos:

void UBioSpectatorMode::PrevOption ( )
{
	static UFunction* pFnPrevOption = NULL;

	if ( ! pFnPrevOption )
		pFnPrevOption = (UFunction*) UObject::GObjObjects()->Data[ 49233 ];

	UBioSpectatorMode_execPrevOption_Parms PrevOption_Parms;

	this->ProcessEvent ( pFnPrevOption, &PrevOption_Parms, NULL );
};

// Function SFXGame.BioSpectatorMode.GetBelowOptionText
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Level                          ( CPF_Parm )

struct FString UBioSpectatorMode::GetBelowOptionText ( int Level )
{
	static UFunction* pFnGetBelowOptionText = NULL;

	if ( ! pFnGetBelowOptionText )
		pFnGetBelowOptionText = (UFunction*) UObject::GObjObjects()->Data[ 49230 ];

	UBioSpectatorMode_execGetBelowOptionText_Parms GetBelowOptionText_Parms;
	GetBelowOptionText_Parms.Level = Level;

	this->ProcessEvent ( pFnGetBelowOptionText, &GetBelowOptionText_Parms, NULL );

	return GetBelowOptionText_Parms.ReturnValue;
};

// Function SFXGame.BioSpectatorMode.GetSelectedOptionText
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Level                          ( CPF_Parm )

struct FString UBioSpectatorMode::GetSelectedOptionText ( int Level )
{
	static UFunction* pFnGetSelectedOptionText = NULL;

	if ( ! pFnGetSelectedOptionText )
		pFnGetSelectedOptionText = (UFunction*) UObject::GObjObjects()->Data[ 49227 ];

	UBioSpectatorMode_execGetSelectedOptionText_Parms GetSelectedOptionText_Parms;
	GetSelectedOptionText_Parms.Level = Level;

	this->ProcessEvent ( pFnGetSelectedOptionText, &GetSelectedOptionText_Parms, NULL );

	return GetSelectedOptionText_Parms.ReturnValue;
};

// Function SFXGame.BioSpectatorMode.GetAboveOptionText
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            Level                          ( CPF_Parm )

struct FString UBioSpectatorMode::GetAboveOptionText ( int Level )
{
	static UFunction* pFnGetAboveOptionText = NULL;

	if ( ! pFnGetAboveOptionText )
		pFnGetAboveOptionText = (UFunction*) UObject::GObjObjects()->Data[ 49224 ];

	UBioSpectatorMode_execGetAboveOptionText_Parms GetAboveOptionText_Parms;
	GetAboveOptionText_Parms.Level = Level;

	this->ProcessEvent ( pFnGetAboveOptionText, &GetAboveOptionText_Parms, NULL );

	return GetAboveOptionText_Parms.ReturnValue;
};

// Function SFXGame.BioSpectatorMode.DeactivateOption
// [0x00020002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void UBioSpectatorMode::DeactivateOption ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnDeactivateOption = NULL;

	if ( ! pFnDeactivateOption )
		pFnDeactivateOption = (UFunction*) UObject::GObjObjects()->Data[ 49222 ];

	UBioSpectatorMode_execDeactivateOption_Parms DeactivateOption_Parms;
	DeactivateOption_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnDeactivateOption, &DeactivateOption_Parms, NULL );
};

// Function SFXGame.BioSpectatorMode.ActivateOption
// [0x00020000] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void UBioSpectatorMode::ActivateOption ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnActivateOption = NULL;

	if ( ! pFnActivateOption )
		pFnActivateOption = (UFunction*) UObject::GObjObjects()->Data[ 49220 ];

	UBioSpectatorMode_execActivateOption_Parms ActivateOption_Parms;
	ActivateOption_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnActivateOption, &ActivateOption_Parms, NULL );
};

// Function SFXGame.BioSpectatorMode.InitializeOptions
// [0x00020000] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void UBioSpectatorMode::InitializeOptions ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnInitializeOptions = NULL;

	if ( ! pFnInitializeOptions )
		pFnInitializeOptions = (UFunction*) UObject::GObjObjects()->Data[ 49218 ];

	UBioSpectatorMode_execInitializeOptions_Parms InitializeOptions_Parms;
	InitializeOptions_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnInitializeOptions, &InitializeOptions_Parms, NULL );
};

// Function SFXGame.BioSpectatorModeState.ActivateOption
// [0x00020002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void UBioSpectatorModeState::ActivateOption ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnActivateOption = NULL;

	if ( ! pFnActivateOption )
		pFnActivateOption = (UFunction*) UObject::GObjObjects()->Data[ 49274 ];

	UBioSpectatorModeState_execActivateOption_Parms ActivateOption_Parms;
	ActivateOption_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnActivateOption, &ActivateOption_Parms, NULL );
};

// Function SFXGame.BioSpectatorModeState.InitializeOptions
// [0x00020002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void UBioSpectatorModeState::InitializeOptions ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnInitializeOptions = NULL;

	if ( ! pFnInitializeOptions )
		pFnInitializeOptions = (UFunction*) UObject::GObjObjects()->Data[ 49269 ];

	UBioSpectatorModeState_execInitializeOptions_Parms InitializeOptions_Parms;
	InitializeOptions_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnInitializeOptions, &InitializeOptions_Parms, NULL );
};

// Function SFXGame.BioSpectatorModeAnim.ActivateOption
// [0x00020002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void UBioSpectatorModeAnim::ActivateOption ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnActivateOption = NULL;

	if ( ! pFnActivateOption )
		pFnActivateOption = (UFunction*) UObject::GObjObjects()->Data[ 49242 ];

	UBioSpectatorModeAnim_execActivateOption_Parms ActivateOption_Parms;
	ActivateOption_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnActivateOption, &ActivateOption_Parms, NULL );
};

// Function SFXGame.BioSpectatorModeAnim.InitializeOptions
// [0x00020002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void UBioSpectatorModeAnim::InitializeOptions ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnInitializeOptions = NULL;

	if ( ! pFnInitializeOptions )
		pFnInitializeOptions = (UFunction*) UObject::GObjObjects()->Data[ 49236 ];

	UBioSpectatorModeAnim_execInitializeOptions_Parms InitializeOptions_Parms;
	InitializeOptions_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnInitializeOptions, &InitializeOptions_Parms, NULL );
};

// Function SFXGame.BioSpectatorModeAnimSpeed.ActivateOption
// [0x00020002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void UBioSpectatorModeAnimSpeed::ActivateOption ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnActivateOption = NULL;

	if ( ! pFnActivateOption )
		pFnActivateOption = (UFunction*) UObject::GObjObjects()->Data[ 49255 ];

	UBioSpectatorModeAnimSpeed_execActivateOption_Parms ActivateOption_Parms;
	ActivateOption_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnActivateOption, &ActivateOption_Parms, NULL );
};

// Function SFXGame.BioSpectatorModeAnimSpeed.InitializeOptions
// [0x00020002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void UBioSpectatorModeAnimSpeed::InitializeOptions ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnInitializeOptions = NULL;

	if ( ! pFnInitializeOptions )
		pFnInitializeOptions = (UFunction*) UObject::GObjObjects()->Data[ 49252 ];

	UBioSpectatorModeAnimSpeed_execInitializeOptions_Parms InitializeOptions_Parms;
	InitializeOptions_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnInitializeOptions, &InitializeOptions_Parms, NULL );
};

// Function SFXGame.BioSpectatorModeLOD.ActivateOption
// [0x00020002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void UBioSpectatorModeLOD::ActivateOption ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnActivateOption = NULL;

	if ( ! pFnActivateOption )
		pFnActivateOption = (UFunction*) UObject::GObjObjects()->Data[ 49265 ];

	UBioSpectatorModeLOD_execActivateOption_Parms ActivateOption_Parms;
	ActivateOption_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnActivateOption, &ActivateOption_Parms, NULL );
};

// Function SFXGame.BioSpectatorModeLOD.InitializeOptions
// [0x00020002] 
// Parameters infos:
// class ABioWorldInfo*           WorldInfo                      ( CPF_Parm )

void UBioSpectatorModeLOD::InitializeOptions ( class ABioWorldInfo* WorldInfo )
{
	static UFunction* pFnInitializeOptions = NULL;

	if ( ! pFnInitializeOptions )
		pFnInitializeOptions = (UFunction*) UObject::GObjObjects()->Data[ 49261 ];

	UBioSpectatorModeLOD_execInitializeOptions_Parms InitializeOptions_Parms;
	InitializeOptions_Parms.WorldInfo = WorldInfo;

	this->ProcessEvent ( pFnInitializeOptions, &InitializeOptions_Parms, NULL );
};

// Function SFXGame.SFXDroppedAmmo.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ASFXDroppedAmmo::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 53369 ];

	ASFXDroppedAmmo_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function SFXGame.SFXDroppedAmmo.Reuse
// [0x00020002] 
// Parameters infos:

void ASFXDroppedAmmo::Reuse ( )
{
	static UFunction* pFnReuse = NULL;

	if ( ! pFnReuse )
		pFnReuse = (UFunction*) UObject::GObjObjects()->Data[ 53368 ];

	ASFXDroppedAmmo_execReuse_Parms Reuse_Parms;

	this->ProcessEvent ( pFnReuse, &Reuse_Parms, NULL );
};

// Function SFXGame.SFXDroppedAmmo.Recycle
// [0x00020002] 
// Parameters infos:

void ASFXDroppedAmmo::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = (UFunction*) UObject::GObjObjects()->Data[ 53367 ];

	ASFXDroppedAmmo_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function SFXGame.SFXDroppedAmmo.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXDroppedAmmo::eventTick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53365 ];

	ASFXDroppedAmmo_eventTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXDroppedAmmo.PickedUpBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ASFXDroppedAmmo::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = (UFunction*) UObject::GObjObjects()->Data[ 53363 ];

	ASFXDroppedAmmo_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function SFXGame.SFXDroppedAmmo.EncroachedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ASFXDroppedAmmo::eventEncroachedBy ( class AActor* Other )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = (UFunction*) UObject::GObjObjects()->Data[ 53361 ];

	ASFXDroppedAmmo_eventEncroachedBy_Parms EncroachedBy_Parms;
	EncroachedBy_Parms.Other = Other;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function SFXGame.SFXDroppedAmmo.Reset
// [0x00020002] 
// Parameters infos:

void ASFXDroppedAmmo::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 53360 ];

	ASFXDroppedAmmo_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function SFXGame.SFXDroppedAmmo.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ASFXDroppedAmmo::eventLanded ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 53357 ];

	ASFXDroppedAmmo_eventLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function SFXGame.SFXDroppedAmmo.SetCollisionCylinderSize
// [0x00020002] 
// Parameters infos:
// float                          CollisionRadius                ( CPF_Parm )
// float                          CollisionHeight                ( CPF_Parm )

void ASFXDroppedAmmo::SetCollisionCylinderSize ( float CollisionRadius, float CollisionHeight )
{
	static UFunction* pFnSetCollisionCylinderSize = NULL;

	if ( ! pFnSetCollisionCylinderSize )
		pFnSetCollisionCylinderSize = (UFunction*) UObject::GObjObjects()->Data[ 53353 ];

	ASFXDroppedAmmo_execSetCollisionCylinderSize_Parms SetCollisionCylinderSize_Parms;
	SetCollisionCylinderSize_Parms.CollisionRadius = CollisionRadius;
	SetCollisionCylinderSize_Parms.CollisionHeight = CollisionHeight;

	this->ProcessEvent ( pFnSetCollisionCylinderSize, &SetCollisionCylinderSize_Parms, NULL );
};

// Function SFXGame.SFXDroppedAmmo.GiveTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ASFXDroppedAmmo::GiveTo ( class APawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 53338 ];

	ASFXDroppedAmmo_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function SFXGame.SFXDroppedAmmo.GiveAmmo
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventoryManager*       InvManager                     ( CPF_Parm )
// float                          fBonusAmmo                     ( CPF_OptionalParm | CPF_Parm )

bool ASFXDroppedAmmo::GiveAmmo ( class AInventoryManager* InvManager, float fBonusAmmo )
{
	static UFunction* pFnGiveAmmo = NULL;

	if ( ! pFnGiveAmmo )
		pFnGiveAmmo = (UFunction*) UObject::GObjObjects()->Data[ 53329 ];

	ASFXDroppedAmmo_execGiveAmmo_Parms GiveAmmo_Parms;
	GiveAmmo_Parms.InvManager = InvManager;
	GiveAmmo_Parms.fBonusAmmo = fBonusAmmo;

	this->ProcessEvent ( pFnGiveAmmo, &GiveAmmo_Parms, NULL );

	return GiveAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXDroppedAmmo.ShouldDropAmmo
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )
// class APlayerController*       PC                             ( CPF_Parm )

bool ASFXDroppedAmmo::ShouldDropAmmo ( class ASFXWeapon* Weapon, class APlayerController* PC )
{
	static UFunction* pFnShouldDropAmmo = NULL;

	if ( ! pFnShouldDropAmmo )
		pFnShouldDropAmmo = (UFunction*) UObject::GObjObjects()->Data[ 53318 ];

	ASFXDroppedAmmo_execShouldDropAmmo_Parms ShouldDropAmmo_Parms;
	ShouldDropAmmo_Parms.Weapon = Weapon;
	ShouldDropAmmo_Parms.PC = PC;

	this->ProcessEvent ( pFnShouldDropAmmo, &ShouldDropAmmo_Parms, NULL );

	return ShouldDropAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXDroppedAmmo.GetUsedAmmoPct
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventoryManager*       InvManager                     ( CPF_Parm )
// unsigned long                  bCountAmmoInMagazine           ( CPF_Parm )

float ASFXDroppedAmmo::GetUsedAmmoPct ( class AInventoryManager* InvManager, unsigned long bCountAmmoInMagazine )
{
	static UFunction* pFnGetUsedAmmoPct = NULL;

	if ( ! pFnGetUsedAmmoPct )
		pFnGetUsedAmmoPct = (UFunction*) UObject::GObjObjects()->Data[ 53308 ];

	ASFXDroppedAmmo_execGetUsedAmmoPct_Parms GetUsedAmmoPct_Parms;
	GetUsedAmmoPct_Parms.InvManager = InvManager;
	GetUsedAmmoPct_Parms.bCountAmmoInMagazine = bCountAmmoInMagazine;

	this->ProcessEvent ( pFnGetUsedAmmoPct, &GetUsedAmmoPct_Parms, NULL );

	return GetUsedAmmoPct_Parms.ReturnValue;
};

// Function SFXGame.SFXDroppedAmmo.CanPickUpAmmo
// [0x00022002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventoryManager*       InvManager                     ( CPF_Parm )

bool ASFXDroppedAmmo::CanPickUpAmmo ( class AInventoryManager* InvManager )
{
	static UFunction* pFnCanPickUpAmmo = NULL;

	if ( ! pFnCanPickUpAmmo )
		pFnCanPickUpAmmo = (UFunction*) UObject::GObjObjects()->Data[ 53304 ];

	ASFXDroppedAmmo_execCanPickUpAmmo_Parms CanPickUpAmmo_Parms;
	CanPickUpAmmo_Parms.InvManager = InvManager;

	this->ProcessEvent ( pFnCanPickUpAmmo, &CanPickUpAmmo_Parms, NULL );

	return CanPickUpAmmo_Parms.ReturnValue;
};

// Function SFXGame.SFXDroppedAmmo.CalculateAmmoStarvation
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AInventoryManager*       InvManager                     ( CPF_Parm )

float ASFXDroppedAmmo::CalculateAmmoStarvation ( class AInventoryManager* InvManager )
{
	static UFunction* pFnCalculateAmmoStarvation = NULL;

	if ( ! pFnCalculateAmmoStarvation )
		pFnCalculateAmmoStarvation = (UFunction*) UObject::GObjObjects()->Data[ 53294 ];

	ASFXDroppedAmmo_execCalculateAmmoStarvation_Parms CalculateAmmoStarvation_Parms;
	CalculateAmmoStarvation_Parms.InvManager = InvManager;

	this->ProcessEvent ( pFnCalculateAmmoStarvation, &CalculateAmmoStarvation_Parms, NULL );

	return CalculateAmmoStarvation_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PassiveHeadShotBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PassiveHeadShotBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55408 ];

	USFXGameEffect_PassiveHeadShotBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PassiveHeadShotBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PassiveHeadShotBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55406 ];

	USFXGameEffect_PassiveHeadShotBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_NonCoverDamageResistBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_NonCoverDamageResistBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55498 ];

	USFXGameEffect_NonCoverDamageResistBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_NonCoverDamageResistBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_NonCoverDamageResistBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55496 ];

	USFXGameEffect_NonCoverDamageResistBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_DamageImmunity.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_DamageImmunity::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55153 ];

	USFXGameEffect_DamageImmunity_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_DamageImmunity.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_DamageImmunity::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55152 ];

	USFXGameEffect_DamageImmunity_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.BioTriggerVolume.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )

void ABioTriggerVolume::eventUnTouch ( class AActor* Other )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = (UFunction*) UObject::GObjObjects()->Data[ 50458 ];

	ABioTriggerVolume_eventUnTouch_Parms UnTouch_Parms;
	UnTouch_Parms.Other = Other;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function SFXGame.BioTriggerVolume.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// class UPrimitiveComponent*     OtherComp                      ( CPF_Parm | CPF_EditInline )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ABioTriggerVolume::eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = (UFunction*) UObject::GObjObjects()->Data[ 50453 ];

	ABioTriggerVolume_eventTouch_Parms Touch_Parms;
	Touch_Parms.Other = Other;
	Touch_Parms.OtherComp = OtherComp;
	memcpy ( &Touch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Touch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function SFXGame.BioVehicleBehaviorSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioVehicleBehaviorSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 50786 ];

	UBioVehicleBehaviorSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.BioVehicleBehaviorSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void UBioVehicleBehaviorSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 50784 ];

	UBioVehicleBehaviorSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_ResearchCostMultiplier.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_ResearchCostMultiplier::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55659 ];

	USFXGameEffect_ResearchCostMultiplier_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_ResearchCostMultiplier.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_ResearchCostMultiplier::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55657 ];

	USFXGameEffect_ResearchCostMultiplier_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.BioWorldInfoTick.Tick
// [0x00020002] 
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void ABioWorldInfoTick::Tick ( float fDeltaT )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 51372 ];

	ABioWorldInfoTick_execTick_Parms Tick_Parms;
	Tick_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.BioWp_ChangeRoute.OnCreatureReachedWayPoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   PathFindingCreature            ( CPF_Parm )

bool ABioWp_ChangeRoute::OnCreatureReachedWayPoint ( class APawn* PathFindingCreature )
{
	static UFunction* pFnOnCreatureReachedWayPoint = NULL;

	if ( ! pFnOnCreatureReachedWayPoint )
		pFnOnCreatureReachedWayPoint = (UFunction*) UObject::GObjObjects()->Data[ 51444 ];

	ABioWp_ChangeRoute_execOnCreatureReachedWayPoint_Parms OnCreatureReachedWayPoint_Parms;
	OnCreatureReachedWayPoint_Parms.PathFindingCreature = PathFindingCreature;

	this->ProcessEvent ( pFnOnCreatureReachedWayPoint, &OnCreatureReachedWayPoint_Parms, NULL );

	return OnCreatureReachedWayPoint_Parms.ReturnValue;
};

// Function SFXGame.BioWp_Delay.OnCreatureReachedWayPoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   PathFindingCreature            ( CPF_Parm )

bool ABioWp_Delay::OnCreatureReachedWayPoint ( class APawn* PathFindingCreature )
{
	static UFunction* pFnOnCreatureReachedWayPoint = NULL;

	if ( ! pFnOnCreatureReachedWayPoint )
		pFnOnCreatureReachedWayPoint = (UFunction*) UObject::GObjObjects()->Data[ 51458 ];

	ABioWp_Delay_execOnCreatureReachedWayPoint_Parms OnCreatureReachedWayPoint_Parms;
	OnCreatureReachedWayPoint_Parms.PathFindingCreature = PathFindingCreature;

	this->ProcessEvent ( pFnOnCreatureReachedWayPoint, &OnCreatureReachedWayPoint_Parms, NULL );

	return OnCreatureReachedWayPoint_Parms.ReturnValue;
};

// Function SFXGame.BioWp_Kismet.OnCreatureReachedWayPoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   PathFindingCreature            ( CPF_Parm )

bool ABioWp_Kismet::OnCreatureReachedWayPoint ( class APawn* PathFindingCreature )
{
	static UFunction* pFnOnCreatureReachedWayPoint = NULL;

	if ( ! pFnOnCreatureReachedWayPoint )
		pFnOnCreatureReachedWayPoint = (UFunction*) UObject::GObjObjects()->Data[ 51502 ];

	ABioWp_Kismet_execOnCreatureReachedWayPoint_Parms OnCreatureReachedWayPoint_Parms;
	OnCreatureReachedWayPoint_Parms.PathFindingCreature = PathFindingCreature;

	this->ProcessEvent ( pFnOnCreatureReachedWayPoint, &OnCreatureReachedWayPoint_Parms, NULL );

	return OnCreatureReachedWayPoint_Parms.ReturnValue;
};

// Function SFXGame.BioWp_PlayAnim.OnCreatureReachedWayPoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   PathFindingCreature            ( CPF_Parm )

bool ABioWp_PlayAnim::OnCreatureReachedWayPoint ( class APawn* PathFindingCreature )
{
	static UFunction* pFnOnCreatureReachedWayPoint = NULL;

	if ( ! pFnOnCreatureReachedWayPoint )
		pFnOnCreatureReachedWayPoint = (UFunction*) UObject::GObjObjects()->Data[ 51514 ];

	ABioWp_PlayAnim_execOnCreatureReachedWayPoint_Parms OnCreatureReachedWayPoint_Parms;
	OnCreatureReachedWayPoint_Parms.PathFindingCreature = PathFindingCreature;

	this->ProcessEvent ( pFnOnCreatureReachedWayPoint, &OnCreatureReachedWayPoint_Parms, NULL );

	return OnCreatureReachedWayPoint_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_Frozen.CheckEndRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Frozen::CheckEndRecovery ( )
{
	static UFunction* pFnCheckEndRecovery = NULL;

	if ( ! pFnCheckEndRecovery )
		pFnCheckEndRecovery = (UFunction*) UObject::GObjObjects()->Data[ 54197 ];

	USFXCustomAction_Frozen_execCheckEndRecovery_Parms CheckEndRecovery_Parms;

	this->ProcessEvent ( pFnCheckEndRecovery, &CheckEndRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Frozen.CheckBeginRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Frozen::CheckBeginRecovery ( )
{
	static UFunction* pFnCheckBeginRecovery = NULL;

	if ( ! pFnCheckBeginRecovery )
		pFnCheckBeginRecovery = (UFunction*) UObject::GObjObjects()->Data[ 54196 ];

	USFXCustomAction_Frozen_execCheckBeginRecovery_Parms CheckBeginRecovery_Parms;

	this->ProcessEvent ( pFnCheckBeginRecovery, &CheckBeginRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Frozen.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Frozen::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54195 ];

	USFXCustomAction_Frozen_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Frozen.StartRagdollPhase
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Frozen::StartRagdollPhase ( )
{
	static UFunction* pFnStartRagdollPhase = NULL;

	if ( ! pFnStartRagdollPhase )
		pFnStartRagdollPhase = (UFunction*) UObject::GObjObjects()->Data[ 54194 ];

	USFXCustomAction_Frozen_execStartRagdollPhase_Parms StartRagdollPhase_Parms;

	this->ProcessEvent ( pFnStartRagdollPhase, &StartRagdollPhase_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Frozen.UnWeldPhysicsAssetInstance
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Frozen::UnWeldPhysicsAssetInstance ( )
{
	static UFunction* pFnUnWeldPhysicsAssetInstance = NULL;

	if ( ! pFnUnWeldPhysicsAssetInstance )
		pFnUnWeldPhysicsAssetInstance = (UFunction*) UObject::GObjObjects()->Data[ 54192 ];

	USFXCustomAction_Frozen_execUnWeldPhysicsAssetInstance_Parms UnWeldPhysicsAssetInstance_Parms;

	this->ProcessEvent ( pFnUnWeldPhysicsAssetInstance, &UnWeldPhysicsAssetInstance_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Frozen.StartCustomAction
// [0x00020000] 
// Parameters infos:

void USFXCustomAction_Frozen::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54191 ];

	USFXCustomAction_Frozen_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Frozen.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class AController*             Inst                           ( CPF_Parm )

void USFXCustomAction_Frozen::Init ( struct FVector HitLocation, struct FVector HitNormal, struct FTraceHitInfo HitInfo, unsigned long bPlayImpact, class AController* Inst )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 54185 ];

	USFXCustomAction_Frozen_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &Init_Parms.HitInfo, &HitInfo, 0x1C );
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.Inst = Inst;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Ragdoll.CheckEndRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Ragdoll::CheckEndRecovery ( )
{
	static UFunction* pFnCheckEndRecovery = NULL;

	if ( ! pFnCheckEndRecovery )
		pFnCheckEndRecovery = (UFunction*) UObject::GObjObjects()->Data[ 54393 ];

	USFXCustomAction_Ragdoll_execCheckEndRecovery_Parms CheckEndRecovery_Parms;

	this->ProcessEvent ( pFnCheckEndRecovery, &CheckEndRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Ragdoll.CheckBeginRecovery
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Ragdoll::CheckBeginRecovery ( )
{
	static UFunction* pFnCheckBeginRecovery = NULL;

	if ( ! pFnCheckBeginRecovery )
		pFnCheckBeginRecovery = (UFunction*) UObject::GObjObjects()->Data[ 54392 ];

	USFXCustomAction_Ragdoll_execCheckBeginRecovery_Parms CheckBeginRecovery_Parms;

	this->ProcessEvent ( pFnCheckBeginRecovery, &CheckBeginRecovery_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Ragdoll.RegisterRagdollVocCallback
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Ragdoll::RegisterRagdollVocCallback ( )
{
	static UFunction* pFnRegisterRagdollVocCallback = NULL;

	if ( ! pFnRegisterRagdollVocCallback )
		pFnRegisterRagdollVocCallback = (UFunction*) UObject::GObjObjects()->Data[ 54391 ];

	USFXCustomAction_Ragdoll_execRegisterRagdollVocCallback_Parms RegisterRagdollVocCallback_Parms;

	this->ProcessEvent ( pFnRegisterRagdollVocCallback, &RegisterRagdollVocCallback_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Ragdoll.OnRagdollPhysicsImpact
// [0x00020002] 
// Parameters infos:
// class APawn*                   Pawn                           ( CPF_Parm )
// class AActor*                  oImpactActor                   ( CPF_Parm )
// struct FVector                 vImpactDir                     ( CPF_Parm )

void USFXCustomAction_Ragdoll::OnRagdollPhysicsImpact ( class APawn* Pawn, class AActor* oImpactActor, struct FVector vImpactDir )
{
	static UFunction* pFnOnRagdollPhysicsImpact = NULL;

	if ( ! pFnOnRagdollPhysicsImpact )
		pFnOnRagdollPhysicsImpact = (UFunction*) UObject::GObjObjects()->Data[ 54387 ];

	USFXCustomAction_Ragdoll_execOnRagdollPhysicsImpact_Parms OnRagdollPhysicsImpact_Parms;
	OnRagdollPhysicsImpact_Parms.Pawn = Pawn;
	OnRagdollPhysicsImpact_Parms.oImpactActor = oImpactActor;
	memcpy ( &OnRagdollPhysicsImpact_Parms.vImpactDir, &vImpactDir, 0xC );

	this->ProcessEvent ( pFnOnRagdollPhysicsImpact, &OnRagdollPhysicsImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Ragdoll.RestartScream
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Ragdoll::RestartScream ( )
{
	static UFunction* pFnRestartScream = NULL;

	if ( ! pFnRestartScream )
		pFnRestartScream = (UFunction*) UObject::GObjObjects()->Data[ 54386 ];

	USFXCustomAction_Ragdoll_execRestartScream_Parms RestartScream_Parms;

	this->ProcessEvent ( pFnRestartScream, &RestartScream_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Ragdoll.PlayScream
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Ragdoll::PlayScream ( )
{
	static UFunction* pFnPlayScream = NULL;

	if ( ! pFnPlayScream )
		pFnPlayScream = (UFunction*) UObject::GObjObjects()->Data[ 54385 ];

	USFXCustomAction_Ragdoll_execPlayScream_Parms PlayScream_Parms;

	this->ProcessEvent ( pFnPlayScream, &PlayScream_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Ragdoll.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Ragdoll::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54384 ];

	USFXCustomAction_Ragdoll_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Ragdoll.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Ragdoll::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54383 ];

	USFXCustomAction_Ragdoll_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Ragdoll.Init
// [0x00020002] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm )
// unsigned long                  bPlayImpact                    ( CPF_Parm )
// class AController*             Inst                           ( CPF_Parm )

void USFXCustomAction_Ragdoll::Init ( struct FVector HitLocation, struct FVector HitNormal, struct FTraceHitInfo HitInfo, unsigned long bPlayImpact, class AController* Inst )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = (UFunction*) UObject::GObjObjects()->Data[ 54377 ];

	USFXCustomAction_Ragdoll_execInit_Parms Init_Parms;
	memcpy ( &Init_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Init_Parms.HitNormal, &HitNormal, 0xC );
	memcpy ( &Init_Parms.HitInfo, &HitInfo, 0x1C );
	Init_Parms.bPlayImpact = bPlayImpact;
	Init_Parms.Inst = Inst;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function SFXGame.SFXNav_WayPoint.OnPawnReachedWayPoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oPawn                          ( CPF_Parm )

bool ASFXNav_WayPoint::OnPawnReachedWayPoint ( class APawn* oPawn )
{
	static UFunction* pFnOnPawnReachedWayPoint = NULL;

	if ( ! pFnOnPawnReachedWayPoint )
		pFnOnPawnReachedWayPoint = (UFunction*) UObject::GObjObjects()->Data[ 57724 ];

	ASFXNav_WayPoint_execOnPawnReachedWayPoint_Parms OnPawnReachedWayPoint_Parms;
	OnPawnReachedWayPoint_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnOnPawnReachedWayPoint, &OnPawnReachedWayPoint_Parms, NULL );

	return OnPawnReachedWayPoint_Parms.ReturnValue;
};

// Function SFXGame.SFXAI_CombatScripted.SwitchWeapon
// [0x00020002] 
// Parameters infos:
// class ASFXWeapon*              oWpn                           ( CPF_Parm )

void ASFXAI_CombatScripted::SwitchWeapon ( class ASFXWeapon* oWpn )
{
	static UFunction* pFnSwitchWeapon = NULL;

	if ( ! pFnSwitchWeapon )
		pFnSwitchWeapon = (UFunction*) UObject::GObjObjects()->Data[ 52730 ];

	ASFXAI_CombatScripted_execSwitchWeapon_Parms SwitchWeapon_Parms;
	SwitchWeapon_Parms.oWpn = oWpn;

	this->ProcessEvent ( pFnSwitchWeapon, &SwitchWeapon_Parms, NULL );
};

// Function SFXGame.SFXAI_CombatScripted.MoveToGoalExternal
// [0x00020002] 
// Parameters infos:
// class AActor*                  NewMoveGoal                    ( CPF_Parm )
// float                          NewMoveOffset                  ( CPF_OptionalParm | CPF_Parm )
// struct FScriptDelegate         MoveDelegate                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ASFXAI_CombatScripted::MoveToGoalExternal ( class AActor* NewMoveGoal, float NewMoveOffset, struct FScriptDelegate MoveDelegate )
{
	static UFunction* pFnMoveToGoalExternal = NULL;

	if ( ! pFnMoveToGoalExternal )
		pFnMoveToGoalExternal = (UFunction*) UObject::GObjObjects()->Data[ 52726 ];

	ASFXAI_CombatScripted_execMoveToGoalExternal_Parms MoveToGoalExternal_Parms;
	MoveToGoalExternal_Parms.NewMoveGoal = NewMoveGoal;
	MoveToGoalExternal_Parms.NewMoveOffset = NewMoveOffset;
	memcpy ( &MoveToGoalExternal_Parms.MoveDelegate, &MoveDelegate, 0xC );

	this->ProcessEvent ( pFnMoveToGoalExternal, &MoveToGoalExternal_Parms, NULL );
};

// Function SFXGame.SFXAI_CombatScripted.FireWeaponAtTarget
// [0x00020002] 
// Parameters infos:
// class AActor*                  oTarget                        ( CPF_Parm )
// unsigned long                  bCheckLOS                      ( CPF_Parm )
// struct FScriptDelegate         FireDelegate                   ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )

void ASFXAI_CombatScripted::FireWeaponAtTarget ( class AActor* oTarget, unsigned long bCheckLOS, struct FScriptDelegate FireDelegate )
{
	static UFunction* pFnFireWeaponAtTarget = NULL;

	if ( ! pFnFireWeaponAtTarget )
		pFnFireWeaponAtTarget = (UFunction*) UObject::GObjObjects()->Data[ 52722 ];

	ASFXAI_CombatScripted_execFireWeaponAtTarget_Parms FireWeaponAtTarget_Parms;
	FireWeaponAtTarget_Parms.oTarget = oTarget;
	FireWeaponAtTarget_Parms.bCheckLOS = bCheckLOS;
	memcpy ( &FireWeaponAtTarget_Parms.FireDelegate, &FireDelegate, 0xC );

	this->ProcessEvent ( pFnFireWeaponAtTarget, &FireWeaponAtTarget_Parms, NULL );
};

// Function SFXGame.SFXAI_CombatScripted.UsePowerOnTarget
// [0x00020002] 
// Parameters infos:
// struct FName                   nmPowerToUse                   ( CPF_Parm )
// class AActor*                  oTarget                        ( CPF_Parm )
// struct FScriptDelegate         PowerDelegate                  ( CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bIgnoreSuppression             ( CPF_OptionalParm | CPF_Parm )

void ASFXAI_CombatScripted::UsePowerOnTarget ( struct FName nmPowerToUse, class AActor* oTarget, struct FScriptDelegate PowerDelegate, unsigned long bIgnoreSuppression )
{
	static UFunction* pFnUsePowerOnTarget = NULL;

	if ( ! pFnUsePowerOnTarget )
		pFnUsePowerOnTarget = (UFunction*) UObject::GObjObjects()->Data[ 52717 ];

	ASFXAI_CombatScripted_execUsePowerOnTarget_Parms UsePowerOnTarget_Parms;
	memcpy ( &UsePowerOnTarget_Parms.nmPowerToUse, &nmPowerToUse, 0x8 );
	UsePowerOnTarget_Parms.oTarget = oTarget;
	memcpy ( &UsePowerOnTarget_Parms.PowerDelegate, &PowerDelegate, 0xC );
	UsePowerOnTarget_Parms.bIgnoreSuppression = bIgnoreSuppression;

	this->ProcessEvent ( pFnUsePowerOnTarget, &UsePowerOnTarget_Parms, NULL );
};

// Function SFXGame.SFXAI_Critter.Initialize
// [0x00020002] 
// Parameters infos:

void ASFXAI_Critter::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 52742 ];

	ASFXAI_Critter_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveWeaponDamageBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveWeaponDamageBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55361 ];

	USFXGameEffect_PassiveWeaponDamageBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveWeaponDamageBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveWeaponDamageBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55357 ];

	USFXGameEffect_PassiveWeaponDamageBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveWeaponDamageBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PassiveWeaponDamageBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55352 ];

	USFXGameEffect_PassiveWeaponDamageBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PassiveWeaponDamageBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PassiveWeaponDamageBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55350 ];

	USFXGameEffect_PassiveWeaponDamageBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_DamageMultiplier.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_DamageMultiplier::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55164 ];

	USFXGameEffect_DamageMultiplier_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_DamageMultiplier.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_DamageMultiplier::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55162 ];

	USFXGameEffect_DamageMultiplier_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_DamageMultiplier.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_DamageMultiplier::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55160 ];

	USFXGameEffect_DamageMultiplier_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_DamageMultiplier.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_DamageMultiplier::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55155 ];

	USFXGameEffect_DamageMultiplier_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_DeathKnockback.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_DeathKnockback::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 54161 ];

	USFXCustomAction_DeathKnockback_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXAI_Humanoid.NotifyUnderAttack
// [0x00020002] 
// Parameters infos:
// unsigned long                  bHit                           ( CPF_Parm )

void ASFXAI_Humanoid::NotifyUnderAttack ( unsigned long bHit )
{
	static UFunction* pFnNotifyUnderAttack = NULL;

	if ( ! pFnNotifyUnderAttack )
		pFnNotifyUnderAttack = (UFunction*) UObject::GObjObjects()->Data[ 53156 ];

	ASFXAI_Humanoid_execNotifyUnderAttack_Parms NotifyUnderAttack_Parms;
	NotifyUnderAttack_Parms.bHit = bHit;

	this->ProcessEvent ( pFnNotifyUnderAttack, &NotifyUnderAttack_Parms, NULL );
};

// Function SFXGame.SFXAI_Humanoid.SetDefaultBehaviour
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FName                   NewBehaviour                   ( CPF_Parm )

bool ASFXAI_Humanoid::SetDefaultBehaviour ( struct FName NewBehaviour )
{
	static UFunction* pFnSetDefaultBehaviour = NULL;

	if ( ! pFnSetDefaultBehaviour )
		pFnSetDefaultBehaviour = (UFunction*) UObject::GObjObjects()->Data[ 53152 ];

	ASFXAI_Humanoid_execSetDefaultBehaviour_Parms SetDefaultBehaviour_Parms;
	memcpy ( &SetDefaultBehaviour_Parms.NewBehaviour, &NewBehaviour, 0x8 );

	this->ProcessEvent ( pFnSetDefaultBehaviour, &SetDefaultBehaviour_Parms, NULL );

	return SetDefaultBehaviour_Parms.ReturnValue;
};

// Function SFXGame.SFXCustomAction_Freezing.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Freezing::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54182 ];

	USFXCustomAction_Freezing_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Headshot.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Headshot::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54206 ];

	USFXCustomAction_Headshot_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_NeuralShock.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_NeuralShock::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 54325 ];

	USFXCustomAction_NeuralShock_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PunchDeathKnockback.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PunchDeathKnockback::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 54368 ];

	USFXCustomAction_PunchDeathKnockback_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_ExplosiveKnockback.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_ExplosiveKnockback::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 54175 ];

	USFXCustomAction_ExplosiveKnockback_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXAI_TechDrone.ClearForcedTarget
// [0x00020002] 
// Parameters infos:

void ASFXAI_TechDrone::ClearForcedTarget ( )
{
	static UFunction* pFnClearForcedTarget = NULL;

	if ( ! pFnClearForcedTarget )
		pFnClearForcedTarget = (UFunction*) UObject::GObjObjects()->Data[ 53221 ];

	ASFXAI_TechDrone_execClearForcedTarget_Parms ClearForcedTarget_Parms;

	this->ProcessEvent ( pFnClearForcedTarget, &ClearForcedTarget_Parms, NULL );
};

// Function SFXGame.SFXAI_TechDrone.Initialize
// [0x00020002] 
// Parameters infos:

void ASFXAI_TechDrone::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 53220 ];

	ASFXAI_TechDrone_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.SFXAI_TechDrone_NPC.SetMovementSpeed
// [0x00020002] 
// Parameters infos:

void ASFXAI_TechDrone_NPC::SetMovementSpeed ( )
{
	static UFunction* pFnSetMovementSpeed = NULL;

	if ( ! pFnSetMovementSpeed )
		pFnSetMovementSpeed = (UFunction*) UObject::GObjObjects()->Data[ 53242 ];

	ASFXAI_TechDrone_NPC_execSetMovementSpeed_Parms SetMovementSpeed_Parms;

	this->ProcessEvent ( pFnSetMovementSpeed, &SetMovementSpeed_Parms, NULL );
};

// Function SFXGame.SFXAI_Vanguard.SetMovementSpeed
// [0x00020002] 
// Parameters infos:

void ASFXAI_Vanguard::SetMovementSpeed ( )
{
	static UFunction* pFnSetMovementSpeed = NULL;

	if ( ! pFnSetMovementSpeed )
		pFnSetMovementSpeed = (UFunction*) UObject::GObjObjects()->Data[ 53278 ];

	ASFXAI_Vanguard_execSetMovementSpeed_Parms SetMovementSpeed_Parms;

	this->ProcessEvent ( pFnSetMovementSpeed, &SetMovementSpeed_Parms, NULL );
};

// Function SFXGame.SFXAI_Vanguard.AdvanceOnEnemy
// [0x00020002] 
// Parameters infos:

void ASFXAI_Vanguard::AdvanceOnEnemy ( )
{
	static UFunction* pFnAdvanceOnEnemy = NULL;

	if ( ! pFnAdvanceOnEnemy )
		pFnAdvanceOnEnemy = (UFunction*) UObject::GObjObjects()->Data[ 53269 ];

	ASFXAI_Vanguard_execAdvanceOnEnemy_Parms AdvanceOnEnemy_Parms;

	this->ProcessEvent ( pFnAdvanceOnEnemy, &AdvanceOnEnemy_Parms, NULL );
};

// Function SFXGame.SFXAI_Vanguard.AdvanceTimer
// [0x00020002] 
// Parameters infos:

void ASFXAI_Vanguard::AdvanceTimer ( )
{
	static UFunction* pFnAdvanceTimer = NULL;

	if ( ! pFnAdvanceTimer )
		pFnAdvanceTimer = (UFunction*) UObject::GObjObjects()->Data[ 53268 ];

	ASFXAI_Vanguard_execAdvanceTimer_Parms AdvanceTimer_Parms;

	this->ProcessEvent ( pFnAdvanceTimer, &AdvanceTimer_Parms, NULL );
};

// Function SFXGame.SFXAI_Vanguard.NotifyUnderAttack
// [0x00020002] 
// Parameters infos:
// unsigned long                  bHit                           ( CPF_Parm )

void ASFXAI_Vanguard::NotifyUnderAttack ( unsigned long bHit )
{
	static UFunction* pFnNotifyUnderAttack = NULL;

	if ( ! pFnNotifyUnderAttack )
		pFnNotifyUnderAttack = (UFunction*) UObject::GObjObjects()->Data[ 53266 ];

	ASFXAI_Vanguard_execNotifyUnderAttack_Parms NotifyUnderAttack_Parms;
	NotifyUnderAttack_Parms.bHit = bHit;

	this->ProcessEvent ( pFnNotifyUnderAttack, &NotifyUnderAttack_Parms, NULL );
};

// Function SFXGame.SFXAmmoContainer.GiveTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ASFXAmmoContainer::GiveTo ( class APawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 53387 ];

	ASFXAmmoContainer_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function SFXGame.SFXAmmoContainer.StartSleeping
// [0x00020002] 
// Parameters infos:

void ASFXAmmoContainer::StartSleeping ( )
{
	static UFunction* pFnStartSleeping = NULL;

	if ( ! pFnStartSleeping )
		pFnStartSleeping = (UFunction*) UObject::GObjObjects()->Data[ 53386 ];

	ASFXAmmoContainer_execStartSleeping_Parms StartSleeping_Parms;

	this->ProcessEvent ( pFnStartSleeping, &StartSleeping_Parms, NULL );
};

// Function SFXGame.SFXAmmoContainer.SetRespawn
// [0x00020002] 
// Parameters infos:

void ASFXAmmoContainer::SetRespawn ( )
{
	static UFunction* pFnSetRespawn = NULL;

	if ( ! pFnSetRespawn )
		pFnSetRespawn = (UFunction*) UObject::GObjObjects()->Data[ 53385 ];

	ASFXAmmoContainer_execSetRespawn_Parms SetRespawn_Parms;

	this->ProcessEvent ( pFnSetRespawn, &SetRespawn_Parms, NULL );
};

// Function SFXGame.SFXAmmoContainer.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASFXAmmoContainer::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = (UFunction*) UObject::GObjObjects()->Data[ 53384 ];

	ASFXAmmoContainer_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_ArmorBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_ArmorBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55025 ];

	USFXGameEffect_ArmorBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_ArmorBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_ArmorBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55022 ];

	USFXGameEffect_ArmorBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_ArmorBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_ArmorBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55017 ];

	USFXGameEffect_ArmorBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_ArmorBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_ArmorBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55015 ];

	USFXGameEffect_ArmorBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXCameraMode_Interpolate.GetCurrentShake
// [0x00820002] 
// Parameters infos:
// struct FRotator                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FRotator USFXCameraMode_Interpolate::GetCurrentShake ( )
{
	static UFunction* pFnGetCurrentShake = NULL;

	if ( ! pFnGetCurrentShake )
		pFnGetCurrentShake = (UFunction*) UObject::GObjObjects()->Data[ 53510 ];

	USFXCameraMode_Interpolate_execGetCurrentShake_Parms GetCurrentShake_Parms;

	this->ProcessEvent ( pFnGetCurrentShake, &GetCurrentShake_Parms, NULL );

	return GetCurrentShake_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode_Interpolate.Tick
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXCameraMode_Interpolate::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53507 ];

	USFXCameraMode_Interpolate_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_Interpolate.Trace
// [0x00C20002] 
// Parameters infos:
// class AActor*                  HitActor                       ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )

void USFXCameraMode_Interpolate::Trace ( class AActor** HitActor, struct FVector* HitLocation )
{
	static UFunction* pFnTrace = NULL;

	if ( ! pFnTrace )
		pFnTrace = (UFunction*) UObject::GObjObjects()->Data[ 53497 ];

	USFXCameraMode_Interpolate_execTrace_Parms Trace_Parms;

	this->ProcessEvent ( pFnTrace, &Trace_Parms, NULL );

	if ( HitActor )
		*HitActor = Trace_Parms.HitActor;

	if ( HitLocation )
		memcpy ( HitLocation, &Trace_Parms.HitLocation, 0xC );
};

// Function SFXGame.SFXCameraMode_Interpolate.InitializeTransition
// [0x00820002] 
// Parameters infos:
// class USFXCameraMode*          FromMode                       ( CPF_Parm )
// class USFXCameraMode*          ToMode                         ( CPF_Parm )
// float                          Time                           ( CPF_Parm )
// unsigned long                  PreserveTarget                 ( CPF_Parm )

void USFXCameraMode_Interpolate::InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget )
{
	static UFunction* pFnInitializeTransition = NULL;

	if ( ! pFnInitializeTransition )
		pFnInitializeTransition = (UFunction*) UObject::GObjObjects()->Data[ 53490 ];

	USFXCameraMode_Interpolate_execInitializeTransition_Parms InitializeTransition_Parms;
	InitializeTransition_Parms.FromMode = FromMode;
	InitializeTransition_Parms.ToMode = ToMode;
	InitializeTransition_Parms.Time = Time;
	InitializeTransition_Parms.PreserveTarget = PreserveTarget;

	this->ProcessEvent ( pFnInitializeTransition, &InitializeTransition_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_Interpolate.CheckLoop
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXCameraMode*          Mode                           ( CPF_Parm )
// int                            RecurseLevel                   ( CPF_Parm )

bool USFXCameraMode_Interpolate::CheckLoop ( class USFXCameraMode* Mode, int RecurseLevel )
{
	static UFunction* pFnCheckLoop = NULL;

	if ( ! pFnCheckLoop )
		pFnCheckLoop = (UFunction*) UObject::GObjObjects()->Data[ 53486 ];

	USFXCameraMode_Interpolate_execCheckLoop_Parms CheckLoop_Parms;
	CheckLoop_Parms.Mode = Mode;
	CheckLoop_Parms.RecurseLevel = RecurseLevel;

	this->ProcessEvent ( pFnCheckLoop, &CheckLoop_Parms, NULL );

	return CheckLoop_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode_Interpolate.Interpolate
// [0x00020002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          T                              ( CPF_Parm )

float USFXCameraMode_Interpolate::Interpolate ( float T )
{
	static UFunction* pFnInterpolate = NULL;

	if ( ! pFnInterpolate )
		pFnInterpolate = (UFunction*) UObject::GObjObjects()->Data[ 53482 ];

	USFXCameraMode_Interpolate_execInterpolate_Parms Interpolate_Parms;
	Interpolate_Parms.T = T;

	this->ProcessEvent ( pFnInterpolate, &Interpolate_Parms, NULL );

	return Interpolate_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraAction_QuickTurn.Tick
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXCameraAction_QuickTurn::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53523 ];

	USFXCameraAction_QuickTurn_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXCameraAction_QuickTurn.InitializeTransition
// [0x00020002] 
// Parameters infos:
// class USFXCameraMode*          FromMode                       ( CPF_Parm )
// class USFXCameraMode*          ToMode                         ( CPF_Parm )
// float                          Time                           ( CPF_Parm )
// unsigned long                  PreserveTarget                 ( CPF_Parm )

void USFXCameraAction_QuickTurn::InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget )
{
	static UFunction* pFnInitializeTransition = NULL;

	if ( ! pFnInitializeTransition )
		pFnInitializeTransition = (UFunction*) UObject::GObjObjects()->Data[ 53518 ];

	USFXCameraAction_QuickTurn_execInitializeTransition_Parms InitializeTransition_Parms;
	InitializeTransition_Parms.FromMode = FromMode;
	InitializeTransition_Parms.ToMode = ToMode;
	InitializeTransition_Parms.Time = Time;
	InitializeTransition_Parms.PreserveTarget = PreserveTarget;

	this->ProcessEvent ( pFnInitializeTransition, &InitializeTransition_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_CombatStorm.MakeInactive
// [0x00020002] 
// Parameters infos:

void USFXCameraMode_CombatStorm::MakeInactive ( )
{
	static UFunction* pFnMakeInactive = NULL;

	if ( ! pFnMakeInactive )
		pFnMakeInactive = (UFunction*) UObject::GObjObjects()->Data[ 53533 ];

	USFXCameraMode_CombatStorm_execMakeInactive_Parms MakeInactive_Parms;

	this->ProcessEvent ( pFnMakeInactive, &MakeInactive_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_CombatStorm.MakeActive
// [0x00020002] 
// Parameters infos:

void USFXCameraMode_CombatStorm::MakeActive ( )
{
	static UFunction* pFnMakeActive = NULL;

	if ( ! pFnMakeActive )
		pFnMakeActive = (UFunction*) UObject::GObjObjects()->Data[ 53532 ];

	USFXCameraMode_CombatStorm_execMakeActive_Parms MakeActive_Parms;

	this->ProcessEvent ( pFnMakeActive, &MakeActive_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_Cover.Tick
// [0x00020002] 
// Parameters infos:
// float                          fTimeDelta                     ( CPF_Parm )

void USFXCameraMode_Cover::Tick ( float fTimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53538 ];

	USFXCameraMode_Cover_execTick_Parms Tick_Parms;
	Tick_Parms.fTimeDelta = fTimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_CoverFixed.GetCameraLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USFXCameraMode_CoverFixed::GetCameraLocation ( )
{
	static UFunction* pFnGetCameraLocation = NULL;

	if ( ! pFnGetCameraLocation )
		pFnGetCameraLocation = (UFunction*) UObject::GObjObjects()->Data[ 53548 ];

	USFXCameraMode_CoverFixed_execGetCameraLocation_Parms GetCameraLocation_Parms;

	this->ProcessEvent ( pFnGetCameraLocation, &GetCameraLocation_Parms, NULL );

	return GetCameraLocation_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode_CoverFixed.GetCollisionCameraHook
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USFXCameraMode_CoverFixed::GetCollisionCameraHook ( )
{
	static UFunction* pFnGetCollisionCameraHook = NULL;

	if ( ! pFnGetCollisionCameraHook )
		pFnGetCollisionCameraHook = (UFunction*) UObject::GObjObjects()->Data[ 53546 ];

	USFXCameraMode_CoverFixed_execGetCollisionCameraHook_Parms GetCollisionCameraHook_Parms;

	this->ProcessEvent ( pFnGetCollisionCameraHook, &GetCollisionCameraHook_Parms, NULL );

	return GetCollisionCameraHook_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode_CoverFixed.Hack_IsViable
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXCameraMode_CoverFixed::Hack_IsViable ( )
{
	static UFunction* pFnHack_IsViable = NULL;

	if ( ! pFnHack_IsViable )
		pFnHack_IsViable = (UFunction*) UObject::GObjObjects()->Data[ 53543 ];

	USFXCameraMode_CoverFixed_execHack_IsViable_Parms Hack_IsViable_Parms;

	this->ProcessEvent ( pFnHack_IsViable, &Hack_IsViable_Parms, NULL );

	return Hack_IsViable_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode_SniperZoom.Tick
// [0x00820002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXCameraMode_SniperZoom::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53567 ];

	USFXCameraMode_SniperZoom_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_SniperZoom.DoCameraCollision
// [0x00420002] 
// Parameters infos:
// class AActor*                  A                              ( CPF_Parm )
// struct FVector                 V                              ( CPF_Parm | CPF_OutParm )
// struct FRotator                R                              ( CPF_Parm | CPF_OutParm )

void USFXCameraMode_SniperZoom::DoCameraCollision ( class AActor* A, struct FVector* V, struct FRotator* R )
{
	static UFunction* pFnDoCameraCollision = NULL;

	if ( ! pFnDoCameraCollision )
		pFnDoCameraCollision = (UFunction*) UObject::GObjObjects()->Data[ 53562 ];

	USFXCameraMode_SniperZoom_execDoCameraCollision_Parms DoCameraCollision_Parms;
	DoCameraCollision_Parms.A = A;

	this->ProcessEvent ( pFnDoCameraCollision, &DoCameraCollision_Parms, NULL );

	if ( V )
		memcpy ( V, &DoCameraCollision_Parms.V, 0xC );

	if ( R )
		memcpy ( R, &DoCameraCollision_Parms.R, 0xC );
};

// Function SFXGame.SFXCameraMode_SniperZoom.ModifyPostProcessSettings
// [0x00420002] 
// Parameters infos:
// struct FPostProcessSettings    PPSettings                     ( CPF_Parm | CPF_OutParm )

void USFXCameraMode_SniperZoom::ModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings )
{
	static UFunction* pFnModifyPostProcessSettings = NULL;

	if ( ! pFnModifyPostProcessSettings )
		pFnModifyPostProcessSettings = (UFunction*) UObject::GObjObjects()->Data[ 53560 ];

	USFXCameraMode_SniperZoom_execModifyPostProcessSettings_Parms ModifyPostProcessSettings_Parms;

	this->ProcessEvent ( pFnModifyPostProcessSettings, &ModifyPostProcessSettings_Parms, NULL );

	if ( PPSettings )
		memcpy ( PPSettings, &ModifyPostProcessSettings_Parms.PPSettings, 0x90 );
};

// Function SFXGame.SFXCameraMode_SniperZoomCover.GetCameraLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USFXCameraMode_SniperZoomCover::GetCameraLocation ( )
{
	static UFunction* pFnGetCameraLocation = NULL;

	if ( ! pFnGetCameraLocation )
		pFnGetCameraLocation = (UFunction*) UObject::GObjObjects()->Data[ 53621 ];

	USFXCameraMode_SniperZoomCover_execGetCameraLocation_Parms GetCameraLocation_Parms;

	this->ProcessEvent ( pFnGetCameraLocation, &GetCameraLocation_Parms, NULL );

	return GetCameraLocation_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode_SniperZoomCover.SetPosition
// [0x00020002] 
// Parameters infos:
// unsigned char                  pos                            ( CPF_Parm )

void USFXCameraMode_SniperZoomCover::SetPosition ( unsigned char pos )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 53619 ];

	USFXCameraMode_SniperZoomCover_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.pos = pos;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.SwitchToBackup
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::SwitchToBackup ( )
{
	static UFunction* pFnSwitchToBackup = NULL;

	if ( ! pFnSwitchToBackup )
		pFnSwitchToBackup = (UFunction*) UObject::GObjObjects()->Data[ 56095 ];

	USFXGameModeDefault_execSwitchToBackup_Parms SwitchToBackup_Parms;

	this->ProcessEvent ( pFnSwitchToBackup, &SwitchToBackup_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.ShowAreaMap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeDefault::ShowAreaMap ( )
{
	static UFunction* pFnShowAreaMap = NULL;

	if ( ! pFnShowAreaMap )
		pFnShowAreaMap = (UFunction*) UObject::GObjObjects()->Data[ 56090 ];

	USFXGameModeDefault_execShowAreaMap_Parms ShowAreaMap_Parms;

	this->ProcessEvent ( pFnShowAreaMap, &ShowAreaMap_Parms, NULL );

	return ShowAreaMap_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeDefault.TryUsePower
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Power                          ( CPF_Parm )

void USFXGameModeDefault::TryUsePower ( int Power )
{
	static UFunction* pFnTryUsePower = NULL;

	if ( ! pFnTryUsePower )
		pFnTryUsePower = (UFunction*) UObject::GObjObjects()->Data[ 56083 ];

	USFXGameModeDefault_execTryUsePower_Parms TryUsePower_Parms;
	TryUsePower_Parms.Power = Power;

	this->ProcessEvent ( pFnTryUsePower, &TryUsePower_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.TurnStormOff
// [0x00020002] 
// Parameters infos:

void USFXGameModeDefault::TurnStormOff ( )
{
	static UFunction* pFnTurnStormOff = NULL;

	if ( ! pFnTurnStormOff )
		pFnTurnStormOff = (UFunction*) UObject::GObjObjects()->Data[ 56082 ];

	USFXGameModeDefault_execTurnStormOff_Parms TurnStormOff_Parms;

	this->ProcessEvent ( pFnTurnStormOff, &TurnStormOff_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.StormOff
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::StormOff ( )
{
	static UFunction* pFnStormOff = NULL;

	if ( ! pFnStormOff )
		pFnStormOff = (UFunction*) UObject::GObjObjects()->Data[ 56081 ];

	USFXGameModeDefault_execStormOff_Parms StormOff_Parms;

	this->ProcessEvent ( pFnStormOff, &StormOff_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.StormOn
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::StormOn ( )
{
	static UFunction* pFnStormOn = NULL;

	if ( ! pFnStormOn )
		pFnStormOn = (UFunction*) UObject::GObjObjects()->Data[ 56078 ];

	USFXGameModeDefault_execStormOn_Parms StormOn_Parms;

	this->ProcessEvent ( pFnStormOn, &StormOn_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.NextWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = (UFunction*) UObject::GObjObjects()->Data[ 56075 ];

	USFXGameModeDefault_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.PrevWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = (UFunction*) UObject::GObjObjects()->Data[ 56072 ];

	USFXGameModeDefault_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.TrySwapWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::TrySwapWeapon ( )
{
	static UFunction* pFnTrySwapWeapon = NULL;

	if ( ! pFnTrySwapWeapon )
		pFnTrySwapWeapon = (UFunction*) UObject::GObjObjects()->Data[ 56070 ];

	USFXGameModeDefault_execTrySwapWeapon_Parms TrySwapWeapon_Parms;

	this->ProcessEvent ( pFnTrySwapWeapon, &TrySwapWeapon_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.ResetSelectionMaterialParams
// [0x00020002] 
// Parameters infos:

void USFXGameModeDefault::ResetSelectionMaterialParams ( )
{
	static UFunction* pFnResetSelectionMaterialParams = NULL;

	if ( ! pFnResetSelectionMaterialParams )
		pFnResetSelectionMaterialParams = (UFunction*) UObject::GObjObjects()->Data[ 56069 ];

	USFXGameModeDefault_execResetSelectionMaterialParams_Parms ResetSelectionMaterialParams_Parms;

	this->ProcessEvent ( pFnResetSelectionMaterialParams, &ResetSelectionMaterialParams_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.Used
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeDefault::Used ( )
{
	static UFunction* pFnUsed = NULL;

	if ( ! pFnUsed )
		pFnUsed = (UFunction*) UObject::GObjObjects()->Data[ 56063 ];

	USFXGameModeDefault_execUsed_Parms Used_Parms;

	this->ProcessEvent ( pFnUsed, &Used_Parms, NULL );

	return Used_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeDefault.TryHolster
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::TryHolster ( )
{
	static UFunction* pFnTryHolster = NULL;

	if ( ! pFnTryHolster )
		pFnTryHolster = (UFunction*) UObject::GObjObjects()->Data[ 56061 ];

	USFXGameModeDefault_execTryHolster_Parms TryHolster_Parms;

	this->ProcessEvent ( pFnTryHolster, &TryHolster_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.TryHeavyMelee
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::TryHeavyMelee ( )
{
	static UFunction* pFnTryHeavyMelee = NULL;

	if ( ! pFnTryHeavyMelee )
		pFnTryHeavyMelee = (UFunction*) UObject::GObjObjects()->Data[ 56058 ];

	USFXGameModeDefault_execTryHeavyMelee_Parms TryHeavyMelee_Parms;

	this->ProcessEvent ( pFnTryHeavyMelee, &TryHeavyMelee_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.TryMelee
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::TryMelee ( )
{
	static UFunction* pFnTryMelee = NULL;

	if ( ! pFnTryMelee )
		pFnTryMelee = (UFunction*) UObject::GObjObjects()->Data[ 56055 ];

	USFXGameModeDefault_execTryMelee_Parms TryMelee_Parms;

	this->ProcessEvent ( pFnTryMelee, &TryMelee_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.TryReload
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::TryReload ( )
{
	static UFunction* pFnTryReload = NULL;

	if ( ! pFnTryReload )
		pFnTryReload = (UFunction*) UObject::GObjObjects()->Data[ 56052 ];

	USFXGameModeDefault_execTryReload_Parms TryReload_Parms;

	this->ProcessEvent ( pFnTryReload, &TryReload_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.TryExitCover
// [0x00820202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// unsigned long                  bForceExit                     ( CPF_Parm )

bool USFXGameModeDefault::TryExitCover ( unsigned long bForceExit )
{
	static UFunction* pFnTryExitCover = NULL;

	if ( ! pFnTryExitCover )
		pFnTryExitCover = (UFunction*) UObject::GObjObjects()->Data[ 56044 ];

	USFXGameModeDefault_execTryExitCover_Parms TryExitCover_Parms;
	TryExitCover_Parms.bForceExit = bForceExit;

	this->ProcessEvent ( pFnTryExitCover, &TryExitCover_Parms, NULL );

	return TryExitCover_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeDefault.UseAbility
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// int                            Ability                        ( CPF_Parm )

void USFXGameModeDefault::UseAbility ( int Ability )
{
	static UFunction* pFnUseAbility = NULL;

	if ( ! pFnUseAbility )
		pFnUseAbility = (UFunction*) UObject::GObjObjects()->Data[ 56042 ];

	USFXGameModeDefault_execUseAbility_Parms UseAbility_Parms;
	UseAbility_Parms.Ability = Ability;

	this->ProcessEvent ( pFnUseAbility, &UseAbility_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.EnterCommandMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::EnterCommandMenu ( )
{
	static UFunction* pFnEnterCommandMenu = NULL;

	if ( ! pFnEnterCommandMenu )
		pFnEnterCommandMenu = (UFunction*) UObject::GObjObjects()->Data[ 56041 ];

	USFXGameModeDefault_execEnterCommandMenu_Parms EnterCommandMenu_Parms;

	this->ProcessEvent ( pFnEnterCommandMenu, &EnterCommandMenu_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.EnterWeaponWheel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::EnterWeaponWheel ( )
{
	static UFunction* pFnEnterWeaponWheel = NULL;

	if ( ! pFnEnterWeaponWheel )
		pFnEnterWeaponWheel = (UFunction*) UObject::GObjObjects()->Data[ 56040 ];

	USFXGameModeDefault_execEnterWeaponWheel_Parms EnterWeaponWheel_Parms;

	this->ProcessEvent ( pFnEnterWeaponWheel, &EnterWeaponWheel_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.EnterPowerWheel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::EnterPowerWheel ( )
{
	static UFunction* pFnEnterPowerWheel = NULL;

	if ( ! pFnEnterPowerWheel )
		pFnEnterPowerWheel = (UFunction*) UObject::GObjObjects()->Data[ 56039 ];

	USFXGameModeDefault_execEnterPowerWheel_Parms EnterPowerWheel_Parms;

	this->ProcessEvent ( pFnEnterPowerWheel, &EnterPowerWheel_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.TurnOffTightAim
// [0x00020002] 
// Parameters infos:

void USFXGameModeDefault::TurnOffTightAim ( )
{
	static UFunction* pFnTurnOffTightAim = NULL;

	if ( ! pFnTurnOffTightAim )
		pFnTurnOffTightAim = (UFunction*) UObject::GObjObjects()->Data[ 56038 ];

	USFXGameModeDefault_execTurnOffTightAim_Parms TurnOffTightAim_Parms;

	this->ProcessEvent ( pFnTurnOffTightAim, &TurnOffTightAim_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.StopTightAim
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::StopTightAim ( )
{
	static UFunction* pFnStopTightAim = NULL;

	if ( ! pFnStopTightAim )
		pFnStopTightAim = (UFunction*) UObject::GObjObjects()->Data[ 56037 ];

	USFXGameModeDefault_execStopTightAim_Parms StopTightAim_Parms;

	this->ProcessEvent ( pFnStopTightAim, &StopTightAim_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.TightAim
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeDefault::TightAim ( )
{
	static UFunction* pFnTightAim = NULL;

	if ( ! pFnTightAim )
		pFnTightAim = (UFunction*) UObject::GObjObjects()->Data[ 56035 ];

	USFXGameModeDefault_execTightAim_Parms TightAim_Parms;

	this->ProcessEvent ( pFnTightAim, &TightAim_Parms, NULL );
};

// Function SFXGame.SFXGameModeDefault.GetCameraMode
// [0x00420002] 
// Parameters infos:
// class USFXCameraMode*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXCameraMode*          OldCameraMode                  ( CPF_Parm )
// int                            PreserveTarget                 ( CPF_Parm | CPF_OutParm )
// float                          TransitionTime                 ( CPF_Parm | CPF_OutParm )
// class USFXCameraMode_Interpolate* Transition                     ( CPF_Parm | CPF_OutParm )

class USFXCameraMode* USFXGameModeDefault::GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition )
{
	static UFunction* pFnGetCameraMode = NULL;

	if ( ! pFnGetCameraMode )
		pFnGetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 56026 ];

	USFXGameModeDefault_execGetCameraMode_Parms GetCameraMode_Parms;
	GetCameraMode_Parms.OldCameraMode = OldCameraMode;

	this->ProcessEvent ( pFnGetCameraMode, &GetCameraMode_Parms, NULL );

	if ( PreserveTarget )
		*PreserveTarget = GetCameraMode_Parms.PreserveTarget;

	if ( TransitionTime )
		*TransitionTime = GetCameraMode_Parms.TransitionTime;

	if ( Transition )
		*Transition = GetCameraMode_Parms.Transition;

	return GetCameraMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeDefault.Initialize
// [0x00020002] 
// Parameters infos:

void USFXGameModeDefault::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 56025 ];

	USFXGameModeDefault_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.SFXCameraTransition_ZoomSnap.Tick
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXCameraTransition_ZoomSnap::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53832 ];

	USFXCameraTransition_ZoomSnap_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXCameraTransition_ZoomSnap.MakeInactive
// [0x00020002] 
// Parameters infos:

void USFXCameraTransition_ZoomSnap::MakeInactive ( )
{
	static UFunction* pFnMakeInactive = NULL;

	if ( ! pFnMakeInactive )
		pFnMakeInactive = (UFunction*) UObject::GObjObjects()->Data[ 53831 ];

	USFXCameraTransition_ZoomSnap_execMakeInactive_Parms MakeInactive_Parms;

	this->ProcessEvent ( pFnMakeInactive, &MakeInactive_Parms, NULL );
};

// Function SFXGame.SFXCameraTransition_ZoomSnap.InitializeTransition
// [0x00020002] 
// Parameters infos:
// class USFXCameraMode*          FromMode                       ( CPF_Parm )
// class USFXCameraMode*          ToMode                         ( CPF_Parm )
// float                          Time                           ( CPF_Parm )
// unsigned long                  PreserveTarget                 ( CPF_Parm )

void USFXCameraTransition_ZoomSnap::InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget )
{
	static UFunction* pFnInitializeTransition = NULL;

	if ( ! pFnInitializeTransition )
		pFnInitializeTransition = (UFunction*) UObject::GObjObjects()->Data[ 53825 ];

	USFXCameraTransition_ZoomSnap_execInitializeTransition_Parms InitializeTransition_Parms;
	InitializeTransition_Parms.FromMode = FromMode;
	InitializeTransition_Parms.ToMode = ToMode;
	InitializeTransition_Parms.Time = Time;
	InitializeTransition_Parms.PreserveTarget = PreserveTarget;

	this->ProcessEvent ( pFnInitializeTransition, &InitializeTransition_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_TightAimCover.Tick
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXCameraMode_TightAimCover::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53639 ];

	USFXCameraMode_TightAimCover_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_TightAimCover.GetCameraLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USFXCameraMode_TightAimCover::GetCameraLocation ( )
{
	static UFunction* pFnGetCameraLocation = NULL;

	if ( ! pFnGetCameraLocation )
		pFnGetCameraLocation = (UFunction*) UObject::GObjObjects()->Data[ 53636 ];

	USFXCameraMode_TightAimCover_execGetCameraLocation_Parms GetCameraLocation_Parms;

	this->ProcessEvent ( pFnGetCameraLocation, &GetCameraLocation_Parms, NULL );

	return GetCameraLocation_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode_TightAimCover.SetPosition
// [0x00020002] 
// Parameters infos:
// unsigned char                  pos                            ( CPF_Parm )

void USFXCameraMode_TightAimCover::SetPosition ( unsigned char pos )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = (UFunction*) UObject::GObjObjects()->Data[ 53634 ];

	USFXCameraMode_TightAimCover_execSetPosition_Parms SetPosition_Parms;
	SetPosition_Parms.pos = pos;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_TightAim.Tick
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXCameraMode_TightAim::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53626 ];

	USFXCameraMode_TightAim_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_Vehicle.MakeInactive
// [0x00020002] 
// Parameters infos:

void USFXCameraMode_Vehicle::MakeInactive ( )
{
	static UFunction* pFnMakeInactive = NULL;

	if ( ! pFnMakeInactive )
		pFnMakeInactive = (UFunction*) UObject::GObjObjects()->Data[ 53669 ];

	USFXCameraMode_Vehicle_execMakeInactive_Parms MakeInactive_Parms;

	this->ProcessEvent ( pFnMakeInactive, &MakeInactive_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_Vehicle.MakeActive
// [0x00020002] 
// Parameters infos:

void USFXCameraMode_Vehicle::MakeActive ( )
{
	static UFunction* pFnMakeActive = NULL;

	if ( ! pFnMakeActive )
		pFnMakeActive = (UFunction*) UObject::GObjObjects()->Data[ 53668 ];

	USFXCameraMode_Vehicle_execMakeActive_Parms MakeActive_Parms;

	this->ProcessEvent ( pFnMakeActive, &MakeActive_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_Vehicle.Tick
// [0x00020002] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void USFXCameraMode_Vehicle::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53666 ];

	USFXCameraMode_Vehicle_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_Vehicle.UpdatePosition
// [0x00820002] 
// Parameters infos:

void USFXCameraMode_Vehicle::UpdatePosition ( )
{
	static UFunction* pFnUpdatePosition = NULL;

	if ( ! pFnUpdatePosition )
		pFnUpdatePosition = (UFunction*) UObject::GObjObjects()->Data[ 53660 ];

	USFXCameraMode_Vehicle_execUpdatePosition_Parms UpdatePosition_Parms;

	this->ProcessEvent ( pFnUpdatePosition, &UpdatePosition_Parms, NULL );
};

// Function SFXGame.SFXCameraMode_Vehicle.GetCameraLocation
// [0x00020002] 
// Parameters infos:
// struct FVector                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

struct FVector USFXCameraMode_Vehicle::GetCameraLocation ( )
{
	static UFunction* pFnGetCameraLocation = NULL;

	if ( ! pFnGetCameraLocation )
		pFnGetCameraLocation = (UFunction*) UObject::GObjObjects()->Data[ 53658 ];

	USFXCameraMode_Vehicle_execGetCameraLocation_Parms GetCameraLocation_Parms;

	this->ProcessEvent ( pFnGetCameraLocation, &GetCameraLocation_Parms, NULL );

	return GetCameraLocation_Parms.ReturnValue;
};

// Function SFXGame.SFXCameraMode_Vehicle.Initialize
// [0x00020002] 
// Parameters infos:
// class ABioPlayerController*    PC                             ( CPF_Parm )

void USFXCameraMode_Vehicle::Initialize ( class ABioPlayerController* PC )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 53656 ];

	USFXCameraMode_Vehicle_execInitialize_Parms Initialize_Parms;
	Initialize_Parms.PC = PC;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.SFXCameraTransition_Animated.Tick
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXCameraTransition_Animated::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53777 ];

	USFXCameraTransition_Animated_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXCameraTransition_Animated.InitializeTransition
// [0x00020002] 
// Parameters infos:
// class USFXCameraMode*          FromMode                       ( CPF_Parm )
// class USFXCameraMode*          ToMode                         ( CPF_Parm )
// float                          Time                           ( CPF_Parm )
// unsigned long                  PreserveTarget                 ( CPF_Parm )

void USFXCameraTransition_Animated::InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget )
{
	static UFunction* pFnInitializeTransition = NULL;

	if ( ! pFnInitializeTransition )
		pFnInitializeTransition = (UFunction*) UObject::GObjObjects()->Data[ 53772 ];

	USFXCameraTransition_Animated_execInitializeTransition_Parms InitializeTransition_Parms;
	InitializeTransition_Parms.FromMode = FromMode;
	InitializeTransition_Parms.ToMode = ToMode;
	InitializeTransition_Parms.Time = Time;
	InitializeTransition_Parms.PreserveTarget = PreserveTarget;

	this->ProcessEvent ( pFnInitializeTransition, &InitializeTransition_Parms, NULL );
};

// Function SFXGame.SFXCameraTransition_FaceTarget.Tick
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXCameraTransition_FaceTarget::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53791 ];

	USFXCameraTransition_FaceTarget_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXCameraTransition_FaceTarget.InitializeTransition
// [0x00020002] 
// Parameters infos:
// class USFXCameraMode*          FromMode                       ( CPF_Parm )
// class USFXCameraMode*          ToMode                         ( CPF_Parm )
// float                          Time                           ( CPF_Parm )
// unsigned long                  PreserveTarget                 ( CPF_Parm )

void USFXCameraTransition_FaceTarget::InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget )
{
	static UFunction* pFnInitializeTransition = NULL;

	if ( ! pFnInitializeTransition )
		pFnInitializeTransition = (UFunction*) UObject::GObjObjects()->Data[ 53786 ];

	USFXCameraTransition_FaceTarget_execInitializeTransition_Parms InitializeTransition_Parms;
	InitializeTransition_Parms.FromMode = FromMode;
	InitializeTransition_Parms.ToMode = ToMode;
	InitializeTransition_Parms.Time = Time;
	InitializeTransition_Parms.PreserveTarget = PreserveTarget;

	this->ProcessEvent ( pFnInitializeTransition, &InitializeTransition_Parms, NULL );
};

// Function SFXGame.SFXCameraTransition_GalaxyMap.Tick
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXCameraTransition_GalaxyMap::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53801 ];

	USFXCameraTransition_GalaxyMap_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXCameraTransition_GalaxyMap.InitializeTransition
// [0x00020002] 
// Parameters infos:
// class USFXCameraMode*          FromMode                       ( CPF_Parm )
// class USFXCameraMode*          ToMode                         ( CPF_Parm )
// float                          Time                           ( CPF_Parm )
// unsigned long                  PreserveTarget                 ( CPF_Parm )

void USFXCameraTransition_GalaxyMap::InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget )
{
	static UFunction* pFnInitializeTransition = NULL;

	if ( ! pFnInitializeTransition )
		pFnInitializeTransition = (UFunction*) UObject::GObjObjects()->Data[ 53796 ];

	USFXCameraTransition_GalaxyMap_execInitializeTransition_Parms InitializeTransition_Parms;
	InitializeTransition_Parms.FromMode = FromMode;
	InitializeTransition_Parms.ToMode = ToMode;
	InitializeTransition_Parms.Time = Time;
	InitializeTransition_Parms.PreserveTarget = PreserveTarget;

	this->ProcessEvent ( pFnInitializeTransition, &InitializeTransition_Parms, NULL );
};

// Function SFXGame.SFXCameraTransition_VanguardSlam.Tick
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXCameraTransition_VanguardSlam::Tick ( float TimeDelta )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 53818 ];

	USFXCameraTransition_VanguardSlam_execTick_Parms Tick_Parms;
	Tick_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXCameraTransition_VanguardSlam.InitializeTransition
// [0x00020002] 
// Parameters infos:
// class USFXCameraMode*          FromMode                       ( CPF_Parm )
// class USFXCameraMode*          ToMode                         ( CPF_Parm )
// float                          Time                           ( CPF_Parm )
// unsigned long                  PreserveTarget                 ( CPF_Parm )

void USFXCameraTransition_VanguardSlam::InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget )
{
	static UFunction* pFnInitializeTransition = NULL;

	if ( ! pFnInitializeTransition )
		pFnInitializeTransition = (UFunction*) UObject::GObjObjects()->Data[ 53813 ];

	USFXCameraTransition_VanguardSlam_execInitializeTransition_Parms InitializeTransition_Parms;
	InitializeTransition_Parms.FromMode = FromMode;
	InitializeTransition_Parms.ToMode = ToMode;
	InitializeTransition_Parms.Time = Time;
	InitializeTransition_Parms.PreserveTarget = PreserveTarget;

	this->ProcessEvent ( pFnInitializeTransition, &InitializeTransition_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_BovineFortitude.DelayedSoundEffect
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_BovineFortitude::DelayedSoundEffect ( )
{
	static UFunction* pFnDelayedSoundEffect = NULL;

	if ( ! pFnDelayedSoundEffect )
		pFnDelayedSoundEffect = (UFunction*) UObject::GObjObjects()->Data[ 54155 ];

	USFXCustomAction_BovineFortitude_execDelayedSoundEffect_Parms DelayedSoundEffect_Parms;

	this->ProcessEvent ( pFnDelayedSoundEffect, &DelayedSoundEffect_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_BovineFortitude.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_BovineFortitude::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 54147 ];

	USFXCustomAction_BovineFortitude_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_HealOverTime.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_HealOverTime::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55442 ];

	USFXGameEffect_HealOverTime_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Exploration_Comm.CheckMoving
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Exploration_Comm::CheckMoving ( )
{
	static UFunction* pFnCheckMoving = NULL;

	if ( ! pFnCheckMoving )
		pFnCheckMoving = (UFunction*) UObject::GObjObjects()->Data[ 54171 ];

	USFXCustomAction_Exploration_Comm_execCheckMoving_Parms CheckMoving_Parms;

	this->ProcessEvent ( pFnCheckMoving, &CheckMoving_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Exploration_Comm.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Exploration_Comm::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54170 ];

	USFXCustomAction_Exploration_Comm_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_HeavyPunchLunge.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_HeavyPunchLunge::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 54268 ];

	USFXCustomAction_HeavyPunchLunge_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_HeavyPunchLunge.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HeavyPunchLunge::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54267 ];

	USFXCustomAction_HeavyPunchLunge_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_HeavyPunchLunge.PlayImpact
// [0x00820002] 
// Parameters infos:

void USFXCustomAction_HeavyPunchLunge::PlayImpact ( )
{
	static UFunction* pFnPlayImpact = NULL;

	if ( ! pFnPlayImpact )
		pFnPlayImpact = (UFunction*) UObject::GObjObjects()->Data[ 54250 ];

	USFXCustomAction_HeavyPunchLunge_execPlayImpact_Parms PlayImpact_Parms;

	this->ProcessEvent ( pFnPlayImpact, &PlayImpact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_HeavyPunchLunge.Lunge
// [0x00820002] 
// Parameters infos:

void USFXCustomAction_HeavyPunchLunge::Lunge ( )
{
	static UFunction* pFnLunge = NULL;

	if ( ! pFnLunge )
		pFnLunge = (UFunction*) UObject::GObjObjects()->Data[ 54248 ];

	USFXCustomAction_HeavyPunchLunge_execLunge_Parms Lunge_Parms;

	this->ProcessEvent ( pFnLunge, &Lunge_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_HeavyPunchLunge.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_HeavyPunchLunge::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54246 ];

	USFXCustomAction_HeavyPunchLunge_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_HeavyPunchLunge.SetLeftArmIKEnabled
// [0x00020002] 
// Parameters infos:
// unsigned long                  bEnabled                       ( CPF_Parm )

void USFXCustomAction_HeavyPunchLunge::SetLeftArmIKEnabled ( unsigned long bEnabled )
{
	static UFunction* pFnSetLeftArmIKEnabled = NULL;

	if ( ! pFnSetLeftArmIKEnabled )
		pFnSetLeftArmIKEnabled = (UFunction*) UObject::GObjObjects()->Data[ 54243 ];

	USFXCustomAction_HeavyPunchLunge_execSetLeftArmIKEnabled_Parms SetLeftArmIKEnabled_Parms;
	SetLeftArmIKEnabled_Parms.bEnabled = bEnabled;

	this->ProcessEvent ( pFnSetLeftArmIKEnabled, &SetLeftArmIKEnabled_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_TimeDilation.OnUnpaused
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_TimeDilation::OnUnpaused ( )
{
	static UFunction* pFnOnUnpaused = NULL;

	if ( ! pFnOnUnpaused )
		pFnOnUnpaused = (UFunction*) UObject::GObjObjects()->Data[ 55796 ];

	USFXGameEffect_TimeDilation_execOnUnpaused_Parms OnUnpaused_Parms;

	this->ProcessEvent ( pFnOnUnpaused, &OnUnpaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_TimeDilation.OnPaused
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_TimeDilation::OnPaused ( )
{
	static UFunction* pFnOnPaused = NULL;

	if ( ! pFnOnPaused )
		pFnOnPaused = (UFunction*) UObject::GObjObjects()->Data[ 55795 ];

	USFXGameEffect_TimeDilation_execOnPaused_Parms OnPaused_Parms;

	this->ProcessEvent ( pFnOnPaused, &OnPaused_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_TimeDilation.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_TimeDilation::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55794 ];

	USFXGameEffect_TimeDilation_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_TimeDilation.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXGameEffect_TimeDilation::OnUpdate ( float TimeDelta )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55791 ];

	USFXGameEffect_TimeDilation_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_TimeDilation.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_TimeDilation::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55790 ];

	USFXGameEffect_TimeDilation_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_MeleeDamageBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_MeleeDamageBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55398 ];

	USFXGameEffect_MeleeDamageBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_MeleeDamageBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_MeleeDamageBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55396 ];

	USFXGameEffect_MeleeDamageBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXCustomAction_MawBurrow.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_MawBurrow::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 54290 ];

	USFXCustomAction_MawBurrow_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_MawBurrow.ContinueCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MawBurrow::ContinueCustomAction ( )
{
	static UFunction* pFnContinueCustomAction = NULL;

	if ( ! pFnContinueCustomAction )
		pFnContinueCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54289 ];

	USFXCustomAction_MawBurrow_execContinueCustomAction_Parms ContinueCustomAction_Parms;

	this->ProcessEvent ( pFnContinueCustomAction, &ContinueCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_MawBurrow.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MawBurrow::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54288 ];

	USFXCustomAction_MawBurrow_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_MawBurrow.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_MawBurrow::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54287 ];

	USFXCustomAction_MawBurrow_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_MawDeath.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_MawDeath::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 54296 ];

	USFXCustomAction_MawDeath_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Melee.CleanUp
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Melee::CleanUp ( )
{
	static UFunction* pFnCleanUp = NULL;

	if ( ! pFnCleanUp )
		pFnCleanUp = (UFunction*) UObject::GObjObjects()->Data[ 54316 ];

	USFXCustomAction_Melee_execCleanUp_Parms CleanUp_Parms;

	this->ProcessEvent ( pFnCleanUp, &CleanUp_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Melee.EndAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Melee::EndAction ( )
{
	static UFunction* pFnEndAction = NULL;

	if ( ! pFnEndAction )
		pFnEndAction = (UFunction*) UObject::GObjObjects()->Data[ 54315 ];

	USFXCustomAction_Melee_execEndAction_Parms EndAction_Parms;

	this->ProcessEvent ( pFnEndAction, &EndAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Melee.Impact
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Melee::Impact ( )
{
	static UFunction* pFnImpact = NULL;

	if ( ! pFnImpact )
		pFnImpact = (UFunction*) UObject::GObjObjects()->Data[ 54311 ];

	USFXCustomAction_Melee_execImpact_Parms Impact_Parms;

	this->ProcessEvent ( pFnImpact, &Impact_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Melee.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Melee::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54310 ];

	USFXCustomAction_Melee_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Possessed.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_Possessed::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 54354 ];

	USFXCustomAction_Possessed_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Possessed.StopCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Possessed::StopCustomAction ( )
{
	static UFunction* pFnStopCustomAction = NULL;

	if ( ! pFnStopCustomAction )
		pFnStopCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54353 ];

	USFXCustomAction_Possessed_execStopCustomAction_Parms StopCustomAction_Parms;

	this->ProcessEvent ( pFnStopCustomAction, &StopCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Possessed.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Possessed::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54352 ];

	USFXCustomAction_Possessed_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PraetorianDeath.BodyStanceAnimEndNotification
// [0x00020002] 
// Parameters infos:
// class UAnimNodeSequence*       SeqNode                        ( CPF_Parm )
// float                          PlayedTime                     ( CPF_Parm )
// float                          ExcessTime                     ( CPF_Parm )

void USFXCustomAction_PraetorianDeath::BodyStanceAnimEndNotification ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime )
{
	static UFunction* pFnBodyStanceAnimEndNotification = NULL;

	if ( ! pFnBodyStanceAnimEndNotification )
		pFnBodyStanceAnimEndNotification = (UFunction*) UObject::GObjObjects()->Data[ 54362 ];

	USFXCustomAction_PraetorianDeath_execBodyStanceAnimEndNotification_Parms BodyStanceAnimEndNotification_Parms;
	BodyStanceAnimEndNotification_Parms.SeqNode = SeqNode;
	BodyStanceAnimEndNotification_Parms.PlayedTime = PlayedTime;
	BodyStanceAnimEndNotification_Parms.ExcessTime = ExcessTime;

	this->ProcessEvent ( pFnBodyStanceAnimEndNotification, &BodyStanceAnimEndNotification_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_PraetorianDeath.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_PraetorianDeath::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54360 ];

	USFXCustomAction_PraetorianDeath_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Spider.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Spider::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54407 ];

	USFXCustomAction_Spider_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Utilize.CheckFiring
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Utilize::CheckFiring ( )
{
	static UFunction* pFnCheckFiring = NULL;

	if ( ! pFnCheckFiring )
		pFnCheckFiring = (UFunction*) UObject::GObjObjects()->Data[ 54428 ];

	USFXCustomAction_Utilize_execCheckFiring_Parms CheckFiring_Parms;

	this->ProcessEvent ( pFnCheckFiring, &CheckFiring_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Utilize.CheckMoving
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Utilize::CheckMoving ( )
{
	static UFunction* pFnCheckMoving = NULL;

	if ( ! pFnCheckMoving )
		pFnCheckMoving = (UFunction*) UObject::GObjObjects()->Data[ 54427 ];

	USFXCustomAction_Utilize_execCheckMoving_Parms CheckMoving_Parms;

	this->ProcessEvent ( pFnCheckMoving, &CheckMoving_Parms, NULL );
};

// Function SFXGame.SFXCustomAction_Utilize.StartCustomAction
// [0x00020002] 
// Parameters infos:

void USFXCustomAction_Utilize::StartCustomAction ( )
{
	static UFunction* pFnStartCustomAction = NULL;

	if ( ! pFnStartCustomAction )
		pFnStartCustomAction = (UFunction*) UObject::GObjObjects()->Data[ 54424 ];

	USFXCustomAction_Utilize_execStartCustomAction_Parms StartCustomAction_Parms;

	this->ProcessEvent ( pFnStartCustomAction, &StartCustomAction_Parms, NULL );
};

// Function SFXGame.SFXSeqEvt_SFXDoorInteraction.TriggerInteraction
// [0x00020002] 
// Parameters infos:
// unsigned char                  CurrentState                   ( CPF_Parm )
// class AActor*                  EventInstigator                ( CPF_Parm )

void USFXSeqEvt_SFXDoorInteraction::TriggerInteraction ( unsigned char CurrentState, class AActor* EventInstigator )
{
	static UFunction* pFnTriggerInteraction = NULL;

	if ( ! pFnTriggerInteraction )
		pFnTriggerInteraction = (UFunction*) UObject::GObjObjects()->Data[ 60672 ];

	USFXSeqEvt_SFXDoorInteraction_execTriggerInteraction_Parms TriggerInteraction_Parms;
	TriggerInteraction_Parms.CurrentState = CurrentState;
	TriggerInteraction_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnTriggerInteraction, &TriggerInteraction_Parms, NULL );
};

// Function SFXGame.SFXSeqEvt_SFXDoorInteraction.TriggerStateChange
// [0x00020002] 
// Parameters infos:
// unsigned char                  NewState                       ( CPF_Parm )
// unsigned char                  PrevState                      ( CPF_Parm )
// class AActor*                  EventInstigator                ( CPF_Parm )

void USFXSeqEvt_SFXDoorInteraction::TriggerStateChange ( unsigned char NewState, unsigned char PrevState, class AActor* EventInstigator )
{
	static UFunction* pFnTriggerStateChange = NULL;

	if ( ! pFnTriggerStateChange )
		pFnTriggerStateChange = (UFunction*) UObject::GObjObjects()->Data[ 60665 ];

	USFXSeqEvt_SFXDoorInteraction_execTriggerStateChange_Parms TriggerStateChange_Parms;
	TriggerStateChange_Parms.NewState = NewState;
	TriggerStateChange_Parms.PrevState = PrevState;
	TriggerStateChange_Parms.EventInstigator = EventInstigator;

	this->ProcessEvent ( pFnTriggerStateChange, &TriggerStateChange_Parms, NULL );
};

// Function SFXGame.SFXDroppedPickup.PickedUpBy
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ASFXDroppedPickup::PickedUpBy ( class APawn* P )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = (UFunction*) UObject::GObjObjects()->Data[ 54764 ];

	ASFXDroppedPickup_execPickedUpBy_Parms PickedUpBy_Parms;
	PickedUpBy_Parms.P = P;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function SFXGame.SFXDroppedPickup.GiveTo
// [0x00020002] 
// Parameters infos:
// class APawn*                   P                              ( CPF_Parm )

void ASFXDroppedPickup::GiveTo ( class APawn* P )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = (UFunction*) UObject::GObjObjects()->Data[ 54762 ];

	ASFXDroppedPickup_execGiveTo_Parms GiveTo_Parms;
	GiveTo_Parms.P = P;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function SFXGame.SFXDroppedPickup.Used
// [0x00020002] 
// Parameters infos:
// class AActor*                  User                           ( CPF_Parm )

void ASFXDroppedPickup::Used ( class AActor* User )
{
	static UFunction* pFnUsed = NULL;

	if ( ! pFnUsed )
		pFnUsed = (UFunction*) UObject::GObjObjects()->Data[ 54754 ];

	ASFXDroppedPickup_execUsed_Parms Used_Parms;
	Used_Parms.User = User;

	this->ProcessEvent ( pFnUsed, &Used_Parms, NULL );
};

// Function SFXGame.SFXDroppedPickup.Landed
// [0x00020000] 
// Parameters infos:
// struct FVector                 HitNormal                      ( CPF_Parm )
// class AActor*                  FloorActor                     ( CPF_Parm )

void ASFXDroppedPickup::Landed ( struct FVector HitNormal, class AActor* FloorActor )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = (UFunction*) UObject::GObjObjects()->Data[ 54751 ];

	ASFXDroppedPickup_execLanded_Parms Landed_Parms;
	memcpy ( &Landed_Parms.HitNormal, &HitNormal, 0xC );
	Landed_Parms.FloorActor = FloorActor;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function SFXGame.SFXDroppedPickup.SetPickupMesh
// [0x00020102] 
// Parameters infos:
// class UPrimitiveComponent*     NewPickupMesh                  ( CPF_Parm | CPF_EditInline )

void ASFXDroppedPickup::SetPickupMesh ( class UPrimitiveComponent* NewPickupMesh )
{
	static UFunction* pFnSetPickupMesh = NULL;

	if ( ! pFnSetPickupMesh )
		pFnSetPickupMesh = (UFunction*) UObject::GObjObjects()->Data[ 54748 ];

	ASFXDroppedPickup_execSetPickupMesh_Parms SetPickupMesh_Parms;
	SetPickupMesh_Parms.NewPickupMesh = NewPickupMesh;

	this->ProcessEvent ( pFnSetPickupMesh, &SetPickupMesh_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_AIHacking.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_AIHacking::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 54999 ];

	USFXGameEffect_AIHacking_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_AIHacking.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_AIHacking::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 54997 ];

	USFXGameEffect_AIHacking_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_AIConfuse.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_AIConfuse::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55003 ];

	USFXGameEffect_AIConfuse_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_ArmorPenalty.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_ArmorPenalty::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55032 ];

	USFXGameEffect_ArmorPenalty_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_Cloak.OnCombatEnd
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Cloak::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 55057 ];

	USFXGameEffect_Cloak_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Cloak.DelayedRemoval
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Cloak::DelayedRemoval ( )
{
	static UFunction* pFnDelayedRemoval = NULL;

	if ( ! pFnDelayedRemoval )
		pFnDelayedRemoval = (UFunction*) UObject::GObjObjects()->Data[ 55054 ];

	USFXGameEffect_Cloak_execDelayedRemoval_Parms DelayedRemoval_Parms;

	this->ProcessEvent ( pFnDelayedRemoval, &DelayedRemoval_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Cloak.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Cloak::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55051 ];

	USFXGameEffect_Cloak_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Cloak.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_Cloak::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55046 ];

	USFXGameEffect_Cloak_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_Cloak.OnCloakEnded
// [0x00120000] 
// Parameters infos:

void USFXGameEffect_Cloak::OnCloakEnded ( )
{
	static UFunction* pFnOnCloakEnded = NULL;

	if ( ! pFnOnCloakEnded )
		pFnOnCloakEnded = (UFunction*) UObject::GObjObjects()->Data[ 55044 ];

	USFXGameEffect_Cloak_execOnCloakEnded_Parms OnCloakEnded_Parms;

	this->ProcessEvent ( pFnOnCloakEnded, &OnCloakEnded_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_CloakDamageBonus.OnCombatEnd
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CloakDamageBonus::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 55073 ];

	USFXGameEffect_CloakDamageBonus_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_CloakDamageBonus.RemoveDamageBonuses
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CloakDamageBonus::RemoveDamageBonuses ( )
{
	static UFunction* pFnRemoveDamageBonuses = NULL;

	if ( ! pFnRemoveDamageBonuses )
		pFnRemoveDamageBonuses = (UFunction*) UObject::GObjObjects()->Data[ 55069 ];

	USFXGameEffect_CloakDamageBonus_execRemoveDamageBonuses_Parms RemoveDamageBonuses_Parms;

	this->ProcessEvent ( pFnRemoveDamageBonuses, &RemoveDamageBonuses_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_CloakDamageBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CloakDamageBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55066 ];

	USFXGameEffect_CloakDamageBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_CloakDamageBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CloakDamageBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55062 ];

	USFXGameEffect_CloakDamageBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_CloakDamageBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_CloakDamageBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55060 ];

	USFXGameEffect_CloakDamageBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_CloakTargetable.OnCombatEnd
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CloakTargetable::OnCombatEnd ( )
{
	static UFunction* pFnOnCombatEnd = NULL;

	if ( ! pFnOnCombatEnd )
		pFnOnCombatEnd = (UFunction*) UObject::GObjObjects()->Data[ 55085 ];

	USFXGameEffect_CloakTargetable_execOnCombatEnd_Parms OnCombatEnd_Parms;

	this->ProcessEvent ( pFnOnCombatEnd, &OnCombatEnd_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_CloakTargetable.DelayedRemoval
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CloakTargetable::DelayedRemoval ( )
{
	static UFunction* pFnDelayedRemoval = NULL;

	if ( ! pFnDelayedRemoval )
		pFnDelayedRemoval = (UFunction*) UObject::GObjObjects()->Data[ 55082 ];

	USFXGameEffect_CloakTargetable_execDelayedRemoval_Parms DelayedRemoval_Parms;

	this->ProcessEvent ( pFnDelayedRemoval, &DelayedRemoval_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_CloakTargetable.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CloakTargetable::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55079 ];

	USFXGameEffect_CloakTargetable_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_CloakTargetable.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_CloakTargetable::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55076 ];

	USFXGameEffect_CloakTargetable_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_CustomFlag.OnRemoved
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_CustomFlag::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55146 ];

	USFXGameEffect_CustomFlag_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_CustomFlag.OnApplied
// [0x00020000] 
// Parameters infos:

void USFXGameEffect_CustomFlag::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55145 ];

	USFXGameEffect_CustomFlag_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_DamageBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_DamageBonus_Base::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55149 ];

	USFXGameEffect_DamageBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_DamageOverTime.GetDamageType
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* USFXGameEffect_DamageOverTime::GetDamageType ( )
{
	static UFunction* pFnGetDamageType = NULL;

	if ( ! pFnGetDamageType )
		pFnGetDamageType = (UFunction*) UObject::GObjObjects()->Data[ 55174 ];

	USFXGameEffect_DamageOverTime_execGetDamageType_Parms GetDamageType_Parms;

	this->ProcessEvent ( pFnGetDamageType, &GetDamageType_Parms, NULL );

	return GetDamageType_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_DamageOverTime.OnUpdate
// [0x00820002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_DamageOverTime::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55168 ];

	USFXGameEffect_DamageOverTime_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_HealthRegenPenalty.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_HealthRegenPenalty::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55472 ];

	USFXGameEffect_HealthRegenPenalty_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_DelayedCustomAction.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_DelayedCustomAction::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55202 ];

	USFXGameEffect_DelayedCustomAction_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_DisableAI.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_DisableAI::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55209 ];

	USFXGameEffect_DisableAI_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_DisableAI.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_DisableAI::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55206 ];

	USFXGameEffect_DisableAI_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_FireDamageOverTime.GetDamageType
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* USFXGameEffect_FireDamageOverTime::GetDamageType ( )
{
	static UFunction* pFnGetDamageType = NULL;

	if ( ! pFnGetDamageType )
		pFnGetDamageType = (UFunction*) UObject::GObjObjects()->Data[ 55214 ];

	USFXGameEffect_FireDamageOverTime_execGetDamageType_Parms GetDamageType_Parms;

	this->ProcessEvent ( pFnGetDamageType, &GetDamageType_Parms, NULL );

	return GetDamageType_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_FissureDamageOverTime.GetDamageType
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* USFXGameEffect_FissureDamageOverTime::GetDamageType ( )
{
	static UFunction* pFnGetDamageType = NULL;

	if ( ! pFnGetDamageType )
		pFnGetDamageType = (UFunction*) UObject::GObjObjects()->Data[ 55221 ];

	USFXGameEffect_FissureDamageOverTime_execGetDamageType_Parms GetDamageType_Parms;

	this->ProcessEvent ( pFnGetDamageType, &GetDamageType_Parms, NULL );

	return GetDamageType_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PowerDamageBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PowerDamageBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55236 ];

	USFXGameEffect_PowerDamageBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PowerDamageBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PowerDamageBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55233 ];

	USFXGameEffect_PowerDamageBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PowerDamageBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PowerDamageBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55228 ];

	USFXGameEffect_PowerDamageBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PowerDamageBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PowerDamageBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55226 ];

	USFXGameEffect_PowerDamageBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_PassiveHealthBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveHealthBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55253 ];

	USFXGameEffect_PassiveHealthBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveHealthBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveHealthBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55251 ];

	USFXGameEffect_PassiveHealthBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveHealthBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PassiveHealthBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55246 ];

	USFXGameEffect_PassiveHealthBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PassiveHealthBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PassiveHealthBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55244 ];

	USFXGameEffect_PassiveHealthBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_PassiveShieldRegenBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveShieldRegenBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55270 ];

	USFXGameEffect_PassiveShieldRegenBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveShieldRegenBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveShieldRegenBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55266 ];

	USFXGameEffect_PassiveShieldRegenBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveShieldRegenBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PassiveShieldRegenBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55261 ];

	USFXGameEffect_PassiveShieldRegenBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PassiveShieldRegenBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PassiveShieldRegenBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55259 ];

	USFXGameEffect_PassiveShieldRegenBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_PassiveNegotiationBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PassiveNegotiationBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55279 ];

	USFXGameEffect_PassiveNegotiationBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PassiveNegotiationBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PassiveNegotiationBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55277 ];

	USFXGameEffect_PassiveNegotiationBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_PassiveHeavyAmmoBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveHeavyAmmoBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55298 ];

	USFXGameEffect_PassiveHeavyAmmoBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveHeavyAmmoBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveHeavyAmmoBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55295 ];

	USFXGameEffect_PassiveHeavyAmmoBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveHeavyAmmoBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PassiveHeavyAmmoBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55290 ];

	USFXGameEffect_PassiveHeavyAmmoBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PassiveHeavyAmmoBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PassiveHeavyAmmoBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55288 ];

	USFXGameEffect_PassiveHeavyAmmoBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_PassiveShieldBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveShieldBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55316 ];

	USFXGameEffect_PassiveShieldBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveShieldBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveShieldBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55312 ];

	USFXGameEffect_PassiveShieldBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveShieldBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PassiveShieldBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55307 ];

	USFXGameEffect_PassiveShieldBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PassiveShieldBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PassiveShieldBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55305 ];

	USFXGameEffect_PassiveShieldBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_PassiveMaxAmmoBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveMaxAmmoBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55335 ];

	USFXGameEffect_PassiveMaxAmmoBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveMaxAmmoBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveMaxAmmoBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55332 ];

	USFXGameEffect_PassiveMaxAmmoBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveMaxAmmoBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PassiveMaxAmmoBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55327 ];

	USFXGameEffect_PassiveMaxAmmoBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PassiveMaxAmmoBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PassiveMaxAmmoBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55325 ];

	USFXGameEffect_PassiveMaxAmmoBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_PassiveStormSpeedBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveStormSpeedBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55388 ];

	USFXGameEffect_PassiveStormSpeedBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveStormSpeedBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveStormSpeedBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55382 ];

	USFXGameEffect_PassiveStormSpeedBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveStormSpeedBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PassiveStormSpeedBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55377 ];

	USFXGameEffect_PassiveStormSpeedBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PassiveStormSpeedBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PassiveStormSpeedBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55375 ];

	USFXGameEffect_PassiveStormSpeedBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_GiveShield.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_GiveShield::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55429 ];

	USFXGameEffect_GiveShield_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_GiveShield.CreateShield
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_GiveShield::CreateShield ( )
{
	static UFunction* pFnCreateShield = NULL;

	if ( ! pFnCreateShield )
		pFnCreateShield = (UFunction*) UObject::GObjObjects()->Data[ 55426 ];

	USFXGameEffect_GiveShield_execCreateShield_Parms CreateShield_Parms;

	this->ProcessEvent ( pFnCreateShield, &CreateShield_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_GiveShield.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_GiveShield::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55422 ];

	USFXGameEffect_GiveShield_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_GiveShield.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_GiveShield::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55420 ];

	USFXGameEffect_GiveShield_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_HardenedShields.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_HardenedShields::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55438 ];

	USFXGameEffect_HardenedShields_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_HardenedShields.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_HardenedShields::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55435 ];

	USFXGameEffect_HardenedShields_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_HealShieldOverTime.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_HealShieldOverTime::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55451 ];

	USFXGameEffect_HealShieldOverTime_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_HealthBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_HealthBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55469 ];

	USFXGameEffect_HealthBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_HealthBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_HealthBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55466 ];

	USFXGameEffect_HealthBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_HealthBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_HealthBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55461 ];

	USFXGameEffect_HealthBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_HealthBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_HealthBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55459 ];

	USFXGameEffect_HealthBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_HeavyFireDamage.GetDamageType
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* USFXGameEffect_HeavyFireDamage::GetDamageType ( )
{
	static UFunction* pFnGetDamageType = NULL;

	if ( ! pFnGetDamageType )
		pFnGetDamageType = (UFunction*) UObject::GObjObjects()->Data[ 55476 ];

	USFXGameEffect_HeavyFireDamage_execGetDamageType_Parms GetDamageType_Parms;

	this->ProcessEvent ( pFnGetDamageType, &GetDamageType_Parms, NULL );

	return GetDamageType_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_IgnorePlayerSquad.IsStillIgnoring
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )

bool USFXGameEffect_IgnorePlayerSquad::IsStillIgnoring ( class ABioPawn* oPawn )
{
	static UFunction* pFnIsStillIgnoring = NULL;

	if ( ! pFnIsStillIgnoring )
		pFnIsStillIgnoring = (UFunction*) UObject::GObjObjects()->Data[ 55488 ];

	USFXGameEffect_IgnorePlayerSquad_execIsStillIgnoring_Parms IsStillIgnoring_Parms;
	IsStillIgnoring_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnIsStillIgnoring, &IsStillIgnoring_Parms, NULL );

	return IsStillIgnoring_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_IgnorePlayerSquad.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_IgnorePlayerSquad::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55484 ];

	USFXGameEffect_IgnorePlayerSquad_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_IgnorePlayerSquad.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_IgnorePlayerSquad::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55480 ];

	USFXGameEffect_IgnorePlayerSquad_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveMovementSpeedBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveMovementSpeedBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55526 ];

	USFXGameEffect_PassiveMovementSpeedBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveMovementSpeedBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PassiveMovementSpeedBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55513 ];

	USFXGameEffect_PassiveMovementSpeedBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PassiveMovementSpeedBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PassiveMovementSpeedBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55508 ];

	USFXGameEffect_PassiveMovementSpeedBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PassiveMovementSpeedBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PassiveMovementSpeedBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55506 ];

	USFXGameEffect_PassiveMovementSpeedBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_PowerArmor.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PowerArmor::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55573 ];

	USFXGameEffect_PowerArmor_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PowerArmor.AreaExplosion
// [0x00820002] 
// Parameters infos:

void USFXGameEffect_PowerArmor::AreaExplosion ( )
{
	static UFunction* pFnAreaExplosion = NULL;

	if ( ! pFnAreaExplosion )
		pFnAreaExplosion = (UFunction*) UObject::GObjObjects()->Data[ 55567 ];

	USFXGameEffect_PowerArmor_execAreaExplosion_Parms AreaExplosion_Parms;

	this->ProcessEvent ( pFnAreaExplosion, &AreaExplosion_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PowerArmor.OnShieldDestroyed
// [0x00020002] 
// Parameters infos:
// unsigned long                  PlayDeathCrust                 ( CPF_Parm )

void USFXGameEffect_PowerArmor::OnShieldDestroyed ( unsigned long PlayDeathCrust )
{
	static UFunction* pFnOnShieldDestroyed = NULL;

	if ( ! pFnOnShieldDestroyed )
		pFnOnShieldDestroyed = (UFunction*) UObject::GObjObjects()->Data[ 55565 ];

	USFXGameEffect_PowerArmor_execOnShieldDestroyed_Parms OnShieldDestroyed_Parms;
	OnShieldDestroyed_Parms.PlayDeathCrust = PlayDeathCrust;

	this->ProcessEvent ( pFnOnShieldDestroyed, &OnShieldDestroyed_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PowerArmor.TurnVFXOff
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PowerArmor::TurnVFXOff ( )
{
	static UFunction* pFnTurnVFXOff = NULL;

	if ( ! pFnTurnVFXOff )
		pFnTurnVFXOff = (UFunction*) UObject::GObjObjects()->Data[ 55564 ];

	USFXGameEffect_PowerArmor_execTurnVFXOff_Parms TurnVFXOff_Parms;

	this->ProcessEvent ( pFnTurnVFXOff, &TurnVFXOff_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PowerArmor.TurnVFXOn
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PowerArmor::TurnVFXOn ( )
{
	static UFunction* pFnTurnVFXOn = NULL;

	if ( ! pFnTurnVFXOn )
		pFnTurnVFXOn = (UFunction*) UObject::GObjObjects()->Data[ 55563 ];

	USFXGameEffect_PowerArmor_execTurnVFXOn_Parms TurnVFXOn_Parms;

	this->ProcessEvent ( pFnTurnVFXOn, &TurnVFXOn_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PowerArmor.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_PowerArmor::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55559 ];

	USFXGameEffect_PowerArmor_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PowerArmor.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PowerArmor::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55557 ];

	USFXGameEffect_PowerArmor_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PowerCooldownModifier.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PowerCooldownModifier::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55595 ];

	USFXGameEffect_PowerCooldownModifier_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PowerCooldownModifier.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PowerCooldownModifier::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55592 ];

	USFXGameEffect_PowerCooldownModifier_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PowerCooldownModifier.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PowerCooldownModifier::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55587 ];

	USFXGameEffect_PowerCooldownModifier_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PowerCooldownModifier.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PowerCooldownModifier::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55585 ];

	USFXGameEffect_PowerCooldownModifier_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_PowerDurationBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PowerDurationBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55611 ];

	USFXGameEffect_PowerDurationBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PowerDurationBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_PowerDurationBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55608 ];

	USFXGameEffect_PowerDurationBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_PowerDurationBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_PowerDurationBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55603 ];

	USFXGameEffect_PowerDurationBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_PowerDurationBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_PowerDurationBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55601 ];

	USFXGameEffect_PowerDurationBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_ShieldBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_ShieldBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55678 ];

	USFXGameEffect_ShieldBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_ShieldBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_ShieldBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55674 ];

	USFXGameEffect_ShieldBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_ShieldBonus.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_ShieldBonus::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55669 ];

	USFXGameEffect_ShieldBonus_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_ShieldBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_ShieldBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55667 ];

	USFXGameEffect_ShieldBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_ShieldBoost.IsShieldBoosted
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ABioPawn*                oPawn                          ( CPF_Parm )

bool USFXGameEffect_ShieldBoost::IsShieldBoosted ( class ABioPawn* oPawn )
{
	static UFunction* pFnIsShieldBoosted = NULL;

	if ( ! pFnIsShieldBoosted )
		pFnIsShieldBoosted = (UFunction*) UObject::GObjObjects()->Data[ 55689 ];

	USFXGameEffect_ShieldBoost_execIsShieldBoosted_Parms IsShieldBoosted_Parms;
	IsShieldBoosted_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnIsShieldBoosted, &IsShieldBoosted_Parms, NULL );

	return IsShieldBoosted_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_ShieldBoost.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_ShieldBoost::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55686 ];

	USFXGameEffect_ShieldBoost_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_ShieldBoost.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_ShieldBoost::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55683 ];

	USFXGameEffect_ShieldBoost_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_ShieldDamageReduction.ComputeTotalEffectValue
// [0x00022002] 
// Parameters infos:
// float                          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          baseValue                      ( CPF_Parm )
// float                          StackingValue                  ( CPF_Parm )
// float                          NonStackingValue               ( CPF_Parm )

float USFXGameEffect_ShieldDamageReduction::ComputeTotalEffectValue ( float baseValue, float StackingValue, float NonStackingValue )
{
	static UFunction* pFnComputeTotalEffectValue = NULL;

	if ( ! pFnComputeTotalEffectValue )
		pFnComputeTotalEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55698 ];

	USFXGameEffect_ShieldDamageReduction_execComputeTotalEffectValue_Parms ComputeTotalEffectValue_Parms;
	ComputeTotalEffectValue_Parms.baseValue = baseValue;
	ComputeTotalEffectValue_Parms.StackingValue = StackingValue;
	ComputeTotalEffectValue_Parms.NonStackingValue = NonStackingValue;

	this->ProcessEvent ( pFnComputeTotalEffectValue, &ComputeTotalEffectValue_Parms, NULL );

	return ComputeTotalEffectValue_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_ShieldDamageReduction.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_ShieldDamageReduction::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55696 ];

	USFXGameEffect_ShieldDamageReduction_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_SniperTimeDilation.SlowTime
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_SniperTimeDilation::SlowTime ( )
{
	static UFunction* pFnSlowTime = NULL;

	if ( ! pFnSlowTime )
		pFnSlowTime = (UFunction*) UObject::GObjObjects()->Data[ 55751 ];

	USFXGameEffect_SniperTimeDilation_execSlowTime_Parms SlowTime_Parms;

	this->ProcessEvent ( pFnSlowTime, &SlowTime_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_SniperTimeDilation.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXGameEffect_SniperTimeDilation::OnUpdate ( float TimeDelta )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55748 ];

	USFXGameEffect_SniperTimeDilation_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_SniperTimeDilation.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_SniperTimeDilation::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55747 ];

	USFXGameEffect_SniperTimeDilation_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_StopHealthRegen.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_StopHealthRegen::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55761 ];

	USFXGameEffect_StopHealthRegen_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_StopHealthRegen.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_StopHealthRegen::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55760 ];

	USFXGameEffect_StopHealthRegen_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_StopShieldRegen.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          DeltaSeconds                   ( CPF_Parm )

void USFXGameEffect_StopShieldRegen::OnUpdate ( float DeltaSeconds )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55769 ];

	USFXGameEffect_StopShieldRegen_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.DeltaSeconds = DeltaSeconds;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_StopShieldRegen.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_StopShieldRegen::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55768 ];

	USFXGameEffect_StopShieldRegen_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_StormTimeDilation.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_StormTimeDilation::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55786 ];

	USFXGameEffect_StormTimeDilation_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_StormTimeDilation.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_StormTimeDilation::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55785 ];

	USFXGameEffect_StormTimeDilation_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_StormTimeDilation.SlowTime
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_StormTimeDilation::SlowTime ( )
{
	static UFunction* pFnSlowTime = NULL;

	if ( ! pFnSlowTime )
		pFnSlowTime = (UFunction*) UObject::GObjObjects()->Data[ 55784 ];

	USFXGameEffect_StormTimeDilation_execSlowTime_Parms SlowTime_Parms;

	this->ProcessEvent ( pFnSlowTime, &SlowTime_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_StormTimeDilation.OnUpdate
// [0x00020002] 
// Parameters infos:
// float                          TimeDelta                      ( CPF_Parm )

void USFXGameEffect_StormTimeDilation::OnUpdate ( float TimeDelta )
{
	static UFunction* pFnOnUpdate = NULL;

	if ( ! pFnOnUpdate )
		pFnOnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 55780 ];

	USFXGameEffect_StormTimeDilation_execOnUpdate_Parms OnUpdate_Parms;
	OnUpdate_Parms.TimeDelta = TimeDelta;

	this->ProcessEvent ( pFnOnUpdate, &OnUpdate_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_WarpDamageOverTime.GetDamageType
// [0x00020002] 
// Parameters infos:
// class UClass*                  ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class UClass* USFXGameEffect_WarpDamageOverTime::GetDamageType ( )
{
	static UFunction* pFnGetDamageType = NULL;

	if ( ! pFnGetDamageType )
		pFnGetDamageType = (UFunction*) UObject::GObjObjects()->Data[ 55799 ];

	USFXGameEffect_WarpDamageOverTime_execGetDamageType_Parms GetDamageType_Parms;

	this->ProcessEvent ( pFnGetDamageType, &GetDamageType_Parms, NULL );

	return GetDamageType_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_WeaponRateOfFireBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponRateOfFireBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55808 ];

	USFXGameEffect_WeaponRateOfFireBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_WeaponRateOfFireBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponRateOfFireBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55805 ];

	USFXGameEffect_WeaponRateOfFireBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_WeaponRecoilBonus.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponRecoilBonus::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55819 ];

	USFXGameEffect_WeaponRecoilBonus_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_WeaponRecoilBonus.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponRecoilBonus::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55815 ];

	USFXGameEffect_WeaponRecoilBonus_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_WeaponRecoilBonus.ComputeEffectValue
// [0x00420002] 
// Parameters infos:
// float                          Value                          ( CPF_Parm | CPF_OutParm )

void USFXGameEffect_WeaponRecoilBonus::ComputeEffectValue ( float* Value )
{
	static UFunction* pFnComputeEffectValue = NULL;

	if ( ! pFnComputeEffectValue )
		pFnComputeEffectValue = (UFunction*) UObject::GObjObjects()->Data[ 55813 ];

	USFXGameEffect_WeaponRecoilBonus_execComputeEffectValue_Parms ComputeEffectValue_Parms;

	this->ProcessEvent ( pFnComputeEffectValue, &ComputeEffectValue_Parms, NULL );

	if ( Value )
		*Value = ComputeEffectValue_Parms.Value;
};

// Function SFXGame.SFXGameEffect_WeaponVFXChange.UseLoopingMuzzleVFX
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class ASFXWeapon*              Weapon                         ( CPF_Parm )

bool USFXGameEffect_WeaponVFXChange::UseLoopingMuzzleVFX ( class ASFXWeapon* Weapon )
{
	static UFunction* pFnUseLoopingMuzzleVFX = NULL;

	if ( ! pFnUseLoopingMuzzleVFX )
		pFnUseLoopingMuzzleVFX = (UFunction*) UObject::GObjObjects()->Data[ 55834 ];

	USFXGameEffect_WeaponVFXChange_execUseLoopingMuzzleVFX_Parms UseLoopingMuzzleVFX_Parms;
	UseLoopingMuzzleVFX_Parms.Weapon = Weapon;

	this->ProcessEvent ( pFnUseLoopingMuzzleVFX, &UseLoopingMuzzleVFX_Parms, NULL );

	return UseLoopingMuzzleVFX_Parms.ReturnValue;
};

// Function SFXGame.SFXGameEffect_WeaponVFXChange.OnRemoved
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponVFXChange::OnRemoved ( )
{
	static UFunction* pFnOnRemoved = NULL;

	if ( ! pFnOnRemoved )
		pFnOnRemoved = (UFunction*) UObject::GObjObjects()->Data[ 55833 ];

	USFXGameEffect_WeaponVFXChange_execOnRemoved_Parms OnRemoved_Parms;

	this->ProcessEvent ( pFnOnRemoved, &OnRemoved_Parms, NULL );
};

// Function SFXGame.SFXGameEffect_WeaponVFXChange.OnApplied
// [0x00020002] 
// Parameters infos:

void USFXGameEffect_WeaponVFXChange::OnApplied ( )
{
	static UFunction* pFnOnApplied = NULL;

	if ( ! pFnOnApplied )
		pFnOnApplied = (UFunction*) UObject::GObjObjects()->Data[ 55832 ];

	USFXGameEffect_WeaponVFXChange_execOnApplied_Parms OnApplied_Parms;

	this->ProcessEvent ( pFnOnApplied, &OnApplied_Parms, NULL );
};

// Function SFXGame.SFXGameModeCheatMenu.IPEDownAction
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCheatMenu::IPEDownAction ( )
{
	static UFunction* pFnIPEDownAction = NULL;

	if ( ! pFnIPEDownAction )
		pFnIPEDownAction = (UFunction*) UObject::GObjObjects()->Data[ 55973 ];

	USFXGameModeCheatMenu_execIPEDownAction_Parms IPEDownAction_Parms;

	this->ProcessEvent ( pFnIPEDownAction, &IPEDownAction_Parms, NULL );
};

// Function SFXGame.SFXGameModeCheatMenu.IPEUpAction
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCheatMenu::IPEUpAction ( )
{
	static UFunction* pFnIPEUpAction = NULL;

	if ( ! pFnIPEUpAction )
		pFnIPEUpAction = (UFunction*) UObject::GObjObjects()->Data[ 55971 ];

	USFXGameModeCheatMenu_execIPEUpAction_Parms IPEUpAction_Parms;

	this->ProcessEvent ( pFnIPEUpAction, &IPEUpAction_Parms, NULL );
};

// Function SFXGame.SFXGameModeCheatMenu.IPELeftTrigger
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCheatMenu::IPELeftTrigger ( )
{
	static UFunction* pFnIPELeftTrigger = NULL;

	if ( ! pFnIPELeftTrigger )
		pFnIPELeftTrigger = (UFunction*) UObject::GObjObjects()->Data[ 55969 ];

	USFXGameModeCheatMenu_execIPELeftTrigger_Parms IPELeftTrigger_Parms;

	this->ProcessEvent ( pFnIPELeftTrigger, &IPELeftTrigger_Parms, NULL );
};

// Function SFXGame.SFXGameModeCheatMenu.IPERightTrigger
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCheatMenu::IPERightTrigger ( )
{
	static UFunction* pFnIPERightTrigger = NULL;

	if ( ! pFnIPERightTrigger )
		pFnIPERightTrigger = (UFunction*) UObject::GObjObjects()->Data[ 55967 ];

	USFXGameModeCheatMenu_execIPERightTrigger_Parms IPERightTrigger_Parms;

	this->ProcessEvent ( pFnIPERightTrigger, &IPERightTrigger_Parms, NULL );
};

// Function SFXGame.SFXGameModeCheatMenu.IPELeftShoulder
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCheatMenu::IPELeftShoulder ( )
{
	static UFunction* pFnIPELeftShoulder = NULL;

	if ( ! pFnIPELeftShoulder )
		pFnIPELeftShoulder = (UFunction*) UObject::GObjObjects()->Data[ 55965 ];

	USFXGameModeCheatMenu_execIPELeftShoulder_Parms IPELeftShoulder_Parms;

	this->ProcessEvent ( pFnIPELeftShoulder, &IPELeftShoulder_Parms, NULL );
};

// Function SFXGame.SFXGameModeCheatMenu.IPERightShoulder
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCheatMenu::IPERightShoulder ( )
{
	static UFunction* pFnIPERightShoulder = NULL;

	if ( ! pFnIPERightShoulder )
		pFnIPERightShoulder = (UFunction*) UObject::GObjObjects()->Data[ 55963 ];

	USFXGameModeCheatMenu_execIPERightShoulder_Parms IPERightShoulder_Parms;

	this->ProcessEvent ( pFnIPERightShoulder, &IPERightShoulder_Parms, NULL );
};

// Function SFXGame.SFXGameModeCheatMenu.EndIPE
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCheatMenu::EndIPE ( )
{
	static UFunction* pFnEndIPE = NULL;

	if ( ! pFnEndIPE )
		pFnEndIPE = (UFunction*) UObject::GObjObjects()->Data[ 55961 ];

	USFXGameModeCheatMenu_execEndIPE_Parms EndIPE_Parms;

	this->ProcessEvent ( pFnEndIPE, &EndIPE_Parms, NULL );
};

// Function SFXGame.SFXGameModeCheatMenu.IPEBack
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCheatMenu::IPEBack ( )
{
	static UFunction* pFnIPEBack = NULL;

	if ( ! pFnIPEBack )
		pFnIPEBack = (UFunction*) UObject::GObjObjects()->Data[ 55959 ];

	USFXGameModeCheatMenu_execIPEBack_Parms IPEBack_Parms;

	this->ProcessEvent ( pFnIPEBack, &IPEBack_Parms, NULL );
};

// Function SFXGame.SFXGameModeCheatMenu.IPEForward
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCheatMenu::IPEForward ( )
{
	static UFunction* pFnIPEForward = NULL;

	if ( ! pFnIPEForward )
		pFnIPEForward = (UFunction*) UObject::GObjObjects()->Data[ 55957 ];

	USFXGameModeCheatMenu_execIPEForward_Parms IPEForward_Parms;

	this->ProcessEvent ( pFnIPEForward, &IPEForward_Parms, NULL );
};

// Function SFXGame.SFXGameModeCinematic.SkipCinematic
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCinematic::SkipCinematic ( )
{
	static UFunction* pFnSkipCinematic = NULL;

	if ( ! pFnSkipCinematic )
		pFnSkipCinematic = (UFunction*) UObject::GObjObjects()->Data[ 55980 ];

	USFXGameModeCinematic_execSkipCinematic_Parms SkipCinematic_Parms;

	this->ProcessEvent ( pFnSkipCinematic, &SkipCinematic_Parms, NULL );
};

// Function SFXGame.SFXGameModeCinematic.Activated
// [0x00020002] 
// Parameters infos:

void USFXGameModeCinematic::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55977 ];

	USFXGameModeCinematic_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXGameModeCommand.ShowMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCommand::ShowMenu ( )
{
	static UFunction* pFnShowMenu = NULL;

	if ( ! pFnShowMenu )
		pFnShowMenu = (UFunction*) UObject::GObjObjects()->Data[ 55990 ];

	USFXGameModeCommand_execShowMenu_Parms ShowMenu_Parms;

	this->ProcessEvent ( pFnShowMenu, &ShowMenu_Parms, NULL );
};

// Function SFXGame.SFXGameModeCommand.ExitCommandMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCommand::ExitCommandMenu ( )
{
	static UFunction* pFnExitCommandMenu = NULL;

	if ( ! pFnExitCommandMenu )
		pFnExitCommandMenu = (UFunction*) UObject::GObjObjects()->Data[ 55989 ];

	USFXGameModeCommand_execExitCommandMenu_Parms ExitCommandMenu_Parms;

	this->ProcessEvent ( pFnExitCommandMenu, &ExitCommandMenu_Parms, NULL );
};

// Function SFXGame.SFXGameModeCommand.DisableCamera
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCommand::DisableCamera ( )
{
	static UFunction* pFnDisableCamera = NULL;

	if ( ! pFnDisableCamera )
		pFnDisableCamera = (UFunction*) UObject::GObjObjects()->Data[ 55988 ];

	USFXGameModeCommand_execDisableCamera_Parms DisableCamera_Parms;

	this->ProcessEvent ( pFnDisableCamera, &DisableCamera_Parms, NULL );
};

// Function SFXGame.SFXGameModeCommand.EnableCamera
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeCommand::EnableCamera ( )
{
	static UFunction* pFnEnableCamera = NULL;

	if ( ! pFnEnableCamera )
		pFnEnableCamera = (UFunction*) UObject::GObjObjects()->Data[ 55987 ];

	USFXGameModeCommand_execEnableCamera_Parms EnableCamera_Parms;

	this->ProcessEvent ( pFnEnableCamera, &EnableCamera_Parms, NULL );
};

// Function SFXGame.SFXGameModeCommand.Deactivated
// [0x00020002] 
// Parameters infos:

void USFXGameModeCommand::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 55986 ];

	USFXGameModeCommand_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXGameModeCommand.Activated
// [0x00020002] 
// Parameters infos:

void USFXGameModeCommand::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 55985 ];

	USFXGameModeCommand_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXGameModeConversation.HighlightDefaultResponse
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeConversation::HighlightDefaultResponse ( )
{
	static UFunction* pFnHighlightDefaultResponse = NULL;

	if ( ! pFnHighlightDefaultResponse )
		pFnHighlightDefaultResponse = (UFunction*) UObject::GObjObjects()->Data[ 56019 ];

	USFXGameModeConversation_execHighlightDefaultResponse_Parms HighlightDefaultResponse_Parms;

	this->ProcessEvent ( pFnHighlightDefaultResponse, &HighlightDefaultResponse_Parms, NULL );
};

// Function SFXGame.SFXGameModeConversation.SkipConversation
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeConversation::SkipConversation ( )
{
	static UFunction* pFnSkipConversation = NULL;

	if ( ! pFnSkipConversation )
		pFnSkipConversation = (UFunction*) UObject::GObjObjects()->Data[ 56016 ];

	USFXGameModeConversation_execSkipConversation_Parms SkipConversation_Parms;

	this->ProcessEvent ( pFnSkipConversation, &SkipConversation_Parms, NULL );
};

// Function SFXGame.SFXGameModeConversation.SelectResponse
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeConversation::SelectResponse ( )
{
	static UFunction* pFnSelectResponse = NULL;

	if ( ! pFnSelectResponse )
		pFnSelectResponse = (UFunction*) UObject::GObjObjects()->Data[ 56013 ];

	USFXGameModeConversation_execSelectResponse_Parms SelectResponse_Parms;

	this->ProcessEvent ( pFnSelectResponse, &SelectResponse_Parms, NULL );
};

// Function SFXGame.SFXGameModeConversation.InterruptParagon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeConversation::InterruptParagon ( )
{
	static UFunction* pFnInterruptParagon = NULL;

	if ( ! pFnInterruptParagon )
		pFnInterruptParagon = (UFunction*) UObject::GObjObjects()->Data[ 56010 ];

	USFXGameModeConversation_execInterruptParagon_Parms InterruptParagon_Parms;

	this->ProcessEvent ( pFnInterruptParagon, &InterruptParagon_Parms, NULL );
};

// Function SFXGame.SFXGameModeConversation.InterruptRenegade
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeConversation::InterruptRenegade ( )
{
	static UFunction* pFnInterruptRenegade = NULL;

	if ( ! pFnInterruptRenegade )
		pFnInterruptRenegade = (UFunction*) UObject::GObjObjects()->Data[ 56007 ];

	USFXGameModeConversation_execInterruptRenegade_Parms InterruptRenegade_Parms;

	this->ProcessEvent ( pFnInterruptRenegade, &InterruptRenegade_Parms, NULL );
};

// Function SFXGame.SFXGameModeConversation.Deactivated
// [0x00020002] 
// Parameters infos:

void USFXGameModeConversation::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 56006 ];

	USFXGameModeConversation_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXGameModeConversation.Activated
// [0x00020002] 
// Parameters infos:

void USFXGameModeConversation::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 56003 ];

	USFXGameModeConversation_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXGameModeConversation.HACK_GetCameraMode
// [0x00020002] 
// Parameters infos:
// class USFXCameraMode*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

class USFXCameraMode* USFXGameModeConversation::HACK_GetCameraMode ( )
{
	static UFunction* pFnHACK_GetCameraMode = NULL;

	if ( ! pFnHACK_GetCameraMode )
		pFnHACK_GetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 56001 ];

	USFXGameModeConversation_execHACK_GetCameraMode_Parms HACK_GetCameraMode_Parms;

	this->ProcessEvent ( pFnHACK_GetCameraMode, &HACK_GetCameraMode_Parms, NULL );

	return HACK_GetCameraMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeConversation.GetCameraMode
// [0x00420002] 
// Parameters infos:
// class USFXCameraMode*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXCameraMode*          OldCameraMode                  ( CPF_Parm )
// int                            PreserveTarget                 ( CPF_Parm | CPF_OutParm )
// float                          TransitionTime                 ( CPF_Parm | CPF_OutParm )
// class USFXCameraMode_Interpolate* Transition                     ( CPF_Parm | CPF_OutParm )

class USFXCameraMode* USFXGameModeConversation::GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition )
{
	static UFunction* pFnGetCameraMode = NULL;

	if ( ! pFnGetCameraMode )
		pFnGetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 55995 ];

	USFXGameModeConversation_execGetCameraMode_Parms GetCameraMode_Parms;
	GetCameraMode_Parms.OldCameraMode = OldCameraMode;

	this->ProcessEvent ( pFnGetCameraMode, &GetCameraMode_Parms, NULL );

	if ( PreserveTarget )
		*PreserveTarget = GetCameraMode_Parms.PreserveTarget;

	if ( TransitionTime )
		*TransitionTime = GetCameraMode_Parms.TransitionTime;

	if ( Transition )
		*Transition = GetCameraMode_Parms.Transition;

	return GetCameraMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeGUI.HideAreaMap
// [0x00020202] ( FUNC_Exec )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXGameModeGUI::HideAreaMap ( )
{
	static UFunction* pFnHideAreaMap = NULL;

	if ( ! pFnHideAreaMap )
		pFnHideAreaMap = (UFunction*) UObject::GObjObjects()->Data[ 56193 ];

	USFXGameModeGUI_execHideAreaMap_Parms HideAreaMap_Parms;

	this->ProcessEvent ( pFnHideAreaMap, &HideAreaMap_Parms, NULL );

	return HideAreaMap_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeGUI.DecryptSelect
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeGUI::DecryptSelect ( )
{
	static UFunction* pFnDecryptSelect = NULL;

	if ( ! pFnDecryptSelect )
		pFnDecryptSelect = (UFunction*) UObject::GObjObjects()->Data[ 56190 ];

	USFXGameModeGUI_execDecryptSelect_Parms DecryptSelect_Parms;

	this->ProcessEvent ( pFnDecryptSelect, &DecryptSelect_Parms, NULL );
};

// Function SFXGame.SFXGameModeGUI.DecryptRight
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeGUI::DecryptRight ( )
{
	static UFunction* pFnDecryptRight = NULL;

	if ( ! pFnDecryptRight )
		pFnDecryptRight = (UFunction*) UObject::GObjObjects()->Data[ 56187 ];

	USFXGameModeGUI_execDecryptRight_Parms DecryptRight_Parms;

	this->ProcessEvent ( pFnDecryptRight, &DecryptRight_Parms, NULL );
};

// Function SFXGame.SFXGameModeGUI.DecryptLeft
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeGUI::DecryptLeft ( )
{
	static UFunction* pFnDecryptLeft = NULL;

	if ( ! pFnDecryptLeft )
		pFnDecryptLeft = (UFunction*) UObject::GObjObjects()->Data[ 56184 ];

	USFXGameModeGUI_execDecryptLeft_Parms DecryptLeft_Parms;

	this->ProcessEvent ( pFnDecryptLeft, &DecryptLeft_Parms, NULL );
};

// Function SFXGame.SFXGameModeGUI.DecryptDown
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeGUI::DecryptDown ( )
{
	static UFunction* pFnDecryptDown = NULL;

	if ( ! pFnDecryptDown )
		pFnDecryptDown = (UFunction*) UObject::GObjObjects()->Data[ 56181 ];

	USFXGameModeGUI_execDecryptDown_Parms DecryptDown_Parms;

	this->ProcessEvent ( pFnDecryptDown, &DecryptDown_Parms, NULL );
};

// Function SFXGame.SFXGameModeGUI.DecryptUp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeGUI::DecryptUp ( )
{
	static UFunction* pFnDecryptUp = NULL;

	if ( ! pFnDecryptUp )
		pFnDecryptUp = (UFunction*) UObject::GObjObjects()->Data[ 56178 ];

	USFXGameModeGUI_execDecryptUp_Parms DecryptUp_Parms;

	this->ProcessEvent ( pFnDecryptUp, &DecryptUp_Parms, NULL );
};

// Function SFXGame.SFXGameModeGUI.PrevCerberusItem
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeGUI::PrevCerberusItem ( )
{
	static UFunction* pFnPrevCerberusItem = NULL;

	if ( ! pFnPrevCerberusItem )
		pFnPrevCerberusItem = (UFunction*) UObject::GObjObjects()->Data[ 56175 ];

	USFXGameModeGUI_execPrevCerberusItem_Parms PrevCerberusItem_Parms;

	this->ProcessEvent ( pFnPrevCerberusItem, &PrevCerberusItem_Parms, NULL );
};

// Function SFXGame.SFXGameModeGUI.NextCerberusItem
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeGUI::NextCerberusItem ( )
{
	static UFunction* pFnNextCerberusItem = NULL;

	if ( ! pFnNextCerberusItem )
		pFnNextCerberusItem = (UFunction*) UObject::GObjObjects()->Data[ 56172 ];

	USFXGameModeGUI_execNextCerberusItem_Parms NextCerberusItem_Parms;

	this->ProcessEvent ( pFnNextCerberusItem, &NextCerberusItem_Parms, NULL );
};

// Function SFXGame.SFXGameModeGUI.DeactivateSpecifier
// [0x00020002] 
// Parameters infos:
// struct FName                   ModeSpecifier                  ( CPF_Parm )

void USFXGameModeGUI::DeactivateSpecifier ( struct FName ModeSpecifier )
{
	static UFunction* pFnDeactivateSpecifier = NULL;

	if ( ! pFnDeactivateSpecifier )
		pFnDeactivateSpecifier = (UFunction*) UObject::GObjObjects()->Data[ 56170 ];

	USFXGameModeGUI_execDeactivateSpecifier_Parms DeactivateSpecifier_Parms;
	memcpy ( &DeactivateSpecifier_Parms.ModeSpecifier, &ModeSpecifier, 0x8 );

	this->ProcessEvent ( pFnDeactivateSpecifier, &DeactivateSpecifier_Parms, NULL );
};

// Function SFXGame.SFXGameModeGUI.ActivateSpecifier
// [0x00020002] 
// Parameters infos:
// struct FName                   ModeSpecifier                  ( CPF_Parm )

void USFXGameModeGUI::ActivateSpecifier ( struct FName ModeSpecifier )
{
	static UFunction* pFnActivateSpecifier = NULL;

	if ( ! pFnActivateSpecifier )
		pFnActivateSpecifier = (UFunction*) UObject::GObjObjects()->Data[ 56168 ];

	USFXGameModeGUI_execActivateSpecifier_Parms ActivateSpecifier_Parms;
	memcpy ( &ActivateSpecifier_Parms.ModeSpecifier, &ModeSpecifier, 0x8 );

	this->ProcessEvent ( pFnActivateSpecifier, &ActivateSpecifier_Parms, NULL );
};

// Function SFXGame.SFXGameModeGUI.Deactivated
// [0x00020002] 
// Parameters infos:

void USFXGameModeGUI::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 56167 ];

	USFXGameModeGUI_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXGameModeGUI.Activated
// [0x00020002] 
// Parameters infos:

void USFXGameModeGUI::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 56166 ];

	USFXGameModeGUI_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXGameModeGUI.GetCameraMode
// [0x00420002] 
// Parameters infos:
// class USFXCameraMode*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXCameraMode*          OldCameraMode                  ( CPF_Parm )
// int                            PreserveTarget                 ( CPF_Parm | CPF_OutParm )
// float                          TransitionTime                 ( CPF_Parm | CPF_OutParm )
// class USFXCameraMode_Interpolate* Transition                     ( CPF_Parm | CPF_OutParm )

class USFXCameraMode* USFXGameModeGUI::GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition )
{
	static UFunction* pFnGetCameraMode = NULL;

	if ( ! pFnGetCameraMode )
		pFnGetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 56160 ];

	USFXGameModeGUI_execGetCameraMode_Parms GetCameraMode_Parms;
	GetCameraMode_Parms.OldCameraMode = OldCameraMode;

	this->ProcessEvent ( pFnGetCameraMode, &GetCameraMode_Parms, NULL );

	if ( PreserveTarget )
		*PreserveTarget = GetCameraMode_Parms.PreserveTarget;

	if ( TransitionTime )
		*TransitionTime = GetCameraMode_Parms.TransitionTime;

	if ( Transition )
		*Transition = GetCameraMode_Parms.Transition;

	return GetCameraMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModePowerWheel.ShowMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModePowerWheel::ShowMenu ( )
{
	static UFunction* pFnShowMenu = NULL;

	if ( ! pFnShowMenu )
		pFnShowMenu = (UFunction*) UObject::GObjObjects()->Data[ 56581 ];

	USFXGameModePowerWheel_execShowMenu_Parms ShowMenu_Parms;

	this->ProcessEvent ( pFnShowMenu, &ShowMenu_Parms, NULL );
};

// Function SFXGame.SFXGameModePowerWheel.ExitPowerWheel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModePowerWheel::ExitPowerWheel ( )
{
	static UFunction* pFnExitPowerWheel = NULL;

	if ( ! pFnExitPowerWheel )
		pFnExitPowerWheel = (UFunction*) UObject::GObjObjects()->Data[ 56580 ];

	USFXGameModePowerWheel_execExitPowerWheel_Parms ExitPowerWheel_Parms;

	this->ProcessEvent ( pFnExitPowerWheel, &ExitPowerWheel_Parms, NULL );
};

// Function SFXGame.SFXGameModePowerWheel.EnableMovement
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGameModePowerWheel::EnableMovement ( )
{
	static UFunction* pFnEnableMovement = NULL;

	if ( ! pFnEnableMovement )
		pFnEnableMovement = (UFunction*) UObject::GObjObjects()->Data[ 56579 ];

	USFXGameModePowerWheel_execEnableMovement_Parms EnableMovement_Parms;

	this->ProcessEvent ( pFnEnableMovement, &EnableMovement_Parms, NULL );
};

// Function SFXGame.SFXGameModePowerWheel.Deactivated
// [0x00020002] 
// Parameters infos:

void USFXGameModePowerWheel::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 56577 ];

	USFXGameModePowerWheel_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXGameModePowerWheel.Activated
// [0x00020002] 
// Parameters infos:

void USFXGameModePowerWheel::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 56575 ];

	USFXGameModePowerWheel_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXGameModeWeaponWheel.ShowMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeWeaponWheel::ShowMenu ( )
{
	static UFunction* pFnShowMenu = NULL;

	if ( ! pFnShowMenu )
		pFnShowMenu = (UFunction*) UObject::GObjObjects()->Data[ 56601 ];

	USFXGameModeWeaponWheel_execShowMenu_Parms ShowMenu_Parms;

	this->ProcessEvent ( pFnShowMenu, &ShowMenu_Parms, NULL );
};

// Function SFXGame.SFXGameModeWeaponWheel.ExitWeaponWheel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeWeaponWheel::ExitWeaponWheel ( )
{
	static UFunction* pFnExitWeaponWheel = NULL;

	if ( ! pFnExitWeaponWheel )
		pFnExitWeaponWheel = (UFunction*) UObject::GObjObjects()->Data[ 56600 ];

	USFXGameModeWeaponWheel_execExitWeaponWheel_Parms ExitWeaponWheel_Parms;

	this->ProcessEvent ( pFnExitWeaponWheel, &ExitWeaponWheel_Parms, NULL );
};

// Function SFXGame.SFXGameModeWeaponWheel.EnableMovement
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void USFXGameModeWeaponWheel::EnableMovement ( )
{
	static UFunction* pFnEnableMovement = NULL;

	if ( ! pFnEnableMovement )
		pFnEnableMovement = (UFunction*) UObject::GObjObjects()->Data[ 56599 ];

	USFXGameModeWeaponWheel_execEnableMovement_Parms EnableMovement_Parms;

	this->ProcessEvent ( pFnEnableMovement, &EnableMovement_Parms, NULL );
};

// Function SFXGame.SFXGameModeWeaponWheel.Deactivated
// [0x00020002] 
// Parameters infos:

void USFXGameModeWeaponWheel::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 56597 ];

	USFXGameModeWeaponWheel_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXGameModeWeaponWheel.Activated
// [0x00020002] 
// Parameters infos:

void USFXGameModeWeaponWheel::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 56595 ];

	USFXGameModeWeaponWheel_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXGameModeVehicle.ShowMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeVehicle::ShowMenu ( )
{
	static UFunction* pFnShowMenu = NULL;

	if ( ! pFnShowMenu )
		pFnShowMenu = (UFunction*) UObject::GObjObjects()->Data[ 56591 ];

	USFXGameModeVehicle_execShowMenu_Parms ShowMenu_Parms;

	this->ProcessEvent ( pFnShowMenu, &ShowMenu_Parms, NULL );
};

// Function SFXGame.SFXGameModeVehicle.GetCameraMode
// [0x00420002] 
// Parameters infos:
// class USFXCameraMode*          ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class USFXCameraMode*          OldCameraMode                  ( CPF_Parm )
// int                            PreserveTarget                 ( CPF_Parm | CPF_OutParm )
// float                          TransitionTime                 ( CPF_Parm | CPF_OutParm )
// class USFXCameraMode_Interpolate* Transition                     ( CPF_Parm | CPF_OutParm )

class USFXCameraMode* USFXGameModeVehicle::GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition )
{
	static UFunction* pFnGetCameraMode = NULL;

	if ( ! pFnGetCameraMode )
		pFnGetCameraMode = (UFunction*) UObject::GObjObjects()->Data[ 56585 ];

	USFXGameModeVehicle_execGetCameraMode_Parms GetCameraMode_Parms;
	GetCameraMode_Parms.OldCameraMode = OldCameraMode;

	this->ProcessEvent ( pFnGetCameraMode, &GetCameraMode_Parms, NULL );

	if ( PreserveTarget )
		*PreserveTarget = GetCameraMode_Parms.PreserveTarget;

	if ( TransitionTime )
		*TransitionTime = GetCameraMode_Parms.TransitionTime;

	if ( Transition )
		*Transition = GetCameraMode_Parms.Transition;

	return GetCameraMode_Parms.ReturnValue;
};

// Function SFXGame.SFXGameModeVehicle.Initialize
// [0x00020002] 
// Parameters infos:

void USFXGameModeVehicle::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = (UFunction*) UObject::GObjObjects()->Data[ 56584 ];

	USFXGameModeVehicle_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function SFXGame.SFXGameModeMovie.SkipMovie
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void USFXGameModeMovie::SkipMovie ( )
{
	static UFunction* pFnSkipMovie = NULL;

	if ( ! pFnSkipMovie )
		pFnSkipMovie = (UFunction*) UObject::GObjObjects()->Data[ 56289 ];

	USFXGameModeMovie_execSkipMovie_Parms SkipMovie_Parms;

	this->ProcessEvent ( pFnSkipMovie, &SkipMovie_Parms, NULL );
};

// Function SFXGame.SFXGameModeMovie.Deactivated
// [0x00020002] 
// Parameters infos:

void USFXGameModeMovie::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 56288 ];

	USFXGameModeMovie_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXGameModeMovie.ActivateSpecifier
// [0x00020002] 
// Parameters infos:
// struct FName                   ModeSpecifier                  ( CPF_Parm )

void USFXGameModeMovie::ActivateSpecifier ( struct FName ModeSpecifier )
{
	static UFunction* pFnActivateSpecifier = NULL;

	if ( ! pFnActivateSpecifier )
		pFnActivateSpecifier = (UFunction*) UObject::GObjObjects()->Data[ 56286 ];

	USFXGameModeMovie_execActivateSpecifier_Parms ActivateSpecifier_Parms;
	memcpy ( &ActivateSpecifier_Parms.ModeSpecifier, &ModeSpecifier, 0x8 );

	this->ProcessEvent ( pFnActivateSpecifier, &ActivateSpecifier_Parms, NULL );
};

// Function SFXGame.SFXTracer_Bullet.ProcessTouch
// [0x00020100] 
// Parameters infos:
// class AActor*                  Other                          ( CPF_Parm )
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXTracer_Bullet::ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = (UFunction*) UObject::GObjObjects()->Data[ 62242 ];

	ASFXTracer_Bullet_execProcessTouch_Parms ProcessTouch_Parms;
	ProcessTouch_Parms.Other = Other;
	memcpy ( &ProcessTouch_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &ProcessTouch_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function SFXGame.SFXTracer.Tick
// [0x00820102] 
// Parameters infos:
// float                          DeltaTime                      ( CPF_Parm )

void ASFXTracer::Tick ( float DeltaTime )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = (UFunction*) UObject::GObjObjects()->Data[ 62237 ];

	ASFXTracer_execTick_Parms Tick_Parms;
	Tick_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function SFXGame.SFXTracer.ShutDown
// [0x00020102] 
// Parameters infos:

void ASFXTracer::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 62236 ];

	ASFXTracer_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function SFXGame.SFXTracer.ScaleDownFinishedNotify
// [0x00020102] 
// Parameters infos:

void ASFXTracer::ScaleDownFinishedNotify ( )
{
	static UFunction* pFnScaleDownFinishedNotify = NULL;

	if ( ! pFnScaleDownFinishedNotify )
		pFnScaleDownFinishedNotify = (UFunction*) UObject::GObjObjects()->Data[ 62235 ];

	ASFXTracer_execScaleDownFinishedNotify_Parms ScaleDownFinishedNotify_Parms;

	this->ProcessEvent ( pFnScaleDownFinishedNotify, &ScaleDownFinishedNotify_Parms, NULL );
};

// Function SFXGame.SFXTracer.ScaleDownStart
// [0x00020102] 
// Parameters infos:

void ASFXTracer::ScaleDownStart ( )
{
	static UFunction* pFnScaleDownStart = NULL;

	if ( ! pFnScaleDownStart )
		pFnScaleDownStart = (UFunction*) UObject::GObjObjects()->Data[ 62234 ];

	ASFXTracer_execScaleDownStart_Parms ScaleDownStart_Parms;

	this->ProcessEvent ( pFnScaleDownStart, &ScaleDownStart_Parms, NULL );
};

// Function SFXGame.SFXTracer.ScaleUpFinishedNotify
// [0x00020102] 
// Parameters infos:

void ASFXTracer::ScaleUpFinishedNotify ( )
{
	static UFunction* pFnScaleUpFinishedNotify = NULL;

	if ( ! pFnScaleUpFinishedNotify )
		pFnScaleUpFinishedNotify = (UFunction*) UObject::GObjObjects()->Data[ 62233 ];

	ASFXTracer_execScaleUpFinishedNotify_Parms ScaleUpFinishedNotify_Parms;

	this->ProcessEvent ( pFnScaleUpFinishedNotify, &ScaleUpFinishedNotify_Parms, NULL );
};

// Function SFXGame.SFXTracer.ScaleUpStart
// [0x00820102] 
// Parameters infos:

void ASFXTracer::ScaleUpStart ( )
{
	static UFunction* pFnScaleUpStart = NULL;

	if ( ! pFnScaleUpStart )
		pFnScaleUpStart = (UFunction*) UObject::GObjObjects()->Data[ 62227 ];

	ASFXTracer_execScaleUpStart_Parms ScaleUpStart_Parms;

	this->ProcessEvent ( pFnScaleUpStart, &ScaleUpStart_Parms, NULL );
};

// Function SFXGame.SFXTracer.InitTracer
// [0x00820002] 
// Parameters infos:
// struct FVector                 Start                          ( CPF_Parm )
// struct FVector                 End                            ( CPF_Parm )

void ASFXTracer::InitTracer ( struct FVector Start, struct FVector End )
{
	static UFunction* pFnInitTracer = NULL;

	if ( ! pFnInitTracer )
		pFnInitTracer = (UFunction*) UObject::GObjObjects()->Data[ 62222 ];

	ASFXTracer_execInitTracer_Parms InitTracer_Parms;
	memcpy ( &InitTracer_Parms.Start, &Start, 0xC );
	memcpy ( &InitTracer_Parms.End, &End, 0xC );

	this->ProcessEvent ( pFnInitTracer, &InitTracer_Parms, NULL );
};

// Function SFXGame.SFXMiningNode.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ASFXMiningNode::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 57586 ];

	ASFXMiningNode_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXNav_ActionStationWP.OnPawnReachedWayPoint
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oPawn                          ( CPF_Parm )

bool ASFXNav_ActionStationWP::OnPawnReachedWayPoint ( class APawn* oPawn )
{
	static UFunction* pFnOnPawnReachedWayPoint = NULL;

	if ( ! pFnOnPawnReachedWayPoint )
		pFnOnPawnReachedWayPoint = (UFunction*) UObject::GObjObjects()->Data[ 57733 ];

	ASFXNav_ActionStationWP_execOnPawnReachedWayPoint_Parms OnPawnReachedWayPoint_Parms;
	OnPawnReachedWayPoint_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnOnPawnReachedWayPoint, &OnPawnReachedWayPoint_Parms, NULL );

	return OnPawnReachedWayPoint_Parms.ReturnValue;
};

// Function SFXGame.SFXNav_PlayAnimWP.OnPawnReachedWayPoint
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class APawn*                   oPawn                          ( CPF_Parm )

bool ASFXNav_PlayAnimWP::OnPawnReachedWayPoint ( class APawn* oPawn )
{
	static UFunction* pFnOnPawnReachedWayPoint = NULL;

	if ( ! pFnOnPawnReachedWayPoint )
		pFnOnPawnReachedWayPoint = (UFunction*) UObject::GObjObjects()->Data[ 57756 ];

	ASFXNav_PlayAnimWP_execOnPawnReachedWayPoint_Parms OnPawnReachedWayPoint_Parms;
	OnPawnReachedWayPoint_Parms.oPawn = oPawn;

	this->ProcessEvent ( pFnOnPawnReachedWayPoint, &OnPawnReachedWayPoint_Parms, NULL );

	return OnPawnReachedWayPoint_Parms.ReturnValue;
};

// Function SFXGame.SFXProjectile_Repulsor.ShutDown
// [0x00020102] 
// Parameters infos:

void ASFXProjectile_Repulsor::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = (UFunction*) UObject::GObjObjects()->Data[ 59577 ];

	ASFXProjectile_Repulsor_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function SFXGame.SFXProjectile_Repulsor.Explode
// [0x00020102] 
// Parameters infos:
// struct FVector                 HitLocation                    ( CPF_Parm )
// struct FVector                 HitNormal                      ( CPF_Parm )

void ASFXProjectile_Repulsor::Explode ( struct FVector HitLocation, struct FVector HitNormal )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = (UFunction*) UObject::GObjObjects()->Data[ 59574 ];

	ASFXProjectile_Repulsor_execExplode_Parms Explode_Parms;
	memcpy ( &Explode_Parms.HitLocation, &HitLocation, 0xC );
	memcpy ( &Explode_Parms.HitNormal, &HitNormal, 0xC );

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_3DCeberusStateChange.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_3DCeberusStateChange::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 59722 ];

	USFXSeqAct_3DCeberusStateChange_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_AttemptDeviceDetection.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_AttemptDeviceDetection::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 59771 ];

	USFXSeqAct_AttemptDeviceDetection_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_AwardEndGameAchievements.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_AwardEndGameAchievements::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 59776 ];

	USFXSeqAct_AwardEndGameAchievements_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_AwardResource.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_AwardResource::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 59790 ];

	USFXSeqAct_AwardResource_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_CanAffordTreasure.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_CanAffordTreasure::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 59795 ];

	USFXSeqAct_CanAffordTreasure_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_CanSpendTallentPoints.CanSpendTallentPoints
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXSeqAct_CanSpendTallentPoints::CanSpendTallentPoints ( )
{
	static UFunction* pFnCanSpendTallentPoints = NULL;

	if ( ! pFnCanSpendTallentPoints )
		pFnCanSpendTallentPoints = (UFunction*) UObject::GObjObjects()->Data[ 59802 ];

	USFXSeqAct_CanSpendTallentPoints_execCanSpendTallentPoints_Parms CanSpendTallentPoints_Parms;

	this->ProcessEvent ( pFnCanSpendTallentPoints, &CanSpendTallentPoints_Parms, NULL );

	return CanSpendTallentPoints_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_CanSpendTallentPoints.Deactivated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_CanSpendTallentPoints::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 59803 ];

	USFXSeqAct_CanSpendTallentPoints_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_CanSpendTallentPoints.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_CanSpendTallentPoints::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 59801 ];

	USFXSeqAct_CanSpendTallentPoints_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_CheckResourceBudget.Activated
// [0x00820002] 
// Parameters infos:

void USFXSeqAct_CheckResourceBudget::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 59832 ];

	USFXSeqAct_CheckResourceBudget_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool USFXSeqAct_ChooseLoadoutBase::eventUpdate ( float DeltaTime )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 59997 ];

	USFXSeqAct_ChooseLoadoutBase_eventUpdate_Parms Update_Parms;
	Update_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );

	return Update_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.Activated
// [0x00820002] 
// Parameters infos:

void USFXSeqAct_ChooseLoadoutBase::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 59991 ];

	USFXSeqAct_ChooseLoadoutBase_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.Deactivated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_ChooseLoadoutBase::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 59988 ];

	USFXSeqAct_ChooseLoadoutBase_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.GetHenchmanLoadoutData
// [0x00820002] 
// Parameters infos:
// struct FLoadoutInfo            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   HenchClassName                 ( CPF_Parm )

struct FLoadoutInfo USFXSeqAct_ChooseLoadoutBase::GetHenchmanLoadoutData ( struct FName HenchClassName )
{
	static UFunction* pFnGetHenchmanLoadoutData = NULL;

	if ( ! pFnGetHenchmanLoadoutData )
		pFnGetHenchmanLoadoutData = (UFunction*) UObject::GObjObjects()->Data[ 59984 ];

	USFXSeqAct_ChooseLoadoutBase_execGetHenchmanLoadoutData_Parms GetHenchmanLoadoutData_Parms;
	memcpy ( &GetHenchmanLoadoutData_Parms.HenchClassName, &HenchClassName, 0x8 );

	this->ProcessEvent ( pFnGetHenchmanLoadoutData, &GetHenchmanLoadoutData_Parms, NULL );

	return GetHenchmanLoadoutData_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.GetHenchmanInfo
// [0x00820002] 
// Parameters infos:
// struct FHenchmanInfoStruct     ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FName                   HenchClassName                 ( CPF_Parm )

struct FHenchmanInfoStruct USFXSeqAct_ChooseLoadoutBase::GetHenchmanInfo ( struct FName HenchClassName )
{
	static UFunction* pFnGetHenchmanInfo = NULL;

	if ( ! pFnGetHenchmanInfo )
		pFnGetHenchmanInfo = (UFunction*) UObject::GObjObjects()->Data[ 59980 ];

	USFXSeqAct_ChooseLoadoutBase_execGetHenchmanInfo_Parms GetHenchmanInfo_Parms;
	memcpy ( &GetHenchmanInfo_Parms.HenchClassName, &HenchClassName, 0x8 );

	this->ProcessEvent ( pFnGetHenchmanInfo, &GetHenchmanInfo_Parms, NULL );

	return GetHenchmanInfo_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.PrepareHenchmanRecords
// [0x00820002] 
// Parameters infos:
// struct FName                   Tag                            ( CPF_Parm )

void USFXSeqAct_ChooseLoadoutBase::PrepareHenchmanRecords ( struct FName Tag )
{
	static UFunction* pFnPrepareHenchmanRecords = NULL;

	if ( ! pFnPrepareHenchmanRecords )
		pFnPrepareHenchmanRecords = (UFunction*) UObject::GObjObjects()->Data[ 59974 ];

	USFXSeqAct_ChooseLoadoutBase_execPrepareHenchmanRecords_Parms PrepareHenchmanRecords_Parms;
	memcpy ( &PrepareHenchmanRecords_Parms.Tag, &Tag, 0x8 );

	this->ProcessEvent ( pFnPrepareHenchmanRecords, &PrepareHenchmanRecords_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.BuildPawnWeaponList
// [0x00C20002] 
// Parameters infos:
// int                            PawnID                         ( CPF_Parm )
// struct FSFXChoiceEntry         entry                          ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSeqAct_ChooseLoadoutBase::BuildPawnWeaponList ( int PawnID, struct FSFXChoiceEntry* entry )
{
	static UFunction* pFnBuildPawnWeaponList = NULL;

	if ( ! pFnBuildPawnWeaponList )
		pFnBuildPawnWeaponList = (UFunction*) UObject::GObjObjects()->Data[ 59965 ];

	USFXSeqAct_ChooseLoadoutBase_execBuildPawnWeaponList_Parms BuildPawnWeaponList_Parms;
	BuildPawnWeaponList_Parms.PawnID = PawnID;

	this->ProcessEvent ( pFnBuildPawnWeaponList, &BuildPawnWeaponList_Parms, NULL );

	if ( entry )
		memcpy ( entry, &BuildPawnWeaponList_Parms.entry, 0x78 );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.ShowCharacterMenu
// [0x00820002] 
// Parameters infos:

void USFXSeqAct_ChooseLoadoutBase::ShowCharacterMenu ( )
{
	static UFunction* pFnShowCharacterMenu = NULL;

	if ( ! pFnShowCharacterMenu )
		pFnShowCharacterMenu = (UFunction*) UObject::GObjObjects()->Data[ 59958 ];

	USFXSeqAct_ChooseLoadoutBase_execShowCharacterMenu_Parms ShowCharacterMenu_Parms;

	this->ProcessEvent ( pFnShowCharacterMenu, &ShowCharacterMenu_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.CharacterMenuHandler
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void USFXSeqAct_ChooseLoadoutBase::CharacterMenuHandler ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnCharacterMenuHandler = NULL;

	if ( ! pFnCharacterMenuHandler )
		pFnCharacterMenuHandler = (UFunction*) UObject::GObjObjects()->Data[ 59952 ];

	USFXSeqAct_ChooseLoadoutBase_execCharacterMenuHandler_Parms CharacterMenuHandler_Parms;
	CharacterMenuHandler_Parms.bAPressed = bAPressed;
	CharacterMenuHandler_Parms.nContext = nContext;

	this->ProcessEvent ( pFnCharacterMenuHandler, &CharacterMenuHandler_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.PreparePlayerLoadout
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ChooseLoadoutBase::PreparePlayerLoadout ( )
{
	static UFunction* pFnPreparePlayerLoadout = NULL;

	if ( ! pFnPreparePlayerLoadout )
		pFnPreparePlayerLoadout = (UFunction*) UObject::GObjObjects()->Data[ 59947 ];

	USFXSeqAct_ChooseLoadoutBase_execPreparePlayerLoadout_Parms PreparePlayerLoadout_Parms;

	this->ProcessEvent ( pFnPreparePlayerLoadout, &PreparePlayerLoadout_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.PrepareHenchmanLoadout
// [0x00020002] 
// Parameters infos:
// int                            HenchIdx                       ( CPF_Parm )

void USFXSeqAct_ChooseLoadoutBase::PrepareHenchmanLoadout ( int HenchIdx )
{
	static UFunction* pFnPrepareHenchmanLoadout = NULL;

	if ( ! pFnPrepareHenchmanLoadout )
		pFnPrepareHenchmanLoadout = (UFunction*) UObject::GObjObjects()->Data[ 59941 ];

	USFXSeqAct_ChooseLoadoutBase_execPrepareHenchmanLoadout_Parms PrepareHenchmanLoadout_Parms;
	PrepareHenchmanLoadout_Parms.HenchIdx = HenchIdx;

	this->ProcessEvent ( pFnPrepareHenchmanLoadout, &PrepareHenchmanLoadout_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.FindImage
// [0x00020002] 
// Parameters infos:
// class UTexture2D*              ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// struct FString                 Path                           ( CPF_Parm | CPF_NeedCtorLink )

class UTexture2D* USFXSeqAct_ChooseLoadoutBase::FindImage ( struct FString Path )
{
	static UFunction* pFnFindImage = NULL;

	if ( ! pFnFindImage )
		pFnFindImage = (UFunction*) UObject::GObjObjects()->Data[ 59937 ];

	USFXSeqAct_ChooseLoadoutBase_execFindImage_Parms FindImage_Parms;
	memcpy ( &FindImage_Parms.Path, &Path, 0xC );

	this->ProcessEvent ( pFnFindImage, &FindImage_Parms, NULL );

	return FindImage_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.ShowWeaponsTopMenu
// [0x00820002] 
// Parameters infos:

void USFXSeqAct_ChooseLoadoutBase::ShowWeaponsTopMenu ( )
{
	static UFunction* pFnShowWeaponsTopMenu = NULL;

	if ( ! pFnShowWeaponsTopMenu )
		pFnShowWeaponsTopMenu = (UFunction*) UObject::GObjObjects()->Data[ 59929 ];

	USFXSeqAct_ChooseLoadoutBase_execShowWeaponsTopMenu_Parms ShowWeaponsTopMenu_Parms;

	this->ProcessEvent ( pFnShowWeaponsTopMenu, &ShowWeaponsTopMenu_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.TopMenuHandler
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void USFXSeqAct_ChooseLoadoutBase::TopMenuHandler ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnTopMenuHandler = NULL;

	if ( ! pFnTopMenuHandler )
		pFnTopMenuHandler = (UFunction*) UObject::GObjObjects()->Data[ 59921 ];

	USFXSeqAct_ChooseLoadoutBase_execTopMenuHandler_Parms TopMenuHandler_Parms;
	TopMenuHandler_Parms.bAPressed = bAPressed;
	TopMenuHandler_Parms.nContext = nContext;

	this->ProcessEvent ( pFnTopMenuHandler, &TopMenuHandler_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.ApplyHenchmanLoadout
// [0x00020002] 
// Parameters infos:
// int                            HenchIdx                       ( CPF_Parm )

void USFXSeqAct_ChooseLoadoutBase::ApplyHenchmanLoadout ( int HenchIdx )
{
	static UFunction* pFnApplyHenchmanLoadout = NULL;

	if ( ! pFnApplyHenchmanLoadout )
		pFnApplyHenchmanLoadout = (UFunction*) UObject::GObjObjects()->Data[ 59916 ];

	USFXSeqAct_ChooseLoadoutBase_execApplyHenchmanLoadout_Parms ApplyHenchmanLoadout_Parms;
	ApplyHenchmanLoadout_Parms.HenchIdx = HenchIdx;

	this->ProcessEvent ( pFnApplyHenchmanLoadout, &ApplyHenchmanLoadout_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.ApplyPlayerLoadout
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ChooseLoadoutBase::ApplyPlayerLoadout ( )
{
	static UFunction* pFnApplyPlayerLoadout = NULL;

	if ( ! pFnApplyPlayerLoadout )
		pFnApplyPlayerLoadout = (UFunction*) UObject::GObjObjects()->Data[ 59912 ];

	USFXSeqAct_ChooseLoadoutBase_execApplyPlayerLoadout_Parms ApplyPlayerLoadout_Parms;

	this->ProcessEvent ( pFnApplyPlayerLoadout, &ApplyPlayerLoadout_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.GetWeaponClassUnlockedCount
// [0x00020002] 
// Parameters infos:
// int                            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            GroupIdx                       ( CPF_Parm )

int USFXSeqAct_ChooseLoadoutBase::GetWeaponClassUnlockedCount ( int GroupIdx )
{
	static UFunction* pFnGetWeaponClassUnlockedCount = NULL;

	if ( ! pFnGetWeaponClassUnlockedCount )
		pFnGetWeaponClassUnlockedCount = (UFunction*) UObject::GObjObjects()->Data[ 59903 ];

	USFXSeqAct_ChooseLoadoutBase_execGetWeaponClassUnlockedCount_Parms GetWeaponClassUnlockedCount_Parms;
	GetWeaponClassUnlockedCount_Parms.GroupIdx = GroupIdx;

	this->ProcessEvent ( pFnGetWeaponClassUnlockedCount, &GetWeaponClassUnlockedCount_Parms, NULL );

	return GetWeaponClassUnlockedCount_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.CanPawnUseSpecialWeapon
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PawnID                         ( CPF_Parm )
// class UClass*                  WeaponClass                    ( CPF_Parm )

bool USFXSeqAct_ChooseLoadoutBase::CanPawnUseSpecialWeapon ( int PawnID, class UClass* WeaponClass )
{
	static UFunction* pFnCanPawnUseSpecialWeapon = NULL;

	if ( ! pFnCanPawnUseSpecialWeapon )
		pFnCanPawnUseSpecialWeapon = (UFunction*) UObject::GObjObjects()->Data[ 59899 ];

	USFXSeqAct_ChooseLoadoutBase_execCanPawnUseSpecialWeapon_Parms CanPawnUseSpecialWeapon_Parms;
	CanPawnUseSpecialWeapon_Parms.PawnID = PawnID;
	CanPawnUseSpecialWeapon_Parms.WeaponClass = WeaponClass;

	this->ProcessEvent ( pFnCanPawnUseSpecialWeapon, &CanPawnUseSpecialWeapon_Parms, NULL );

	return CanPawnUseSpecialWeapon_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.CanPawnUseWeaponClass
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// int                            PawnID                         ( CPF_Parm )
// unsigned char                  WeaponGroupID                  ( CPF_Parm )

bool USFXSeqAct_ChooseLoadoutBase::CanPawnUseWeaponClass ( int PawnID, unsigned char WeaponGroupID )
{
	static UFunction* pFnCanPawnUseWeaponClass = NULL;

	if ( ! pFnCanPawnUseWeaponClass )
		pFnCanPawnUseWeaponClass = (UFunction*) UObject::GObjObjects()->Data[ 59895 ];

	USFXSeqAct_ChooseLoadoutBase_execCanPawnUseWeaponClass_Parms CanPawnUseWeaponClass_Parms;
	CanPawnUseWeaponClass_Parms.PawnID = PawnID;
	CanPawnUseWeaponClass_Parms.WeaponGroupID = WeaponGroupID;

	this->ProcessEvent ( pFnCanPawnUseWeaponClass, &CanPawnUseWeaponClass_Parms, NULL );

	return CanPawnUseWeaponClass_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.GetPlayerLoadoutData
// [0x00820002] 
// Parameters infos:
// struct FLoadoutInfo            ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )

struct FLoadoutInfo USFXSeqAct_ChooseLoadoutBase::GetPlayerLoadoutData ( )
{
	static UFunction* pFnGetPlayerLoadoutData = NULL;

	if ( ! pFnGetPlayerLoadoutData )
		pFnGetPlayerLoadoutData = (UFunction*) UObject::GObjObjects()->Data[ 59890 ];

	USFXSeqAct_ChooseLoadoutBase_execGetPlayerLoadoutData_Parms GetPlayerLoadoutData_Parms;

	this->ProcessEvent ( pFnGetPlayerLoadoutData, &GetPlayerLoadoutData_Parms, NULL );

	return GetPlayerLoadoutData_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.ShowWeaponSubMenu
// [0x00820002] 
// Parameters infos:
// int                            GroupIdx                       ( CPF_Parm )

void USFXSeqAct_ChooseLoadoutBase::ShowWeaponSubMenu ( int GroupIdx )
{
	static UFunction* pFnShowWeaponSubMenu = NULL;

	if ( ! pFnShowWeaponSubMenu )
		pFnShowWeaponSubMenu = (UFunction*) UObject::GObjObjects()->Data[ 59876 ];

	USFXSeqAct_ChooseLoadoutBase_execShowWeaponSubMenu_Parms ShowWeaponSubMenu_Parms;
	ShowWeaponSubMenu_Parms.GroupIdx = GroupIdx;

	this->ProcessEvent ( pFnShowWeaponSubMenu, &ShowWeaponSubMenu_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.SubMenuHandler
// [0x00020002] 
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void USFXSeqAct_ChooseLoadoutBase::SubMenuHandler ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnSubMenuHandler = NULL;

	if ( ! pFnSubMenuHandler )
		pFnSubMenuHandler = (UFunction*) UObject::GObjObjects()->Data[ 59873 ];

	USFXSeqAct_ChooseLoadoutBase_execSubMenuHandler_Parms SubMenuHandler_Parms;
	SubMenuHandler_Parms.bAPressed = bAPressed;
	SubMenuHandler_Parms.nContext = nContext;

	this->ProcessEvent ( pFnSubMenuHandler, &SubMenuHandler_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ChooseLoadoutBase.PlayEquipSound
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ChooseLoadoutBase::PlayEquipSound ( )
{
	static UFunction* pFnPlayEquipSound = NULL;

	if ( ! pFnPlayEquipSound )
		pFnPlayEquipSound = (UFunction*) UObject::GObjObjects()->Data[ 59871 ];

	USFXSeqAct_ChooseLoadoutBase_execPlayEquipSound_Parms PlayEquipSound_Parms;

	this->ProcessEvent ( pFnPlayEquipSound, &PlayEquipSound_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ClearAreaMap.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ClearAreaMap::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60003 ];

	USFXSeqAct_ClearAreaMap_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_CloseGalaxyMap.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_CloseGalaxyMap::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60009 ];

	USFXSeqAct_CloseGalaxyMap_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_DefendActor.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_DefendActor::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60029 ];

	USFXSeqAct_DefendActor_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_FollowActor.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_FollowActor::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60056 ];

	USFXSeqAct_FollowActor_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ForceCombatOn.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ForceCombatOn::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60062 ];

	USFXSeqAct_ForceCombatOn_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_GameCompleted.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_GameCompleted::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60067 ];

	USFXSeqAct_GameCompleted_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_GenerateVocEvent.GetBioPawn
// [0x00020002] 
// Parameters infos:
// class ABioPawn*                ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// class AActor*                  oTarget                        ( CPF_Parm )

class ABioPawn* USFXSeqAct_GenerateVocEvent::GetBioPawn ( class AActor* oTarget )
{
	static UFunction* pFnGetBioPawn = NULL;

	if ( ! pFnGetBioPawn )
		pFnGetBioPawn = (UFunction*) UObject::GObjObjects()->Data[ 60078 ];

	USFXSeqAct_GenerateVocEvent_execGetBioPawn_Parms GetBioPawn_Parms;
	GetBioPawn_Parms.oTarget = oTarget;

	this->ProcessEvent ( pFnGetBioPawn, &GetBioPawn_Parms, NULL );

	return GetBioPawn_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_GenerateVocEvent.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_GenerateVocEvent::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60075 ];

	USFXSeqAct_GenerateVocEvent_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_GetCurrentGoal.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_GetCurrentGoal::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60085 ];

	USFXSeqAct_GetCurrentGoal_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_GetTreasureImage.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_GetTreasureImage::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60094 ];

	USFXSeqAct_GetTreasureImage_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_GivePlotWeapon.MessageInputPressed
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void USFXSeqAct_GivePlotWeapon::MessageInputPressed ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnMessageInputPressed = NULL;

	if ( ! pFnMessageInputPressed )
		pFnMessageInputPressed = (UFunction*) UObject::GObjObjects()->Data[ 60135 ];

	USFXSeqAct_GivePlotWeapon_execMessageInputPressed_Parms MessageInputPressed_Parms;
	MessageInputPressed_Parms.bAPressed = bAPressed;
	MessageInputPressed_Parms.nContext = nContext;

	this->ProcessEvent ( pFnMessageInputPressed, &MessageInputPressed_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_GivePlotWeapon.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          DeltaTime                      ( CPF_Parm )

bool USFXSeqAct_GivePlotWeapon::eventUpdate ( float DeltaTime )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 60132 ];

	USFXSeqAct_GivePlotWeapon_eventUpdate_Parms Update_Parms;
	Update_Parms.DeltaTime = DeltaTime;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );

	return Update_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_GivePlotWeapon.BuildSquadMemberList
// [0x00820002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// class UClass*                  WClass                         ( CPF_Parm )

struct FString USFXSeqAct_GivePlotWeapon::BuildSquadMemberList ( class UClass* WClass )
{
	static UFunction* pFnBuildSquadMemberList = NULL;

	if ( ! pFnBuildSquadMemberList )
		pFnBuildSquadMemberList = (UFunction*) UObject::GObjObjects()->Data[ 60124 ];

	USFXSeqAct_GivePlotWeapon_execBuildSquadMemberList_Parms BuildSquadMemberList_Parms;
	BuildSquadMemberList_Parms.WClass = WClass;

	this->ProcessEvent ( pFnBuildSquadMemberList, &BuildSquadMemberList_Parms, NULL );

	return BuildSquadMemberList_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_GivePlotWeapon.DisplayMessageBox
// [0x00820002] 
// Parameters infos:

void USFXSeqAct_GivePlotWeapon::DisplayMessageBox ( )
{
	static UFunction* pFnDisplayMessageBox = NULL;

	if ( ! pFnDisplayMessageBox )
		pFnDisplayMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 60119 ];

	USFXSeqAct_GivePlotWeapon_execDisplayMessageBox_Parms DisplayMessageBox_Parms;

	this->ProcessEvent ( pFnDisplayMessageBox, &DisplayMessageBox_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_GivePlotWeapon.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_GivePlotWeapon::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60111 ];

	USFXSeqAct_GivePlotWeapon_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_InitMainMenu.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_InitMainMenu::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60146 ];

	USFXSeqAct_InitMainMenu_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_LegacyDataBasicInfo.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_LegacyDataBasicInfo::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60178 ];

	USFXSeqAct_LegacyDataBasicInfo_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_LinkLighting.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_LinkLighting::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60214 ];

	USFXSeqAct_LinkLighting_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_LinkToSaveBool.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_LinkToSaveBool::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60228 ];

	USFXSeqAct_LinkToSaveBool_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_OpenMap.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_OpenMap::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60250 ];

	USFXSeqAct_OpenMap_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_PreventDamage.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_PreventDamage::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60256 ];

	USFXSeqAct_PreventDamage_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.TopLevelChosen
// [0x00020000] 
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::TopLevelChosen ( )
{
	static UFunction* pFnTopLevelChosen = NULL;

	if ( ! pFnTopLevelChosen )
		pFnTopLevelChosen = (UFunction*) UObject::GObjObjects()->Data[ 60451 ];

	USFXSeqAct_ResearchChoiceGUI_execTopLevelChosen_Parms TopLevelChosen_Parms;

	this->ProcessEvent ( pFnTopLevelChosen, &TopLevelChosen_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.ExitChosen
// [0x00020000] 
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::ExitChosen ( )
{
	static UFunction* pFnExitChosen = NULL;

	if ( ! pFnExitChosen )
		pFnExitChosen = (UFunction*) UObject::GObjObjects()->Data[ 60450 ];

	USFXSeqAct_ResearchChoiceGUI_execExitChosen_Parms ExitChosen_Parms;

	this->ProcessEvent ( pFnExitChosen, &ExitChosen_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.DoResearch
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::DoResearch ( )
{
	static UFunction* pFnDoResearch = NULL;

	if ( ! pFnDoResearch )
		pFnDoResearch = (UFunction*) UObject::GObjObjects()->Data[ 60447 ];

	USFXSeqAct_ResearchChoiceGUI_execDoResearch_Parms DoResearch_Parms;

	this->ProcessEvent ( pFnDoResearch, &DoResearch_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.TechChosen
// [0x00020000] 
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::TechChosen ( )
{
	static UFunction* pFnTechChosen = NULL;

	if ( ! pFnTechChosen )
		pFnTechChosen = (UFunction*) UObject::GObjObjects()->Data[ 60446 ];

	USFXSeqAct_ResearchChoiceGUI_execTechChosen_Parms TechChosen_Parms;

	this->ProcessEvent ( pFnTechChosen, &TechChosen_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.TechMenuChosen
// [0x00020000] 
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::TechMenuChosen ( )
{
	static UFunction* pFnTechMenuChosen = NULL;

	if ( ! pFnTechMenuChosen )
		pFnTechMenuChosen = (UFunction*) UObject::GObjObjects()->Data[ 60445 ];

	USFXSeqAct_ResearchChoiceGUI_execTechMenuChosen_Parms TechMenuChosen_Parms;

	this->ProcessEvent ( pFnTechMenuChosen, &TechMenuChosen_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.ResearchMenuChosen
// [0x00020000] 
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::ResearchMenuChosen ( )
{
	static UFunction* pFnResearchMenuChosen = NULL;

	if ( ! pFnResearchMenuChosen )
		pFnResearchMenuChosen = (UFunction*) UObject::GObjObjects()->Data[ 60444 ];

	USFXSeqAct_ResearchChoiceGUI_execResearchMenuChosen_Parms ResearchMenuChosen_Parms;

	this->ProcessEvent ( pFnResearchMenuChosen, &ResearchMenuChosen_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.MessageInputPressed
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void USFXSeqAct_ResearchChoiceGUI::MessageInputPressed ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnMessageInputPressed = NULL;

	if ( ! pFnMessageInputPressed )
		pFnMessageInputPressed = (UFunction*) UObject::GObjObjects()->Data[ 60441 ];

	USFXSeqAct_ResearchChoiceGUI_execMessageInputPressed_Parms MessageInputPressed_Parms;
	MessageInputPressed_Parms.bAPressed = bAPressed;
	MessageInputPressed_Parms.nContext = nContext;

	this->ProcessEvent ( pFnMessageInputPressed, &MessageInputPressed_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.MessageInputPressedResearch
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void USFXSeqAct_ResearchChoiceGUI::MessageInputPressedResearch ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnMessageInputPressedResearch = NULL;

	if ( ! pFnMessageInputPressedResearch )
		pFnMessageInputPressedResearch = (UFunction*) UObject::GObjObjects()->Data[ 60438 ];

	USFXSeqAct_ResearchChoiceGUI_execMessageInputPressedResearch_Parms MessageInputPressedResearch_Parms;
	MessageInputPressedResearch_Parms.bAPressed = bAPressed;
	MessageInputPressedResearch_Parms.nContext = nContext;

	this->ProcessEvent ( pFnMessageInputPressedResearch, &MessageInputPressedResearch_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.MessageInputPressedError
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void USFXSeqAct_ResearchChoiceGUI::MessageInputPressedError ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnMessageInputPressedError = NULL;

	if ( ! pFnMessageInputPressedError )
		pFnMessageInputPressedError = (UFunction*) UObject::GObjObjects()->Data[ 60435 ];

	USFXSeqAct_ResearchChoiceGUI_execMessageInputPressedError_Parms MessageInputPressedError_Parms;
	MessageInputPressedError_Parms.bAPressed = bAPressed;
	MessageInputPressedError_Parms.nContext = nContext;

	this->ProcessEvent ( pFnMessageInputPressedError, &MessageInputPressedError_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.ShowResearchMessageBox
// [0x00820002] 
// Parameters infos:
// struct FSTreasure              stTreasure                     ( CPF_Parm )
// struct FSTech                  stTech                         ( CPF_Parm | CPF_NeedCtorLink )

void USFXSeqAct_ResearchChoiceGUI::ShowResearchMessageBox ( struct FSTreasure stTreasure, struct FSTech stTech )
{
	static UFunction* pFnShowResearchMessageBox = NULL;

	if ( ! pFnShowResearchMessageBox )
		pFnShowResearchMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 60431 ];

	USFXSeqAct_ResearchChoiceGUI_execShowResearchMessageBox_Parms ShowResearchMessageBox_Parms;
	memcpy ( &ShowResearchMessageBox_Parms.stTreasure, &stTreasure, 0x38 );
	memcpy ( &ShowResearchMessageBox_Parms.stTech, &stTech, 0x40 );

	this->ProcessEvent ( pFnShowResearchMessageBox, &ShowResearchMessageBox_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.ShowErrorMessageBox
// [0x00820002] 
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::ShowErrorMessageBox ( )
{
	static UFunction* pFnShowErrorMessageBox = NULL;

	if ( ! pFnShowErrorMessageBox )
		pFnShowErrorMessageBox = (UFunction*) UObject::GObjObjects()->Data[ 60428 ];

	USFXSeqAct_ResearchChoiceGUI_execShowErrorMessageBox_Parms ShowErrorMessageBox_Parms;

	this->ProcessEvent ( pFnShowErrorMessageBox, &ShowErrorMessageBox_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.HandleInput_Research
// [0x00820003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void USFXSeqAct_ResearchChoiceGUI::HandleInput_Research ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnHandleInput_Research = NULL;

	if ( ! pFnHandleInput_Research )
		pFnHandleInput_Research = (UFunction*) UObject::GObjObjects()->Data[ 60418 ];

	USFXSeqAct_ResearchChoiceGUI_execHandleInput_Research_Parms HandleInput_Research_Parms;
	HandleInput_Research_Parms.bAPressed = bAPressed;
	HandleInput_Research_Parms.nContext = nContext;

	this->ProcessEvent ( pFnHandleInput_Research, &HandleInput_Research_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.HandleInput_Tech
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void USFXSeqAct_ResearchChoiceGUI::HandleInput_Tech ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnHandleInput_Tech = NULL;

	if ( ! pFnHandleInput_Tech )
		pFnHandleInput_Tech = (UFunction*) UObject::GObjObjects()->Data[ 60417 ];

	USFXSeqAct_ResearchChoiceGUI_execHandleInput_Tech_Parms HandleInput_Tech_Parms;
	HandleInput_Tech_Parms.bAPressed = bAPressed;
	HandleInput_Tech_Parms.nContext = nContext;

	this->ProcessEvent ( pFnHandleInput_Tech, &HandleInput_Tech_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.HandleInput_TopLevel
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void USFXSeqAct_ResearchChoiceGUI::HandleInput_TopLevel ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnHandleInput_TopLevel = NULL;

	if ( ! pFnHandleInput_TopLevel )
		pFnHandleInput_TopLevel = (UFunction*) UObject::GObjObjects()->Data[ 60416 ];

	USFXSeqAct_ResearchChoiceGUI_execHandleInput_TopLevel_Parms HandleInput_TopLevel_Parms;
	HandleInput_TopLevel_Parms.bAPressed = bAPressed;
	HandleInput_TopLevel_Parms.nContext = nContext;

	this->ProcessEvent ( pFnHandleInput_TopLevel, &HandleInput_TopLevel_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.ExitGui
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::ExitGui ( )
{
	static UFunction* pFnExitGui = NULL;

	if ( ! pFnExitGui )
		pFnExitGui = (UFunction*) UObject::GObjObjects()->Data[ 60419 ];

	USFXSeqAct_ResearchChoiceGUI_execExitGui_Parms ExitGui_Parms;

	this->ProcessEvent ( pFnExitGui, &ExitGui_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.ChoiceGUIInputPressed
// [0x00020003] ( FUNC_Final )
// Parameters infos:
// unsigned long                  bAPressed                      ( CPF_Parm )
// int                            nContext                       ( CPF_Parm )

void USFXSeqAct_ResearchChoiceGUI::ChoiceGUIInputPressed ( unsigned long bAPressed, int nContext )
{
	static UFunction* pFnChoiceGUIInputPressed = NULL;

	if ( ! pFnChoiceGUIInputPressed )
		pFnChoiceGUIInputPressed = (UFunction*) UObject::GObjObjects()->Data[ 60413 ];

	USFXSeqAct_ResearchChoiceGUI_execChoiceGUIInputPressed_Parms ChoiceGUIInputPressed_Parms;
	ChoiceGUIInputPressed_Parms.bAPressed = bAPressed;
	ChoiceGUIInputPressed_Parms.nContext = nContext;

	this->ProcessEvent ( pFnChoiceGUIInputPressed, &ChoiceGUIInputPressed_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.UpdateOp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool USFXSeqAct_ResearchChoiceGUI::UpdateOp ( float fDeltaT )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 60410 ];

	USFXSeqAct_ResearchChoiceGUI_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.SetupTech
// [0x00820002] 
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::SetupTech ( )
{
	static UFunction* pFnSetupTech = NULL;

	if ( ! pFnSetupTech )
		pFnSetupTech = (UFunction*) UObject::GObjObjects()->Data[ 60398 ];

	USFXSeqAct_ResearchChoiceGUI_execSetupTech_Parms SetupTech_Parms;

	this->ProcessEvent ( pFnSetupTech, &SetupTech_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.GetResearchDescription
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FTechData               ResearchData                   ( CPF_Parm | CPF_NeedCtorLink )

struct FString USFXSeqAct_ResearchChoiceGUI::GetResearchDescription ( struct FTechData ResearchData )
{
	static UFunction* pFnGetResearchDescription = NULL;

	if ( ! pFnGetResearchDescription )
		pFnGetResearchDescription = (UFunction*) UObject::GObjObjects()->Data[ 60391 ];

	USFXSeqAct_ResearchChoiceGUI_execGetResearchDescription_Parms GetResearchDescription_Parms;
	memcpy ( &GetResearchDescription_Parms.ResearchData, &ResearchData, 0x114 );

	this->ProcessEvent ( pFnGetResearchDescription, &GetResearchDescription_Parms, NULL );

	return GetResearchDescription_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.GetResearchCanAffordString
// [0x00820002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FTechData               ResearchData                   ( CPF_Parm | CPF_NeedCtorLink )

struct FString USFXSeqAct_ResearchChoiceGUI::GetResearchCanAffordString ( struct FTechData ResearchData )
{
	static UFunction* pFnGetResearchCanAffordString = NULL;

	if ( ! pFnGetResearchCanAffordString )
		pFnGetResearchCanAffordString = (UFunction*) UObject::GObjObjects()->Data[ 60383 ];

	USFXSeqAct_ResearchChoiceGUI_execGetResearchCanAffordString_Parms GetResearchCanAffordString_Parms;
	memcpy ( &GetResearchCanAffordString_Parms.ResearchData, &ResearchData, 0x114 );

	this->ProcessEvent ( pFnGetResearchCanAffordString, &GetResearchCanAffordString_Parms, NULL );

	return GetResearchCanAffordString_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.GetResearchQualifiesForString
// [0x00820002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// struct FTechData               ResearchData                   ( CPF_Parm | CPF_NeedCtorLink )

struct FString USFXSeqAct_ResearchChoiceGUI::GetResearchQualifiesForString ( struct FTechData ResearchData )
{
	static UFunction* pFnGetResearchQualifiesForString = NULL;

	if ( ! pFnGetResearchQualifiesForString )
		pFnGetResearchQualifiesForString = (UFunction*) UObject::GObjObjects()->Data[ 60373 ];

	USFXSeqAct_ResearchChoiceGUI_execGetResearchQualifiesForString_Parms GetResearchQualifiesForString_Parms;
	memcpy ( &GetResearchQualifiesForString_Parms.ResearchData, &ResearchData, 0x114 );

	this->ProcessEvent ( pFnGetResearchQualifiesForString, &GetResearchQualifiesForString_Parms, NULL );

	return GetResearchQualifiesForString_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.TokenizeResearchString
// [0x00020002] 
// Parameters infos:
// struct FString                 ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink )
// int                            nLevel                         ( CPF_Parm )

struct FString USFXSeqAct_ResearchChoiceGUI::TokenizeResearchString ( int nLevel )
{
	static UFunction* pFnTokenizeResearchString = NULL;

	if ( ! pFnTokenizeResearchString )
		pFnTokenizeResearchString = (UFunction*) UObject::GObjObjects()->Data[ 60369 ];

	USFXSeqAct_ResearchChoiceGUI_execTokenizeResearchString_Parms TokenizeResearchString_Parms;
	TokenizeResearchString_Parms.nLevel = nLevel;

	this->ProcessEvent ( pFnTokenizeResearchString, &TokenizeResearchString_Parms, NULL );

	return TokenizeResearchString_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.SetupResearch
// [0x00820002] 
// Parameters infos:
// struct FResearchMenu           Menu                           ( CPF_Parm | CPF_NeedCtorLink )

void USFXSeqAct_ResearchChoiceGUI::SetupResearch ( struct FResearchMenu Menu )
{
	static UFunction* pFnSetupResearch = NULL;

	if ( ! pFnSetupResearch )
		pFnSetupResearch = (UFunction*) UObject::GObjObjects()->Data[ 60354 ];

	USFXSeqAct_ResearchChoiceGUI_execSetupResearch_Parms SetupResearch_Parms;
	memcpy ( &SetupResearch_Parms.Menu, &Menu, 0x2C );

	this->ProcessEvent ( pFnSetupResearch, &SetupResearch_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.TokenizeTechData
// [0x00C20002] 
// Parameters infos:
// int                            nLevel                         ( CPF_Parm )
// struct FTechData               Data                           ( CPF_Parm | CPF_OutParm | CPF_NeedCtorLink )

void USFXSeqAct_ResearchChoiceGUI::TokenizeTechData ( int nLevel, struct FTechData* Data )
{
	static UFunction* pFnTokenizeTechData = NULL;

	if ( ! pFnTokenizeTechData )
		pFnTokenizeTechData = (UFunction*) UObject::GObjObjects()->Data[ 60349 ];

	USFXSeqAct_ResearchChoiceGUI_execTokenizeTechData_Parms TokenizeTechData_Parms;
	TokenizeTechData_Parms.nLevel = nLevel;

	this->ProcessEvent ( pFnTokenizeTechData, &TokenizeTechData_Parms, NULL );

	if ( Data )
		memcpy ( Data, &TokenizeTechData_Parms.Data, 0x114 );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.SetupTop
// [0x00820002] 
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::SetupTop ( )
{
	static UFunction* pFnSetupTop = NULL;

	if ( ! pFnSetupTop )
		pFnSetupTop = (UFunction*) UObject::GObjObjects()->Data[ 60347 ];

	USFXSeqAct_ResearchChoiceGUI_execSetupTop_Parms SetupTop_Parms;

	this->ProcessEvent ( pFnSetupTop, &SetupTop_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.SetupChoiceGUI
// [0x00820002] 
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::SetupChoiceGUI ( )
{
	static UFunction* pFnSetupChoiceGUI = NULL;

	if ( ! pFnSetupChoiceGUI )
		pFnSetupChoiceGUI = (UFunction*) UObject::GObjObjects()->Data[ 60345 ];

	USFXSeqAct_ResearchChoiceGUI_execSetupChoiceGUI_Parms SetupChoiceGUI_Parms;

	this->ProcessEvent ( pFnSetupChoiceGUI, &SetupChoiceGUI_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.RenderModeResearch
// [0x00820002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXSeqAct_ResearchChoiceGUI::RenderModeResearch ( )
{
	static UFunction* pFnRenderModeResearch = NULL;

	if ( ! pFnRenderModeResearch )
		pFnRenderModeResearch = (UFunction*) UObject::GObjObjects()->Data[ 60341 ];

	USFXSeqAct_ResearchChoiceGUI_execRenderModeResearch_Parms RenderModeResearch_Parms;

	this->ProcessEvent ( pFnRenderModeResearch, &RenderModeResearch_Parms, NULL );

	return RenderModeResearch_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.RenderModeTech
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXSeqAct_ResearchChoiceGUI::RenderModeTech ( )
{
	static UFunction* pFnRenderModeTech = NULL;

	if ( ! pFnRenderModeTech )
		pFnRenderModeTech = (UFunction*) UObject::GObjObjects()->Data[ 60339 ];

	USFXSeqAct_ResearchChoiceGUI_execRenderModeTech_Parms RenderModeTech_Parms;

	this->ProcessEvent ( pFnRenderModeTech, &RenderModeTech_Parms, NULL );

	return RenderModeTech_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.RenderModeTopLevel
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )

bool USFXSeqAct_ResearchChoiceGUI::RenderModeTopLevel ( )
{
	static UFunction* pFnRenderModeTopLevel = NULL;

	if ( ! pFnRenderModeTopLevel )
		pFnRenderModeTopLevel = (UFunction*) UObject::GObjObjects()->Data[ 60337 ];

	USFXSeqAct_ResearchChoiceGUI_execRenderModeTopLevel_Parms RenderModeTopLevel_Parms;

	this->ProcessEvent ( pFnRenderModeTopLevel, &RenderModeTopLevel_Parms, NULL );

	return RenderModeTopLevel_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.Reset
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = (UFunction*) UObject::GObjObjects()->Data[ 60331 ];

	USFXSeqAct_ResearchChoiceGUI_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.SetupTreasureData
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::SetupTreasureData ( )
{
	static UFunction* pFnSetupTreasureData = NULL;

	if ( ! pFnSetupTreasureData )
		pFnSetupTreasureData = (UFunction*) UObject::GObjObjects()->Data[ 60328 ];

	USFXSeqAct_ResearchChoiceGUI_execSetupTreasureData_Parms SetupTreasureData_Parms;

	this->ProcessEvent ( pFnSetupTreasureData, &SetupTreasureData_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60325 ];

	USFXSeqAct_ResearchChoiceGUI_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ResearchChoiceGUI.Deactivated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_ResearchChoiceGUI::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 60322 ];

	USFXSeqAct_ResearchChoiceGUI_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_SetDoorState.UpdateOp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool USFXSeqAct_SetDoorState::UpdateOp ( float fDeltaT )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 60473 ];

	USFXSeqAct_SetDoorState_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_SetDoorState.SetDoorState
// [0x00020002] 
// Parameters infos:
// unsigned char                  ToState                        ( CPF_Parm )
// unsigned long                  bEnableDoor                    ( CPF_Parm )

void USFXSeqAct_SetDoorState::SetDoorState ( unsigned char ToState, unsigned long bEnableDoor )
{
	static UFunction* pFnSetDoorState = NULL;

	if ( ! pFnSetDoorState )
		pFnSetDoorState = (UFunction*) UObject::GObjObjects()->Data[ 60470 ];

	USFXSeqAct_SetDoorState_execSetDoorState_Parms SetDoorState_Parms;
	SetDoorState_Parms.ToState = ToState;
	SetDoorState_Parms.bEnableDoor = bEnableDoor;

	this->ProcessEvent ( pFnSetDoorState, &SetDoorState_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_SetDoorState.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_SetDoorState::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60469 ];

	USFXSeqAct_SetDoorState_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_SetDoorType.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_SetDoorType::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60480 ];

	USFXSeqAct_SetDoorType_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_SetGoalPriority.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_SetGoalPriority::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60487 ];

	USFXSeqAct_SetGoalPriority_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_SetPawnVocState.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_SetPawnVocState::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60491 ];

	USFXSeqAct_SetPawnVocState_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_SetTargetable.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_SetTargetable::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60505 ];

	USFXSeqAct_SetTargetable_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_SetTargetable.ResetToDefault
// [0x00020002] 
// Parameters infos:
// class UObject*                 Instance                       ( CPF_Parm )
// unsigned long                  bCombat                        ( CPF_OptionalParm | CPF_Parm )

void USFXSeqAct_SetTargetable::ResetToDefault ( class UObject* Instance, unsigned long bCombat )
{
	static UFunction* pFnResetToDefault = NULL;

	if ( ! pFnResetToDefault )
		pFnResetToDefault = (UFunction*) UObject::GObjObjects()->Data[ 60501 ];

	USFXSeqAct_SetTargetable_execResetToDefault_Parms ResetToDefault_Parms;
	ResetToDefault_Parms.Instance = Instance;
	ResetToDefault_Parms.bCombat = bCombat;

	this->ProcessEvent ( pFnResetToDefault, &ResetToDefault_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_SetTargetTip.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_SetTargetTip::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60511 ];

	USFXSeqAct_SetTargetTip_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_SetTreasure.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_SetTreasure::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60521 ];

	USFXSeqAct_SetTreasure_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_SetWeaponVisibility.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_SetWeaponVisibility::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60529 ];

	USFXSeqAct_SetWeaponVisibility_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ShowCharacterRecordGUI.Deactivated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_ShowCharacterRecordGUI::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 60545 ];

	USFXSeqAct_ShowCharacterRecordGUI_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ShowCharacterRecordGUI.onScreenClosed
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ShowCharacterRecordGUI::onScreenClosed ( )
{
	static UFunction* pFnonScreenClosed = NULL;

	if ( ! pFnonScreenClosed )
		pFnonScreenClosed = (UFunction*) UObject::GObjObjects()->Data[ 60544 ];

	USFXSeqAct_ShowCharacterRecordGUI_execonScreenClosed_Parms onScreenClosed_Parms;

	this->ProcessEvent ( pFnonScreenClosed, &onScreenClosed_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ShowCharacterRecordGUI.UpdateOp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool USFXSeqAct_ShowCharacterRecordGUI::UpdateOp ( float fDeltaT )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 60541 ];

	USFXSeqAct_ShowCharacterRecordGUI_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ShowCharacterRecordGUI.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_ShowCharacterRecordGUI::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60536 ];

	USFXSeqAct_ShowCharacterRecordGUI_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ShowOptionsGUI.Deactivated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_ShowOptionsGUI::eventDeactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = (UFunction*) UObject::GObjObjects()->Data[ 60564 ];

	USFXSeqAct_ShowOptionsGUI_eventDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ShowOptionsGUI.onScreenClosed
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ShowOptionsGUI::onScreenClosed ( )
{
	static UFunction* pFnonScreenClosed = NULL;

	if ( ! pFnonScreenClosed )
		pFnonScreenClosed = (UFunction*) UObject::GObjObjects()->Data[ 60563 ];

	USFXSeqAct_ShowOptionsGUI_execonScreenClosed_Parms onScreenClosed_Parms;

	this->ProcessEvent ( pFnonScreenClosed, &onScreenClosed_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ShowOptionsGUI.UpdateOp
// [0x00020002] 
// Parameters infos:
// bool                           ReturnValue                    ( CPF_Parm | CPF_OutParm | CPF_ReturnParm )
// float                          fDeltaT                        ( CPF_Parm )

bool USFXSeqAct_ShowOptionsGUI::UpdateOp ( float fDeltaT )
{
	static UFunction* pFnUpdateOp = NULL;

	if ( ! pFnUpdateOp )
		pFnUpdateOp = (UFunction*) UObject::GObjObjects()->Data[ 60560 ];

	USFXSeqAct_ShowOptionsGUI_execUpdateOp_Parms UpdateOp_Parms;
	UpdateOp_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdateOp, &UpdateOp_Parms, NULL );

	return UpdateOp_Parms.ReturnValue;
};

// Function SFXGame.SFXSeqAct_ShowOptionsGUI.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSeqAct_ShowOptionsGUI::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60554 ];

	USFXSeqAct_ShowOptionsGUI_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ToggleAutoHints.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ToggleAutoHints::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60590 ];

	USFXSeqAct_ToggleAutoHints_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_TogglePowerWheelTutorial.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_TogglePowerWheelTutorial::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60595 ];

	USFXSeqAct_TogglePowerWheelTutorial_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ToggleSquadScreenMessages.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ToggleSquadScreenMessages::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60599 ];

	USFXSeqAct_ToggleSquadScreenMessages_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ToggleTutorialEvents.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ToggleTutorialEvents::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60603 ];

	USFXSeqAct_ToggleTutorialEvents_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_ToggleWeaponWheelTutorial.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_ToggleWeaponWheelTutorial::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60607 ];

	USFXSeqAct_ToggleWeaponWheelTutorial_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_UpdateN7Achievements.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_UpdateN7Achievements::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60611 ];

	USFXSeqAct_UpdateN7Achievements_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqAct_UpdateTrainingVideoCount.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqAct_UpdateTrainingVideoCount::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60616 ];

	USFXSeqAct_UpdateTrainingVideoCount_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqCond_CheckEntitlement.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqCond_CheckEntitlement::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60643 ];

	USFXSeqCond_CheckEntitlement_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSeqCond_GetDifficulty.Activated
// [0x00020002] 
// Parameters infos:

void USFXSeqCond_GetDifficulty::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = (UFunction*) UObject::GObjObjects()->Data[ 60649 ];

	USFXSeqCond_GetDifficulty_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCAreaMap.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_PCAreaMap::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 61212 ];

	USFXSFHandler_PCAreaMap_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCEANetworking.OnPanelAdded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void USFXSFHandler_PCEANetworking::eventOnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 61216 ];

	USFXSFHandler_PCEANetworking_eventOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCHUD.SetTargetStatus
// [0x00020002] 
// Parameters infos:
// struct FString                 sStatus                        ( CPF_Parm | CPF_NeedCtorLink )
// unsigned long                  bInteractive                   ( CPF_OptionalParm | CPF_Parm )
// unsigned long                  bInRange                       ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_PCHUD::SetTargetStatus ( struct FString sStatus, unsigned long bInteractive, unsigned long bInRange )
{
	static UFunction* pFnSetTargetStatus = NULL;

	if ( ! pFnSetTargetStatus )
		pFnSetTargetStatus = (UFunction*) UObject::GObjObjects()->Data[ 61219 ];

	USFXSFHandler_PCHUD_execSetTargetStatus_Parms SetTargetStatus_Parms;
	memcpy ( &SetTargetStatus_Parms.sStatus, &sStatus, 0xC );
	SetTargetStatus_Parms.bInteractive = bInteractive;
	SetTargetStatus_Parms.bInRange = bInRange;

	this->ProcessEvent ( pFnSetTargetStatus, &SetTargetStatus_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCLoad.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_PCLoad::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 61225 ];

	USFXSFHandler_PCLoad_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPersonalization.HandleInputEvent
// [0x00820002] 
// Parameters infos:
// unsigned char                  Event                          ( CPF_Parm )
// float                          fValue                         ( CPF_OptionalParm | CPF_Parm )

void USFXSFHandler_PCPersonalization::HandleInputEvent ( unsigned char Event, float fValue )
{
	static UFunction* pFnHandleInputEvent = NULL;

	if ( ! pFnHandleInputEvent )
		pFnHandleInputEvent = (UFunction*) UObject::GObjObjects()->Data[ 61339 ];

	USFXSFHandler_PCPersonalization_execHandleInputEvent_Parms HandleInputEvent_Parms;
	HandleInputEvent_Parms.Event = Event;
	HandleInputEvent_Parms.fValue = fValue;

	this->ProcessEvent ( pFnHandleInputEvent, &HandleInputEvent_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCPersonalization.Update
// [0x00020802] ( FUNC_Event )
// Parameters infos:
// float                          fDeltaT                        ( CPF_Parm )

void USFXSFHandler_PCPersonalization::eventUpdate ( float fDeltaT )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = (UFunction*) UObject::GObjObjects()->Data[ 61337 ];

	USFXSFHandler_PCPersonalization_eventUpdate_Parms Update_Parms;
	Update_Parms.fDeltaT = fDeltaT;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function SFXGame.SFXSFHandler_PCSave.OnPanelAdded
// [0x00020002] 
// Parameters infos:

void USFXSFHandler_PCSave::OnPanelAdded ( )
{
	static UFunction* pFnOnPanelAdded = NULL;

	if ( ! pFnOnPanelAdded )
		pFnOnPanelAdded = (UFunction*) UObject::GObjObjects()->Data[ 61859 ];

	USFXSFHandler_PCSave_execOnPanelAdded_Parms OnPanelAdded_Parms;

	this->ProcessEvent ( pFnOnPanelAdded, &OnPanelAdded_Parms, NULL );
};

// Function SFXGame.SFXShield_Armour_Player.ApplyDamage
// [0x00420102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          Damage                         ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void ASFXShield_Armour_Player::ApplyDamage ( class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum )
{
	static UFunction* pFnApplyDamage = NULL;

	if ( ! pFnApplyDamage )
		pFnApplyDamage = (UFunction*) UObject::GObjObjects()->Data[ 62061 ];

	ASFXShield_Armour_Player_execApplyDamage_Parms ApplyDamage_Parms;
	ApplyDamage_Parms.DamageType = DamageType;
	ApplyDamage_Parms.InstigatedBy = InstigatedBy;
	ApplyDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnApplyDamage, &ApplyDamage_Parms, NULL );

	if ( Damage )
		*Damage = ApplyDamage_Parms.Damage;

	if ( HitInfo )
		memcpy ( HitInfo, &ApplyDamage_Parms.HitInfo, 0x1C );

	if ( HitLocation )
		memcpy ( HitLocation, &ApplyDamage_Parms.HitLocation, 0xC );

	if ( Momentum )
		memcpy ( Momentum, &ApplyDamage_Parms.Momentum, 0xC );
};

// Function SFXGame.SFXShield_Biotic_Player.ApplyDamage
// [0x00420102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          Damage                         ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void ASFXShield_Biotic_Player::ApplyDamage ( class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum )
{
	static UFunction* pFnApplyDamage = NULL;

	if ( ! pFnApplyDamage )
		pFnApplyDamage = (UFunction*) UObject::GObjObjects()->Data[ 62076 ];

	ASFXShield_Biotic_Player_execApplyDamage_Parms ApplyDamage_Parms;
	ApplyDamage_Parms.DamageType = DamageType;
	ApplyDamage_Parms.InstigatedBy = InstigatedBy;
	ApplyDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnApplyDamage, &ApplyDamage_Parms, NULL );

	if ( Damage )
		*Damage = ApplyDamage_Parms.Damage;

	if ( HitInfo )
		memcpy ( HitInfo, &ApplyDamage_Parms.HitInfo, 0x1C );

	if ( HitLocation )
		memcpy ( HitLocation, &ApplyDamage_Parms.HitLocation, 0xC );

	if ( Momentum )
		memcpy ( Momentum, &ApplyDamage_Parms.Momentum, 0xC );
};

// Function SFXGame.SFXShield_Energy_Player.ApplyDamage
// [0x00420102] 
// Parameters infos:
// class UClass*                  DamageType                     ( CPF_Parm )
// class AController*             InstigatedBy                   ( CPF_Parm )
// class AActor*                  DamageCauser                   ( CPF_Parm )
// float                          Damage                         ( CPF_Parm | CPF_OutParm )
// struct FTraceHitInfo           HitInfo                        ( CPF_Parm | CPF_OutParm )
// struct FVector                 HitLocation                    ( CPF_Parm | CPF_OutParm )
// struct FVector                 Momentum                       ( CPF_Parm | CPF_OutParm )

void ASFXShield_Energy_Player::ApplyDamage ( class UClass* DamageType, class AController* InstigatedBy, class AActor* DamageCauser, float* Damage, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* Momentum )
{
	static UFunction* pFnApplyDamage = NULL;

	if ( ! pFnApplyDamage )
		pFnApplyDamage = (UFunction*) UObject::GObjObjects()->Data[ 62091 ];

	ASFXShield_Energy_Player_execApplyDamage_Parms ApplyDamage_Parms;
	ApplyDamage_Parms.DamageType = DamageType;
	ApplyDamage_Parms.InstigatedBy = InstigatedBy;
	ApplyDamage_Parms.DamageCauser = DamageCauser;

	this->ProcessEvent ( pFnApplyDamage, &ApplyDamage_Parms, NULL );

	if ( Damage )
		*Damage = ApplyDamage_Parms.Damage;

	if ( HitInfo )
		memcpy ( HitInfo, &ApplyDamage_Parms.HitInfo, 0x1C );

	if ( HitLocation )
		memcpy ( HitLocation, &ApplyDamage_Parms.HitLocation, 0xC );

	if ( Momentum )
		memcpy ( Momentum, &ApplyDamage_Parms.Momentum, 0xC );
};

// Function SFXGame.SFXShield_GethEnergy_Player.ScaleShields
// [0x00020102] 
// Parameters infos:

void ASFXShield_GethEnergy_Player::ScaleShields ( )
{
	static UFunction* pFnScaleShields = NULL;

	if ( ! pFnScaleShields )
		pFnScaleShields = (UFunction*) UObject::GObjObjects()->Data[ 62107 ];

	ASFXShield_GethEnergy_Player_execScaleShields_Parms ScaleShields_Parms;

	this->ProcessEvent ( pFnScaleShields, &ScaleShields_Parms, NULL );
};

// Function SFXGame.SFXSignText.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void ASFXSignText::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = (UFunction*) UObject::GObjObjects()->Data[ 62143 ];

	ASFXSignText_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function SFXGame.SFXTreasureUseModuleSaveObject.LoadObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void USFXTreasureUseModuleSaveObject::LoadObject ( class UObject* O )
{
	static UFunction* pFnLoadObject = NULL;

	if ( ! pFnLoadObject )
		pFnLoadObject = (UFunction*) UObject::GObjObjects()->Data[ 62329 ];

	USFXTreasureUseModuleSaveObject_execLoadObject_Parms LoadObject_Parms;
	LoadObject_Parms.O = O;

	this->ProcessEvent ( pFnLoadObject, &LoadObject_Parms, NULL );
};

// Function SFXGame.SFXTreasureUseModuleSaveObject.SaveObject
// [0x00020002] 
// Parameters infos:
// class UObject*                 O                              ( CPF_Parm )

void USFXTreasureUseModuleSaveObject::SaveObject ( class UObject* O )
{
	static UFunction* pFnSaveObject = NULL;

	if ( ! pFnSaveObject )
		pFnSaveObject = (UFunction*) UObject::GObjObjects()->Data[ 62326 ];

	USFXTreasureUseModuleSaveObject_execSaveObject_Parms SaveObject_Parms;
	SaveObject_Parms.O = O;

	this->ProcessEvent ( pFnSaveObject, &SaveObject_Parms, NULL );
};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif